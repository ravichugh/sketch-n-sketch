
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	return cmp_(x, y, []);
}

function eq(x, y)
{
	return cmp_(x, y, []) === EQ;
}

// Guaranteed to terminate if object graph we are traversiving is finite.
// Proof: number of [x,y] pairs is therefore finite so eventually we will
// hit a pair we've seen before and terminate.
function cmp_(x, y, priorPairs)
{
	if (x === y)
	{
		return EQ;
	}

	// This avoids looping forever if someone hacked cycles into the object graph.
	// If we get the same x,y as before, that means we will loop for ever.
	// Return EQ --- they are equal as far as this branch of comparison is concerned.
	for (var i in priorPairs)
	{
		if (x === priorPairs[i][0] && y === priorPairs[i][1])
		{
			return EQ;
		}
	}
	var seenPairs = priorPairs.concat([[x, y]]);

	var type = typeof x;

	if (type !== 'object' && type !== 'function')
	{
		return x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (type === 'function') {
		throw new Error(
			'Comparison error: There is no way to compare functions. '
			+ 'Comparison is only defined on ints, '
			+ 'floats, times, chars, strings, lists of comparable values, '
			+ 'and tuples of comparable values.'
		);
	}

	// Only Javascript objects past this point.

	if ('ctor' in x && typeof x.ctor === 'string')
	{
		if (x.ctor === '::' || x.ctor === '[]')
		{
			while (x.ctor === '::' && y.ctor === '::')
			{
				var ord = cmp_(x._0, y._0, seenPairs);
				if (ord !== EQ)
				{
					return ord;
				}
				x = x._1;
				y = y._1;
			}
			return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
		}

		if (x.ctor.slice(0, 6) === '_Tuple')
		{
			var ord;
			var n = x.ctor.slice(6) - 0;
			var err = 'cannot compare tuples with more than 16 elements.';
			if (n === 0) return EQ;
			if (n >= 1)  { ord = cmp_(x._0,  y._0,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 2)  { ord = cmp_(x._1,  y._1,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 3)  { ord = cmp_(x._2,  y._2,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 4)  { ord = cmp_(x._3,  y._3,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 5)  { ord = cmp_(x._4,  y._4,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 6)  { ord = cmp_(x._5,  y._5,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 7)  { ord = cmp_(x._6,  y._6,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 8)  { ord = cmp_(x._7,  y._7,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 9)  { ord = cmp_(x._8,  y._8,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 10) { ord = cmp_(x._9,  y._9,  seenPairs); if (ord !== EQ) return ord;
			if (n >= 11) { ord = cmp_(x._10, y._10, seenPairs); if (ord !== EQ) return ord;
			if (n >= 12) { ord = cmp_(x._11, y._11, seenPairs); if (ord !== EQ) return ord;
			if (n >= 13) { ord = cmp_(x._12, y._12, seenPairs); if (ord !== EQ) return ord;
			if (n >= 14) { ord = cmp_(x._13, y._13, seenPairs); if (ord !== EQ) return ord;
			if (n >= 15) { ord = cmp_(x._14, y._14, seenPairs); if (ord !== EQ) return ord;
			if (n >= 16) { ord = cmp_(x._15, y._15, seenPairs); if (ord !== EQ) return ord;
			if (n >= 17) throw new Error('Comparison error: ' + err); } } } } } } } } } } } } } } } }
			return EQ;
		}

		// Non-comparable types below, for use in sets and as dictionary keys.
		//
		// Type checker prevents these being used with < > <= >=.

		// convert Dicts and Sets to lists
		if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
		{
			x = _elm_lang$core$Dict$toList(x);
			y = _elm_lang$core$Dict$toList(y);

			return cmp_(x, y, seenPairs);
		}
		if (x.ctor === 'Set_elm_builtin')
		{
			x = _elm_lang$core$Set$toList(x);
			y = _elm_lang$core$Set$toList(y);

			return cmp_(x, y, seenPairs);
		}

		// Other ADTs
		if (x.ctor < y.ctor) { return LT; }
		if (x.ctor > y.ctor) { return GT; }

		// If you made a record with a string ctor field, you will use
		// these comparison semenantics which don't sort they keys as
		// happens in regular record comparison. Just don't make
		// records with a "ctor " field.
		var ord;
		for (var i in x)
		{
			if (i === 'ctor') continue;

			ord = cmp_(x[i], y[i], seenPairs);

			if (ord !== EQ) { return ord; }
		}

		return EQ;
	}

	if (x instanceof Date)
	{
		var xt = x.getTime();
		var yt = y.getTime();
		return xt === yt ? EQ : xt < yt ? LT : GT;
	}

	if (x === null || x.elm_web_socket)
	{
		throw new Error(
			'Comparison error: comparison is only defined on ints, '
			+ 'floats, times, chars, strings, lists of comparable values, '
			+ 'and tuples of comparable values.'
		);
	}

	// Two records.
	var keys = Object.keys(x).sort();

	for (var i in keys)
	{
		var k = keys[i];
		ord = cmp_(x[k], y[k], seenPairs);

		if (ord !== EQ) { return ord; }
	}

	return EQ;
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
  return toString_(v, 7);
}

function toString_(v, maxDepth)
{
  if (maxDepth <= 0)
  {
    return '…';
  } else {
    maxDepth -= 1;
  }

	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString_(v[k], maxDepth));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString_(list, maxDepth);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString_(v._0, maxDepth);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString_(v._0, maxDepth);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString_(_elm_lang$core$Set$toList(v), maxDepth);
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString_(_elm_lang$core$Dict$toList(v), maxDepth);
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString_(v[i], maxDepth);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		var keys = Object.keys(v).sort();

		for (var i in keys)
		{
			var k = keys[i];
			output.push(k + ' = ' + toString_(v[k], maxDepth));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$Color$fmod = F2(
	function (f, n) {
		var integer = _elm_lang$core$Basics$floor(f);
		return (_elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], integer, n)) + f) - _elm_lang$core$Basics$toFloat(integer);
	});
var _elm_lang$core$Color$rgbToHsl = F3(
	function (red, green, blue) {
		var b = _elm_lang$core$Basics$toFloat(blue) / 255;
		var g = _elm_lang$core$Basics$toFloat(green) / 255;
		var r = _elm_lang$core$Basics$toFloat(red) / 255;
		var cMax = A2(
			_elm_lang$core$Basics$max,
			A2(_elm_lang$core$Basics$max, r, g),
			b);
		var cMin = A2(
			_elm_lang$core$Basics$min,
			A2(_elm_lang$core$Basics$min, r, g),
			b);
		var c = cMax - cMin;
		var lightness = (cMax + cMin) / 2;
		var saturation = _elm_lang$core$Native_Utils.eq(lightness, 0) ? 0 : (c / (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)));
		var hue = _elm_lang$core$Basics$degrees(60) * (_elm_lang$core$Native_Utils.eq(cMax, r) ? A2(_elm_lang$core$Color$fmod, (g - b) / c, 6) : (_elm_lang$core$Native_Utils.eq(cMax, g) ? (((b - r) / c) + 2) : (((r - g) / c) + 4)));
		return {ctor: '_Tuple3', _0: hue, _1: saturation, _2: lightness};
	});
var _elm_lang$core$Color$hslToRgb = F3(
	function (hue, saturation, lightness) {
		var normHue = hue / _elm_lang$core$Basics$degrees(60);
		var chroma = (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)) * saturation;
		var x = chroma * (1 - _elm_lang$core$Basics$abs(
			A2(_elm_lang$core$Color$fmod, normHue, 2) - 1));
		var _p0 = (_elm_lang$core$Native_Utils.cmp(normHue, 0) < 0) ? {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 1) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: x, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 2) < 0) ? {ctor: '_Tuple3', _0: x, _1: chroma, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 3) < 0) ? {ctor: '_Tuple3', _0: 0, _1: chroma, _2: x} : ((_elm_lang$core$Native_Utils.cmp(normHue, 4) < 0) ? {ctor: '_Tuple3', _0: 0, _1: x, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 5) < 0) ? {ctor: '_Tuple3', _0: x, _1: 0, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 6) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: 0, _2: x} : {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}))))));
		var r = _p0._0;
		var g = _p0._1;
		var b = _p0._2;
		var m = lightness - (chroma / 2);
		return {ctor: '_Tuple3', _0: r + m, _1: g + m, _2: b + m};
	});
var _elm_lang$core$Color$toRgb = function (color) {
	var _p1 = color;
	if (_p1.ctor === 'RGBA') {
		return {red: _p1._0, green: _p1._1, blue: _p1._2, alpha: _p1._3};
	} else {
		var _p2 = A3(_elm_lang$core$Color$hslToRgb, _p1._0, _p1._1, _p1._2);
		var r = _p2._0;
		var g = _p2._1;
		var b = _p2._2;
		return {
			red: _elm_lang$core$Basics$round(255 * r),
			green: _elm_lang$core$Basics$round(255 * g),
			blue: _elm_lang$core$Basics$round(255 * b),
			alpha: _p1._3
		};
	}
};
var _elm_lang$core$Color$toHsl = function (color) {
	var _p3 = color;
	if (_p3.ctor === 'HSLA') {
		return {hue: _p3._0, saturation: _p3._1, lightness: _p3._2, alpha: _p3._3};
	} else {
		var _p4 = A3(_elm_lang$core$Color$rgbToHsl, _p3._0, _p3._1, _p3._2);
		var h = _p4._0;
		var s = _p4._1;
		var l = _p4._2;
		return {hue: h, saturation: s, lightness: l, alpha: _p3._3};
	}
};
var _elm_lang$core$Color$HSLA = F4(
	function (a, b, c, d) {
		return {ctor: 'HSLA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		return A4(
			_elm_lang$core$Color$HSLA,
			hue - _elm_lang$core$Basics$turns(
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$floor(hue / (2 * _elm_lang$core$Basics$pi)))),
			saturation,
			lightness,
			alpha);
	});
var _elm_lang$core$Color$hsl = F3(
	function (hue, saturation, lightness) {
		return A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, 1);
	});
var _elm_lang$core$Color$complement = function (color) {
	var _p5 = color;
	if (_p5.ctor === 'HSLA') {
		return A4(
			_elm_lang$core$Color$hsla,
			_p5._0 + _elm_lang$core$Basics$degrees(180),
			_p5._1,
			_p5._2,
			_p5._3);
	} else {
		var _p6 = A3(_elm_lang$core$Color$rgbToHsl, _p5._0, _p5._1, _p5._2);
		var h = _p6._0;
		var s = _p6._1;
		var l = _p6._2;
		return A4(
			_elm_lang$core$Color$hsla,
			h + _elm_lang$core$Basics$degrees(180),
			s,
			l,
			_p5._3);
	}
};
var _elm_lang$core$Color$grayscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$greyscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$RGBA = F4(
	function (a, b, c, d) {
		return {ctor: 'RGBA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$rgba = _elm_lang$core$Color$RGBA;
var _elm_lang$core$Color$rgb = F3(
	function (r, g, b) {
		return A4(_elm_lang$core$Color$RGBA, r, g, b, 1);
	});
var _elm_lang$core$Color$lightRed = A4(_elm_lang$core$Color$RGBA, 239, 41, 41, 1);
var _elm_lang$core$Color$red = A4(_elm_lang$core$Color$RGBA, 204, 0, 0, 1);
var _elm_lang$core$Color$darkRed = A4(_elm_lang$core$Color$RGBA, 164, 0, 0, 1);
var _elm_lang$core$Color$lightOrange = A4(_elm_lang$core$Color$RGBA, 252, 175, 62, 1);
var _elm_lang$core$Color$orange = A4(_elm_lang$core$Color$RGBA, 245, 121, 0, 1);
var _elm_lang$core$Color$darkOrange = A4(_elm_lang$core$Color$RGBA, 206, 92, 0, 1);
var _elm_lang$core$Color$lightYellow = A4(_elm_lang$core$Color$RGBA, 255, 233, 79, 1);
var _elm_lang$core$Color$yellow = A4(_elm_lang$core$Color$RGBA, 237, 212, 0, 1);
var _elm_lang$core$Color$darkYellow = A4(_elm_lang$core$Color$RGBA, 196, 160, 0, 1);
var _elm_lang$core$Color$lightGreen = A4(_elm_lang$core$Color$RGBA, 138, 226, 52, 1);
var _elm_lang$core$Color$green = A4(_elm_lang$core$Color$RGBA, 115, 210, 22, 1);
var _elm_lang$core$Color$darkGreen = A4(_elm_lang$core$Color$RGBA, 78, 154, 6, 1);
var _elm_lang$core$Color$lightBlue = A4(_elm_lang$core$Color$RGBA, 114, 159, 207, 1);
var _elm_lang$core$Color$blue = A4(_elm_lang$core$Color$RGBA, 52, 101, 164, 1);
var _elm_lang$core$Color$darkBlue = A4(_elm_lang$core$Color$RGBA, 32, 74, 135, 1);
var _elm_lang$core$Color$lightPurple = A4(_elm_lang$core$Color$RGBA, 173, 127, 168, 1);
var _elm_lang$core$Color$purple = A4(_elm_lang$core$Color$RGBA, 117, 80, 123, 1);
var _elm_lang$core$Color$darkPurple = A4(_elm_lang$core$Color$RGBA, 92, 53, 102, 1);
var _elm_lang$core$Color$lightBrown = A4(_elm_lang$core$Color$RGBA, 233, 185, 110, 1);
var _elm_lang$core$Color$brown = A4(_elm_lang$core$Color$RGBA, 193, 125, 17, 1);
var _elm_lang$core$Color$darkBrown = A4(_elm_lang$core$Color$RGBA, 143, 89, 2, 1);
var _elm_lang$core$Color$black = A4(_elm_lang$core$Color$RGBA, 0, 0, 0, 1);
var _elm_lang$core$Color$white = A4(_elm_lang$core$Color$RGBA, 255, 255, 255, 1);
var _elm_lang$core$Color$lightGrey = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$grey = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGrey = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightGray = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$gray = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGray = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightCharcoal = A4(_elm_lang$core$Color$RGBA, 136, 138, 133, 1);
var _elm_lang$core$Color$charcoal = A4(_elm_lang$core$Color$RGBA, 85, 87, 83, 1);
var _elm_lang$core$Color$darkCharcoal = A4(_elm_lang$core$Color$RGBA, 46, 52, 54, 1);
var _elm_lang$core$Color$Radial = F5(
	function (a, b, c, d, e) {
		return {ctor: 'Radial', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Color$radial = _elm_lang$core$Color$Radial;
var _elm_lang$core$Color$Linear = F3(
	function (a, b, c) {
		return {ctor: 'Linear', _0: a, _1: b, _2: c};
	});
var _elm_lang$core$Color$linear = _elm_lang$core$Color$Linear;

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p2 = dict;
	_v8_2:
	do {
		if (_p2.ctor === 'RBNode_elm_builtin') {
			if (_p2._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v8_2;
			}
		} else {
			if (_p2._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v8_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$keyCompare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p3) {
				stepState:
				while (true) {
					var _p4 = _p3;
					var _p11 = _p4._1;
					var _p10 = _p4._0;
					var _p5 = _p10;
					if (_p5.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p10,
							_1: A3(rightStep, rKey, rValue, _p11)
						};
					} else {
						var _p9 = _p5._1;
						var _p8 = _p5._0._1;
						var _p7 = _p5._0._0;
						var _p6 = A2(_elm_lang$core$Dict$keyCompare, _p7, rKey);
						switch (_p6.ctor) {
							case 'LT':
								var _v12 = rKey,
									_v13 = rValue,
									_v14 = {
									ctor: '_Tuple2',
									_0: _p9,
									_1: A3(leftStep, _p7, _p8, _p11)
								};
								rKey = _v12;
								rValue = _v13;
								_p3 = _v14;
								continue stepState;
							case 'GT':
								return {
									ctor: '_Tuple2',
									_0: _p10,
									_1: A3(rightStep, rKey, rValue, _p11)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _p9,
									_1: A4(bothStep, _p7, _p8, rValue, _p11)
								};
						}
					}
				}
			});
		var _p12 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p12._0;
		var intermediateResult = _p12._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p13, result) {
					var _p14 = _p13;
					return A3(leftStep, _p14._0, _p14._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v17 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p15._4),
					_v18 = _p15._3;
				n = _v17;
				dict = _v18;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p16 = dict;
			if (_p16.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p17 = A2(_elm_lang$core$Dict$keyCompare, targetKey, _p16._1);
				switch (_p17.ctor) {
					case 'LT':
						var _v21 = targetKey,
							_v22 = _p16._3;
						targetKey = _v21;
						dict = _v22;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p16._2);
					default:
						var _v23 = targetKey,
							_v24 = _p16._4;
						targetKey = _v23;
						dict = _v24;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p18 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p18.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p19 = r;
			if (_p19.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v27 = _p19._1,
					_v28 = _p19._2,
					_v29 = _p19._4;
				k = _v27;
				v = _v28;
				r = _v29;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p20 = t;
	if (_p20.ctor === 'RBNode_elm_builtin') {
		var _p21 = _p20._0;
		return _elm_lang$core$Native_Utils.eq(_p21, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p21, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p23 = color;
	switch (_p23.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p24 = dict;
	if ((_p24.ctor === 'RBNode_elm_builtin') && (_p24._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p24._1, _p24._2, _p24._3, _p24._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p25 = dict;
	if (_p25.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p25._0),
			_p25._1,
			_p25._2,
			_p25._3,
			_p25._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p27 = t;
	if (_p27.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p27._1, _p27._2, _p27._3, _p27._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p28 = tree;
	_v37_6:
	do {
		_v37_5:
		do {
			_v37_4:
			do {
				_v37_3:
				do {
					_v37_2:
					do {
						_v37_1:
						do {
							_v37_0:
							do {
								if (_p28.ctor === 'RBNode_elm_builtin') {
									if (_p28._3.ctor === 'RBNode_elm_builtin') {
										if (_p28._4.ctor === 'RBNode_elm_builtin') {
											switch (_p28._3._0.ctor) {
												case 'Red':
													switch (_p28._4._0.ctor) {
														case 'Red':
															if ((_p28._3._3.ctor === 'RBNode_elm_builtin') && (_p28._3._3._0.ctor === 'Red')) {
																break _v37_0;
															} else {
																if ((_p28._3._4.ctor === 'RBNode_elm_builtin') && (_p28._3._4._0.ctor === 'Red')) {
																	break _v37_1;
																} else {
																	if ((_p28._4._3.ctor === 'RBNode_elm_builtin') && (_p28._4._3._0.ctor === 'Red')) {
																		break _v37_2;
																	} else {
																		if ((_p28._4._4.ctor === 'RBNode_elm_builtin') && (_p28._4._4._0.ctor === 'Red')) {
																			break _v37_3;
																		} else {
																			break _v37_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p28._3._3.ctor === 'RBNode_elm_builtin') && (_p28._3._3._0.ctor === 'Red')) {
																break _v37_0;
															} else {
																if ((_p28._3._4.ctor === 'RBNode_elm_builtin') && (_p28._3._4._0.ctor === 'Red')) {
																	break _v37_1;
																} else {
																	if (((((_p28._0.ctor === 'BBlack') && (_p28._4._3.ctor === 'RBNode_elm_builtin')) && (_p28._4._3._0.ctor === 'Black')) && (_p28._4._4.ctor === 'RBNode_elm_builtin')) && (_p28._4._4._0.ctor === 'Black')) {
																		break _v37_4;
																	} else {
																		break _v37_6;
																	}
																}
															}
														default:
															if ((_p28._3._3.ctor === 'RBNode_elm_builtin') && (_p28._3._3._0.ctor === 'Red')) {
																break _v37_0;
															} else {
																if ((_p28._3._4.ctor === 'RBNode_elm_builtin') && (_p28._3._4._0.ctor === 'Red')) {
																	break _v37_1;
																} else {
																	break _v37_6;
																}
															}
													}
												case 'NBlack':
													switch (_p28._4._0.ctor) {
														case 'Red':
															if ((_p28._4._3.ctor === 'RBNode_elm_builtin') && (_p28._4._3._0.ctor === 'Red')) {
																break _v37_2;
															} else {
																if ((_p28._4._4.ctor === 'RBNode_elm_builtin') && (_p28._4._4._0.ctor === 'Red')) {
																	break _v37_3;
																} else {
																	if (((((_p28._0.ctor === 'BBlack') && (_p28._3._3.ctor === 'RBNode_elm_builtin')) && (_p28._3._3._0.ctor === 'Black')) && (_p28._3._4.ctor === 'RBNode_elm_builtin')) && (_p28._3._4._0.ctor === 'Black')) {
																		break _v37_5;
																	} else {
																		break _v37_6;
																	}
																}
															}
														case 'NBlack':
															if (_p28._0.ctor === 'BBlack') {
																if ((((_p28._4._3.ctor === 'RBNode_elm_builtin') && (_p28._4._3._0.ctor === 'Black')) && (_p28._4._4.ctor === 'RBNode_elm_builtin')) && (_p28._4._4._0.ctor === 'Black')) {
																	break _v37_4;
																} else {
																	if ((((_p28._3._3.ctor === 'RBNode_elm_builtin') && (_p28._3._3._0.ctor === 'Black')) && (_p28._3._4.ctor === 'RBNode_elm_builtin')) && (_p28._3._4._0.ctor === 'Black')) {
																		break _v37_5;
																	} else {
																		break _v37_6;
																	}
																}
															} else {
																break _v37_6;
															}
														default:
															if (((((_p28._0.ctor === 'BBlack') && (_p28._3._3.ctor === 'RBNode_elm_builtin')) && (_p28._3._3._0.ctor === 'Black')) && (_p28._3._4.ctor === 'RBNode_elm_builtin')) && (_p28._3._4._0.ctor === 'Black')) {
																break _v37_5;
															} else {
																break _v37_6;
															}
													}
												default:
													switch (_p28._4._0.ctor) {
														case 'Red':
															if ((_p28._4._3.ctor === 'RBNode_elm_builtin') && (_p28._4._3._0.ctor === 'Red')) {
																break _v37_2;
															} else {
																if ((_p28._4._4.ctor === 'RBNode_elm_builtin') && (_p28._4._4._0.ctor === 'Red')) {
																	break _v37_3;
																} else {
																	break _v37_6;
																}
															}
														case 'NBlack':
															if (((((_p28._0.ctor === 'BBlack') && (_p28._4._3.ctor === 'RBNode_elm_builtin')) && (_p28._4._3._0.ctor === 'Black')) && (_p28._4._4.ctor === 'RBNode_elm_builtin')) && (_p28._4._4._0.ctor === 'Black')) {
																break _v37_4;
															} else {
																break _v37_6;
															}
														default:
															break _v37_6;
													}
											}
										} else {
											switch (_p28._3._0.ctor) {
												case 'Red':
													if ((_p28._3._3.ctor === 'RBNode_elm_builtin') && (_p28._3._3._0.ctor === 'Red')) {
														break _v37_0;
													} else {
														if ((_p28._3._4.ctor === 'RBNode_elm_builtin') && (_p28._3._4._0.ctor === 'Red')) {
															break _v37_1;
														} else {
															break _v37_6;
														}
													}
												case 'NBlack':
													if (((((_p28._0.ctor === 'BBlack') && (_p28._3._3.ctor === 'RBNode_elm_builtin')) && (_p28._3._3._0.ctor === 'Black')) && (_p28._3._4.ctor === 'RBNode_elm_builtin')) && (_p28._3._4._0.ctor === 'Black')) {
														break _v37_5;
													} else {
														break _v37_6;
													}
												default:
													break _v37_6;
											}
										}
									} else {
										if (_p28._4.ctor === 'RBNode_elm_builtin') {
											switch (_p28._4._0.ctor) {
												case 'Red':
													if ((_p28._4._3.ctor === 'RBNode_elm_builtin') && (_p28._4._3._0.ctor === 'Red')) {
														break _v37_2;
													} else {
														if ((_p28._4._4.ctor === 'RBNode_elm_builtin') && (_p28._4._4._0.ctor === 'Red')) {
															break _v37_3;
														} else {
															break _v37_6;
														}
													}
												case 'NBlack':
													if (((((_p28._0.ctor === 'BBlack') && (_p28._4._3.ctor === 'RBNode_elm_builtin')) && (_p28._4._3._0.ctor === 'Black')) && (_p28._4._4.ctor === 'RBNode_elm_builtin')) && (_p28._4._4._0.ctor === 'Black')) {
														break _v37_4;
													} else {
														break _v37_6;
													}
												default:
													break _v37_6;
											}
										} else {
											break _v37_6;
										}
									}
								} else {
									break _v37_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p28._0)(_p28._3._3._1)(_p28._3._3._2)(_p28._3._1)(_p28._3._2)(_p28._1)(_p28._2)(_p28._3._3._3)(_p28._3._3._4)(_p28._3._4)(_p28._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p28._0)(_p28._3._1)(_p28._3._2)(_p28._3._4._1)(_p28._3._4._2)(_p28._1)(_p28._2)(_p28._3._3)(_p28._3._4._3)(_p28._3._4._4)(_p28._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p28._0)(_p28._1)(_p28._2)(_p28._4._3._1)(_p28._4._3._2)(_p28._4._1)(_p28._4._2)(_p28._3)(_p28._4._3._3)(_p28._4._3._4)(_p28._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p28._0)(_p28._1)(_p28._2)(_p28._4._1)(_p28._4._2)(_p28._4._4._1)(_p28._4._4._2)(_p28._3)(_p28._4._3)(_p28._4._4._3)(_p28._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p28._4._3._1,
				_p28._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p28._1, _p28._2, _p28._3, _p28._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p28._4._1,
					_p28._4._2,
					_p28._4._3._4,
					_elm_lang$core$Dict$redden(_p28._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p28._3._4._1,
			_p28._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p28._3._1,
				_p28._3._2,
				_elm_lang$core$Dict$redden(_p28._3._3),
				_p28._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p28._1, _p28._2, _p28._3._4._4, _p28._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p29 = r;
		if (_p29.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p29._0, _p29._1, _p29._2, _p29._3, _p29._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p30 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p30._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p30._1.ctor === 'RBEmpty_elm_builtin') {
				var _p31 = color;
				switch (_p31.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p34 = _p30._1._0;
				var _p33 = _p30._0._0;
				var _p32 = {ctor: '_Tuple3', _0: color, _1: _p33, _2: _p34};
				if ((((_p32.ctor === '_Tuple3') && (_p32._0.ctor === 'Black')) && (_p32._1.ctor === 'LBlack')) && (_p32._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p30._1._1, _p30._1._2, _p30._1._3, _p30._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p33),
						_elm_lang$core$Basics$toString(_p34));
				}
			}
		} else {
			if (_p30._1.ctor === 'RBEmpty_elm_builtin') {
				var _p37 = _p30._1._0;
				var _p36 = _p30._0._0;
				var _p35 = {ctor: '_Tuple3', _0: color, _1: _p36, _2: _p37};
				if ((((_p35.ctor === '_Tuple3') && (_p35._0.ctor === 'Black')) && (_p35._1.ctor === 'Red')) && (_p35._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p30._0._1, _p30._0._2, _p30._0._3, _p30._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p36),
						_elm_lang$core$Basics$toString(_p37));
				}
			} else {
				var _p41 = _p30._0._2;
				var _p40 = _p30._0._4;
				var _p39 = _p30._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p30._0._0, _p39, _p41, _p30._0._3, _p40);
				var _p38 = A3(_elm_lang$core$Dict$maxWithDefault, _p39, _p41, _p40);
				var k = _p38._0;
				var v = _p38._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p42 = dict;
		if (_p42.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p43 = _p42._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p42._0,
				_p43,
				A2(f, _p43, _p42._2),
				A2(_elm_lang$core$Dict$map, f, _p42._3),
				A2(_elm_lang$core$Dict$map, f, _p42._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p44 = dict;
			if (_p44.ctor === 'RBEmpty_elm_builtin') {
				var _p45 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p45.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p45._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p56 = _p44._2;
				var _p55 = _p44._4;
				var _p54 = _p44._3;
				var _p53 = _p44._1;
				var _p52 = _p44._0;
				var _p46 = A2(_elm_lang$core$Dict$keyCompare, k, _p53);
				switch (_p46.ctor) {
					case 'EQ':
						var _p47 = alter(
							_elm_lang$core$Maybe$Just(_p56));
						if (_p47.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p52, _p54, _p55)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p52, _p53, _p47._0, _p54, _p55)
							};
						}
					case 'LT':
						var _p48 = up(_p54);
						var flag = _p48._0;
						var newLeft = _p48._1;
						var _p49 = flag;
						switch (_p49.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p52, _p53, _p56, newLeft, _p55)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p52, _p53, _p56, newLeft, _p55)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p52, _p53, _p56, newLeft, _p55)
								};
						}
					default:
						var _p50 = up(_p55);
						var flag = _p50._0;
						var newRight = _p50._1;
						var _p51 = flag;
						switch (_p51.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p52, _p53, _p56, _p54, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p52, _p53, _p56, _p54, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p52, _p53, _p56, _p54, newRight)
								};
						}
				}
			}
		};
		var _p57 = up(dict);
		var flag = _p57._0;
		var updatedDict = _p57._1;
		var _p58 = flag;
		switch (_p58.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p59) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p60) {
				var _p61 = _p60;
				var _p63 = _p61._1;
				var _p62 = _p61._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p62),
					_1: _p63
				} : {
					ctor: '_Tuple2',
					_0: _p62,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p63)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p64, dict) {
				var _p65 = _p64;
				return A3(_elm_lang$core$Dict$insert, _p65._0, _p65._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$keyboard$Keyboard$onSelfMsg = F3(
	function (router, _p0, state) {
		var _p1 = _p0;
		var _p2 = A2(_elm_lang$core$Dict$get, _p1.category, state);
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p1.keyCode));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p3) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.taggers)));
		}
	});
var _elm_lang$keyboard$Keyboard_ops = _elm_lang$keyboard$Keyboard_ops || {};
_elm_lang$keyboard$Keyboard_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p4) {
				return task2;
			},
			task1);
	});
var _elm_lang$keyboard$Keyboard$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$keyboard$Keyboard$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p5 = maybeValues;
		if (_p5.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p5._0});
		}
	});
var _elm_lang$keyboard$Keyboard$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p6 = subs;
			if (_p6.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p6._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p6._0._0,
					_elm_lang$keyboard$Keyboard$categorizeHelpHelp(_p6._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$keyboard$Keyboard$categorize = function (subs) {
	return A2(_elm_lang$keyboard$Keyboard$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$keyboard$Keyboard$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$keyboard$Keyboard$subscription = _elm_lang$core$Native_Platform.leaf('Keyboard');
var _elm_lang$keyboard$Keyboard$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$keyboard$Keyboard$Msg = F2(
	function (a, b) {
		return {category: a, keyCode: b};
	});
var _elm_lang$keyboard$Keyboard$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(
								A3(
									_elm_lang$dom$Dom_LowLevel$onDocument,
									category,
									_elm_lang$keyboard$Keyboard$keyCode,
									function (_p7) {
										return A2(
											_elm_lang$core$Platform$sendToSelf,
											router,
											A2(_elm_lang$keyboard$Keyboard$Msg, category, _p7));
									})));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p8, taggers, task) {
				var _p9 = _p8;
				return A2(
					_elm_lang$core$Task$map,
					A2(
						_elm_lang$core$Dict$insert,
						category,
						A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, _p9.pid)),
					task);
			});
		var leftStep = F3(
			function (category, _p10, task) {
				var _p11 = _p10;
				return A2(
					_elm_lang$keyboard$Keyboard_ops['&>'],
					_elm_lang$core$Process$kill(_p11.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$keyboard$Keyboard$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$keyboard$Keyboard$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$keyboard$Keyboard$presses = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keypress', tagger));
};
var _elm_lang$keyboard$Keyboard$downs = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keydown', tagger));
};
var _elm_lang$keyboard$Keyboard$ups = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keyup', tagger));
};
var _elm_lang$keyboard$Keyboard$subMap = F2(
	function (func, _p12) {
		var _p13 = _p12;
		return A2(
			_elm_lang$keyboard$Keyboard$MySub,
			_p13._0,
			function (_p14) {
				return func(
					_p13._1(_p14));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Keyboard'] = {pkg: 'elm-lang/keyboard', init: _elm_lang$keyboard$Keyboard$init, onEffects: _elm_lang$keyboard$Keyboard$onEffects, onSelfMsg: _elm_lang$keyboard$Keyboard$onSelfMsg, tag: 'sub', subMap: _elm_lang$keyboard$Keyboard$subMap};

var _elm_lang$lazy$Native_Lazy = function() {

function memoize(thunk)
{
    var value;
    var isForced = false;
    return function(tuple0) {
        if (!isForced) {
            value = thunk(tuple0);
            isForced = true;
        }
        return value;
    };
}

return {
    memoize: memoize
};

}();

var _elm_lang$lazy$Lazy$force = function (_p0) {
	var _p1 = _p0;
	return _p1._0(
		{ctor: '_Tuple0'});
};
var _elm_lang$lazy$Lazy$Lazy = function (a) {
	return {ctor: 'Lazy', _0: a};
};
var _elm_lang$lazy$Lazy$lazy = function (thunk) {
	return _elm_lang$lazy$Lazy$Lazy(
		_elm_lang$lazy$Native_Lazy.memoize(thunk));
};
var _elm_lang$lazy$Lazy$map = F2(
	function (f, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p2) {
				var _p3 = _p2;
				return f(
					_elm_lang$lazy$Lazy$force(a));
			});
	});
var _elm_lang$lazy$Lazy$map2 = F3(
	function (f, a, b) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p4) {
				var _p5 = _p4;
				return A2(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b));
			});
	});
var _elm_lang$lazy$Lazy$map3 = F4(
	function (f, a, b, c) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p6) {
				var _p7 = _p6;
				return A3(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c));
			});
	});
var _elm_lang$lazy$Lazy$map4 = F5(
	function (f, a, b, c, d) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p8) {
				var _p9 = _p8;
				return A4(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d));
			});
	});
var _elm_lang$lazy$Lazy$map5 = F6(
	function (f, a, b, c, d, e) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p10) {
				var _p11 = _p10;
				return A5(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d),
					_elm_lang$lazy$Lazy$force(e));
			});
	});
var _elm_lang$lazy$Lazy$apply = F2(
	function (f, x) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_lang$lazy$Lazy$force,
					f,
					_elm_lang$lazy$Lazy$force(x));
			});
	});
var _elm_lang$lazy$Lazy$andThen = F2(
	function (callback, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p14) {
				var _p15 = _p14;
				return _elm_lang$lazy$Lazy$force(
					callback(
						_elm_lang$lazy$Lazy$force(a)));
			});
	});

var _elm_lang$mouse$Mouse_ops = _elm_lang$mouse$Mouse_ops || {};
_elm_lang$mouse$Mouse_ops['&>'] = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return t2;
			},
			t1);
	});
var _elm_lang$mouse$Mouse$onSelfMsg = F3(
	function (router, _p1, state) {
		var _p2 = _p1;
		var _p3 = A2(_elm_lang$core$Dict$get, _p2.category, state);
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p2.position));
			};
			return A2(
				_elm_lang$mouse$Mouse_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p3._0.taggers)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$mouse$Mouse$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$mouse$Mouse$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p4 = maybeValues;
		if (_p4.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p4._0});
		}
	});
var _elm_lang$mouse$Mouse$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p5 = subs;
			if (_p5.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p5._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p5._0._0,
					_elm_lang$mouse$Mouse$categorizeHelpHelp(_p5._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$mouse$Mouse$categorize = function (subs) {
	return A2(_elm_lang$mouse$Mouse$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$mouse$Mouse$subscription = _elm_lang$core$Native_Platform.leaf('Mouse');
var _elm_lang$mouse$Mouse$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _elm_lang$mouse$Mouse$position = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$mouse$Mouse$Position,
	A2(_elm_lang$core$Json_Decode$field, 'pageX', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'pageY', _elm_lang$core$Json_Decode$int));
var _elm_lang$mouse$Mouse$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$mouse$Mouse$Msg = F2(
	function (a, b) {
		return {category: a, position: b};
	});
var _elm_lang$mouse$Mouse$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				var tracker = A3(
					_elm_lang$dom$Dom_LowLevel$onDocument,
					category,
					_elm_lang$mouse$Mouse$position,
					function (_p6) {
						return A2(
							_elm_lang$core$Platform$sendToSelf,
							router,
							A2(_elm_lang$mouse$Mouse$Msg, category, _p6));
					});
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$mouse$Mouse$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(tracker));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p7, taggers, task) {
				var _p8 = _p7;
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$core$Dict$insert,
								category,
								A2(_elm_lang$mouse$Mouse$Watcher, taggers, _p8.pid),
								state));
					},
					task);
			});
		var leftStep = F3(
			function (category, _p9, task) {
				var _p10 = _p9;
				return A2(
					_elm_lang$mouse$Mouse_ops['&>'],
					_elm_lang$core$Process$kill(_p10.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$mouse$Mouse$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$mouse$Mouse$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$mouse$Mouse$clicks = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'click', tagger));
};
var _elm_lang$mouse$Mouse$moves = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousemove', tagger));
};
var _elm_lang$mouse$Mouse$downs = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousedown', tagger));
};
var _elm_lang$mouse$Mouse$ups = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mouseup', tagger));
};
var _elm_lang$mouse$Mouse$subMap = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return A2(
			_elm_lang$mouse$Mouse$MySub,
			_p12._0,
			function (_p13) {
				return func(
					_p12._1(_p13));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Mouse'] = {pkg: 'elm-lang/mouse', init: _elm_lang$mouse$Mouse$init, onEffects: _elm_lang$mouse$Mouse$onEffects, onSelfMsg: _elm_lang$mouse$Mouse$onSelfMsg, tag: 'sub', subMap: _elm_lang$mouse$Mouse$subMap};

// import Native.Scheduler, Utils //

var _elm_lang$page_visibility$Native_PageVisibility = function() {


// sort out the prefixes

var hidden, change;
if (typeof document.hidden !== 'undefined')
{
	hidden = 'hidden';
	change = 'visibilitychange';
}
else if (typeof document.mozHidden !== 'undefined')
{
	hidden = 'mozHidden';
	change = 'mozvisibilitychange';
}
else if (typeof document.msHidden !== 'undefined')
{
	hidden = 'msHidden';
	change = 'msvisibilitychange';
}
else if (typeof document.webkitHidden !== 'undefined')
{
	hidden = 'webkitHidden';
	change = 'webkitvisibilitychange';
}


// actually provide functionality

function visibilityChange(toTask)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

		function performTask()
		{
			_elm_lang$core$Native_Scheduler.rawSpawn(toTask(document[hidden]));
		}

		document.addEventListener(change, performTask);

		return function()
		{
			document.removeEventListener(change, performTask);
		};
	});
}

var isHidden = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
	callback(_elm_lang$core$Native_Scheduler.succeed(document[hidden]));
});


return {
	visibilityChange: visibilityChange,
	isHidden: isHidden
};

}();

var _elm_lang$page_visibility$PageVisibility$onVisibilityChange = _elm_lang$page_visibility$Native_PageVisibility.visibilityChange;
var _elm_lang$page_visibility$PageVisibility$onEffects = F3(
	function (router, newSubs, state) {
		var _p0 = {ctor: '_Tuple2', _0: state, _1: newSubs};
		if (_p0._0.ctor === 'Nothing') {
			if (_p0._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(state);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: newSubs, pid: pid}));
					},
					_elm_lang$core$Process$spawn(
						_elm_lang$page_visibility$PageVisibility$onVisibilityChange(
							_elm_lang$core$Platform$sendToSelf(router))));
			}
		} else {
			if (_p0._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p1) {
						return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
					},
					_elm_lang$core$Process$kill(_p0._0._0.pid));
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						{subs: newSubs, pid: _p0._0._0.pid}));
			}
		}
	});
var _elm_lang$page_visibility$PageVisibility$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _elm_lang$page_visibility$PageVisibility$isHidden = _elm_lang$page_visibility$Native_PageVisibility.isHidden;
var _elm_lang$page_visibility$PageVisibility$isVisible = A2(_elm_lang$core$Task$map, _elm_lang$core$Basics$not, _elm_lang$page_visibility$PageVisibility$isHidden);
var _elm_lang$page_visibility$PageVisibility$subscription = _elm_lang$core$Native_Platform.leaf('PageVisibility');
var _elm_lang$page_visibility$PageVisibility$Hidden = {ctor: 'Hidden'};
var _elm_lang$page_visibility$PageVisibility$Visible = {ctor: 'Visible'};
var _elm_lang$page_visibility$PageVisibility$hiddenToVisibility = function (hidden) {
	return hidden ? _elm_lang$page_visibility$PageVisibility$Hidden : _elm_lang$page_visibility$PageVisibility$Visible;
};
var _elm_lang$page_visibility$PageVisibility$visibility = A2(_elm_lang$core$Task$map, _elm_lang$page_visibility$PageVisibility$hiddenToVisibility, _elm_lang$page_visibility$PageVisibility$isHidden);
var _elm_lang$page_visibility$PageVisibility$onSelfMsg = F3(
	function (router, hidden, state) {
		var _p2 = state;
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (_p3) {
				var _p4 = _p3;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p4._0(
						_elm_lang$page_visibility$PageVisibility$hiddenToVisibility(hidden)));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p5) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.subs)));
		}
	});
var _elm_lang$page_visibility$PageVisibility$Tagger = function (a) {
	return {ctor: 'Tagger', _0: a};
};
var _elm_lang$page_visibility$PageVisibility$visibilityChanges = function (tagger) {
	return _elm_lang$page_visibility$PageVisibility$subscription(
		_elm_lang$page_visibility$PageVisibility$Tagger(tagger));
};
var _elm_lang$page_visibility$PageVisibility$subMap = F2(
	function (func, _p6) {
		var _p7 = _p6;
		return _elm_lang$page_visibility$PageVisibility$Tagger(
			function (_p8) {
				return func(
					_p7._0(_p8));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['PageVisibility'] = {pkg: 'elm-lang/page-visibility', init: _elm_lang$page_visibility$PageVisibility$init, onEffects: _elm_lang$page_visibility$PageVisibility$onEffects, onSelfMsg: _elm_lang$page_visibility$PageVisibility$onSelfMsg, tag: 'sub', subMap: _elm_lang$page_visibility$PageVisibility$subMap};

var _elm_lang$svg$Svg$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$svg$Svg$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$svg$Svg$svgNamespace = A2(
	_elm_lang$virtual_dom$VirtualDom$property,
	'namespace',
	_elm_lang$core$Json_Encode$string('http://www.w3.org/2000/svg'));
var _elm_lang$svg$Svg$node = F3(
	function (name, attributes, children) {
		return A3(
			_elm_lang$virtual_dom$VirtualDom$node,
			name,
			{ctor: '::', _0: _elm_lang$svg$Svg$svgNamespace, _1: attributes},
			children);
	});
var _elm_lang$svg$Svg$svg = _elm_lang$svg$Svg$node('svg');
var _elm_lang$svg$Svg$foreignObject = _elm_lang$svg$Svg$node('foreignObject');
var _elm_lang$svg$Svg$animate = _elm_lang$svg$Svg$node('animate');
var _elm_lang$svg$Svg$animateColor = _elm_lang$svg$Svg$node('animateColor');
var _elm_lang$svg$Svg$animateMotion = _elm_lang$svg$Svg$node('animateMotion');
var _elm_lang$svg$Svg$animateTransform = _elm_lang$svg$Svg$node('animateTransform');
var _elm_lang$svg$Svg$mpath = _elm_lang$svg$Svg$node('mpath');
var _elm_lang$svg$Svg$set = _elm_lang$svg$Svg$node('set');
var _elm_lang$svg$Svg$a = _elm_lang$svg$Svg$node('a');
var _elm_lang$svg$Svg$defs = _elm_lang$svg$Svg$node('defs');
var _elm_lang$svg$Svg$g = _elm_lang$svg$Svg$node('g');
var _elm_lang$svg$Svg$marker = _elm_lang$svg$Svg$node('marker');
var _elm_lang$svg$Svg$mask = _elm_lang$svg$Svg$node('mask');
var _elm_lang$svg$Svg$pattern = _elm_lang$svg$Svg$node('pattern');
var _elm_lang$svg$Svg$switch = _elm_lang$svg$Svg$node('switch');
var _elm_lang$svg$Svg$symbol = _elm_lang$svg$Svg$node('symbol');
var _elm_lang$svg$Svg$desc = _elm_lang$svg$Svg$node('desc');
var _elm_lang$svg$Svg$metadata = _elm_lang$svg$Svg$node('metadata');
var _elm_lang$svg$Svg$title = _elm_lang$svg$Svg$node('title');
var _elm_lang$svg$Svg$feBlend = _elm_lang$svg$Svg$node('feBlend');
var _elm_lang$svg$Svg$feColorMatrix = _elm_lang$svg$Svg$node('feColorMatrix');
var _elm_lang$svg$Svg$feComponentTransfer = _elm_lang$svg$Svg$node('feComponentTransfer');
var _elm_lang$svg$Svg$feComposite = _elm_lang$svg$Svg$node('feComposite');
var _elm_lang$svg$Svg$feConvolveMatrix = _elm_lang$svg$Svg$node('feConvolveMatrix');
var _elm_lang$svg$Svg$feDiffuseLighting = _elm_lang$svg$Svg$node('feDiffuseLighting');
var _elm_lang$svg$Svg$feDisplacementMap = _elm_lang$svg$Svg$node('feDisplacementMap');
var _elm_lang$svg$Svg$feFlood = _elm_lang$svg$Svg$node('feFlood');
var _elm_lang$svg$Svg$feFuncA = _elm_lang$svg$Svg$node('feFuncA');
var _elm_lang$svg$Svg$feFuncB = _elm_lang$svg$Svg$node('feFuncB');
var _elm_lang$svg$Svg$feFuncG = _elm_lang$svg$Svg$node('feFuncG');
var _elm_lang$svg$Svg$feFuncR = _elm_lang$svg$Svg$node('feFuncR');
var _elm_lang$svg$Svg$feGaussianBlur = _elm_lang$svg$Svg$node('feGaussianBlur');
var _elm_lang$svg$Svg$feImage = _elm_lang$svg$Svg$node('feImage');
var _elm_lang$svg$Svg$feMerge = _elm_lang$svg$Svg$node('feMerge');
var _elm_lang$svg$Svg$feMergeNode = _elm_lang$svg$Svg$node('feMergeNode');
var _elm_lang$svg$Svg$feMorphology = _elm_lang$svg$Svg$node('feMorphology');
var _elm_lang$svg$Svg$feOffset = _elm_lang$svg$Svg$node('feOffset');
var _elm_lang$svg$Svg$feSpecularLighting = _elm_lang$svg$Svg$node('feSpecularLighting');
var _elm_lang$svg$Svg$feTile = _elm_lang$svg$Svg$node('feTile');
var _elm_lang$svg$Svg$feTurbulence = _elm_lang$svg$Svg$node('feTurbulence');
var _elm_lang$svg$Svg$font = _elm_lang$svg$Svg$node('font');
var _elm_lang$svg$Svg$linearGradient = _elm_lang$svg$Svg$node('linearGradient');
var _elm_lang$svg$Svg$radialGradient = _elm_lang$svg$Svg$node('radialGradient');
var _elm_lang$svg$Svg$stop = _elm_lang$svg$Svg$node('stop');
var _elm_lang$svg$Svg$circle = _elm_lang$svg$Svg$node('circle');
var _elm_lang$svg$Svg$ellipse = _elm_lang$svg$Svg$node('ellipse');
var _elm_lang$svg$Svg$image = _elm_lang$svg$Svg$node('image');
var _elm_lang$svg$Svg$line = _elm_lang$svg$Svg$node('line');
var _elm_lang$svg$Svg$path = _elm_lang$svg$Svg$node('path');
var _elm_lang$svg$Svg$polygon = _elm_lang$svg$Svg$node('polygon');
var _elm_lang$svg$Svg$polyline = _elm_lang$svg$Svg$node('polyline');
var _elm_lang$svg$Svg$rect = _elm_lang$svg$Svg$node('rect');
var _elm_lang$svg$Svg$use = _elm_lang$svg$Svg$node('use');
var _elm_lang$svg$Svg$feDistantLight = _elm_lang$svg$Svg$node('feDistantLight');
var _elm_lang$svg$Svg$fePointLight = _elm_lang$svg$Svg$node('fePointLight');
var _elm_lang$svg$Svg$feSpotLight = _elm_lang$svg$Svg$node('feSpotLight');
var _elm_lang$svg$Svg$altGlyph = _elm_lang$svg$Svg$node('altGlyph');
var _elm_lang$svg$Svg$altGlyphDef = _elm_lang$svg$Svg$node('altGlyphDef');
var _elm_lang$svg$Svg$altGlyphItem = _elm_lang$svg$Svg$node('altGlyphItem');
var _elm_lang$svg$Svg$glyph = _elm_lang$svg$Svg$node('glyph');
var _elm_lang$svg$Svg$glyphRef = _elm_lang$svg$Svg$node('glyphRef');
var _elm_lang$svg$Svg$textPath = _elm_lang$svg$Svg$node('textPath');
var _elm_lang$svg$Svg$text_ = _elm_lang$svg$Svg$node('text');
var _elm_lang$svg$Svg$tref = _elm_lang$svg$Svg$node('tref');
var _elm_lang$svg$Svg$tspan = _elm_lang$svg$Svg$node('tspan');
var _elm_lang$svg$Svg$clipPath = _elm_lang$svg$Svg$node('clipPath');
var _elm_lang$svg$Svg$colorProfile = _elm_lang$svg$Svg$node('colorProfile');
var _elm_lang$svg$Svg$cursor = _elm_lang$svg$Svg$node('cursor');
var _elm_lang$svg$Svg$filter = _elm_lang$svg$Svg$node('filter');
var _elm_lang$svg$Svg$script = _elm_lang$svg$Svg$node('script');
var _elm_lang$svg$Svg$style = _elm_lang$svg$Svg$node('style');
var _elm_lang$svg$Svg$view = _elm_lang$svg$Svg$node('view');

var _elm_lang$svg$Svg_Attributes$writingMode = _elm_lang$virtual_dom$VirtualDom$attribute('writing-mode');
var _elm_lang$svg$Svg_Attributes$wordSpacing = _elm_lang$virtual_dom$VirtualDom$attribute('word-spacing');
var _elm_lang$svg$Svg_Attributes$visibility = _elm_lang$virtual_dom$VirtualDom$attribute('visibility');
var _elm_lang$svg$Svg_Attributes$unicodeBidi = _elm_lang$virtual_dom$VirtualDom$attribute('unicode-bidi');
var _elm_lang$svg$Svg_Attributes$textRendering = _elm_lang$virtual_dom$VirtualDom$attribute('text-rendering');
var _elm_lang$svg$Svg_Attributes$textDecoration = _elm_lang$virtual_dom$VirtualDom$attribute('text-decoration');
var _elm_lang$svg$Svg_Attributes$textAnchor = _elm_lang$virtual_dom$VirtualDom$attribute('text-anchor');
var _elm_lang$svg$Svg_Attributes$stroke = _elm_lang$virtual_dom$VirtualDom$attribute('stroke');
var _elm_lang$svg$Svg_Attributes$strokeWidth = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-width');
var _elm_lang$svg$Svg_Attributes$strokeOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-opacity');
var _elm_lang$svg$Svg_Attributes$strokeMiterlimit = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-miterlimit');
var _elm_lang$svg$Svg_Attributes$strokeLinejoin = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-linejoin');
var _elm_lang$svg$Svg_Attributes$strokeLinecap = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-linecap');
var _elm_lang$svg$Svg_Attributes$strokeDashoffset = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-dashoffset');
var _elm_lang$svg$Svg_Attributes$strokeDasharray = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-dasharray');
var _elm_lang$svg$Svg_Attributes$stopOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('stop-opacity');
var _elm_lang$svg$Svg_Attributes$stopColor = _elm_lang$virtual_dom$VirtualDom$attribute('stop-color');
var _elm_lang$svg$Svg_Attributes$shapeRendering = _elm_lang$virtual_dom$VirtualDom$attribute('shape-rendering');
var _elm_lang$svg$Svg_Attributes$pointerEvents = _elm_lang$virtual_dom$VirtualDom$attribute('pointer-events');
var _elm_lang$svg$Svg_Attributes$overflow = _elm_lang$virtual_dom$VirtualDom$attribute('overflow');
var _elm_lang$svg$Svg_Attributes$opacity = _elm_lang$virtual_dom$VirtualDom$attribute('opacity');
var _elm_lang$svg$Svg_Attributes$mask = _elm_lang$virtual_dom$VirtualDom$attribute('mask');
var _elm_lang$svg$Svg_Attributes$markerStart = _elm_lang$virtual_dom$VirtualDom$attribute('marker-start');
var _elm_lang$svg$Svg_Attributes$markerMid = _elm_lang$virtual_dom$VirtualDom$attribute('marker-mid');
var _elm_lang$svg$Svg_Attributes$markerEnd = _elm_lang$virtual_dom$VirtualDom$attribute('marker-end');
var _elm_lang$svg$Svg_Attributes$lightingColor = _elm_lang$virtual_dom$VirtualDom$attribute('lighting-color');
var _elm_lang$svg$Svg_Attributes$letterSpacing = _elm_lang$virtual_dom$VirtualDom$attribute('letter-spacing');
var _elm_lang$svg$Svg_Attributes$kerning = _elm_lang$virtual_dom$VirtualDom$attribute('kerning');
var _elm_lang$svg$Svg_Attributes$imageRendering = _elm_lang$virtual_dom$VirtualDom$attribute('image-rendering');
var _elm_lang$svg$Svg_Attributes$glyphOrientationVertical = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-orientation-vertical');
var _elm_lang$svg$Svg_Attributes$glyphOrientationHorizontal = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-orientation-horizontal');
var _elm_lang$svg$Svg_Attributes$fontWeight = _elm_lang$virtual_dom$VirtualDom$attribute('font-weight');
var _elm_lang$svg$Svg_Attributes$fontVariant = _elm_lang$virtual_dom$VirtualDom$attribute('font-variant');
var _elm_lang$svg$Svg_Attributes$fontStyle = _elm_lang$virtual_dom$VirtualDom$attribute('font-style');
var _elm_lang$svg$Svg_Attributes$fontStretch = _elm_lang$virtual_dom$VirtualDom$attribute('font-stretch');
var _elm_lang$svg$Svg_Attributes$fontSize = _elm_lang$virtual_dom$VirtualDom$attribute('font-size');
var _elm_lang$svg$Svg_Attributes$fontSizeAdjust = _elm_lang$virtual_dom$VirtualDom$attribute('font-size-adjust');
var _elm_lang$svg$Svg_Attributes$fontFamily = _elm_lang$virtual_dom$VirtualDom$attribute('font-family');
var _elm_lang$svg$Svg_Attributes$floodOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('flood-opacity');
var _elm_lang$svg$Svg_Attributes$floodColor = _elm_lang$virtual_dom$VirtualDom$attribute('flood-color');
var _elm_lang$svg$Svg_Attributes$filter = _elm_lang$virtual_dom$VirtualDom$attribute('filter');
var _elm_lang$svg$Svg_Attributes$fill = _elm_lang$virtual_dom$VirtualDom$attribute('fill');
var _elm_lang$svg$Svg_Attributes$fillRule = _elm_lang$virtual_dom$VirtualDom$attribute('fill-rule');
var _elm_lang$svg$Svg_Attributes$fillOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('fill-opacity');
var _elm_lang$svg$Svg_Attributes$enableBackground = _elm_lang$virtual_dom$VirtualDom$attribute('enable-background');
var _elm_lang$svg$Svg_Attributes$dominantBaseline = _elm_lang$virtual_dom$VirtualDom$attribute('dominant-baseline');
var _elm_lang$svg$Svg_Attributes$display = _elm_lang$virtual_dom$VirtualDom$attribute('display');
var _elm_lang$svg$Svg_Attributes$direction = _elm_lang$virtual_dom$VirtualDom$attribute('direction');
var _elm_lang$svg$Svg_Attributes$cursor = _elm_lang$virtual_dom$VirtualDom$attribute('cursor');
var _elm_lang$svg$Svg_Attributes$color = _elm_lang$virtual_dom$VirtualDom$attribute('color');
var _elm_lang$svg$Svg_Attributes$colorRendering = _elm_lang$virtual_dom$VirtualDom$attribute('color-rendering');
var _elm_lang$svg$Svg_Attributes$colorProfile = _elm_lang$virtual_dom$VirtualDom$attribute('color-profile');
var _elm_lang$svg$Svg_Attributes$colorInterpolation = _elm_lang$virtual_dom$VirtualDom$attribute('color-interpolation');
var _elm_lang$svg$Svg_Attributes$colorInterpolationFilters = _elm_lang$virtual_dom$VirtualDom$attribute('color-interpolation-filters');
var _elm_lang$svg$Svg_Attributes$clip = _elm_lang$virtual_dom$VirtualDom$attribute('clip');
var _elm_lang$svg$Svg_Attributes$clipRule = _elm_lang$virtual_dom$VirtualDom$attribute('clip-rule');
var _elm_lang$svg$Svg_Attributes$clipPath = _elm_lang$virtual_dom$VirtualDom$attribute('clip-path');
var _elm_lang$svg$Svg_Attributes$baselineShift = _elm_lang$virtual_dom$VirtualDom$attribute('baseline-shift');
var _elm_lang$svg$Svg_Attributes$alignmentBaseline = _elm_lang$virtual_dom$VirtualDom$attribute('alignment-baseline');
var _elm_lang$svg$Svg_Attributes$zoomAndPan = _elm_lang$virtual_dom$VirtualDom$attribute('zoomAndPan');
var _elm_lang$svg$Svg_Attributes$z = _elm_lang$virtual_dom$VirtualDom$attribute('z');
var _elm_lang$svg$Svg_Attributes$yChannelSelector = _elm_lang$virtual_dom$VirtualDom$attribute('yChannelSelector');
var _elm_lang$svg$Svg_Attributes$y2 = _elm_lang$virtual_dom$VirtualDom$attribute('y2');
var _elm_lang$svg$Svg_Attributes$y1 = _elm_lang$virtual_dom$VirtualDom$attribute('y1');
var _elm_lang$svg$Svg_Attributes$y = _elm_lang$virtual_dom$VirtualDom$attribute('y');
var _elm_lang$svg$Svg_Attributes$xmlSpace = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:space');
var _elm_lang$svg$Svg_Attributes$xmlLang = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:lang');
var _elm_lang$svg$Svg_Attributes$xmlBase = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:base');
var _elm_lang$svg$Svg_Attributes$xlinkType = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:type');
var _elm_lang$svg$Svg_Attributes$xlinkTitle = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:title');
var _elm_lang$svg$Svg_Attributes$xlinkShow = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:show');
var _elm_lang$svg$Svg_Attributes$xlinkRole = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:role');
var _elm_lang$svg$Svg_Attributes$xlinkHref = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:href');
var _elm_lang$svg$Svg_Attributes$xlinkArcrole = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:arcrole');
var _elm_lang$svg$Svg_Attributes$xlinkActuate = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:actuate');
var _elm_lang$svg$Svg_Attributes$xChannelSelector = _elm_lang$virtual_dom$VirtualDom$attribute('xChannelSelector');
var _elm_lang$svg$Svg_Attributes$x2 = _elm_lang$virtual_dom$VirtualDom$attribute('x2');
var _elm_lang$svg$Svg_Attributes$x1 = _elm_lang$virtual_dom$VirtualDom$attribute('x1');
var _elm_lang$svg$Svg_Attributes$xHeight = _elm_lang$virtual_dom$VirtualDom$attribute('x-height');
var _elm_lang$svg$Svg_Attributes$x = _elm_lang$virtual_dom$VirtualDom$attribute('x');
var _elm_lang$svg$Svg_Attributes$widths = _elm_lang$virtual_dom$VirtualDom$attribute('widths');
var _elm_lang$svg$Svg_Attributes$width = _elm_lang$virtual_dom$VirtualDom$attribute('width');
var _elm_lang$svg$Svg_Attributes$viewTarget = _elm_lang$virtual_dom$VirtualDom$attribute('viewTarget');
var _elm_lang$svg$Svg_Attributes$viewBox = _elm_lang$virtual_dom$VirtualDom$attribute('viewBox');
var _elm_lang$svg$Svg_Attributes$vertOriginY = _elm_lang$virtual_dom$VirtualDom$attribute('vert-origin-y');
var _elm_lang$svg$Svg_Attributes$vertOriginX = _elm_lang$virtual_dom$VirtualDom$attribute('vert-origin-x');
var _elm_lang$svg$Svg_Attributes$vertAdvY = _elm_lang$virtual_dom$VirtualDom$attribute('vert-adv-y');
var _elm_lang$svg$Svg_Attributes$version = _elm_lang$virtual_dom$VirtualDom$attribute('version');
var _elm_lang$svg$Svg_Attributes$values = _elm_lang$virtual_dom$VirtualDom$attribute('values');
var _elm_lang$svg$Svg_Attributes$vMathematical = _elm_lang$virtual_dom$VirtualDom$attribute('v-mathematical');
var _elm_lang$svg$Svg_Attributes$vIdeographic = _elm_lang$virtual_dom$VirtualDom$attribute('v-ideographic');
var _elm_lang$svg$Svg_Attributes$vHanging = _elm_lang$virtual_dom$VirtualDom$attribute('v-hanging');
var _elm_lang$svg$Svg_Attributes$vAlphabetic = _elm_lang$virtual_dom$VirtualDom$attribute('v-alphabetic');
var _elm_lang$svg$Svg_Attributes$unitsPerEm = _elm_lang$virtual_dom$VirtualDom$attribute('units-per-em');
var _elm_lang$svg$Svg_Attributes$unicodeRange = _elm_lang$virtual_dom$VirtualDom$attribute('unicode-range');
var _elm_lang$svg$Svg_Attributes$unicode = _elm_lang$virtual_dom$VirtualDom$attribute('unicode');
var _elm_lang$svg$Svg_Attributes$underlineThickness = _elm_lang$virtual_dom$VirtualDom$attribute('underline-thickness');
var _elm_lang$svg$Svg_Attributes$underlinePosition = _elm_lang$virtual_dom$VirtualDom$attribute('underline-position');
var _elm_lang$svg$Svg_Attributes$u2 = _elm_lang$virtual_dom$VirtualDom$attribute('u2');
var _elm_lang$svg$Svg_Attributes$u1 = _elm_lang$virtual_dom$VirtualDom$attribute('u1');
var _elm_lang$svg$Svg_Attributes$type_ = _elm_lang$virtual_dom$VirtualDom$attribute('type');
var _elm_lang$svg$Svg_Attributes$transform = _elm_lang$virtual_dom$VirtualDom$attribute('transform');
var _elm_lang$svg$Svg_Attributes$to = _elm_lang$virtual_dom$VirtualDom$attribute('to');
var _elm_lang$svg$Svg_Attributes$title = _elm_lang$virtual_dom$VirtualDom$attribute('title');
var _elm_lang$svg$Svg_Attributes$textLength = _elm_lang$virtual_dom$VirtualDom$attribute('textLength');
var _elm_lang$svg$Svg_Attributes$targetY = _elm_lang$virtual_dom$VirtualDom$attribute('targetY');
var _elm_lang$svg$Svg_Attributes$targetX = _elm_lang$virtual_dom$VirtualDom$attribute('targetX');
var _elm_lang$svg$Svg_Attributes$target = _elm_lang$virtual_dom$VirtualDom$attribute('target');
var _elm_lang$svg$Svg_Attributes$tableValues = _elm_lang$virtual_dom$VirtualDom$attribute('tableValues');
var _elm_lang$svg$Svg_Attributes$systemLanguage = _elm_lang$virtual_dom$VirtualDom$attribute('systemLanguage');
var _elm_lang$svg$Svg_Attributes$surfaceScale = _elm_lang$virtual_dom$VirtualDom$attribute('surfaceScale');
var _elm_lang$svg$Svg_Attributes$style = _elm_lang$virtual_dom$VirtualDom$attribute('style');
var _elm_lang$svg$Svg_Attributes$string = _elm_lang$virtual_dom$VirtualDom$attribute('string');
var _elm_lang$svg$Svg_Attributes$strikethroughThickness = _elm_lang$virtual_dom$VirtualDom$attribute('strikethrough-thickness');
var _elm_lang$svg$Svg_Attributes$strikethroughPosition = _elm_lang$virtual_dom$VirtualDom$attribute('strikethrough-position');
var _elm_lang$svg$Svg_Attributes$stitchTiles = _elm_lang$virtual_dom$VirtualDom$attribute('stitchTiles');
var _elm_lang$svg$Svg_Attributes$stemv = _elm_lang$virtual_dom$VirtualDom$attribute('stemv');
var _elm_lang$svg$Svg_Attributes$stemh = _elm_lang$virtual_dom$VirtualDom$attribute('stemh');
var _elm_lang$svg$Svg_Attributes$stdDeviation = _elm_lang$virtual_dom$VirtualDom$attribute('stdDeviation');
var _elm_lang$svg$Svg_Attributes$startOffset = _elm_lang$virtual_dom$VirtualDom$attribute('startOffset');
var _elm_lang$svg$Svg_Attributes$spreadMethod = _elm_lang$virtual_dom$VirtualDom$attribute('spreadMethod');
var _elm_lang$svg$Svg_Attributes$speed = _elm_lang$virtual_dom$VirtualDom$attribute('speed');
var _elm_lang$svg$Svg_Attributes$specularExponent = _elm_lang$virtual_dom$VirtualDom$attribute('specularExponent');
var _elm_lang$svg$Svg_Attributes$specularConstant = _elm_lang$virtual_dom$VirtualDom$attribute('specularConstant');
var _elm_lang$svg$Svg_Attributes$spacing = _elm_lang$virtual_dom$VirtualDom$attribute('spacing');
var _elm_lang$svg$Svg_Attributes$slope = _elm_lang$virtual_dom$VirtualDom$attribute('slope');
var _elm_lang$svg$Svg_Attributes$seed = _elm_lang$virtual_dom$VirtualDom$attribute('seed');
var _elm_lang$svg$Svg_Attributes$scale = _elm_lang$virtual_dom$VirtualDom$attribute('scale');
var _elm_lang$svg$Svg_Attributes$ry = _elm_lang$virtual_dom$VirtualDom$attribute('ry');
var _elm_lang$svg$Svg_Attributes$rx = _elm_lang$virtual_dom$VirtualDom$attribute('rx');
var _elm_lang$svg$Svg_Attributes$rotate = _elm_lang$virtual_dom$VirtualDom$attribute('rotate');
var _elm_lang$svg$Svg_Attributes$result = _elm_lang$virtual_dom$VirtualDom$attribute('result');
var _elm_lang$svg$Svg_Attributes$restart = _elm_lang$virtual_dom$VirtualDom$attribute('restart');
var _elm_lang$svg$Svg_Attributes$requiredFeatures = _elm_lang$virtual_dom$VirtualDom$attribute('requiredFeatures');
var _elm_lang$svg$Svg_Attributes$requiredExtensions = _elm_lang$virtual_dom$VirtualDom$attribute('requiredExtensions');
var _elm_lang$svg$Svg_Attributes$repeatDur = _elm_lang$virtual_dom$VirtualDom$attribute('repeatDur');
var _elm_lang$svg$Svg_Attributes$repeatCount = _elm_lang$virtual_dom$VirtualDom$attribute('repeatCount');
var _elm_lang$svg$Svg_Attributes$renderingIntent = _elm_lang$virtual_dom$VirtualDom$attribute('rendering-intent');
var _elm_lang$svg$Svg_Attributes$refY = _elm_lang$virtual_dom$VirtualDom$attribute('refY');
var _elm_lang$svg$Svg_Attributes$refX = _elm_lang$virtual_dom$VirtualDom$attribute('refX');
var _elm_lang$svg$Svg_Attributes$radius = _elm_lang$virtual_dom$VirtualDom$attribute('radius');
var _elm_lang$svg$Svg_Attributes$r = _elm_lang$virtual_dom$VirtualDom$attribute('r');
var _elm_lang$svg$Svg_Attributes$primitiveUnits = _elm_lang$virtual_dom$VirtualDom$attribute('primitiveUnits');
var _elm_lang$svg$Svg_Attributes$preserveAspectRatio = _elm_lang$virtual_dom$VirtualDom$attribute('preserveAspectRatio');
var _elm_lang$svg$Svg_Attributes$preserveAlpha = _elm_lang$virtual_dom$VirtualDom$attribute('preserveAlpha');
var _elm_lang$svg$Svg_Attributes$pointsAtZ = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtZ');
var _elm_lang$svg$Svg_Attributes$pointsAtY = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtY');
var _elm_lang$svg$Svg_Attributes$pointsAtX = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtX');
var _elm_lang$svg$Svg_Attributes$points = _elm_lang$virtual_dom$VirtualDom$attribute('points');
var _elm_lang$svg$Svg_Attributes$pointOrder = _elm_lang$virtual_dom$VirtualDom$attribute('point-order');
var _elm_lang$svg$Svg_Attributes$patternUnits = _elm_lang$virtual_dom$VirtualDom$attribute('patternUnits');
var _elm_lang$svg$Svg_Attributes$patternTransform = _elm_lang$virtual_dom$VirtualDom$attribute('patternTransform');
var _elm_lang$svg$Svg_Attributes$patternContentUnits = _elm_lang$virtual_dom$VirtualDom$attribute('patternContentUnits');
var _elm_lang$svg$Svg_Attributes$pathLength = _elm_lang$virtual_dom$VirtualDom$attribute('pathLength');
var _elm_lang$svg$Svg_Attributes$path = _elm_lang$virtual_dom$VirtualDom$attribute('path');
var _elm_lang$svg$Svg_Attributes$panose1 = _elm_lang$virtual_dom$VirtualDom$attribute('panose-1');
var _elm_lang$svg$Svg_Attributes$overlineThickness = _elm_lang$virtual_dom$VirtualDom$attribute('overline-thickness');
var _elm_lang$svg$Svg_Attributes$overlinePosition = _elm_lang$virtual_dom$VirtualDom$attribute('overline-position');
var _elm_lang$svg$Svg_Attributes$origin = _elm_lang$virtual_dom$VirtualDom$attribute('origin');
var _elm_lang$svg$Svg_Attributes$orientation = _elm_lang$virtual_dom$VirtualDom$attribute('orientation');
var _elm_lang$svg$Svg_Attributes$orient = _elm_lang$virtual_dom$VirtualDom$attribute('orient');
var _elm_lang$svg$Svg_Attributes$order = _elm_lang$virtual_dom$VirtualDom$attribute('order');
var _elm_lang$svg$Svg_Attributes$operator = _elm_lang$virtual_dom$VirtualDom$attribute('operator');
var _elm_lang$svg$Svg_Attributes$offset = _elm_lang$virtual_dom$VirtualDom$attribute('offset');
var _elm_lang$svg$Svg_Attributes$numOctaves = _elm_lang$virtual_dom$VirtualDom$attribute('numOctaves');
var _elm_lang$svg$Svg_Attributes$name = _elm_lang$virtual_dom$VirtualDom$attribute('name');
var _elm_lang$svg$Svg_Attributes$mode = _elm_lang$virtual_dom$VirtualDom$attribute('mode');
var _elm_lang$svg$Svg_Attributes$min = _elm_lang$virtual_dom$VirtualDom$attribute('min');
var _elm_lang$svg$Svg_Attributes$method = _elm_lang$virtual_dom$VirtualDom$attribute('method');
var _elm_lang$svg$Svg_Attributes$media = _elm_lang$virtual_dom$VirtualDom$attribute('media');
var _elm_lang$svg$Svg_Attributes$max = _elm_lang$virtual_dom$VirtualDom$attribute('max');
var _elm_lang$svg$Svg_Attributes$mathematical = _elm_lang$virtual_dom$VirtualDom$attribute('mathematical');
var _elm_lang$svg$Svg_Attributes$maskUnits = _elm_lang$virtual_dom$VirtualDom$attribute('maskUnits');
var _elm_lang$svg$Svg_Attributes$maskContentUnits = _elm_lang$virtual_dom$VirtualDom$attribute('maskContentUnits');
var _elm_lang$svg$Svg_Attributes$markerWidth = _elm_lang$virtual_dom$VirtualDom$attribute('markerWidth');
var _elm_lang$svg$Svg_Attributes$markerUnits = _elm_lang$virtual_dom$VirtualDom$attribute('markerUnits');
var _elm_lang$svg$Svg_Attributes$markerHeight = _elm_lang$virtual_dom$VirtualDom$attribute('markerHeight');
var _elm_lang$svg$Svg_Attributes$local = _elm_lang$virtual_dom$VirtualDom$attribute('local');
var _elm_lang$svg$Svg_Attributes$limitingConeAngle = _elm_lang$virtual_dom$VirtualDom$attribute('limitingConeAngle');
var _elm_lang$svg$Svg_Attributes$lengthAdjust = _elm_lang$virtual_dom$VirtualDom$attribute('lengthAdjust');
var _elm_lang$svg$Svg_Attributes$lang = _elm_lang$virtual_dom$VirtualDom$attribute('lang');
var _elm_lang$svg$Svg_Attributes$keyTimes = _elm_lang$virtual_dom$VirtualDom$attribute('keyTimes');
var _elm_lang$svg$Svg_Attributes$keySplines = _elm_lang$virtual_dom$VirtualDom$attribute('keySplines');
var _elm_lang$svg$Svg_Attributes$keyPoints = _elm_lang$virtual_dom$VirtualDom$attribute('keyPoints');
var _elm_lang$svg$Svg_Attributes$kernelUnitLength = _elm_lang$virtual_dom$VirtualDom$attribute('kernelUnitLength');
var _elm_lang$svg$Svg_Attributes$kernelMatrix = _elm_lang$virtual_dom$VirtualDom$attribute('kernelMatrix');
var _elm_lang$svg$Svg_Attributes$k4 = _elm_lang$virtual_dom$VirtualDom$attribute('k4');
var _elm_lang$svg$Svg_Attributes$k3 = _elm_lang$virtual_dom$VirtualDom$attribute('k3');
var _elm_lang$svg$Svg_Attributes$k2 = _elm_lang$virtual_dom$VirtualDom$attribute('k2');
var _elm_lang$svg$Svg_Attributes$k1 = _elm_lang$virtual_dom$VirtualDom$attribute('k1');
var _elm_lang$svg$Svg_Attributes$k = _elm_lang$virtual_dom$VirtualDom$attribute('k');
var _elm_lang$svg$Svg_Attributes$intercept = _elm_lang$virtual_dom$VirtualDom$attribute('intercept');
var _elm_lang$svg$Svg_Attributes$in2 = _elm_lang$virtual_dom$VirtualDom$attribute('in2');
var _elm_lang$svg$Svg_Attributes$in_ = _elm_lang$virtual_dom$VirtualDom$attribute('in');
var _elm_lang$svg$Svg_Attributes$ideographic = _elm_lang$virtual_dom$VirtualDom$attribute('ideographic');
var _elm_lang$svg$Svg_Attributes$id = _elm_lang$virtual_dom$VirtualDom$attribute('id');
var _elm_lang$svg$Svg_Attributes$horizOriginY = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-origin-y');
var _elm_lang$svg$Svg_Attributes$horizOriginX = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-origin-x');
var _elm_lang$svg$Svg_Attributes$horizAdvX = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-adv-x');
var _elm_lang$svg$Svg_Attributes$height = _elm_lang$virtual_dom$VirtualDom$attribute('height');
var _elm_lang$svg$Svg_Attributes$hanging = _elm_lang$virtual_dom$VirtualDom$attribute('hanging');
var _elm_lang$svg$Svg_Attributes$gradientUnits = _elm_lang$virtual_dom$VirtualDom$attribute('gradientUnits');
var _elm_lang$svg$Svg_Attributes$gradientTransform = _elm_lang$virtual_dom$VirtualDom$attribute('gradientTransform');
var _elm_lang$svg$Svg_Attributes$glyphRef = _elm_lang$virtual_dom$VirtualDom$attribute('glyphRef');
var _elm_lang$svg$Svg_Attributes$glyphName = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-name');
var _elm_lang$svg$Svg_Attributes$g2 = _elm_lang$virtual_dom$VirtualDom$attribute('g2');
var _elm_lang$svg$Svg_Attributes$g1 = _elm_lang$virtual_dom$VirtualDom$attribute('g1');
var _elm_lang$svg$Svg_Attributes$fy = _elm_lang$virtual_dom$VirtualDom$attribute('fy');
var _elm_lang$svg$Svg_Attributes$fx = _elm_lang$virtual_dom$VirtualDom$attribute('fx');
var _elm_lang$svg$Svg_Attributes$from = _elm_lang$virtual_dom$VirtualDom$attribute('from');
var _elm_lang$svg$Svg_Attributes$format = _elm_lang$virtual_dom$VirtualDom$attribute('format');
var _elm_lang$svg$Svg_Attributes$filterUnits = _elm_lang$virtual_dom$VirtualDom$attribute('filterUnits');
var _elm_lang$svg$Svg_Attributes$filterRes = _elm_lang$virtual_dom$VirtualDom$attribute('filterRes');
var _elm_lang$svg$Svg_Attributes$externalResourcesRequired = _elm_lang$virtual_dom$VirtualDom$attribute('externalResourcesRequired');
var _elm_lang$svg$Svg_Attributes$exponent = _elm_lang$virtual_dom$VirtualDom$attribute('exponent');
var _elm_lang$svg$Svg_Attributes$end = _elm_lang$virtual_dom$VirtualDom$attribute('end');
var _elm_lang$svg$Svg_Attributes$elevation = _elm_lang$virtual_dom$VirtualDom$attribute('elevation');
var _elm_lang$svg$Svg_Attributes$edgeMode = _elm_lang$virtual_dom$VirtualDom$attribute('edgeMode');
var _elm_lang$svg$Svg_Attributes$dy = _elm_lang$virtual_dom$VirtualDom$attribute('dy');
var _elm_lang$svg$Svg_Attributes$dx = _elm_lang$virtual_dom$VirtualDom$attribute('dx');
var _elm_lang$svg$Svg_Attributes$dur = _elm_lang$virtual_dom$VirtualDom$attribute('dur');
var _elm_lang$svg$Svg_Attributes$divisor = _elm_lang$virtual_dom$VirtualDom$attribute('divisor');
var _elm_lang$svg$Svg_Attributes$diffuseConstant = _elm_lang$virtual_dom$VirtualDom$attribute('diffuseConstant');
var _elm_lang$svg$Svg_Attributes$descent = _elm_lang$virtual_dom$VirtualDom$attribute('descent');
var _elm_lang$svg$Svg_Attributes$decelerate = _elm_lang$virtual_dom$VirtualDom$attribute('decelerate');
var _elm_lang$svg$Svg_Attributes$d = _elm_lang$virtual_dom$VirtualDom$attribute('d');
var _elm_lang$svg$Svg_Attributes$cy = _elm_lang$virtual_dom$VirtualDom$attribute('cy');
var _elm_lang$svg$Svg_Attributes$cx = _elm_lang$virtual_dom$VirtualDom$attribute('cx');
var _elm_lang$svg$Svg_Attributes$contentStyleType = _elm_lang$virtual_dom$VirtualDom$attribute('contentStyleType');
var _elm_lang$svg$Svg_Attributes$contentScriptType = _elm_lang$virtual_dom$VirtualDom$attribute('contentScriptType');
var _elm_lang$svg$Svg_Attributes$clipPathUnits = _elm_lang$virtual_dom$VirtualDom$attribute('clipPathUnits');
var _elm_lang$svg$Svg_Attributes$class = _elm_lang$virtual_dom$VirtualDom$attribute('class');
var _elm_lang$svg$Svg_Attributes$capHeight = _elm_lang$virtual_dom$VirtualDom$attribute('cap-height');
var _elm_lang$svg$Svg_Attributes$calcMode = _elm_lang$virtual_dom$VirtualDom$attribute('calcMode');
var _elm_lang$svg$Svg_Attributes$by = _elm_lang$virtual_dom$VirtualDom$attribute('by');
var _elm_lang$svg$Svg_Attributes$bias = _elm_lang$virtual_dom$VirtualDom$attribute('bias');
var _elm_lang$svg$Svg_Attributes$begin = _elm_lang$virtual_dom$VirtualDom$attribute('begin');
var _elm_lang$svg$Svg_Attributes$bbox = _elm_lang$virtual_dom$VirtualDom$attribute('bbox');
var _elm_lang$svg$Svg_Attributes$baseProfile = _elm_lang$virtual_dom$VirtualDom$attribute('baseProfile');
var _elm_lang$svg$Svg_Attributes$baseFrequency = _elm_lang$virtual_dom$VirtualDom$attribute('baseFrequency');
var _elm_lang$svg$Svg_Attributes$azimuth = _elm_lang$virtual_dom$VirtualDom$attribute('azimuth');
var _elm_lang$svg$Svg_Attributes$autoReverse = _elm_lang$virtual_dom$VirtualDom$attribute('autoReverse');
var _elm_lang$svg$Svg_Attributes$attributeType = _elm_lang$virtual_dom$VirtualDom$attribute('attributeType');
var _elm_lang$svg$Svg_Attributes$attributeName = _elm_lang$virtual_dom$VirtualDom$attribute('attributeName');
var _elm_lang$svg$Svg_Attributes$ascent = _elm_lang$virtual_dom$VirtualDom$attribute('ascent');
var _elm_lang$svg$Svg_Attributes$arabicForm = _elm_lang$virtual_dom$VirtualDom$attribute('arabic-form');
var _elm_lang$svg$Svg_Attributes$amplitude = _elm_lang$virtual_dom$VirtualDom$attribute('amplitude');
var _elm_lang$svg$Svg_Attributes$allowReorder = _elm_lang$virtual_dom$VirtualDom$attribute('allowReorder');
var _elm_lang$svg$Svg_Attributes$alphabetic = _elm_lang$virtual_dom$VirtualDom$attribute('alphabetic');
var _elm_lang$svg$Svg_Attributes$additive = _elm_lang$virtual_dom$VirtualDom$attribute('additive');
var _elm_lang$svg$Svg_Attributes$accumulate = _elm_lang$virtual_dom$VirtualDom$attribute('accumulate');
var _elm_lang$svg$Svg_Attributes$accelerate = _elm_lang$virtual_dom$VirtualDom$attribute('accelerate');
var _elm_lang$svg$Svg_Attributes$accentHeight = _elm_lang$virtual_dom$VirtualDom$attribute('accent-height');

var _elm_lang$svg$Svg_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$svg$Svg_Events$simpleOn = F2(
	function (name, msg) {
		return A2(
			_elm_lang$svg$Svg_Events$on,
			name,
			_elm_lang$core$Json_Decode$succeed(msg));
	});
var _elm_lang$svg$Svg_Events$onBegin = _elm_lang$svg$Svg_Events$simpleOn('begin');
var _elm_lang$svg$Svg_Events$onEnd = _elm_lang$svg$Svg_Events$simpleOn('end');
var _elm_lang$svg$Svg_Events$onRepeat = _elm_lang$svg$Svg_Events$simpleOn('repeat');
var _elm_lang$svg$Svg_Events$onAbort = _elm_lang$svg$Svg_Events$simpleOn('abort');
var _elm_lang$svg$Svg_Events$onError = _elm_lang$svg$Svg_Events$simpleOn('error');
var _elm_lang$svg$Svg_Events$onResize = _elm_lang$svg$Svg_Events$simpleOn('resize');
var _elm_lang$svg$Svg_Events$onScroll = _elm_lang$svg$Svg_Events$simpleOn('scroll');
var _elm_lang$svg$Svg_Events$onLoad = _elm_lang$svg$Svg_Events$simpleOn('load');
var _elm_lang$svg$Svg_Events$onUnload = _elm_lang$svg$Svg_Events$simpleOn('unload');
var _elm_lang$svg$Svg_Events$onZoom = _elm_lang$svg$Svg_Events$simpleOn('zoom');
var _elm_lang$svg$Svg_Events$onActivate = _elm_lang$svg$Svg_Events$simpleOn('activate');
var _elm_lang$svg$Svg_Events$onClick = _elm_lang$svg$Svg_Events$simpleOn('click');
var _elm_lang$svg$Svg_Events$onFocusIn = _elm_lang$svg$Svg_Events$simpleOn('focusin');
var _elm_lang$svg$Svg_Events$onFocusOut = _elm_lang$svg$Svg_Events$simpleOn('focusout');
var _elm_lang$svg$Svg_Events$onMouseDown = _elm_lang$svg$Svg_Events$simpleOn('mousedown');
var _elm_lang$svg$Svg_Events$onMouseMove = _elm_lang$svg$Svg_Events$simpleOn('mousemove');
var _elm_lang$svg$Svg_Events$onMouseOut = _elm_lang$svg$Svg_Events$simpleOn('mouseout');
var _elm_lang$svg$Svg_Events$onMouseOver = _elm_lang$svg$Svg_Events$simpleOn('mouseover');
var _elm_lang$svg$Svg_Events$onMouseUp = _elm_lang$svg$Svg_Events$simpleOn('mouseup');

var _elm_lang$svg$Svg_Lazy$lazy3 = _elm_lang$virtual_dom$VirtualDom$lazy3;
var _elm_lang$svg$Svg_Lazy$lazy2 = _elm_lang$virtual_dom$VirtualDom$lazy2;
var _elm_lang$svg$Svg_Lazy$lazy = _elm_lang$virtual_dom$VirtualDom$lazy;

var _elm_lang$window$Native_Window = function()
{

var size = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)	{
	callback(_elm_lang$core$Native_Scheduler.succeed({
		width: window.innerWidth,
		height: window.innerHeight
	}));
});

return {
	size: size
};

}();
var _elm_lang$window$Window_ops = _elm_lang$window$Window_ops || {};
_elm_lang$window$Window_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$window$Window$onSelfMsg = F3(
	function (router, dimensions, state) {
		var _p1 = state;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p3._0(dimensions));
			};
			return A2(
				_elm_lang$window$Window_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p1._0.subs)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$window$Window$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _elm_lang$window$Window$size = _elm_lang$window$Native_Window.size;
var _elm_lang$window$Window$width = A2(
	_elm_lang$core$Task$map,
	function (_) {
		return _.width;
	},
	_elm_lang$window$Window$size);
var _elm_lang$window$Window$height = A2(
	_elm_lang$core$Task$map,
	function (_) {
		return _.height;
	},
	_elm_lang$window$Window$size);
var _elm_lang$window$Window$onEffects = F3(
	function (router, newSubs, oldState) {
		var _p4 = {ctor: '_Tuple2', _0: oldState, _1: newSubs};
		if (_p4._0.ctor === 'Nothing') {
			if (_p4._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: newSubs, pid: pid}));
					},
					_elm_lang$core$Process$spawn(
						A3(
							_elm_lang$dom$Dom_LowLevel$onWindow,
							'resize',
							_elm_lang$core$Json_Decode$succeed(
								{ctor: '_Tuple0'}),
							function (_p5) {
								return A2(
									_elm_lang$core$Task$andThen,
									_elm_lang$core$Platform$sendToSelf(router),
									_elm_lang$window$Window$size);
							})));
			}
		} else {
			if (_p4._1.ctor === '[]') {
				return A2(
					_elm_lang$window$Window_ops['&>'],
					_elm_lang$core$Process$kill(_p4._0._0.pid),
					_elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing));
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						{subs: newSubs, pid: _p4._0._0.pid}));
			}
		}
	});
var _elm_lang$window$Window$subscription = _elm_lang$core$Native_Platform.leaf('Window');
var _elm_lang$window$Window$Size = F2(
	function (a, b) {
		return {width: a, height: b};
	});
var _elm_lang$window$Window$MySub = function (a) {
	return {ctor: 'MySub', _0: a};
};
var _elm_lang$window$Window$resizes = function (tagger) {
	return _elm_lang$window$Window$subscription(
		_elm_lang$window$Window$MySub(tagger));
};
var _elm_lang$window$Window$subMap = F2(
	function (func, _p6) {
		var _p7 = _p6;
		return _elm_lang$window$Window$MySub(
			function (_p8) {
				return func(
					_p7._0(_p8));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Window'] = {pkg: 'elm-lang/window', init: _elm_lang$window$Window$init, onEffects: _elm_lang$window$Window$onEffects, onSelfMsg: _elm_lang$window$Window$onSelfMsg, tag: 'sub', subMap: _elm_lang$window$Window$subMap};

var _elm_tools$parser_primitives$Native_ParserPrimitives = function() {


// STRINGS

function isSubString(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var bigLength = bigString.length - offset;

	if (bigLength < smallLength)
	{
		return tuple3(-1, row, col);
	}

	for (var i = 0; i < smallLength; i++)
	{
		var char = smallString[i];

		if (char !== bigString[offset + i])
		{
			return tuple3(-1, row, col);
		}

		// if it is a two word character
		if ((bigString.charCodeAt(offset) & 0xF800) === 0xD800)
		{
			i++
			if (smallString[i] !== bigString[offset + i])
			{
				return tuple3(-1, row, col);
			}
			col++;
			continue;
		}

		// if it is a newline
		if (char === '\n')
		{
			row++;
			col = 1;
			continue;
		}

		// if it is a one word character
		col++
	}

	return tuple3(offset + smallLength, row, col);
}

function tuple3(a, b, c)
{
	return { ctor: '_Tuple3', _0: a, _1: b, _2: c };
}


// CHARS

var mkChar = _elm_lang$core$Native_Utils.chr;

function isSubChar(predicate, offset, string)
{
	if (offset >= string.length)
	{
		return -1;
	}

	if ((string.charCodeAt(offset) & 0xF800) === 0xD800)
	{
		return predicate(mkChar(string.substr(offset, 2)))
			? offset + 2
			: -1;
	}

	var char = string[offset];

	return predicate(mkChar(char))
		? ((char === '\n') ? -2 : (offset + 1))
		: -1;
}


// FIND STRING

function findSubString(before, smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);

	if (newOffset === -1)
	{
		return tuple3(-1, row, col);
	}

	var scanTarget = before ? newOffset	: newOffset + smallString.length;

	while (offset < scanTarget)
	{
		var char = bigString[offset];

		if (char === '\n')
		{
			offset++;
			row++;
			col = 1;
			continue;
		}

		if ((bigString.charCodeAt(offset) & 0xF800) === 0xD800)
		{
			offset += 2;
			col++;
			continue;
		}

		offset++;
		col++;
	}

	return tuple3(offset, row, col);
}


return {
	isSubString: F5(isSubString),
	isSubChar: F3(isSubChar),
	findSubString: F6(findSubString)
};

}();

var _elm_tools$parser_primitives$ParserPrimitives$findSubString = _elm_tools$parser_primitives$Native_ParserPrimitives.findSubString;
var _elm_tools$parser_primitives$ParserPrimitives$isSubChar = _elm_tools$parser_primitives$Native_ParserPrimitives.isSubChar;
var _elm_tools$parser_primitives$ParserPrimitives$isSubString = _elm_tools$parser_primitives$Native_ParserPrimitives.isSubString;

var _elm_tools$parser$Parser_Internal$isPlusOrMinus = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('+')) || _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('-'));
};
var _elm_tools$parser$Parser_Internal$isZero = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('0'));
};
var _elm_tools$parser$Parser_Internal$isE = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('e')) || _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('E'));
};
var _elm_tools$parser$Parser_Internal$isDot = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('.'));
};
var _elm_tools$parser$Parser_Internal$isBadIntEnd = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (_elm_lang$core$Char$isUpper($char) || (_elm_lang$core$Char$isLower($char) || _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('.'))));
};
var _elm_tools$parser$Parser_Internal$chomp = F3(
	function (isGood, offset, source) {
		chomp:
		while (true) {
			var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, isGood, offset, source);
			if (_elm_lang$core$Native_Utils.cmp(newOffset, 0) < 0) {
				return offset;
			} else {
				var _v0 = isGood,
					_v1 = newOffset,
					_v2 = source;
				isGood = _v0;
				offset = _v1;
				source = _v2;
				continue chomp;
			}
		}
	});
var _elm_tools$parser$Parser_Internal$chompDigits = F3(
	function (isValidDigit, offset, source) {
		var newOffset = A3(_elm_tools$parser$Parser_Internal$chomp, isValidDigit, offset, source);
		return _elm_lang$core$Native_Utils.eq(newOffset, offset) ? _elm_lang$core$Result$Err(newOffset) : ((!_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isBadIntEnd, newOffset, source),
			-1)) ? _elm_lang$core$Result$Err(newOffset) : _elm_lang$core$Result$Ok(newOffset));
	});
var _elm_tools$parser$Parser_Internal$chompExp = F2(
	function (offset, source) {
		var eOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isE, offset, source);
		if (_elm_lang$core$Native_Utils.eq(eOffset, -1)) {
			return _elm_lang$core$Result$Ok(offset);
		} else {
			var opOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isPlusOrMinus, eOffset, source);
			var expOffset = _elm_lang$core$Native_Utils.eq(opOffset, -1) ? eOffset : opOffset;
			return (!_elm_lang$core$Native_Utils.eq(
				A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isZero, expOffset, source),
				-1)) ? _elm_lang$core$Result$Err(expOffset) : (_elm_lang$core$Native_Utils.eq(
				A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_lang$core$Char$isDigit, expOffset, source),
				-1) ? _elm_lang$core$Result$Err(expOffset) : A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isDigit, expOffset, source));
		}
	});
var _elm_tools$parser$Parser_Internal$chompDotAndExp = F2(
	function (offset, source) {
		var dotOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isDot, offset, source);
		return _elm_lang$core$Native_Utils.eq(dotOffset, -1) ? A2(_elm_tools$parser$Parser_Internal$chompExp, offset, source) : A2(
			_elm_tools$parser$Parser_Internal$chompExp,
			A3(_elm_tools$parser$Parser_Internal$chomp, _elm_lang$core$Char$isDigit, dotOffset, source),
			source);
	});
var _elm_tools$parser$Parser_Internal$State = F6(
	function (a, b, c, d, e, f) {
		return {source: a, offset: b, indent: c, context: d, row: e, col: f};
	});
var _elm_tools$parser$Parser_Internal$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _elm_tools$parser$Parser_Internal$Bad = F2(
	function (a, b) {
		return {ctor: 'Bad', _0: a, _1: b};
	});
var _elm_tools$parser$Parser_Internal$Good = F2(
	function (a, b) {
		return {ctor: 'Good', _0: a, _1: b};
	});

var _elm_tools$parser$Parser$changeContext = F2(
	function (newContext, _p0) {
		var _p1 = _p0;
		return {source: _p1.source, offset: _p1.offset, indent: _p1.indent, context: newContext, row: _p1.row, col: _p1.col};
	});
var _elm_tools$parser$Parser$sourceMap = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p4) {
				var _p5 = _p4;
				var _p6 = _p3._0(_p5);
				if (_p6.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p6._0, _p6._1);
				} else {
					var _p7 = _p6._1;
					var subString = A3(_elm_lang$core$String$slice, _p5.offset, _p7.offset, _p5.source);
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						A2(func, subString, _p6._0),
						_p7);
				}
			});
	});
var _elm_tools$parser$Parser$source = function (parser) {
	return A2(_elm_tools$parser$Parser$sourceMap, _elm_lang$core$Basics$always, parser);
};
var _elm_tools$parser$Parser$badFloatMsg = 'The `Parser.float` parser seems to have a bug.\nPlease report an SSCCE to <https://github.com/elm-tools/parser/issues>.';
var _elm_tools$parser$Parser$floatHelp = F3(
	function (offset, zeroOffset, source) {
		if (_elm_lang$core$Native_Utils.cmp(zeroOffset, 0) > -1) {
			return A2(_elm_tools$parser$Parser_Internal$chompDotAndExp, zeroOffset, source);
		} else {
			var dotOffset = A3(_elm_tools$parser$Parser_Internal$chomp, _elm_lang$core$Char$isDigit, offset, source);
			var result = A2(_elm_tools$parser$Parser_Internal$chompDotAndExp, dotOffset, source);
			var _p8 = result;
			if (_p8.ctor === 'Err') {
				return result;
			} else {
				var _p9 = _p8._0;
				return _elm_lang$core$Native_Utils.eq(_p9, offset) ? _elm_lang$core$Result$Err(_p9) : result;
			}
		}
	});
var _elm_tools$parser$Parser$badIntMsg = 'The `Parser.int` parser seems to have a bug.\nPlease report an SSCCE to <https://github.com/elm-tools/parser/issues>.';
var _elm_tools$parser$Parser$isX = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('x'));
};
var _elm_tools$parser$Parser$isO = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('o'));
};
var _elm_tools$parser$Parser$isZero = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('0'));
};
var _elm_tools$parser$Parser$intHelp = F3(
	function (offset, zeroOffset, source) {
		return _elm_lang$core$Native_Utils.eq(zeroOffset, -1) ? A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isDigit, offset, source) : ((!_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isX, zeroOffset, source),
			-1)) ? A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isHexDigit, offset + 2, source) : (_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isBadIntEnd, zeroOffset, source),
			-1) ? _elm_lang$core$Result$Ok(zeroOffset) : _elm_lang$core$Result$Err(zeroOffset)));
	});
var _elm_tools$parser$Parser$token = F2(
	function (makeProblem, str) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p10) {
				var _p11 = _p10;
				var _p13 = _p11.source;
				var _p12 = A5(_elm_tools$parser_primitives$ParserPrimitives$isSubString, str, _p11.offset, _p11.row, _p11.col, _p13);
				var newOffset = _p12._0;
				var newRow = _p12._1;
				var newCol = _p12._2;
				return _elm_lang$core$Native_Utils.eq(newOffset, -1) ? A2(
					_elm_tools$parser$Parser_Internal$Bad,
					makeProblem(str),
					_p11) : A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: _p13, offset: newOffset, indent: _p11.indent, context: _p11.context, row: newRow, col: newCol});
			});
	});
var _elm_tools$parser$Parser$delayedCommitMap = F3(
	function (func, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p18 = _p16._0(state1);
				if (_p18.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p18._0, state1);
				} else {
					var _p22 = _p18._1;
					var _p19 = _p17._0(_p22);
					if (_p19.ctor === 'Good') {
						return A2(
							_elm_tools$parser$Parser_Internal$Good,
							A2(func, _p18._0, _p19._0),
							_p19._1);
					} else {
						var _p21 = _p19._0;
						var _p20 = _p19._1;
						return (_elm_lang$core$Native_Utils.eq(_p22.row, _p20.row) && _elm_lang$core$Native_Utils.eq(_p22.col, _p20.col)) ? A2(_elm_tools$parser$Parser_Internal$Bad, _p21, state1) : A2(_elm_tools$parser$Parser_Internal$Bad, _p21, _p20);
					}
				}
			});
	});
var _elm_tools$parser$Parser$delayedCommit = F2(
	function (filler, realStuff) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p23, v) {
					return v;
				}),
			filler,
			realStuff);
	});
var _elm_tools$parser$Parser$lazy = function (thunk) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			var _p24 = thunk(
				{ctor: '_Tuple0'});
			var parse = _p24._0;
			return parse(state);
		});
};
var _elm_tools$parser$Parser$andThen = F2(
	function (callback, _p25) {
		var _p26 = _p25;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p27 = _p26._0(state1);
				if (_p27.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p27._0, _p27._1);
				} else {
					var _p28 = callback(_p27._0);
					var parseB = _p28._0;
					return parseB(_p27._1);
				}
			});
	});
var _elm_tools$parser$Parser$apply = F2(
	function (f, a) {
		return f(a);
	});
var _elm_tools$parser$Parser$map2 = F3(
	function (func, _p30, _p29) {
		var _p31 = _p30;
		var _p32 = _p29;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p33 = _p31._0(state1);
				if (_p33.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p33._0, _p33._1);
				} else {
					var _p34 = _p32._0(_p33._1);
					if (_p34.ctor === 'Bad') {
						return A2(_elm_tools$parser$Parser_Internal$Bad, _p34._0, _p34._1);
					} else {
						return A2(
							_elm_tools$parser$Parser_Internal$Good,
							A2(func, _p33._0, _p34._0),
							_p34._1);
					}
				}
			});
	});
var _elm_tools$parser$Parser_ops = _elm_tools$parser$Parser_ops || {};
_elm_tools$parser$Parser_ops['|='] = F2(
	function (parseFunc, parseArg) {
		return A3(_elm_tools$parser$Parser$map2, _elm_tools$parser$Parser$apply, parseFunc, parseArg);
	});
var _elm_tools$parser$Parser_ops = _elm_tools$parser$Parser_ops || {};
_elm_tools$parser$Parser_ops['|.'] = F2(
	function (keepParser, ignoreParser) {
		return A3(_elm_tools$parser$Parser$map2, _elm_lang$core$Basics$always, keepParser, ignoreParser);
	});
var _elm_tools$parser$Parser$map = F2(
	function (func, _p35) {
		var _p36 = _p35;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p37 = _p36._0(state1);
				if (_p37.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						func(_p37._0),
						_p37._1);
				} else {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p37._0, _p37._1);
				}
			});
	});
var _elm_tools$parser$Parser$succeed = function (a) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A2(_elm_tools$parser$Parser_Internal$Good, a, state);
		});
};
var _elm_tools$parser$Parser$run = F2(
	function (_p38, source) {
		var _p39 = _p38;
		var initialState = {
			source: source,
			offset: 0,
			indent: 1,
			context: {ctor: '[]'},
			row: 1,
			col: 1
		};
		var _p40 = _p39._0(initialState);
		if (_p40.ctor === 'Good') {
			return _elm_lang$core$Result$Ok(_p40._0);
		} else {
			return _elm_lang$core$Result$Err(
				{row: _p40._1.row, col: _p40._1.col, source: source, problem: _p40._0, context: _p40._1.context});
		}
	});
var _elm_tools$parser$Parser$Error = F5(
	function (a, b, c, d, e) {
		return {row: a, col: b, source: c, problem: d, context: e};
	});
var _elm_tools$parser$Parser$Context = F3(
	function (a, b, c) {
		return {row: a, col: b, description: c};
	});
var _elm_tools$parser$Parser$inContext = F2(
	function (ctx, _p41) {
		var _p42 = _p41;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p43) {
				var _p44 = _p43;
				var _p46 = _p44.context;
				var state1 = A2(
					_elm_tools$parser$Parser$changeContext,
					{
						ctor: '::',
						_0: A3(_elm_tools$parser$Parser$Context, _p44.row, _p44.col, ctx),
						_1: _p46
					},
					_p44);
				var _p45 = _p42._0(state1);
				if (_p45.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						_p45._0,
						A2(_elm_tools$parser$Parser$changeContext, _p46, _p45._1));
				} else {
					return _p45;
				}
			});
	});
var _elm_tools$parser$Parser$Fail = function (a) {
	return {ctor: 'Fail', _0: a};
};
var _elm_tools$parser$Parser$fail = function (message) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$Fail(message),
				state);
		});
};
var _elm_tools$parser$Parser$ExpectingClosing = function (a) {
	return {ctor: 'ExpectingClosing', _0: a};
};
var _elm_tools$parser$Parser$ignoreUntil = function (str) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (_p47) {
			var _p48 = _p47;
			var _p50 = _p48.source;
			var _p49 = A6(_elm_tools$parser_primitives$ParserPrimitives$findSubString, false, str, _p48.offset, _p48.row, _p48.col, _p50);
			var newOffset = _p49._0;
			var newRow = _p49._1;
			var newCol = _p49._2;
			return _elm_lang$core$Native_Utils.eq(newOffset, -1) ? A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$ExpectingClosing(str),
				_p48) : A2(
				_elm_tools$parser$Parser_Internal$Good,
				{ctor: '_Tuple0'},
				{source: _p50, offset: newOffset, indent: _p48.indent, context: _p48.context, row: newRow, col: newCol});
		});
};
var _elm_tools$parser$Parser$ExpectingVariable = {ctor: 'ExpectingVariable'};
var _elm_tools$parser$Parser$ExpectingKeyword = function (a) {
	return {ctor: 'ExpectingKeyword', _0: a};
};
var _elm_tools$parser$Parser$keyword = function (str) {
	return A2(_elm_tools$parser$Parser$token, _elm_tools$parser$Parser$ExpectingKeyword, str);
};
var _elm_tools$parser$Parser$ExpectingSymbol = function (a) {
	return {ctor: 'ExpectingSymbol', _0: a};
};
var _elm_tools$parser$Parser$symbol = function (str) {
	return A2(_elm_tools$parser$Parser$token, _elm_tools$parser$Parser$ExpectingSymbol, str);
};
var _elm_tools$parser$Parser$ExpectingEnd = {ctor: 'ExpectingEnd'};
var _elm_tools$parser$Parser$end = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(state.source),
			state.offset) ? A2(
			_elm_tools$parser$Parser_Internal$Good,
			{ctor: '_Tuple0'},
			state) : A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$ExpectingEnd, state);
	});
var _elm_tools$parser$Parser$BadRepeat = {ctor: 'BadRepeat'};
var _elm_tools$parser$Parser$repeatExactly = F4(
	function (n, parse, revList, state1) {
		repeatExactly:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_elm_lang$core$List$reverse(revList),
					state1);
			} else {
				var _p51 = parse(state1);
				if (_p51.ctor === 'Good') {
					var _p52 = _p51._1;
					if (_elm_lang$core$Native_Utils.eq(state1.row, _p52.row) && _elm_lang$core$Native_Utils.eq(state1.col, _p52.col)) {
						return A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$BadRepeat, _p52);
					} else {
						var _v25 = n - 1,
							_v26 = parse,
							_v27 = {ctor: '::', _0: _p51._0, _1: revList},
							_v28 = _p52;
						n = _v25;
						parse = _v26;
						revList = _v27;
						state1 = _v28;
						continue repeatExactly;
					}
				} else {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p51._0, _p51._1);
				}
			}
		}
	});
var _elm_tools$parser$Parser$repeatAtLeast = F4(
	function (n, parse, revList, state1) {
		repeatAtLeast:
		while (true) {
			var _p53 = parse(state1);
			if (_p53.ctor === 'Good') {
				var _p54 = _p53._1;
				if (_elm_lang$core$Native_Utils.eq(state1.row, _p54.row) && _elm_lang$core$Native_Utils.eq(state1.col, _p54.col)) {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$BadRepeat, _p54);
				} else {
					var _v30 = n - 1,
						_v31 = parse,
						_v32 = {ctor: '::', _0: _p53._0, _1: revList},
						_v33 = _p54;
					n = _v30;
					parse = _v31;
					revList = _v32;
					state1 = _v33;
					continue repeatAtLeast;
				}
			} else {
				var _p55 = _p53._1;
				return (_elm_lang$core$Native_Utils.eq(state1.row, _p55.row) && (_elm_lang$core$Native_Utils.eq(state1.col, _p55.col) && (_elm_lang$core$Native_Utils.cmp(n, 0) < 1))) ? A2(
					_elm_tools$parser$Parser_Internal$Good,
					_elm_lang$core$List$reverse(revList),
					state1) : A2(_elm_tools$parser$Parser_Internal$Bad, _p53._0, _p55);
			}
		}
	});
var _elm_tools$parser$Parser$repeat = F2(
	function (count, _p56) {
		var _p57 = _p56;
		var _p59 = _p57._0;
		var _p58 = count;
		if (_p58.ctor === 'Exactly') {
			return _elm_tools$parser$Parser_Internal$Parser(
				function (state) {
					return A4(
						_elm_tools$parser$Parser$repeatExactly,
						_p58._0,
						_p59,
						{ctor: '[]'},
						state);
				});
		} else {
			return _elm_tools$parser$Parser_Internal$Parser(
				function (state) {
					return A4(
						_elm_tools$parser$Parser$repeatAtLeast,
						_p58._0,
						_p59,
						{ctor: '[]'},
						state);
				});
		}
	});
var _elm_tools$parser$Parser$ignoreExactly = F8(
	function (n, predicate, source, offset, indent, context, row, col) {
		ignoreExactly:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
			} else {
				var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, predicate, offset, source);
				if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
					return A2(
						_elm_tools$parser$Parser_Internal$Bad,
						_elm_tools$parser$Parser$BadRepeat,
						{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
				} else {
					if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
						var _v36 = n - 1,
							_v37 = predicate,
							_v38 = source,
							_v39 = offset + 1,
							_v40 = indent,
							_v41 = context,
							_v42 = row + 1,
							_v43 = 1;
						n = _v36;
						predicate = _v37;
						source = _v38;
						offset = _v39;
						indent = _v40;
						context = _v41;
						row = _v42;
						col = _v43;
						continue ignoreExactly;
					} else {
						var _v44 = n - 1,
							_v45 = predicate,
							_v46 = source,
							_v47 = newOffset,
							_v48 = indent,
							_v49 = context,
							_v50 = row,
							_v51 = col + 1;
						n = _v44;
						predicate = _v45;
						source = _v46;
						offset = _v47;
						indent = _v48;
						context = _v49;
						row = _v50;
						col = _v51;
						continue ignoreExactly;
					}
				}
			}
		}
	});
var _elm_tools$parser$Parser$ignoreAtLeast = F8(
	function (n, predicate, source, offset, indent, context, row, col) {
		ignoreAtLeast:
		while (true) {
			var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, predicate, offset, source);
			if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
				var state = {source: source, offset: offset, indent: indent, context: context, row: row, col: col};
				return (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) ? A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					state) : A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$BadRepeat, state);
			} else {
				if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
					var _v52 = n - 1,
						_v53 = predicate,
						_v54 = source,
						_v55 = offset + 1,
						_v56 = indent,
						_v57 = context,
						_v58 = row + 1,
						_v59 = 1;
					n = _v52;
					predicate = _v53;
					source = _v54;
					offset = _v55;
					indent = _v56;
					context = _v57;
					row = _v58;
					col = _v59;
					continue ignoreAtLeast;
				} else {
					var _v60 = n - 1,
						_v61 = predicate,
						_v62 = source,
						_v63 = newOffset,
						_v64 = indent,
						_v65 = context,
						_v66 = row,
						_v67 = col + 1;
					n = _v60;
					predicate = _v61;
					source = _v62;
					offset = _v63;
					indent = _v64;
					context = _v65;
					row = _v66;
					col = _v67;
					continue ignoreAtLeast;
				}
			}
		}
	});
var _elm_tools$parser$Parser$ignore = F2(
	function (count, predicate) {
		var _p60 = count;
		if (_p60.ctor === 'Exactly') {
			return _elm_tools$parser$Parser_Internal$Parser(
				function (_p61) {
					var _p62 = _p61;
					return A8(_elm_tools$parser$Parser$ignoreExactly, _p60._0, predicate, _p62.source, _p62.offset, _p62.indent, _p62.context, _p62.row, _p62.col);
				});
		} else {
			return _elm_tools$parser$Parser_Internal$Parser(
				function (_p63) {
					var _p64 = _p63;
					return A8(_elm_tools$parser$Parser$ignoreAtLeast, _p60._0, predicate, _p64.source, _p64.offset, _p64.indent, _p64.context, _p64.row, _p64.col);
				});
		}
	});
var _elm_tools$parser$Parser$keep = F2(
	function (count, predicate) {
		return _elm_tools$parser$Parser$source(
			A2(_elm_tools$parser$Parser$ignore, count, predicate));
	});
var _elm_tools$parser$Parser$BadFloat = {ctor: 'BadFloat'};
var _elm_tools$parser$Parser$float = _elm_tools$parser$Parser_Internal$Parser(
	function (_p65) {
		var _p66 = _p65;
		var _p77 = _p66.source;
		var _p76 = _p66.row;
		var _p75 = _p66.offset;
		var _p74 = _p66.indent;
		var _p73 = _p66.context;
		var _p72 = _p66.col;
		var _p67 = A3(
			_elm_tools$parser$Parser$floatHelp,
			_p75,
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isZero, _p75, _p77),
			_p77);
		if (_p67.ctor === 'Err') {
			var _p68 = _p67._0;
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$BadFloat,
				{source: _p77, offset: _p68, indent: _p74, context: _p73, row: _p76, col: _p72 + (_p68 - _p75)});
		} else {
			var _p71 = _p67._0;
			var _p69 = _elm_lang$core$String$toFloat(
				A3(_elm_lang$core$String$slice, _p75, _p71, _p77));
			if (_p69.ctor === 'Err') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Parser',
					{
						start: {line: 733, column: 9},
						end: {line: 745, column: 16}
					},
					_p69)(_elm_tools$parser$Parser$badFloatMsg);
			} else {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_p69._0,
					{source: _p77, offset: _p71, indent: _p74, context: _p73, row: _p76, col: _p72 + (_p71 - _p75)});
			}
		}
	});
var _elm_tools$parser$Parser$BadInt = {ctor: 'BadInt'};
var _elm_tools$parser$Parser$int = _elm_tools$parser$Parser_Internal$Parser(
	function (_p78) {
		var _p79 = _p78;
		var _p90 = _p79.source;
		var _p89 = _p79.row;
		var _p88 = _p79.offset;
		var _p87 = _p79.indent;
		var _p86 = _p79.context;
		var _p85 = _p79.col;
		var _p80 = A3(
			_elm_tools$parser$Parser$intHelp,
			_p88,
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isZero, _p88, _p90),
			_p90);
		if (_p80.ctor === 'Err') {
			var _p81 = _p80._0;
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$BadInt,
				{source: _p90, offset: _p81, indent: _p87, context: _p86, row: _p89, col: _p85 + (_p81 - _p88)});
		} else {
			var _p84 = _p80._0;
			var _p82 = _elm_lang$core$String$toInt(
				A3(_elm_lang$core$String$slice, _p88, _p84, _p90));
			if (_p82.ctor === 'Err') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Parser',
					{
						start: {line: 638, column: 9},
						end: {line: 650, column: 16}
					},
					_p82)(_elm_tools$parser$Parser$badIntMsg);
			} else {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_p82._0,
					{source: _p90, offset: _p84, indent: _p87, context: _p86, row: _p89, col: _p85 + (_p84 - _p88)});
			}
		}
	});
var _elm_tools$parser$Parser$BadOneOf = function (a) {
	return {ctor: 'BadOneOf', _0: a};
};
var _elm_tools$parser$Parser$oneOfHelp = F3(
	function (state, problems, parsers) {
		oneOfHelp:
		while (true) {
			var _p91 = parsers;
			if (_p91.ctor === '[]') {
				return A2(
					_elm_tools$parser$Parser_Internal$Bad,
					_elm_tools$parser$Parser$BadOneOf(
						_elm_lang$core$List$reverse(problems)),
					state);
			} else {
				var _p92 = _p91._0._0(state);
				if (_p92.ctor === 'Good') {
					return _p92;
				} else {
					if (_elm_lang$core$Native_Utils.eq(state.row, _p92._1.row) && _elm_lang$core$Native_Utils.eq(state.col, _p92._1.col)) {
						var _v79 = state,
							_v80 = {ctor: '::', _0: _p92._0, _1: problems},
							_v81 = _p91._1;
						state = _v79;
						problems = _v80;
						parsers = _v81;
						continue oneOfHelp;
					} else {
						return _p92;
					}
				}
			}
		}
	});
var _elm_tools$parser$Parser$oneOf = function (parsers) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A3(
				_elm_tools$parser$Parser$oneOfHelp,
				state,
				{ctor: '[]'},
				parsers);
		});
};
var _elm_tools$parser$Parser$Exactly = function (a) {
	return {ctor: 'Exactly', _0: a};
};
var _elm_tools$parser$Parser$AtLeast = function (a) {
	return {ctor: 'AtLeast', _0: a};
};
var _elm_tools$parser$Parser$zeroOrMore = _elm_tools$parser$Parser$AtLeast(0);
var _elm_tools$parser$Parser$oneOrMore = _elm_tools$parser$Parser$AtLeast(1);

var _elm_tools$parser$Parser_LanguageKit$isChar = function ($char) {
	return true;
};
var _elm_tools$parser$Parser_LanguageKit$isTab = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('\t'));
};
var _elm_tools$parser$Parser_LanguageKit$isSpace = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr(' ')) || (_elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('\n')) || _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('\r')));
};
var _elm_tools$parser$Parser_LanguageKit$chompSpaces = A2(_elm_tools$parser$Parser$ignore, _elm_tools$parser$Parser$zeroOrMore, _elm_tools$parser$Parser_LanguageKit$isSpace);
var _elm_tools$parser$Parser_LanguageKit$revAlways = F2(
	function (_p0, keep) {
		return keep;
	});
var _elm_tools$parser$Parser_LanguageKit$ignore = F2(
	function (ignoreParser, keepParser) {
		return A3(_elm_tools$parser$Parser$map2, _elm_tools$parser$Parser_LanguageKit$revAlways, ignoreParser, keepParser);
	});
var _elm_tools$parser$Parser_LanguageKit_ops = _elm_tools$parser$Parser_LanguageKit_ops || {};
_elm_tools$parser$Parser_LanguageKit_ops['|-'] = _elm_tools$parser$Parser_LanguageKit$ignore;
var _elm_tools$parser$Parser_LanguageKit$sequenceEndMandatory = F5(
	function (end, spaces, parseItem, sep, revItems) {
		var chompRest = function (item) {
			return A5(
				_elm_tools$parser$Parser_LanguageKit$sequenceEndMandatory,
				end,
				spaces,
				parseItem,
				sep,
				{ctor: '::', _0: item, _1: revItems});
		};
		return _elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					chompRest,
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(_elm_tools$parser$Parser_ops['|.'], parseItem, spaces),
							_elm_tools$parser$Parser$symbol(sep)),
						spaces)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_LanguageKit_ops['|-'],
						_elm_tools$parser$Parser$symbol(end),
						_elm_tools$parser$Parser$succeed(
							_elm_lang$core$List$reverse(revItems))),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_tools$parser$Parser_LanguageKit$sequenceEndForbidden = F5(
	function (end, spaces, parseItem, sep, revItems) {
		var chompRest = function (item) {
			return A5(
				_elm_tools$parser$Parser_LanguageKit$sequenceEndForbidden,
				end,
				spaces,
				parseItem,
				sep,
				{ctor: '::', _0: item, _1: revItems});
		};
		return A2(
			_elm_tools$parser$Parser_LanguageKit$ignore,
			spaces,
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_LanguageKit_ops['|-'],
						A2(
							_elm_tools$parser$Parser_LanguageKit_ops['|-'],
							_elm_tools$parser$Parser$symbol(sep),
							spaces),
						A2(_elm_tools$parser$Parser$andThen, chompRest, parseItem)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser_LanguageKit_ops['|-'],
							_elm_tools$parser$Parser$symbol(end),
							_elm_tools$parser$Parser$succeed(
								_elm_lang$core$List$reverse(revItems))),
						_1: {ctor: '[]'}
					}
				}));
	});
var _elm_tools$parser$Parser_LanguageKit$sequenceEndOptional = F5(
	function (end, spaces, parseItem, sep, revItems) {
		var chompRest = function (item) {
			return A5(
				_elm_tools$parser$Parser_LanguageKit$sequenceEndOptional,
				end,
				spaces,
				parseItem,
				sep,
				{ctor: '::', _0: item, _1: revItems});
		};
		var parseEnd = A2(
			_elm_tools$parser$Parser$andThen,
			function (_p1) {
				return _elm_tools$parser$Parser$succeed(
					_elm_lang$core$List$reverse(revItems));
			},
			_elm_tools$parser$Parser$symbol(end));
		return A2(
			_elm_tools$parser$Parser_LanguageKit$ignore,
			spaces,
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_LanguageKit_ops['|-'],
						A2(
							_elm_tools$parser$Parser_LanguageKit_ops['|-'],
							_elm_tools$parser$Parser$symbol(sep),
							spaces),
						_elm_tools$parser$Parser$oneOf(
							{
								ctor: '::',
								_0: A2(_elm_tools$parser$Parser$andThen, chompRest, parseItem),
								_1: {
									ctor: '::',
									_0: parseEnd,
									_1: {ctor: '[]'}
								}
							})),
					_1: {
						ctor: '::',
						_0: parseEnd,
						_1: {ctor: '[]'}
					}
				}));
	});
var _elm_tools$parser$Parser_LanguageKit$sequenceEnd = F5(
	function (end, spaces, parseItem, sep, trailing) {
		var chompRest = function (item) {
			var _p2 = trailing;
			switch (_p2.ctor) {
				case 'Forbidden':
					return A5(
						_elm_tools$parser$Parser_LanguageKit$sequenceEndForbidden,
						end,
						spaces,
						parseItem,
						sep,
						{
							ctor: '::',
							_0: item,
							_1: {ctor: '[]'}
						});
				case 'Optional':
					return A5(
						_elm_tools$parser$Parser_LanguageKit$sequenceEndOptional,
						end,
						spaces,
						parseItem,
						sep,
						{
							ctor: '::',
							_0: item,
							_1: {ctor: '[]'}
						});
				default:
					return A2(
						_elm_tools$parser$Parser_LanguageKit_ops['|-'],
						A2(
							_elm_tools$parser$Parser_LanguageKit_ops['|-'],
							A2(
								_elm_tools$parser$Parser_LanguageKit_ops['|-'],
								spaces,
								_elm_tools$parser$Parser$symbol(sep)),
							spaces),
						A5(
							_elm_tools$parser$Parser_LanguageKit$sequenceEndMandatory,
							end,
							spaces,
							parseItem,
							sep,
							{
								ctor: '::',
								_0: item,
								_1: {ctor: '[]'}
							}));
			}
		};
		return _elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(_elm_tools$parser$Parser$andThen, chompRest, parseItem),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_LanguageKit_ops['|-'],
						_elm_tools$parser$Parser$symbol(end),
						_elm_tools$parser$Parser$succeed(
							{ctor: '[]'})),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_tools$parser$Parser_LanguageKit$whitespaceHelp = function (parser) {
	return A2(
		_elm_tools$parser$Parser_LanguageKit$ignore,
		_elm_tools$parser$Parser_LanguageKit$chompSpaces,
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					function (_p3) {
						return _elm_tools$parser$Parser_LanguageKit$whitespaceHelp(parser);
					},
					parser),
				_1: {
					ctor: '::',
					_0: _elm_tools$parser$Parser$succeed(
						{ctor: '_Tuple0'}),
					_1: {ctor: '[]'}
				}
			}));
};
var _elm_tools$parser$Parser_LanguageKit$nestableCommentHelp = F4(
	function (isNotRelevant, start, end, nestLevel) {
		return _elm_tools$parser$Parser$lazy(
			function (_p4) {
				return A2(
					_elm_tools$parser$Parser_LanguageKit$ignore,
					A2(_elm_tools$parser$Parser$ignore, _elm_tools$parser$Parser$zeroOrMore, isNotRelevant),
					_elm_tools$parser$Parser$oneOf(
						{
							ctor: '::',
							_0: A2(
								_elm_tools$parser$Parser_LanguageKit$ignore,
								_elm_tools$parser$Parser$symbol(end),
								_elm_lang$core$Native_Utils.eq(nestLevel, 1) ? _elm_tools$parser$Parser$succeed(
									{ctor: '_Tuple0'}) : A4(_elm_tools$parser$Parser_LanguageKit$nestableCommentHelp, isNotRelevant, start, end, nestLevel - 1)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_tools$parser$Parser_LanguageKit$ignore,
									_elm_tools$parser$Parser$symbol(start),
									A4(_elm_tools$parser$Parser_LanguageKit$nestableCommentHelp, isNotRelevant, start, end, nestLevel + 1)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_tools$parser$Parser_LanguageKit$ignore,
										A2(
											_elm_tools$parser$Parser$ignore,
											_elm_tools$parser$Parser$Exactly(1),
											_elm_tools$parser$Parser_LanguageKit$isChar),
										A4(_elm_tools$parser$Parser_LanguageKit$nestableCommentHelp, isNotRelevant, start, end, nestLevel)),
									_1: {ctor: '[]'}
								}
							}
						}));
			});
	});
var _elm_tools$parser$Parser_LanguageKit$nestableComment = F2(
	function (start, end) {
		var _p5 = {
			ctor: '_Tuple2',
			_0: _elm_lang$core$String$uncons(start),
			_1: _elm_lang$core$String$uncons(end)
		};
		if (_p5._0.ctor === 'Nothing') {
			return _elm_tools$parser$Parser$fail('Trying to parse a multi-line comment, but the start token cannot be the empty string!');
		} else {
			if (_p5._1.ctor === 'Nothing') {
				return _elm_tools$parser$Parser$fail('Trying to parse a multi-line comment, but the end token cannot be the empty string!');
			} else {
				var isNotRelevant = function ($char) {
					return (!_elm_lang$core$Native_Utils.eq($char, _p5._0._0._0)) && (!_elm_lang$core$Native_Utils.eq($char, _p5._1._0._0));
				};
				return A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$symbol(start),
					A4(_elm_tools$parser$Parser_LanguageKit$nestableCommentHelp, isNotRelevant, start, end, 1));
			}
		}
	});
var _elm_tools$parser$Parser_LanguageKit$whitespace = function (_p6) {
	var _p7 = _p6;
	var multiParser = function () {
		var _p8 = _p7.multiComment;
		switch (_p8.ctor) {
			case 'NoMultiComment':
				return {ctor: '[]'};
			case 'UnnestableComment':
				return {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$symbol(_p8._0),
						_elm_tools$parser$Parser$ignoreUntil(_p8._1)),
					_1: {ctor: '[]'}
				};
			default:
				return {
					ctor: '::',
					_0: A2(_elm_tools$parser$Parser_LanguageKit$nestableComment, _p8._0, _p8._1),
					_1: {ctor: '[]'}
				};
		}
	}();
	var lineParser = function () {
		var _p9 = _p7.lineComment;
		if (_p9.ctor === 'NoLineComment') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$symbol(_p9._0),
					_elm_tools$parser$Parser$ignoreUntil('\n')),
				_1: {ctor: '[]'}
			};
		}
	}();
	var tabParser = _p7.allowTabs ? {
		ctor: '::',
		_0: A2(_elm_tools$parser$Parser$ignore, _elm_tools$parser$Parser$zeroOrMore, _elm_tools$parser$Parser_LanguageKit$isTab),
		_1: {ctor: '[]'}
	} : {ctor: '[]'};
	return _elm_tools$parser$Parser_LanguageKit$whitespaceHelp(
		_elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$Basics_ops['++'],
				tabParser,
				A2(_elm_lang$core$Basics_ops['++'], lineParser, multiParser))));
};
var _elm_tools$parser$Parser_LanguageKit$sequence = function (_p10) {
	var _p11 = _p10;
	var _p12 = _p11.spaces;
	return A2(
		_elm_tools$parser$Parser_LanguageKit_ops['|-'],
		A2(
			_elm_tools$parser$Parser_LanguageKit_ops['|-'],
			_elm_tools$parser$Parser$symbol(_p11.start),
			_p12),
		A5(_elm_tools$parser$Parser_LanguageKit$sequenceEnd, _p11.end, _p12, _p11.item, _p11.separator, _p11.trailing));
};
var _elm_tools$parser$Parser_LanguageKit$varHelp = F7(
	function (isGood, offset, row, col, source, indent, context) {
		varHelp:
		while (true) {
			var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, isGood, offset, source);
			if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
				return {source: source, offset: offset, indent: indent, context: context, row: row, col: col};
			} else {
				if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
					var _v6 = isGood,
						_v7 = offset + 1,
						_v8 = row + 1,
						_v9 = 1,
						_v10 = source,
						_v11 = indent,
						_v12 = context;
					isGood = _v6;
					offset = _v7;
					row = _v8;
					col = _v9;
					source = _v10;
					indent = _v11;
					context = _v12;
					continue varHelp;
				} else {
					var _v13 = isGood,
						_v14 = newOffset,
						_v15 = row,
						_v16 = col + 1,
						_v17 = source,
						_v18 = indent,
						_v19 = context;
					isGood = _v13;
					offset = _v14;
					row = _v15;
					col = _v16;
					source = _v17;
					indent = _v18;
					context = _v19;
					continue varHelp;
				}
			}
		}
	});
var _elm_tools$parser$Parser_LanguageKit$variable = F3(
	function (isFirst, isOther, keywords) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p13) {
				var _p14 = _p13;
				var _p20 = _p14;
				var _p19 = _p14.source;
				var _p18 = _p14.row;
				var _p17 = _p14.offset;
				var _p16 = _p14.indent;
				var _p15 = _p14.context;
				var firstOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, isFirst, _p17, _p19);
				if (_elm_lang$core$Native_Utils.eq(firstOffset, -1)) {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$ExpectingVariable, _p20);
				} else {
					var state2 = _elm_lang$core$Native_Utils.eq(firstOffset, -2) ? A7(_elm_tools$parser$Parser_LanguageKit$varHelp, isOther, _p17 + 1, _p18 + 1, 1, _p19, _p16, _p15) : A7(_elm_tools$parser$Parser_LanguageKit$varHelp, isOther, firstOffset, _p18, _p14.col + 1, _p19, _p16, _p15);
					var name = A3(_elm_lang$core$String$slice, _p17, state2.offset, _p19);
					return A2(_elm_lang$core$Set$member, name, keywords) ? A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$ExpectingVariable, _p20) : A2(_elm_tools$parser$Parser_Internal$Good, name, state2);
				}
			});
	});
var _elm_tools$parser$Parser_LanguageKit$Mandatory = {ctor: 'Mandatory'};
var _elm_tools$parser$Parser_LanguageKit$Optional = {ctor: 'Optional'};
var _elm_tools$parser$Parser_LanguageKit$Forbidden = {ctor: 'Forbidden'};
var _elm_tools$parser$Parser_LanguageKit$list = F2(
	function (spaces, item) {
		return _elm_tools$parser$Parser_LanguageKit$sequence(
			{start: '[', separator: ',', end: ']', spaces: spaces, item: item, trailing: _elm_tools$parser$Parser_LanguageKit$Forbidden});
	});
var _elm_tools$parser$Parser_LanguageKit$record = F2(
	function (spaces, item) {
		return _elm_tools$parser$Parser_LanguageKit$sequence(
			{start: '{', separator: ',', end: '}', spaces: spaces, item: item, trailing: _elm_tools$parser$Parser_LanguageKit$Forbidden});
	});
var _elm_tools$parser$Parser_LanguageKit$tuple = F2(
	function (spaces, item) {
		return _elm_tools$parser$Parser_LanguageKit$sequence(
			{start: '(', separator: ',', end: ')', spaces: spaces, item: item, trailing: _elm_tools$parser$Parser_LanguageKit$Forbidden});
	});
var _elm_tools$parser$Parser_LanguageKit$LineComment = function (a) {
	return {ctor: 'LineComment', _0: a};
};
var _elm_tools$parser$Parser_LanguageKit$NoLineComment = {ctor: 'NoLineComment'};
var _elm_tools$parser$Parser_LanguageKit$UnnestableComment = F2(
	function (a, b) {
		return {ctor: 'UnnestableComment', _0: a, _1: b};
	});
var _elm_tools$parser$Parser_LanguageKit$NestableComment = F2(
	function (a, b) {
		return {ctor: 'NestableComment', _0: a, _1: b};
	});
var _elm_tools$parser$Parser_LanguageKit$NoMultiComment = {ctor: 'NoMultiComment'};

var _elm_tools$parser$Parser_LowLevel$getSource = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return A2(_elm_tools$parser$Parser_Internal$Good, state.source, state);
	});
var _elm_tools$parser$Parser_LowLevel$getOffset = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return A2(_elm_tools$parser$Parser_Internal$Good, state.offset, state);
	});
var _elm_tools$parser$Parser_LowLevel$getCol = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return A2(_elm_tools$parser$Parser_Internal$Good, state.col, state);
	});
var _elm_tools$parser$Parser_LowLevel$getRow = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return A2(_elm_tools$parser$Parser_Internal$Good, state.row, state);
	});
var _elm_tools$parser$Parser_LowLevel$getPosition = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return A2(
			_elm_tools$parser$Parser_Internal$Good,
			{ctor: '_Tuple2', _0: state.row, _1: state.col},
			state);
	});
var _elm_tools$parser$Parser_LowLevel$changeIndent = F2(
	function (newIndent, _p0) {
		var _p1 = _p0;
		return {source: _p1.source, offset: _p1.offset, indent: newIndent, context: _p1.context, row: _p1.row, col: _p1.col};
	});
var _elm_tools$parser$Parser_LowLevel$withIndentLevel = F2(
	function (newIndent, _p2) {
		var _p3 = _p2;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p4 = _p3._0(
					A2(_elm_tools$parser$Parser_LowLevel$changeIndent, newIndent, state1));
				if (_p4.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						_p4._0,
						A2(_elm_tools$parser$Parser_LowLevel$changeIndent, state1.indent, _p4._1));
				} else {
					return A2(
						_elm_tools$parser$Parser_Internal$Bad,
						_p4._0,
						A2(_elm_tools$parser$Parser_LowLevel$changeIndent, state1.indent, _p4._1));
				}
			});
	});
var _elm_tools$parser$Parser_LowLevel$getIndentLevel = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return A2(_elm_tools$parser$Parser_Internal$Good, state.indent, state);
	});

var _user$project$Ace$Annotation = F3(
	function (a, b, c) {
		return {row: a, type_: b, text: c};
	});
var _user$project$Ace$Tooltip = F3(
	function (a, b, c) {
		return {row: a, col: b, text: c};
	});
var _user$project$Ace$Highlight = F2(
	function (a, b) {
		return {range: a, color: b};
	});
var _user$project$Ace$Pos = F2(
	function (a, b) {
		return {row: a, column: b};
	});
var _user$project$Ace$Range = F2(
	function (a, b) {
		return {start: a, end: b};
	});

var _user$project$Updatable$needsUpdate = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._0;
	if (_p2.ctor === 'NeedsUpdate') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Updatable$extract = function (_p3) {
	var _p4 = _p3;
	return _p4._1;
};
var _user$project$Updatable$Updated = {ctor: 'Updated'};
var _user$project$Updatable$NeedsUpdate = {ctor: 'NeedsUpdate'};
var _user$project$Updatable$U = F2(
	function (a, b) {
		return {ctor: 'U', _0: a, _1: b};
	});
var _user$project$Updatable$create = function (val) {
	return A2(_user$project$Updatable$U, _user$project$Updatable$NeedsUpdate, val);
};
var _user$project$Updatable$setUpdated = function (_p5) {
	var _p6 = _p5;
	return A2(_user$project$Updatable$U, _user$project$Updatable$Updated, _p6._1);
};

var _user$project$Pos$posFromRowCol = function (_p0) {
	var _p1 = _p0;
	return {line: _p1._0, col: _p1._1};
};
var _user$project$Pos$dummyPos = {line: -1, col: -1};
var _user$project$Pos$startPos = {line: 1, col: 1};
var _user$project$Pos$Pos = F2(
	function (a, b) {
		return {line: a, col: b};
	});
var _user$project$Pos$WithPos = F2(
	function (a, b) {
		return {val: a, pos: b};
	});

var _user$project$Info$parsedThingToLocation = function (parsedThing) {
	return {ctor: '_Tuple2', _0: parsedThing.start.line, _1: parsedThing.start.col};
};
var _user$project$Info$mapInfoVal = F2(
	function (f, wa) {
		return _elm_lang$core$Native_Utils.update(
			wa,
			{
				val: f(wa.val)
			});
	});
var _user$project$Info$hasDummyInfo = function (w) {
	return _elm_lang$core$Native_Utils.eq(
		{ctor: '_Tuple2', _0: w.start, _1: w.end},
		{ctor: '_Tuple2', _0: _user$project$Pos$dummyPos, _1: _user$project$Pos$dummyPos});
};
var _user$project$Info$copyInfo = F2(
	function (from, to) {
		return _elm_lang$core$Native_Utils.update(
			to,
			{start: from.start, end: from.end});
	});
var _user$project$Info$withInfo = F3(
	function (x, start, end) {
		return {val: x, start: start, end: end};
	});
var _user$project$Info$withDummyInfo = function (x) {
	return A3(_user$project$Info$withInfo, x, _user$project$Pos$dummyPos, _user$project$Pos$dummyPos);
};
var _user$project$Info$WithInfo = F3(
	function (a, b, c) {
		return {val: a, start: b, end: c};
	});

var _user$project$Utils$fromResult = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return _p0._0;
	}
};
var _user$project$Utils$isOdd = function (n) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], n, 2),
		1);
};
var _user$project$Utils$isEven = function (n) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], n, 2),
		0);
};
var _user$project$Utils$log = function (s) {
	return A2(
		_elm_lang$core$Debug$log,
		s,
		{ctor: '_Tuple0'});
};
var _user$project$Utils$logInChain = F2(
	function (s, x) {
		var _p1 = _user$project$Utils$log(s);
		return x;
	});
var _user$project$Utils$perhapsLogError = F2(
	function (prefix, result) {
		var _p2 = result;
		if (_p2.ctor === 'Err') {
			var _p3 = _user$project$Utils$log(
				A2(
					_elm_lang$core$Basics_ops['++'],
					prefix,
					A2(_elm_lang$core$Basics_ops['++'], ': ', _p2._0)));
			return result;
		} else {
			return result;
		}
	});
var _user$project$Utils$or = A2(
	_elm_lang$core$List$foldl,
	F2(
		function (x, y) {
			return x || y;
		}),
	false);
var _user$project$Utils$and = A2(
	_elm_lang$core$List$foldl,
	F2(
		function (x, y) {
			return x && y;
		}),
	true);
var _user$project$Utils$compose = A2(
	_elm_lang$core$List$foldl,
	F2(
		function (x, y) {
			return function (_p4) {
				return x(
					y(_p4));
			};
		}),
	_elm_lang$core$Basics$identity);
var _user$project$Utils$unwrap8 = function (xs) {
	var _p5 = xs;
	if (((((((((_p5.ctor === '::') && (_p5._1.ctor === '::')) && (_p5._1._1.ctor === '::')) && (_p5._1._1._1.ctor === '::')) && (_p5._1._1._1._1.ctor === '::')) && (_p5._1._1._1._1._1.ctor === '::')) && (_p5._1._1._1._1._1._1.ctor === '::')) && (_p5._1._1._1._1._1._1._1.ctor === '::')) && (_p5._1._1._1._1._1._1._1._1.ctor === '[]')) {
		return {ctor: '_Tuple8', _0: _p5._0, _1: _p5._1._0, _2: _p5._1._1._0, _3: _p5._1._1._1._0, _4: _p5._1._1._1._1._0, _5: _p5._1._1._1._1._1._0, _6: _p5._1._1._1._1._1._1._0, _7: _p5._1._1._1._1._1._1._1._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1264, column: 14},
				end: {line: 1266, column: 29}
			},
			_p5)('unwrap7');
	}
};
var _user$project$Utils$unwrap7 = function (xs) {
	var _p7 = xs;
	if ((((((((_p7.ctor === '::') && (_p7._1.ctor === '::')) && (_p7._1._1.ctor === '::')) && (_p7._1._1._1.ctor === '::')) && (_p7._1._1._1._1.ctor === '::')) && (_p7._1._1._1._1._1.ctor === '::')) && (_p7._1._1._1._1._1._1.ctor === '::')) && (_p7._1._1._1._1._1._1._1.ctor === '[]')) {
		return {ctor: '_Tuple7', _0: _p7._0, _1: _p7._1._0, _2: _p7._1._1._0, _3: _p7._1._1._1._0, _4: _p7._1._1._1._1._0, _5: _p7._1._1._1._1._1._0, _6: _p7._1._1._1._1._1._1._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1260, column: 14},
				end: {line: 1262, column: 29}
			},
			_p7)('unwrap7');
	}
};
var _user$project$Utils$unwrap6 = function (xs) {
	var _p9 = xs;
	if (((((((_p9.ctor === '::') && (_p9._1.ctor === '::')) && (_p9._1._1.ctor === '::')) && (_p9._1._1._1.ctor === '::')) && (_p9._1._1._1._1.ctor === '::')) && (_p9._1._1._1._1._1.ctor === '::')) && (_p9._1._1._1._1._1._1.ctor === '[]')) {
		return {ctor: '_Tuple6', _0: _p9._0, _1: _p9._1._0, _2: _p9._1._1._0, _3: _p9._1._1._1._0, _4: _p9._1._1._1._1._0, _5: _p9._1._1._1._1._1._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1256, column: 14},
				end: {line: 1258, column: 29}
			},
			_p9)('unwrap6');
	}
};
var _user$project$Utils$unwrap5 = function (xs) {
	var _p11 = xs;
	if ((((((_p11.ctor === '::') && (_p11._1.ctor === '::')) && (_p11._1._1.ctor === '::')) && (_p11._1._1._1.ctor === '::')) && (_p11._1._1._1._1.ctor === '::')) && (_p11._1._1._1._1._1.ctor === '[]')) {
		return {ctor: '_Tuple5', _0: _p11._0, _1: _p11._1._0, _2: _p11._1._1._0, _3: _p11._1._1._1._0, _4: _p11._1._1._1._1._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1252, column: 14},
				end: {line: 1254, column: 29}
			},
			_p11)('unwrap5');
	}
};
var _user$project$Utils$unwrap4 = function (xs) {
	var _p13 = xs;
	if (((((_p13.ctor === '::') && (_p13._1.ctor === '::')) && (_p13._1._1.ctor === '::')) && (_p13._1._1._1.ctor === '::')) && (_p13._1._1._1._1.ctor === '[]')) {
		return {ctor: '_Tuple4', _0: _p13._0, _1: _p13._1._0, _2: _p13._1._1._0, _3: _p13._1._1._1._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1248, column: 14},
				end: {line: 1250, column: 29}
			},
			_p13)('unwrap4');
	}
};
var _user$project$Utils$unwrap3 = function (xs) {
	var _p15 = xs;
	if ((((_p15.ctor === '::') && (_p15._1.ctor === '::')) && (_p15._1._1.ctor === '::')) && (_p15._1._1._1.ctor === '[]')) {
		return {ctor: '_Tuple3', _0: _p15._0, _1: _p15._1._0, _2: _p15._1._1._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1244, column: 14},
				end: {line: 1246, column: 29}
			},
			_p15)('unwrap3');
	}
};
var _user$project$Utils$unwrap2 = function (xs) {
	var _p17 = xs;
	if (((_p17.ctor === '::') && (_p17._1.ctor === '::')) && (_p17._1._1.ctor === '[]')) {
		return {ctor: '_Tuple2', _0: _p17._0, _1: _p17._1._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1240, column: 14},
				end: {line: 1242, column: 29}
			},
			_p17)('unwrap2');
	}
};
var _user$project$Utils$unwrap1 = function (xs) {
	var _p19 = xs;
	if ((_p19.ctor === '::') && (_p19._1.ctor === '[]')) {
		return _p19._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1236, column: 14},
				end: {line: 1238, column: 29}
			},
			_p19)('unwrap1');
	}
};
var _user$project$Utils$unwrapSingletonSet = function (set) {
	var _p21 = _elm_lang$core$Set$toList(set);
	if ((_p21.ctor === '::') && (_p21._1.ctor === '[]')) {
		return _p21._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 1232, column: 26},
				end: {line: 1234, column: 42}
			},
			_p21)('unwrapSingletonSet');
	}
};
var _user$project$Utils$maybeUnwrap1 = function (list) {
	var _p23 = list;
	if ((_p23.ctor === '::') && (_p23._1.ctor === '[]')) {
		return _elm_lang$core$Maybe$Just(_p23._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Utils$listToPair = F2(
	function (msg, list) {
		var _p24 = list;
		if (((_p24.ctor === '::') && (_p24._1.ctor === '::')) && (_p24._1._1.ctor === '[]')) {
			return {ctor: '_Tuple2', _0: _p24._0, _1: _p24._1._0};
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Utils',
				{
					start: {line: 1222, column: 3},
					end: {line: 1224, column: 53}
				},
				_p24)(
				A2(_elm_lang$core$Basics_ops['++'], 'listToPair: ', msg));
		}
	});
var _user$project$Utils$pairToList = function (_p26) {
	var _p27 = _p26;
	return {
		ctor: '::',
		_0: _p27._0,
		_1: {
			ctor: '::',
			_0: _p27._1,
			_1: {ctor: '[]'}
		}
	};
};
var _user$project$Utils$uniPlusMinus = '±';
var _user$project$Utils$uniDelta = 'Δ';
var _user$project$Utils$uniLambda = 'λ';
var _user$project$Utils$uniCamera = '📷';
var _user$project$Utils$uniReload = '⎋';
var _user$project$Utils$uniRedo = '▶';
var _user$project$Utils$uniUndo = '◀';
var _user$project$Utils$uniSave = '💾';
var _user$project$Utils$uniEnter = '↵';
var _user$project$Utils$uniRight = '→';
var _user$project$Utils$uniLeft = '←';
var _user$project$Utils$radiansToDegrees = function (rad) {
	return (rad / _elm_lang$core$Basics$pi) * 180;
};
var _user$project$Utils$midpoint = F2(
	function (_p29, _p28) {
		var _p30 = _p29;
		var _p31 = _p28;
		return {ctor: '_Tuple2', _0: (_p30._0 + _p31._0) / 2, _1: (_p30._1 + _p31._1) / 2};
	});
var _user$project$Utils$distance = F2(
	function (_p33, _p32) {
		var _p34 = _p33;
		var _p35 = _p32;
		return _elm_lang$core$Basics$sqrt(
			Math.pow(_p35._0 - _p34._0, 2) + Math.pow(_p35._1 - _p34._1, 2));
	});
var _user$project$Utils$distanceInt = F2(
	function (_p37, _p36) {
		var _p38 = _p37;
		var _p39 = _p36;
		return A2(
			_user$project$Utils$distance,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toFloat(_p38._0),
				_1: _elm_lang$core$Basics$toFloat(_p38._1)
			},
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toFloat(_p39._0),
				_1: _elm_lang$core$Basics$toFloat(_p39._1)
			});
	});
var _user$project$Utils$between = F2(
	function (x, _p40) {
		var _p41 = _p40;
		return (_elm_lang$core$Native_Utils.cmp(_p41._0, x) < 1) && (_elm_lang$core$Native_Utils.cmp(x, _p41._1) < 0);
	});
var _user$project$Utils$sgn = function (x) {
	return _elm_lang$core$Native_Utils.eq(x, 0) ? 0 : ((_elm_lang$core$Native_Utils.cmp(x, 0) < 0) ? -1 : ((_elm_lang$core$Native_Utils.cmp(x, 0) > 0) ? 1 : x));
};
var _user$project$Utils$commonPrefixPair = F2(
	function (l1, l2) {
		var _p42 = {ctor: '_Tuple2', _0: l1, _1: l2};
		if (((_p42.ctor === '_Tuple2') && (_p42._0.ctor === '::')) && (_p42._1.ctor === '::')) {
			var _p43 = _p42._0._0;
			return _elm_lang$core$Native_Utils.eq(_p43, _p42._1._0) ? {
				ctor: '::',
				_0: _p43,
				_1: A2(_user$project$Utils$commonPrefixPair, _p42._0._1, _p42._1._1)
			} : {ctor: '[]'};
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Utils$commonPrefix = function (lists) {
	var _p44 = lists;
	if (_p44.ctor === '::') {
		return A3(_elm_lang$core$List$foldl, _user$project$Utils$commonPrefixPair, _p44._0, _p44._1);
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Utils$commonSuffix = function (lists) {
	return _elm_lang$core$List$reverse(
		_user$project$Utils$commonPrefix(
			A2(_elm_lang$core$List$map, _elm_lang$core$List$reverse, lists)));
};
var _user$project$Utils$removeCommonPrefix = function (lists) {
	var prefixLength = _elm_lang$core$List$length(
		_user$project$Utils$commonPrefix(lists));
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$List$drop(prefixLength),
		lists);
};
var _user$project$Utils$removeCommonSuffix = function (lists) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$List$reverse,
		_user$project$Utils$removeCommonPrefix(
			A2(_elm_lang$core$List$map, _elm_lang$core$List$reverse, lists)));
};
var _user$project$Utils$isPrefixOf = F2(
	function (longer, prefix) {
		var _p45 = {ctor: '_Tuple2', _0: longer, _1: prefix};
		if (_p45._1.ctor === '[]') {
			return true;
		} else {
			if (_p45._0.ctor === '[]') {
				return false;
			} else {
				return _elm_lang$core$Native_Utils.eq(_p45._0._0, _p45._1._0) && A2(_user$project$Utils$isPrefixOf, _p45._0._1, _p45._1._1);
			}
		}
	});
var _user$project$Utils$isPrefix = F2(
	function (prefix, longer) {
		return A2(_user$project$Utils$isPrefixOf, longer, prefix);
	});
var _user$project$Utils$dictIsEmpty = function (_p46) {
	return A2(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			}),
		{ctor: '[]'},
		_elm_lang$core$Dict$toList(_p46));
};
var _user$project$Utils$setIsEmpty = function (_p47) {
	return A2(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			}),
		{ctor: '[]'},
		_elm_lang$core$Set$toList(_p47));
};
var _user$project$Utils$bindResult = F2(
	function (res, f) {
		var _p48 = res;
		if (_p48.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_p48._0);
		} else {
			return f(_p48._0);
		}
	});
var _user$project$Utils$flip = function (_p49) {
	var _p50 = _p49;
	return {ctor: '_Tuple2', _0: _p50._1, _1: _p50._0};
};
var _user$project$Utils$fourth4 = function (_p51) {
	var _p52 = _p51;
	return _p52._3;
};
var _user$project$Utils$mapThd3 = F2(
	function (f, _p53) {
		var _p54 = _p53;
		return {
			ctor: '_Tuple3',
			_0: _p54._0,
			_1: _p54._1,
			_2: f(_p54._2)
		};
	});
var _user$project$Utils$mapSnd3 = F2(
	function (f, _p55) {
		var _p56 = _p55;
		return {
			ctor: '_Tuple3',
			_0: _p56._0,
			_1: f(_p56._1),
			_2: _p56._2
		};
	});
var _user$project$Utils$mapFst3 = F2(
	function (f, _p57) {
		var _p58 = _p57;
		return {
			ctor: '_Tuple3',
			_0: f(_p58._0),
			_1: _p58._1,
			_2: _p58._2
		};
	});
var _user$project$Utils$thd3 = function (_p59) {
	var _p60 = _p59;
	return _p60._2;
};
var _user$project$Utils$snd3 = function (_p61) {
	var _p62 = _p61;
	return _p62._1;
};
var _user$project$Utils$fst3 = function (_p63) {
	var _p64 = _p63;
	return _p64._0;
};
var _user$project$Utils$mapBoth = F2(
	function (f, _p65) {
		var _p66 = _p65;
		return {
			ctor: '_Tuple2',
			_0: f(_p66._0),
			_1: f(_p66._1)
		};
	});
var _user$project$Utils$foldlResult = F3(
	function (f, resultAcc, list) {
		foldlResult:
		while (true) {
			var _p67 = {ctor: '_Tuple2', _0: resultAcc, _1: list};
			if (_p67._0.ctor === 'Err') {
				return resultAcc;
			} else {
				if (_p67._1.ctor === '::') {
					var _v35 = f,
						_v36 = A2(f, _p67._1._0, _p67._0._0),
						_v37 = _p67._1._1;
					f = _v35;
					resultAcc = _v36;
					list = _v37;
					continue foldlResult;
				} else {
					return resultAcc;
				}
			}
		}
	});
var _user$project$Utils$projOk = function (list) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (res, out) {
				var _p68 = {ctor: '_Tuple2', _0: res, _1: out};
				if (_p68._1.ctor === 'Err') {
					return out;
				} else {
					if (_p68._0.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							{ctor: '::', _0: _p68._0._0, _1: _p68._1._0});
					} else {
						return _elm_lang$core$Result$Err(_p68._0._0);
					}
				}
			}),
		_elm_lang$core$Result$Ok(
			{ctor: '[]'}),
		list);
};
var _user$project$Utils$foldrMaybe = F3(
	function (f, maybeAcc, list) {
		var _p69 = list;
		if (_p69.ctor === '[]') {
			return maybeAcc;
		} else {
			return A2(
				_elm_lang$core$Maybe$andThen,
				function (acc) {
					return A2(f, _p69._0, acc);
				},
				A3(_user$project$Utils$foldrMaybe, f, maybeAcc, _p69._1));
		}
	});
var _user$project$Utils$foldlMaybe = F3(
	function (f, maybeAcc, list) {
		foldlMaybe:
		while (true) {
			var _p70 = {ctor: '_Tuple2', _0: maybeAcc, _1: list};
			if (_p70._0.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p70._1.ctor === '::') {
					var _v41 = f,
						_v42 = A2(f, _p70._1._0, _p70._0._0),
						_v43 = _p70._1._1;
					f = _v41;
					maybeAcc = _v42;
					list = _v43;
					continue foldlMaybe;
				} else {
					return maybeAcc;
				}
			}
		}
	});
var _user$project$Utils$filterErrs = function (mxs) {
	filterErrs:
	while (true) {
		var _p71 = mxs;
		if (_p71.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p71._0.ctor === 'Ok') {
				var _v45 = _p71._1;
				mxs = _v45;
				continue filterErrs;
			} else {
				return {
					ctor: '::',
					_0: _p71._0._0,
					_1: _user$project$Utils$filterErrs(_p71._1)
				};
			}
		}
	}
};
var _user$project$Utils$filterOks = function (mxs) {
	filterOks:
	while (true) {
		var _p72 = mxs;
		if (_p72.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p72._0.ctor === 'Ok') {
				return {
					ctor: '::',
					_0: _p72._0._0,
					_1: _user$project$Utils$filterOks(_p72._1)
				};
			} else {
				var _v47 = _p72._1;
				mxs = _v47;
				continue filterOks;
			}
		}
	}
};
var _user$project$Utils$filterJusts = function (mxs) {
	filterJusts:
	while (true) {
		var _p73 = mxs;
		if (_p73.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p73._0.ctor === 'Just') {
				return {
					ctor: '::',
					_0: _p73._0._0,
					_1: _user$project$Utils$filterJusts(_p73._1)
				};
			} else {
				var _v49 = _p73._1;
				mxs = _v49;
				continue filterJusts;
			}
		}
	}
};
var _user$project$Utils$projJusts = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (mx, acc) {
			var _p74 = {ctor: '_Tuple2', _0: mx, _1: acc};
			if (((_p74.ctor === '_Tuple2') && (_p74._0.ctor === 'Just')) && (_p74._1.ctor === 'Just')) {
				return _elm_lang$core$Maybe$Just(
					{ctor: '::', _0: _p74._0._0, _1: _p74._1._0});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}),
	_elm_lang$core$Maybe$Just(
		{ctor: '[]'}));
var _user$project$Utils$bindMaybesToList = F2(
	function (list, f) {
		var _p75 = _user$project$Utils$projJusts(list);
		if (_p75.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return f(_p75._0);
		}
	});
var _user$project$Utils$maybeWithLazyDefault = F2(
	function (defaultThunk, mx) {
		var _p76 = mx;
		if (_p76.ctor === 'Just') {
			return _p76._0;
		} else {
			return defaultThunk(
				{ctor: '_Tuple0'});
		}
	});
var _user$project$Utils$elseMaybe = F2(
	function (mx, $default) {
		var _p77 = mx;
		if (_p77.ctor === 'Just') {
			return _p77._0;
		} else {
			return $default;
		}
	});
var _user$project$Utils$orMaybe = F2(
	function (mx, my) {
		var _p78 = mx;
		if (_p78.ctor === 'Just') {
			return mx;
		} else {
			return my;
		}
	});
var _user$project$Utils$firstMaybe = function (list) {
	return A3(_elm_lang$core$List$foldr, _user$project$Utils$orMaybe, _elm_lang$core$Maybe$Nothing, list);
};
var _user$project$Utils$bindMaybe = _elm_lang$core$Maybe$andThen;
var _user$project$Utils$bindMaybe2 = F3(
	function (f, mx, my) {
		return A2(
			_user$project$Utils$bindMaybe,
			function (x) {
				return A2(
					_user$project$Utils$bindMaybe,
					f(x),
					my);
			},
			mx);
	});
var _user$project$Utils$bindMaybe3 = F4(
	function (f, mx, my, mz) {
		return A3(
			_user$project$Utils$bindMaybe2,
			F2(
				function (x, y) {
					return A2(
						_user$project$Utils$bindMaybe,
						A2(f, x, y),
						mz);
				}),
			mx,
			my);
	});
var _user$project$Utils$filterMaybe = F2(
	function (pred, mx) {
		var _p79 = mx;
		if (_p79.ctor === 'Just') {
			var _p80 = _p79._0;
			return pred(_p80) ? _elm_lang$core$Maybe$Just(_p80) : _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Utils$mapMaybe = _elm_lang$core$Maybe$map;
var _user$project$Utils$maybeToList = function (mx) {
	var _p81 = mx;
	if (_p81.ctor === 'Just') {
		return {
			ctor: '::',
			_0: _p81._0,
			_1: {ctor: '[]'}
		};
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Utils$dropWhile = F2(
	function (pred, list) {
		dropWhile:
		while (true) {
			var _p82 = list;
			if (_p82.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (pred(_p82._0)) {
					var _v58 = pred,
						_v59 = _p82._1;
					pred = _v58;
					list = _v59;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var _user$project$Utils$takeWhile = F2(
	function (pred, list) {
		var _p83 = list;
		if (_p83.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p84 = _p83._0;
			return pred(_p84) ? {
				ctor: '::',
				_0: _p84,
				_1: A2(_user$project$Utils$takeWhile, pred, _p83._1)
			} : {ctor: '[]'};
		}
	});
var _user$project$Utils$takeLast = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A2(
				_elm_lang$core$List$take,
				n,
				_elm_lang$core$List$reverse(list)));
	});
var _user$project$Utils$maybeUnconsLast = function (list) {
	var _p85 = _elm_lang$core$List$reverse(list);
	if (_p85.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$List$reverse(_p85._1),
				_1: _p85._0
			});
	}
};
var _user$project$Utils$maybeUncons = function (list) {
	var _p86 = list;
	if (_p86.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p86._0, _1: _p86._1});
	}
};
var _user$project$Utils$uncons = F2(
	function (msg, list) {
		var _p87 = list;
		if (_p87.ctor === '::') {
			return {ctor: '_Tuple2', _0: _p87._0, _1: _p87._1};
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Utils',
				{
					start: {line: 945, column: 19},
					end: {line: 947, column: 44}
				},
				_p87)(
				A2(_elm_lang$core$Basics_ops['++'], 'uncons: ', msg));
		}
	});
var _user$project$Utils$maybeLast = function (list) {
	maybeLast:
	while (true) {
		var _p89 = list;
		if (_p89.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p89._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p89._0);
			} else {
				var _v65 = _p89._1;
				list = _v65;
				continue maybeLast;
			}
		}
	}
};
var _user$project$Utils$removeAllFromSet = F2(
	function (items, set) {
		return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$remove, set, items);
	});
var _user$project$Utils$insertAllIntoSet = F2(
	function (items, set) {
		return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, set, items);
	});
var _user$project$Utils$insertAll = F2(
	function (pairs, dict) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p90, dict) {
					var _p91 = _p90;
					return A3(_elm_lang$core$Dict$insert, _p91._0, _p91._1, dict);
				}),
			dict,
			pairs);
	});
var _user$project$Utils$dictGetSet = F2(
	function (k, d) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Set$empty,
			A2(_elm_lang$core$Dict$get, k, d));
	});
var _user$project$Utils$dictUnionSet = F3(
	function (k, more, dict) {
		return A3(
			_elm_lang$core$Dict$insert,
			k,
			A2(
				_elm_lang$core$Set$union,
				more,
				A2(_user$project$Utils$dictGetSet, k, dict)),
			dict);
	});
var _user$project$Utils$dictRemoveFromSet = F3(
	function (k, v, dict) {
		var _p92 = A2(_elm_lang$core$Dict$get, k, dict);
		if (_p92.ctor === 'Just') {
			return A3(
				_elm_lang$core$Dict$insert,
				k,
				A2(_elm_lang$core$Set$remove, v, _p92._0),
				dict);
		} else {
			return dict;
		}
	});
var _user$project$Utils$dictAddToSet = F3(
	function (k, v, dict) {
		var _p93 = A2(_elm_lang$core$Dict$get, k, dict);
		if (_p93.ctor === 'Just') {
			return A3(
				_elm_lang$core$Dict$insert,
				k,
				A2(_elm_lang$core$Set$insert, v, _p93._0),
				dict);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				k,
				_elm_lang$core$Set$singleton(v),
				dict);
		}
	});
var _user$project$Utils$dictOverlaps = F2(
	function (dict1, dict2) {
		return A6(
			_elm_lang$core$Dict$merge,
			F3(
				function (_p95, _p94, result) {
					return result;
				}),
			F4(
				function (k, v, w, result) {
					return A3(
						_elm_lang$core$Dict$insert,
						k,
						{ctor: '_Tuple2', _0: v, _1: w},
						result);
				}),
			F3(
				function (_p97, _p96, result) {
					return result;
				}),
			dict1,
			dict2,
			_elm_lang$core$Dict$empty);
	});
var _user$project$Utils$multiKeySingleValue = F2(
	function (keys, value) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (key, dict) {
					return A3(_elm_lang$core$Dict$insert, key, value, dict);
				}),
			_elm_lang$core$Dict$empty,
			keys);
	});
var _user$project$Utils$flipDict = function (dict) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			_user$project$Utils$flip,
			_elm_lang$core$Dict$toList(dict)));
};
var _user$project$Utils$toggleDict = F2(
	function (_p98, dict) {
		var _p99 = _p98;
		var _p100 = _p99._0;
		return A2(_elm_lang$core$Dict$member, _p100, dict) ? A2(_elm_lang$core$Dict$remove, _p100, dict) : A3(_elm_lang$core$Dict$insert, _p100, _p99._1, dict);
	});
var _user$project$Utils$toggleSet = F2(
	function (x, set) {
		return A2(_elm_lang$core$Set$member, x, set) ? A2(_elm_lang$core$Set$remove, x, set) : A2(_elm_lang$core$Set$insert, x, set);
	});
var _user$project$Utils$getWithDefault = F3(
	function (key, $default, dict) {
		var _p101 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p101.ctor === 'Just') {
			return _p101._0;
		} else {
			return $default;
		}
	});
var _user$project$Utils$justGetError = F4(
	function (s, k, d, _p102) {
		var _p103 = _p102;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'Utils.justGet ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				s,
				A2(
					_elm_lang$core$Basics_ops['++'],
					': key ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(k),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' not found in dictionary ',
							_elm_lang$core$Basics$toString(d))))));
	});
var _user$project$Utils$unwrapNestedResult = function (nestedResult) {
	var _p104 = nestedResult;
	if (_p104.ctor === 'Err') {
		return _elm_lang$core$Result$Err(_p104._0);
	} else {
		if (_p104._0.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_p104._0._0);
		} else {
			return _elm_lang$core$Result$Ok(_p104._0._0);
		}
	}
};
var _user$project$Utils$fromOkWithDefault = F2(
	function ($default, result) {
		var _p105 = result;
		if (_p105.ctor === 'Ok') {
			return _p105._0;
		} else {
			return $default;
		}
	});
var _user$project$Utils$fromOk = F2(
	function (s, mx) {
		var _p106 = mx;
		if (_p106.ctor === 'Ok') {
			return _p106._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Utils',
				{
					start: {line: 817, column: 15},
					end: {line: 819, column: 60}
				},
				_p106)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'fromOk [',
					A2(
						_elm_lang$core$Basics_ops['++'],
						s,
						A2(_elm_lang$core$Basics_ops['++'], ']: ', _p106._0))));
		}
	});
var _user$project$Utils$fromOk_ = _user$project$Utils$fromOk('');
var _user$project$Utils$parseInt = function (_p108) {
	return _user$project$Utils$fromOk_(
		_elm_lang$core$String$toInt(_p108));
};
var _user$project$Utils$parseFloat = function (_p109) {
	return _user$project$Utils$fromOk_(
		_elm_lang$core$String$toFloat(_p109));
};
var _user$project$Utils$fromOkay = F2(
	function (s, mx) {
		var _p110 = mx;
		if (_p110.ctor === 'Ok') {
			return _p110._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Utils',
				{
					start: {line: 810, column: 17},
					end: {line: 812, column: 53}
				},
				_p110)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'fromOkay [',
					A2(_elm_lang$core$Basics_ops['++'], s, ']: ')));
		}
	});
var _user$project$Utils$fromJust__ = F2(
	function (f, mx) {
		var _p112 = mx;
		if (_p112.ctor === 'Just') {
			return _p112._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Utils',
				{
					start: {line: 805, column: 19},
					end: {line: 807, column: 33}
				},
				_p112)(
				f(
					{ctor: '_Tuple0'}));
		}
	});
var _user$project$Utils$justGet = F2(
	function (k, d) {
		return A2(
			_user$project$Utils$fromJust__,
			A3(_user$project$Utils$justGetError, '', k, d),
			A2(_elm_lang$core$Dict$get, k, d));
	});
var _user$project$Utils$justGet_ = F3(
	function (s, k, d) {
		return A2(
			_user$project$Utils$fromJust__,
			A3(_user$project$Utils$justGetError, s, k, d),
			A2(_elm_lang$core$Dict$get, k, d));
	});
var _user$project$Utils$fromJust_ = F2(
	function (s, mx) {
		var _p114 = mx;
		if (_p114.ctor === 'Just') {
			return _p114._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Utils',
				{
					start: {line: 800, column: 18},
					end: {line: 802, column: 53}
				},
				_p114)(
				A2(_elm_lang$core$Basics_ops['++'], 'Utils.fromJust_: ', s));
		}
	});
var _user$project$Utils$head = function (msg) {
	return function (_p116) {
		return A2(
			_user$project$Utils$fromJust_,
			msg,
			_elm_lang$core$List$head(_p116));
	};
};
var _user$project$Utils$head_ = _user$project$Utils$head('Utils.head_');
var _user$project$Utils$tail = function (msg) {
	return function (_p117) {
		return A2(
			_user$project$Utils$fromJust_,
			msg,
			_elm_lang$core$List$tail(_p117));
	};
};
var _user$project$Utils$last = function (msg) {
	return function (_p118) {
		return A2(
			_user$project$Utils$fromJust_,
			msg,
			_user$project$Utils$maybeLast(_p118));
	};
};
var _user$project$Utils$last_ = _user$project$Utils$last('Utils.last_');
var _user$project$Utils$tail_ = function (_p119) {
	return A2(
		_user$project$Utils$fromJust_,
		'Utils.tail_',
		_elm_lang$core$List$tail(_p119));
};
var _user$project$Utils$fromJust = function (m) {
	var _p120 = m;
	if (_p120.ctor === 'Just') {
		return _p120._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 796, column: 14},
				end: {line: 798, column: 54}
			},
			_p120)('Utils.fromJust: Nothing');
	}
};
var _user$project$Utils$resultToBool = function (r) {
	var _p122 = r;
	if (_p122.ctor === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Utils$maybeToBool = function (m) {
	var _p123 = m;
	if (_p123.ctor === 'Just') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Utils$assert = F2(
	function (s, b) {
		return b ? {ctor: '_Tuple0'} : _elm_lang$core$Native_Utils.crash(
			'Utils',
			{
				start: {line: 786, column: 32},
				end: {line: 786, column: 43}
			})(
			A2(_elm_lang$core$Basics_ops['++'], 'assert error: ', s));
	});
var _user$project$Utils$lift_2_2 = F3(
	function (f, _p125, _p124) {
		var _p126 = _p125;
		var _p127 = _p124;
		return {
			ctor: '_Tuple2',
			_0: A2(f, _p126._0, _p127._0),
			_1: A2(f, _p126._1, _p127._1)
		};
	});
var _user$project$Utils$mean = function (ns) {
	return _elm_lang$core$List$sum(ns) / _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$length(ns));
};
var _user$project$Utils$stringReplace = F3(
	function (target, replacement, string) {
		return A2(
			_elm_lang$core$String$join,
			replacement,
			A2(_elm_lang$core$String$split, target, string));
	});
var _user$project$Utils$uncapitalize = function (str) {
	var _p128 = A2(_elm_lang$core$String$split, '', str);
	if (_p128.ctor === '[]') {
		return '';
	} else {
		return A2(
			_elm_lang$core$String$join,
			'',
			{
				ctor: '::',
				_0: _elm_lang$core$String$toLower(_p128._0),
				_1: _p128._1
			});
	}
};
var _user$project$Utils$capitalize = function (str) {
	var _p129 = A2(_elm_lang$core$String$split, '', str);
	if (_p129.ctor === '[]') {
		return '';
	} else {
		return A2(
			_elm_lang$core$String$join,
			'',
			{
				ctor: '::',
				_0: _elm_lang$core$String$toUpper(_p129._0),
				_1: _p129._1
			});
	}
};
var _user$project$Utils$pluralize = F2(
	function (count, singular) {
		var _p130 = count;
		if (_p130 === 1) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(count),
				A2(_elm_lang$core$Basics_ops['++'], ' ', singular));
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(count),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(_elm_lang$core$Basics_ops['++'], singular, 's')));
		}
	});
var _user$project$Utils$perhapsPluralizeList = F2(
	function (str, list) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			str,
			_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(list),
				1) ? '' : 's');
	});
var _user$project$Utils$niceTruncateString = F3(
	function (n, toBeContinuedStr, str) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(str),
			n) > 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$String$trimRight(
				A2(
					_elm_lang$core$String$left,
					n - _elm_lang$core$String$length(toBeContinuedStr),
					str)),
			toBeContinuedStr) : str;
	});
var _user$project$Utils$squish = function (str) {
	return _elm_lang$core$String$trim(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('\\s+'),
			function (_p131) {
				return ' ';
			},
			str));
};
var _user$project$Utils$removeNumericSuffix = function (string) {
	return A3(
		_elm_lang$core$String$foldr,
		F2(
			function ($char, string) {
				return (_elm_lang$core$Native_Utils.eq(string, '') && _elm_lang$core$Char$isDigit($char)) ? '' : A2(_elm_lang$core$String$cons, $char, string);
			}),
		'',
		string);
};
var _user$project$Utils$commonPrefixString = function (strings) {
	return _elm_lang$core$String$fromList(
		_user$project$Utils$commonPrefix(
			A2(_elm_lang$core$List$map, _elm_lang$core$String$toList, strings)));
};
var _user$project$Utils$commonSuffixString = function (strings) {
	return _elm_lang$core$String$reverse(
		_user$project$Utils$commonPrefixString(
			A2(_elm_lang$core$List$map, _elm_lang$core$String$reverse, strings)));
};
var _user$project$Utils$takeNLines = F2(
	function (n, s) {
		return A2(
			_elm_lang$core$String$join,
			'\n',
			A2(
				_elm_lang$core$List$take,
				n,
				_elm_lang$core$String$lines(s)));
	});
var _user$project$Utils$splitString = F2(
	function (n, s) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$String$left, n, s),
			_1: A2(_elm_lang$core$String$dropLeft, n, s)
		};
	});
var _user$project$Utils$munchString = F2(
	function (prefix, s) {
		var _p132 = A2(
			_user$project$Utils$splitString,
			_elm_lang$core$String$length(prefix),
			s);
		var pre = _p132._0;
		var suf = _p132._1;
		return _elm_lang$core$Native_Utils.eq(pre, prefix) ? _elm_lang$core$Maybe$Just(suf) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Utils$lines = _elm_lang$core$String$join('\n');
var _user$project$Utils$commas = _elm_lang$core$String$join(', ');
var _user$project$Utils$spaces = _elm_lang$core$String$join(' ');
var _user$project$Utils$delimit = F3(
	function (a, b, s) {
		return _elm_lang$core$String$concat(
			{
				ctor: '::',
				_0: a,
				_1: {
					ctor: '::',
					_0: s,
					_1: {
						ctor: '::',
						_0: b,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Utils$parens = A2(_user$project$Utils$delimit, '(', ')');
var _user$project$Utils$bracks = A2(_user$project$Utils$delimit, '[', ']');
var _user$project$Utils$ibracks = A2(_user$project$Utils$delimit, '[|', '|]');
var _user$project$Utils$braces = A2(_user$project$Utils$delimit, '{', '}');
var _user$project$Utils$angleBracks = A2(_user$project$Utils$delimit, '<', '>');
var _user$project$Utils$minimumByComparator = F2(
	function (cmp, list) {
		var _p133 = list;
		if (_p133.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p137 = _p133._0;
			var _p134 = A2(_user$project$Utils$minimumByComparator, cmp, _p133._1);
			if (_p134.ctor === 'Just') {
				var _p136 = _p134._0;
				var _p135 = A2(cmp, _p137, _p136);
				switch (_p135.ctor) {
					case 'LT':
						return _elm_lang$core$Maybe$Just(_p137);
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p137);
					default:
						return _elm_lang$core$Maybe$Just(_p136);
				}
			} else {
				return _elm_lang$core$Maybe$Just(_p137);
			}
		}
	});
var _user$project$Utils$count = F2(
	function (pred, list) {
		return _elm_lang$core$List$length(
			A2(_elm_lang$core$List$filter, pred, list));
	});
var _user$project$Utils$maybeConsensus = function (bools) {
	return A2(
		_elm_lang$core$List$all,
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(true),
		bools) ? _elm_lang$core$Maybe$Just(true) : (A2(
		_elm_lang$core$List$all,
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(false),
		bools) ? _elm_lang$core$Maybe$Just(false) : _elm_lang$core$Maybe$Nothing);
};
var _user$project$Utils$allTrue = _elm_lang$core$List$all(_elm_lang$core$Basics$identity);
var _user$project$Utils$allSame = function (list) {
	var _p138 = list;
	if (_p138.ctor === '[]') {
		return false;
	} else {
		return A2(
			_elm_lang$core$List$all,
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(_p138._0),
			_p138._1);
	}
};
var _user$project$Utils$changeTail = F2(
	function (f, list) {
		var _p139 = list;
		if (_p139.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p139._0,
				_1: f(_p139._1)
			};
		}
	});
var _user$project$Utils$getReplacei0 = F3(
	function (i, f, list) {
		var _p140 = {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, i, list),
			_1: A2(_elm_lang$core$List$drop, i, list)
		};
		if ((_p140.ctor === '_Tuple2') && (_p140._1.ctor === '::')) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p140._0,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: f(_p140._1._0),
						_1: {ctor: '[]'}
					},
					_p140._1._1));
		} else {
			return list;
		}
	});
var _user$project$Utils$getReplacei1 = F3(
	function (i, f, list) {
		return A3(_user$project$Utils$getReplacei0, i - 1, f, list);
	});
var _user$project$Utils$mapHead = F2(
	function (f, list) {
		return A3(_user$project$Utils$getReplacei0, 0, f, list);
	});
var _user$project$Utils$mapLast = F2(
	function (f, list) {
		return A3(
			_user$project$Utils$getReplacei0,
			_elm_lang$core$List$length(list) - 1,
			f,
			list);
	});
var _user$project$Utils$maybeGeti1 = F2(
	function (i, list) {
		return (_elm_lang$core$Native_Utils.cmp(i, 1) > -1) ? _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, i - 1, list)) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Utils$maybeGeti0 = F2(
	function (i, list) {
		return (_elm_lang$core$Native_Utils.cmp(i, 0) > -1) ? _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, i, list)) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Utils$inserti = F3(
	function (i, xi_, xs) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$List$take, i - 1, xs),
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: xi_,
					_1: {ctor: '[]'}
				},
				A2(_elm_lang$core$List$drop, i - 1, xs)));
	});
var _user$project$Utils$removei = F2(
	function (i, xs) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$List$take, i - 1, xs),
			A2(_elm_lang$core$List$drop, i, xs));
	});
var _user$project$Utils$replacei = F3(
	function (i, xi_, xs) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$List$take, i - 1, xs),
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: xi_,
					_1: {ctor: '[]'}
				},
				A2(_elm_lang$core$List$drop, i, xs)));
	});
var _user$project$Utils$geti = function (i) {
	return function (_p141) {
		return A2(
			_user$project$Utils$fromJust_,
			'Utils.geti',
			_elm_lang$core$List$head(
				A2(_elm_lang$core$List$drop, i - 1, _p141)));
	};
};
var _user$project$Utils$getRemovei1 = F2(
	function (i, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_user$project$Utils$geti, i, xs),
			_1: A2(_user$project$Utils$removei, i, xs)
		};
	});
var _user$project$Utils$findi_ = F3(
	function (i, p, xs) {
		findi_:
		while (true) {
			var _p142 = xs;
			if (_p142.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (p(_p142._0)) {
					return _elm_lang$core$Maybe$Just(i);
				} else {
					var _v93 = i + 1,
						_v94 = p,
						_v95 = _p142._1;
					i = _v93;
					p = _v94;
					xs = _v95;
					continue findi_;
				}
			}
		}
	});
var _user$project$Utils$findi = F2(
	function (p, xs) {
		return A3(_user$project$Utils$findi_, 1, p, xs);
	});
var _user$project$Utils$firstOrLazySecond = F2(
	function (maybe1, lazyMaybe2) {
		var _p143 = maybe1;
		if (_p143.ctor === 'Just') {
			return maybe1;
		} else {
			return lazyMaybe2(
				{ctor: '_Tuple0'});
		}
	});
var _user$project$Utils$mapFirstSuccess = F2(
	function (f, list) {
		mapFirstSuccess:
		while (true) {
			var _p144 = list;
			if (_p144.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p145 = f(_p144._0);
				if (_p145.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(_p145._0);
				} else {
					var _v99 = f,
						_v100 = _p144._1;
					f = _v99;
					list = _v100;
					continue mapFirstSuccess;
				}
			}
		}
	});
var _user$project$Utils$removeLastElement = function (list) {
	return A2(
		_elm_lang$core$List$take,
		_elm_lang$core$List$length(list) - 1,
		list);
};
var _user$project$Utils$maybeMapLast = F2(
	function (f, list) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (last) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Utils$removeLastElement(list),
					{
						ctor: '::',
						_0: f(last),
						_1: {ctor: '[]'}
					});
			},
			_user$project$Utils$maybeLast(list));
	});
var _user$project$Utils$maybeRemoveFirst = F2(
	function (x, ys) {
		var _p146 = ys;
		if (_p146.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p150 = _p146._1;
			var _p149 = _p146._0._1;
			var _p148 = _p146._0._0;
			if (_elm_lang$core$Native_Utils.eq(x, _p148)) {
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p149, _1: _p150});
			} else {
				var _p147 = A2(_user$project$Utils$maybeRemoveFirst, x, _p150);
				if (_p147.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '_Tuple2',
							_0: _p147._0._0,
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _p148, _1: _p149},
								_1: _p147._0._1
							}
						});
				}
			}
		}
	});
var _user$project$Utils$removeFirst = F2(
	function (x, ys) {
		var _p151 = ys;
		if (_p151.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p153 = _p151._1;
			var _p152 = _p151._0;
			return _elm_lang$core$Native_Utils.eq(x, _p152) ? _p153 : {
				ctor: '::',
				_0: _p152,
				_1: A2(_user$project$Utils$removeFirst, x, _p153)
			};
		}
	});
var _user$project$Utils$mapAndRemoveFirstSuccess = F2(
	function (f, list) {
		var _p154 = list;
		if (_p154.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p159 = _p154._1;
			var _p158 = _p154._0;
			var _p155 = f(_p158);
			if (_p155.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p155._0, _1: _p159});
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					function (_p156) {
						var _p157 = _p156;
						return {
							ctor: '_Tuple2',
							_0: _p157._0,
							_1: {ctor: '::', _0: _p158, _1: _p157._1}
						};
					},
					A2(_user$project$Utils$mapAndRemoveFirstSuccess, f, _p159));
			}
		}
	});
var _user$project$Utils$maybeFindAndRemoveFirst = F2(
	function (p, xs) {
		var _p160 = xs;
		if (_p160.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p164 = _p160._1;
			var _p163 = _p160._0;
			return p(_p163) ? _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: _p163, _1: _p164}) : A2(
				_elm_lang$core$Maybe$map,
				function (_p161) {
					var _p162 = _p161;
					return {
						ctor: '_Tuple2',
						_0: _p162._0,
						_1: {ctor: '::', _0: _p163, _1: _p162._1}
					};
				},
				A2(_user$project$Utils$maybeFindAndRemoveFirst, p, _p164));
		}
	});
var _user$project$Utils$findSublistIndex_ = F3(
	function (i, targetList, list) {
		findSublistIndex_:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(
				A2(
					_elm_lang$core$List$take,
					_elm_lang$core$List$length(targetList),
					list),
				targetList)) {
				return _elm_lang$core$Maybe$Just(i);
			} else {
				var _p165 = list;
				if (_p165.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _v110 = i + 1,
						_v111 = targetList,
						_v112 = _p165._1;
					i = _v110;
					targetList = _v111;
					list = _v112;
					continue findSublistIndex_;
				}
			}
		}
	});
var _user$project$Utils$findSublistIndex = F2(
	function (targetList, list) {
		return A3(_user$project$Utils$findSublistIndex_, 0, targetList, list);
	});
var _user$project$Utils$findFirst = F2(
	function (p, xs) {
		findFirst:
		while (true) {
			var _p166 = xs;
			if (_p166.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p167 = _p166._0;
				if (p(_p167)) {
					return _elm_lang$core$Maybe$Just(_p167);
				} else {
					var _v114 = p,
						_v115 = _p166._1;
					p = _v114;
					xs = _v115;
					continue findFirst;
				}
			}
		}
	});
var _user$project$Utils$findLast = F2(
	function (p, xs) {
		return A2(
			_user$project$Utils$findFirst,
			p,
			_elm_lang$core$List$reverse(xs));
	});
var _user$project$Utils$anyOverlapTwoLists = F2(
	function (l1, l2) {
		return A2(
			_elm_lang$core$List$any,
			function (item) {
				return A2(_elm_lang$core$List$member, item, l2);
			},
			l1);
	});
var _user$project$Utils$anyOverlapListSet = F2(
	function (items, set) {
		var _p168 = items;
		if (_p168.ctor === '[]') {
			return false;
		} else {
			return A2(_elm_lang$core$Set$member, _p168._0, set) || A2(_user$project$Utils$anyOverlapListSet, _p168._1, set);
		}
	});
var _user$project$Utils$unionAll = function (sets) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$union, _elm_lang$core$Set$empty, sets);
};
var _user$project$Utils$anyOverlap = function (sets) {
	return _elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Set$size(
			_user$project$Utils$unionAll(sets)),
		_elm_lang$core$List$sum(
			A2(_elm_lang$core$List$map, _elm_lang$core$Set$size, sets))) < 0;
};
var _user$project$Utils$intersectMany = function (list) {
	var _p169 = list;
	if (_p169.ctor === '::') {
		return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$intersect, _p169._0, _p169._1);
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Utils',
			{
				start: {line: 404, column: 22},
				end: {line: 406, column: 43}
			},
			_p169)('intersectMany');
	}
};
var _user$project$Utils$isSubset = F2(
	function (sub, sup) {
		return A2(
			_elm_lang$core$List$all,
			function (elem) {
				return A2(_elm_lang$core$Set$member, elem, sup);
			},
			_elm_lang$core$Set$toList(sub));
	});
var _user$project$Utils$cartProdAll = function (xss) {
	var _p171 = xss;
	if (_p171.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		return A2(
			_elm_lang$core$List$concatMap,
			function (x) {
				return A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(x),
					_user$project$Utils$cartProdAll(_p171._1));
			},
			_p171._0);
	}
};
var _user$project$Utils$cartProd = F2(
	function (xs, ys) {
		return A2(
			_elm_lang$core$List$concatMap,
			function (x) {
				return A2(
					_elm_lang$core$List$map,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})(x),
					ys);
			},
			xs);
	});
var _user$project$Utils$slice = F3(
	function (start, end, list) {
		return A2(
			_elm_lang$core$List$take,
			end - start,
			A2(_elm_lang$core$List$drop, start, list));
	});
var _user$project$Utils$dropLast = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A2(
				_elm_lang$core$List$drop,
				n,
				_elm_lang$core$List$reverse(list)));
	});
var _user$project$Utils$toSentence = function (strings) {
	var _p172 = {
		ctor: '_Tuple2',
		_0: A2(_user$project$Utils$dropLast, 1, strings),
		_1: _user$project$Utils$maybeLast(strings)
	};
	if (_p172._1.ctor === 'Nothing') {
		return '';
	} else {
		if (_p172._0.ctor === '[]') {
			return _p172._1._0;
		} else {
			if (_p172._0._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p172._0._0,
					A2(_elm_lang$core$Basics_ops['++'], ' and ', _p172._1._0));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$String$join, ', ', _p172._0),
					A2(_elm_lang$core$Basics_ops['++'], ', and ', _p172._1._0));
			}
		}
	}
};
var _user$project$Utils$mergeStrings = function (strings) {
	var stringsWords = A2(
		_elm_lang$core$List$map,
		function (_p173) {
			return A2(
				_elm_lang$core$String$split,
				' ',
				_user$project$Utils$squish(_p173));
		},
		strings);
	var prefixWords = _user$project$Utils$commonPrefix(stringsWords);
	var noPrefixes = _user$project$Utils$removeCommonPrefix(stringsWords);
	var suffixWords = _user$project$Utils$commonSuffix(noPrefixes);
	var middleString = _user$project$Utils$toSentence(
		A2(
			_elm_lang$core$List$filter,
			function (_p174) {
				return !_elm_lang$core$String$isEmpty(_p174);
			},
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$String$join(' '),
				_user$project$Utils$removeCommonSuffix(noPrefixes))));
	return A2(
		_elm_lang$core$String$join,
		' ',
		A2(
			_elm_lang$core$List$filter,
			function (_p175) {
				return !_elm_lang$core$String$isEmpty(_p175);
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				prefixWords,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: middleString,
						_1: {ctor: '[]'}
					},
					suffixWords))));
};
var _user$project$Utils$splitBy = F2(
	function (splitElems, list) {
		var _p176 = A2(_user$project$Utils$findSublistIndex, splitElems, list);
		if (_p176.ctor === 'Just') {
			var _p177 = _p176._0;
			return {
				ctor: '::',
				_0: A2(_elm_lang$core$List$take, _p177, list),
				_1: A2(
					_user$project$Utils$splitBy,
					splitElems,
					A2(
						_elm_lang$core$List$drop,
						_p177 + _elm_lang$core$List$length(splitElems),
						list))
			};
		} else {
			return {
				ctor: '::',
				_0: list,
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Utils$split = F2(
	function (n, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, n, xs),
			_1: A2(_elm_lang$core$List$drop, n, xs)
		};
	});
var _user$project$Utils$snoc = F2(
	function (xs, x) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			xs,
			{
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			});
	});
var _user$project$Utils$snocMaybe = F2(
	function (xs, mx) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			xs,
			A2(
				_user$project$Utils$mapMaybe,
				_user$project$Utils$snoc(xs),
				mx));
	});
var _user$project$Utils$maybeUnpackSingleton = function (xs) {
	var _p178 = xs;
	if ((_p178.ctor === '::') && (_p178._1.ctor === '[]')) {
		return _elm_lang$core$Maybe$Just(_p178._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Utils$oneElement = function (xs) {
	var _p179 = xs;
	if ((_p179.ctor === '::') && (_p179._1.ctor === '[]')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Utils$zeroElements = function (xs) {
	var _p180 = xs;
	if (_p180.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Utils$clamp = F3(
	function (i, j, n) {
		return (_elm_lang$core$Native_Utils.cmp(n, i) < 0) ? i : ((_elm_lang$core$Native_Utils.cmp(j, n) < 0) ? j : n);
	});
var _user$project$Utils$oneToOneMappingExists = F2(
	function (l1, l2) {
		var numericRepresentation = function (list) {
			return _elm_lang$core$Tuple$second(
				A3(
					_elm_lang$core$List$foldl,
					F2(
						function (x, _p181) {
							var _p182 = _p181;
							var _p185 = _p182._1;
							var _p184 = _p182._0;
							var _p183 = A2(_elm_lang$core$Dict$get, x, _p184);
							if (_p183.ctor === 'Just') {
								return {
									ctor: '_Tuple2',
									_0: _p184,
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_p185,
										{
											ctor: '::',
											_0: _p183._0,
											_1: {ctor: '[]'}
										})
								};
							} else {
								var n = _elm_lang$core$Dict$size(_p184);
								var dict_ = A3(_elm_lang$core$Dict$insert, x, n, _p184);
								return {
									ctor: '_Tuple2',
									_0: dict_,
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_p185,
										{
											ctor: '::',
											_0: n,
											_1: {ctor: '[]'}
										})
								};
							}
						}),
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$empty,
						_1: {ctor: '[]'}
					},
					list));
		};
		return _elm_lang$core$Native_Utils.eq(
			numericRepresentation(l1),
			numericRepresentation(l2));
	});
var _user$project$Utils$pairsToDictOfLists = function (pairs) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (_p186, dict) {
				var _p187 = _p186;
				var _p188 = _p187._0;
				var equivalents = A3(
					_user$project$Utils$getWithDefault,
					_p188,
					{ctor: '[]'},
					dict);
				return A3(
					_elm_lang$core$Dict$insert,
					_p188,
					{ctor: '::', _0: _p187._1, _1: equivalents},
					dict);
			}),
		_elm_lang$core$Dict$empty,
		pairs);
};
var _user$project$Utils$groupBy = F2(
	function (f, list) {
		return _user$project$Utils$pairsToDictOfLists(
			A2(
				_elm_lang$core$List$map,
				function (x) {
					return {
						ctor: '_Tuple2',
						_0: f(x),
						_1: x
					};
				},
				list));
	});
var _user$project$Utils$combinationsAsSet = F2(
	function (n, list) {
		var _p189 = {ctor: '_Tuple2', _0: n, _1: list};
		_v127_0:
		do {
			if (_p189._1.ctor === '[]') {
				if (_p189._0 === 0) {
					break _v127_0;
				} else {
					return {ctor: '[]'};
				}
			} else {
				if (_p189._0 === 0) {
					break _v127_0;
				} else {
					var _p190 = _p189._1._1;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							F2(
								function (x, y) {
									return {ctor: '::', _0: x, _1: y};
								})(_p189._1._0),
							A2(_user$project$Utils$combinationsAsSet, n - 1, _p190)),
						A2(_user$project$Utils$combinationsAsSet, n, _p190));
				}
			}
		} while(false);
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	});
var _user$project$Utils$isSublistAsSet = F2(
	function (sub, $super) {
		return A2(
			_elm_lang$core$List$all,
			function (x) {
				return A2(_elm_lang$core$List$member, x, $super);
			},
			sub);
	});
var _user$project$Utils$equalAsSets = F2(
	function (a, b) {
		return A2(_user$project$Utils$isSublistAsSet, a, b) && A2(_user$project$Utils$isSublistAsSet, b, a);
	});
var _user$project$Utils$intersectAsSet = F2(
	function (xs, ys) {
		return A2(
			_elm_lang$core$List$filter,
			function (x) {
				return A2(_elm_lang$core$List$member, x, ys);
			},
			xs);
	});
var _user$project$Utils$intersectAllAsSet = function (lists) {
	var _p191 = lists;
	if (_p191.ctor === '::') {
		return A3(_elm_lang$core$List$foldl, _user$project$Utils$intersectAsSet, _p191._0, _p191._1);
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Utils$removeAsSet = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$filter,
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				})(x),
			xs);
	});
var _user$project$Utils$diffAsSet = F2(
	function (xs, ys) {
		return A3(_elm_lang$core$List$foldl, _user$project$Utils$removeAsSet, xs, ys);
	});
var _user$project$Utils$removeAll = _user$project$Utils$diffAsSet;
var _user$project$Utils$addAsSet = F2(
	function (x, xs) {
		return A2(_elm_lang$core$List$member, x, xs) ? xs : A2(
			_elm_lang$core$Basics_ops['++'],
			xs,
			{
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			});
	});
var _user$project$Utils$addAllAsSet = F2(
	function (xs, ys) {
		return A3(_elm_lang$core$List$foldl, _user$project$Utils$addAsSet, xs, ys);
	});
var _user$project$Utils$unionAllAsSet = function (lists) {
	return A3(
		_elm_lang$core$List$foldl,
		_user$project$Utils$addAllAsSet,
		{ctor: '[]'},
		lists);
};
var _user$project$Utils$multiToggleAsSet = F2(
	function (insertSet, set) {
		return A2(
			_user$project$Utils$diffAsSet,
			A2(_user$project$Utils$addAllAsSet, insertSet, set),
			A2(_user$project$Utils$intersectAsSet, insertSet, set));
	});
var _user$project$Utils$listDiffSet = F2(
	function (list, setToRemove) {
		return A2(
			_elm_lang$core$List$filter,
			function (element) {
				return !A2(_elm_lang$core$Set$member, element, setToRemove);
			},
			list);
	});
var _user$project$Utils$listDiff = F2(
	function (l1, l2) {
		return A2(
			_user$project$Utils$listDiffSet,
			l1,
			_elm_lang$core$Set$fromList(l2));
	});
var _user$project$Utils$dedupBy = F2(
	function (f, xs) {
		var _p192 = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, _p193) {
					var _p194 = _p193;
					var _p196 = _p194._1;
					var _p195 = _p194._0;
					var key = f(x);
					return A2(_elm_lang$core$Set$member, key, _p196) ? {ctor: '_Tuple2', _0: _p195, _1: _p196} : {
						ctor: '_Tuple2',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							_p195,
							{
								ctor: '::',
								_0: x,
								_1: {ctor: '[]'}
							}),
						_1: A2(_elm_lang$core$Set$insert, key, _p196)
					};
				}),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Set$empty
			},
			xs);
		var deduped = _p192._0;
		return deduped;
	});
var _user$project$Utils$dedup = function (xs) {
	return A2(_user$project$Utils$dedupBy, _elm_lang$core$Basics$identity, xs);
};
var _user$project$Utils$listsEqualBy = F3(
	function (elementEqualityFunc, xs, ys) {
		var _p197 = {ctor: '_Tuple2', _0: xs, _1: ys};
		_v130_2:
		do {
			if (_p197.ctor === '_Tuple2') {
				if (_p197._0.ctor === '[]') {
					if (_p197._1.ctor === '[]') {
						return true;
					} else {
						break _v130_2;
					}
				} else {
					if (_p197._1.ctor === '::') {
						return A2(elementEqualityFunc, _p197._0._0, _p197._1._0) && A3(_user$project$Utils$listsEqualBy, elementEqualityFunc, _p197._0._1, _p197._1._1);
					} else {
						break _v130_2;
					}
				}
			} else {
				break _v130_2;
			}
		} while(false);
		return false;
	});
var _user$project$Utils$filterMapTogetherPreservingLeftovers = F3(
	function (f, l1, l2) {
		filterMapTogetherPreservingLeftovers:
		while (true) {
			var _p198 = {ctor: '_Tuple2', _0: l1, _1: l2};
			if (((_p198.ctor === '_Tuple2') && (_p198._0.ctor === '::')) && (_p198._1.ctor === '::')) {
				var _p202 = _p198._1._1;
				var _p201 = _p198._0._1;
				var _p199 = A2(f, _p198._0._0, _p198._1._0);
				if (_p199.ctor === 'Just') {
					var _p200 = A3(_user$project$Utils$filterMapTogetherPreservingLeftovers, f, _p201, _p202);
					var newXRest = _p200._0;
					var newYRest = _p200._1;
					return {
						ctor: '_Tuple2',
						_0: {ctor: '::', _0: _p199._0._0, _1: newXRest},
						_1: {ctor: '::', _0: _p199._0._1, _1: newYRest}
					};
				} else {
					var _v133 = f,
						_v134 = _p201,
						_v135 = _p202;
					f = _v133;
					l1 = _v134;
					l2 = _v135;
					continue filterMapTogetherPreservingLeftovers;
				}
			} else {
				return {ctor: '_Tuple2', _0: l1, _1: l2};
			}
		}
	});
var _user$project$Utils$reverse2 = function (_p203) {
	var _p204 = _p203;
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$List$reverse(_p204._0),
		_1: _elm_lang$core$List$reverse(_p204._1)
	};
};
var _user$project$Utils$zipi_ = F2(
	function (i, list) {
		var _p205 = list;
		if (_p205.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: i, _1: _p205._0},
				_1: A2(_user$project$Utils$zipi_, i + 1, _p205._1)
			};
		}
	});
var _user$project$Utils$mapi_ = F3(
	function (initI, f, xs) {
		return A2(
			_elm_lang$core$List$map,
			f,
			A2(_user$project$Utils$zipi_, initI, xs));
	});
var _user$project$Utils$mapi0 = _user$project$Utils$mapi_(0);
var _user$project$Utils$mapi1 = _user$project$Utils$mapi_(1);
var _user$project$Utils$naturalToCamelCase = function (natural) {
	return A2(
		_elm_lang$core$String$join,
		'',
		A2(
			_user$project$Utils$mapi1,
			function (_p206) {
				var _p207 = _p206;
				var _p208 = _p207._1;
				return _elm_lang$core$Native_Utils.eq(_p207._0, 1) ? _p208 : _user$project$Utils$capitalize(_p208);
			},
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$String$toLower,
				A2(_elm_lang$core$String$split, ' ', natural))));
};
var _user$project$Utils$foldli_ = F4(
	function (initI, f, init, xs) {
		return A3(
			_elm_lang$core$List$foldl,
			f,
			init,
			A2(_user$project$Utils$zipi_, initI, xs));
	});
var _user$project$Utils$foldli0 = _user$project$Utils$foldli_(0);
var _user$project$Utils$foldli1 = _user$project$Utils$foldli_(1);
var _user$project$Utils$manySetDiffs = function (sets) {
	return A2(
		_user$project$Utils$mapi1,
		function (_p209) {
			var _p210 = _p209;
			return A3(
				_user$project$Utils$foldli1,
				F2(
					function (_p211, acc) {
						var _p212 = _p211;
						return _elm_lang$core$Native_Utils.eq(_p210._0, _p212._0) ? acc : A2(_elm_lang$core$Set$diff, acc, _p212._1);
					}),
				_p210._1,
				sets);
		},
		sets);
};
var _user$project$Utils$cartProdWithDiff = function (_p213) {
	return _user$project$Utils$cartProdAll(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Set$toList,
			_user$project$Utils$manySetDiffs(_p213)));
};
var _user$project$Utils$zipi1 = _user$project$Utils$zipi_(1);
var _user$project$Utils$filteri1 = F2(
	function (f, xs) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			A2(
				_elm_lang$core$List$filter,
				f,
				_user$project$Utils$zipi1(xs)));
	});
var _user$project$Utils$concatMapi1 = F2(
	function (f, xs) {
		return A2(
			_elm_lang$core$List$concatMap,
			f,
			_user$project$Utils$zipi1(xs));
	});
var _user$project$Utils$listToIndexedDict = function (_p214) {
	return _elm_lang$core$Dict$fromList(
		_user$project$Utils$zipi1(_p214));
};
var _user$project$Utils$zipi0 = _user$project$Utils$zipi_(0);
var _user$project$Utils$maybeZipN = function (lists) {
	if (A2(_elm_lang$core$List$all, _user$project$Utils$zeroElements, lists)) {
		return _elm_lang$core$Maybe$Just(
			{ctor: '[]'});
	} else {
		if (A2(_elm_lang$core$List$all, _user$project$Utils$oneElement, lists)) {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: _elm_lang$core$List$concat(lists),
					_1: {ctor: '[]'}
				});
		} else {
			var maybeHeads = _user$project$Utils$projJusts(
				A2(_elm_lang$core$List$map, _elm_lang$core$List$head, lists));
			var maybeTails = _user$project$Utils$projJusts(
				A2(_elm_lang$core$List$map, _elm_lang$core$List$tail, lists));
			var _p215 = {ctor: '_Tuple2', _0: maybeHeads, _1: maybeTails};
			if (((_p215.ctor === '_Tuple2') && (_p215._0.ctor === 'Just')) && (_p215._1.ctor === 'Just')) {
				return A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(_p215._0._0),
					_user$project$Utils$maybeZipN(_p215._1._0));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	}
};
var _user$project$Utils$unzip3 = function (zipped) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (_p217, _p216) {
				var _p218 = _p217;
				var _p219 = _p216;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: _p218._0, _1: _p219._0},
					_1: {ctor: '::', _0: _p218._1, _1: _p219._1},
					_2: {ctor: '::', _0: _p218._2, _1: _p219._2}
				};
			}),
		{
			ctor: '_Tuple3',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'},
			_2: {ctor: '[]'}
		},
		zipped);
};
var _user$project$Utils$zip3 = F3(
	function (xs, ys, zs) {
		var _p220 = {ctor: '_Tuple3', _0: xs, _1: ys, _2: zs};
		if ((((_p220.ctor === '_Tuple3') && (_p220._0.ctor === '::')) && (_p220._1.ctor === '::')) && (_p220._2.ctor === '::')) {
			return {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: _p220._0._0, _1: _p220._1._0, _2: _p220._2._0},
				_1: A3(_user$project$Utils$zip3, _p220._0._1, _p220._1._1, _p220._2._1)
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Utils$maybeZipDicts = F2(
	function (d1, d2) {
		return (!_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Dict$keys(d1),
			_elm_lang$core$Dict$keys(d2))) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$core$Dict$map,
				F2(
					function (k, v1) {
						return {
							ctor: '_Tuple2',
							_0: v1,
							_1: A2(_user$project$Utils$justGet, k, d2)
						};
					}),
				d1));
	});
var _user$project$Utils$zipAndLeftovers = F2(
	function (list1, list2) {
		var _p221 = {ctor: '_Tuple2', _0: list1, _1: list2};
		_v145_1:
		do {
			if (_p221._0.ctor === '::') {
				if (_p221._1.ctor === '::') {
					return A2(
						_user$project$Utils$mapFst3,
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(
							{ctor: '_Tuple2', _0: _p221._0._0, _1: _p221._1._0}),
						A2(_user$project$Utils$zipAndLeftovers, _p221._0._1, _p221._1._1));
				} else {
					break _v145_1;
				}
			} else {
				if (_p221._1.ctor === '[]') {
					break _v145_1;
				} else {
					return {
						ctor: '_Tuple3',
						_0: {ctor: '[]'},
						_1: {ctor: '[]'},
						_2: _p221._1
					};
				}
			}
		} while(false);
		return {
			ctor: '_Tuple3',
			_0: {ctor: '[]'},
			_1: _p221._0,
			_2: {ctor: '[]'}
		};
	});
var _user$project$Utils$maybeZip = F2(
	function (xs, ys) {
		var _p222 = {ctor: '_Tuple2', _0: xs, _1: ys};
		_v146_2:
		do {
			if (_p222.ctor === '_Tuple2') {
				if (_p222._0.ctor === '::') {
					if (_p222._1.ctor === '::') {
						var _p223 = A2(_user$project$Utils$maybeZip, _p222._0._1, _p222._1._1);
						if (_p223.ctor === 'Nothing') {
							return _elm_lang$core$Maybe$Nothing;
						} else {
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p222._0._0, _1: _p222._1._0},
									_1: _p223._0
								});
						}
					} else {
						break _v146_2;
					}
				} else {
					if (_p222._1.ctor === '[]') {
						return _elm_lang$core$Maybe$Just(
							{ctor: '[]'});
					} else {
						break _v146_2;
					}
				}
			} else {
				break _v146_2;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Utils$zipWith = F3(
	function (f, xs, ys) {
		var _p224 = {ctor: '_Tuple2', _0: xs, _1: ys};
		if (((_p224.ctor === '_Tuple2') && (_p224._0.ctor === '::')) && (_p224._1.ctor === '::')) {
			return {
				ctor: '::',
				_0: A2(f, _p224._0._0, _p224._1._0),
				_1: A3(_user$project$Utils$zipWith, f, _p224._0._1, _p224._1._1)
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Utils$zip = _user$project$Utils$zipWith(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _user$project$Utils$overlappingAdjacentPairs_ = F2(
	function (includeLast, list) {
		var shiftList = function () {
			var _p225 = list;
			if (_p225.ctor === '::') {
				var _p226 = _p225._1;
				return includeLast ? A2(
					_elm_lang$core$Basics_ops['++'],
					_p226,
					{
						ctor: '::',
						_0: _p225._0,
						_1: {ctor: '[]'}
					}) : _p226;
			} else {
				return {ctor: '[]'};
			}
		}();
		return A2(_user$project$Utils$zip, list, shiftList);
	});
var _user$project$Utils$circOverlappingAdjacentPairs = function (list) {
	return A2(_user$project$Utils$overlappingAdjacentPairs_, true, list);
};
var _user$project$Utils$overlappingAdjacentPairs = function (list) {
	return A2(_user$project$Utils$overlappingAdjacentPairs_, false, list);
};
var _user$project$Utils$foldr = F3(
	function (acc, f, list) {
		return A3(_elm_lang$core$List$foldr, f, acc, list);
	});
var _user$project$Utils$foldl = F3(
	function (acc, f, list) {
		return A3(_elm_lang$core$List$foldl, f, acc, list);
	});
var _user$project$Utils$removeShadowedKeys = _user$project$Utils$dedupBy(_elm_lang$core$Tuple$first);
var _user$project$Utils$update = F2(
	function (_p227, vals) {
		var _p228 = _p227;
		var _p233 = _p228._1;
		var _p232 = _p228._0;
		var _p229 = vals;
		if (_p229.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p231 = _p229._1;
			var _p230 = _p229._0._0;
			return _elm_lang$core$Native_Utils.eq(_p230, _p232) ? {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _p230, _1: _p233},
				_1: _p231
			} : {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _p230, _1: _p229._0._1},
				_1: A2(
					_user$project$Utils$update,
					{ctor: '_Tuple2', _0: _p232, _1: _p233},
					_p231)
			};
		}
	});
var _user$project$Utils$maybeFind = F2(
	function (k, l) {
		maybeFind:
		while (true) {
			var _p234 = l;
			if (_p234.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_elm_lang$core$Native_Utils.eq(k, _p234._0._0)) {
					return _elm_lang$core$Maybe$Just(_p234._0._1);
				} else {
					var _v153 = k,
						_v154 = _p234._1;
					k = _v153;
					l = _v154;
					continue maybeFind;
				}
			}
		}
	});
var _user$project$Utils$find = F3(
	function (err, d, k) {
		var _p235 = A2(_user$project$Utils$maybeFind, k, d);
		if (_p235.ctor === 'Just') {
			return _p235._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Utils',
				{
					start: {line: 35, column: 3},
					end: {line: 37, column: 52}
				},
				_p235)(
				A2(_elm_lang$core$Basics_ops['++'], 'Utils.find: ', err));
		}
	});
var _user$project$Utils$find_ = F2(
	function (d, k) {
		return A3(
			_user$project$Utils$find,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'[',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(k),
					']')),
			d,
			k);
	});
var _user$project$Utils$correctFloatError = function (x) {
	if (_elm_lang$core$Native_Utils.eq(x, 0.0)) {
		return x;
	} else {
		var tens = 0 - _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Basics$round(
				A2(
					_elm_lang$core$Basics$logBase,
					10,
					_elm_lang$core$Basics$abs(x))));
		var multiplier = ((((((((((((2 * 2) * 2) * 3) * 3) * 5) * 5) * 7) * 11) * 13) * 17) * 19) * 23) * Math.pow(10.0, tens + 1);
		var corrected = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Basics$round(x * multiplier)) / multiplier;
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Basics$abs(corrected - x) / x,
			1.0e-7) < 0) ? corrected : x;
	}
};
var _user$project$Utils$nan = 0 / 0;
var _user$project$Utils$infinity = 1 / 0;

var _user$project$Lang$firstNestedExp = function (e) {
	firstNestedExp:
	while (true) {
		var _p0 = e.val.e__;
		_v0_5:
		do {
			switch (_p0.ctor) {
				case 'ELet':
					if (_p0._1.ctor === 'Def') {
						var _v1 = _p0._7;
						e = _v1;
						continue firstNestedExp;
					} else {
						break _v0_5;
					}
				case 'EComment':
					var _v2 = _p0._2;
					e = _v2;
					continue firstNestedExp;
				case 'EOption':
					var _v3 = _p0._4;
					e = _v3;
					continue firstNestedExp;
				case 'ETyp':
					var _v4 = _p0._3;
					e = _v4;
					continue firstNestedExp;
				case 'ETypeAlias':
					var _v5 = _p0._3;
					e = _v5;
					continue firstNestedExp;
				default:
					break _v0_5;
			}
		} while(false);
		return e;
	}
};
var _user$project$Lang$tagPatList = function (_p1) {
	var _p2 = _p1;
	return function (_p3) {
		return _elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (index, pat) {
						return A2(
							_user$project$Lang$tagSinglePat,
							{
								ctor: '_Tuple2',
								_0: _p2._0,
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									_p2._1,
									{
										ctor: '::',
										_0: index + 1,
										_1: {ctor: '[]'}
									})
							},
							pat);
					}),
				_p3));
	};
};
var _user$project$Lang$tagSinglePat = F2(
	function (ppid, pat) {
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: pat.val.pid, _1: ppid},
			_1: function () {
				var _p4 = pat.val.p__;
				switch (_p4.ctor) {
					case 'PConst':
						return {ctor: '[]'};
					case 'PBase':
						return {ctor: '[]'};
					case 'PVar':
						return {ctor: '[]'};
					case 'PWildcard':
						return {ctor: '[]'};
					case 'PAs':
						return A2(
							_user$project$Lang$tagPatList,
							ppid,
							{
								ctor: '::',
								_0: _p4._3,
								_1: {ctor: '[]'}
							});
					case 'PList':
						if (_p4._3.ctor === 'Nothing') {
							return A2(_user$project$Lang$tagPatList, ppid, _p4._1);
						} else {
							return A2(
								_user$project$Lang$tagPatList,
								ppid,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p4._1,
									{
										ctor: '::',
										_0: _p4._3._0,
										_1: {ctor: '[]'}
									}));
						}
					default:
						return A2(
							_user$project$Lang$tagPatList,
							ppid,
							{
								ctor: '::',
								_0: _p4._1,
								_1: {ctor: '[]'}
							});
				}
			}()
		};
	});
var _user$project$Lang$rootPathedPatternId = function (scopeId) {
	return {
		ctor: '_Tuple2',
		_0: scopeId,
		_1: {ctor: '[]'}
	};
};
var _user$project$Lang$tagBranchList = function (eid) {
	return function (_p5) {
		return _elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (index, branch) {
						var _p6 = branch.val;
						return A2(
							_user$project$Lang$tagSinglePat,
							_user$project$Lang$rootPathedPatternId(
								{ctor: '_Tuple2', _0: eid, _1: index + 1}),
							_p6._1);
					}),
				_p5));
	};
};
var _user$project$Lang$taggedExpPats = function (exp) {
	var _p7 = exp.val.e__;
	switch (_p7.ctor) {
		case 'EFun':
			return A2(
				_user$project$Lang$tagPatList,
				_user$project$Lang$rootPathedPatternId(
					{ctor: '_Tuple2', _0: exp.val.eid, _1: 1}),
				_p7._1);
		case 'ECase':
			return A2(_user$project$Lang$tagBranchList, exp.val.eid, _p7._2);
		case 'ELet':
			return A2(
				_user$project$Lang$tagSinglePat,
				_user$project$Lang$rootPathedPatternId(
					{ctor: '_Tuple2', _0: exp.val.eid, _1: 1}),
				_p7._3);
		case 'ETyp':
			return A2(
				_user$project$Lang$tagSinglePat,
				_user$project$Lang$rootPathedPatternId(
					{ctor: '_Tuple2', _0: exp.val.eid, _1: 1}),
				_p7._1);
		case 'ETypeAlias':
			return A2(
				_user$project$Lang$tagSinglePat,
				_user$project$Lang$rootPathedPatternId(
					{ctor: '_Tuple2', _0: exp.val.eid, _1: 1}),
				_p7._1);
		default:
			return {ctor: '[]'};
	}
};
var _user$project$Lang$hasPId = F2(
	function (pid, codeObject) {
		var _p8 = codeObject;
		if (_p8.ctor === 'P') {
			return _elm_lang$core$Native_Utils.eq(_p8._1.val.pid, pid);
		} else {
			return false;
		}
	});
var _user$project$Lang$isImplicitMain = function (e) {
	var _p9 = e.val.e__;
	if (_p9.ctor === 'ELet') {
		var _p10 = _p9._3.val.p__;
		if ((_p10.ctor === 'PVar') && (_p10._1 === '_IMPLICIT_MAIN')) {
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
var _user$project$Lang$isHiddenCodeObject = function (codeObject) {
	var _p11 = codeObject;
	switch (_p11.ctor) {
		case 'E':
			return _user$project$Lang$isImplicitMain(_p11._0);
		case 'ET':
			return _user$project$Lang$isImplicitMain(_p11._2);
		default:
			return false;
	}
};
var _user$project$Lang$isWord = function (codeObject) {
	var _p12 = codeObject;
	switch (_p12.ctor) {
		case 'E':
			var _p13 = _p12._0.val.e__;
			switch (_p13.ctor) {
				case 'EConst':
					return true;
				case 'EBase':
					return true;
				case 'EVar':
					return true;
				default:
					return false;
			}
		case 'P':
			var _p14 = _p12._1.val.p__;
			switch (_p14.ctor) {
				case 'PVar':
					return true;
				case 'PConst':
					return true;
				case 'PBase':
					return true;
				case 'PWildcard':
					return true;
				default:
					return false;
			}
		default:
			return false;
	}
};
var _user$project$Lang$isSelectable = function (codeObject) {
	var _p15 = codeObject;
	if (_p15.ctor === 'E') {
		var _p16 = _p15._0.val.e__;
		switch (_p16.ctor) {
			case 'EComment':
				return false;
			case 'EOption':
				return false;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var _user$project$Lang$isTarget = function (codeObject) {
	var _p17 = codeObject;
	switch (_p17.ctor) {
		case 'E':
			return false;
		case 'P':
			return false;
		case 'T':
			return false;
		case 'LBE':
			return false;
		case 'ET':
			return true;
		case 'PT':
			return true;
		default:
			return true;
	}
};
var _user$project$Lang$isTextSelectable = function (codeObject) {
	return _user$project$Lang$isSelectable(codeObject) && (!_user$project$Lang$isTarget(codeObject));
};
var _user$project$Lang$extractInfoFromCodeObject = function (codeObject) {
	var _p18 = codeObject;
	switch (_p18.ctor) {
		case 'E':
			return _elm_lang$core$Native_Utils.update(
				_p18._0,
				{val: codeObject});
		case 'P':
			return _elm_lang$core$Native_Utils.update(
				_p18._1,
				{val: codeObject});
		case 'T':
			return _elm_lang$core$Native_Utils.update(
				_p18._0,
				{val: codeObject});
		case 'LBE':
			return _elm_lang$core$Native_Utils.update(
				_p18._0,
				{val: codeObject});
		case 'ET':
			return _elm_lang$core$Native_Utils.update(
				_p18._1,
				{val: codeObject});
		case 'PT':
			return _elm_lang$core$Native_Utils.update(
				_p18._1,
				{val: codeObject});
		default:
			return _elm_lang$core$Native_Utils.update(
				_p18._1,
				{val: codeObject});
	}
};
var _user$project$Lang$indentWs = F2(
	function (spaces, ws) {
		return _elm_lang$core$String$reverse(
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$AtMost(1),
				_elm_lang$core$Regex$regex('\n'),
				function (_p19) {
					return A2(_elm_lang$core$Basics_ops['++'], spaces, '\n');
				},
				_elm_lang$core$String$reverse(ws)));
	});
var _user$project$Lang$tabsToSpaces = function (ws) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('\t'),
		function (_p20) {
			return '    ';
		},
		ws);
};
var _user$project$Lang$ensureWhitespace = function (s) {
	return _elm_lang$core$Native_Utils.eq(s, '') ? ' ' : s;
};
var _user$project$Lang$ensureWhitespaceNNewlines = F2(
	function (n, s) {
		var newlineCount = _elm_lang$core$List$length(
			A2(_elm_lang$core$String$split, '\n', s)) - 1;
		return _user$project$Lang$ensureWhitespace(
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$String$repeat, n - newlineCount, '\n'),
				s));
	});
var _user$project$Lang$allWhitespacesType_ = function (tipe) {
	var allWhitespacesForAllInner = function (oneOrMany) {
		var _p21 = oneOrMany;
		if (_p21.ctor === 'One') {
			return {
				ctor: '::',
				_0: _p21._0._0,
				_1: {ctor: '[]'}
			};
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p21._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						function (_p22) {
							var _p23 = _p22;
							return _p23._0;
						},
						_p21._1),
					{
						ctor: '::',
						_0: _p21._2,
						_1: {ctor: '[]'}
					}));
		}
	};
	var _p24 = tipe.val.t__;
	switch (_p24.ctor) {
		case 'TNum':
			return {
				ctor: '::',
				_0: _p24._0,
				_1: {ctor: '[]'}
			};
		case 'TBool':
			return {
				ctor: '::',
				_0: _p24._0,
				_1: {ctor: '[]'}
			};
		case 'TString':
			return {
				ctor: '::',
				_0: _p24._0,
				_1: {ctor: '[]'}
			};
		case 'TNull':
			return {
				ctor: '::',
				_0: _p24._0,
				_1: {ctor: '[]'}
			};
		case 'TList':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespacesType_(_p24._1),
					{
						ctor: '::',
						_0: _p24._2,
						_1: {ctor: '[]'}
					}));
		case 'TDict':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespacesType_(_p24._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Lang$allWhitespacesType_(_p24._2),
						{
							ctor: '::',
							_0: _p24._3,
							_1: {ctor: '[]'}
						})));
		case 'TTuple':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$concatMap, _user$project$Lang$allWhitespacesType_, _p24._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p24._2,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$Maybe$withDefault,
								{ctor: '[]'},
								A2(_elm_lang$core$Maybe$map, _user$project$Lang$allWhitespacesType_, _p24._3)),
							{
								ctor: '::',
								_0: _p24._4,
								_1: {ctor: '[]'}
							}))));
		case 'TArrow':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$concatMap, _user$project$Lang$allWhitespacesType_, _p24._1),
					{
						ctor: '::',
						_0: _p24._2,
						_1: {ctor: '[]'}
					}));
		case 'TUnion':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$concatMap, _user$project$Lang$allWhitespacesType_, _p24._1),
					{
						ctor: '::',
						_0: _p24._2,
						_1: {ctor: '[]'}
					}));
		case 'TNamed':
			return {
				ctor: '::',
				_0: _p24._0,
				_1: {ctor: '[]'}
			};
		case 'TVar':
			return {
				ctor: '::',
				_0: _p24._0,
				_1: {ctor: '[]'}
			};
		case 'TForall':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					allWhitespacesForAllInner(_p24._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Lang$allWhitespacesType_(_p24._2),
						{
							ctor: '::',
							_0: _p24._3,
							_1: {ctor: '[]'}
						})));
		default:
			return {
				ctor: '::',
				_0: _p24._0,
				_1: {ctor: '[]'}
			};
	}
};
var _user$project$Lang$allWhitespacesPat_ = function (pat) {
	var _p25 = pat.val.p__;
	switch (_p25.ctor) {
		case 'PVar':
			return {
				ctor: '::',
				_0: _p25._0,
				_1: {ctor: '[]'}
			};
		case 'PConst':
			return {
				ctor: '::',
				_0: _p25._0,
				_1: {ctor: '[]'}
			};
		case 'PBase':
			return {
				ctor: '::',
				_0: _p25._0,
				_1: {ctor: '[]'}
			};
		case 'PWildcard':
			return {
				ctor: '::',
				_0: _p25._0,
				_1: {ctor: '[]'}
			};
		case 'PList':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p25._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$concatMap, _user$project$Lang$allWhitespacesPat_, _p25._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p25._2,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$Maybe$withDefault,
								{ctor: '[]'},
								A2(_elm_lang$core$Maybe$map, _user$project$Lang$allWhitespacesPat_, _p25._3)),
							{
								ctor: '::',
								_0: _p25._4,
								_1: {ctor: '[]'}
							}))));
		case 'PAs':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p25._0,
					_1: {
						ctor: '::',
						_0: _p25._2,
						_1: {ctor: '[]'}
					}
				},
				_user$project$Lang$allWhitespacesPat_(_p25._3));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p25._0,
					_1: {
						ctor: '::',
						_0: _p25._2,
						_1: {ctor: '[]'}
					}
				},
				_user$project$Lang$allWhitespacesPat_(_p25._1));
	}
};
var _user$project$Lang$allWhitespacesPat = function (pat) {
	return A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.val;
		},
		_user$project$Lang$allWhitespacesPat_(pat));
};
var _user$project$Lang$patHasNewlines = function (pat) {
	return A2(
		_elm_lang$core$List$any,
		_elm_lang$core$String$contains('\n'),
		_user$project$Lang$allWhitespacesPat(pat));
};
var _user$project$Lang$allWhitespaces_ = function (exp) {
	var allWhitespacesBranch = function (branch) {
		var _p26 = branch.val;
		var ws1 = _p26._0;
		var pat = _p26._1;
		var e = _p26._2;
		var ws2 = _p26._3;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: ws1,
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Lang$allWhitespacesPat_(pat),
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespaces_(e),
					{
						ctor: '::',
						_0: ws2,
						_1: {ctor: '[]'}
					})));
	};
	var allWhitespacesTBranch = function (tbranch) {
		var _p27 = tbranch.val;
		var ws1 = _p27._0;
		var tipe = _p27._1;
		var e = _p27._2;
		var ws2 = _p27._3;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: ws1,
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Lang$allWhitespacesType_(tipe),
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespaces_(e),
					{
						ctor: '::',
						_0: ws2,
						_1: {ctor: '[]'}
					})));
	};
	var _p28 = exp.val.e__;
	switch (_p28.ctor) {
		case 'EBase':
			return {
				ctor: '::',
				_0: _p28._0,
				_1: {ctor: '[]'}
			};
		case 'EConst':
			return {
				ctor: '::',
				_0: _p28._0,
				_1: {ctor: '[]'}
			};
		case 'EVar':
			return {
				ctor: '::',
				_0: _p28._0,
				_1: {ctor: '[]'}
			};
		case 'EFun':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$concatMap, _user$project$Lang$allWhitespacesPat_, _p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Lang$allWhitespaces_(_p28._2),
						{
							ctor: '::',
							_0: _p28._3,
							_1: {ctor: '[]'}
						})));
		case 'EApp':
			switch (_p28._3.ctor) {
				case 'SpaceApp':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p28._0,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$List$concatMap,
								_user$project$Lang$allWhitespaces_,
								{ctor: '::', _0: _p28._1, _1: _p28._2}),
							{
								ctor: '::',
								_0: _p28._4,
								_1: {ctor: '[]'}
							}));
				case 'LeftApp':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p28._0,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Lang$allWhitespaces_(_p28._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: _p28._3._0,
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_elm_lang$core$List$concatMap, _user$project$Lang$allWhitespaces_, _p28._2),
									{
										ctor: '::',
										_0: _p28._4,
										_1: {ctor: '[]'}
									}))));
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p28._0,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_lang$core$List$concatMap, _user$project$Lang$allWhitespaces_, _p28._2),
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: _p28._3._0,
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Lang$allWhitespaces_(_p28._1),
									{
										ctor: '::',
										_0: _p28._4,
										_1: {ctor: '[]'}
									}))));
			}
		case 'EList':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$concatMap,
						function (_p29) {
							var _p30 = _p29;
							return {
								ctor: '::',
								_0: _p30._0,
								_1: _user$project$Lang$allWhitespaces_(_p30._1)
							};
						},
						_p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p28._2,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$Maybe$withDefault,
								{ctor: '[]'},
								A2(_elm_lang$core$Maybe$map, _user$project$Lang$allWhitespaces_, _p28._3)),
							{
								ctor: '::',
								_0: _p28._4,
								_1: {ctor: '[]'}
							}))));
		case 'EOp':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$concatMap, _user$project$Lang$allWhitespaces_, _p28._2),
					{
						ctor: '::',
						_0: _p28._3,
						_1: {ctor: '[]'}
					}));
		case 'EIf':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespaces_(_p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p28._2,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Lang$allWhitespaces_(_p28._3),
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: _p28._4,
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Lang$allWhitespaces_(_p28._5),
									{
										ctor: '::',
										_0: _p28._6,
										_1: {ctor: '[]'}
									}))))));
		case 'ELet':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespacesPat_(_p28._3),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p28._4,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Lang$allWhitespaces_(_p28._5),
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: _p28._6,
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Lang$allWhitespaces_(_p28._7),
									{
										ctor: '::',
										_0: _p28._8,
										_1: {ctor: '[]'}
									}))))));
		case 'ECase':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespaces_(_p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_elm_lang$core$List$concatMap, allWhitespacesBranch, _p28._2),
						{
							ctor: '::',
							_0: _p28._3,
							_1: {ctor: '[]'}
						})));
		case 'ETypeCase':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespaces_(_p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_elm_lang$core$List$concatMap, allWhitespacesTBranch, _p28._2),
						{
							ctor: '::',
							_0: _p28._3,
							_1: {ctor: '[]'}
						})));
		case 'EComment':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				_user$project$Lang$allWhitespaces_(_p28._2));
		case 'EOption':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {
						ctor: '::',
						_0: _p28._2,
						_1: {ctor: '[]'}
					}
				},
				_user$project$Lang$allWhitespaces_(_p28._4));
		case 'ETyp':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespacesPat_(_p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Lang$allWhitespacesType_(_p28._2),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Lang$allWhitespaces_(_p28._3),
							{
								ctor: '::',
								_0: _p28._4,
								_1: {ctor: '[]'}
							}))));
		case 'EColonType':
			var _p31 = _p28._2;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespaces_(_p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _p31,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Lang$allWhitespacesType_(_p28._3),
							{
								ctor: '::',
								_0: _p31,
								_1: {ctor: '[]'}
							}))));
		case 'ETypeAlias':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespacesPat_(_p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Lang$allWhitespacesType_(_p28._2),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Lang$allWhitespaces_(_p28._3),
							{
								ctor: '::',
								_0: _p28._4,
								_1: {ctor: '[]'}
							}))));
		case 'EParens':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$allWhitespaces_(_p28._1),
					{
						ctor: '::',
						_0: _p28._3,
						_1: {ctor: '[]'}
					}));
		default:
			if (_p28._1.ctor === 'HolePBE') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _p28._0,
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$concatMap,
							function (_p32) {
								var _p33 = _p32;
								return {
									ctor: '::',
									_0: _p33._0,
									_1: {
										ctor: '::',
										_0: _p33._1,
										_1: {
											ctor: '::',
											_0: _p33._2,
											_1: _user$project$Lang$allWhitespaces_(_p33._3)
										}
									}
								};
							},
							_p28._1._0),
						{
							ctor: '::',
							_0: _p28._1._1,
							_1: {ctor: '[]'}
						}));
			} else {
				return {
					ctor: '::',
					_0: _p28._0,
					_1: {ctor: '[]'}
				};
			}
	}
};
var _user$project$Lang$allWhitespaces = function (exp) {
	return A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.val;
		},
		_user$project$Lang$allWhitespaces_(exp));
};
var _user$project$Lang$expHasNewlines = function (exp) {
	return A2(
		_elm_lang$core$List$any,
		_elm_lang$core$String$contains('\n'),
		_user$project$Lang$allWhitespaces(exp));
};
var _user$project$Lang$precedingWhitespaceWithInfoExp__ = function (e__) {
	var _p34 = e__;
	switch (_p34.ctor) {
		case 'EBase':
			return _p34._0;
		case 'EConst':
			return _p34._0;
		case 'EVar':
			return _p34._0;
		case 'EFun':
			return _p34._0;
		case 'EApp':
			return _p34._0;
		case 'EList':
			return _p34._0;
		case 'EOp':
			return _p34._0;
		case 'EIf':
			return _p34._0;
		case 'ELet':
			return _p34._0;
		case 'ECase':
			return _p34._0;
		case 'ETypeCase':
			return _p34._0;
		case 'EComment':
			return _p34._0;
		case 'EOption':
			return _p34._0;
		case 'ETyp':
			return _p34._0;
		case 'EColonType':
			return _p34._0;
		case 'ETypeAlias':
			return _p34._0;
		case 'EParens':
			return _p34._0;
		default:
			return _p34._0;
	}
};
var _user$project$Lang$precedingWhitespaceExp__ = function (e__) {
	return _user$project$Lang$precedingWhitespaceWithInfoExp__(e__).val;
};
var _user$project$Lang$precedingWhitespacePat = function (pat) {
	return function (_) {
		return _.val;
	}(
		function () {
			var _p35 = pat.val.p__;
			switch (_p35.ctor) {
				case 'PVar':
					return _p35._0;
				case 'PConst':
					return _p35._0;
				case 'PBase':
					return _p35._0;
				case 'PWildcard':
					return _p35._0;
				case 'PList':
					return _p35._0;
				case 'PAs':
					return _p35._0;
				default:
					return _p35._0;
			}
		}());
};
var _user$project$Lang$extractIndentation = function (string) {
	return _user$project$Lang$tabsToSpaces(
		A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_user$project$Utils$maybeLast(
				A2(
					_elm_lang$core$List$drop,
					1,
					A2(_elm_lang$core$String$split, '\n', string)))));
};
var _user$project$Lang$ensureNNewlines = F3(
	function (n, indentationIfNoPreviousNewlines, ws) {
		var previousNewlineCount = _elm_lang$core$List$length(
			A2(_elm_lang$core$String$split, '\n', ws)) - 1;
		return _elm_lang$core$Native_Utils.eq(previousNewlineCount, 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$String$repeat, n, '\n'),
			indentationIfNoPreviousNewlines) : ((_elm_lang$core$Native_Utils.cmp(previousNewlineCount, n) < 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$String$repeat, n, '\n'),
			_user$project$Lang$extractIndentation(ws)) : ws);
	});
var _user$project$Lang$precedingWhitespace = function (exp) {
	return _user$project$Lang$precedingWhitespaceExp__(exp.val.e__);
};
var _user$project$Lang$indentationOf = function (exp) {
	return _user$project$Lang$extractIndentation(
		_user$project$Lang$precedingWhitespace(exp));
};
var _user$project$Lang$minMax = F2(
	function (x, y) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$Basics$min, x, y),
			_1: A2(_elm_lang$core$Basics$max, x, y)
		};
	});
var _user$project$Lang$unwrapVBaseString_ = F2(
	function (s, v_) {
		var _p36 = v_;
		if ((_p36.ctor === 'VBase') && (_p36._0.ctor === 'VString')) {
			return _p36._0._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Lang',
				{
					start: {line: 2005, column: 27},
					end: {line: 2007, column: 66}
				},
				_p36)(
				A2(_elm_lang$core$Basics_ops['++'], 'unwrapVBaseString_: ', s));
		}
	});
var _user$project$Lang$vListToVals = F2(
	function (s, v) {
		var _p38 = v.v_;
		if (_p38.ctor === 'VList') {
			return _p38._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Lang',
				{
					start: {line: 2000, column: 19},
					end: {line: 2002, column: 50}
				},
				_p38)(
				A2(_elm_lang$core$Basics_ops['++'], 'vListToVals: ', s));
		}
	});
var _user$project$Lang$unwrapVList_ = F2(
	function (s, v) {
		return A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.v_;
			},
			A2(_user$project$Lang$vListToVals, s, v));
	});
var _user$project$Lang$unwrapVList = function (v) {
	var _p40 = v.v_;
	if (_p40.ctor === 'VList') {
		return _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.v_;
				},
				_p40._0));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Lang$dummyLocWithDebugInfo = F2(
	function (b, n) {
		return {ctor: '_Tuple3', _0: 0, _1: b, _2: ''};
	});
var _user$project$Lang$dummyLoc_ = function (b) {
	return {ctor: '_Tuple3', _0: 0, _1: b, _2: ''};
};
var _user$project$Lang$setPId = F2(
	function (pid, p) {
		var p_ = p.val;
		return _elm_lang$core$Native_Utils.update(
			p,
			{
				val: _elm_lang$core$Native_Utils.update(
					p_,
					{pid: pid})
			});
	});
var _user$project$Lang$clearPId = function (p) {
	return A2(_user$project$Lang$setPId, -1, p);
};
var _user$project$Lang$setEId = F2(
	function (eid, e) {
		var e_ = e.val;
		return _elm_lang$core$Native_Utils.update(
			e,
			{
				val: _elm_lang$core$Native_Utils.update(
					e_,
					{eid: eid})
			});
	});
var _user$project$Lang$clearEId = function (e) {
	return A2(_user$project$Lang$setEId, -1, e);
};
var _user$project$Lang$replaceB__ = F2(
	function (b, b_) {
		return _elm_lang$core$Native_Utils.update(
			b,
			{val: b_});
	});
var _user$project$Lang$replaceT__ = F2(
	function (t, t__) {
		var t_ = t.val;
		return _elm_lang$core$Native_Utils.update(
			t,
			{
				val: _elm_lang$core$Native_Utils.update(
					t_,
					{t__: t__})
			});
	});
var _user$project$Lang$addRoles = F2(
	function (roles, t) {
		var t_ = t.val;
		return _elm_lang$core$Native_Utils.update(
			t,
			{
				val: _elm_lang$core$Native_Utils.update(
					t_,
					{
						roles: A2(_elm_lang$core$Set$union, roles, t_.roles)
					})
			});
	});
var _user$project$Lang$replaceP__ = F2(
	function (p, p__) {
		var p_ = p.val;
		return _elm_lang$core$Native_Utils.update(
			p,
			{
				val: _elm_lang$core$Native_Utils.update(
					p_,
					{p__: p__})
			});
	});
var _user$project$Lang$mapNodeP__ = F2(
	function (f, p) {
		return A2(
			_user$project$Lang$replaceP__,
			p,
			f(p.val.p__));
	});
var _user$project$Lang$replaceE__ = F2(
	function (e, e__) {
		var e_ = e.val;
		return _elm_lang$core$Native_Utils.update(
			e,
			{
				val: _elm_lang$core$Native_Utils.update(
					e_,
					{e__: e__})
			});
	});
var _user$project$Lang$mapNodeE__ = F2(
	function (f, e) {
		return A2(
			_user$project$Lang$replaceE__,
			e,
			f(e.val.e__));
	});
var _user$project$Lang$withDummyRange = function (x) {
	return A3(_user$project$Info$WithInfo, x, _user$project$Pos$dummyPos, _user$project$Pos$dummyPos);
};
var _user$project$Lang$rangeSlider = F3(
	function (kind, a, b) {
		return _user$project$Lang$withDummyRange(
			A5(
				kind,
				_user$project$Lang$withDummyRange(a),
				_user$project$Lang$withDummyRange('-'),
				_user$project$Lang$withDummyRange(b),
				_elm_lang$core$Maybe$Nothing,
				false));
	});
var _user$project$Lang$strPos = function (p) {
	var _p41 = {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Basics$toString(p.line),
		_1: _elm_lang$core$Basics$toString(p.col)
	};
	var i = _p41._0;
	var j = _p41._1;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'(Line:',
		A2(
			_elm_lang$core$Basics_ops['++'],
			i,
			A2(
				_elm_lang$core$Basics_ops['++'],
				' Col:',
				A2(_elm_lang$core$Basics_ops['++'], j, ')'))));
};
var _user$project$Lang$errorPrefix = '[Evaluation Error]';
var _user$project$Lang$crashWithMsg = function (s) {
	return _elm_lang$core$Native_Utils.crash(
		'Lang',
		{
			start: {line: 1757, column: 19},
			end: {line: 1757, column: 30}
		})(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Lang$errorPrefix,
			A2(_elm_lang$core$Basics_ops['++'], '\n\n', s)));
};
var _user$project$Lang$errorMsg = function (s) {
	return _elm_lang$core$Result$Err(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Lang$errorPrefix,
			A2(_elm_lang$core$Basics_ops['++'], '\n\n', s)));
};
var _user$project$Lang$getOptions = function (e) {
	getOptions:
	while (true) {
		var _p42 = e.val.e__;
		switch (_p42.ctor) {
			case 'EOption':
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p42._1.val, _1: _p42._3.val},
					_1: _user$project$Lang$getOptions(_p42._4)
				};
			case 'EComment':
				var _v34 = _p42._2;
				e = _v34;
				continue getOptions;
			default:
				return {ctor: '[]'};
		}
	}
};
var _user$project$Lang$childPats = function (pat) {
	var _p43 = pat.val.p__;
	switch (_p43.ctor) {
		case 'PConst':
			return {ctor: '[]'};
		case 'PBase':
			return {ctor: '[]'};
		case 'PVar':
			return {ctor: '[]'};
		case 'PWildcard':
			return {ctor: '[]'};
		case 'PList':
			if (_p43._3.ctor === 'Nothing') {
				return _p43._1;
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p43._1,
					{
						ctor: '::',
						_0: _p43._3._0,
						_1: {ctor: '[]'}
					});
			}
		case 'PAs':
			return {
				ctor: '::',
				_0: _p43._3,
				_1: {ctor: '[]'}
			};
		default:
			return {
				ctor: '::',
				_0: _p43._1,
				_1: {ctor: '[]'}
			};
	}
};
var _user$project$Lang$flattenPatTree = function (pat) {
	return {
		ctor: '::',
		_0: pat,
		_1: A2(
			_elm_lang$core$List$concatMap,
			_user$project$Lang$flattenPatTree,
			_user$project$Lang$childPats(pat))
	};
};
var _user$project$Lang$isOption = function (exp) {
	var _p44 = exp.val.e__;
	if (_p44.ctor === 'EOption') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isComment = function (exp) {
	var _p45 = exp.val.e__;
	if (_p45.ctor === 'EComment') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isNumber = function (exp) {
	var _p46 = exp.val.e__;
	if (_p46.ctor === 'EConst') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isScope = F2(
	function (maybeParent, exp) {
		var isObviouslyScope = function () {
			var _p47 = exp.val.e__;
			switch (_p47.ctor) {
				case 'ELet':
					return true;
				case 'EFun':
					return true;
				default:
					return false;
			}
		}();
		var _p48 = maybeParent;
		if (_p48.ctor === 'Just') {
			var _p49 = _p48._0.val.e__;
			if (_p49.ctor === 'ECase') {
				return !_elm_lang$core$Native_Utils.eq(_p49._1, exp);
			} else {
				return isObviouslyScope;
			}
		} else {
			return isObviouslyScope;
		}
	});
var _user$project$Lang$branchPatExps = function (branches) {
	return A2(
		_elm_lang$core$List$map,
		function (_p50) {
			return function (_p51) {
				var _p52 = _p51;
				return {ctor: '_Tuple2', _0: _p52._1, _1: _p52._2};
			}(
				function (_) {
					return _.val;
				}(_p50));
		},
		branches);
};
var _user$project$Lang$tbranchType = function (tbranch) {
	var _p53 = tbranch.val;
	var tipe = _p53._1;
	return tipe;
};
var _user$project$Lang$tbranchTypes = function (tbranches) {
	return A2(_elm_lang$core$List$map, _user$project$Lang$tbranchType, tbranches);
};
var _user$project$Lang$branchPat = function (branch) {
	var _p54 = branch.val;
	var pat = _p54._1;
	return pat;
};
var _user$project$Lang$branchPats = function (branches) {
	return A2(_elm_lang$core$List$map, _user$project$Lang$branchPat, branches);
};
var _user$project$Lang$tbranchExp = function (tbranch) {
	var _p55 = tbranch.val;
	var exp = _p55._2;
	return exp;
};
var _user$project$Lang$tbranchExps = function (tbranches) {
	return A2(_elm_lang$core$List$map, _user$project$Lang$tbranchExp, tbranches);
};
var _user$project$Lang$branchExp = function (branch) {
	var _p56 = branch.val;
	var exp = _p56._2;
	return exp;
};
var _user$project$Lang$branchExps = function (branches) {
	return A2(_elm_lang$core$List$map, _user$project$Lang$branchExp, branches);
};
var _user$project$Lang$headExps = function (listHeads) {
	var _p57 = _elm_lang$core$List$unzip(listHeads);
	var headExps = _p57._1;
	return headExps;
};
var _user$project$Lang$allPIds = function (pat) {
	return A2(
		_elm_lang$core$List$map,
		function (_p58) {
			return function (_) {
				return _.pid;
			}(
				function (_) {
					return _.val;
				}(_p58));
		},
		_user$project$Lang$flattenPatTree(pat));
};
var _user$project$Lang$valIsNum = function (v) {
	var _p59 = v.v_;
	if (_p59.ctor === 'VConst') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$vListToMaybeVals = function (v) {
	var _p60 = v.v_;
	if (_p60.ctor === 'VList') {
		return _elm_lang$core$Maybe$Just(_p60._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Lang$valToMaybeFuncBodyExp = function (v) {
	var _p61 = v.v_;
	if (_p61.ctor === 'VClosure') {
		return _elm_lang$core$Maybe$Just(_p61._2);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Lang$valToMaybeXYVals = function (v) {
	var _p62 = v.v_;
	if ((((_p62.ctor === 'VList') && (_p62._0.ctor === '::')) && (_p62._0._1.ctor === '::')) && (_p62._0._1._1.ctor === '[]')) {
		var _p65 = _p62._0._1._0;
		var _p64 = _p62._0._0;
		var _p63 = {ctor: '_Tuple2', _0: _p64.v_, _1: _p65.v_};
		if (((_p63.ctor === '_Tuple2') && (_p63._0.ctor === 'VConst')) && (_p63._1.ctor === 'VConst')) {
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: _p64, _1: _p65});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Lang$valToMaybePoint = function (v) {
	var _p66 = v.v_;
	if (_p66.ctor === 'VList') {
		var _p67 = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.v_;
			},
			_p66._0);
		if (((((((_p67.ctor === '::') && (_p67._0.ctor === 'VConst')) && (_p67._0._1.ctor === '_Tuple2')) && (_p67._1.ctor === '::')) && (_p67._1._0.ctor === 'VConst')) && (_p67._1._0._1.ctor === '_Tuple2')) && (_p67._1._1.ctor === '[]')) {
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: _p67._0._1._0, _1: _p67._1._0._1._0});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Lang$valIsPoint = function (_p68) {
	return _user$project$Utils$maybeToBool(
		_user$project$Lang$valToMaybePoint(_p68));
};
var _user$project$Lang$vListToMaybePointVals = function (v) {
	return A2(
		_user$project$Utils$filterMaybe,
		_elm_lang$core$List$all(_user$project$Lang$valIsPoint),
		_user$project$Lang$vListToMaybeVals(v));
};
var _user$project$Lang$vListToMaybeValsExcludingPoint = function (v) {
	return _user$project$Lang$valIsPoint(v) ? _elm_lang$core$Maybe$Nothing : _user$project$Lang$vListToMaybeVals(v);
};
var _user$project$Lang$valToNumTr = function (v) {
	var _p69 = v.v_;
	if ((_p69.ctor === 'VConst') && (_p69._1.ctor === '_Tuple2')) {
		return {ctor: '_Tuple2', _0: _p69._1._0, _1: _p69._1._1};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Lang',
			{
				start: {line: 1477, column: 16},
				end: {line: 1479, column: 53}
			},
			_p69)('Lang.valToNumTr');
	}
};
var _user$project$Lang$valToTrace = function (v) {
	var _p71 = v.v_;
	if ((_p71.ctor === 'VConst') && (_p71._1.ctor === '_Tuple2')) {
		return _p71._1._1;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Lang',
			{
				start: {line: 1472, column: 16},
				end: {line: 1474, column: 53}
			},
			_p71)('Lang.valToTrace');
	}
};
var _user$project$Lang$valToMaybeNum = function (v) {
	var _p73 = v.v_;
	if ((_p73.ctor === 'VConst') && (_p73._1.ctor === '_Tuple2')) {
		return _elm_lang$core$Maybe$Just(_p73._1._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Lang$valToNum = function (v) {
	var _p74 = v.v_;
	if ((_p74.ctor === 'VConst') && (_p74._1.ctor === '_Tuple2')) {
		return _p74._1._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Lang',
			{
				start: {line: 1462, column: 14},
				end: {line: 1464, column: 50}
			},
			_p74)('Lang.valToNum');
	}
};
var _user$project$Lang$valToInt = function (_p76) {
	return _elm_lang$core$Basics$round(
		_user$project$Lang$valToNum(_p76));
};
var _user$project$Lang$childExps = function (e) {
	var _p77 = e.val.e__;
	switch (_p77.ctor) {
		case 'EConst':
			return {ctor: '[]'};
		case 'EBase':
			return {ctor: '[]'};
		case 'EVar':
			return {ctor: '[]'};
		case 'EFun':
			return {
				ctor: '::',
				_0: _p77._2,
				_1: {ctor: '[]'}
			};
		case 'EOp':
			return _p77._2;
		case 'EList':
			var _p79 = _p77._1;
			var _p78 = _p77._3;
			if (_p78.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p79),
					{
						ctor: '::',
						_0: _p78._0,
						_1: {ctor: '[]'}
					});
			} else {
				return A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p79);
			}
		case 'EApp':
			return {ctor: '::', _0: _p77._1, _1: _p77._2};
		case 'ELet':
			return {
				ctor: '::',
				_0: _p77._5,
				_1: {
					ctor: '::',
					_0: _p77._7,
					_1: {ctor: '[]'}
				}
			};
		case 'EIf':
			return {
				ctor: '::',
				_0: _p77._1,
				_1: {
					ctor: '::',
					_0: _p77._3,
					_1: {
						ctor: '::',
						_0: _p77._5,
						_1: {ctor: '[]'}
					}
				}
			};
		case 'ECase':
			return {
				ctor: '::',
				_0: _p77._1,
				_1: _user$project$Lang$branchExps(_p77._2)
			};
		case 'ETypeCase':
			return {
				ctor: '::',
				_0: _p77._1,
				_1: _user$project$Lang$tbranchExps(_p77._2)
			};
		case 'EComment':
			return {
				ctor: '::',
				_0: _p77._2,
				_1: {ctor: '[]'}
			};
		case 'EOption':
			return {
				ctor: '::',
				_0: _p77._4,
				_1: {ctor: '[]'}
			};
		case 'ETyp':
			return {
				ctor: '::',
				_0: _p77._3,
				_1: {ctor: '[]'}
			};
		case 'EColonType':
			return {
				ctor: '::',
				_0: _p77._1,
				_1: {ctor: '[]'}
			};
		case 'ETypeAlias':
			return {
				ctor: '::',
				_0: _p77._3,
				_1: {ctor: '[]'}
			};
		case 'EParens':
			return {
				ctor: '::',
				_0: _p77._1,
				_1: {ctor: '[]'}
			};
		default:
			if (_p77._1.ctor === 'HolePBE') {
				return A2(
					_elm_lang$core$List$map,
					function (_p80) {
						var _p81 = _p80;
						return _p81._3;
					},
					_p77._1._0);
			} else {
				return {ctor: '[]'};
			}
	}
};
var _user$project$Lang$allNodesSatisfy = F2(
	function (predicate, exp) {
		return predicate(exp) && A2(
			_elm_lang$core$List$all,
			_user$project$Lang$allNodesSatisfy(predicate),
			_user$project$Lang$childExps(exp));
	});
var _user$project$Lang$findWithAncestorsByEId = F2(
	function (exp, targetEId) {
		return _elm_lang$core$Native_Utils.eq(exp.val.eid, targetEId) ? _elm_lang$core$Maybe$Just(
			{
				ctor: '::',
				_0: exp,
				_1: {ctor: '[]'}
			}) : A2(
			_elm_lang$core$Maybe$map,
			function (descendents) {
				return {ctor: '::', _0: exp, _1: descendents};
			},
			A2(
				_user$project$Utils$mapFirstSuccess,
				function (child) {
					return A2(_user$project$Lang$findWithAncestorsByEId, child, targetEId);
				},
				_user$project$Lang$childExps(exp)));
	});
var _user$project$Lang$parentByEId = F2(
	function (program, targetEId) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p82) {
				return _elm_lang$core$List$head(
					A2(
						_user$project$Utils$dropLast,
						1,
						A2(_user$project$Utils$takeLast, 2, _p82)));
			},
			A2(_user$project$Lang$findWithAncestorsByEId, program, targetEId));
	});
var _user$project$Lang$indentationAt = F2(
	function (eid, program) {
		var _p83 = A2(_user$project$Lang$findWithAncestorsByEId, program, eid);
		if (_p83.ctor === 'Just') {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(
					_user$project$Utils$mapFirstSuccess,
					function (exp) {
						var _p84 = {
							ctor: '_Tuple2',
							_0: exp.val.e__,
							_1: _user$project$Lang$precedingWhitespace(exp)
						};
						switch (_p84._0.ctor) {
							case 'EComment':
								var _p85 = _p84._0._2;
								return _elm_lang$core$Native_Utils.eq(
									_user$project$Lang$indentationOf(_p85),
									'') ? _elm_lang$core$Maybe$Just(
									_user$project$Lang$tabsToSpaces(
										_user$project$Lang$precedingWhitespace(_p85))) : _elm_lang$core$Maybe$Just(
									_user$project$Lang$indentationOf(_p85));
							case 'EOption':
								var _p86 = _p84._0._4;
								return _elm_lang$core$Native_Utils.eq(
									_user$project$Lang$indentationOf(_p86),
									'') ? _elm_lang$core$Maybe$Just(
									_user$project$Lang$tabsToSpaces(
										_user$project$Lang$precedingWhitespace(_p86))) : _elm_lang$core$Maybe$Just(
									_user$project$Lang$indentationOf(_p86));
							default:
								var _p87 = _p84._1;
								return A2(_elm_lang$core$String$contains, '\n', _p87) ? _elm_lang$core$Maybe$Just(
									_user$project$Lang$extractIndentation(_p87)) : _elm_lang$core$Maybe$Nothing;
						}
					},
					_elm_lang$core$List$reverse(_p83._0)));
		} else {
			return '';
		}
	});
var _user$project$Lang$findAllWithAncestorsScopesTagged_ = F3(
	function (predicate, ancestors, exp) {
		var ancestorsAndThisNoScope = A2(
			_elm_lang$core$Basics_ops['++'],
			ancestors,
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: exp, _1: false},
				_1: {ctor: '[]'}
			});
		var ancestorsAndThisScope = A2(
			_elm_lang$core$Basics_ops['++'],
			ancestors,
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: exp, _1: true},
				_1: {ctor: '[]'}
			});
		var thisResult = predicate(exp) ? {
			ctor: '::',
			_0: ancestorsAndThisNoScope,
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		var recurseNoScope = function (exp) {
			return A3(_user$project$Lang$findAllWithAncestorsScopesTagged_, predicate, ancestorsAndThisNoScope, exp);
		};
		var recurseScope = function (exp) {
			return A3(_user$project$Lang$findAllWithAncestorsScopesTagged_, predicate, ancestorsAndThisScope, exp);
		};
		var _p88 = exp.val.e__;
		switch (_p88.ctor) {
			case 'ELet':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					thisResult,
					A2(
						_elm_lang$core$Basics_ops['++'],
						recurseNoScope(_p88._5),
						recurseScope(_p88._7)));
			case 'ECase':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					thisResult,
					A2(
						_elm_lang$core$Basics_ops['++'],
						recurseNoScope(_p88._1),
						A2(
							_elm_lang$core$List$concatMap,
							recurseScope,
							_user$project$Lang$branchExps(_p88._2))));
			case 'EFun':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					thisResult,
					recurseScope(_p88._2));
			default:
				return A2(
					_elm_lang$core$Basics_ops['++'],
					thisResult,
					A2(
						_elm_lang$core$List$concatMap,
						recurseNoScope,
						_user$project$Lang$childExps(exp)));
		}
	});
var _user$project$Lang$findAllWithAncestorsScopesTagged = F2(
	function (predicate, exp) {
		return A3(
			_user$project$Lang$findAllWithAncestorsScopesTagged_,
			predicate,
			{ctor: '[]'},
			exp);
	});
var _user$project$Lang$findAllWithAncestors_ = F3(
	function (predicate, ancestors, exp) {
		var ancestorsAndThis = A2(
			_elm_lang$core$Basics_ops['++'],
			ancestors,
			{
				ctor: '::',
				_0: exp,
				_1: {ctor: '[]'}
			});
		var thisResult = predicate(exp) ? {
			ctor: '::',
			_0: ancestorsAndThis,
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		var recurse = function (exp) {
			return A3(_user$project$Lang$findAllWithAncestors_, predicate, ancestorsAndThis, exp);
		};
		return A2(
			_elm_lang$core$Basics_ops['++'],
			thisResult,
			A2(
				_elm_lang$core$List$concatMap,
				recurse,
				_user$project$Lang$childExps(exp)));
	});
var _user$project$Lang$findAllWithAncestors = F2(
	function (predicate, exp) {
		return A3(
			_user$project$Lang$findAllWithAncestors_,
			predicate,
			{ctor: '[]'},
			exp);
	});
var _user$project$Lang$commonAncestors = F2(
	function (pred, exp) {
		return _user$project$Utils$commonPrefix(
			A2(
				_elm_lang$core$List$map,
				_user$project$Utils$dropLast(1),
				A2(_user$project$Lang$findAllWithAncestors, pred, exp)));
	});
var _user$project$Lang$allExpsContaining = F2(
	function (predicate, exp) {
		return _user$project$Utils$dedup(
			_elm_lang$core$List$concat(
				A2(_user$project$Lang$findAllWithAncestors, predicate, exp)));
	});
var _user$project$Lang$locToLocId = function (_p89) {
	var _p90 = _p89;
	return _p90._0;
};
var _user$project$Lang$findPatInPat = F2(
	function (targetPId, pat) {
		return A2(
			_user$project$Utils$findFirst,
			function (_p91) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					targetPId,
					function (_) {
						return _.pid;
					}(
						function (_) {
							return _.val;
						}(_p91)));
			},
			_user$project$Lang$flattenPatTree(pat));
	});
var _user$project$Lang$mapFirstSuccessNode = F2(
	function (f, exp) {
		var _p92 = f(exp);
		if (_p92.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(_p92._0);
		} else {
			return A2(
				_user$project$Utils$mapFirstSuccess,
				_user$project$Lang$mapFirstSuccessNode(f),
				_user$project$Lang$childExps(exp));
		}
	});
var _user$project$Lang$findScopeExpAndPatByPId = F2(
	function (program, targetPId) {
		return A2(
			_user$project$Lang$mapFirstSuccessNode,
			function (e) {
				var maybeTargetPat = function () {
					var _p93 = e.val.e__;
					switch (_p93.ctor) {
						case 'ELet':
							return A2(_user$project$Lang$findPatInPat, targetPId, _p93._3);
						case 'EFun':
							return A2(
								_user$project$Utils$mapFirstSuccess,
								_user$project$Lang$findPatInPat(targetPId),
								_p93._1);
						case 'ECase':
							return A2(
								_user$project$Utils$mapFirstSuccess,
								_user$project$Lang$findPatInPat(targetPId),
								_user$project$Lang$branchPats(_p93._2));
						default:
							return _elm_lang$core$Maybe$Nothing;
					}
				}();
				return A2(
					_elm_lang$core$Maybe$map,
					function (pat) {
						return {ctor: '_Tuple2', _0: e, _1: pat};
					},
					maybeTargetPat);
			},
			program);
	});
var _user$project$Lang$findPatByPId = F2(
	function (program, targetPId) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p94) {
				var _p95 = _p94;
				return _p95._1;
			},
			A2(_user$project$Lang$findScopeExpAndPatByPId, program, targetPId));
	});
var _user$project$Lang$pidToPathedPatternId = F2(
	function (program, pid) {
		return A2(
			_user$project$Lang$mapFirstSuccessNode,
			function (_p96) {
				return A2(
					_user$project$Utils$maybeFind,
					pid,
					_user$project$Lang$taggedExpPats(_p96));
			},
			program);
	});
var _user$project$Lang$containsNode = F2(
	function (predicate, exp) {
		return predicate(exp) || A2(
			_elm_lang$core$List$any,
			_user$project$Lang$containsNode(predicate),
			_user$project$Lang$childExps(exp));
	});
var _user$project$Lang$findFirstNode = F2(
	function (predicate, exp) {
		return predicate(exp) ? _elm_lang$core$Maybe$Just(exp) : A2(
			_user$project$Utils$mapFirstSuccess,
			_user$project$Lang$findFirstNode(predicate),
			_user$project$Lang$childExps(exp));
	});
var _user$project$Lang$findExpByLocId = F2(
	function (program, targetLocId) {
		var isTarget = function (exp) {
			var _p97 = exp.val.e__;
			if ((_p97.ctor === 'EConst') && (_p97._2.ctor === '_Tuple3')) {
				return _elm_lang$core$Native_Utils.eq(_p97._2._0, targetLocId);
			} else {
				return false;
			}
		};
		return A2(_user$project$Lang$findFirstNode, isTarget, program);
	});
var _user$project$Lang$locIdToEId = F2(
	function (program, locId) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p98) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p98));
			},
			A2(_user$project$Lang$findExpByLocId, program, locId));
	});
var _user$project$Lang$flattenExpTree = function (exp) {
	return {
		ctor: '::',
		_0: exp,
		_1: A2(
			_elm_lang$core$List$concatMap,
			_user$project$Lang$flattenExpTree,
			_user$project$Lang$childExps(exp))
	};
};
var _user$project$Lang$allEIds = function (exp) {
	return A2(
		_elm_lang$core$List$map,
		function (_p99) {
			return function (_) {
				return _.eid;
			}(
				function (_) {
					return _.val;
				}(_p99));
		},
		_user$project$Lang$flattenExpTree(exp));
};
var _user$project$Lang$computePatMap = function (_p100) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$concatMap,
			_user$project$Lang$taggedExpPats,
			_user$project$Lang$flattenExpTree(_p100)));
};
var _user$project$Lang$eidIs = F2(
	function (targetEId, exp) {
		return _elm_lang$core$Native_Utils.eq(exp.val.eid, targetEId);
	});
var _user$project$Lang$findExpByEId = F2(
	function (program, targetEId) {
		return A2(
			_user$project$Lang$findFirstNode,
			_user$project$Lang$eidIs(targetEId),
			program);
	});
var _user$project$Lang$foldType = F3(
	function (f, tipe, acc) {
		var foldTypes = F3(
			function (f, tipes, acc) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (t, acc) {
							return A3(_user$project$Lang$foldType, f, t, acc);
						}),
					acc,
					tipes);
			});
		var _p101 = tipe.val.t__;
		switch (_p101.ctor) {
			case 'TNum':
				return A2(f, tipe, acc);
			case 'TBool':
				return A2(f, tipe, acc);
			case 'TString':
				return A2(f, tipe, acc);
			case 'TNull':
				return A2(f, tipe, acc);
			case 'TNamed':
				return A2(f, tipe, acc);
			case 'TVar':
				return A2(f, tipe, acc);
			case 'TWildcard':
				return A2(f, tipe, acc);
			case 'TList':
				return A2(
					f,
					tipe,
					A3(_user$project$Lang$foldType, f, _p101._1, acc));
			case 'TDict':
				return A2(
					f,
					tipe,
					A3(
						_user$project$Lang$foldType,
						f,
						_p101._2,
						A3(_user$project$Lang$foldType, f, _p101._1, acc)));
			case 'TForall':
				return A2(
					f,
					tipe,
					A3(_user$project$Lang$foldType, f, _p101._2, acc));
			case 'TArrow':
				return A2(
					f,
					tipe,
					A3(foldTypes, f, _p101._1, acc));
			case 'TUnion':
				return A2(
					f,
					tipe,
					A3(foldTypes, f, _p101._1, acc));
			default:
				if (_p101._3.ctor === 'Nothing') {
					return A2(
						f,
						tipe,
						A3(foldTypes, f, _p101._1, acc));
				} else {
					return A2(
						f,
						tipe,
						A3(
							foldTypes,
							f,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p101._1,
								{
									ctor: '::',
									_0: _p101._3._0,
									_1: {ctor: '[]'}
								}),
							acc));
				}
		}
	});
var _user$project$Lang$childTypes = function (tipe) {
	var _p102 = tipe.val.t__;
	switch (_p102.ctor) {
		case 'TNum':
			return {ctor: '[]'};
		case 'TBool':
			return {ctor: '[]'};
		case 'TString':
			return {ctor: '[]'};
		case 'TNull':
			return {ctor: '[]'};
		case 'TNamed':
			return {ctor: '[]'};
		case 'TVar':
			return {ctor: '[]'};
		case 'TWildcard':
			return {ctor: '[]'};
		case 'TList':
			return {
				ctor: '::',
				_0: _p102._1,
				_1: {ctor: '[]'}
			};
		case 'TDict':
			return {
				ctor: '::',
				_0: _p102._1,
				_1: {
					ctor: '::',
					_0: _p102._2,
					_1: {ctor: '[]'}
				}
			};
		case 'TArrow':
			return _p102._1;
		case 'TUnion':
			return _p102._1;
		case 'TForall':
			return {
				ctor: '::',
				_0: _p102._2,
				_1: {ctor: '[]'}
			};
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p102._1,
				_user$project$Utils$maybeToList(_p102._3));
	}
};
var _user$project$Lang$typeContains = F2(
	function (predicate, tipe) {
		return predicate(tipe) || A2(
			_elm_lang$core$List$any,
			_user$project$Lang$typeContains(predicate),
			_user$project$Lang$childTypes(tipe));
	});
var _user$project$Lang$foldExp = F3(
	function (f, acc, exp) {
		return A3(
			_elm_lang$core$List$foldl,
			f,
			acc,
			_user$project$Lang$flattenExpTree(exp));
	});
var _user$project$Lang$foldExpViaE__ = F3(
	function (f, acc, exp) {
		var f_ = function (exp) {
			return f(exp.val.e__);
		};
		return A3(_user$project$Lang$foldExp, f_, acc, exp);
	});
var _user$project$Lang$childVals = function (val) {
	var _p103 = val.v_;
	switch (_p103.ctor) {
		case 'VList':
			return _p103._0;
		case 'VDict':
			return _elm_lang$core$Dict$values(_p103._0);
		case 'VConst':
			return {ctor: '[]'};
		case 'VBase':
			return {ctor: '[]'};
		default:
			return {ctor: '[]'};
	}
};
var _user$project$Lang$flattenValTree = function (val) {
	return {
		ctor: '::',
		_0: val,
		_1: A2(
			_elm_lang$core$List$concatMap,
			_user$project$Lang$flattenValTree,
			_user$project$Lang$childVals(val))
	};
};
var _user$project$Lang$foldVal = F3(
	function (f, v, a) {
		var _p104 = v.v_;
		switch (_p104.ctor) {
			case 'VList':
				return A2(
					f,
					v,
					A3(
						_elm_lang$core$List$foldl,
						_user$project$Lang$foldVal(f),
						a,
						_p104._0));
			case 'VDict':
				return A2(
					f,
					v,
					A3(
						_elm_lang$core$List$foldl,
						_user$project$Lang$foldVal(f),
						a,
						_elm_lang$core$Dict$values(_p104._0)));
			case 'VConst':
				return A2(f, v, a);
			case 'VBase':
				return A2(f, v, a);
			default:
				return A2(f, v, a);
		}
	});
var _user$project$Lang$replaceV_ = F2(
	function (v, v_) {
		return _elm_lang$core$Native_Utils.update(
			v,
			{v_: v_});
	});
var _user$project$Lang$mapValField = F2(
	function (f, r) {
		return _elm_lang$core$Native_Utils.update(
			r,
			{
				val: f(r.val)
			});
	});
var _user$project$Lang$patEffectivePats = function (pat) {
	var _p105 = pat.val.p__;
	if (_p105.ctor === 'PParens') {
		return {
			ctor: '::',
			_0: pat,
			_1: _user$project$Lang$patEffectivePats(_p105._1)
		};
	} else {
		return {
			ctor: '::',
			_0: pat,
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$Lang$patEffectivePat = function (pat) {
	return A2(
		_user$project$Utils$last,
		'patEffectivePat shouldn\'t happen',
		_user$project$Lang$patEffectivePats(pat));
};
var _user$project$Lang$isPWildcard = function (p) {
	var _p106 = p.val.p__;
	if (_p106.ctor === 'PWildcard') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isPVar = function (p) {
	var _p107 = p.val.p__;
	if (_p107.ctor === 'PVar') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isPBEHole = function (e) {
	var _p108 = e.val.e__;
	if ((_p108.ctor === 'EHole') && (_p108._1.ctor === 'HolePBE')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isLocHole = function (e) {
	var _p109 = e.val.e__;
	if ((_p109.ctor === 'EHole') && (_p109._1.ctor === 'HoleLoc')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isValHole = function (e) {
	var _p110 = e.val.e__;
	if ((_p110.ctor === 'EHole') && (_p110._1.ctor === 'HoleVal')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isColonType = function (e) {
	var _p111 = e.val.e__;
	if (_p111.ctor === 'EColonType') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isParens = function (e) {
	var _p112 = e.val.e__;
	if (_p112.ctor === 'EParens') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isApp = function (e) {
	var _p113 = e.val.e__;
	if (_p113.ctor === 'EApp') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isFunc = function (e) {
	var _p114 = e.val.e__;
	if (_p114.ctor === 'EFun') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isVar = function (e) {
	var _p115 = e.val.e__;
	if (_p115.ctor === 'EVar') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isPair = function (e) {
	var _p116 = e.val.e__;
	if (((((_p116.ctor === 'EList') && (_p116._1.ctor === '::')) && (_p116._1._1.ctor === '::')) && (_p116._1._1._1.ctor === '[]')) && (_p116._3.ctor === 'Nothing')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isSingletonList = function (e) {
	var _p117 = e.val.e__;
	if ((((_p117.ctor === 'EList') && (_p117._1.ctor === '::')) && (_p117._1._1.ctor === '[]')) && (_p117._3.ctor === 'Nothing')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isEmptyList = function (e) {
	var _p118 = e.val.e__;
	if (((_p118.ctor === 'EList') && (_p118._1.ctor === '[]')) && (_p118._3.ctor === 'Nothing')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isTuple = function (e) {
	var _p119 = e.val.e__;
	if ((_p119.ctor === 'EList') && (_p119._3.ctor === 'Nothing')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isList = function (e) {
	var _p120 = e.val.e__;
	if (_p120.ctor === 'EList') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isLet = function (e) {
	var _p121 = e.val.e__;
	if (_p121.ctor === 'ELet') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$isString = function (e) {
	var _p122 = e.val.e__;
	if ((_p122.ctor === 'EBase') && (_p122._1.ctor === 'EString')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$fitsOnLine = function (s) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$String$length(s),
		70) > 0) ? false : (A2(
		_elm_lang$core$List$member,
		_elm_lang$core$Native_Utils.chr('\n'),
		_elm_lang$core$String$toList(s)) ? false : true);
};
var _user$project$Lang$tab = function (k) {
	return A2(_elm_lang$core$String$repeat, k, '  ');
};
var _user$project$Lang$pathAfterElementRemoved = F2(
	function (removedPath, path) {
		var _p123 = {ctor: '_Tuple2', _0: removedPath, _1: path};
		if (_p123._0.ctor === '::') {
			if (_p123._1.ctor === '::') {
				if (_p123._0._1.ctor === '[]') {
					if (_p123._1._1.ctor === '[]') {
						var _p124 = _p123._1._0;
						return (_elm_lang$core$Native_Utils.cmp(_p123._0._0, _p124) < 0) ? _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _p124 - 1,
								_1: {ctor: '[]'}
							}) : _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _p124,
								_1: {ctor: '[]'}
							});
					} else {
						var _p127 = _p123._0._0;
						var _p126 = _p123._1._0;
						if (_elm_lang$core$Native_Utils.eq(_p127, _p126)) {
							var _p125 = _elm_lang$core$Debug$log(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'removed pat path is supertree of target path ',
									_elm_lang$core$Basics$toString(
										{ctor: '_Tuple2', _0: removedPath, _1: path})));
							return _elm_lang$core$Maybe$Nothing;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p127, _p126) < 0) {
								return _elm_lang$core$Maybe$Just(
									{ctor: '::', _0: _p126 - 1, _1: _p123._1._1});
							} else {
								return _elm_lang$core$Maybe$Just(path);
							}
						}
					}
				} else {
					var _p128 = _p123._1._0;
					return _elm_lang$core$Native_Utils.eq(_p123._0._0, _p128) ? A2(
						_elm_lang$core$Maybe$map,
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(_p128),
						A2(_user$project$Lang$pathAfterElementRemoved, _p123._0._1, _p123._1._1)) : _elm_lang$core$Maybe$Just(path);
				}
			} else {
				return _elm_lang$core$Maybe$Just(path);
			}
		} else {
			if (_p123._1.ctor === '::') {
				var _p129 = _elm_lang$core$Debug$log(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'removed pat path is supertree of target path ',
						_elm_lang$core$Basics$toString(
							{ctor: '_Tuple2', _0: removedPath, _1: path})));
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'Lang',
					{
						start: {line: 390, column: 3},
						end: {line: 421, column: 110}
					},
					_p123)(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Lang.pathAfterElementRemoved why did this get called?!',
						_elm_lang$core$Basics$toString(
							{ctor: '_Tuple2', _0: removedPath, _1: path})));
			}
		}
	});
var _user$project$Lang$pathRightSibling = function (path) {
	return A2(
		_user$project$Utils$maybeMapLast,
		F2(
			function (x, y) {
				return x + y;
			})(1),
		path);
};
var _user$project$Lang$patTargetPositionToTargetPathedPatId = function (_p131) {
	var _p132 = _p131;
	var _p137 = _p132._1;
	var _p136 = _p132._0;
	var _p133 = _p137;
	var referenceScopeId = _p133._0;
	var referencePath = _p133._1;
	var targetPath = function () {
		var referencePathAsPList = function () {
			var _p134 = referencePath;
			if (_p134.ctor === '[]') {
				return {
					ctor: '::',
					_0: 1,
					_1: {ctor: '[]'}
				};
			} else {
				return referencePath;
			}
		}();
		var _p135 = _p136;
		if (_p135.ctor === 'Before') {
			return referencePathAsPList;
		} else {
			return A2(
				_user$project$Utils$fromJust_,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid target pattern id path of [] in target path position: ',
					_elm_lang$core$Basics$toString(
						{ctor: '_Tuple2', _0: _p136, _1: _p137})),
				_user$project$Lang$pathRightSibling(referencePathAsPList));
		}
	}();
	return {ctor: '_Tuple2', _0: referenceScopeId, _1: targetPath};
};
var _user$project$Lang$pathedPatIdRightSibling = function (_p138) {
	var _p139 = _p138;
	return A2(
		_elm_lang$core$Maybe$map,
		function (newPath) {
			return {ctor: '_Tuple2', _0: _p139._0, _1: newPath};
		},
		_user$project$Lang$pathRightSibling(_p139._1));
};
var _user$project$Lang$pathedPatIdToPath = function (_p140) {
	var _p141 = _p140;
	return _p141._1;
};
var _user$project$Lang$pathedPatIdToScopeId = function (_p142) {
	var _p143 = _p142;
	return _p143._0;
};
var _user$project$Lang$scopeIdToScopeEId = function (_p144) {
	var _p145 = _p144;
	return _p145._0;
};
var _user$project$Lang$pathedPatIdToScopeEId = function (pathedPatId) {
	return _user$project$Lang$scopeIdToScopeEId(
		_user$project$Lang$pathedPatIdToScopeId(pathedPatId));
};
var _user$project$Lang$provenanceBasedOn = function (_p146) {
	var _p147 = _p146;
	return _p147._1;
};
var _user$project$Lang$valBasedOn = function (val) {
	return _user$project$Lang$provenanceBasedOn(val.provenance);
};
var _user$project$Lang$provenanceExp = function (_p148) {
	var _p149 = _p148;
	return _p149._0;
};
var _user$project$Lang$valExp = function (val) {
	return _user$project$Lang$provenanceExp(val.provenance);
};
var _user$project$Lang$valEId = function (val) {
	return _user$project$Lang$valExp(val).val.eid;
};
var _user$project$Lang$eBaseValsEqual = F2(
	function (ebv1, ebv2) {
		var _p150 = {ctor: '_Tuple2', _0: ebv1, _1: ebv2};
		_v97_3:
		do {
			if (_p150.ctor === '_Tuple2') {
				switch (_p150._0.ctor) {
					case 'EBool':
						if (_p150._1.ctor === 'EBool') {
							return _elm_lang$core$Native_Utils.eq(_p150._0._0, _p150._1._0);
						} else {
							break _v97_3;
						}
					case 'EString':
						if (_p150._1.ctor === 'EString') {
							return _elm_lang$core$Native_Utils.eq(_p150._0._1, _p150._1._1);
						} else {
							break _v97_3;
						}
					default:
						if (_p150._1.ctor === 'ENull') {
							return true;
						} else {
							break _v97_3;
						}
				}
			} else {
				break _v97_3;
			}
		} while(false);
		return false;
	});
var _user$project$Lang$defaultQuoteChar = '\'';
var _user$project$Lang$valParents = function (val) {
	var _p151 = val.parents;
	var parents = _p151._0;
	return parents;
};
var _user$project$Lang$isPointWidget = function (widget) {
	var _p152 = widget;
	if (_p152.ctor === 'WPoint') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Lang$maybeEvalMathOp = F2(
	function (op_, operands) {
		var _p153 = {ctor: '_Tuple2', _0: op_, _1: operands};
		_v99_18:
		do {
			if (_p153.ctor === '_Tuple2') {
				if (_p153._1.ctor === '::') {
					if (_p153._1._1.ctor === '::') {
						if (_p153._1._1._1.ctor === '[]') {
							switch (_p153._0.ctor) {
								case 'Plus':
									return _elm_lang$core$Maybe$Just(
										A2(
											F2(
												function (x, y) {
													return x + y;
												}),
											_p153._1._0,
											_p153._1._1._0));
								case 'Minus':
									return _elm_lang$core$Maybe$Just(
										A2(
											F2(
												function (x, y) {
													return x - y;
												}),
											_p153._1._0,
											_p153._1._1._0));
								case 'Mult':
									return _elm_lang$core$Maybe$Just(
										A2(
											F2(
												function (x, y) {
													return x * y;
												}),
											_p153._1._0,
											_p153._1._1._0));
								case 'Div':
									return _elm_lang$core$Maybe$Just(
										A2(
											F2(
												function (x, y) {
													return x / y;
												}),
											_p153._1._0,
											_p153._1._1._0));
								case 'Pow':
									return _elm_lang$core$Maybe$Just(
										A2(
											F2(
												function (x, y) {
													return Math.pow(x, y);
												}),
											_p153._1._0,
											_p153._1._1._0));
								case 'Mod':
									return _elm_lang$core$Maybe$Just(
										_elm_lang$core$Basics$toFloat(
											A2(
												F2(
													function (x, y) {
														return A2(_elm_lang$core$Basics_ops['%'], x, y);
													}),
												_elm_lang$core$Basics$floor(_p153._1._0),
												_elm_lang$core$Basics$floor(_p153._1._1._0))));
								case 'ArcTan2':
									return _elm_lang$core$Maybe$Just(
										A2(_elm_lang$core$Basics$atan2, _p153._1._0, _p153._1._1._0));
								default:
									break _v99_18;
							}
						} else {
							break _v99_18;
						}
					} else {
						switch (_p153._0.ctor) {
							case 'Cos':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$cos(_p153._1._0));
							case 'Sin':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$sin(_p153._1._0));
							case 'ArcCos':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$acos(_p153._1._0));
							case 'ArcSin':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$asin(_p153._1._0));
							case 'Abs':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$abs(_p153._1._0));
							case 'Floor':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$toFloat(
										_elm_lang$core$Basics$floor(_p153._1._0)));
							case 'Ceil':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$toFloat(
										_elm_lang$core$Basics$ceiling(_p153._1._0)));
							case 'Round':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$toFloat(
										_elm_lang$core$Basics$round(_p153._1._0)));
							case 'Sqrt':
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$sqrt(_p153._1._0));
							case 'Ln':
								return _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics$logBase, _elm_lang$core$Basics$e, _p153._1._0));
							default:
								break _v99_18;
						}
					}
				} else {
					if (_p153._0.ctor === 'Pi') {
						return _elm_lang$core$Maybe$Just(_elm_lang$core$Basics$pi);
					} else {
						break _v99_18;
					}
				}
			} else {
				break _v99_18;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Lang$_p154 = {ctor: '_Tuple4', _0: '!', _1: '', _2: '?', _3: '~'};
var _user$project$Lang$frozen = _user$project$Lang$_p154._0;
var _user$project$Lang$unann = _user$project$Lang$_p154._1;
var _user$project$Lang$thawed = _user$project$Lang$_p154._2;
var _user$project$Lang$assignOnlyOnce = _user$project$Lang$_p154._3;
var _user$project$Lang$isFrozenNumber = function (exp) {
	var _p155 = exp.val.e__;
	if ((_p155.ctor === 'EConst') && (_p155._2.ctor === '_Tuple3')) {
		return _elm_lang$core$Native_Utils.eq(_p155._2._1, _user$project$Lang$frozen);
	} else {
		return false;
	}
};
var _user$project$Lang$dummyLoc = _user$project$Lang$dummyLoc_(_user$project$Lang$unann);
var _user$project$Lang$dummyLocFrozen = _user$project$Lang$dummyLoc_(_user$project$Lang$frozen);
var _user$project$Lang$ws = _user$project$Info$withDummyInfo;
var _user$project$Lang$space0 = _user$project$Lang$ws('');
var _user$project$Lang$space1 = _user$project$Lang$ws(' ');
var _user$project$Lang$newline1 = _user$project$Lang$ws('\n');
var _user$project$Lang$newline2 = _user$project$Lang$ws('\n\n');
var _user$project$Lang$Exp_ = F2(
	function (a, b) {
		return {e__: a, eid: b};
	});
var _user$project$Lang$exp_ = A2(_elm_lang$core$Basics$flip, _user$project$Lang$Exp_, -1);
var _user$project$Lang$withDummyExpInfo = function (e__) {
	return A3(
		_user$project$Info$WithInfo,
		_user$project$Lang$exp_(e__),
		_user$project$Pos$dummyPos,
		_user$project$Pos$dummyPos);
};
var _user$project$Lang$withDummyExpInfoEId = F2(
	function (eid, e__) {
		return A3(
			_user$project$Info$WithInfo,
			A2(_user$project$Lang$Exp_, e__, eid),
			_user$project$Pos$dummyPos,
			_user$project$Pos$dummyPos);
	});
var _user$project$Lang$Pat_ = F2(
	function (a, b) {
		return {p__: a, pid: b};
	});
var _user$project$Lang$pat_ = A2(_elm_lang$core$Basics$flip, _user$project$Lang$Pat_, -1);
var _user$project$Lang$withDummyPatInfo = function (p__) {
	return A3(
		_user$project$Info$WithInfo,
		_user$project$Lang$pat_(p__),
		_user$project$Pos$dummyPos,
		_user$project$Pos$dummyPos);
};
var _user$project$Lang$withDummyPatInfoPId = F2(
	function (pid, p__) {
		return A3(
			_user$project$Info$WithInfo,
			A2(_user$project$Lang$Pat_, p__, pid),
			_user$project$Pos$dummyPos,
			_user$project$Pos$dummyPos);
	});
var _user$project$Lang$Type_ = F2(
	function (a, b) {
		return {t__: a, roles: b};
	});
var _user$project$Lang$Val = F3(
	function (a, b, c) {
		return {v_: a, provenance: b, parents: c};
	});
var _user$project$Lang$TwoSubsts = F2(
	function (a, b) {
		return {lsubst: a, esubst: b};
	});
var _user$project$Lang$PParens = F3(
	function (a, b, c) {
		return {ctor: 'PParens', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$PAs = F4(
	function (a, b, c, d) {
		return {ctor: 'PAs', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$pAs = F2(
	function (x, p) {
		return _user$project$Lang$withDummyPatInfo(
			A4(_user$project$Lang$PAs, _user$project$Lang$space1, x, _user$project$Lang$space1, p));
	});
var _user$project$Lang$PList = F5(
	function (a, b, c, d, e) {
		return {ctor: 'PList', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$mapFoldPat = F3(
	function (f, initAcc, p) {
		var recurse = _user$project$Lang$mapFoldPat(f);
		var wrap = function (p__) {
			return A2(_user$project$Lang$replaceP__, p, p__);
		};
		var wrapAndMap = function (_p156) {
			return f(
				wrap(_p156));
		};
		var recurseAll = F2(
			function (initAcc, pats) {
				return A3(
					_elm_lang$core$List$foldr,
					F2(
						function (pat, _p157) {
							var _p158 = _p157;
							var _p159 = A2(recurse, _p158._1, pat);
							var newPat = _p159._0;
							var newAcc = _p159._1;
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: newPat, _1: _p158._0},
								_1: newAcc
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: initAcc
					},
					pats);
			});
		var _p160 = p.val.p__;
		switch (_p160.ctor) {
			case 'PVar':
				return A2(f, p, initAcc);
			case 'PConst':
				return A2(f, p, initAcc);
			case 'PBase':
				return A2(f, p, initAcc);
			case 'PWildcard':
				return A2(f, p, initAcc);
			case 'PList':
				if (_p160._3.ctor === 'Nothing') {
					var _p161 = A2(recurseAll, initAcc, _p160._1);
					var newPs = _p161._0;
					var newAcc = _p161._1;
					return A2(
						wrapAndMap,
						A5(_user$project$Lang$PList, _p160._0, newPs, _p160._2, _elm_lang$core$Maybe$Nothing, _p160._4),
						newAcc);
				} else {
					var _p162 = A2(recurse, initAcc, _p160._3._0);
					var newPTail = _p162._0;
					var newAcc = _p162._1;
					var _p163 = A2(recurseAll, newAcc, _p160._1);
					var newPs = _p163._0;
					var newAcc2 = _p163._1;
					return A2(
						wrapAndMap,
						A5(
							_user$project$Lang$PList,
							_p160._0,
							newPs,
							_p160._2,
							_elm_lang$core$Maybe$Just(newPTail),
							_p160._4),
						newAcc2);
				}
			case 'PAs':
				var _p164 = A2(recurse, initAcc, _p160._3);
				var newPChild = _p164._0;
				var newAcc = _p164._1;
				return A2(
					wrapAndMap,
					A4(_user$project$Lang$PAs, _p160._0, _p160._1, _p160._2, newPChild),
					newAcc);
			default:
				var _p165 = A2(recurse, initAcc, _p160._1);
				var newPChild = _p165._0;
				var newAcc = _p165._1;
				return A2(
					wrapAndMap,
					A3(_user$project$Lang$PParens, _p160._0, newPChild, _p160._2),
					newAcc);
		}
	});
var _user$project$Lang$mapPat = F2(
	function (f, p) {
		var _p166 = A3(
			_user$project$Lang$mapFoldPat,
			F2(
				function (pat, _p167) {
					return {
						ctor: '_Tuple2',
						_0: f(pat),
						_1: {ctor: '_Tuple0'}
					};
				}),
			{ctor: '_Tuple0'},
			p);
		var newPat = _p166._0;
		return newPat;
	});
var _user$project$Lang$mapPatNodePat = F3(
	function (pid, f, rootPat) {
		return A2(
			_user$project$Lang$mapPat,
			function (pat) {
				return _elm_lang$core$Native_Utils.eq(pat.val.pid, pid) ? f(pat) : pat;
			},
			rootPat);
	});
var _user$project$Lang$mapFoldPatTopDown = F3(
	function (f, initAcc, p) {
		var _p168 = A2(f, p, initAcc);
		var newP = _p168._0;
		var newAcc = _p168._1;
		var ret = F2(
			function (p__, acc) {
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Lang$replaceP__, newP, p__),
					_1: acc
				};
			});
		var recurse = F2(
			function (acc, child) {
				return A3(_user$project$Lang$mapFoldPatTopDown, f, acc, child);
			});
		var recurseAll = F2(
			function (acc, pats) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (pat, _p169) {
							var _p170 = _p169;
							var _p171 = A2(recurse, _p170._1, pat);
							var newPat = _p171._0;
							var newAcc = _p171._1;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p170._0,
									{
										ctor: '::',
										_0: newPat,
										_1: {ctor: '[]'}
									}),
								_1: newAcc
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: acc
					},
					pats);
			});
		var _p172 = newP.val.p__;
		switch (_p172.ctor) {
			case 'PVar':
				return {ctor: '_Tuple2', _0: newP, _1: newAcc};
			case 'PConst':
				return {ctor: '_Tuple2', _0: newP, _1: newAcc};
			case 'PBase':
				return {ctor: '_Tuple2', _0: newP, _1: newAcc};
			case 'PWildcard':
				return {ctor: '_Tuple2', _0: newP, _1: newAcc};
			case 'PList':
				if (_p172._3.ctor === 'Nothing') {
					var _p173 = A2(recurseAll, newAcc, _p172._1);
					var newPs = _p173._0;
					var newAcc2 = _p173._1;
					return A2(
						ret,
						A5(_user$project$Lang$PList, _p172._0, newPs, _p172._2, _elm_lang$core$Maybe$Nothing, _p172._4),
						newAcc2);
				} else {
					var _p174 = A2(recurseAll, newAcc, _p172._1);
					var newPs = _p174._0;
					var newAcc2 = _p174._1;
					var _p175 = A2(recurse, newAcc2, _p172._3._0);
					var newPTail = _p175._0;
					var newAcc3 = _p175._1;
					return A2(
						ret,
						A5(
							_user$project$Lang$PList,
							_p172._0,
							newPs,
							_p172._2,
							_elm_lang$core$Maybe$Just(newPTail),
							_p172._4),
						newAcc3);
				}
			case 'PAs':
				var _p176 = A2(recurse, newAcc, _p172._3);
				var newPChild = _p176._0;
				var newAcc2 = _p176._1;
				return A2(
					ret,
					A4(_user$project$Lang$PAs, _p172._0, _p172._1, _p172._2, newPChild),
					newAcc2);
			default:
				var _p177 = A2(recurse, newAcc, _p172._1);
				var newPChild = _p177._0;
				var newAcc2 = _p177._1;
				return A2(
					ret,
					A3(_user$project$Lang$PParens, _p172._0, newPChild, _p172._2),
					newAcc2);
		}
	});
var _user$project$Lang$mapPatTopDown = F2(
	function (f, p) {
		var _p178 = A3(
			_user$project$Lang$mapFoldPatTopDown,
			F2(
				function (pat, _p179) {
					return {
						ctor: '_Tuple2',
						_0: f(pat),
						_1: {ctor: '_Tuple0'}
					};
				}),
			{ctor: '_Tuple0'},
			p);
		var newPat = _p178._0;
		return newPat;
	});
var _user$project$Lang$clearPIds = function (p) {
	return A2(_user$project$Lang$mapPatTopDown, _user$project$Lang$clearPId, p);
};
var _user$project$Lang$pList0 = function (ps) {
	return _user$project$Lang$withDummyPatInfo(
		A5(_user$project$Lang$PList, _user$project$Lang$space0, ps, _user$project$Lang$space0, _elm_lang$core$Maybe$Nothing, _user$project$Lang$space0));
};
var _user$project$Lang$pList = function (ps) {
	return _user$project$Lang$withDummyPatInfo(
		A5(_user$project$Lang$PList, _user$project$Lang$space1, ps, _user$project$Lang$space0, _elm_lang$core$Maybe$Nothing, _user$project$Lang$space0));
};
var _user$project$Lang$PWildcard = function (a) {
	return {ctor: 'PWildcard', _0: a};
};
var _user$project$Lang$pWildcard = _user$project$Lang$withDummyPatInfo(
	_user$project$Lang$PWildcard(_user$project$Lang$space1));
var _user$project$Lang$pWildcard0 = _user$project$Lang$withDummyPatInfo(
	_user$project$Lang$PWildcard(_user$project$Lang$space0));
var _user$project$Lang$PBase = F2(
	function (a, b) {
		return {ctor: 'PBase', _0: a, _1: b};
	});
var _user$project$Lang$PConst = F2(
	function (a, b) {
		return {ctor: 'PConst', _0: a, _1: b};
	});
var _user$project$Lang$PVar = F3(
	function (a, b, c) {
		return {ctor: 'PVar', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$mapPrecedingWhitespacePat = F2(
	function (stringMap, pat) {
		var mapWs = function (s) {
			return _user$project$Lang$ws(
				stringMap(s.val));
		};
		var p__ = function () {
			var _p180 = pat.val.p__;
			switch (_p180.ctor) {
				case 'PVar':
					return A3(
						_user$project$Lang$PVar,
						mapWs(_p180._0),
						_p180._1,
						_p180._2);
				case 'PConst':
					return A2(
						_user$project$Lang$PConst,
						mapWs(_p180._0),
						_p180._1);
				case 'PBase':
					return A2(
						_user$project$Lang$PBase,
						mapWs(_p180._0),
						_p180._1);
				case 'PWildcard':
					return _user$project$Lang$PWildcard(
						mapWs(_p180._0));
				case 'PList':
					return A5(
						_user$project$Lang$PList,
						mapWs(_p180._0),
						_p180._1,
						_p180._2,
						_p180._3,
						_p180._4);
				case 'PAs':
					return A4(
						_user$project$Lang$PAs,
						_p180._0,
						_p180._1,
						_p180._2,
						A2(_user$project$Lang$mapPrecedingWhitespacePat, stringMap, _p180._3));
				default:
					return A3(
						_user$project$Lang$PParens,
						mapWs(_p180._0),
						_p180._1,
						_p180._2);
			}
		}();
		return A2(_user$project$Lang$replaceP__, pat, p__);
	});
var _user$project$Lang$replacePrecedingWhitespacePat = F2(
	function (newWs, pat) {
		return A2(
			_user$project$Lang$mapPrecedingWhitespacePat,
			function (_p181) {
				return newWs;
			},
			pat);
	});
var _user$project$Lang$copyPrecedingWhitespacePat = F2(
	function (source, target) {
		return A2(
			_user$project$Lang$replacePrecedingWhitespacePat,
			_user$project$Lang$precedingWhitespacePat(source),
			target);
	});
var _user$project$Lang$replaceP__PreservingPrecedingWhitespace = F2(
	function (p, p__) {
		return A2(
			_user$project$Lang$copyPrecedingWhitespacePat,
			p,
			A2(_user$project$Lang$replaceP__, p, p__));
	});
var _user$project$Lang$setPatListWhitespace = F3(
	function (firstWs, sepWs, pats) {
		var _p182 = pats;
		if (_p182.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: A2(_user$project$Lang$replacePrecedingWhitespacePat, firstWs, _p182._0),
				_1: A2(
					_elm_lang$core$List$map,
					_user$project$Lang$replacePrecedingWhitespacePat(sepWs),
					_p182._1)
			};
		}
	});
var _user$project$Lang$imitatePatListWhitespace = F2(
	function (oldPats, newPats) {
		var _p183 = function () {
			var _p184 = oldPats;
			if (_p184.ctor === '::') {
				if (_p184._1.ctor === '::') {
					return {
						ctor: '_Tuple2',
						_0: _user$project$Lang$precedingWhitespacePat(_p184._0),
						_1: _user$project$Lang$precedingWhitespacePat(_p184._1._0)
					};
				} else {
					var _p185 = _p184._0;
					return {
						ctor: '_Tuple2',
						_0: _user$project$Lang$precedingWhitespacePat(_p185),
						_1: _elm_lang$core$Native_Utils.eq(
							_user$project$Lang$precedingWhitespacePat(_p185),
							'') ? ' ' : _user$project$Lang$precedingWhitespacePat(_p185)
					};
				}
			} else {
				return {ctor: '_Tuple2', _0: '', _1: ' '};
			}
		}();
		var firstWs = _p183._0;
		var sepWs = _p183._1;
		var _p186 = newPats;
		if (_p186.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var firstWithNewWs = A2(_user$project$Lang$replacePrecedingWhitespacePat, firstWs, _p186._0);
			var restWithNewWs = A2(
				_elm_lang$core$List$map,
				function (p) {
					return _elm_lang$core$Native_Utils.eq(
						_user$project$Lang$precedingWhitespacePat(p),
						'') ? A2(_user$project$Lang$replacePrecedingWhitespacePat, sepWs, p) : (A2(_elm_lang$core$List$member, p, oldPats) ? p : A2(_user$project$Lang$replacePrecedingWhitespacePat, sepWs, p));
				},
				_p186._1);
			return {ctor: '::', _0: firstWithNewWs, _1: restWithNewWs};
		}
	});
var _user$project$Lang$ensureWhitespacePat = function (pat) {
	return A2(_user$project$Lang$mapPrecedingWhitespacePat, _user$project$Lang$ensureWhitespace, pat);
};
var _user$project$Lang$MathOp = F2(
	function (a, b) {
		return {ctor: 'MathOp', _0: a, _1: b};
	});
var _user$project$Lang$MathVar = function (a) {
	return {ctor: 'MathVar', _0: a};
};
var _user$project$Lang$dummyTrace = _user$project$Lang$MathVar(0);
var _user$project$Lang$MathNum = function (a) {
	return {ctor: 'MathNum', _0: a};
};
var _user$project$Lang$DictInsert = {ctor: 'DictInsert'};
var _user$project$Lang$DictRemove = {ctor: 'DictRemove'};
var _user$project$Lang$DictGet = {ctor: 'DictGet'};
var _user$project$Lang$ArcTan2 = {ctor: 'ArcTan2'};
var _user$project$Lang$Ln = {ctor: 'Ln'};
var _user$project$Lang$Pow = {ctor: 'Pow'};
var _user$project$Lang$Mod = {ctor: 'Mod'};
var _user$project$Lang$Eq = {ctor: 'Eq'};
var _user$project$Lang$Lt = {ctor: 'Lt'};
var _user$project$Lang$Div = {ctor: 'Div'};
var _user$project$Lang$Mult = {ctor: 'Mult'};
var _user$project$Lang$Minus = {ctor: 'Minus'};
var _user$project$Lang$Plus = {ctor: 'Plus'};
var _user$project$Lang$offsetWidget1DEffectiveAmountAndEndPoint = F4(
	function (_p187, axis, sign, amount) {
		var _p188 = _p187;
		var _p194 = _p188._1;
		var _p193 = _p188._0;
		var _p189 = function () {
			var _p190 = sign;
			if (_p190.ctor === 'Positive') {
				return {ctor: '_Tuple2', _0: amount, _1: _user$project$Lang$Plus};
			} else {
				return {ctor: '_Tuple2', _0: 0 - amount, _1: _user$project$Lang$Minus};
			}
		}();
		var effectiveAmount = _p189._0;
		var op = _p189._1;
		var _p191 = function () {
			var _p192 = axis;
			if (_p192.ctor === 'X') {
				return {ctor: '_Tuple2', _0: _p193 + effectiveAmount, _1: _p194};
			} else {
				return {ctor: '_Tuple2', _0: _p193, _1: _p194 + effectiveAmount};
			}
		}();
		var endX = _p191._0;
		var endY = _p191._1;
		return {
			ctor: '_Tuple2',
			_0: effectiveAmount,
			_1: {ctor: '_Tuple2', _0: endX, _1: endY}
		};
	});
var _user$project$Lang$NoWidgets = {ctor: 'NoWidgets'};
var _user$project$Lang$DebugLog = {ctor: 'DebugLog'};
var _user$project$Lang$expEffectiveExps = function (exp) {
	var _p195 = exp.val.e__;
	_v112_8:
	do {
		switch (_p195.ctor) {
			case 'ETyp':
				return {
					ctor: '::',
					_0: exp,
					_1: _user$project$Lang$expEffectiveExps(_p195._3)
				};
			case 'EColonType':
				return {
					ctor: '::',
					_0: exp,
					_1: _user$project$Lang$expEffectiveExps(_p195._1)
				};
			case 'ETypeAlias':
				return {
					ctor: '::',
					_0: exp,
					_1: _user$project$Lang$expEffectiveExps(_p195._3)
				};
			case 'ELet':
				return {
					ctor: '::',
					_0: exp,
					_1: _user$project$Lang$expEffectiveExps(_p195._7)
				};
			case 'EParens':
				return {
					ctor: '::',
					_0: exp,
					_1: _user$project$Lang$expEffectiveExps(_p195._1)
				};
			case 'EComment':
				return {
					ctor: '::',
					_0: exp,
					_1: _user$project$Lang$expEffectiveExps(_p195._2)
				};
			case 'EOption':
				return {
					ctor: '::',
					_0: exp,
					_1: _user$project$Lang$expEffectiveExps(_p195._4)
				};
			case 'EOp':
				if ((_p195._2.ctor === '::') && (_p195._2._1.ctor === '[]')) {
					var _p196 = _p195._1.val;
					return (_elm_lang$core$Native_Utils.eq(_p196, _user$project$Lang$DebugLog) || _elm_lang$core$Native_Utils.eq(_p196, _user$project$Lang$NoWidgets)) ? {
						ctor: '::',
						_0: exp,
						_1: _user$project$Lang$expEffectiveExps(_p195._2._0)
					} : {
						ctor: '::',
						_0: exp,
						_1: {ctor: '[]'}
					};
				} else {
					break _v112_8;
				}
			default:
				break _v112_8;
		}
	} while(false);
	return {
		ctor: '::',
		_0: exp,
		_1: {ctor: '[]'}
	};
};
var _user$project$Lang$expEffectiveExp = function (exp) {
	return A2(
		_user$project$Utils$last,
		'expEffectiveExp shouldn\'t happen',
		_user$project$Lang$expEffectiveExps(exp));
};
var _user$project$Lang$expEffectiveEIds = function (_p197) {
	return A2(
		_elm_lang$core$List$map,
		function (_p198) {
			return function (_) {
				return _.eid;
			}(
				function (_) {
					return _.val;
				}(_p198));
		},
		_user$project$Lang$expEffectiveExps(_p197));
};
var _user$project$Lang$Explode = {ctor: 'Explode'};
var _user$project$Lang$Sqrt = {ctor: 'Sqrt'};
var _user$project$Lang$OptNumToString = {ctor: 'OptNumToString'};
var _user$project$Lang$ToStr = {ctor: 'ToStr'};
var _user$project$Lang$Round = {ctor: 'Round'};
var _user$project$Lang$Ceil = {ctor: 'Ceil'};
var _user$project$Lang$Floor = {ctor: 'Floor'};
var _user$project$Lang$Abs = {ctor: 'Abs'};
var _user$project$Lang$ArcSin = {ctor: 'ArcSin'};
var _user$project$Lang$ArcCos = {ctor: 'ArcCos'};
var _user$project$Lang$Sin = {ctor: 'Sin'};
var _user$project$Lang$Cos = {ctor: 'Cos'};
var _user$project$Lang$DictEmpty = {ctor: 'DictEmpty'};
var _user$project$Lang$Pi = {ctor: 'Pi'};
var _user$project$Lang$mathOps = {
	ctor: '::',
	_0: _user$project$Lang$Plus,
	_1: {
		ctor: '::',
		_0: _user$project$Lang$Minus,
		_1: {
			ctor: '::',
			_0: _user$project$Lang$Mult,
			_1: {
				ctor: '::',
				_0: _user$project$Lang$Div,
				_1: {
					ctor: '::',
					_0: _user$project$Lang$Pow,
					_1: {
						ctor: '::',
						_0: _user$project$Lang$Mod,
						_1: {
							ctor: '::',
							_0: _user$project$Lang$ArcTan2,
							_1: {
								ctor: '::',
								_0: _user$project$Lang$Cos,
								_1: {
									ctor: '::',
									_0: _user$project$Lang$Sin,
									_1: {
										ctor: '::',
										_0: _user$project$Lang$ArcCos,
										_1: {
											ctor: '::',
											_0: _user$project$Lang$ArcSin,
											_1: {
												ctor: '::',
												_0: _user$project$Lang$Abs,
												_1: {
													ctor: '::',
													_0: _user$project$Lang$Floor,
													_1: {
														ctor: '::',
														_0: _user$project$Lang$Ceil,
														_1: {
															ctor: '::',
															_0: _user$project$Lang$Round,
															_1: {
																ctor: '::',
																_0: _user$project$Lang$Sqrt,
																_1: {
																	ctor: '::',
																	_0: _user$project$Lang$Ln,
																	_1: {
																		ctor: '::',
																		_0: _user$project$Lang$Pi,
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$Lang$mathOpSet = _elm_lang$core$Set$fromList(_user$project$Lang$mathOps);
var _user$project$Lang$isMathOp_ = function (op_) {
	return A2(_elm_lang$core$Set$member, op_, _user$project$Lang$mathOpSet);
};
var _user$project$Lang$isMathOp = function (e) {
	var _p199 = e.val.e__;
	if (_p199.ctor === 'EOp') {
		return _user$project$Lang$isMathOp_(_p199._1.val);
	} else {
		return false;
	}
};
var _user$project$Lang$RightApp = function (a) {
	return {ctor: 'RightApp', _0: a};
};
var _user$project$Lang$LeftApp = function (a) {
	return {ctor: 'LeftApp', _0: a};
};
var _user$project$Lang$SpaceApp = {ctor: 'SpaceApp'};
var _user$project$Lang$EHole = F2(
	function (a, b) {
		return {ctor: 'EHole', _0: a, _1: b};
	});
var _user$project$Lang$EParens = F4(
	function (a, b, c, d) {
		return {ctor: 'EParens', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$ETypeAlias = F5(
	function (a, b, c, d, e) {
		return {ctor: 'ETypeAlias', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$EColonType = F5(
	function (a, b, c, d, e) {
		return {ctor: 'EColonType', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$eColonType = F2(
	function (e, t) {
		return _user$project$Lang$withDummyExpInfo(
			A5(_user$project$Lang$EColonType, _user$project$Lang$space1, e, _user$project$Lang$space1, t, _user$project$Lang$space0));
	});
var _user$project$Lang$ETyp = F5(
	function (a, b, c, d, e) {
		return {ctor: 'ETyp', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$EOption = F5(
	function (a, b, c, d, e) {
		return {ctor: 'EOption', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$EComment = F3(
	function (a, b, c) {
		return {ctor: 'EComment', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$eComment = F2(
	function (a, b) {
		return _user$project$Lang$withDummyExpInfo(
			A3(_user$project$Lang$EComment, _user$project$Lang$space1, a, b));
	});
var _user$project$Lang$ELet = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {ctor: 'ELet', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g, _7: h, _8: i};
	});
var _user$project$Lang$ETypeCase = F4(
	function (a, b, c, d) {
		return {ctor: 'ETypeCase', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$ECase = F4(
	function (a, b, c, d) {
		return {ctor: 'ECase', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$EIf = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'EIf', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _user$project$Lang$eIf = F3(
	function (e1, e2, e3) {
		return _user$project$Lang$withDummyExpInfo(
			A7(_user$project$Lang$EIf, _user$project$Lang$space1, e1, _user$project$Lang$space1, e2, _user$project$Lang$newline1, e3, _user$project$Lang$space0));
	});
var _user$project$Lang$eIfSingleLine = F3(
	function (e1, e2, e3) {
		return _user$project$Lang$withDummyExpInfo(
			A7(_user$project$Lang$EIf, _user$project$Lang$space1, e1, _user$project$Lang$space1, e2, _user$project$Lang$space1, e3, _user$project$Lang$space0));
	});
var _user$project$Lang$EList = F5(
	function (a, b, c, d, e) {
		return {ctor: 'EList', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$eList0 = F2(
	function (a, b) {
		return _user$project$Lang$withDummyExpInfo(
			A5(
				_user$project$Lang$EList,
				_user$project$Lang$space0,
				A2(
					_elm_lang$core$List$map,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})(_user$project$Lang$space0),
					a),
				_user$project$Lang$space0,
				b,
				_user$project$Lang$space0));
	});
var _user$project$Lang$eTuple0 = function (a) {
	return A2(_user$project$Lang$eList0, a, _elm_lang$core$Maybe$Nothing);
};
var _user$project$Lang$eList = F2(
	function (a, b) {
		return _user$project$Lang$withDummyExpInfo(
			A5(
				_user$project$Lang$EList,
				_user$project$Lang$space1,
				A2(
					_elm_lang$core$List$map,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})(_user$project$Lang$space0),
					a),
				_user$project$Lang$space0,
				b,
				_user$project$Lang$space0));
	});
var _user$project$Lang$eTuple = function (a) {
	return A2(_user$project$Lang$eList, a, _elm_lang$core$Maybe$Nothing);
};
var _user$project$Lang$ePair = F2(
	function (e1, e2) {
		return _user$project$Lang$eTuple(
			{
				ctor: '::',
				_0: e1,
				_1: {
					ctor: '::',
					_0: e2,
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Lang$EOp = F4(
	function (a, b, c, d) {
		return {ctor: 'EOp', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$eOp = F2(
	function (op_, es) {
		return _user$project$Lang$withDummyExpInfo(
			A4(
				_user$project$Lang$EOp,
				_user$project$Lang$space1,
				_user$project$Lang$withDummyRange(op_),
				es,
				_user$project$Lang$space0));
	});
var _user$project$Lang$ePlus = F2(
	function (e1, e2) {
		return A2(
			_user$project$Lang$eOp,
			_user$project$Lang$Plus,
			{
				ctor: '::',
				_0: e1,
				_1: {
					ctor: '::',
					_0: e2,
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Lang$eMinus = F2(
	function (e1, e2) {
		return A2(
			_user$project$Lang$eOp,
			_user$project$Lang$Minus,
			{
				ctor: '::',
				_0: e1,
				_1: {
					ctor: '::',
					_0: e2,
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Lang$EApp = F5(
	function (a, b, c, d, e) {
		return {ctor: 'EApp', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$eApp = F2(
	function (e, es) {
		return _user$project$Lang$withDummyExpInfo(
			A5(_user$project$Lang$EApp, _user$project$Lang$space1, e, es, _user$project$Lang$SpaceApp, _user$project$Lang$space0));
	});
var _user$project$Lang$desugarEApp = F2(
	function (e, es) {
		desugarEApp:
		while (true) {
			var _p200 = es;
			if (_p200.ctor === '[]') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Lang',
					{
						start: {line: 1881, column: 20},
						end: {line: 1884, column: 43}
					},
					_p200)('desugarEApp');
			} else {
				if (_p200._1.ctor === '[]') {
					return A2(
						_user$project$Lang$eApp,
						e,
						{
							ctor: '::',
							_0: _p200._0,
							_1: {ctor: '[]'}
						});
				} else {
					var _v115 = A2(
						_user$project$Lang$eApp,
						e,
						{
							ctor: '::',
							_0: _p200._0,
							_1: {ctor: '[]'}
						}),
						_v116 = _p200._1;
					e = _v115;
					es = _v116;
					continue desugarEApp;
				}
			}
		}
	});
var _user$project$Lang$EFun = F4(
	function (a, b, c, d) {
		return {ctor: 'EFun', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$eFun = F2(
	function (ps, e) {
		return _user$project$Lang$withDummyExpInfo(
			A4(_user$project$Lang$EFun, _user$project$Lang$space1, ps, e, _user$project$Lang$space0));
	});
var _user$project$Lang$desugarEFun = F2(
	function (ps, e) {
		var _p202 = ps;
		if (_p202.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Lang',
				{
					start: {line: 1886, column: 20},
					end: {line: 1889, column: 42}
				},
				_p202)('desugarEFun');
		} else {
			if (_p202._1.ctor === '[]') {
				return A2(
					_user$project$Lang$eFun,
					{
						ctor: '::',
						_0: _p202._0,
						_1: {ctor: '[]'}
					},
					e);
			} else {
				return A2(
					_user$project$Lang$eFun,
					{
						ctor: '::',
						_0: _p202._0,
						_1: {ctor: '[]'}
					},
					A2(_user$project$Lang$desugarEFun, _p202._1, e));
			}
		}
	});
var _user$project$Lang$EVar = F2(
	function (a, b) {
		return {ctor: 'EVar', _0: a, _1: b};
	});
var _user$project$Lang$eVar0 = function (a) {
	return _user$project$Lang$withDummyExpInfo(
		A2(_user$project$Lang$EVar, _user$project$Lang$space0, a));
};
var _user$project$Lang$eCall = F2(
	function (fName, es) {
		return A2(
			_user$project$Lang$eApp,
			_user$project$Lang$eVar0(fName),
			es);
	});
var _user$project$Lang$eRaw0 = _user$project$Lang$eVar0;
var _user$project$Lang$eVar = function (a) {
	return _user$project$Lang$withDummyExpInfo(
		A2(_user$project$Lang$EVar, _user$project$Lang$space1, a));
};
var _user$project$Lang$eRaw = _user$project$Lang$eVar;
var _user$project$Lang$listOfVars = function (xs) {
	var _p204 = xs;
	if (_p204.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _user$project$Lang$eVar0(_p204._0),
			_1: A2(_elm_lang$core$List$map, _user$project$Lang$eVar, _p204._1)
		};
	}
};
var _user$project$Lang$listOfRaw = _user$project$Lang$listOfVars;
var _user$project$Lang$eRaw__ = _user$project$Lang$EVar;
var _user$project$Lang$EBase = F2(
	function (a, b) {
		return {ctor: 'EBase', _0: a, _1: b};
	});
var _user$project$Lang$EConst = F4(
	function (a, b, c, d) {
		return {ctor: 'EConst', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$mapPrecedingWhitespace = F2(
	function (stringMap, exp) {
		var mapWs = function (s) {
			return _user$project$Lang$ws(
				stringMap(s.val));
		};
		var e__New = function () {
			var _p205 = exp.val.e__;
			switch (_p205.ctor) {
				case 'EBase':
					return A2(
						_user$project$Lang$EBase,
						mapWs(_p205._0),
						_p205._1);
				case 'EConst':
					return A4(
						_user$project$Lang$EConst,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3);
				case 'EVar':
					return A2(
						_user$project$Lang$EVar,
						mapWs(_p205._0),
						_p205._1);
				case 'EFun':
					return A4(
						_user$project$Lang$EFun,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3);
				case 'EApp':
					return A5(
						_user$project$Lang$EApp,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3,
						_p205._4);
				case 'EList':
					return A5(
						_user$project$Lang$EList,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3,
						_p205._4);
				case 'EOp':
					return A4(
						_user$project$Lang$EOp,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3);
				case 'EIf':
					return A7(
						_user$project$Lang$EIf,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3,
						_p205._4,
						_p205._5,
						_p205._6);
				case 'ELet':
					return A9(
						_user$project$Lang$ELet,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3,
						_p205._4,
						_p205._5,
						_p205._6,
						_p205._7,
						_p205._8);
				case 'ECase':
					return A4(
						_user$project$Lang$ECase,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3);
				case 'ETypeCase':
					return A4(
						_user$project$Lang$ETypeCase,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3);
				case 'EComment':
					return A3(
						_user$project$Lang$EComment,
						mapWs(_p205._0),
						_p205._1,
						_p205._2);
				case 'EOption':
					return A5(
						_user$project$Lang$EOption,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3,
						_p205._4);
				case 'ETyp':
					return A5(
						_user$project$Lang$ETyp,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3,
						_p205._4);
				case 'EColonType':
					return A5(
						_user$project$Lang$EColonType,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3,
						_p205._4);
				case 'ETypeAlias':
					return A5(
						_user$project$Lang$ETypeAlias,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3,
						_p205._4);
				case 'EParens':
					return A4(
						_user$project$Lang$EParens,
						mapWs(_p205._0),
						_p205._1,
						_p205._2,
						_p205._3);
				default:
					return A2(
						_user$project$Lang$EHole,
						mapWs(_p205._0),
						_p205._1);
			}
		}();
		return A2(_user$project$Lang$replaceE__, exp, e__New);
	});
var _user$project$Lang$addPrecedingWhitespace = F2(
	function (newWs, exp) {
		return A2(
			_user$project$Lang$mapPrecedingWhitespace,
			function (oldWs) {
				return A2(_elm_lang$core$Basics_ops['++'], oldWs, newWs);
			},
			exp);
	});
var _user$project$Lang$replacePrecedingWhitespace = F2(
	function (newWs, exp) {
		return A2(
			_user$project$Lang$mapPrecedingWhitespace,
			function (_p206) {
				return newWs;
			},
			exp);
	});
var _user$project$Lang$copyPrecedingWhitespace = F2(
	function (source, target) {
		return A2(
			_user$project$Lang$replacePrecedingWhitespace,
			_user$project$Lang$precedingWhitespace(source),
			target);
	});
var _user$project$Lang$replaceE__PreservingPrecedingWhitespace = F2(
	function (e, e__) {
		return A2(
			_user$project$Lang$copyPrecedingWhitespace,
			e,
			A2(_user$project$Lang$replaceE__, e, e__));
	});
var _user$project$Lang$removePrecedingWhitespace = _user$project$Lang$replacePrecedingWhitespace('');
var _user$project$Lang$setExpListWhitespace = F3(
	function (firstWs, sepWs, exps) {
		var _p207 = exps;
		if (_p207.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: A2(_user$project$Lang$replacePrecedingWhitespace, firstWs, _p207._0),
				_1: A2(
					_elm_lang$core$List$map,
					_user$project$Lang$replacePrecedingWhitespace(sepWs),
					_p207._1)
			};
		}
	});
var _user$project$Lang$imitateExpListWhitespace_ = F3(
	function (oldExps, nextWs, newExps) {
		var _p208 = function () {
			var _p209 = oldExps;
			if (_p209.ctor === '::') {
				if (_p209._1.ctor === '::') {
					return {
						ctor: '_Tuple2',
						_0: _user$project$Lang$precedingWhitespace(_p209._0),
						_1: _user$project$Lang$precedingWhitespace(_p209._1._0)
					};
				} else {
					var _p210 = _p209._0;
					return {
						ctor: '_Tuple2',
						_0: _user$project$Lang$precedingWhitespace(_p210),
						_1: _elm_lang$core$Native_Utils.eq(
							_user$project$Lang$precedingWhitespace(_p210),
							'') ? ' ' : _user$project$Lang$precedingWhitespace(_p210)
					};
				}
			} else {
				return A2(_elm_lang$core$String$contains, '\n', nextWs) ? {
					ctor: '_Tuple2',
					_0: A2(_user$project$Lang$indentWs, '  ', nextWs),
					_1: A2(_user$project$Lang$indentWs, '  ', nextWs)
				} : {ctor: '_Tuple2', _0: '', _1: ' '};
			}
		}();
		var firstWs = _p208._0;
		var sepWs = _p208._1;
		var _p211 = newExps;
		if (_p211.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var firstWithNewWs = A2(_user$project$Lang$replacePrecedingWhitespace, firstWs, _p211._0);
			var restWithNewWs = A2(
				_elm_lang$core$List$map,
				function (e) {
					return _elm_lang$core$Native_Utils.eq(
						_user$project$Lang$precedingWhitespace(e),
						'') ? A2(_user$project$Lang$replacePrecedingWhitespace, sepWs, e) : (A2(_elm_lang$core$List$member, e, oldExps) ? e : A2(_user$project$Lang$replacePrecedingWhitespace, sepWs, e));
				},
				_p211._1);
			return {ctor: '::', _0: firstWithNewWs, _1: restWithNewWs};
		}
	});
var _user$project$Lang$imitateExpListWhitespace = F2(
	function (oldExps, newExps) {
		return A3(_user$project$Lang$imitateExpListWhitespace_, oldExps, '', newExps);
	});
var _user$project$Lang$ensureWhitespaceExp = function (exp) {
	return A2(_user$project$Lang$mapPrecedingWhitespace, _user$project$Lang$ensureWhitespace, exp);
};
var _user$project$Lang$ensureWhitespaceNNewlinesExp = F2(
	function (n, exp) {
		return A2(
			_user$project$Lang$mapPrecedingWhitespace,
			_user$project$Lang$ensureWhitespaceNNewlines(n),
			exp);
	});
var _user$project$Lang$ensureWhitespaceNewlineExp = function (exp) {
	return A2(_user$project$Lang$ensureWhitespaceNNewlinesExp, 1, exp);
};
var _user$project$Lang$ensureNNewlinesExp = F3(
	function (n, indentationIfNoPreviousNewlines, exp) {
		return A2(
			_user$project$Lang$mapPrecedingWhitespace,
			A2(_user$project$Lang$ensureNNewlines, n, indentationIfNoPreviousNewlines),
			exp);
	});
var _user$project$Lang$mapExpWhitespaces = F2(
	function (stringMap, exp) {
		var mapWs = function (s) {
			return _user$project$Lang$ws(
				stringMap(s.val));
		};
		var e__New = function () {
			var _p212 = exp.val.e__;
			switch (_p212.ctor) {
				case 'EBase':
					return A2(
						_user$project$Lang$EBase,
						mapWs(_p212._0),
						_p212._1);
				case 'EConst':
					return A4(
						_user$project$Lang$EConst,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						_p212._3);
				case 'EVar':
					return A2(
						_user$project$Lang$EVar,
						mapWs(_p212._0),
						_p212._1);
				case 'EFun':
					return A4(
						_user$project$Lang$EFun,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						mapWs(_p212._3));
				case 'EApp':
					return A5(
						_user$project$Lang$EApp,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						_p212._3,
						mapWs(_p212._4));
				case 'EList':
					return A5(
						_user$project$Lang$EList,
						mapWs(_p212._0),
						_p212._1,
						mapWs(_p212._2),
						_p212._3,
						mapWs(_p212._4));
				case 'EOp':
					return A4(
						_user$project$Lang$EOp,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						mapWs(_p212._3));
				case 'EIf':
					return A7(
						_user$project$Lang$EIf,
						mapWs(_p212._0),
						_p212._1,
						mapWs(_p212._2),
						_p212._3,
						mapWs(_p212._4),
						_p212._5,
						mapWs(_p212._6));
				case 'ELet':
					return A9(
						_user$project$Lang$ELet,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						_p212._3,
						mapWs(_p212._4),
						_p212._5,
						mapWs(_p212._6),
						_p212._7,
						mapWs(_p212._8));
				case 'ECase':
					return A4(
						_user$project$Lang$ECase,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						mapWs(_p212._3));
				case 'ETypeCase':
					return A4(
						_user$project$Lang$ETypeCase,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						mapWs(_p212._3));
				case 'EComment':
					return A3(
						_user$project$Lang$EComment,
						mapWs(_p212._0),
						_p212._1,
						_p212._2);
				case 'EOption':
					return A5(
						_user$project$Lang$EOption,
						mapWs(_p212._0),
						_p212._1,
						mapWs(_p212._2),
						_p212._3,
						_p212._4);
				case 'ETyp':
					return A5(
						_user$project$Lang$ETyp,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						_p212._3,
						mapWs(_p212._4));
				case 'EColonType':
					return A5(
						_user$project$Lang$EColonType,
						mapWs(_p212._0),
						_p212._1,
						mapWs(_p212._2),
						_p212._3,
						mapWs(_p212._4));
				case 'ETypeAlias':
					return A5(
						_user$project$Lang$ETypeAlias,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						_p212._3,
						mapWs(_p212._4));
				case 'EParens':
					return A4(
						_user$project$Lang$EParens,
						mapWs(_p212._0),
						_p212._1,
						_p212._2,
						mapWs(_p212._3));
				default:
					return A2(
						_user$project$Lang$EHole,
						mapWs(_p212._0),
						_p212._1);
			}
		}();
		return A2(_user$project$Lang$replaceE__, exp, e__New);
	});
var _user$project$Lang$HolePBE = F2(
	function (a, b) {
		return {ctor: 'HolePBE', _0: a, _1: b};
	});
var _user$project$Lang$eHolePBE = function (es) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EHole,
			_user$project$Lang$space1,
			A2(
				_user$project$Lang$HolePBE,
				A2(
					_user$project$Utils$mapi1,
					function (_p213) {
						var _p214 = _p213;
						return {
							ctor: '_Tuple4',
							_0: _user$project$Lang$space0,
							_1: _elm_lang$core$Native_Utils.eq(_p214._0, 1) ? _user$project$Lang$space0 : _user$project$Lang$space1,
							_2: _user$project$Lang$space1,
							_3: _p214._1
						};
					},
					es),
				_user$project$Lang$space0)));
};
var _user$project$Lang$HolePredicate = function (a) {
	return {ctor: 'HolePredicate', _0: a};
};
var _user$project$Lang$eHolePred = function (p) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EHole,
			_user$project$Lang$space1,
			_user$project$Lang$HolePredicate(p)));
};
var _user$project$Lang$HoleLoc = function (a) {
	return {ctor: 'HoleLoc', _0: a};
};
var _user$project$Lang$eHoleLoc0 = function (locId) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EHole,
			_user$project$Lang$space0,
			_user$project$Lang$HoleLoc(locId)));
};
var _user$project$Lang$eHoleLoc = function (locId) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EHole,
			_user$project$Lang$space1,
			_user$project$Lang$HoleLoc(locId)));
};
var _user$project$Lang$HoleVal = function (a) {
	return {ctor: 'HoleVal', _0: a};
};
var _user$project$Lang$eHoleVal0 = function (v) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EHole,
			_user$project$Lang$space0,
			_user$project$Lang$HoleVal(v)));
};
var _user$project$Lang$eHoleVal = function (v) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EHole,
			_user$project$Lang$space1,
			_user$project$Lang$HoleVal(v)));
};
var _user$project$Lang$HoleNamed = function (a) {
	return {ctor: 'HoleNamed', _0: a};
};
var _user$project$Lang$eHoleNamed0 = function (s) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EHole,
			_user$project$Lang$space0,
			_user$project$Lang$HoleNamed(s)));
};
var _user$project$Lang$eHoleNamed = function (s) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EHole,
			_user$project$Lang$space1,
			_user$project$Lang$HoleNamed(s)));
};
var _user$project$Lang$HoleEmpty = {ctor: 'HoleEmpty'};
var _user$project$Lang$eHoleEmpty0 = _user$project$Lang$withDummyExpInfo(
	A2(_user$project$Lang$EHole, _user$project$Lang$space0, _user$project$Lang$HoleEmpty));
var _user$project$Lang$eHoleEmpty = _user$project$Lang$withDummyExpInfo(
	A2(_user$project$Lang$EHole, _user$project$Lang$space1, _user$project$Lang$HoleEmpty));
var _user$project$Lang$ElmSyntax = {ctor: 'ElmSyntax'};
var _user$project$Lang$LongStringSyntax = {ctor: 'LongStringSyntax'};
var _user$project$Lang$Parens = {ctor: 'Parens'};
var _user$project$Lang$eParens = function (e) {
	return _user$project$Lang$withDummyExpInfo(
		A4(_user$project$Lang$EParens, _user$project$Lang$space1, e, _user$project$Lang$Parens, _user$project$Lang$space0));
};
var _user$project$Lang$TWildcard = function (a) {
	return {ctor: 'TWildcard', _0: a};
};
var _user$project$Lang$TForall = F4(
	function (a, b, c, d) {
		return {ctor: 'TForall', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$TVar = F2(
	function (a, b) {
		return {ctor: 'TVar', _0: a, _1: b};
	});
var _user$project$Lang$TNamed = F2(
	function (a, b) {
		return {ctor: 'TNamed', _0: a, _1: b};
	});
var _user$project$Lang$eColonTypeAlias = F2(
	function (e, aliasName) {
		return A2(
			_user$project$Lang$eColonType,
			_user$project$Lang$removePrecedingWhitespace(e),
			_user$project$Lang$withDummyRange(
				{
					t__: A2(_user$project$Lang$TNamed, _user$project$Lang$space1, aliasName),
					roles: _elm_lang$core$Set$singleton(aliasName)
				}));
	});
var _user$project$Lang$TUnion = F3(
	function (a, b, c) {
		return {ctor: 'TUnion', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$TArrow = F3(
	function (a, b, c) {
		return {ctor: 'TArrow', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$TTuple = F5(
	function (a, b, c, d, e) {
		return {ctor: 'TTuple', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$TDict = F4(
	function (a, b, c, d) {
		return {ctor: 'TDict', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$TList = F3(
	function (a, b, c) {
		return {ctor: 'TList', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$mapType = F2(
	function (f, tipe) {
		var recurse = _user$project$Lang$mapType(f);
		var wrap = function (t__) {
			return A2(_user$project$Lang$replaceT__, tipe, t__);
		};
		var _p215 = tipe.val.t__;
		switch (_p215.ctor) {
			case 'TNum':
				return f(tipe);
			case 'TBool':
				return f(tipe);
			case 'TString':
				return f(tipe);
			case 'TNull':
				return f(tipe);
			case 'TNamed':
				return f(tipe);
			case 'TVar':
				return f(tipe);
			case 'TWildcard':
				return f(tipe);
			case 'TList':
				return f(
					wrap(
						A3(
							_user$project$Lang$TList,
							_p215._0,
							recurse(_p215._1),
							_p215._2)));
			case 'TDict':
				return f(
					wrap(
						A4(
							_user$project$Lang$TDict,
							_p215._0,
							recurse(_p215._1),
							recurse(_p215._2),
							_p215._3)));
			case 'TArrow':
				return f(
					wrap(
						A3(
							_user$project$Lang$TArrow,
							_p215._0,
							A2(_elm_lang$core$List$map, recurse, _p215._1),
							_p215._2)));
			case 'TUnion':
				return f(
					wrap(
						A3(
							_user$project$Lang$TUnion,
							_p215._0,
							A2(_elm_lang$core$List$map, recurse, _p215._1),
							_p215._2)));
			case 'TForall':
				return f(
					wrap(
						A4(
							_user$project$Lang$TForall,
							_p215._0,
							_p215._1,
							recurse(_p215._2),
							_p215._3)));
			default:
				return f(
					wrap(
						A5(
							_user$project$Lang$TTuple,
							_p215._0,
							A2(_elm_lang$core$List$map, recurse, _p215._1),
							_p215._2,
							A2(_elm_lang$core$Maybe$map, recurse, _p215._3),
							_p215._4)));
		}
	});
var _user$project$Lang$TNull = function (a) {
	return {ctor: 'TNull', _0: a};
};
var _user$project$Lang$TString = function (a) {
	return {ctor: 'TString', _0: a};
};
var _user$project$Lang$TBool = function (a) {
	return {ctor: 'TBool', _0: a};
};
var _user$project$Lang$TNum = function (a) {
	return {ctor: 'TNum', _0: a};
};
var _user$project$Lang$Many = F3(
	function (a, b, c) {
		return {ctor: 'Many', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$One = function (a) {
	return {ctor: 'One', _0: a};
};
var _user$project$Lang$Branch_ = F4(
	function (a, b, c, d) {
		return {ctor: 'Branch_', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$mapBranchPats = F2(
	function (f, branches) {
		return A2(
			_elm_lang$core$List$map,
			function (branch) {
				var _p216 = branch.val;
				var ws1 = _p216._0;
				var pat = _p216._1;
				var exp = _p216._2;
				var ws2 = _p216._3;
				return _elm_lang$core$Native_Utils.update(
					branch,
					{
						val: A4(
							_user$project$Lang$Branch_,
							ws1,
							f(pat),
							exp,
							ws2)
					});
			},
			branches);
	});
var _user$project$Lang$clearNodeIds = function (e) {
	var eidCleared = _user$project$Lang$clearEId(e);
	var _p217 = eidCleared.val.e__;
	_v126_7:
	do {
		switch (_p217.ctor) {
			case 'EConst':
				if (_p217._2.ctor === '_Tuple3') {
					return A2(
						_user$project$Lang$replaceE__,
						eidCleared,
						A4(
							_user$project$Lang$EConst,
							_p217._0,
							_p217._1,
							{ctor: '_Tuple3', _0: 0, _1: _p217._2._1, _2: ''},
							_p217._3));
				} else {
					break _v126_7;
				}
			case 'ELet':
				return A2(
					_user$project$Lang$replaceE__,
					eidCleared,
					A9(
						_user$project$Lang$ELet,
						_p217._0,
						_p217._1,
						_p217._2,
						_user$project$Lang$clearPIds(_p217._3),
						_p217._4,
						_p217._5,
						_p217._6,
						_p217._7,
						_p217._8));
			case 'EFun':
				return A2(
					_user$project$Lang$replaceE__,
					eidCleared,
					A4(
						_user$project$Lang$EFun,
						_p217._0,
						A2(_elm_lang$core$List$map, _user$project$Lang$clearPIds, _p217._1),
						_p217._2,
						_p217._3));
			case 'ECase':
				return A2(
					_user$project$Lang$replaceE__,
					eidCleared,
					A4(
						_user$project$Lang$ECase,
						_p217._0,
						_p217._1,
						A2(_user$project$Lang$mapBranchPats, _user$project$Lang$clearPIds, _p217._2),
						_p217._3));
			case 'ETypeCase':
				return A2(
					_user$project$Lang$replaceE__,
					eidCleared,
					A4(_user$project$Lang$ETypeCase, _p217._0, _p217._1, _p217._2, _p217._3));
			case 'ETyp':
				return A2(
					_user$project$Lang$replaceE__,
					eidCleared,
					A5(
						_user$project$Lang$ETyp,
						_p217._0,
						_user$project$Lang$clearPIds(_p217._1),
						_p217._2,
						_p217._3,
						_p217._4));
			case 'ETypeAlias':
				return A2(
					_user$project$Lang$replaceE__,
					eidCleared,
					A5(
						_user$project$Lang$ETypeAlias,
						_p217._0,
						_user$project$Lang$clearPIds(_p217._1),
						_p217._2,
						_p217._3,
						_p217._4));
			default:
				break _v126_7;
		}
	} while(false);
	return eidCleared;
};
var _user$project$Lang$replaceBranchExp = F2(
	function (branch, exp) {
		var _p218 = branch.val;
		var bws1 = _p218._0;
		var p = _p218._1;
		var bws2 = _p218._3;
		return _elm_lang$core$Native_Utils.update(
			branch,
			{
				val: A4(_user$project$Lang$Branch_, bws1, p, exp, bws2)
			});
	});
var _user$project$Lang$TBranch_ = F4(
	function (a, b, c, d) {
		return {ctor: 'TBranch_', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$mapFoldExp = F3(
	function (f, initAcc, e) {
		var recurse = _user$project$Lang$mapFoldExp(f);
		var wrap = function (e__) {
			return A2(_user$project$Lang$replaceE__, e, e__);
		};
		var wrapAndMap = function (_p219) {
			return f(
				wrap(_p219));
		};
		var recurseAll = F2(
			function (initAcc, exps) {
				return A3(
					_elm_lang$core$List$foldr,
					F2(
						function (exp, _p220) {
							var _p221 = _p220;
							var _p222 = A2(recurse, _p221._1, exp);
							var newExp = _p222._0;
							var newAcc = _p222._1;
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: newExp, _1: _p221._0},
								_1: newAcc
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: initAcc
					},
					exps);
			});
		var _p223 = e.val.e__;
		switch (_p223.ctor) {
			case 'EConst':
				return A2(f, e, initAcc);
			case 'EBase':
				return A2(f, e, initAcc);
			case 'EVar':
				return A2(f, e, initAcc);
			case 'EFun':
				var _p224 = A2(recurse, initAcc, _p223._2);
				var newE1 = _p224._0;
				var newAcc = _p224._1;
				return A2(
					wrapAndMap,
					A4(_user$project$Lang$EFun, _p223._0, _p223._1, newE1, _p223._3),
					newAcc);
			case 'EApp':
				var _p225 = A2(recurseAll, initAcc, _p223._2);
				var newEs = _p225._0;
				var newAcc = _p225._1;
				var _p226 = A2(recurse, newAcc, _p223._1);
				var newE1 = _p226._0;
				var newAcc2 = _p226._1;
				return A2(
					wrapAndMap,
					A5(_user$project$Lang$EApp, _p223._0, newE1, newEs, _p223._3, _p223._4),
					newAcc2);
			case 'EOp':
				var _p227 = A2(recurseAll, initAcc, _p223._2);
				var newEs = _p227._0;
				var newAcc = _p227._1;
				return A2(
					wrapAndMap,
					A4(_user$project$Lang$EOp, _p223._0, _p223._1, newEs, _p223._3),
					newAcc);
			case 'EList':
				if (_p223._3.ctor === 'Nothing') {
					var _p229 = _p223._1;
					var _p228 = A2(
						recurseAll,
						initAcc,
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p229));
					var newEs = _p228._0;
					var newAcc = _p228._1;
					return A2(
						wrapAndMap,
						A5(
							_user$project$Lang$EList,
							_p223._0,
							A2(
								_user$project$Utils$zip,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p229),
								newEs),
							_p223._2,
							_elm_lang$core$Maybe$Nothing,
							_p223._4),
						newAcc);
				} else {
					var _p232 = _p223._1;
					var _p230 = A2(recurse, initAcc, _p223._3._0);
					var newE1 = _p230._0;
					var newAcc = _p230._1;
					var _p231 = A2(
						recurseAll,
						newAcc,
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p232));
					var newEs = _p231._0;
					var newAcc2 = _p231._1;
					return A2(
						wrapAndMap,
						A5(
							_user$project$Lang$EList,
							_p223._0,
							A2(
								_user$project$Utils$zip,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p232),
								newEs),
							_p223._2,
							_elm_lang$core$Maybe$Just(newE1),
							_p223._4),
						newAcc2);
				}
			case 'EIf':
				var _p233 = A2(
					recurseAll,
					initAcc,
					{
						ctor: '::',
						_0: _p223._1,
						_1: {
							ctor: '::',
							_0: _p223._3,
							_1: {
								ctor: '::',
								_0: _p223._5,
								_1: {ctor: '[]'}
							}
						}
					});
				if (((((_p233.ctor === '_Tuple2') && (_p233._0.ctor === '::')) && (_p233._0._1.ctor === '::')) && (_p233._0._1._1.ctor === '::')) && (_p233._0._1._1._1.ctor === '[]')) {
					return A2(
						wrapAndMap,
						A7(_user$project$Lang$EIf, _p223._0, _p233._0._0, _p223._2, _p233._0._1._0, _p223._4, _p233._0._1._1._0, _p223._6),
						_p233._1);
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Lang',
						{
							start: {line: 619, column: 7},
							end: {line: 621, column: 116}
						},
						_p233)('I\'ll buy you a beer if this line of code executes. - Brian');
				}
			case 'ECase':
				var _p235 = A3(
					_elm_lang$core$List$foldr,
					F2(
						function (branch, _p236) {
							var _p237 = _p236;
							var _p238 = branch.val;
							var bws1 = _p238._0;
							var p = _p238._1;
							var ei = _p238._2;
							var bws2 = _p238._3;
							var _p239 = A2(recurse, _p237._1, ei);
							var newEi = _p239._0;
							var newAcc = _p239._1;
							return {
								ctor: '_Tuple2',
								_0: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										branch,
										{
											val: A4(_user$project$Lang$Branch_, bws1, p, newEi, bws2)
										}),
									_1: _p237._0
								},
								_1: newAcc
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: initAcc
					},
					_p223._2);
				var newBranches = _p235._0;
				var newAcc = _p235._1;
				var _p240 = A2(recurse, newAcc, _p223._1);
				var newE1 = _p240._0;
				var newAcc2 = _p240._1;
				return A2(
					wrapAndMap,
					A4(_user$project$Lang$ECase, _p223._0, newE1, newBranches, _p223._3),
					newAcc2);
			case 'ETypeCase':
				var _p241 = A3(
					_elm_lang$core$List$foldr,
					F2(
						function (tbranch, _p242) {
							var _p243 = _p242;
							var _p244 = tbranch.val;
							var bws1 = _p244._0;
							var t = _p244._1;
							var ei = _p244._2;
							var bws2 = _p244._3;
							var _p245 = A2(recurse, _p243._1, ei);
							var newEi = _p245._0;
							var newAcc = _p245._1;
							return {
								ctor: '_Tuple2',
								_0: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										tbranch,
										{
											val: A4(_user$project$Lang$TBranch_, bws1, t, newEi, bws2)
										}),
									_1: _p243._0
								},
								_1: newAcc
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: initAcc
					},
					_p223._2);
				var newBranches = _p241._0;
				var newAcc = _p241._1;
				var _p246 = A2(recurse, newAcc, _p223._1);
				var newE1 = _p246._0;
				var newAcc2 = _p246._1;
				return A2(
					wrapAndMap,
					A4(_user$project$Lang$ETypeCase, _p223._0, newE1, newBranches, _p223._3),
					newAcc2);
			case 'EComment':
				var _p247 = A2(recurse, initAcc, _p223._2);
				var newE1 = _p247._0;
				var newAcc = _p247._1;
				return A2(
					wrapAndMap,
					A3(_user$project$Lang$EComment, _p223._0, _p223._1, newE1),
					newAcc);
			case 'EOption':
				var _p248 = A2(recurse, initAcc, _p223._4);
				var newE1 = _p248._0;
				var newAcc = _p248._1;
				return A2(
					wrapAndMap,
					A5(_user$project$Lang$EOption, _p223._0, _p223._1, _p223._2, _p223._3, newE1),
					newAcc);
			case 'ELet':
				var _p249 = A2(recurse, initAcc, _p223._7);
				var newE2 = _p249._0;
				var newAcc = _p249._1;
				var _p250 = A2(recurse, newAcc, _p223._5);
				var newE1 = _p250._0;
				var newAcc2 = _p250._1;
				return A2(
					wrapAndMap,
					A9(_user$project$Lang$ELet, _p223._0, _p223._1, _p223._2, _p223._3, _p223._4, newE1, _p223._6, newE2, _p223._8),
					newAcc2);
			case 'ETyp':
				var _p251 = A2(recurse, initAcc, _p223._3);
				var newE1 = _p251._0;
				var newAcc = _p251._1;
				return A2(
					wrapAndMap,
					A5(_user$project$Lang$ETyp, _p223._0, _p223._1, _p223._2, newE1, _p223._4),
					newAcc);
			case 'EColonType':
				var _p252 = A2(recurse, initAcc, _p223._1);
				var newE1 = _p252._0;
				var newAcc = _p252._1;
				return A2(
					wrapAndMap,
					A5(_user$project$Lang$EColonType, _p223._0, newE1, _p223._2, _p223._3, _p223._4),
					newAcc);
			case 'ETypeAlias':
				var _p253 = A2(recurse, initAcc, _p223._3);
				var newE1 = _p253._0;
				var newAcc = _p253._1;
				return A2(
					wrapAndMap,
					A5(_user$project$Lang$ETypeAlias, _p223._0, _p223._1, _p223._2, newE1, _p223._4),
					newAcc);
			case 'EParens':
				var _p254 = A2(recurse, initAcc, _p223._1);
				var newE = _p254._0;
				var newAcc = _p254._1;
				return A2(
					wrapAndMap,
					A4(_user$project$Lang$EParens, _p223._0, newE, _p223._2, _p223._3),
					newAcc);
			default:
				if (_p223._1.ctor === 'HolePBE') {
					var _p260 = _p223._1._0;
					var _p255 = A2(
						recurseAll,
						initAcc,
						A2(
							_elm_lang$core$List$map,
							function (_p256) {
								var _p257 = _p256;
								return _p257._3;
							},
							_p260));
					var newExampleExps = _p255._0;
					var newAcc = _p255._1;
					var newExamples = A3(
						_elm_lang$core$List$map2,
						F2(
							function (_p258, e) {
								var _p259 = _p258;
								return {ctor: '_Tuple4', _0: _p259._0, _1: _p259._1, _2: _p259._2, _3: e};
							}),
						_p260,
						newExampleExps);
					return A2(
						wrapAndMap,
						A2(
							_user$project$Lang$EHole,
							_p223._0,
							A2(_user$project$Lang$HolePBE, newExamples, _p223._1._1)),
						newAcc);
				} else {
					return A2(f, e, initAcc);
				}
		}
	});
var _user$project$Lang$mapExp = F2(
	function (f, e) {
		var _p261 = A3(
			_user$project$Lang$mapFoldExp,
			F2(
				function (exp, _p262) {
					return {
						ctor: '_Tuple2',
						_0: f(exp),
						_1: {ctor: '_Tuple0'}
					};
				}),
			{ctor: '_Tuple0'},
			e);
		var newExp = _p261._0;
		return newExp;
	});
var _user$project$Lang$mapExpViaExp__ = F2(
	function (f, e) {
		var f_ = function (exp) {
			return A2(
				_user$project$Lang$replaceE__,
				exp,
				f(exp.val.e__));
		};
		return A2(_user$project$Lang$mapExp, f_, e);
	});
var _user$project$Lang$mapPatNode = F3(
	function (pid, f, root) {
		return A2(
			_user$project$Lang$mapExpViaExp__,
			function (e__) {
				var _p263 = e__;
				switch (_p263.ctor) {
					case 'ELet':
						return A9(
							_user$project$Lang$ELet,
							_p263._0,
							_p263._1,
							_p263._2,
							A3(_user$project$Lang$mapPatNodePat, pid, f, _p263._3),
							_p263._4,
							_p263._5,
							_p263._6,
							_p263._7,
							_p263._8);
					case 'EFun':
						return A4(
							_user$project$Lang$EFun,
							_p263._0,
							A2(
								_elm_lang$core$List$map,
								A2(_user$project$Lang$mapPatNodePat, pid, f),
								_p263._1),
							_p263._2,
							_p263._3);
					case 'ECase':
						return A4(
							_user$project$Lang$ECase,
							_p263._0,
							_p263._1,
							A2(
								_user$project$Lang$mapBranchPats,
								A2(_user$project$Lang$mapPatNodePat, pid, f),
								_p263._2),
							_p263._3);
					default:
						return e__;
				}
			},
			root);
	});
var _user$project$Lang$replacePatNodePreservingPrecedingWhitespace = F3(
	function (pid, newPat, root) {
		return A3(
			_user$project$Lang$mapPatNode,
			pid,
			function (pat) {
				return A2(_user$project$Lang$copyPrecedingWhitespacePat, pat, newPat);
			},
			root);
	});
var _user$project$Lang$mapExpNode = F3(
	function (eid, f, root) {
		return A2(
			_user$project$Lang$mapExp,
			function (exp) {
				return _elm_lang$core$Native_Utils.eq(exp.val.eid, eid) ? f(exp) : exp;
			},
			root);
	});
var _user$project$Lang$replaceExpNode = F3(
	function (eid, newNode, root) {
		return A3(
			_user$project$Lang$mapExpNode,
			eid,
			_elm_lang$core$Basics$always(newNode),
			root);
	});
var _user$project$Lang$replaceExpNodePreservingPrecedingWhitespace = F3(
	function (eid, newNode, root) {
		return A3(
			_user$project$Lang$mapExpNode,
			eid,
			function (exp) {
				return A2(_user$project$Lang$copyPrecedingWhitespace, exp, newNode);
			},
			root);
	});
var _user$project$Lang$mapExpNodesMatching = F3(
	function (pred, f, root) {
		return A2(
			_user$project$Lang$mapExp,
			function (exp) {
				return pred(exp) ? f(exp) : exp;
			},
			root);
	});
var _user$project$Lang$applySubst = F2(
	function (subst, exp) {
		var replacer = function (e) {
			var e__ConstReplaced = function () {
				var e__ = e.val.e__;
				var _p264 = e__;
				if (_p264.ctor === 'EConst') {
					var _p266 = _p264._2;
					var locId = _user$project$Utils$fst3(_p266);
					var _p265 = A2(_elm_lang$core$Dict$get, locId, subst.lsubst);
					if (_p265.ctor === 'Just') {
						return A4(_user$project$Lang$EConst, _p264._0, _p265._0, _p266, _p264._3);
					} else {
						return e__;
					}
				} else {
					return e__;
				}
			}();
			var e__New = function () {
				var _p267 = A2(_elm_lang$core$Dict$get, e.val.eid, subst.esubst);
				if (_p267.ctor === 'Just') {
					return _p267._0;
				} else {
					return e__ConstReplaced;
				}
			}();
			return A2(_user$project$Lang$replaceE__, e, e__New);
		};
		return A2(_user$project$Lang$mapExp, replacer, exp);
	});
var _user$project$Lang$applyLocSubst = function (s) {
	return _user$project$Lang$applySubst(
		{lsubst: s, esubst: _elm_lang$core$Dict$empty});
};
var _user$project$Lang$applyESubst = function (s) {
	return _user$project$Lang$applySubst(
		{lsubst: _elm_lang$core$Dict$empty, esubst: s});
};
var _user$project$Lang$replaceExpNodeE__ByEId = F3(
	function (eid, newE__, root) {
		var esubst = A2(_elm_lang$core$Dict$singleton, eid, newE__);
		return A2(_user$project$Lang$applyESubst, esubst, root);
	});
var _user$project$Lang$replaceExpNodeE__ = F3(
	function (oldNode, newE__, root) {
		return A3(_user$project$Lang$replaceExpNodeE__ByEId, oldNode.val.eid, newE__, root);
	});
var _user$project$Lang$applyESubstPreservingPrecedingWhitespace = F2(
	function (esubst, exp) {
		var replacer = function (e) {
			var _p268 = A2(_elm_lang$core$Dict$get, e.val.eid, esubst);
			if (_p268.ctor === 'Just') {
				return A2(_user$project$Lang$replaceE__PreservingPrecedingWhitespace, e, _p268._0);
			} else {
				return e;
			}
		};
		return A2(_user$project$Lang$mapExp, replacer, exp);
	});
var _user$project$Lang$applyIndentationDelta = F2(
	function (delta, exp) {
		var processWS = function (ws) {
			return A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$AtMost(1),
				_elm_lang$core$Regex$regex('\n[ \t]*$'),
				function (match) {
					var priorSpacesCount = _elm_lang$core$String$length(
						_user$project$Lang$tabsToSpaces(
							A2(_elm_lang$core$String$dropLeft, 1, match.match)));
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'\n',
						A2(_elm_lang$core$String$repeat, priorSpacesCount + delta, ' '));
				},
				ws);
		};
		return A2(
			_user$project$Lang$mapExp,
			_user$project$Lang$mapPrecedingWhitespace(processWS),
			exp);
	});
var _user$project$Lang$copyIndentationChange = F3(
	function (exp1, exp2, exp) {
		var delta = _elm_lang$core$String$length(
			_user$project$Lang$tabsToSpaces(
				_user$project$Lang$indentationOf(exp2))) - _elm_lang$core$String$length(
			_user$project$Lang$tabsToSpaces(
				_user$project$Lang$indentationOf(exp1)));
		return A2(_user$project$Lang$applyIndentationDelta, delta, exp);
	});
var _user$project$Lang$unindent = function (exp) {
	var expWsAsSpaces = A2(
		_user$project$Lang$mapExp,
		_user$project$Lang$mapExpWhitespaces(_user$project$Lang$tabsToSpaces),
		exp);
	var smallestIndentation = A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		_elm_lang$core$List$minimum(
			A2(
				_elm_lang$core$List$filterMap,
				function (ws) {
					var _p269 = _elm_lang$core$List$concat(
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.submatches;
							},
							A3(
								_elm_lang$core$Regex$find,
								_elm_lang$core$Regex$All,
								_elm_lang$core$Regex$regex('\n( *)$'),
								ws)));
					if (((_p269.ctor === '::') && (_p269._0.ctor === 'Just')) && (_p269._1.ctor === '[]')) {
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$String$length(_p269._0._0));
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				},
				_user$project$Lang$allWhitespaces(expWsAsSpaces))));
	var removeIndentation = function (ws) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\n',
					A2(_elm_lang$core$String$repeat, smallestIndentation, ' '))),
			function (_p270) {
				return '\n';
			},
			ws);
	};
	return A2(
		_user$project$Lang$mapExp,
		_user$project$Lang$mapExpWhitespaces(removeIndentation),
		expWsAsSpaces);
};
var _user$project$Lang$indent = F2(
	function (spaces, e) {
		return A2(
			_user$project$Lang$mapExp,
			_user$project$Lang$mapExpWhitespaces(
				_user$project$Lang$indentWs(spaces)),
			e);
	});
var _user$project$Lang$replaceIndentation = F2(
	function (spaces, exp) {
		return A2(
			_user$project$Lang$indent,
			spaces,
			_user$project$Lang$unindent(exp));
	});
var _user$project$Lang$ensureWhitespaceSmartExp = F3(
	function (newlineCountIfMultiline, indentationIfMultiline, exp) {
		return (_user$project$Lang$isLet(exp) || _user$project$Lang$expHasNewlines(exp)) ? A2(
			_user$project$Lang$replaceIndentation,
			indentationIfMultiline,
			A2(_user$project$Lang$ensureWhitespaceNNewlinesExp, newlineCountIfMultiline, exp)) : _user$project$Lang$ensureWhitespaceExp(exp);
	});
var _user$project$Lang$pushRight = F2(
	function (spaces, e) {
		return A2(
			_user$project$Lang$replacePrecedingWhitespace,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Lang$precedingWhitespace(e),
				spaces),
			A2(_user$project$Lang$indent, spaces, e));
	});
var _user$project$Lang$mapFoldExpTopDown = F3(
	function (f, initAcc, e) {
		var _p271 = A2(f, e, initAcc);
		var newE = _p271._0;
		var newAcc = _p271._1;
		var ret = F2(
			function (e__, acc) {
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Lang$replaceE__, newE, e__),
					_1: acc
				};
			});
		var recurse = F2(
			function (acc, child) {
				return A3(_user$project$Lang$mapFoldExpTopDown, f, acc, child);
			});
		var recurseAll = F2(
			function (acc, exps) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (exp, _p272) {
							var _p273 = _p272;
							var _p274 = A2(recurse, _p273._1, exp);
							var newExp = _p274._0;
							var newAcc = _p274._1;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p273._0,
									{
										ctor: '::',
										_0: newExp,
										_1: {ctor: '[]'}
									}),
								_1: newAcc
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: acc
					},
					exps);
			});
		var _p275 = newE.val.e__;
		switch (_p275.ctor) {
			case 'EConst':
				return {ctor: '_Tuple2', _0: newE, _1: newAcc};
			case 'EBase':
				return {ctor: '_Tuple2', _0: newE, _1: newAcc};
			case 'EVar':
				return {ctor: '_Tuple2', _0: newE, _1: newAcc};
			case 'EFun':
				var _p276 = A2(recurse, newAcc, _p275._2);
				var newE1 = _p276._0;
				var newAcc2 = _p276._1;
				return A2(
					ret,
					A4(_user$project$Lang$EFun, _p275._0, _p275._1, newE1, _p275._3),
					newAcc2);
			case 'EApp':
				var _p277 = A2(recurse, newAcc, _p275._1);
				var newE1 = _p277._0;
				var newAcc2 = _p277._1;
				var _p278 = A2(recurseAll, newAcc2, _p275._2);
				var newEs = _p278._0;
				var newAcc3 = _p278._1;
				return A2(
					ret,
					A5(_user$project$Lang$EApp, _p275._0, newE1, newEs, _p275._3, _p275._4),
					newAcc3);
			case 'EOp':
				var _p279 = A2(recurseAll, newAcc, _p275._2);
				var newEs = _p279._0;
				var newAcc2 = _p279._1;
				return A2(
					ret,
					A4(_user$project$Lang$EOp, _p275._0, _p275._1, newEs, _p275._3),
					newAcc2);
			case 'EList':
				if (_p275._3.ctor === 'Nothing') {
					var _p281 = _p275._1;
					var _p280 = A2(
						recurseAll,
						newAcc,
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p281));
					var newEs = _p280._0;
					var newAcc2 = _p280._1;
					return A2(
						ret,
						A5(
							_user$project$Lang$EList,
							_p275._0,
							A2(
								_user$project$Utils$zip,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p281),
								newEs),
							_p275._2,
							_elm_lang$core$Maybe$Nothing,
							_p275._4),
						newAcc2);
				} else {
					var _p284 = _p275._1;
					var _p282 = A2(
						recurseAll,
						newAcc,
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p284));
					var newEs = _p282._0;
					var newAcc2 = _p282._1;
					var _p283 = A2(recurse, newAcc2, _p275._3._0);
					var newE1 = _p283._0;
					var newAcc3 = _p283._1;
					return A2(
						ret,
						A5(
							_user$project$Lang$EList,
							_p275._0,
							A2(
								_user$project$Utils$zip,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p284),
								newEs),
							_p275._2,
							_elm_lang$core$Maybe$Just(newE1),
							_p275._4),
						newAcc3);
				}
			case 'EIf':
				var _p285 = A2(
					recurseAll,
					newAcc,
					{
						ctor: '::',
						_0: _p275._1,
						_1: {
							ctor: '::',
							_0: _p275._3,
							_1: {
								ctor: '::',
								_0: _p275._5,
								_1: {ctor: '[]'}
							}
						}
					});
				if (((((_p285.ctor === '_Tuple2') && (_p285._0.ctor === '::')) && (_p285._0._1.ctor === '::')) && (_p285._0._1._1.ctor === '::')) && (_p285._0._1._1._1.ctor === '[]')) {
					return A2(
						ret,
						A7(_user$project$Lang$EIf, _p275._0, _p285._0._0, _p275._2, _p285._0._1._0, _p275._4, _p285._0._1._1._0, _p275._6),
						_p285._1);
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Lang',
						{
							start: {line: 776, column: 7},
							end: {line: 778, column: 117}
						},
						_p285)('I\'ll buy you a beer if this line of code executes. - Brian');
				}
			case 'ECase':
				var _p287 = A2(recurse, newAcc, _p275._1);
				var newE1 = _p287._0;
				var newAcc2 = _p287._1;
				var _p288 = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (branch, _p289) {
							var _p290 = _p289;
							var _p291 = branch.val;
							var bws1 = _p291._0;
							var p = _p291._1;
							var ei = _p291._2;
							var bws2 = _p291._3;
							var _p292 = A2(recurse, _p290._1, ei);
							var newEi = _p292._0;
							var newAcc3 = _p292._1;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p290._0,
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											branch,
											{
												val: A4(_user$project$Lang$Branch_, bws1, p, newEi, bws2)
											}),
										_1: {ctor: '[]'}
									}),
								_1: newAcc3
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: newAcc2
					},
					_p275._2);
				var newBranches = _p288._0;
				var newAcc3 = _p288._1;
				return A2(
					ret,
					A4(_user$project$Lang$ECase, _p275._0, newE1, newBranches, _p275._3),
					newAcc3);
			case 'ETypeCase':
				var _p293 = A2(recurse, newAcc, _p275._1);
				var newE1 = _p293._0;
				var newAcc2 = _p293._1;
				var _p294 = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (tbranch, _p295) {
							var _p296 = _p295;
							var _p297 = tbranch.val;
							var bws1 = _p297._0;
							var t = _p297._1;
							var ei = _p297._2;
							var bws2 = _p297._3;
							var _p298 = A2(recurse, _p296._1, ei);
							var newEi = _p298._0;
							var newAcc3 = _p298._1;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p296._0,
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											tbranch,
											{
												val: A4(_user$project$Lang$TBranch_, bws1, t, newEi, bws2)
											}),
										_1: {ctor: '[]'}
									}),
								_1: newAcc3
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: newAcc2
					},
					_p275._2);
				var newBranches = _p294._0;
				var newAcc3 = _p294._1;
				return A2(
					ret,
					A4(_user$project$Lang$ETypeCase, _p275._0, newE1, newBranches, _p275._3),
					newAcc3);
			case 'EComment':
				var _p299 = A2(recurse, newAcc, _p275._2);
				var newE1 = _p299._0;
				var newAcc2 = _p299._1;
				return A2(
					ret,
					A3(_user$project$Lang$EComment, _p275._0, _p275._1, newE1),
					newAcc2);
			case 'EOption':
				var _p300 = A2(recurse, newAcc, _p275._4);
				var newE1 = _p300._0;
				var newAcc2 = _p300._1;
				return A2(
					ret,
					A5(_user$project$Lang$EOption, _p275._0, _p275._1, _p275._2, _p275._3, newE1),
					newAcc2);
			case 'ELet':
				var _p301 = A2(recurse, newAcc, _p275._5);
				var newE1 = _p301._0;
				var newAcc2 = _p301._1;
				var _p302 = A2(recurse, newAcc2, _p275._7);
				var newE2 = _p302._0;
				var newAcc3 = _p302._1;
				return A2(
					ret,
					A9(_user$project$Lang$ELet, _p275._0, _p275._1, _p275._2, _p275._3, _p275._4, newE1, _p275._6, newE2, _p275._8),
					newAcc3);
			case 'ETyp':
				var _p303 = A2(recurse, newAcc, _p275._3);
				var newE1 = _p303._0;
				var newAcc2 = _p303._1;
				return A2(
					ret,
					A5(_user$project$Lang$ETyp, _p275._0, _p275._1, _p275._2, newE1, _p275._4),
					newAcc2);
			case 'EColonType':
				var _p304 = A2(recurse, newAcc, _p275._1);
				var newE1 = _p304._0;
				var newAcc2 = _p304._1;
				return A2(
					ret,
					A5(_user$project$Lang$EColonType, _p275._0, newE1, _p275._2, _p275._3, _p275._4),
					newAcc2);
			case 'ETypeAlias':
				var _p305 = A2(recurse, newAcc, _p275._3);
				var newE1 = _p305._0;
				var newAcc2 = _p305._1;
				return A2(
					ret,
					A5(_user$project$Lang$ETypeAlias, _p275._0, _p275._1, _p275._2, newE1, _p275._4),
					newAcc2);
			case 'EParens':
				var _p306 = A2(recurse, newAcc, _p275._1);
				var newE = _p306._0;
				var newAcc2 = _p306._1;
				return A2(
					ret,
					A4(_user$project$Lang$EParens, _p275._0, newE, _p275._2, _p275._3),
					newAcc2);
			default:
				if (_p275._1.ctor === 'HolePBE') {
					var _p312 = _p275._1._0;
					var _p307 = A2(
						recurseAll,
						newAcc,
						A2(
							_elm_lang$core$List$map,
							function (_p308) {
								var _p309 = _p308;
								return _p309._3;
							},
							_p312));
					var newExampleExps = _p307._0;
					var newAcc2 = _p307._1;
					var newExamples = A3(
						_elm_lang$core$List$map2,
						F2(
							function (_p310, e) {
								var _p311 = _p310;
								return {ctor: '_Tuple4', _0: _p311._0, _1: _p311._1, _2: _p311._2, _3: e};
							}),
						_p312,
						newExampleExps);
					return A2(
						ret,
						A2(
							_user$project$Lang$EHole,
							_p275._0,
							A2(_user$project$Lang$HolePBE, newExamples, _p275._1._1)),
						newAcc2);
				} else {
					return {ctor: '_Tuple2', _0: newE, _1: newAcc};
				}
		}
	});
var _user$project$Lang$mapExpTopDown = F2(
	function (f, e) {
		var _p313 = A3(
			_user$project$Lang$mapFoldExpTopDown,
			F2(
				function (exp, _p314) {
					return {
						ctor: '_Tuple2',
						_0: f(exp),
						_1: {ctor: '_Tuple0'}
					};
				}),
			{ctor: '_Tuple0'},
			e);
		var newExp = _p313._0;
		return newExp;
	});
var _user$project$Lang$replaceExpNodes = F2(
	function (eidToNewNode, root) {
		return A2(
			_user$project$Lang$mapExpTopDown,
			function (exp) {
				var _p315 = A2(_elm_lang$core$Dict$get, exp.val.eid, eidToNewNode);
				if (_p315.ctor === 'Just') {
					return _p315._0;
				} else {
					return exp;
				}
			},
			root);
	});
var _user$project$Lang$replaceExpNodesPreservingPrecedingWhitespace = F2(
	function (eidToNewNode, root) {
		return A2(
			_user$project$Lang$mapExpTopDown,
			function (exp) {
				var _p316 = A2(_elm_lang$core$Dict$get, exp.val.eid, eidToNewNode);
				if (_p316.ctor === 'Just') {
					return A2(_user$project$Lang$copyPrecedingWhitespace, exp, _p316._0);
				} else {
					return exp;
				}
			},
			root);
	});
var _user$project$Lang$mapFoldExpTopDownWithScope = F7(
	function (f, handleELet, handleEFun, handleCaseBranch, initGlobalAcc, initScopeTempAcc, e) {
		var _p317 = A3(f, e, initGlobalAcc, initScopeTempAcc);
		var newE = _p317._0;
		var newGlobalAcc = _p317._1;
		var ret = F2(
			function (e__, globalAcc) {
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Lang$replaceE__, newE, e__),
					_1: globalAcc
				};
			});
		var recurse = F3(
			function (globalAcc, scopeTempAcc, child) {
				return A7(_user$project$Lang$mapFoldExpTopDownWithScope, f, handleELet, handleEFun, handleCaseBranch, globalAcc, scopeTempAcc, child);
			});
		var recurseAll = F3(
			function (globalAcc, scopeTempAcc, exps) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (exp, _p318) {
							var _p319 = _p318;
							var _p320 = A3(recurse, _p319._1, scopeTempAcc, exp);
							var newExp = _p320._0;
							var newGlobalAcc = _p320._1;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p319._0,
									{
										ctor: '::',
										_0: newExp,
										_1: {ctor: '[]'}
									}),
								_1: newGlobalAcc
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: globalAcc
					},
					exps);
			});
		var _p321 = newE.val.e__;
		switch (_p321.ctor) {
			case 'EConst':
				return {ctor: '_Tuple2', _0: newE, _1: newGlobalAcc};
			case 'EBase':
				return {ctor: '_Tuple2', _0: newE, _1: newGlobalAcc};
			case 'EVar':
				return {ctor: '_Tuple2', _0: newE, _1: newGlobalAcc};
			case 'EFun':
				var newScopeTempAcc = A2(handleEFun, newE, initScopeTempAcc);
				var _p322 = A3(recurse, newGlobalAcc, newScopeTempAcc, _p321._2);
				var newE1 = _p322._0;
				var newGlobalAcc2 = _p322._1;
				return A2(
					ret,
					A4(_user$project$Lang$EFun, _p321._0, _p321._1, newE1, _p321._3),
					newGlobalAcc2);
			case 'EApp':
				var _p323 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._1);
				var newE1 = _p323._0;
				var newGlobalAcc2 = _p323._1;
				var _p324 = A3(recurseAll, newGlobalAcc2, initScopeTempAcc, _p321._2);
				var newEs = _p324._0;
				var newGlobalAcc3 = _p324._1;
				return A2(
					ret,
					A5(_user$project$Lang$EApp, _p321._0, newE1, newEs, _p321._3, _p321._4),
					newGlobalAcc3);
			case 'EOp':
				var _p325 = A3(recurseAll, newGlobalAcc, initScopeTempAcc, _p321._2);
				var newEs = _p325._0;
				var newGlobalAcc2 = _p325._1;
				return A2(
					ret,
					A4(_user$project$Lang$EOp, _p321._0, _p321._1, newEs, _p321._3),
					newGlobalAcc2);
			case 'EList':
				if (_p321._3.ctor === 'Nothing') {
					var _p327 = _p321._1;
					var _p326 = A3(
						recurseAll,
						newGlobalAcc,
						initScopeTempAcc,
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p327));
					var newEs = _p326._0;
					var newGlobalAcc2 = _p326._1;
					return A2(
						ret,
						A5(
							_user$project$Lang$EList,
							_p321._0,
							A2(
								_user$project$Utils$zip,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p327),
								newEs),
							_p321._2,
							_elm_lang$core$Maybe$Nothing,
							_p321._4),
						newGlobalAcc2);
				} else {
					var _p330 = _p321._1;
					var _p328 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._3._0);
					var newE1 = _p328._0;
					var newGlobalAcc2 = _p328._1;
					var _p329 = A3(
						recurseAll,
						newGlobalAcc2,
						initScopeTempAcc,
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p330));
					var newEs = _p329._0;
					var newGlobalAcc3 = _p329._1;
					return A2(
						ret,
						A5(
							_user$project$Lang$EList,
							_p321._0,
							A2(
								_user$project$Utils$zip,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p330),
								newEs),
							_p321._2,
							_elm_lang$core$Maybe$Just(newE1),
							_p321._4),
						newGlobalAcc3);
				}
			case 'EIf':
				var _p331 = A3(
					recurseAll,
					newGlobalAcc,
					initScopeTempAcc,
					{
						ctor: '::',
						_0: _p321._1,
						_1: {
							ctor: '::',
							_0: _p321._3,
							_1: {
								ctor: '::',
								_0: _p321._5,
								_1: {ctor: '[]'}
							}
						}
					});
				if (((((_p331.ctor === '_Tuple2') && (_p331._0.ctor === '::')) && (_p331._0._1.ctor === '::')) && (_p331._0._1._1.ctor === '::')) && (_p331._0._1._1._1.ctor === '[]')) {
					return A2(
						ret,
						A7(_user$project$Lang$EIf, _p321._0, _p331._0._0, _p321._2, _p331._0._1._0, _p321._4, _p331._0._1._1._0, _p321._6),
						_p331._1);
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Lang',
						{
							start: {line: 945, column: 7},
							end: {line: 947, column: 123}
						},
						_p331)('I\'ll buy you a beer if this line of code executes. - Brian');
				}
			case 'ECase':
				var _p333 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._1);
				var newE1 = _p333._0;
				var newGlobalAcc2 = _p333._1;
				var _p334 = A3(
					_user$project$Utils$foldli1,
					F2(
						function (_p336, _p335) {
							var _p337 = _p336;
							var _p341 = _p337._1;
							var _p338 = _p335;
							var newScopeTempAcc = A4(handleCaseBranch, newE, _p341, _p337._0, initScopeTempAcc);
							var _p339 = _p341.val;
							var bws1 = _p339._0;
							var p = _p339._1;
							var ei = _p339._2;
							var bws2 = _p339._3;
							var _p340 = A3(recurse, _p338._1, newScopeTempAcc, ei);
							var newEi = _p340._0;
							var newGlobalAcc3 = _p340._1;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p338._0,
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											_p341,
											{
												val: A4(_user$project$Lang$Branch_, bws1, p, newEi, bws2)
											}),
										_1: {ctor: '[]'}
									}),
								_1: newGlobalAcc3
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: newGlobalAcc2
					},
					_p321._2);
				var newBranches = _p334._0;
				var newGlobalAcc3 = _p334._1;
				return A2(
					ret,
					A4(_user$project$Lang$ECase, _p321._0, newE1, newBranches, _p321._3),
					newGlobalAcc3);
			case 'ETypeCase':
				var _p342 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._1);
				var newE1 = _p342._0;
				var newGlobalAcc2 = _p342._1;
				var _p343 = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (tbranch, _p344) {
							var _p345 = _p344;
							var _p346 = tbranch.val;
							var bws1 = _p346._0;
							var t = _p346._1;
							var ei = _p346._2;
							var bws2 = _p346._3;
							var _p347 = A3(recurse, _p345._1, initScopeTempAcc, ei);
							var newEi = _p347._0;
							var newGlobalAcc3 = _p347._1;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p345._0,
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											tbranch,
											{
												val: A4(_user$project$Lang$TBranch_, bws1, t, newEi, bws2)
											}),
										_1: {ctor: '[]'}
									}),
								_1: newGlobalAcc3
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: newGlobalAcc2
					},
					_p321._2);
				var newBranches = _p343._0;
				var newGlobalAcc3 = _p343._1;
				return A2(
					ret,
					A4(_user$project$Lang$ETypeCase, _p321._0, newE1, newBranches, _p321._3),
					newGlobalAcc3);
			case 'EComment':
				var _p348 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._2);
				var newE1 = _p348._0;
				var newGlobalAcc2 = _p348._1;
				return A2(
					ret,
					A3(_user$project$Lang$EComment, _p321._0, _p321._1, newE1),
					newGlobalAcc2);
			case 'EOption':
				var _p349 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._4);
				var newE1 = _p349._0;
				var newGlobalAcc2 = _p349._1;
				return A2(
					ret,
					A5(_user$project$Lang$EOption, _p321._0, _p321._1, _p321._2, _p321._3, newE1),
					newGlobalAcc2);
			case 'ELet':
				var _p353 = _p321._2;
				var _p352 = _p321._5;
				var newScopeTempAcc = A2(handleELet, newE, initScopeTempAcc);
				var _p350 = _p353 ? A3(recurse, newGlobalAcc, newScopeTempAcc, _p352) : A3(recurse, newGlobalAcc, initScopeTempAcc, _p352);
				var newE1 = _p350._0;
				var newGlobalAcc2 = _p350._1;
				var _p351 = A3(recurse, newGlobalAcc2, newScopeTempAcc, _p321._7);
				var newE2 = _p351._0;
				var newGlobalAcc3 = _p351._1;
				return A2(
					ret,
					A9(_user$project$Lang$ELet, _p321._0, _p321._1, _p353, _p321._3, _p321._4, newE1, _p321._6, newE2, _p321._8),
					newGlobalAcc3);
			case 'ETyp':
				var _p354 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._3);
				var newE1 = _p354._0;
				var newGlobalAcc2 = _p354._1;
				return A2(
					ret,
					A5(_user$project$Lang$ETyp, _p321._0, _p321._1, _p321._2, newE1, _p321._4),
					newGlobalAcc2);
			case 'EColonType':
				var _p355 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._1);
				var newE1 = _p355._0;
				var newGlobalAcc2 = _p355._1;
				return A2(
					ret,
					A5(_user$project$Lang$EColonType, _p321._0, newE1, _p321._2, _p321._3, _p321._4),
					newGlobalAcc2);
			case 'ETypeAlias':
				var _p356 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._3);
				var newE1 = _p356._0;
				var newGlobalAcc2 = _p356._1;
				return A2(
					ret,
					A5(_user$project$Lang$ETypeAlias, _p321._0, _p321._1, _p321._2, newE1, _p321._4),
					newGlobalAcc2);
			case 'EParens':
				var _p357 = A3(recurse, newGlobalAcc, initScopeTempAcc, _p321._1);
				var newE = _p357._0;
				var newGlobalAcc2 = _p357._1;
				return A2(
					ret,
					A4(_user$project$Lang$EParens, _p321._0, newE, _p321._2, _p321._3),
					newGlobalAcc2);
			default:
				if (_p321._1.ctor === 'HolePBE') {
					var _p363 = _p321._1._0;
					var _p358 = A3(
						recurseAll,
						newGlobalAcc,
						initScopeTempAcc,
						A2(
							_elm_lang$core$List$map,
							function (_p359) {
								var _p360 = _p359;
								return _p360._3;
							},
							_p363));
					var newExampleExps = _p358._0;
					var newGlobalAcc2 = _p358._1;
					var newExamples = A3(
						_elm_lang$core$List$map2,
						F2(
							function (_p361, e) {
								var _p362 = _p361;
								return {ctor: '_Tuple4', _0: _p362._0, _1: _p362._1, _2: _p362._2, _3: e};
							}),
						_p363,
						newExampleExps);
					return A2(
						ret,
						A2(
							_user$project$Lang$EHole,
							_p321._0,
							A2(_user$project$Lang$HolePBE, newExamples, _p321._1._1)),
						newGlobalAcc2);
				} else {
					return {ctor: '_Tuple2', _0: newE, _1: newGlobalAcc};
				}
		}
	});
var _user$project$Lang$foldExpTopDownWithScope = F7(
	function (f, handleELet, handleEFun, handleCaseBranch, initGlobalAcc, initScopeTempAcc, e) {
		var _p364 = A7(
			_user$project$Lang$mapFoldExpTopDownWithScope,
			F3(
				function (e, globalAcc, scopeTempAcc) {
					return {
						ctor: '_Tuple2',
						_0: e,
						_1: A3(f, e, globalAcc, scopeTempAcc)
					};
				}),
			handleELet,
			handleEFun,
			handleCaseBranch,
			initGlobalAcc,
			initScopeTempAcc,
			e);
		var finalGlobalAcc = _p364._1;
		return finalGlobalAcc;
	});
var _user$project$Lang$replaceTBranchExp = F2(
	function (tbranch, exp) {
		var _p365 = tbranch.val;
		var tbws1 = _p365._0;
		var tipe = _p365._1;
		var tbws2 = _p365._3;
		return _elm_lang$core$Native_Utils.update(
			tbranch,
			{
				val: A4(_user$project$Lang$TBranch_, tbws1, tipe, exp, tbws2)
			});
	});
var _user$project$Lang$Def = {ctor: 'Def'};
var _user$project$Lang$Let = {ctor: 'Let'};
var _user$project$Lang$NoWidgetDecl = {ctor: 'NoWidgetDecl'};
var _user$project$Lang$noWidgetDecl = _user$project$Lang$withDummyRange(_user$project$Lang$NoWidgetDecl);
var _user$project$Lang$eConst0 = F2(
	function (a, b) {
		return _user$project$Lang$withDummyExpInfo(
			A4(_user$project$Lang$EConst, _user$project$Lang$space0, a, b, _user$project$Lang$noWidgetDecl));
	});
var _user$project$Lang$eConst = F2(
	function (a, b) {
		return _user$project$Lang$withDummyExpInfo(
			A4(_user$project$Lang$EConst, _user$project$Lang$space1, a, b, _user$project$Lang$noWidgetDecl));
	});
var _user$project$Lang$locIdToExpFromFrozenSubstAndNewNames = F2(
	function (locIdToFrozenNum, locIdToIdent) {
		return A6(
			_elm_lang$core$Dict$merge,
			F3(
				function (locId, n, locIdToExp) {
					return A3(
						_elm_lang$core$Dict$insert,
						locId,
						A2(
							_user$project$Lang$eConst,
							n,
							_user$project$Lang$dummyLoc_(_user$project$Lang$frozen)),
						locIdToExp);
				}),
			F4(
				function (locId, n, ident, locIdToExp) {
					return A3(
						_elm_lang$core$Dict$insert,
						locId,
						_user$project$Lang$eVar(ident),
						locIdToExp);
				}),
			F3(
				function (locId, ident, locIdToExp) {
					return A3(
						_elm_lang$core$Dict$insert,
						locId,
						_user$project$Lang$eVar(ident),
						locIdToExp);
				}),
			locIdToFrozenNum,
			locIdToIdent,
			_elm_lang$core$Dict$empty);
	});
var _user$project$Lang$listOfNums = function (ns) {
	var _p366 = ns;
	if (_p366.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: A2(_user$project$Lang$eConst0, _p366._0, _user$project$Lang$dummyLoc),
			_1: A2(
				_elm_lang$core$List$map,
				A2(_elm_lang$core$Basics$flip, _user$project$Lang$eConst, _user$project$Lang$dummyLoc),
				_p366._1)
		};
	}
};
var _user$project$Lang$eConstDummyLoc0 = function (a) {
	return _user$project$Lang$withDummyExpInfo(
		A4(_user$project$Lang$EConst, _user$project$Lang$space0, a, _user$project$Lang$dummyLoc, _user$project$Lang$noWidgetDecl));
};
var _user$project$Lang$eInt0 = function (n) {
	return _user$project$Lang$eConstDummyLoc0(
		_elm_lang$core$Basics$toFloat(n));
};
var _user$project$Lang$eConstDummyLoc = function (a) {
	return _user$project$Lang$withDummyExpInfo(
		A4(_user$project$Lang$EConst, _user$project$Lang$space1, a, _user$project$Lang$dummyLoc, _user$project$Lang$noWidgetDecl));
};
var _user$project$Lang$eInt = function (n) {
	return _user$project$Lang$eConstDummyLoc(
		_elm_lang$core$Basics$toFloat(n));
};
var _user$project$Lang$eConstFrozen0 = function (a) {
	return _user$project$Lang$withDummyExpInfo(
		A4(_user$project$Lang$EConst, _user$project$Lang$space0, a, _user$project$Lang$dummyLocFrozen, _user$project$Lang$noWidgetDecl));
};
var _user$project$Lang$eConstFrozen = function (a) {
	return _user$project$Lang$withDummyExpInfo(
		A4(_user$project$Lang$EConst, _user$project$Lang$space1, a, _user$project$Lang$dummyLocFrozen, _user$project$Lang$noWidgetDecl));
};
var _user$project$Lang$pVar0 = function (a) {
	return _user$project$Lang$withDummyPatInfo(
		A3(_user$project$Lang$PVar, _user$project$Lang$space0, a, _user$project$Lang$noWidgetDecl));
};
var _user$project$Lang$pVar = function (a) {
	return _user$project$Lang$withDummyPatInfo(
		A3(_user$project$Lang$PVar, _user$project$Lang$space1, a, _user$project$Lang$noWidgetDecl));
};
var _user$project$Lang$listOfPVars = function (xs) {
	var _p367 = xs;
	if (_p367.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _user$project$Lang$pVar0(_p367._0),
			_1: A2(_elm_lang$core$List$map, _user$project$Lang$pVar, _p367._1)
		};
	}
};
var _user$project$Lang$pListOfPVars = function (names) {
	return _user$project$Lang$pList(
		_user$project$Lang$listOfPVars(names));
};
var _user$project$Lang$patBoundExpOf = function (namesAndAssigns) {
	var _p368 = _elm_lang$core$List$unzip(namesAndAssigns);
	if ((((_p368._0.ctor === '::') && (_p368._0._1.ctor === '[]')) && (_p368._1.ctor === '::')) && (_p368._1._1.ctor === '[]')) {
		return {
			ctor: '_Tuple2',
			_0: _user$project$Lang$pVar(_p368._0._0),
			_1: A2(_user$project$Lang$replacePrecedingWhitespace, ' ', _p368._1._0)
		};
	} else {
		return {
			ctor: '_Tuple2',
			_0: _user$project$Lang$pListOfPVars(_p368._0),
			_1: A2(
				_user$project$Lang$eList,
				A3(_user$project$Lang$setExpListWhitespace, '', ' ', _p368._1),
				_elm_lang$core$Maybe$Nothing)
		};
	}
};
var _user$project$Lang$eLetOrDef = F3(
	function (letKind, namesAndAssigns, bodyExp) {
		var _p369 = _user$project$Lang$patBoundExpOf(namesAndAssigns);
		var pat = _p369._0;
		var assign = _p369._1;
		return _user$project$Lang$withDummyExpInfo(
			A9(_user$project$Lang$ELet, _user$project$Lang$newline1, letKind, false, pat, _user$project$Lang$space1, assign, _user$project$Lang$space1, bodyExp, _user$project$Lang$space0));
	});
var _user$project$Lang$eLet = _user$project$Lang$eLetOrDef(_user$project$Lang$Let);
var _user$project$Lang$eLets = F2(
	function (xes, eBody) {
		var _p370 = xes;
		if (_p370.ctor === '::') {
			return A2(
				_user$project$Lang$eLet,
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p370._0._0, _1: _p370._0._1},
					_1: {ctor: '[]'}
				},
				A2(_user$project$Lang$eLets, _p370._1, eBody));
		} else {
			return eBody;
		}
	});
var _user$project$Lang$eDef = _user$project$Lang$eLetOrDef(_user$project$Lang$Def);
var _user$project$Lang$NumSlider = F5(
	function (a, b, c, d, e) {
		return {ctor: 'NumSlider', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$numSlider = _user$project$Lang$rangeSlider(_user$project$Lang$NumSlider);
var _user$project$Lang$IntSlider = F5(
	function (a, b, c, d, e) {
		return {ctor: 'IntSlider', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$intSlider = _user$project$Lang$rangeSlider(_user$project$Lang$IntSlider);
var _user$project$Lang$colorNumberSlider = A2(_user$project$Lang$intSlider, 0, 499);
var _user$project$Lang$Y = {ctor: 'Y'};
var _user$project$Lang$X = {ctor: 'X'};
var _user$project$Lang$Negative = {ctor: 'Negative'};
var _user$project$Lang$Positive = {ctor: 'Positive'};
var _user$project$Lang$WList = function (a) {
	return {ctor: 'WList', _0: a};
};
var _user$project$Lang$WCall = F5(
	function (a, b, c, d, e) {
		return {ctor: 'WCall', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$WOffset1D = F8(
	function (a, b, c, d, e, f, g, h) {
		return {ctor: 'WOffset1D', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g, _7: h};
	});
var _user$project$Lang$WPoint = F5(
	function (a, b, c, d, e) {
		return {ctor: 'WPoint', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Lang$WNumSlider = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'WNumSlider', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _user$project$Lang$WIntSlider = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'WIntSlider', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _user$project$Lang$Parents = function (a) {
	return {ctor: 'Parents', _0: a};
};
var _user$project$Lang$VDict = function (a) {
	return {ctor: 'VDict', _0: a};
};
var _user$project$Lang$VList = function (a) {
	return {ctor: 'VList', _0: a};
};
var _user$project$Lang$mapVal = F2(
	function (f, v) {
		var _p371 = v.v_;
		switch (_p371.ctor) {
			case 'VList':
				return f(
					_elm_lang$core$Native_Utils.update(
						v,
						{
							v_: _user$project$Lang$VList(
								A2(
									_elm_lang$core$List$map,
									_user$project$Lang$mapVal(f),
									_p371._0))
						}));
			case 'VDict':
				return f(
					_elm_lang$core$Native_Utils.update(
						v,
						{
							v_: _user$project$Lang$VDict(
								A2(
									_elm_lang$core$Dict$map,
									F2(
										function (_p372, v) {
											return A2(_user$project$Lang$mapVal, f, v);
										}),
									_p371._0))
						}));
			case 'VConst':
				return f(v);
			case 'VBase':
				return f(v);
			default:
				return f(v);
		}
	});
var _user$project$Lang$VClosure = F4(
	function (a, b, c, d) {
		return {ctor: 'VClosure', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$VBase = function (a) {
	return {ctor: 'VBase', _0: a};
};
var _user$project$Lang$VConst = F2(
	function (a, b) {
		return {ctor: 'VConst', _0: a, _1: b};
	});
var _user$project$Lang$VNull = {ctor: 'VNull'};
var _user$project$Lang$VString = function (a) {
	return {ctor: 'VString', _0: a};
};
var _user$project$Lang$VBool = function (a) {
	return {ctor: 'VBool', _0: a};
};
var _user$project$Lang$ENull = {ctor: 'ENull'};
var _user$project$Lang$eNull = _user$project$Lang$withDummyExpInfo(
	A2(_user$project$Lang$EBase, _user$project$Lang$space1, _user$project$Lang$ENull));
var _user$project$Lang$EString = F2(
	function (a, b) {
		return {ctor: 'EString', _0: a, _1: b};
	});
var _user$project$Lang$eStr = function (_p373) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EBase,
			_user$project$Lang$space1,
			A2(_user$project$Lang$EString, _user$project$Lang$defaultQuoteChar, _p373)));
};
var _user$project$Lang$eStr0 = function (_p374) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EBase,
			_user$project$Lang$space0,
			A2(_user$project$Lang$EString, _user$project$Lang$defaultQuoteChar, _p374)));
};
var _user$project$Lang$EBool = function (a) {
	return {ctor: 'EBool', _0: a};
};
var _user$project$Lang$eBool = function (_p375) {
	return _user$project$Lang$withDummyExpInfo(
		A2(
			_user$project$Lang$EBase,
			_user$project$Lang$space1,
			_user$project$Lang$EBool(_p375)));
};
var _user$project$Lang$eTrue = _user$project$Lang$eBool(true);
var _user$project$Lang$eFalse = _user$project$Lang$eBool(false);
var _user$project$Lang$Provenance = F2(
	function (a, b) {
		return {ctor: 'Provenance', _0: a, _1: b};
	});
var _user$project$Lang$dummyProvenance = A2(
	_user$project$Lang$Provenance,
	_user$project$Lang$eTuple0(
		{ctor: '[]'}),
	{ctor: '[]'});
var _user$project$Lang$After = {ctor: 'After'};
var _user$project$Lang$Before = {ctor: 'Before'};
var _user$project$Lang$PatTargetPosition = function (a) {
	return {ctor: 'PatTargetPosition', _0: a};
};
var _user$project$Lang$ExpTargetPosition = function (a) {
	return {ctor: 'ExpTargetPosition', _0: a};
};
var _user$project$Lang$TT = F3(
	function (a, b, c) {
		return {ctor: 'TT', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$PT = F4(
	function (a, b, c, d) {
		return {ctor: 'PT', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Lang$ET = F3(
	function (a, b, c) {
		return {ctor: 'ET', _0: a, _1: b, _2: c};
	});
var _user$project$Lang$LBE = function (a) {
	return {ctor: 'LBE', _0: a};
};
var _user$project$Lang$T = function (a) {
	return {ctor: 'T', _0: a};
};
var _user$project$Lang$P = F2(
	function (a, b) {
		return {ctor: 'P', _0: a, _1: b};
	});
var _user$project$Lang$wsBefore = function (codeObject) {
	wsBefore:
	while (true) {
		var _p376 = codeObject;
		switch (_p376.ctor) {
			case 'E':
				return _user$project$Lang$precedingWhitespaceWithInfoExp__(_p376._0.val.e__);
			case 'P':
				var _p377 = _p376._1.val.p__;
				switch (_p377.ctor) {
					case 'PVar':
						return _p377._0;
					case 'PConst':
						return _p377._0;
					case 'PBase':
						return _p377._0;
					case 'PWildcard':
						return _p377._0;
					case 'PList':
						return _p377._0;
					case 'PAs':
						var _v164 = A2(_user$project$Lang$P, _p376._0, _p377._3);
						codeObject = _v164;
						continue wsBefore;
					default:
						return _p377._0;
				}
			case 'T':
				var _p378 = _p376._0.val.t__;
				switch (_p378.ctor) {
					case 'TNum':
						return _p378._0;
					case 'TBool':
						return _p378._0;
					case 'TString':
						return _p378._0;
					case 'TNull':
						return _p378._0;
					case 'TList':
						return _p378._0;
					case 'TDict':
						return _p378._0;
					case 'TTuple':
						return _p378._0;
					case 'TArrow':
						return _p378._0;
					case 'TUnion':
						return _p378._0;
					case 'TNamed':
						return _p378._0;
					case 'TVar':
						return _p378._0;
					case 'TForall':
						return _p378._0;
					default:
						return _p378._0;
				}
			case 'LBE':
				var _p379 = _p376._0;
				return {start: _p379.start, end: _p379.end, val: ''};
			case 'ET':
				return _p376._1;
			case 'PT':
				return _p376._1;
			default:
				return _p376._1;
		}
	}
};
var _user$project$Lang$E = function (a) {
	return {ctor: 'E', _0: a};
};
var _user$project$Lang$modifyWsBefore = F2(
	function (f, codeObject) {
		var _p380 = codeObject;
		switch (_p380.ctor) {
			case 'E':
				var _p382 = _p380._0;
				var eVal = _p382.val;
				var newE__ = function () {
					var _p381 = eVal.e__;
					switch (_p381.ctor) {
						case 'EConst':
							return A4(
								_user$project$Lang$EConst,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3);
						case 'EBase':
							return A2(
								_user$project$Lang$EBase,
								f(_p381._0),
								_p381._1);
						case 'EVar':
							return A2(
								_user$project$Lang$EVar,
								f(_p381._0),
								_p381._1);
						case 'EFun':
							return A4(
								_user$project$Lang$EFun,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3);
						case 'EApp':
							return A5(
								_user$project$Lang$EApp,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3,
								_p381._4);
						case 'EOp':
							return A4(
								_user$project$Lang$EOp,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3);
						case 'EList':
							return A5(
								_user$project$Lang$EList,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3,
								_p381._4);
						case 'EIf':
							return A7(
								_user$project$Lang$EIf,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3,
								_p381._4,
								_p381._5,
								_p381._6);
						case 'ECase':
							return A4(
								_user$project$Lang$ECase,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3);
						case 'ETypeCase':
							return A4(
								_user$project$Lang$ETypeCase,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3);
						case 'ELet':
							return A9(
								_user$project$Lang$ELet,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3,
								_p381._4,
								_p381._5,
								_p381._6,
								_p381._7,
								_p381._8);
						case 'EComment':
							return A3(
								_user$project$Lang$EComment,
								f(_p381._0),
								_p381._1,
								_p381._2);
						case 'EOption':
							return A5(
								_user$project$Lang$EOption,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3,
								_p381._4);
						case 'ETyp':
							return A5(
								_user$project$Lang$ETyp,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3,
								_p381._4);
						case 'EColonType':
							return A5(
								_user$project$Lang$EColonType,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3,
								_p381._4);
						case 'ETypeAlias':
							return A5(
								_user$project$Lang$ETypeAlias,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3,
								_p381._4);
						case 'EParens':
							return A4(
								_user$project$Lang$EParens,
								f(_p381._0),
								_p381._1,
								_p381._2,
								_p381._3);
						default:
							return A2(
								_user$project$Lang$EHole,
								f(_p381._0),
								_p381._1);
					}
				}();
				return _user$project$Lang$E(
					_elm_lang$core$Native_Utils.update(
						_p382,
						{
							val: _elm_lang$core$Native_Utils.update(
								eVal,
								{e__: newE__})
						}));
			case 'P':
				var _p387 = _p380._1;
				var _p386 = _p380._0;
				var pVal = _p387.val;
				var newP__ = function () {
					var _p383 = pVal.p__;
					switch (_p383.ctor) {
						case 'PVar':
							return A3(
								_user$project$Lang$PVar,
								f(_p383._0),
								_p383._1,
								_p383._2);
						case 'PConst':
							return A2(
								_user$project$Lang$PConst,
								f(_p383._0),
								_p383._1);
						case 'PBase':
							return A2(
								_user$project$Lang$PBase,
								f(_p383._0),
								_p383._1);
						case 'PWildcard':
							return _user$project$Lang$PWildcard(
								f(_p383._0));
						case 'PList':
							return A5(
								_user$project$Lang$PList,
								f(_p383._0),
								_p383._1,
								_p383._2,
								_p383._3,
								_p383._4);
						case 'PAs':
							var _p384 = A2(
								_user$project$Lang$modifyWsBefore,
								f,
								A2(_user$project$Lang$P, _p386, _p383._3));
							if (_p384.ctor === 'P') {
								return A4(_user$project$Lang$PAs, _p383._0, _p383._1, _p383._2, _p384._1);
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'Lang',
									{
										start: {line: 2794, column: 15},
										end: {line: 2796, column: 121}
									},
									_p384)('Internal error: modifyWsBefore cannot return something else than P if provided with P');
							}
						default:
							return A3(
								_user$project$Lang$PParens,
								f(_p383._0),
								_p383._1,
								_p383._2);
					}
				}();
				return A2(
					_user$project$Lang$P,
					_p386,
					_elm_lang$core$Native_Utils.update(
						_p387,
						{
							val: _elm_lang$core$Native_Utils.update(
								pVal,
								{p__: newP__})
						}));
			case 'T':
				var _p389 = _p380._0;
				var newT__ = function () {
					var _p388 = _p389.val.t__;
					switch (_p388.ctor) {
						case 'TNum':
							return _user$project$Lang$TNum(
								f(_p388._0));
						case 'TBool':
							return _user$project$Lang$TBool(
								f(_p388._0));
						case 'TString':
							return _user$project$Lang$TString(
								f(_p388._0));
						case 'TNull':
							return _user$project$Lang$TNull(
								f(_p388._0));
						case 'TList':
							return A3(
								_user$project$Lang$TList,
								f(_p388._0),
								_p388._1,
								_p388._2);
						case 'TDict':
							return A4(
								_user$project$Lang$TDict,
								f(_p388._0),
								_p388._1,
								_p388._2,
								_p388._3);
						case 'TTuple':
							return A5(
								_user$project$Lang$TTuple,
								f(_p388._0),
								_p388._1,
								_p388._2,
								_p388._3,
								_p388._4);
						case 'TArrow':
							return A3(
								_user$project$Lang$TArrow,
								f(_p388._0),
								_p388._1,
								_p388._2);
						case 'TUnion':
							return A3(
								_user$project$Lang$TUnion,
								f(_p388._0),
								_p388._1,
								_p388._2);
						case 'TNamed':
							return A2(
								_user$project$Lang$TNamed,
								f(_p388._0),
								_p388._1);
						case 'TVar':
							return A2(
								_user$project$Lang$TVar,
								f(_p388._0),
								_p388._1);
						case 'TForall':
							return A4(
								_user$project$Lang$TForall,
								f(_p388._0),
								_p388._1,
								_p388._2,
								_p388._3);
						default:
							return _user$project$Lang$TWildcard(
								f(_p388._0));
					}
				}();
				return _user$project$Lang$T(
					A2(_user$project$Lang$replaceT__, _p389, newT__));
			case 'LBE':
				return _user$project$Lang$LBE(_p380._0);
			case 'ET':
				return A3(
					_user$project$Lang$ET,
					_p380._0,
					f(_p380._1),
					_p380._2);
			case 'PT':
				return A4(
					_user$project$Lang$PT,
					_p380._0,
					f(_p380._1),
					_p380._2,
					_p380._3);
			default:
				return A3(
					_user$project$Lang$TT,
					_p380._0,
					f(_p380._1),
					_p380._2);
		}
	});
var _user$project$Lang$childCodeObjects = function (co) {
	return A2(
		_elm_lang$core$List$filter,
		function (_p390) {
			return !_user$project$Lang$isHiddenCodeObject(_p390);
		},
		function () {
			var _p391 = co;
			switch (_p391.ctor) {
				case 'E':
					var _p437 = _p391._0;
					var _p392 = _p437.val.e__;
					switch (_p392.ctor) {
						case 'EConst':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {ctor: '[]'}
							};
						case 'EBase':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {ctor: '[]'}
							};
						case 'EVar':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {ctor: '[]'}
							};
						case 'EFun':
							var _p396 = _p392._1;
							var _p395 = _p392._2;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(
										_elm_lang$core$List$map,
										_user$project$Lang$P(_p437),
										_p396),
									A2(
										_elm_lang$core$Basics_ops['++'],
										function () {
											var _p393 = _user$project$Utils$maybeLast(_p396);
											if (_p393.ctor === 'Just') {
												var _p394 = _p393._0;
												return {
													ctor: '::',
													_0: A4(
														_user$project$Lang$PT,
														_user$project$Lang$After,
														A3(_user$project$Info$WithInfo, '', _p394.end, _p394.end),
														_p437,
														_p394),
													_1: {ctor: '[]'}
												};
											} else {
												return {ctor: '[]'};
											}
										}(),
										{
											ctor: '::',
											_0: _user$project$Lang$E(_p395),
											_1: {
												ctor: '::',
												_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p392._3, _p395),
												_1: {ctor: '[]'}
											}
										})));
						case 'EApp':
							var _p398 = _p392._2;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$E(_p392._1),
										_1: {ctor: '[]'}
									}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_elm_lang$core$List$map, _user$project$Lang$E, _p398),
									function () {
										var _p397 = _user$project$Utils$maybeLast(_p398);
										if (_p397.ctor === 'Just') {
											return {
												ctor: '::',
												_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p392._4, _p397._0),
												_1: {ctor: '[]'}
											};
										} else {
											return {ctor: '[]'};
										}
									}()));
						case 'EOp':
							var _p400 = _p392._2;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_elm_lang$core$List$map, _user$project$Lang$E, _p400),
									function () {
										var _p399 = _user$project$Utils$maybeLast(_p400);
										if (_p399.ctor === 'Just') {
											return {
												ctor: '::',
												_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p392._3, _p399._0),
												_1: {ctor: '[]'}
											};
										} else {
											return {ctor: '[]'};
										}
									}()));
						case 'EList':
							var _p406 = _p392._4;
							var _p405 = _p392._1;
							var lastHead = function () {
								var _p401 = _user$project$Utils$maybeLast(_p405);
								if (_p401.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _p401._0._1,
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}();
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(
										_elm_lang$core$List$map,
										function (_p402) {
											return _user$project$Lang$E(
												_elm_lang$core$Tuple$second(_p402));
										},
										_p405),
									function () {
										var _p403 = _p392._3;
										if (_p403.ctor === 'Just') {
											var _p404 = _p403._0;
											return A2(
												_elm_lang$core$Basics_ops['++'],
												A2(
													_elm_lang$core$List$map,
													A2(_user$project$Lang$ET, _user$project$Lang$After, _p392._2),
													lastHead),
												{
													ctor: '::',
													_0: _user$project$Lang$E(_p404),
													_1: {
														ctor: '::',
														_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p406, _p404),
														_1: {ctor: '[]'}
													}
												});
										} else {
											return A2(
												_elm_lang$core$List$map,
												A2(_user$project$Lang$ET, _user$project$Lang$After, _p406),
												lastHead);
										}
									}()));
						case 'EIf':
							var _p407 = _p392._5;
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$E(_p392._1),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$E(_p392._3),
										_1: {
											ctor: '::',
											_0: _user$project$Lang$E(_p407),
											_1: {
												ctor: '::',
												_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p392._6, _p407),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							};
						case 'ECase':
							var _p415 = _p392._1;
							var _p414 = _p392._2;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$E(_p415),
										_1: {ctor: '[]'}
									}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									function () {
										var _p408 = _elm_lang$core$List$head(_p414);
										if (_p408.ctor === 'Just') {
											var _p409 = _p408._0.val;
											return {
												ctor: '::',
												_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p409._0, _p415),
												_1: {ctor: '[]'}
											};
										} else {
											return {ctor: '[]'};
										}
									}(),
									A2(
										_elm_lang$core$List$concatMap,
										function (_p410) {
											return function (_p411) {
												var _p412 = _p411;
												var _p413 = _p412._2;
												return {
													ctor: '::',
													_0: A2(_user$project$Lang$P, _p437, _p412._1),
													_1: {
														ctor: '::',
														_0: _user$project$Lang$E(_p413),
														_1: {
															ctor: '::',
															_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p412._3, _p413),
															_1: {ctor: '[]'}
														}
													}
												};
											}(
												function (_) {
													return _.val;
												}(_p410));
										},
										_p414)));
						case 'ETypeCase':
							var _p423 = _p392._2;
							var _p422 = _p392._1;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$E(_p422),
										_1: {ctor: '[]'}
									}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									function () {
										var _p416 = _elm_lang$core$List$head(_p423);
										if (_p416.ctor === 'Just') {
											var _p417 = _p416._0.val;
											return {
												ctor: '::',
												_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p417._0, _p422),
												_1: {ctor: '[]'}
											};
										} else {
											return {ctor: '[]'};
										}
									}(),
									A2(
										_elm_lang$core$List$concatMap,
										function (_p418) {
											return function (_p419) {
												var _p420 = _p419;
												var _p421 = _p420._2;
												return {
													ctor: '::',
													_0: _user$project$Lang$T(_p420._1),
													_1: {
														ctor: '::',
														_0: _user$project$Lang$E(_p421),
														_1: {
															ctor: '::',
															_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p420._3, _p421),
															_1: {ctor: '[]'}
														}
													}
												};
											}(
												function (_) {
													return _.val;
												}(_p418));
										},
										_p423)));
						case 'ELet':
							var _p431 = _p392._8;
							var _p430 = _p392._3;
							var _p429 = _p392._1;
							var _p428 = _p392._7;
							var _p427 = _p392._5;
							var _p424 = function () {
								var e1Ws = function (_p425) {
									return _user$project$Lang$wsBefore(
										_user$project$Lang$E(_p425));
								}(_p427);
								if (_elm_lang$core$Native_Utils.eq(e1Ws.start.line, e1Ws.end.line)) {
									return {
										ctor: '_Tuple2',
										_0: e1Ws,
										_1: _user$project$Info$withDummyInfo('')
									};
								} else {
									var breakpoint = {line: e1Ws.start.line + 1, col: 1};
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											e1Ws,
											{
												end: _elm_lang$core$Native_Utils.update(
													breakpoint,
													{col: 0})
											}),
										_1: _elm_lang$core$Native_Utils.update(
											e1Ws,
											{start: breakpoint})
									};
								}
							}();
							var special1 = _p424._0;
							var special2 = _p424._1;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$LBE(
											{
												start: {line: _p437.start.line, col: _p437.start.col},
												end: _elm_lang$core$Native_Utils.eq(_p429, _user$project$Lang$Def) ? _p437.end : _p427.end,
												val: _p437.val.eid
											}),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Lang$P, _p437, _p430),
											_1: {
												ctor: '::',
												_0: A4(_user$project$Lang$PT, _user$project$Lang$After, special1, _p437, _p430),
												_1: {
													ctor: '::',
													_0: A2(
														_user$project$Lang$modifyWsBefore,
														_elm_lang$core$Basics$always(special2),
														_user$project$Lang$E(_p427)),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								function () {
									var _p426 = _p429;
									if (_p426.ctor === 'Let') {
										return {
											ctor: '::',
											_0: _user$project$Lang$E(_p428),
											_1: {
												ctor: '::',
												_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p431, _p428),
												_1: {ctor: '[]'}
											}
										};
									} else {
										return {
											ctor: '::',
											_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p431, _p427),
											_1: {
												ctor: '::',
												_0: _user$project$Lang$E(_p428),
												_1: {ctor: '[]'}
											}
										};
									}
								}());
						case 'EComment':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$E(_p392._2),
									_1: {ctor: '[]'}
								}
							};
						case 'EOption':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$E(_p392._4),
									_1: {ctor: '[]'}
								}
							};
						case 'ETyp':
							var _p432 = _p392._2;
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Lang$P, _p437, _p392._1),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$T(_p432),
										_1: {
											ctor: '::',
											_0: A3(_user$project$Lang$TT, _user$project$Lang$After, _p392._4, _p432),
											_1: {
												ctor: '::',
												_0: _user$project$Lang$E(_p392._3),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							};
						case 'EColonType':
							return {
								ctor: '::',
								_0: _user$project$Lang$E(_p392._1),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$T(_p392._3),
									_1: {ctor: '[]'}
								}
							};
						case 'ETypeAlias':
							var _p433 = _p392._2;
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Lang$P, _p437, _p392._1),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$T(_p433),
										_1: {
											ctor: '::',
											_0: A3(_user$project$Lang$TT, _user$project$Lang$After, _p392._4, _p433),
											_1: {
												ctor: '::',
												_0: _user$project$Lang$E(_p392._3),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							};
						case 'EParens':
							var _p434 = _p392._1;
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$E(_p434),
									_1: {
										ctor: '::',
										_0: A3(_user$project$Lang$ET, _user$project$Lang$After, _p392._3, _p434),
										_1: {ctor: '[]'}
									}
								}
							};
						default:
							if (_p392._1.ctor === 'HolePBE') {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$List$map,
										function (_p435) {
											var _p436 = _p435;
											return _user$project$Lang$E(_p436._3);
										},
										_p392._1._0));
							} else {
								return {
									ctor: '::',
									_0: A3(_user$project$Lang$ET, _user$project$Lang$Before, _p392._0, _p437),
									_1: {ctor: '[]'}
								};
							}
					}
				case 'P':
					var _p446 = _p391._1;
					var _p445 = _p391._0;
					var _p438 = _p446.val.p__;
					switch (_p438.ctor) {
						case 'PVar':
							return {
								ctor: '::',
								_0: A4(_user$project$Lang$PT, _user$project$Lang$Before, _p438._0, _p445, _p446),
								_1: {ctor: '[]'}
							};
						case 'PConst':
							return {
								ctor: '::',
								_0: A4(_user$project$Lang$PT, _user$project$Lang$Before, _p438._0, _p445, _p446),
								_1: {ctor: '[]'}
							};
						case 'PBase':
							return {
								ctor: '::',
								_0: A4(_user$project$Lang$PT, _user$project$Lang$Before, _p438._0, _p445, _p446),
								_1: {ctor: '[]'}
							};
						case 'PWildcard':
							return {ctor: '[]'};
						case 'PList':
							var _p443 = _p438._4;
							var _p442 = _p438._1;
							var lastHead = function () {
								var _p439 = _user$project$Utils$maybeLast(_p442);
								if (_p439.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _p439._0,
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}();
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A4(_user$project$Lang$PT, _user$project$Lang$Before, _p438._0, _p445, _p446),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(
										_elm_lang$core$List$map,
										_user$project$Lang$P(_p445),
										_p442),
									function () {
										var _p440 = _p438._3;
										if (_p440.ctor === 'Just') {
											var _p441 = _p440._0;
											return A2(
												_elm_lang$core$Basics_ops['++'],
												A2(
													_elm_lang$core$List$map,
													A3(_user$project$Lang$PT, _user$project$Lang$After, _p438._2, _p445),
													lastHead),
												{
													ctor: '::',
													_0: A2(_user$project$Lang$P, _p445, _p441),
													_1: {
														ctor: '::',
														_0: A4(_user$project$Lang$PT, _user$project$Lang$After, _p443, _p445, _p441),
														_1: {ctor: '[]'}
													}
												});
										} else {
											return A2(
												_elm_lang$core$List$map,
												A3(_user$project$Lang$PT, _user$project$Lang$After, _p443, _p445),
												lastHead);
										}
									}()));
						case 'PAs':
							return {
								ctor: '::',
								_0: A4(_user$project$Lang$PT, _user$project$Lang$Before, _p438._0, _p445, _p446),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Lang$P, _p445, _p438._3),
									_1: {ctor: '[]'}
								}
							};
						default:
							var _p444 = _p438._1;
							return {
								ctor: '::',
								_0: A4(_user$project$Lang$PT, _user$project$Lang$Before, _p438._0, _p445, _p444),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Lang$P, _p445, _p444),
									_1: {
										ctor: '::',
										_0: A4(_user$project$Lang$PT, _user$project$Lang$After, _p438._2, _p445, _p444),
										_1: {ctor: '[]'}
									}
								}
							};
					}
				case 'T':
					var _p460 = _p391._0;
					var _p447 = _p460.val.t__;
					switch (_p447.ctor) {
						case 'TNum':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {ctor: '[]'}
							};
						case 'TBool':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {ctor: '[]'}
							};
						case 'TString':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {ctor: '[]'}
							};
						case 'TNull':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {ctor: '[]'}
							};
						case 'TList':
							var _p448 = _p447._1;
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$T(_p448),
									_1: {
										ctor: '::',
										_0: A3(_user$project$Lang$TT, _user$project$Lang$After, _p447._2, _p448),
										_1: {ctor: '[]'}
									}
								}
							};
						case 'TDict':
							var _p449 = _p447._2;
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$T(_p447._1),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$T(_p449),
										_1: {
											ctor: '::',
											_0: A3(_user$project$Lang$TT, _user$project$Lang$After, _p447._3, _p449),
											_1: {ctor: '[]'}
										}
									}
								}
							};
						case 'TTuple':
							var _p454 = _p447._4;
							var _p453 = _p447._1;
							var lastHead = function () {
								var _p450 = _user$project$Utils$maybeLast(_p453);
								if (_p450.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _p450._0,
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}();
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_elm_lang$core$List$map, _user$project$Lang$T, _p453),
									function () {
										var _p451 = _p447._3;
										if (_p451.ctor === 'Just') {
											var _p452 = _p451._0;
											return A2(
												_elm_lang$core$Basics_ops['++'],
												A2(
													_elm_lang$core$List$map,
													A2(_user$project$Lang$TT, _user$project$Lang$After, _p447._2),
													lastHead),
												{
													ctor: '::',
													_0: _user$project$Lang$T(_p452),
													_1: {
														ctor: '::',
														_0: A3(_user$project$Lang$TT, _user$project$Lang$After, _p454, _p452),
														_1: {ctor: '[]'}
													}
												});
										} else {
											return A2(
												_elm_lang$core$List$map,
												A2(_user$project$Lang$TT, _user$project$Lang$After, _p454),
												lastHead);
										}
									}()));
						case 'TArrow':
							var _p456 = _p447._1;
							var lastHead = function () {
								var _p455 = _user$project$Utils$maybeLast(_p456);
								if (_p455.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _p455._0,
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}();
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_elm_lang$core$List$map, _user$project$Lang$T, _p456),
									A2(
										_elm_lang$core$List$map,
										A2(_user$project$Lang$TT, _user$project$Lang$After, _p447._2),
										lastHead)));
						case 'TUnion':
							var _p458 = _p447._1;
							var lastHead = function () {
								var _p457 = _user$project$Utils$maybeLast(_p458);
								if (_p457.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _p457._0,
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}();
							return A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_elm_lang$core$List$map, _user$project$Lang$T, _p458),
									A2(
										_elm_lang$core$List$map,
										A2(_user$project$Lang$TT, _user$project$Lang$After, _p447._2),
										lastHead)));
						case 'TNamed':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {ctor: '[]'}
							};
						case 'TVar':
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {ctor: '[]'}
							};
						case 'TForall':
							var _p459 = _p447._2;
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$T(_p459),
									_1: {
										ctor: '::',
										_0: A3(_user$project$Lang$TT, _user$project$Lang$After, _p447._3, _p459),
										_1: {ctor: '[]'}
									}
								}
							};
						default:
							return {
								ctor: '::',
								_0: A3(_user$project$Lang$TT, _user$project$Lang$Before, _p447._0, _p460),
								_1: {ctor: '[]'}
							};
					}
				case 'LBE':
					return {ctor: '[]'};
				case 'ET':
					return {ctor: '[]'};
				case 'PT':
					return {ctor: '[]'};
				default:
					return {ctor: '[]'};
			}
		}());
};
var _user$project$Lang$flattenToCodeObjects = function (codeObject) {
	return {
		ctor: '::',
		_0: codeObject,
		_1: A2(
			_elm_lang$core$List$concatMap,
			_user$project$Lang$flattenToCodeObjects,
			_user$project$Lang$childCodeObjects(codeObject))
	};
};
var _user$project$Lang$foldCode = F3(
	function (f, acc, code) {
		return A3(
			_elm_lang$core$List$foldl,
			f,
			acc,
			_user$project$Lang$flattenToCodeObjects(code));
	});
var _user$project$Lang$hasPatWithPId = function (pid) {
	return function (_p461) {
		return A2(
			_elm_lang$core$List$any,
			_user$project$Lang$hasPId(pid),
			_user$project$Lang$childCodeObjects(
				_user$project$Lang$E(_p461)));
	};
};

var _user$project$Native_ImpureGoodies = {

    randomFloat : function(_) {
      return Math.random();
    },

    crashToNothing : function(thunk) {
      try {
        // Just (thunk ())
        var result = thunk({ctor: '_Tuple0'});
        return _elm_lang$core$Maybe$Just(result);
      } catch(err) {
        if (err.ctor === undefined) { // Internal crash, not something thrown with ImpureGoodies.throw below.
          // Nothing
          console.log(err);
          return _elm_lang$core$Maybe$Nothing;
        } else {
          throw err;
        }
      }
    },

    crashToError : function(thunk) {
      try {
        // Ok (thunk ())
        var result = thunk({ctor: '_Tuple0'});
        return _elm_lang$core$Result$Ok(result);
      } catch(err) {
        if (err.ctor === undefined) { // Internal crash, not something thrown with ImpureGoodies.throw below.
          // Err (toString err)
          return _elm_lang$core$Result$Err(err.toString());
        } else {
          throw err;
        }
      }
    },

    throw : function(exception) {
      throw(exception)
    },

    tryCatch : function(exceptionConstructorName) { return function(thunk) { return function(catchThunk) {
      try {
        return thunk({ctor: '_Tuple0'});
      } catch(exception) {
        if (exception.ctor === exceptionConstructorName) {
          return catchThunk(exception);
        } else {
          throw exception;
        }
      }
    }}},

    mutateRecordField : function(record) { return function(fieldName) { return function(newValue) {
      // Sanity check.
      if (typeof record[fieldName] == typeof newValue) {
        record[fieldName] = newValue;
        return record;
      } else {
        throw "ImpureGoodies.mutateRecordField: types do not match" + (typeof record[fieldName]) + " vs " + (typeof newValue);
      }
    }}},

    timedRun : function(thunk) {
      var start = (new Date()).getTime();
      var result = thunk(_elm_lang$core$Native_Utils.Tuple0);
      var end = (new Date()).getTime();

      return _elm_lang$core$Native_Utils.Tuple2(result, end-start);
    },

    logRaw : function(thing) {
      console.log(thing);
      return {ctor: '_Tuple0'};
    }
};

var _user$project$ImpureGoodies$logRaw = function (thing) {
	return _user$project$Native_ImpureGoodies.logRaw(thing);
};
var _user$project$ImpureGoodies$timedRun = function (thunk) {
	return _user$project$Native_ImpureGoodies.timedRun(thunk);
};
var _user$project$ImpureGoodies$logTimedRun = F2(
	function (caption, thunk) {
		var _p0 = _user$project$ImpureGoodies$timedRun(thunk);
		var result = _p0._0;
		var time = _p0._1;
		var _p1 = A2(
			_elm_lang$core$Debug$log,
			A2(_elm_lang$core$Basics_ops['++'], caption, ' milliseconds'),
			time);
		return result;
	});
var _user$project$ImpureGoodies$mutateRecordField = F3(
	function (record, fieldName, newValue) {
		return A3(_user$project$Native_ImpureGoodies.mutateRecordField, record, fieldName, newValue);
	});
var _user$project$ImpureGoodies$tryCatch = F3(
	function (exceptionConstructorName, thunk, catchThunk) {
		return A3(_user$project$Native_ImpureGoodies.tryCatch, exceptionConstructorName, thunk, catchThunk);
	});
var _user$project$ImpureGoodies$throw = function (exception) {
	return _user$project$Native_ImpureGoodies.throw(exception);
};
var _user$project$ImpureGoodies$crashToError = function (thunk) {
	return _user$project$Native_ImpureGoodies.crashToError(thunk);
};
var _user$project$ImpureGoodies$crashToNothing = function (thunk) {
	return _user$project$Native_ImpureGoodies.crashToNothing(thunk);
};
var _user$project$ImpureGoodies$randomFloat = function (_p2) {
	var _p3 = _p2;
	return _user$project$Native_ImpureGoodies.randomFloat(
		{ctor: '_Tuple0'});
};
var _user$project$ImpureGoodies$randomInt = F2(
	function (low, highNonInclusive) {
		var range = highNonInclusive - low;
		return _elm_lang$core$Basics$floor(
			(_user$project$ImpureGoodies$randomFloat(
				{ctor: '_Tuple0'}) * _elm_lang$core$Basics$toFloat(range)) + _elm_lang$core$Basics$toFloat(low));
	});

var _user$project$ParserUtils$showIndentedProblem = F2(
	function (n, prob) {
		var indent = A2(_elm_lang$core$String$repeat, 2 * n, ' ');
		var _p0 = prob;
		switch (_p0.ctor) {
			case 'BadOneOf':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					indent,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'One of:\n',
						_elm_lang$core$String$concat(
							A2(
								_elm_lang$core$List$map,
								_user$project$ParserUtils$showIndentedProblem(n + 1),
								_p0._0))));
			case 'BadInt':
				return A2(_elm_lang$core$Basics_ops['++'], indent, 'Bad integer value\n');
			case 'BadFloat':
				return A2(_elm_lang$core$Basics_ops['++'], indent, 'Bad float value\n');
			case 'BadRepeat':
				return A2(_elm_lang$core$Basics_ops['++'], indent, 'Parse of zero-length input indefinitely\n');
			case 'ExpectingEnd':
				return A2(_elm_lang$core$Basics_ops['++'], indent, 'Expecting end\n');
			case 'ExpectingSymbol':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					indent,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Expecting symbol \'',
						A2(_elm_lang$core$Basics_ops['++'], _p0._0, '\'\n')));
			case 'ExpectingKeyword':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					indent,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Expecting keyword \'',
						A2(_elm_lang$core$Basics_ops['++'], _p0._0, '\'\n')));
			case 'ExpectingVariable':
				return A2(_elm_lang$core$Basics_ops['++'], indent, 'Expecting variable\n');
			case 'ExpectingClosing':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					indent,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Expecting closing string \'',
						A2(_elm_lang$core$Basics_ops['++'], _p0._0, '\'\n')));
			default:
				return A2(
					_elm_lang$core$Basics_ops['++'],
					indent,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Parser failure: ',
						A2(_elm_lang$core$Basics_ops['++'], _p0._0, '\n')));
		}
	});
var _user$project$ParserUtils$showError = function (err) {
	var deepestContext = function () {
		var _p1 = _elm_lang$core$List$head(err.context);
		if (_p1.ctor === 'Just') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Error while parsing \'',
				A2(_elm_lang$core$Basics_ops['++'], _p1._0.description, '\':\n'));
		} else {
			return '';
		}
	}();
	var showContext = function (c) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'  (row: ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(c.row),
				A2(
					_elm_lang$core$Basics_ops['++'],
					', col: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(c.col),
						A2(
							_elm_lang$core$Basics_ops['++'],
							') Error while parsing \'',
							A2(_elm_lang$core$Basics_ops['++'], c.description, '\'\n'))))));
	};
	var prettyError = function () {
		var arrow = A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$String$repeat, err.col - 1, ' '),
			'^');
		var sourceLines = _elm_lang$core$String$lines(err.source);
		var problemLine = _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, err.row - 1, sourceLines));
		var _p2 = problemLine;
		if (_p2.ctor === 'Just') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p2._0,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\n',
					A2(_elm_lang$core$Basics_ops['++'], arrow, '\n\n')));
		} else {
			return '';
		}
	}();
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'[Parser Error]\n\n',
		A2(
			_elm_lang$core$Basics_ops['++'],
			deepestContext,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\n',
				A2(
					_elm_lang$core$Basics_ops['++'],
					prettyError,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Position\n',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'========\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'  Row: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(err.row),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'  Col: ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(err.col),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\n\n',
													A2(
														_elm_lang$core$Basics_ops['++'],
														'Problem\n',
														A2(
															_elm_lang$core$Basics_ops['++'],
															'=======\n',
															A2(
																_elm_lang$core$Basics_ops['++'],
																A2(_user$project$ParserUtils$showIndentedProblem, 1, err.problem),
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'\n',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'Context Stack\n',
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'=============\n',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				_elm_lang$core$String$concat(
																					A2(_elm_lang$core$List$map, showContext, err.context)),
																				'\n\n')))))))))))))))))));
};
var _user$project$ParserUtils$untrackInfo = _elm_tools$parser$Parser$map(
	function (_) {
		return _.val;
	});
var _user$project$ParserUtils$getPos = A2(_elm_tools$parser$Parser$map, _user$project$Pos$posFromRowCol, _elm_tools$parser$Parser_LowLevel$getPosition);
var _user$project$ParserUtils$trackInfo = function (p) {
	return A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (start, _p3) {
				var _p4 = _p3;
				return A3(_user$project$Info$withInfo, _p4._0, start, _p4._1);
			}),
		_user$project$ParserUtils$getPos,
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})),
				p),
			_user$project$ParserUtils$getPos));
};
var _user$project$ParserUtils$char = A2(
	_elm_tools$parser$Parser$map,
	function (_p5) {
		return _elm_lang$core$Tuple$first(
			A2(
				_elm_lang$core$Maybe$withDefault,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.chr('_'),
					_1: ''
				},
				_elm_lang$core$String$uncons(_p5)));
	},
	A2(
		_elm_tools$parser$Parser$keep,
		_elm_tools$parser$Parser$Exactly(1),
		_elm_lang$core$Basics$always(true)));
var _user$project$ParserUtils$ignoreRegex = function (reg) {
	return A2(
		_elm_tools$parser$Parser$andThen,
		function (_p6) {
			var _p7 = _p6;
			var _p11 = _p7._1;
			var sourceFromOffset = A3(
				_elm_lang$core$String$slice,
				_p7._0,
				_elm_lang$core$String$length(_p11),
				_p11);
			var finding = A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$AtMost(1),
				reg,
				sourceFromOffset);
			var _p8 = finding;
			if (_p8.ctor === '::') {
				var _p10 = _p8._0.index;
				return _elm_lang$core$Native_Utils.eq(_p10, 0) ? A2(
					_elm_tools$parser$Parser$ignore,
					_elm_tools$parser$Parser$Exactly(
						_elm_lang$core$String$length(_p8._0.match)),
					function (_p9) {
						return true;
					}) : _elm_tools$parser$Parser$fail(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'expecting regex \'',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(reg),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\' immediately but appeared only after ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p10),
									' characters')))));
			} else {
				return _elm_tools$parser$Parser$fail(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'expecting regex \'',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(reg),
							'\'')));
			}
		},
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})),
				_elm_tools$parser$Parser_LowLevel$getOffset),
			_elm_tools$parser$Parser_LowLevel$getSource));
};
var _user$project$ParserUtils$keepRegex = function (reg) {
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _elm_tools$parser$Parser$source(
				_user$project$ParserUtils$ignoreRegex(reg)),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$fail(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\'',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(reg),
							'\' did not match'))),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$ParserUtils$ignoreUntilRegex = function (reg) {
	return A2(
		_elm_tools$parser$Parser$andThen,
		function (_p12) {
			var _p13 = _p12;
			var _p17 = _p13._1;
			var sourceFromOffset = A3(
				_elm_lang$core$String$slice,
				_p13._0,
				_elm_lang$core$String$length(_p17),
				_p17);
			var regexMatches = A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$AtMost(1),
				reg,
				sourceFromOffset);
			var _p14 = regexMatches;
			if (_p14.ctor === '::') {
				return A2(
					_elm_tools$parser$Parser$ignore,
					_elm_tools$parser$Parser$Exactly(_p14._0.index),
					function (_p15) {
						return true;
					});
			} else {
				return A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						A2(
							_elm_tools$parser$Parser$keep,
							_elm_tools$parser$Parser$zeroOrMore,
							function (_p16) {
								return true;
							})),
					_elm_tools$parser$Parser$fail(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'expecting regex \'',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(reg),
								'\''))));
			}
		},
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})),
				_elm_tools$parser$Parser_LowLevel$getOffset),
			_elm_tools$parser$Parser_LowLevel$getSource));
};
var _user$project$ParserUtils$keepUntilRegex = function (reg) {
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _elm_tools$parser$Parser$source(
				_user$project$ParserUtils$ignoreUntilRegex(reg)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						A2(
							_elm_tools$parser$Parser$keep,
							_elm_tools$parser$Parser$zeroOrMore,
							function (_p18) {
								return true;
							})),
					_elm_tools$parser$Parser$fail(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'expecting closing string \'',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(reg),
								'\'')))),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$ParserUtils$keepUntil = function (endString) {
	var endLength = _elm_lang$core$String$length(endString);
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$map,
				_elm_lang$core$String$dropRight(endLength),
				_elm_tools$parser$Parser$source(
					_elm_tools$parser$Parser$ignoreUntil(endString))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						A2(
							_elm_tools$parser$Parser$keep,
							_elm_tools$parser$Parser$zeroOrMore,
							function (_p19) {
								return true;
							})),
					_elm_tools$parser$Parser$fail(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'expecting closing string \'',
							A2(_elm_lang$core$Basics_ops['++'], endString, '\'')))),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$ParserUtils$inside = function (delimiter) {
	return A2(
		_elm_tools$parser$Parser_ops['|='],
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
			_elm_tools$parser$Parser$symbol(delimiter)),
		_user$project$ParserUtils$keepUntil(delimiter));
};
var _user$project$ParserUtils$token = F2(
	function (text, val) {
		return A2(
			_elm_tools$parser$Parser$map,
			function (_p20) {
				return val;
			},
			_elm_tools$parser$Parser$keyword(text));
	});
var _user$project$ParserUtils$guard = F2(
	function (failReason, pred) {
		return pred ? _elm_tools$parser$Parser$succeed(
			{ctor: '_Tuple0'}) : _elm_tools$parser$Parser$fail(failReason);
	});
var _user$project$ParserUtils$optional = function (parser) {
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(_elm_tools$parser$Parser$map, _elm_lang$core$Maybe$Just, parser),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$succeed(_elm_lang$core$Maybe$Nothing),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$ParserUtils$try = function (parser) {
	return A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		_elm_lang$core$Basics$always,
		parser,
		_elm_tools$parser$Parser$succeed(
			{ctor: '_Tuple0'}));
};
var _user$project$ParserUtils$lookAhead = function (parser) {
	var getResult = A2(
		_elm_tools$parser$Parser_ops['|='],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			_elm_tools$parser$Parser$succeed(
				F2(
					function (offset, source) {
						var remainingCode = A2(_elm_lang$core$String$dropLeft, offset, source);
						return A2(_elm_tools$parser$Parser$run, parser, remainingCode);
					})),
			_elm_tools$parser$Parser_LowLevel$getOffset),
		_elm_tools$parser$Parser_LowLevel$getSource);
	return A2(
		_elm_tools$parser$Parser$andThen,
		function (result) {
			var _p21 = result;
			if (_p21.ctor === 'Ok') {
				return _elm_tools$parser$Parser$succeed(_p21._0);
			} else {
				return parser;
			}
		},
		getResult);
};

var _user$project$LangParserUtils$mapExp_ = function (_p0) {
	return _elm_tools$parser$Parser$map(
		_user$project$Info$mapInfoVal(_p0));
}(_user$project$Lang$exp_);
var _user$project$LangParserUtils$mapPat_ = function (_p1) {
	return _elm_tools$parser$Parser$map(
		_user$project$Info$mapInfoVal(_p1));
}(_user$project$Lang$pat_);
var _user$project$LangParserUtils$padded = F4(
	function (combiner, spacePolicyBefore, p, spacePolicyAfter) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (wsBefore, _p2) {
					var _p3 = _p2;
					var _p4 = _p3._0;
					return A3(
						_user$project$Info$withInfo,
						A3(combiner, wsBefore, _p4.val, _p3._1),
						_p4.start,
						_p4.end);
				}),
			spacePolicyBefore,
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					p),
				spacePolicyAfter));
	});
var _user$project$LangParserUtils$paddedAfter = F3(
	function (combiner, p, spacePolicy) {
		return A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(
					F2(
						function (x, wsAfter) {
							return A3(
								_user$project$Info$withInfo,
								A2(combiner, x.val, wsAfter),
								x.start,
								x.end);
						})),
				p),
			spacePolicy);
	});
var _user$project$LangParserUtils$paddedBefore = F3(
	function (combiner, spacePolicy, p) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (wsBefore, x) {
					return A3(
						_user$project$Info$withInfo,
						A2(combiner, wsBefore, x.val),
						x.start,
						x.end);
				}),
			spacePolicy,
			p);
	});
var _user$project$LangParserUtils$spaceSaverKeyword = F3(
	function (sp, kword, combiner) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (ws, _p5) {
					return A3(
						_user$project$Info$withInfo,
						combiner(ws),
						ws.start,
						ws.end);
				}),
			sp,
			_elm_tools$parser$Parser$keyword(kword));
	});
var _user$project$LangParserUtils$isSpace = function (c) {
	return _elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr(' ')) || (_elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr('\n')) || (_elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr('\t')) || _elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr('\r'))));
};
var _user$project$LangParserUtils$isOnlySpaces = _elm_lang$core$String$all(_user$project$LangParserUtils$isSpace);
var _user$project$LangParserUtils$guardSpace = _user$project$ParserUtils$trackInfo(
	A2(
		_elm_tools$parser$Parser$andThen,
		function (_p6) {
			var _p7 = _p6;
			var _p8 = _p7._0;
			return A2(
				_user$project$ParserUtils$guard,
				'expecting space',
				_user$project$LangParserUtils$isOnlySpaces(
					A3(_elm_lang$core$String$slice, _p8, _p8 + 1, _p7._1)));
		},
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})),
				_elm_tools$parser$Parser_LowLevel$getOffset),
			_elm_tools$parser$Parser_LowLevel$getSource)));
var _user$project$LangParserUtils$keywordWithSpace = function (kword) {
	return _user$project$ParserUtils$trackInfo(
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(
					{ctor: '_Tuple0'}),
				_elm_tools$parser$Parser$keyword(kword)),
			_user$project$LangParserUtils$guardSpace));
};
var _user$project$LangParserUtils$symbolWithSpace = function (sym) {
	return _user$project$ParserUtils$trackInfo(
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(
					{ctor: '_Tuple0'}),
				_elm_tools$parser$Parser$symbol(sym)),
			_user$project$LangParserUtils$guardSpace));
};
var _user$project$LangParserUtils$space = _user$project$ParserUtils$trackInfo(
	A2(
		_elm_tools$parser$Parser$keep,
		_elm_tools$parser$Parser$Exactly(1),
		_user$project$LangParserUtils$isSpace));
var _user$project$LangParserUtils$spaces = _user$project$ParserUtils$trackInfo(
	A2(_elm_tools$parser$Parser$keep, _elm_tools$parser$Parser$zeroOrMore, _user$project$LangParserUtils$isSpace));

var _user$project$PreludeGenerated$prelude = '\n; prelude.little\n;\n; This little library is accessible by every program.\n; This is not an example that generates an SVG canvas,\n; but we include it here for reference.\n\n; === Type Aliases ===\n\n(def Ratio Num)\n(def Point [Num Num])\n(def Distance Num)\n(def HorizontalDistance Num)\n(def VerticalDistance Num)\n(def Width HorizontalDistance)\n(def Height VerticalDistance)\n(def HalfWidth HorizontalDistance)\n(def HalfHeight VerticalDistance)\n(def Radius Distance)\n(def Count Num)\n(def Radians Num)\n(def Degrees Num)\n(def RGBA [Num Num Num Num])\n(def Color (union String Num RGBA))\n(def StrokeWidth Num)\n(def PathCmds (List (union String Num)))\n(def Points (List Point))\n(def RotationCmd [[String Num Num Num]])\n(def AttrVal (union String Num Bool Color PathCmds Points RotationCmd))\n(def AttrName String)\n(def AttrPair [AttrName AttrVal])\n(def Attrs (List AttrPair))\n(def NodeKind String)\n; TODO add recursive types properly\n; (def SVGOrText (union SVG [String String]))\n; (def SVG [NodeKind Attrs (List SVGOrText)])\n(def SVG (forall a [NodeKind Attrs (List a)]))\n(def Blob (List SVG))\n\n;; Needed for snapping to derived features: need a constant two with a\n;; locId so it can be regenerated from traces (which do not store original numbers)\n(def two 2)\n\n;; The identity function - given a value, returns exactly that value\n(typ id (forall a (-> a a)))\n(def id (\\x x))\n\n;; A function that always returns the same value a, regardless of b\n(typ always (forall (a b) (-> a b a)))\n(def always (\\(x _) x))\n\n;; Composes two functions together\n(typ compose (forall (a b c) (-> (-> b c) (-> a b) (-> a c))))\n(def compose (\\(f g) (\\x (f (g x)))))\n\n(typ flip (forall (a b c) (-> (-> a b c) (-> b a c))))\n(def flip (\\f (\\(x y) (f y x))))\n  ; TODO other version:\n  ; (def flip (\\(f x y) (f y x)))\n\n(typ fst (forall (a b) (-> [a b] a)))\n(typ snd (forall (a b) (-> [a b] b)))\n\n(def fst (\\[a _] a))\n(def snd (\\[_ b] b))\n\n;; Given a bool, returns the opposite boolean value\n(typ not (-> Bool Bool))\n(def not (\\b (if b false true)))\n\n;; Given two bools, returns a bool regarding if the first argument is true, then the second argument is as well\n(typ implies (-> Bool Bool Bool))\n(def implies (\\(p q) (if p q true)))\n\n(typ or  (-> Bool Bool Bool))\n(typ and (-> Bool Bool Bool))\n\n(def or  (\\(p q) (if p true q)))\n(def and (\\(p q) (if p q false)))\n\n(typ lt (-> Num Num Bool))\n(typ eq (-> Num Num Bool))\n(typ le (-> Num Num Bool))\n(typ gt (-> Num Num Bool))\n(typ ge (-> Num Num Bool))\n\n(def lt (\\(x y) (< x y)))\n(def eq (\\(x y) (= x y)))\n(def le (\\(x y) (or (lt x y) (eq x y))))\n(def gt (flip lt))\n(def ge (\\(x y) (or (gt x y) (eq x y))))\n\n;; Returns the length of a given list\n(typ len (forall a (-> (List a) Num)))\n(defrec len (\\xs (case xs ([] 0) ([_ | xs1] (+ 1 (len xs1))))))\n\n;; Maps a function, f, over a list of values and returns the resulting list\n(typ map (forall (a b) (-> (-> a b) (List a) (List b))))\n(defrec map (\\(f xs)\n  (case xs ([] []) ([hd|tl] [(f hd)|(map f tl)]))))\n\n;; Combines two lists with a given function, extra elements are dropped\n(typ map2 (forall (a b c) (-> (-> a b c) (List a) (List b) (List c))))\n(defrec map2 (\\(f xs ys)\n  (case [xs ys]\n    ([[x|xs1] [y|ys1]] [ (f x y) | (map2 f xs1 ys1) ])\n    (_                 []))))\n\n;; Combines three lists with a given function, extra elements are dropped\n(typ map3 (forall (a b c d) (-> (-> a b c d) (List a) (List b) (List c) (List d))))\n(defrec map3 (\\(f xs ys zs)\n  (case [xs ys zs]\n    ([[x|xs1] [y|ys1] [z|zs1]] [ (f x y z) | (map3 f xs1 ys1 zs1) ])\n    (_                         []))))\n\n;; Combines four lists with a given function, extra elements are dropped\n(typ map4 (forall (a b c d e) (-> (-> a b c d e) (List a) (List b) (List c) (List d) (List e))))\n(defrec map4 (\\(f ws xs ys zs)\n  (case [ws xs ys zs]\n    ([[w|ws1] [x|xs1] [y|ys1] [z|zs1]] [ (f w x y z) | (map4 f ws1 xs1 ys1 zs1) ])\n    (_                                 []))))\n\n;; Takes a function, an accumulator, and a list as input and reduces using the function from the left\n(typ foldl (forall (a b) (-> (-> a b b) b (List a) b)))\n(defrec foldl (\\(f acc xs)\n  (case xs ([] acc) ([x|xs1] (foldl f (f x acc) xs1)))))\n\n;; Takes a function, an accumulator, and a list as input and reduces using the function from the right\n(typ foldr (forall (a b) (-> (-> a b b) b (List a) b)))\n(defrec foldr (\\(f acc xs)\n  (case xs ([] acc) ([x|xs1] (f x (foldr f acc xs1))))))\n\n;; Given two lists, append the second list to the end of the first\n(typ append (forall a (-> (List a) (List a) (List a))))\n(defrec append (\\(xs ys)\n  (case xs ([] ys) ([x|xs1] [ x | (append xs1 ys)]))))\n\n;; concatenate a list of lists into a single list\n(typ concat (forall a (-> (List (List a)) (List a))))\n(def concat (\\xss (foldr append [] xss)))\n  ; TODO eta-reduced version:\n  ; (def concat (foldr append []))\n\n;; Map a given function over a list and concatenate the resulting list of lists\n(typ concatMap (forall (a b) (-> (-> a (List b)) (List a) (List b))))\n(def concatMap (\\(f xs) (concat (map f xs))))\n\n;; Takes two lists and returns a list that is their cartesian product\n(typ cartProd (forall (a b) (-> (List a) (List b) (List [a b]))))\n(def cartProd (\\(xs ys)\n  (concatMap (\\x (map (\\y [x y]) ys)) xs)))\n\n;; Takes elements at the same position from two input lists and returns a list of pairs of these elements\n(typ zip (forall (a b) (-> (List a) (List b) (List [a b]))))\n(def zip (\\(xs ys) (map2 (\\(x y) [x y]) xs ys)))\n  ; TODO eta-reduced version:\n  ; (def zip (map2 (\\(x y) [x y])))\n\n;; The empty list\n;; (typ nil (forall a (List a)))\n(typ nil [])\n(def nil [])\n\n;; attaches an element to the front of a list\n(typ cons (forall a (-> a (List a) (List a))))\n(def cons (\\(x xs) [x | xs]))\n\n;; attaches an element to the end of a list\n(typ snoc (forall a (-> a (List a) (List a))))\n(def snoc (\\(x ys) (append ys [x])))\n\n;; Returns the first element of a given list\n(typ hd (forall a (-> (List a) a)))\n(def hd (\\[x|xs] x))\n\n(typ tl (forall a (-> (List a) (List a))))\n(def tl (\\[x|xs] xs))\n\n;; Returns the last element of a given list\n(typ last (forall a (-> (List a) a)))\n(defrec last (\\xs\n  (case xs\n    ([x]    x)\n    ([_|xs] (last xs)))))\n\n;; Given a list, reverse its order\n(typ reverse (forall a (-> (List a) (List a))))\n(def reverse (\\xs (foldl cons nil xs)))\n  ; TODO eta-reduced version:\n  ; (def reverse (foldl cons nil))\n\n(def adjacentPairs (\\xs (zip xs (tl xs))))\n\n;; Given two numbers, creates the list between them (inclusive)\n(typ range (-> Num Num (List Num)))\n(defrec range (\\(i j)\n  (if (< i (+ j 1))\n      (cons i (range (+ i 1) j))\n      nil)))\n\n;; Given a number, create the list of 0 to that number inclusive (number must be > 0)\n(typ list0N (-> Num (List Num)))\n(def list0N (\\n (range 0 n)))\n\n;; Given a number, create the list of 1 to that number inclusive\n(typ list1N (-> Count (List Num)))\n(def list1N (\\n (range 1 n)))\n\n(typ zeroTo (-> Count (List Num)))\n(def zeroTo (\\n (range 0 (- n 1))))\n\n;; Given a number n and some value x, return a list with x repeated n times\n(typ repeat (forall a (-> Count a (List a))))\n(def repeat (\\(n x) (map (always x) (range 1 n))))\n\n;; Given two lists, return a single list that alternates between their values (first element is from first list)\n(typ intermingle (forall a (-> (List a) (List a) (List a))))\n(defrec intermingle (\\(xs ys)\n  (case [xs ys]\n    ([[x|xs1] [y|ys1]] (cons x (cons y (intermingle xs1 ys1))))\n    ([[]      []]      nil)\n    (_                 (append xs ys)))))\n\n(def intersperse (\\(sep xs)\n  (case xs\n    ([]     xs)\n    ([x|xs] (reverse (foldl (\\(y acc) [ y sep | acc ]) [x] xs))))))\n\n(typ mapi (forall (a b) (-> (-> [Num a] b) (List a) (List b))))\n(def mapi (\\(f xs) (map f (zip (range 0 (- (len xs) 1)) xs))))\n\n\n(typ nth (forall a (-> (List a) Num (union Null a))))\n(defrec nth (\\(xs n)\n  (if (< n 0)       null\n    (case [n xs]\n      ([_ []]       null)\n      ([0 [x|xs1]]  x)\n      ([_ [x|xs1]]  (nth xs1 (- n 1)))))))\n\n; (defrec nth (\\(xs n)\n;   (if (< n 0)   \'ERROR: nth\'\n;     (case xs\n;       ([]       \'ERROR: nth\')\n;       ([x|xs1]  (if (= n 0) x (nth xs1 (- n 1))))))))\n\n; TODO change typ/def\n; (typ take (forall a (-> (List a) Num (union Null (List a)))))\n\n(typ take (forall a (-> (List a) Num (List (union Null a)))))\n(defrec take (\\(xs n)\n  (if (= n 0) []\n    (case xs\n      ([]      [null])\n      ([x|xs1] [x | (take xs1 (- n 1))])))))\n\n; (def take\n;   (letrec take_ (\\(n xs)\n;     (case [n xs]\n;       ([0 _]       [])\n;       ([_ []]      [])\n;       ([_ [x|xs1]] [x | (take_ (- n 1) xs1)])))\n;   (compose take_ (max 0))))\n\n(typ drop (forall a (-> (List a) Num (union Null (List a)))))\n(defrec drop (\\(xs n)\n  (if (le n 0)\n    xs\n    (case xs\n      ([]      null)\n      ([x|xs1] (drop xs1 (- n 1)))))))\n\n;; Drop n elements from the end of a list\n(typ dropEnd (forall a (-> (List a) Num (union Null (List a)))))\n(def dropEnd (\\(xs n)\n  (let tryDrop (drop (reverse xs) n)\n  (typecase tryDrop\n    (Null null)\n    (_    (reverse tryDrop))))))\n\n(typ elem (forall a (-> a (List a) Bool)))\n(defrec elem (\\(x ys)\n  (case ys\n    ([]      false)\n    ([y|ys1] (or (= x y) (elem x ys1))))))\n\n(def sortBy (\\(f xs)\n  (letrec ins (\\(x ys)   ; insert is a keyword...\n    (case ys\n      ([]     [x])\n      ([y|ys] (if (f x y) [x y | ys] [y | (ins x ys)]))))\n  (foldl ins [] xs))))\n\n(def sortAscending (sortBy lt))\n(def sortDescending (sortBy gt))\n\n\n;; multiply two numbers and return the result\n(typ mult (-> Num Num Num))\n(defrec mult (\\(m n)\n  (if (< m 1) 0 (+ n (mult (+ m -1) n)))))\n\n;; Given two numbers, subtract the second from the first\n(typ minus (-> Num Num Num))\n(def minus (\\(x y) (+ x (mult y -1))))\n\n;; Given two numbers, divide the first by the second\n(typ div (-> Num Num Num))\n(defrec div (\\(m n)\n  (if (< m n) 0\n  (if (< n 2) m\n    (+ 1 (div (minus m n) n))))))\n\n;; Given a number, returns the negative of that number\n(typ neg (-> Num Num))\n(def neg (\\x (- 0 x)))\n\n;; Sign function; -1, 0, or 1 based on sign of given number\n(typ sgn (-> Num Num))\n(def sgn (\\x (if (= 0 x) 0 (/ x (abs x)))))\n\n(typ some (forall a (-> (-> a Bool) (List a) Bool)))\n(defrec some (\\(p xs)\n  (case xs\n    ([]      false)\n    ([x|xs1] (or (p x) (some p xs1))))))\n\n(typ all (forall a (-> (-> a Bool) (List a) Bool)))\n(defrec all (\\(p xs)\n  (case xs\n    ([]      true)\n    ([x|xs1] (and (p x) (all p xs1))))))\n\n;; Given an upper bound, lower bound, and a number, restricts that number between those bounds (inclusive)\n;; Ex. clamp 1 5 4 = 4\n;; Ex. clamp 1 5 6 = 5\n(typ clamp (-> Num Num Num Num))\n(def clamp (\\(i j n) (if (< n i) i (if (< j n) j n))))\n\n(typ between (-> Num Num Num Bool))\n(def between (\\(i j n) (= n (clamp i j n))))\n\n(typ plus (-> Num Num Num))\n(def plus (\\(x y) (+ x y)))\n\n(typ min (-> Num Num Num))\n(def min (\\(i j) (if (lt i j) i j)))\n\n(typ max (-> Num Num Num))\n(def max (\\(i j) (if (gt i j) i j)))\n\n(typ minimum (-> (List Num) Num))\n(def minimum (\\[hd|tl] (foldl min hd tl)))\n\n(typ maximum (-> (List Num) Num))\n(def maximum (\\[hd|tl] (foldl max hd tl)))\n\n(typ average (-> (List Num) Num))\n(def average (\\nums\n  (let sum (foldl plus 0 nums)\n  (let n   (len nums)\n    (/ sum n)))))\n\n;; Combine a list of strings with a given separator\n;; Ex. joinStrings \', \' [\'hello\' \'world\'] = \'hello, world\'\n(typ joinStrings (-> String (List String) String))\n(def joinStrings (\\(sep ss)\n  (foldr (\\(str acc) (if (= acc \'\') str (+ str (+ sep acc)))) \'\' ss)))\n\n;; Concatenate a list of strings and return the resulting string\n(typ concatStrings (-> (List String) String))\n(def concatStrings (joinStrings \'\'))\n\n;; Concatenates a list of strings, interspersing a single space in between each string\n(typ spaces (-> (List String) String))\n(def spaces (joinStrings \' \'))\n\n;; First two arguments are appended at the front and then end of the third argument correspondingly\n;; Ex. delimit \'+\' \'+\' \'plus\' = \'+plus+\'\n(typ delimit (-> String String String String))\n(def delimit (\\(a b s) (concatStrings [a s b])))\n\n;; delimit a string with parentheses\n(typ parens (-> String String))\n(def parens (delimit \'(\' \')\'))\n\n;\n; SVG Manipulating Functions\n;\n\n\n; === Attribute Lookup ===\n\n(typ lookupWithDefault (forall (k v) (-> v k (List [k v]) v)))\n(defrec lookupWithDefault (\\(default k dict)\n  (let foo (lookupWithDefault default k)\n  (case dict\n    ([]            default)\n    ([[k1 v]|rest] (if (= k k1) v (foo rest)))))))\n\n(typ lookup (forall (k v) (-> k (List [k v]) (union v Null))))\n(defrec lookup (\\(k dict)\n  (let foo (lookup k)\n  (case dict\n    ([]            null)\n    ([[k1 v]|rest] (if (= k k1) v (foo rest)))))))\n\n(typ addExtras (-> Num (List [String (List [Num AttrVal])]) SVG SVG))\n(defrec addExtras (\\(i extras shape)\n  (case extras\n    ([] shape)\n    ([[k table] | rest]\n      (let v (lookup i table)\n      (typecase v\n        (Null    (addExtras i rest shape))\n        (AttrVal (addExtras i rest (addAttr shape [k v])))))))))\n\n(typ lookupAttr (-> SVG AttrName (union AttrVal Null)))\n(def lookupAttr (\\([_ attrs _] k) (lookup k attrs)))\n\n(typ lookupAttrWithDefault (-> AttrVal SVG AttrName AttrVal))\n(def lookupAttrWithDefault (\\(default [_ attrs _] k) (lookupWithDefault default k attrs)))\n\n; Pairs of Type-Specific Lookup Functions\n\n(typ lookupNumAttr (-> SVG AttrName (union Num Null)))\n(def lookupNumAttr (\\([_ attrs _] k)\n  (let val (lookup k attrs)\n  (typecase val (Num val) (_ null)))))\n\n(typ lookupNumAttrWithDefault (-> Num SVG AttrName Num))\n(def lookupNumAttrWithDefault (\\(default shape k)\n  (let val (lookupNumAttr shape k)\n  (typecase val (Num val) (Null default)))))\n\n(typ lookupPointsAttr (-> SVG AttrName (union Points Null)))\n(def lookupPointsAttr (\\([_ attrs _] k)\n  (let val (lookup k attrs)\n  (typecase val ((List [Num Num]) val) (_ null)))))\n\n(typ lookupPointsAttrWithDefault (-> Points SVG AttrName Points))\n(def lookupPointsAttrWithDefault (\\(default shape k)\n  (let val (lookupPointsAttr shape k)\n  (typecase val ((List [Num Num]) val) (Null default)))))\n\n(typ lookupStringAttr (-> SVG AttrName (union String Null)))\n(def lookupStringAttr (\\([_ attrs _] k)\n  (let val (lookup k attrs)\n  (typecase val (String val) (_ null)))))\n\n(typ lookupStringAttrWithDefault (-> String SVG AttrName String))\n(def lookupStringAttrWithDefault (\\(default shape k)\n  (let val (lookupStringAttr shape k)\n  (typecase val (String val) (Null default)))))\n\n; === Points ===\n\n(def Vec2D [Num Num])\n\n(typ vec2DPlus (-> Point Vec2D Point))\n(def vec2DPlus (\\(pt vec)\n  [\n    (+ (fst pt) (fst vec))\n    (+ (snd pt) (snd vec))\n  ]\n))\n\n; Hide from shape tools\n; (typ vec2DMinus (-> Point Point Vec2D))\n(def vec2DMinus (\\(pt vec)\n  [\n    (- (fst pt) (fst vec))\n    (- (snd pt) (snd vec))\n  ]\n))\n\n(typ vec2DScalarMult (-> Num Vec2D Point))\n(def vec2DScalarMult (\\(num vec)\n  [\n    (* (fst vec) num)\n    (* (snd vec) num)\n  ]\n))\n\n(typ vec2DScalarDiv (-> Num Vec2D Point))\n(def vec2DScalarDiv (\\(num vec)\n  [\n    (/ (fst vec) num)\n    (/ (snd vec) num)\n  ]\n))\n\n(typ vec2DLength (-> Point Point Num))\n(def vec2DLength (\\([x1 y1] [x2 y2])\n  (let [dx dy] [(- x2 x1) (- y2 y1)]\n  (sqrt (+ (* dx dx) (* dy dy))))))\n\n\n; === Circles ===\n\n(def Circle SVG)\n\n;; argument order - color, x, y, radius\n;; creates a circle, center at (x,y) with given radius and color\n(typ circle (-> Color Point Radius Circle))\n(def circle (\\(fill [cx cy] r)\n  [\'circle\'\n     [[\'cx\' cx] [\'cy\' cy] [\'r\' r] [\'fill\' fill]]\n     []]))\n\n(typ circleCenter (-> Circle Point))\n(def circleCenter (\\circle\n  [\n    (lookupNumAttrWithDefault 0 circle \'cx\')\n    (lookupNumAttrWithDefault 0 circle \'cy\')\n  ]\n))\n\n(typ circleRadius (-> Circle Num))\n(def circleRadius (\\circle\n  (lookupNumAttrWithDefault 0 circle \'r\')\n))\n\n(typ circleDiameter (-> Circle Num))\n(def circleDiameter (\\circle\n  (* 2 (circleRadius circle))\n))\n\n(typ circleNorth (-> Circle Point))\n(def circleNorth (\\circle\n  (let [cx cy] (circleCenter circle)\n    [cx (- cy (circleRadius circle))]\n  )\n))\n\n(typ circleEast (-> Circle Point))\n(def circleEast (\\circle\n  (let [cx cy] (circleCenter circle)\n    [(+ cx (circleRadius circle)) cy]\n  )\n))\n\n(typ circleSouth (-> Circle Point))\n(def circleSouth (\\circle\n  (let [cx cy] (circleCenter circle)\n    [cx (+ cy (circleRadius circle))]\n  )\n))\n\n(typ circleWest (-> Circle Point))\n(def circleWest (\\circle\n  (let [cx cy] (circleCenter circle)\n    [(- cx (circleRadius circle)) cy]\n  )\n))\n\n\n;; argument order - color, width, x, y, radius\n;; Just as circle, except new width parameter determines thickness of ring\n(typ ring (-> Color StrokeWidth Point Radius SVG))\n(def ring (\\(color strokeWidth [x y] r)\n  [\'circle\'\n     [ [\'cx\' x] [\'cy\' y] [\'r\' r] [\'fill\' \'none\'] [\'stroke\' color] [\'stroke-width\' strokeWidth] ]\n     []]))\n\n\n; === Ellipses ===\n\n(def Ellipse SVG)\n\n;; argument order - color, x, y, x-radius, y-radius\n;; Just as circle, except radius is separated into x and y parameters\n(typ ellipse (-> Color Point HalfWidth HalfHeight Ellipse))\n(def ellipse (\\(fill [x y] rx ry)\n  [\'ellipse\'\n     [ [\'cx\' x] [\'cy\' y] [\'rx\' rx] [\'ry\' ry] [\'fill\' fill] ]\n     []]))\n\n(typ ellipseCenter (-> Ellipse Point))\n(def ellipseCenter (\\ellipse\n  [\n    (lookupNumAttrWithDefault 0 ellipse \'cx\')\n    (lookupNumAttrWithDefault 0 ellipse \'cy\')\n  ]\n))\n\n(typ ellipseRadiusX (-> Ellipse Num))\n(def ellipseRadiusX (\\ellipse\n  (lookupNumAttrWithDefault 0 ellipse \'rx\')\n))\n\n(typ ellipseRadiusY (-> Ellipse Num))\n(def ellipseRadiusY (\\ellipse\n  (lookupNumAttrWithDefault 0 ellipse \'ry\')\n))\n\n(typ ellipseDiameterX (-> Ellipse Num))\n(def ellipseDiameterX (\\ellipse\n  (* 2 (ellipseRadiusX ellipse))\n))\n\n(typ ellipseDiameterY (-> Ellipse Num))\n(def ellipseDiameterY (\\ellipse\n  (* 2 (ellipseRadiusY ellipse))\n))\n\n(typ ellipseNorth (-> Ellipse Point))\n(def ellipseNorth (\\ellipse\n  (let [cx cy] (ellipseCenter ellipse)\n    [cx (- cy (ellipseRadiusY ellipse))]\n  )\n))\n\n(typ ellipseEast (-> Ellipse Point))\n(def ellipseEast (\\ellipse\n  (let [cx cy] (ellipseCenter ellipse)\n    [(+ cx (ellipseRadiusX ellipse)) cy]\n  )\n))\n\n(typ ellipseSouth (-> Ellipse Point))\n(def ellipseSouth (\\ellipse\n  (let [cx cy] (ellipseCenter ellipse)\n    [cx (+ cy (ellipseRadiusY ellipse))]\n  )\n))\n\n(typ ellipseWest (-> Ellipse Point))\n(def ellipseWest (\\ellipse\n  (let [cx cy] (ellipseCenter ellipse)\n    [(- cx (ellipseRadiusX ellipse)) cy]\n  )\n))\n\n\n; === Bounds-based shapes (Oval and Box) ===\n\n(def BoundedShape SVG)\n(def Bounds [Num Num Num Num])\n\n(typ boundedShapeLeft (-> BoundedShape Num))\n(def boundedShapeLeft (\\shape\n  (lookupNumAttrWithDefault 0 shape \'LEFT\')\n))\n\n(typ boundedShapeTop (-> BoundedShape Num))\n(def boundedShapeTop (\\shape\n  (lookupNumAttrWithDefault 0 shape \'TOP\')\n))\n\n(typ boundedShapeRight (-> BoundedShape Num))\n(def boundedShapeRight (\\shape\n  (lookupNumAttrWithDefault 0 shape \'RIGHT\')\n))\n\n(typ boundedShapeBot (-> BoundedShape Num))\n(def boundedShapeBot (\\shape\n  (lookupNumAttrWithDefault 0 shape \'BOT\')\n))\n\n(typ boundedShapeWidth (-> BoundedShape Num))\n(def boundedShapeWidth (\\shape\n  (- (boundedShapeRight shape) (boundedShapeLeft shape))\n))\n\n(typ boundedShapeHeight (-> BoundedShape Num))\n(def boundedShapeHeight (\\shape\n  (- (boundedShapeBot shape) (boundedShapeTop shape))\n))\n\n(typ boundedShapeLeftTop (-> BoundedShape Point))\n(def boundedShapeLeftTop (\\shape\n  [\n    (boundedShapeLeft shape)\n    (boundedShapeTop shape)\n  ]\n))\n\n(typ boundedShapeCenterTop (-> BoundedShape Point))\n(def boundedShapeCenterTop (\\shape\n  [\n    (/ (+ (boundedShapeLeft shape) (boundedShapeRight shape)) 2)\n    (boundedShapeTop shape)\n  ]\n))\n\n(typ boundedShapeRightTop (-> BoundedShape Point))\n(def boundedShapeRightTop (\\shape\n  [\n    (boundedShapeRight shape)\n    (boundedShapeTop shape)\n  ]\n))\n\n(typ boundedShapeRightCenter (-> BoundedShape Point))\n(def boundedShapeRightCenter (\\shape\n  [\n    (boundedShapeRight shape)\n    (/ (+ (boundedShapeTop shape) (boundedShapeBot shape)) 2)\n  ]\n))\n\n(typ boundedShapeRightBot (-> BoundedShape Point))\n(def boundedShapeRightBot (\\shape\n  [\n    (boundedShapeRight shape)\n    (boundedShapeBot shape)\n  ]\n))\n\n(typ boundedShapeCenterBot (-> BoundedShape Point))\n(def boundedShapeCenterBot (\\shape\n  [\n    (/ (+ (boundedShapeLeft shape) (boundedShapeRight shape)) 2)\n    (boundedShapeBot shape)\n  ]\n))\n\n(typ boundedShapeLeftBot (-> BoundedShape Point))\n(def boundedShapeLeftBot (\\shape\n  [\n    (boundedShapeLeft shape)\n    (boundedShapeBot shape)\n  ]\n))\n\n(typ boundedShapeLeftCenter (-> BoundedShape Point))\n(def boundedShapeLeftCenter (\\shape\n  [\n    (boundedShapeLeft shape)\n    (/ (+ (boundedShapeTop shape) (boundedShapeBot shape)) 2)\n  ]\n))\n\n(typ boundedShapeCenter (-> BoundedShape Point))\n(def boundedShapeCenter (\\shape\n  [\n    (/ (+ (boundedShapeLeft shape) (boundedShapeRight shape)) 2)\n    (/ (+ (boundedShapeTop shape) (boundedShapeBot shape)) 2)\n  ]\n))\n\n\n; === Rectangles ===\n\n(def Rect SVG)\n\n;; argument order - color, [x, y], width, height\n;; creates a rectangle of given width and height with (x,y) as the top left corner coordinate\n(typ rect (-> Color Point Width Height Rect))\n(def rect (\\(fill [x y] w h)\n  [\'rect\'\n     [ [\'x\' x] [\'y\' y] [\'width\' w] [\'height\' h] [\'fill\' fill] ]\n     []]))\n\n(typ square (-> Color Point Width Rect))\n(def square (\\(fill topLeft w) (rect fill topLeft w w)))\n\n(typ rectWidth (-> Rect Num))\n(def rectWidth (\\rect\n  (lookupNumAttrWithDefault 0 rect \'width\')\n))\n\n(typ rectHeight (-> Rect Num))\n(def rectHeight (\\rect\n  (lookupNumAttrWithDefault 0 rect \'height\')\n))\n\n(typ rectLeftTop (-> Rect Point))\n(def rectLeftTop (\\rect\n  [\n    (lookupNumAttrWithDefault 0 rect \'x\')\n    (lookupNumAttrWithDefault 0 rect \'y\')\n  ]\n))\n\n(typ rectCenterTop (-> Rect Point))\n(def rectCenterTop (\\rect\n  (vec2DPlus\n    (rectLeftTop rect)\n    [ (/ (rectWidth rect) 2) 0 ]\n  )\n))\n\n(typ rectRightTop (-> Rect Point))\n(def rectRightTop (\\rect\n  (vec2DPlus\n    (rectLeftTop rect)\n    [ (rectWidth rect) 0 ]\n  )\n))\n\n(typ rectRightCenter (-> Rect Point))\n(def rectRightCenter (\\rect\n  (vec2DPlus\n    (rectLeftTop rect)\n    [ (rectWidth rect) (/ (rectHeight rect) 2) ]\n  )\n))\n\n(typ rectRightBot (-> Rect Point))\n(def rectRightBot (\\rect\n  (vec2DPlus\n    (rectLeftTop rect)\n    [ (rectWidth rect) (rectHeight rect) ]\n  )\n))\n\n(typ rectCenterBot (-> Rect Point))\n(def rectCenterBot (\\rect\n  (vec2DPlus\n    (rectLeftTop rect)\n    [ (/ (rectWidth rect) 2) (rectHeight rect) ]\n  )\n))\n\n(typ rectLeftBot (-> Rect Point))\n(def rectLeftBot (\\rect\n  (vec2DPlus\n    (rectLeftTop rect)\n    [0 (rectHeight rect) ]\n  )\n))\n\n(typ rectLeftCenter (-> Rect Point))\n(def rectLeftCenter (\\rect\n  (vec2DPlus\n    (rectLeftTop rect)\n    [0 (/ (rectHeight rect) 2) ]\n  )\n))\n\n(typ rectCenter (-> Rect Point))\n(def rectCenter (\\rect\n  (vec2DPlus\n    (rectLeftTop rect)\n    [ (/ (rectWidth rect) 2) (/ (rectHeight rect) 2) ]\n  )\n))\n\n\n; === Lines ===\n\n(def Line SVG)\n\n;; argument order - color, width, [x1, y1], [x2, y2]\n(typ line (-> Color StrokeWidth Point Point Line))\n(def line (\\(color strokeWidth [x1 y1] [x2 y2])\n  [\'line\'\n     [ [\'x1\' x1] [\'y1\' y1] [\'x2\' x2] [\'y2\' y2] [\'stroke\' color] [\'stroke-width\' strokeWidth] ]\n     []]))\n\n(typ lineStart (-> Line Point))\n(def lineStart (\\line\n  [\n    (lookupNumAttrWithDefault 0 line \'x1\')\n    (lookupNumAttrWithDefault 0 line \'y1\')\n  ]\n))\n\n(typ lineEnd (-> Line Point))\n(def lineEnd (\\line\n  [\n    (lookupNumAttrWithDefault 0 line \'x2\')\n    (lookupNumAttrWithDefault 0 line \'y2\')\n  ]\n))\n\n(typ lineMidpoint (-> Line Point))\n(def lineMidpoint (\\line\n  (midpoint (lineStart line) (lineEnd line))\n))\n\n\n;; argument order - fill, stroke, width, points\n;; creates a polygon following the list of points, with given fill color and a border with given width and stroke\n(typ polygon (-> Color Color StrokeWidth Points SVG))\n(def polygon (\\(fill strokeColor strokeWidth pts)\n  [\'polygon\'\n     [ [\'fill\' fill] [\'points\' pts] [\'stroke\' strokeColor] [\'stroke-width\' strokeWidth] ]\n     []]))\n\n;; argument order - fill, stroke, width, points\n;; See polygon\n(typ polyline (-> Color Color StrokeWidth Points SVG))\n(def polyline (\\(fill strokeColor strokeWidth pts)\n  [\'polyline\'\n     [ [\'fill\' fill] [\'points\' pts] [\'stroke\' strokeColor] [\'stroke-width\' strokeWidth] ]\n     []]))\n\n;; argument order - fill, stroke, width, d\n;; Given SVG path command d, create path with given fill color, stroke and width\n;; See https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths for path command info\n(typ path (-> Color Color StrokeWidth PathCmds SVG))\n(def path (\\(fill strokeColor strokeWidth d)\n  [\'path\'\n     [ [\'fill\' fill] [\'stroke\' strokeColor] [\'stroke-width\' strokeWidth] [\'d\' d] ]\n     []]))\n\n;; argument order - x, y, string\n;; place a text string with top left corner at (x,y) - with default color & font\n(typ text (-> Point String SVG))\n(def text (\\([x y] string)\n   [\'text\' [[\'x\' x] [\'y\' y] [\'style\' \'fill:black\']\n            [\'font-family\' \'Tahoma, sans-serif\']]\n           [[\'TEXT\' string]]]))\n\n;; argument order - shape, new attribute\n;; Add a new attribute to a given Shape\n(typ addAttr (-> SVG AttrPair SVG))\n(def addAttr (\\([shapeKind oldAttrs children] newAttr)\n  [shapeKind (snoc newAttr oldAttrs) children]))\n\n(typ consAttr (-> SVG AttrPair SVG))\n(def consAttr (\\([shapeKind oldAttrs children] newAttr)\n  [shapeKind (cons newAttr oldAttrs) children]))\n\n;; Given a list of shapes, compose into a single SVG\n(typ svg (-> (List SVG) SVG))\n(def svg (\\shapes [\'svg\' [] shapes]))\n\n;; argument order - x-maximum, y-maximum, shapes\n;; Given a list of shapes, compose into a single SVG within the x & y maxima\n(typ svgViewBox (-> Num Num (List SVG) SVG))\n(def svgViewBox (\\(xMax yMax shapes)\n  (let [sx sy] [(toString xMax) (toString yMax)]\n  [\'svg\'\n    [[\'x\' \'0\'] [\'y\' \'0\'] [\'viewBox\' (joinStrings \' \' [\'0\' \'0\' sx sy])]]\n    shapes])))\n\n;; As rect, except x & y represent the center of the defined rectangle\n(typ rectByCenter (-> Color Point HalfWidth HalfHeight Rect))\n(def rectByCenter (\\(fill [cx cy] halfW halfH)\n  (rect fill [(- cx halfW) (- cy halfH)] (* 2 halfW) (* 2 halfH))))\n\n;; As square, except x & y represent the center of the defined rectangle\n(typ squareByCenter (-> Color Point HalfWidth Rect))\n(def squareByCenter (\\(fill center halfWidth) (rectByCenter fill center halfWidth halfWidth)))\n\n;; Some shapes with given default values for fill, stroke, and stroke width\n; TODO remove these\n(def circle_    (circle \'red\'))\n(def ellipse_   (ellipse \'orange\'))\n(def rect_      (rect \'#999999\'))\n(def square_    (square \'#999999\'))\n(def line_      (line \'blue\' 2))\n(def polygon_   (polygon \'green\' \'purple\' 3))\n(def path_      (path \'transparent\' \'goldenrod\' 5))\n\n;; updates an SVG by comparing differences with another SVG\n;; Note: accDiff pre-condition: indices in increasing order\n;; (so can\'t just use foldr instead of reverse . foldl)\n(typ updateCanvas (-> SVG SVG SVG))\n(def updateCanvas (\\([_ svgAttrs oldShapes] diff)\n  (let oldShapesI (zip (list1N (len oldShapes)) oldShapes)\n  (let initAcc [[] diff]\n  (let f (\\([i oldShape] [accShapes accDiff])\n    (case accDiff\n      ([]\n        [(cons oldShape accShapes) accDiff])\n      ([[j newShape] | accDiffRest]\n        (if (= i j)\n          [(cons newShape accShapes) accDiffRest]\n          [(cons oldShape accShapes) accDiff]))))\n  (let newShapes (reverse (fst (foldl f initAcc oldShapesI)))\n    [\'svg\' svgAttrs newShapes]))))))\n\n(def addBlob (\\(newShapes [\'svg\' svgAttrs oldShapes])\n  [\'svg\' svgAttrs (append oldShapes newShapes)]))\n\n(typ groupMap (forall (a b) (-> (List a) (-> a b) (List b))))\n(def groupMap (\\(xs f) (map f xs)))\n\n(def autoChose (\\(_ x _) x))\n(def inferred  (\\(x _ _) x))\n(def flow (\\(_ x) x))\n\n; \'constant folding\'\n(def twoPi (* 2 (π)))\n(def halfPi (/ (π) 2))\n\n;; Helper function for nPointsOnCircle, calculates angle of points\n;; Note: angles are calculated clockwise from the traditional pi/2 mark\n(typ nPointsOnUnitCircle (-> Num Num (List Point)))\n(def nPointsOnUnitCircle (\\(n rot)\n  (let off (- halfPi rot)\n  (let foo (\\i\n    (let ang (+ off (* (/ i n) twoPi))\n    [(cos ang) (neg (sin ang))]))\n  (map foo (list0N (- n 1)))))))\n\n(typ nPointsOnCircle (-> Count Radians Point Radius (List Point)))\n;; argument order - Num of points, radians of rotation, x-center, y-center, radius\n;; Scales nPointsOnUnitCircle to the proper size and location with a given radius and center\n(def nPointsOnCircle (\\(n rot [cx cy] r)\n  (let pts (nPointsOnUnitCircle n rot)\n  (map (\\[x y] [(+ cx (* x r)) (+ cy (* y r))]) pts))))\n\n(typ nPointsOnSegment (-> Count Point Point (List Point)))\n(def nPointsOnSegment (\\(n [x1 y1] [x2 y2])\n  (let [xSep ySep] [(/ (- x2 x1) (- n 1)) (/ (- y2 y1) (- n 1))]\n  (map (\\i [(+ x1 (* xSep i)) (+ y1 (* ySep i))]) (zeroTo n)))))\n\n(typ nPointsSepBy (-> Count Point HorizontalDistance VerticalDistance (List Point)))\n(def nPointsSepBy (\\(n [x1 y1] xSep ySep)\n  (map (\\i [(+ x1 (* xSep i)) (+ y1 (* ySep i))]) (zeroTo n))))\n\n(typ nHorizontalPointsSepBy (-> Count Point HorizontalDistance (List Point)))\n(def nHorizontalPointsSepBy (\\(n [x1 y1] sep)\n  (map (\\i [(+ x1 (* sep i)) y1]) (zeroTo n))))\n\n(typ nVerticalPointsSepBy (-> Count Point VerticalDistance (List Point)))\n(def nVerticalPointsSepBy (\\(n [x1 y1] sep)\n  (map (\\i [x1 (+ y1 (* sep i))]) (zeroTo n))))\n\n; Constant distance between points, as many as will fit between start and end point\n(typ pointsBetweenSepBy (-> Point Point Distance (List Point)))\n(def pointsBetweenSepBy (\\(pt1@[x1 y1] pt2 sep)\n  (let totalDistance (vec2DLength pt1 pt2)\n  (let [xStep yStep] (vec2DScalarMult (/ sep totalDistance) (vec2DMinus pt2 pt1))\n  (let stepCount (/ totalDistance sep)\n  (map (\\i [(+ x1 (* xStep i)) (+ y1 (* yStep i))]) (zeroTo stepCount)))))))\n\n(typ nStar (-> Color Color StrokeWidth Num Num Num Num Point SVG))\n;; argument order -\n;; fill color - interior color of star\n;; stroke color - border color of star\n;; width - thickness of stroke\n;; points - number of star points\n;; len1 - length from center to one set of star points\n;; len2 - length from center to other set of star points (either inner or outer compared to len1)\n;; rot - degree of rotation\n;; cx - x-coordinate of center position\n;; cy - y-coordinate of center position\n;; Creates stars that can be modified on a number of parameters\n(def nStar (\\(fill stroke w n len1 len2 rot [cx cy])\n  (let pti (\\[i len]\n    (let anglei (+ (- (/ (* i (π)) n) rot) halfPi)\n    (let xi (+ cx (* len (cos anglei)))\n    (let yi (+ cy (neg (* len (sin anglei))))\n      [xi yi]))))\n  (let lengths\n    (map (\\b (if b len1 len2))\n         (concat (repeat n [true false])))\n  (let indices (list0N (- (* 2! n) 1!))\n    (polygon fill stroke w (map pti (zip indices lengths))))))))\n\n(typ setZones (-> String SVG SVG))\n(def setZones (\\(s shape) (addAttr shape [\'ZONES\' s])))\n\n(typ zones (-> String (List SVG) (List SVG)))\n(def zones (\\(s shapes) (map (setZones s) shapes)))\n  ; TODO eta-reduced version:\n  ; (def zones (\\s (map (setZones s))))\n\n;; Remove all zones from shapes except for the first in the list\n(typ hideZonesTail (-> (List SVG) (List SVG)))\n(def hideZonesTail  (\\[hd | tl] [hd | (zones \'none\' tl)]))\n\n;; Turn all zones to basic for a given list of shapes except for the first shape\n(typ basicZonesTail (-> (List SVG) (List SVG)))\n(def basicZonesTail (\\[hd | tl] [hd | (zones \'basic\' tl)]))\n\n(typ ghost (-> SVG SVG))\n(def ghost\n  ; consAttr (instead of addAttr) makes internal calls to\n  ; Utils.maybeRemoveFirst \'HIDDEN\' slightly faster\n  (\\shape (consAttr shape [\'HIDDEN\' \'\'])))\n\n(def ghosts (map ghost))\n\n;; hSlider_ : Bool -> Bool -> Int -> Int -> Int -> Num -> Num -> Str -> Num\n;; -> [Num (List Svg)]\n;; argument order - dropBall roundInt xStart xEnd y minVal maxVal caption srcVal\n;; dropBall - Determines if the slider ball continues to appear past the edges of the slider\n;; roundInt - Determines whether to round to Ints or not\n;; xStart - left edge of slider\n;; xEnd - right edge of slider\n;; y - y positioning of entire slider bar\n;; minVal - minimum value of slider\n;; maxVal - maximum value of slider\n;; caption - text to display along with the slider\n;; srcVal - the current value given by the slider ball\n(def hSlider_ (\\(dropBall roundInt x0 x1 y minVal maxVal caption srcVal)\n  (let preVal (clamp minVal maxVal srcVal)\n  (let targetVal (if roundInt (round preVal) preVal)\n  (let shapes\n    (let ball\n      (let [xDiff valDiff] [(- x1 x0) (- maxVal minVal)]\n      (let xBall (+ x0 (* xDiff (/ (- srcVal minVal) valDiff)))\n      (if (= preVal srcVal) (circle \'black\' xBall y 10!)\n      (if dropBall          (circle \'black\' 0! 0! 0!)\n                            (circle \'red\' xBall y 10!)))))\n    [ (line \'black\' 3! x0 y x1 y)\n      (text (+ x1 10) (+ y 5) (+ caption (toString targetVal)))\n      (circle \'black\' x0 y 4!) (circle \'black\' x1 y 4!) ball ])\n  [targetVal (ghosts shapes)])))))\n; TODO only draw zones for ball\n\n(def vSlider_ (\\(dropBall roundInt y0 y1 x minVal maxVal caption srcVal)\n  (let preVal (clamp minVal maxVal srcVal)\n  (let targetVal (if roundInt (round preVal) preVal)\n  (let shapes\n    (let ball\n      (let [yDiff valDiff] [(- y1 y0) (- maxVal minVal)]\n      (let yBall (+ y0 (* yDiff (/ (- srcVal minVal) valDiff)))\n      (if (= preVal srcVal) (circle \'black\' x yBall 10!)\n      (if dropBall          (circle \'black\' 0! 0! 0!)\n                            (circle \'red\' x yBall 10!)))))\n    [ (line \'black\' 3! x y0 x y1)\n      ; (text (+ x1 10) (+ y 5) (+ caption (toString targetVal)))\n      (circle \'black\' x y0 4!) (circle \'black\' x y1 4!) ball ])\n  [targetVal (ghosts shapes)])))))\n; TODO only draw zones for ball\n\n(def hSlider (hSlider_ false))\n(def vSlider (vSlider_ false))\n\n;; button_ : Bool -> Num -> Num -> String -> Num -> SVG\n;; Similar to sliders, but just has boolean values\n(def button_ (\\(dropBall xStart y caption xCur)\n  (let [rPoint wLine rBall wSlider] [4! 3! 10! 70!]\n  (let xEnd (+ xStart wSlider)\n  (let xBall (+ xStart (* xCur wSlider))\n  (let xBall_ (clamp xStart xEnd xBall)\n  (let val (< xCur 0.5)\n  (let shapes1\n    [ (circle \'black\' xStart y rPoint)\n      (circle \'black\' xEnd y rPoint)\n      (line \'black\' wLine xStart y xEnd y)\n      (text (+ xEnd 10) (+ y 5) (+ caption (toString val))) ]\n  (let shapes2\n    [ (if (= xBall_ xBall) (circle (if val \'darkgreen\' \'darkred\') xBall y rBall)\n      (if dropBall         (circle \'black\' 0! 0! 0!)\n                           (circle \'red\' xBall y rBall))) ]\n  (let shapes (append (zones \'none\' shapes1) (zones \'basic\' shapes2))\n  [val (ghosts shapes)]))))))))))\n\n(def button (button_ false))\n\n(def xySlider\n  (\\(xStart xEnd yStart yEnd xMin xMax yMin yMax xCaption yCaption xCur yCur)\n    (let [rCorner wEdge rBall] [4! 3! 10!]\n    (let [xDiff yDiff xValDiff yValDiff] [(- xEnd xStart) (- yEnd yStart) (- xMax xMin) (- yMax yMin)]\n    (let xBall (+ xStart (* xDiff (/ (- xCur xMin) xValDiff)))\n    (let yBall (+ yStart (* yDiff (/ (- yCur yMin) yValDiff)))\n    (let cBall (if (and (between xMin xMax xCur) (between yMin yMax yCur)) \'black\' \'red\')\n    (let xVal (ceiling (clamp xMin xMax xCur))\n    (let yVal (ceiling (clamp yMin yMax yCur))\n    (let myLine (\\(x1 y1 x2 y2) (line \'black\' wEdge x1 y1 x2 y2))\n    (let myCirc (\\(x0 y0) (circle \'black\' x0 y0 rCorner))\n    (let shapes\n      [ (myLine xStart yStart xEnd yStart)\n        (myLine xStart yStart xStart yEnd)\n        (myLine xStart yEnd xEnd yEnd)\n        (myLine xEnd yStart xEnd yEnd)\n        (myCirc xStart yStart)\n        (myCirc xStart yEnd)\n        (myCirc xEnd yStart)\n        (myCirc xEnd yEnd)\n        (circle cBall xBall yBall rBall)\n        (text (- (+ xStart (/ xDiff 2)) 40) (+ yEnd 20) (+ xCaption (toString xVal)))\n        (text (+ xEnd 10) (+ yStart (/ yDiff 2)) (+ yCaption (toString yVal))) ]\n    [ [ xVal yVal ] (ghosts shapes) ]\n))))))))))))\n\n(typ enumSlider (forall a (-> Num Num Num [a|(List a)] String Num [a (List SVG)])))\n(def enumSlider (\\(x0 x1 y enum@[a|_] caption srcVal)\n  (let n (len enum)\n  (let [minVal maxVal] [0! n]\n  (let preVal (clamp minVal maxVal srcVal)\n  (let i (floor preVal)\n  (let item ; using dummy first element for typechecking\n    (let item_ (nth enum (if (= i n) (- n 1) i))\n    (typecase item_\n      (Null a)\n      (_    item_)))\n  (let wrap (\\circ (addAttr circ [\'SELECTED\' \'\'])) ; TODO\n  (let shapes\n    (let rail [ (line \'black\' 3! x0 y x1 y) ]\n    (let ball\n      (let [xDiff valDiff] [(- x1 x0) (- maxVal minVal)]\n      (let xBall (+ x0 (* xDiff (/ (- srcVal minVal) valDiff)))\n      (let colorBall (if (= preVal srcVal) \'black\' \'red\')\n        [ (wrap (circle colorBall xBall y 10!)) ])))\n    (let endpoints\n      [ (wrap (circle \'black\' x0 y 4!)) (wrap (circle \'black\' x1 y 4!)) ]\n    (let tickpoints\n      (let sep (/ (- x1 x0) n)\n      (map (\\j (wrap (circle \'grey\' (+ x0 (mult j sep)) y 4!)))\n           (range 1! (- n 1!))))\n    (let label [ (text (+ x1 10!) (+ y 5!) (+ caption (toString item))) ]\n    (concat [ rail endpoints tickpoints ball label ]))))))\n  [item (ghosts shapes)])))))))))\n\n(def addSelectionSliders (\\(y0 seeds shapesCaps)\n  (let shapesCapsSeeds (zip shapesCaps (take seeds (len shapesCaps)))\n  (let foo (\\[i [[shape cap] seed]]\n    (let [k _ _] shape\n    (let enum\n      (if (= k \'circle\') [\'\' \'cx\' \'cy\' \'r\']\n      (if (= k \'line\')   [\'\' \'x1\' \'y1\' \'x2\' \'y2\']\n      (if (= k \'rect\')   [\'\' \'x\' \'y\' \'width\' \'height\']\n        [(+ \'NO SELECTION ENUM FOR KIND \' k)])))\n    (let [item slider] (enumSlider 20! 170! (+ y0 (mult i 30!)) enum cap seed)\n    (let shape1 (addAttr shape [\'SELECTED\' item]) ; TODO overwrite existing\n    [shape1|slider])))))\n  (concat (mapi foo shapesCapsSeeds))))))\n\n; Text Widgets\n\n(def simpleText (\\(family color size x1 x2 y horizAlignSeed textVal)\n  (let xMid (+ x1 (/ (- x2 x1) 2!))\n  (let [anchor hAlignSlider]\n    (let dx (/ (- x2 x1) 4!)\n    (let yLine (+ 30! y)\n    (enumSlider (- xMid dx) (+ xMid dx) yLine\n      [\'start\' \'middle\' \'end\'] \'\' horizAlignSeed)))\n  (let x\n    (if (= anchor \'start\') x1\n    (if (= anchor \'middle\') xMid\n    (if (= anchor \'end\') x2\n      \'CRASH\')))\n  (let theText\n    [\'text\'\n      [[\'x\' x] [\'y\' y]\n       [\'style\' (+ \'fill:\' color)]\n       [\'font-family\' family] [\'font-size\' size]\n       [\'text-anchor\' anchor]]\n      [[\'TEXT\' textVal]]]\n  (let rails\n    (let pad 15!\n    (let yBaseLine (+ y pad)\n    (let xSideLine (- x1 pad)\n    (let rail (line \'gray\' 3)\n    (let baseLine (rail xSideLine yBaseLine x2 yBaseLine)\n    (let sideLine (rail xSideLine yBaseLine xSideLine (- y size))\n    (let dragBall (circle \'black\' x yBaseLine 8!)\n    (ghosts [baseLine sideLine dragBall]))))))))\n  (concat [[theText] hAlignSlider rails])\n)))))))\n\n\n(typ rotate (-> SVG Num Num Num SVG))\n;; argument order - shape, rot, x, y\n;; Takes a shape rotates it rot degrees around point (x,y)\n(def rotate (\\(shape n1 n2 n3)\n  (addAttr shape [\'transform\' [[\'rotate\' n1 n2 n3]]])))\n\n(typ rotateAround (-> Num Num Num SVG SVG))\n(def rotateAround (\\(rot x y shape)\n  (addAttr shape [\'transform\' [[\'rotate\' rot x y]]])))\n\n; Convert radians to degrees\n(typ radToDeg (-> Num Num))\n(def radToDeg (\\rad (* (/ rad (π)) 180!)))\n\n; Convert degrees to radians\n(typ degToRad (-> Num Num))\n(def degToRad (\\deg (* (/ deg 180!) (π))))\n\n; Polygon and Path Helpers\n\n(typ middleOfPoints (-> (List Point) Point))\n(def middleOfPoints (\\pts\n  (let [xs ys] [(map fst pts) (map snd pts)]\n  (let [xMin xMax] [(minimum xs) (maximum xs)]\n  (let [yMin yMax] [(minimum ys) (maximum ys)]\n  (let xMiddle (noWidgets (+ xMin (* 0.5 (- xMax xMin))))\n  (let yMiddle (noWidgets (+ yMin (* 0.5 (- yMax yMin))))\n    [xMiddle yMiddle] )))))))\n\n(typ polygonPoints (-> SVG Points))\n(def polygonPoints (\\shape@[shapeKind _ _]\n  (case shapeKind\n    (\'polygon\' (lookupPointsAttrWithDefault [] shape \'points\'))\n    (_         []))))\n\n(typ allPointsOfPathCmds_ (-> PathCmds (List [(union Num String) (union Num String)])))\n(defrec allPointsOfPathCmds_ (\\cmds (case cmds\n  ([]    [])\n  ([\'Z\'] [])\n\n  ([\'M\' x y | rest] (cons [x y] (allPointsOfPathCmds_ rest)))\n  ([\'L\' x y | rest] (cons [x y] (allPointsOfPathCmds_ rest)))\n\n  ([\'Q\' x1 y1 x y | rest]\n    (append [[x1 y1] [x y]] (allPointsOfPathCmds_ rest)))\n\n  ([\'C\' x1 y1 x2 y2 x y | rest]\n    (append [[x1 y1] [x2 y2] [x y]] (allPointsOfPathCmds_ rest)))\n\n  (_ [(let _ (debug \"Prelude.allPointsOfPathCmds_: not Nums...\") [-1 -1])])\n)))\n\n; (typ allPointsOfPathCmds (-> PathCmds (List Point)))\n; (def allPointsOfPathCmds (\\cmds\n;   (let toNum (\\numOrString\n;     (typecase numOrString (Num numOrString) (String -1)))\n;   (map (\\[x y] [(toNum x) (toNum y)]) (allPointsOfPathCmds_ cmds)))))\n\n; TODO remove inner annotations and named lambda\n\n(typ allPointsOfPathCmds (-> PathCmds (List Point)))\n(def allPointsOfPathCmds (\\cmds\n  (typ toNum (-> (union Num String) Num))\n  (let toNum (\\numOrString\n    (typecase numOrString (Num numOrString) (String -1)))\n  (typ foo (-> [(union Num String) (union Num String)] Point))\n  (let foo (\\[x y] [(toNum x) (toNum y)])\n  (map foo (allPointsOfPathCmds_ cmds))))))\n\n\n; Raw Shapes\n\n(def rawShape (\\(kind attrs) [kind attrs []]))\n\n(typ rawRect (-> Color Color StrokeWidth Num Num Num Num Num Rect))\n(def rawRect (\\(fill stroke strokeWidth x y w h rot)\n  (let [cx cy] [(+ x (/ w 2!)) (+ y (/ h 2!))]\n  (rotateAround rot cx cy\n    (rawShape \'rect\' [\n      [\'x\' x] [\'y\' y] [\'width\' w] [\'height\' h]\n      [\'fill\' fill] [\'stroke\' stroke] [\'stroke-width\' strokeWidth] ])))))\n\n(typ rawCircle (-> Color Color StrokeWidth Num Num Degrees Circle))\n(def rawCircle (\\(fill stroke strokeWidth cx cy r)\n  (rawShape \'circle\' [\n    [\'cx\' cx] [\'cy\' cy] [\'r\' r]\n    [\'fill\' fill] [\'stroke\' stroke] [\'stroke-width\' strokeWidth] ])))\n\n(typ rawEllipse (-> Color Color StrokeWidth Num Num Num Num Degrees Ellipse))\n(def rawEllipse (\\(fill stroke strokeWidth cx cy rx ry rot)\n  (rotateAround rot cx cy\n    (rawShape \'ellipse\' [\n      [\'cx\' cx] [\'cy\' cy] [\'rx\' rx] [\'ry\' ry]\n      [\'fill\' fill] [\'stroke\' stroke] [\'stroke-width\' strokeWidth] ]))))\n\n(typ rawPolygon (-> Color Color StrokeWidth Points Degrees SVG))\n(def rawPolygon (\\(fill stroke w pts rot)\n  (let [cx cy] (middleOfPoints pts)\n  (rotateAround rot cx cy\n    (rawShape \'polygon\'\n      [ [\'fill\' fill] [\'points\' pts] [\'stroke\' stroke] [\'stroke-width\' w] ])))))\n\n(typ rawPath (-> Color Color StrokeWidth PathCmds Degrees SVG))\n(def rawPath (\\(fill stroke w d rot)\n  (let [cx cy] (middleOfPoints (allPointsOfPathCmds d))\n  (rotateAround rot cx cy\n    (rawShape \'path\'\n      [ [\'fill\' fill] [\'d\' d] [\'stroke\' stroke] [\'stroke-width\' w] ])))))\n\n\n; Shapes via Bounding Boxes\n\n(typ box (-> Bounds Color Color Num BoundedShape))\n(def box (\\(bounds fill stroke strokeWidth)\n  (let [x y xw yh] bounds\n  [\'BOX\'\n    [ [\'LEFT\' x] [\'TOP\' y] [\'RIGHT\' xw] [\'BOT\' yh]\n      [\'fill\' fill] [\'stroke\' stroke] [\'stroke-width\' strokeWidth]\n    ] []\n  ])))\n\n; string fill/stroke/stroke-width attributes to avoid sliders\n(typ hiddenBoundingBox (-> Bounds BoundedShape))\n(def hiddenBoundingBox (\\bounds\n  (ghost (box bounds \'transparent\' \'transparent\' \'0\'))))\n\n(typ simpleBoundingBox (-> Bounds BoundedShape))\n(def simpleBoundingBox (\\bounds\n  (ghost (box bounds \'transparent\' \'darkblue\' 1))))\n\n(typ strList (-> (List String) String))\n(def strList\n  (let foo (\\(x acc) (+ (+ acc (if (= acc \'\') \'\' \' \')) (toString x)))\n  (foldl foo \'\')))\n\n(typ fancyBoundingBox (-> Bounds (List SVG)))\n(def fancyBoundingBox (\\bounds\n  (let [left top right bot] bounds\n  (let [width height] [(- right left) (- bot top)]\n  (let [c1 c2 r] [\'darkblue\' \'skyblue\' 6]\n  [ (ghost (box bounds \'transparent\' c1 1))\n    (ghost (setZones \'none\' (circle c2 left top r)))\n    (ghost (setZones \'none\' (circle c2 right top r)))\n    (ghost (setZones \'none\' (circle c2 right bot r)))\n    (ghost (setZones \'none\' (circle c2 left bot r)))\n    (ghost (setZones \'none\' (circle c2 left (+ top (/ height 2)) r)))\n    (ghost (setZones \'none\' (circle c2 right (+ top (/ height 2)) r)))\n    (ghost (setZones \'none\' (circle c2 (+ left (/ width 2)) top r)))\n    (ghost (setZones \'none\' (circle c2 (+ left (/ width 2)) bot r)))\n  ])))))\n\n(typ groupWithPad (-> Num Bounds (List SVG) SVG))\n(def groupWithPad (\\(pad bounds shapes)\n  (let [left top right bot] bounds\n  (let paddedBounds [(- left pad) (- top pad) (+ right pad) (+ bot pad)]\n  [\'g\' [[\'BOUNDS\' bounds]]\n       (cons (hiddenBoundingBox paddedBounds) shapes)]\n))))\n\n(typ group (-> Bounds (List SVG) SVG))\n(def group (groupWithPad (let nGroupPad 20 nGroupPad)))\n\n  ; NOTE:\n  ;   keep the names nGroupPad and nPolyPathPad (and values)\n  ;   in sync with ExpressionBasedTransform.elm\n\n  ; (def group (groupWithPad 15))\n\n(def polyPathGroup (groupWithPad (let nPolyPathPad 10 nPolyPathPad)))\n\n; TODO make one pass over pts\n(typ boundsOfPoints (-> (List Point) Bounds))\n(def boundsOfPoints (\\pts\n  (let left  (minimum (map fst pts))\n  (let right (maximum (map fst pts))\n  (let top   (minimum (map snd pts))\n  (let bot   (maximum (map snd pts))\n    [left top right bot]\n))))))\n\n(typ extremeShapePoints (-> SVG Points))\n(def extremeShapePoints (\\shape@[kind _ _]\n  (case kind\n\n    (\'line\'\n      (let attrs@[x1 y1 x2 y2] (map (lookupAttr shape) [\"x1\" \"y1\" \"x2\" \"y2\"])\n      (typecase attrs\n        ([Num Num Num Num] [[x1 y1] [x2 y2]])\n        (_ []))))\n\n    (\'rect\'\n      (let attrs@[x y w h] (map (lookupAttr shape) [\"x\" \"y\" \"width\" \"height\"])\n      (typecase attrs\n        ([Num Num Num Num] [[x y] [(+ x w) (+ y h)]])\n        (_ []))))\n\n    (\'circle\'\n      (let attrs@[cx cy r] (map (lookupAttr shape) [\"cx\" \"cy\" \"r\"])\n      (typecase attrs\n        ([Num Num Num] [[(- cx r) (- cy r)] [(+ cx r) (+ cy r)]])\n        (_ []))))\n\n    (\'ellipse\'\n      (let attrs@[cx cy rx ry] (map (lookupAttr shape) [\"cx\" \"cy\" \"rx\" \"ry\"])\n      (typecase attrs\n        ([Num Num Num Num] [[(- cx rx) (- cy ry)] [(+ cx rx) (+ cy ry)]])\n        (_ []))))\n\n    (\'polygon\' (polygonPoints shape))\n\n    (\'path\'\n      (let pathCmds (lookupAttr shape \"d\")\n      (typecase pathCmds\n        ((List (union String Num)) (allPointsOfPathCmds pathCmds))\n        (_ []))))\n\n    (_ [])\n)))\n\n(typ anchoredGroup (-> (List SVG) SVG))\n(def anchoredGroup (\\shapes\n  (let bounds (boundsOfPoints (concat (map extremeShapePoints shapes)))\n  (group bounds shapes)\n)))\n\n; (def group (\\(bounds shapes)\n;   [\'g\' [[\'BOUNDS\' bounds]]\n;        (cons (hiddenBoundingBox bounds) shapes)]))\n\n       ; (concat [(fancyBoundingBox bounds) shapes])]))\n\n; TODO no longer used...\n(typ rotatedRect (-> Color Num Num Num Num Num Rect))\n(def rotatedRect (\\(fill x y w h rot)\n  (let [cx cy] [(+ x (/ w 2!)) (+ y (/ h 2!))]\n  (let bounds [x y (+ x w) (+ y h)]\n  (let shape (rotateAround rot cx cy (rect fill [x y] w h))\n  (group bounds [shape])\n)))))\n\n(typ rectangle (-> Color Color Num Num Bounds Rect))\n(def rectangle (\\(fill stroke strokeWidth rot bounds)\n  (let [left top right bot] bounds\n  (let [cx cy] [(+ left (/ (- right left) 2!)) (+ top (/ (- bot top) 2!))]\n  (let shape (rotateAround rot cx cy (box bounds fill stroke strokeWidth))\n  shape\n)))))\n  ; (group bounds [shape])\n\n; TODO no longer used...\n(typ rotatedEllipse (-> Color Num Num Num Num Num Ellipse))\n(def rotatedEllipse (\\(fill cx cy rx ry rot)\n  (let bounds [(- cx rx) (- cy ry) (+ cx rx) (+ cy ry)]\n  (let shape (rotateAround rot cx cy (ellipse fill cx cy rx ry))\n  (group bounds [shape])\n))))\n\n; TODO take rot\n(typ oval (-> Color Color Num Bounds BoundedShape))\n(def oval (\\(fill stroke strokeWidth bounds)\n  (let [left top right bot] bounds\n  (let shape\n    [\'OVAL\'\n       [ [\'LEFT\' left] [\'TOP\' top] [\'RIGHT\' right] [\'BOT\' bot]\n         [\'fill\' fill] [\'stroke\' stroke] [\'stroke-width\' strokeWidth] ]\n       []]\n  shape\n))))\n\n; ; TODO take rot\n; (def oval (\\(fill stroke strokeWidth bounds)\n;   (let [left top right bot] bounds\n;   (let [rx ry] [(/ (- right left) 2!) (/ (- bot top) 2!)]\n;   (let [cx cy] [(+ left rx) (+ top ry)]\n;   (let shape ; TODO change def ellipse to take stroke/strokeWidth\n;     [\'ellipse\'\n;        [ [\'cx\' cx] [\'cy\' cy] [\'rx\' rx] [\'ry\' ry]\n;          [\'fill\' fill] [\'stroke\' stroke] [\'stroke-width\' strokeWidth] ]\n;        []]\n;   (group bounds [shape])\n; ))))))\n\n(def scaleBetween (\\(a b pct)\n  (case pct\n    (0 a)\n    (1 b)\n    (_ (+ a (* pct (- b a)))))))\n\n(typ stretchyPolygon (-> Bounds Color Color Num (List Num) SVG))\n(def stretchyPolygon (\\(bounds fill stroke strokeWidth percentages)\n  (let [left top right bot] bounds\n  (let [xScale yScale] [(scaleBetween left right) (scaleBetween top bot)]\n  (let pts (map (\\[xPct yPct] [ (xScale xPct) (yScale yPct) ]) percentages)\n  ; (group bounds [(polygon fill stroke strokeWidth pts)])\n  (polyPathGroup bounds [(polygon fill stroke strokeWidth pts)])\n)))))\n\n; TODO no longer used...\n(def pointyPath (\\(fill stroke w d)\n  (let dot (\\(x y) (ghost (circle \'orange\' x y 5)))\n  (letrec pointsOf (\\cmds\n    (case cmds\n      ([]                     [])\n      ([\'Z\']                  [])\n      ([\'M\' x y | rest]       (append [(dot x y)] (pointsOf rest)))\n      ([\'L\' x y | rest]       (append [(dot x y)] (pointsOf rest)))\n      ([\'Q\' x1 y1 x y | rest] (append [(dot x1 y1) (dot x y)] (pointsOf rest)))\n      ([\'C\' x1 y1 x2 y2 x y | rest] (append [(dot x1 y1) (dot x2 y2) (dot x y)] (pointsOf rest)))\n      (_                      \'ERROR\')))\n  [\'g\' []\n    (cons\n      (path fill stroke w d)\n      [])]\n))))\n      ; turning off points for now\n      ; (pointsOf d)) ]\n\n; can refactor to make one pass\n; can also change representation/template code to pair points\n(def stretchyPath (\\(bounds fill stroke w d)\n  (let [left top right bot] bounds\n  (let [xScale yScale] [(scaleBetween left right) (scaleBetween top bot)]\n  (let dot (\\(x y) (ghost (circle \'orange\' x y 5)))\n  (letrec toPath (\\cmds\n    (case cmds\n      ([]    [])\n      ([\'Z\'] [\'Z\'])\n      ([\'M\' x y | rest] (append [\'M\' (xScale x) (yScale y)] (toPath rest)))\n      ([\'L\' x y | rest] (append [\'L\' (xScale x) (yScale y)] (toPath rest)))\n      ([\'Q\' x1 y1 x y | rest]\n        (append [\'Q\' (xScale x1) (yScale y1) (xScale x) (yScale y)]\n                (toPath rest)))\n      ([\'C\' x1 y1 x2 y2 x y | rest]\n        (append [\'C\' (xScale x1) (yScale y1) (xScale x2) (yScale y2) (xScale x) (yScale y)]\n                (toPath rest)))\n      (_ \'ERROR\')))\n  (letrec pointsOf (\\cmds\n    (case cmds\n      ([]    [])\n      ([\'Z\'] [])\n      ([\'M\' x y | rest] (append [(dot (xScale x) (yScale y))] (pointsOf rest)))\n      ([\'L\' x y | rest] (append [(dot (xScale x) (yScale y))] (pointsOf rest)))\n      ([\'Q\' x1 y1 x y | rest]\n        (append [(dot (xScale x1) (yScale y1)) (dot (xScale x) (yScale y))]\n                (pointsOf rest)))\n      ([\'C\' x1 y1 x2 y2 x y | rest]\n        (append [(dot (xScale x1) (yScale y1))\n                 (dot (xScale x2) (yScale y2))\n                 (dot (xScale x)  (yScale y))]\n                (pointsOf rest)))\n      (_ \'ERROR\')))\n  ; (group bounds\n  (polyPathGroup bounds\n    (cons\n      (path fill stroke w (toPath d))\n      []))\n)))))))\n      ; turning off points for now\n      ; (pointsOf d)))\n\n(typ evalOffset (-> [Num Num] Num))\n(def evalOffset (\\[base off]\n  (case off\n    (0 base)\n    (_ (+ base off)))))\n\n(def stickyPolygon (\\(bounds fill stroke strokeWidth offsets)\n  (let pts (map (\\[xOff yOff] [ (evalOffset xOff) (evalOffset yOff) ]) offsets)\n  (group bounds [(polygon fill stroke strokeWidth pts)])\n)))\n\n(typ withBounds (-> Bounds (-> Bounds (List SVG)) (List SVG)))\n(def withBounds (\\(bounds f) (f bounds)))\n\n(typ withAnchor (-> Point (-> Point (List SVG)) (List SVG)))\n(def withAnchor (\\(anchor f) (f anchor)))\n\n(typ star (-> Bounds (List SVG)))\n(def star (\\bounds\n  (let [left top right bot] bounds\n  (let [width height] [(- right left) (- bot top)]\n  (let [cx cy] [(+ left (/ width 2)) (+ top (/ height 2))]\n  [(nStar 0 \'black\' 0 6 (min (/ width 2) (/ height 2)) 10 0 [cx cy])]\n)))))\n\n(typ blobs (-> (List Blob) SVG))\n(def blobs (\\blobs\n  (let modifyBlob (\\[i blob]\n    (case blob\n      ([[\'g\' gAttrs [shape | shapes]]]\n       [[\'g\' gAttrs [(consAttr shape [\'BLOB\' (toString (+ i 1))]) | shapes]]])\n      ([shape] [(consAttr shape [\'BLOB\' (toString (+ i 1))])])\n      (_       blob)))\n  (svg (concat (mapi modifyBlob blobs)))\n)))\n\n\n; === Relations ===\n\n(typ midpoint (-> Point Point Point))\n(def midpoint (\\(pt1 pt2)\n  (vec2DScalarMult 0.5 (vec2DPlus pt1 pt2))\n))\n\n; Point on line segment, at `ratio` location.\n(typ onLine (-> Point Point Ratio Point))\n(def onLine (\\(pt1 pt2 ratio)\n  (let vec (vec2DMinus pt2 pt1)\n  (vec2DPlus pt1 (vec2DScalarMult ratio vec)))))\n\n; Point on perpendicular line, at `ratio` location.\n(typ onPerpendicularLine (-> Point Point Ratio Point))\n(def onPerpendicularLine (\\(centerOfRotation pt ratio)\n  (let [dx dy] (vec2DMinus pt centerOfRotation)\n  (vec2DPlus centerOfRotation (vec2DScalarMult ratio [dy (- 0 dx)])))))\n\n\n\n\n(typ draw (-> (List SVG) SVG))\n(def draw svg)\n\n(def showOne (\\(x y val)\n   [\'text\' [[\'x\' x] [\'y\' y] [\'style\' \'fill:black\']\n            [\'font-family\' \'monospace\']\n            [\'font-size\' \'12pt\']]\n           [[\'TEXT\' (toString val)]]]))\n\n(def show (showOne 20 30))\n\n(def showList (\\vals\n  [\'g\' [] (mapi (\\[i val] (showOne 20 (* (+ i 1) 30) val)) vals)]))\n\n(def rectWithBorder (\\(stroke strokeWidth fill x y w h)\n  (addAttr (addAttr\n    (rect fill [x y] w h)\n      [\"stroke\" stroke])\n      [\"stroke-width\" strokeWidth])))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def columnsToRows (\\columns\n  (let numColumns (len columns)\n  (let numRows ; maxColumnSize\n    (if (= numColumns 0) 0 (maximum (map len columns)))\n  (foldr\n    (\\(col rows)\n      (let paddedCol (append col (repeat (- numRows (len col)) \".\"))\n      (map\n        (\\[datum row] [ datum | row ])\n        (zip paddedCol rows))))\n    (repeat numRows [])\n    columns)\n))))\n\n(def addColToRows (\\(col rows)\n  (let width (maximum (map len rows))\n  (letrec foo (\\(col rows)\n    (case [col rows]\n      ([ []     []     ] [                                          ])\n      ([ [x|xs] [r|rs] ] [ (snoc x r)                 | (foo xs rs) ])\n      ([ []     [r|rs] ] [ (snoc \'\' r)                | (foo [] rs) ])\n      ([ [x|xs] []     ] [ (snoc x (repeat width \'\')) | (foo xs []) ])\n    ))\n  (foo col rows)))))\n\n(def border [\'border\' \'1px solid black\'])\n(def padding [\'padding\' \'5px\'])\n(def center [\'align\' \'center\'])\n(def style (\\list [\'style\' list]))\n(def onlyStyle (\\list [(style list)]))\n\n(def td (\\text\n  [\'td\' (onlyStyle [border padding])\n        [[\'text\' [] [[\'TEXT\' text]]]]]))\n\n(def th (\\text\n  [\'th\' (onlyStyle [border padding center])\n        [[\'text\' [] [[\'TEXT\' text]]]]]))\n\n(def tr (\\children\n  [\'tr\' (onlyStyle [border])\n        children]))\n\n; TODO div name is already taken...\n\n(def div_ (\\children [\'div\' [] children]))\n(def h1 (\\text [\'h1\' [] [[\'TEXT\' text]]]))\n(def h2 (\\text [\'h2\' [] [[\'TEXT\' text]]]))\n(def h3 (\\text [\'h3\' [] [[\'TEXT\' text]]]))\n\n(def table (\\children\n  [\'table\' (onlyStyle [border padding]) children]))\n\n; (def table (\\children\n;   (let [x y] [100 100]\n;   [\'table\' (onlyStyle [border padding\n;                       [\"position\" \"relative\"]\n;                       [\"left\" (toString x)]\n;                       [\"top\" (toString y)]]) children])))\n\n(def tableOfData (\\data\n  (let letters (explode \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  (let data (mapi (\\[i row] [(+ i 1) | row]) data)\n  (let tableWidth (maximum (map len data))\n  (let headers\n    (tr (map (\\letter (th letter)) (take letters tableWidth)))\n  (let rows\n    (map (\\row (tr (map (\\col (td (toString col))) row))) data)\n  (table\n    [ headers | rows ]\n))))))))\n\n(def setStyles (\\(newStyles [kind attrs children])\n  (let attrs\n    (let styleAttr (lookup \'style\' attrs)\n    (typecase styleAttr\n      (Null [ [\'style\' []] | attrs ])\n      (_    attrs)))\n  (let attrs\n    (map (\\[key val]\n      (case key\n        (\'style\'\n          (let otherStyles\n            (concatMap (\\[k v]\n              (case (elem k (map fst newStyles))\n                (true  [])\n                (false [[k v]])))\n              val)\n          [\'style\' (append newStyles otherStyles)]))\n        (_\n          [key val])))\n      attrs)\n  [kind attrs children]\n))))\n\n(def placeAt (\\([x y] node)\n  (let _ ([x y] : Point)\n  ; TODO px suffix should be added in LangSvg/Html translation\n  (setStyles\n    [ [\'position\' \'absolute\']\n      [\'left\' (+ (toString x) \'px\')]\n      [\'top\' (+ (toString y) \'px\')]\n    ]\n    node))))\n\n(def placeSvgAt (\\([x y] w h shapes)\n  (placeAt [x y]\n    [\'svg\' [[\'width\' w] [\'height\' h]] shapes])))\n\n(def workspace (\\(minSize children)\n  (div_\n    (cons\n      (placeAt minSize (h3 \'</workspace>\'))\n      children))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n; The type checker relies on the name of this definition.\n(let dummyPreludeMain [\'svg\' [] []] dummyPreludeMain)\n\n';
var _user$project$PreludeGenerated$src = _user$project$PreludeGenerated$prelude;

var _user$project$TopLevelExp$fuseTopLevelExp = F2(
	function (tld, rest) {
		return A3(
			_user$project$Info$withInfo,
			tld.val(rest),
			tld.start,
			tld.end);
	});
var _user$project$TopLevelExp$fuseTopLevelExps = F2(
	function (tlds, rest) {
		return A3(_elm_lang$core$List$foldr, _user$project$TopLevelExp$fuseTopLevelExp, rest, tlds);
	});

var _user$project$MathExp$mathExpToString = function (mathExp) {
	var _p0 = mathExp;
	switch (_p0.ctor) {
		case 'MathNum':
			return _elm_lang$core$Basics$toString(_p0._0);
		case 'MathVar':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'x',
				_elm_lang$core$Basics$toString(_p0._0));
		default:
			var childPerhapsParens = function (childTerm) {
				var _p1 = childTerm;
				_v1_2:
				do {
					if (_p1.ctor === 'MathOp') {
						if (_p1._0.ctor === 'ArcTan2') {
							return _user$project$MathExp$mathExpToString(childTerm);
						} else {
							if (((_p1._1.ctor === '::') && (_p1._1._1.ctor === '::')) && (_p1._1._1._1.ctor === '[]')) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									'(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$MathExp$mathExpToString(childTerm),
										')'));
							} else {
								break _v1_2;
							}
						}
					} else {
						break _v1_2;
					}
				} while(false);
				return _user$project$MathExp$mathExpToString(childTerm);
			};
			var _p2 = {ctor: '_Tuple2', _0: _p0._0, _1: _p0._1};
			_v2_18:
			do {
				if (_p2.ctor === '_Tuple2') {
					if (_p2._1.ctor === '::') {
						if (_p2._1._1.ctor === '::') {
							if (_p2._1._1._1.ctor === '[]') {
								switch (_p2._0.ctor) {
									case 'Plus':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParens(_p2._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' + ',
												childPerhapsParens(_p2._1._1._0)));
									case 'Minus':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParens(_p2._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' - ',
												childPerhapsParens(_p2._1._1._0)));
									case 'Mult':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParens(_p2._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' * ',
												childPerhapsParens(_p2._1._1._0)));
									case 'Div':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParens(_p2._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' / ',
												childPerhapsParens(_p2._1._1._0)));
									case 'Pow':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											'(',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$MathExp$mathExpToString(_p2._1._0),
												A2(
													_elm_lang$core$Basics_ops['++'],
													')^',
													childPerhapsParens(_p2._1._1._0))));
									case 'Mod':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParens(_p2._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' mod ',
												childPerhapsParens(_p2._1._1._0)));
									case 'ArcTan2':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											'atan2(',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$MathExp$mathExpToString(_p2._1._0),
												A2(
													_elm_lang$core$Basics_ops['++'],
													', ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_user$project$MathExp$mathExpToString(_p2._1._1._0),
														')'))));
									default:
										break _v2_18;
								}
							} else {
								break _v2_18;
							}
						} else {
							switch (_p2._0.ctor) {
								case 'Cos':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'cos(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'Sin':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'sin(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'ArcCos':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'acos(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'ArcSin':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'asin(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'Abs':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'abs(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'Floor':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'floor(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'Ceil':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'ceiling(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'Round':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'round(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'Sqrt':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'sqrt(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								case 'Ln':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'ln(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$MathExp$mathExpToString(_p2._1._0),
											')'));
								default:
									break _v2_18;
							}
						}
					} else {
						if (_p2._0.ctor === 'Pi') {
							return 'π';
						} else {
							break _v2_18;
						}
					}
				} else {
					break _v2_18;
				}
			} while(false);
			var _p3 = A2(_elm_lang$core$Debug$log, 'MathExp.mathExpToString: Didn\'t know how to convert this to string', mathExp);
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(mathExp),
					')'));
	}
};
var _user$project$MathExp$expToMaybeMathExp_ = F2(
	function (identToVarId, exp) {
		var _p4 = _user$project$Lang$expEffectiveExp(exp).val.e__;
		switch (_p4.ctor) {
			case 'EConst':
				return _elm_lang$core$Maybe$Just(
					_user$project$Lang$MathNum(_p4._1));
			case 'EVar':
				return _elm_lang$core$Maybe$Just(
					_user$project$Lang$MathVar(
						A3(_user$project$Utils$getWithDefault, _p4._1, -1, identToVarId)));
			case 'EOp':
				var _p5 = _p4._1;
				return _user$project$Lang$isMathOp_(_p5.val) ? A2(
					_elm_lang$core$Maybe$map,
					_user$project$Lang$MathOp(_p5.val),
					_user$project$Utils$projJusts(
						A2(
							_elm_lang$core$List$map,
							_user$project$MathExp$expToMaybeMathExp_(identToVarId),
							_p4._2))) : _elm_lang$core$Maybe$Nothing;
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$MathExp$expToMaybeMathExp = function (exp) {
	var identToVarId = _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			_user$project$Utils$flip,
			_user$project$Utils$zipi1(
				_user$project$Utils$dedup(
					A2(
						_elm_lang$core$List$filterMap,
						function (e) {
							var _p6 = e.val.e__;
							if (_p6.ctor === 'EVar') {
								return _elm_lang$core$Maybe$Just(_p6._1);
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						},
						_user$project$Lang$flattenExpTree(exp))))));
	return A2(
		_elm_lang$core$Maybe$map,
		function (mathExp) {
			return {ctor: '_Tuple2', _0: mathExp, _1: identToVarId};
		},
		A2(_user$project$MathExp$expToMaybeMathExp_, identToVarId, exp));
};
var _user$project$MathExp$mathExpToExp = F3(
	function (numberToExp, varIdToExp, mathExp) {
		var _p7 = mathExp;
		switch (_p7.ctor) {
			case 'MathNum':
				return numberToExp(_p7._0);
			case 'MathVar':
				return varIdToExp(_p7._0);
			default:
				return A2(
					_user$project$Lang$eOp,
					_p7._0,
					A2(
						_elm_lang$core$List$map,
						A2(_user$project$MathExp$mathExpToExp, numberToExp, varIdToExp),
						_p7._1));
		}
	});
var _user$project$MathExp$applySubstAndEvaluateWithDerivative = F3(
	function (subst, withRespectToVarId, mathExp) {
		var recurse = A2(_user$project$MathExp$applySubstAndEvaluateWithDerivative, subst, withRespectToVarId);
		var failure = {ctor: '_Tuple2', _0: _user$project$Utils$nan, _1: _user$project$Utils$nan};
		var _p8 = mathExp;
		switch (_p8.ctor) {
			case 'MathNum':
				return {ctor: '_Tuple2', _0: _p8._0, _1: 0.0};
			case 'MathVar':
				var _p11 = _p8._0;
				var _p9 = {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Dict$get, _p11, subst),
					_1: _elm_lang$core$Native_Utils.eq(_p11, withRespectToVarId)
				};
				if ((_p9.ctor === '_Tuple2') && (_p9._0.ctor === 'Just')) {
					if (_p9._1 === true) {
						return {ctor: '_Tuple2', _0: _p9._0._0, _1: 1.0};
					} else {
						return {ctor: '_Tuple2', _0: _p9._0._0, _1: 0.0};
					}
				} else {
					var _p10 = _user$project$Utils$log(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'MathExp.applySubstAndEvaluateWithDerivative: Variable ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p11),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' not found in substitutions: ',
									_elm_lang$core$Basics$toString(subst)))));
					return failure;
				}
			default:
				var _p28 = _p8._1;
				var _p12 = {
					ctor: '_Tuple2',
					_0: _p8._0,
					_1: A2(_elm_lang$core$List$map, recurse, _p28)
				};
				_v8_19:
				do {
					if (_p12.ctor === '_Tuple2') {
						if (_p12._1.ctor === '::') {
							if (_p12._1._0.ctor === '_Tuple2') {
								if (_p12._1._1.ctor === '::') {
									if ((_p12._1._1._0.ctor === '_Tuple2') && (_p12._1._1._1.ctor === '[]')) {
										switch (_p12._0.ctor) {
											case 'Plus':
												return {ctor: '_Tuple2', _0: _p12._1._0._0 + _p12._1._1._0._0, _1: _p12._1._0._1 + _p12._1._1._0._1};
											case 'Minus':
												return {ctor: '_Tuple2', _0: _p12._1._0._0 - _p12._1._1._0._0, _1: _p12._1._0._1 - _p12._1._1._0._1};
											case 'Mult':
												var _p14 = _p12._1._1._0._0;
												var _p13 = _p12._1._0._0;
												return {ctor: '_Tuple2', _0: _p13 * _p14, _1: (_p12._1._0._1 * _p14) + (_p13 * _p12._1._1._0._1)};
											case 'Div':
												var _p16 = _p12._1._1._0._0;
												var _p15 = _p12._1._0._0;
												return {ctor: '_Tuple2', _0: _p15 / _p16, _1: ((_p12._1._0._1 * _p16) - (_p15 * _p12._1._1._0._1)) / (_p16 * _p16)};
											case 'Pow':
												var _p18 = _p12._1._1._0._0;
												var _p17 = _p12._1._0._0;
												return {
													ctor: '_Tuple2',
													_0: Math.pow(_p17, _p18),
													_1: Math.pow(_p17, _p18) * (((_p12._1._0._1 * _p18) / _p17) + (_p12._1._1._0._1 * A2(_elm_lang$core$Basics$logBase, _elm_lang$core$Basics$e, _p17)))
												};
											case 'Mod':
												return {
													ctor: '_Tuple2',
													_0: _elm_lang$core$Basics$toFloat(
														A2(
															F2(
																function (x, y) {
																	return A2(_elm_lang$core$Basics_ops['%'], x, y);
																}),
															_elm_lang$core$Basics$floor(_p12._1._0._0),
															_elm_lang$core$Basics$floor(_p12._1._1._0._0))),
													_1: _elm_lang$core$Native_Utils.eq(_p12._1._1._0._1, 0.0) ? 0.0 : _user$project$Utils$nan
												};
											case 'ArcTan2':
												if ((_p12._1._1._0._0 === 1.0) && (_p12._1._1._0._1 === 0.0)) {
													var _p19 = _p12._1._0._0;
													return {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Basics$atan(_p19),
														_1: _p12._1._0._1 / (1 + (_p19 * _p19))
													};
												} else {
													return recurse(
														A2(
															_user$project$Lang$MathOp,
															_user$project$Lang$ArcTan2,
															{
																ctor: '::',
																_0: A2(_user$project$Lang$MathOp, _user$project$Lang$Div, _p28),
																_1: {
																	ctor: '::',
																	_0: _user$project$Lang$MathNum(1.0),
																	_1: {ctor: '[]'}
																}
															}));
												}
											default:
												break _v8_19;
										}
									} else {
										break _v8_19;
									}
								} else {
									switch (_p12._0.ctor) {
										case 'Cos':
											var _p20 = _p12._1._0._0;
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$cos(_p20),
												_1: (0 - _elm_lang$core$Basics$sin(_p20)) * _p12._1._0._1
											};
										case 'Sin':
											var _p21 = _p12._1._0._0;
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$sin(_p21),
												_1: _elm_lang$core$Basics$cos(_p21) * _p12._1._0._1
											};
										case 'ArcCos':
											var _p22 = _p12._1._0._0;
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$acos(_p22),
												_1: (0 - _p12._1._0._1) / _elm_lang$core$Basics$sqrt(1 - (_p22 * _p22))
											};
										case 'ArcSin':
											var _p23 = _p12._1._0._0;
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$asin(_p23),
												_1: _p12._1._0._1 / _elm_lang$core$Basics$sqrt(1 - (_p23 * _p23))
											};
										case 'Abs':
											var _p24 = _p12._1._0._0;
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$abs(_p24),
												_1: (_p24 / _elm_lang$core$Basics$abs(_p24)) * _p12._1._0._1
											};
										case 'Floor':
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$toFloat(
													_elm_lang$core$Basics$floor(_p12._1._0._0)),
												_1: 0.0
											};
										case 'Ceil':
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$toFloat(
													_elm_lang$core$Basics$ceiling(_p12._1._0._0)),
												_1: 0.0
											};
										case 'Round':
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$toFloat(
													_elm_lang$core$Basics$round(_p12._1._0._0)),
												_1: 0.0
											};
										case 'Sqrt':
											var _p25 = _p12._1._0._0;
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$sqrt(_p25),
												_1: (0.5 * Math.pow(_p25, -0.5)) * _p12._1._0._1
											};
										case 'Ln':
											var _p26 = _p12._1._0._0;
											return {
												ctor: '_Tuple2',
												_0: A2(_elm_lang$core$Basics$logBase, _elm_lang$core$Basics$e, _p26),
												_1: _p12._1._0._1 / _p26
											};
										default:
											break _v8_19;
									}
								}
							} else {
								break _v8_19;
							}
						} else {
							if (_p12._0.ctor === 'Pi') {
								return {ctor: '_Tuple2', _0: _elm_lang$core$Basics$pi, _1: 0.0};
							} else {
								break _v8_19;
							}
						}
					} else {
						break _v8_19;
					}
				} while(false);
				var _p27 = A2(_elm_lang$core$Debug$log, 'Don\'t know how to differentiate', mathExp);
				return failure;
		}
	});
var _user$project$MathExp$applySubst = F2(
	function (subst, mathExp) {
		var _p29 = mathExp;
		switch (_p29.ctor) {
			case 'MathNum':
				return mathExp;
			case 'MathVar':
				var _p30 = A2(_elm_lang$core$Dict$get, _p29._0, subst);
				if (_p30.ctor === 'Just') {
					return _user$project$Lang$MathNum(_p30._0);
				} else {
					return mathExp;
				}
			default:
				return A2(
					_user$project$Lang$MathOp,
					_p29._0,
					A2(
						_elm_lang$core$List$map,
						_user$project$MathExp$applySubst(subst),
						_p29._1));
		}
	});
var _user$project$MathExp$evalToMaybeNum = function (mathExp) {
	var _p31 = mathExp;
	switch (_p31.ctor) {
		case 'MathNum':
			return _elm_lang$core$Maybe$Just(_p31._0);
		case 'MathVar':
			var _p32 = _user$project$Utils$log(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'MathExp.evalToMaybeNum: Found ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(mathExp),
						' in an MathExp that shouldn\'t have any variables.')));
			return _elm_lang$core$Maybe$Nothing;
		default:
			var _p35 = _p31._0;
			var evaledOperands = A2(_elm_lang$core$List$map, _user$project$MathExp$evalToMaybeNum, _p31._1);
			if (A2(
				_elm_lang$core$List$any,
				function (_p33) {
					return A2(
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						_elm_lang$core$Maybe$Just(true),
						A2(_elm_lang$core$Maybe$map, _elm_lang$core$Basics$isNaN, _p33));
				},
				evaledOperands)) {
				return _elm_lang$core$Maybe$Just(_user$project$Utils$nan);
			} else {
				var _p34 = {ctor: '_Tuple2', _0: _p35, _1: evaledOperands};
				_v12_2:
				do {
					if (((_p34.ctor === '_Tuple2') && (_p34._0.ctor === 'Mult')) && (_p34._1.ctor === '::')) {
						if (_p34._1._0.ctor === 'Just') {
							if ((((_p34._1._0._0 === 0.0) && (_p34._1._1.ctor === '::')) && (_p34._1._1._0.ctor === 'Nothing')) && (_p34._1._1._1.ctor === '[]')) {
								return _elm_lang$core$Maybe$Just(0.0);
							} else {
								break _v12_2;
							}
						} else {
							if ((((_p34._1._1.ctor === '::') && (_p34._1._1._0.ctor === 'Just')) && (_p34._1._1._0._0 === 0.0)) && (_p34._1._1._1.ctor === '[]')) {
								return _elm_lang$core$Maybe$Just(0.0);
							} else {
								break _v12_2;
							}
						}
					} else {
						break _v12_2;
					}
				} while(false);
				return A2(
					_elm_lang$core$Maybe$andThen,
					function (operandNums) {
						return A2(_user$project$Lang$maybeEvalMathOp, _p35, operandNums);
					},
					_user$project$Utils$projJusts(evaledOperands));
			}
	}
};
var _user$project$MathExp$mathExpToVarIds = function (mathExp) {
	var _p36 = mathExp;
	switch (_p36.ctor) {
		case 'MathNum':
			return {ctor: '[]'};
		case 'MathVar':
			return {
				ctor: '::',
				_0: _p36._0,
				_1: {ctor: '[]'}
			};
		default:
			return A2(_elm_lang$core$List$concatMap, _user$project$MathExp$mathExpToVarIds, _p36._1);
	}
};
var _user$project$MathExp$neg = function (x) {
	return A2(
		_user$project$Lang$MathOp,
		_user$project$Lang$Minus,
		{
			ctor: '::',
			_0: _user$project$Lang$MathNum(0),
			_1: {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			}
		});
};

var _user$project$ValUnparser$strOp = function (op) {
	var _p0 = op;
	switch (_p0.ctor) {
		case 'Plus':
			return '+';
		case 'Minus':
			return '-';
		case 'Mult':
			return '*';
		case 'Div':
			return '/';
		case 'Lt':
			return '<';
		case 'Eq':
			return '=';
		case 'Pi':
			return 'π';
		case 'Cos':
			return 'cos';
		case 'Sin':
			return 'sin';
		case 'ArcCos':
			return 'arccos';
		case 'ArcSin':
			return 'arcsin';
		case 'ArcTan2':
			return 'arctan2';
		case 'Abs':
			return 'abs';
		case 'Floor':
			return 'floor';
		case 'Ceil':
			return 'ceiling';
		case 'Round':
			return 'round';
		case 'ToStr':
			return 'toString';
		case 'Explode':
			return 'explode';
		case 'Sqrt':
			return 'sqrt';
		case 'Ln':
			return 'ln';
		case 'Mod':
			return 'mod';
		case 'Pow':
			return 'pow';
		case 'DictEmpty':
			return 'empty';
		case 'DictInsert':
			return 'insert';
		case 'DictGet':
			return 'get';
		case 'DictRemove':
			return 'remove';
		case 'DebugLog':
			return 'debug';
		case 'NoWidgets':
			return 'noWidgets';
		default:
			return 'optNumToString';
	}
};
var _user$project$ValUnparser$strNum = _elm_lang$core$Basics$toString;
var _user$project$ValUnparser$strNumTrunc = function (k) {
	return function (_p1) {
		return function (s) {
			return (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$String$length(s),
				k) > 0) ? A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$String$left, k, s),
				'..') : s;
		}(
			_user$project$ValUnparser$strNum(_p1));
	};
};
var _user$project$ValUnparser$strBaseVal = function (v) {
	var _p2 = v;
	switch (_p2.ctor) {
		case 'VBool':
			if (_p2._0 === true) {
				return 'true';
			} else {
				return 'false';
			}
		case 'VString':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'\'',
				A2(_elm_lang$core$Basics_ops['++'], _p2._0, '\''));
		default:
			return 'null';
	}
};
var _user$project$ValUnparser$strVal_ = F2(
	function (showTraces, v) {
		var recurse = _user$project$ValUnparser$strVal_(showTraces);
		var _p3 = v.v_;
		switch (_p3.ctor) {
			case 'VConst':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$ValUnparser$strNum(_p3._1._0),
					showTraces ? A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Utils$angleBracks(
							_elm_lang$core$Basics$toString(_p3._0)),
						_user$project$Utils$braces(
							_user$project$MathExp$mathExpToString(_p3._1._1))) : '');
			case 'VBase':
				return _user$project$ValUnparser$strBaseVal(_p3._0);
			case 'VClosure':
				return '<fun>';
			case 'VList':
				return _user$project$Utils$bracks(
					A2(
						_elm_lang$core$String$join,
						' ',
						A2(_elm_lang$core$List$map, recurse, _p3._0)));
			default:
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'<dict ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$String$join,
							' ',
							A2(
								_elm_lang$core$List$map,
								function (_p4) {
									var _p5 = _p4;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_p5._0),
										A2(
											_elm_lang$core$Basics_ops['++'],
											':',
											recurse(_p5._1)));
								},
								_elm_lang$core$Dict$toList(_p3._0))),
						'>'));
		}
	});
var _user$project$ValUnparser$strVal = _user$project$ValUnparser$strVal_(false);
var _user$project$ValUnparser$strValLocs = _user$project$ValUnparser$strVal_(true);

var _user$project$Config$params = {
	strVersion: 'v0.6.3',
	debugLayout: false,
	wGut: 10,
	topSection: {h: 38, wLogo: 25, wBtnO: 180, hBtnO: 25, wJunk: 250},
	botSection: {h: 60},
	mainSection: {
		widgets: {wBtn: 120, wBtnWide: 140, hBtn: 25, font: 'Helvetica, sans-serif', fontSize: '10pt'},
		vertical: {hExtra: 6, wGut: 10},
		horizontal: {wExtra: 15, hGut: 10},
		canvas: {border: '2px solid darkGray', hZoneInfo: 40},
		codebox: {border: '2px solid darkGray', font: 'Courier, monospace', fontSize: '12pt'},
		uiWidgets: {pad: 5, wSlider: 100, hSlider: 25, wCaption: 100, rBall: '10px', fontSize: '11pt', font: 'Tahoma, sans-serif'}
	}
};
var _user$project$Config$computeLayoutInfo = function (model) {
	var hBot = _user$project$Config$params.botSection.h;
	var hTop = _user$project$Config$params.topSection.h;
	var hWindow = model.dimensions.height;
	var hCodebox = (hWindow - (hTop + hBot)) - 3;
	var hCanvas = hCodebox;
	var wWindow = model.dimensions.width;
	var wCodebox = ((wWindow / 2) | 0) - 10;
	var wCanvas = wCodebox;
	var wSideGutter = _user$project$Config$params.wGut;
	return {hTop: hTop, hBot: hBot, hMid: hCodebox, wCodebox: wCodebox, hCodebox: hCodebox, wCanvas: wCanvas, hCanvas: hCanvas, xCanvas: wCodebox, yCanvas: hCodebox};
};
var _user$project$Config$debugLog = F3(
	function (b, s, x) {
		return b ? A2(_elm_lang$core$Debug$log, s, x) : x;
	});
var _user$project$Config$debugTypeChecker = true;
var _user$project$Config$debugStorage = false;
var _user$project$Config$debugSync = false;
var _user$project$Config$debugController = false;
var _user$project$Config$debugView = false;
var _user$project$Config$debugParser = false;

var _user$project$LangUnparser$unparseTypeWithUniformWhitespace = function (tipe) {
	var recurse = function (t) {
		return _user$project$LangUnparser$unparseTypeWithUniformWhitespace(t);
	};
	var _p0 = tipe.val.t__;
	switch (_p0.ctor) {
		case 'TNum':
			return A2(_elm_lang$core$Basics_ops['++'], ' ', 'Num');
		case 'TBool':
			return A2(_elm_lang$core$Basics_ops['++'], ' ', 'Bool');
		case 'TString':
			return A2(_elm_lang$core$Basics_ops['++'], ' ', 'String');
		case 'TNull':
			return A2(_elm_lang$core$Basics_ops['++'], ' ', 'Null');
		case 'TList':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(List',
					A2(
						_elm_lang$core$Basics_ops['++'],
						recurse(_p0._1),
						A2(_elm_lang$core$Basics_ops['++'], ' ', ')'))));
		case 'TDict':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(Dict',
					A2(
						_elm_lang$core$Basics_ops['++'],
						recurse(_p0._1),
						A2(
							_elm_lang$core$Basics_ops['++'],
							recurse(_p0._2),
							A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))));
		case 'TTuple':
			var _p2 = _p0._1;
			var _p1 = _p0._3;
			if (_p1.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(_elm_lang$core$List$map, recurse, _p2)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									'|',
									A2(
										_elm_lang$core$Basics_ops['++'],
										recurse(_p1._0),
										A2(_elm_lang$core$Basics_ops['++'], ' ', ']')))))));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(_elm_lang$core$List$map, recurse, _p2)),
							A2(_elm_lang$core$Basics_ops['++'], ' ', ']'))));
			}
		case 'TArrow':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(->',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$String$concat(
							A2(_elm_lang$core$List$map, recurse, _p0._1)),
						A2(_elm_lang$core$Basics_ops['++'], ' ', ')'))));
		case 'TUnion':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(union',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$String$concat(
							A2(_elm_lang$core$List$map, recurse, _p0._1)),
						A2(_elm_lang$core$Basics_ops['++'], ' ', ')'))));
		case 'TNamed':
			switch (_p0._1) {
				case 'Num':
					return A2(_elm_lang$core$Basics_ops['++'], ' ', 'Bad_NUM');
				case 'Bool':
					return A2(_elm_lang$core$Basics_ops['++'], ' ', 'Bad_BOOL');
				case 'String':
					return A2(_elm_lang$core$Basics_ops['++'], ' ', 'Bad_STRING');
				case 'Null':
					return A2(_elm_lang$core$Basics_ops['++'], ' ', 'Bad_NULL');
				default:
					return A2(_elm_lang$core$Basics_ops['++'], ' ', _p0._1);
			}
		case 'TVar':
			return A2(_elm_lang$core$Basics_ops['++'], ' ', _p0._1);
		case 'TWildcard':
			return A2(_elm_lang$core$Basics_ops['++'], ' ', '_');
		default:
			var strVar = function (_p3) {
				var _p4 = _p3;
				return A2(_elm_lang$core$Basics_ops['++'], ' ', _p4._1);
			};
			var sVars = function () {
				var _p5 = _p0._1;
				if (_p5.ctor === 'One') {
					return strVar(_p5._0);
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						_user$project$Utils$parens(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, strVar, _p5._1)),
								' ')));
				}
			}();
			return A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				_user$project$Utils$parens(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'forall',
						A2(
							_elm_lang$core$Basics_ops['++'],
							sVars,
							A2(
								_elm_lang$core$Basics_ops['++'],
								recurse(_p0._2),
								' ')))));
	}
};
var _user$project$LangUnparser$unparseType = F2(
	function (shouldShowRoles, tipe) {
		var recurse = _user$project$LangUnparser$unparseType(shouldShowRoles);
		var addRoles = function (unparsed) {
			return (shouldShowRoles && (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$Set$size(tipe.val.roles),
				0) > 0)) ? A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					unparsed,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' : ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$String$join,
								', ',
								_elm_lang$core$Set$toList(tipe.val.roles)),
							')')))) : unparsed;
		};
		return addRoles(
			function () {
				var _p6 = tipe.val.t__;
				switch (_p6.ctor) {
					case 'TNum':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Num');
					case 'TBool':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bool');
					case 'TString':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'String');
					case 'TNull':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Null');
					case 'TList':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(List',
								A2(
									_elm_lang$core$Basics_ops['++'],
									recurse(_p6._1),
									A2(_elm_lang$core$Basics_ops['++'], _p6._2.val, ')'))));
					case 'TDict':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(Dict',
								A2(
									_elm_lang$core$Basics_ops['++'],
									recurse(_p6._1),
									A2(
										_elm_lang$core$Basics_ops['++'],
										recurse(_p6._2),
										A2(_elm_lang$core$Basics_ops['++'], _p6._3.val, ')')))));
					case 'TTuple':
						var _p10 = _p6._4;
						var _p9 = _p6._0;
						var _p8 = _p6._1;
						var _p7 = _p6._3;
						if (_p7.ctor === 'Just') {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p9.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'[',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$String$concat(
											A2(_elm_lang$core$List$map, recurse, _p8)),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p6._2.val,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'|',
												A2(
													_elm_lang$core$Basics_ops['++'],
													recurse(_p7._0),
													A2(_elm_lang$core$Basics_ops['++'], _p10.val, ']')))))));
						} else {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p9.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'[',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$String$concat(
											A2(_elm_lang$core$List$map, recurse, _p8)),
										A2(_elm_lang$core$Basics_ops['++'], _p10.val, ']'))));
						}
					case 'TArrow':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(->',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$String$concat(
										A2(_elm_lang$core$List$map, recurse, _p6._1)),
									A2(_elm_lang$core$Basics_ops['++'], _p6._2.val, ')'))));
					case 'TUnion':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(union',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$String$concat(
										A2(_elm_lang$core$List$map, recurse, _p6._1)),
									A2(_elm_lang$core$Basics_ops['++'], _p6._2.val, ')'))));
					case 'TNamed':
						switch (_p6._1) {
							case 'Num':
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bad_NUM');
							case 'Bool':
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bad_BOOL');
							case 'String':
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bad_STRING');
							case 'Null':
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bad_NULL');
							default:
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, _p6._1);
						}
					case 'TVar':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, _p6._1);
					case 'TWildcard':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, '_');
					default:
						var strVar = function (_p11) {
							var _p12 = _p11;
							return A2(_elm_lang$core$Basics_ops['++'], _p12._0.val, _p12._1);
						};
						var sVars = function () {
							var _p13 = _p6._1;
							if (_p13.ctor === 'One') {
								return strVar(_p13._0);
							} else {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_p13._0.val,
									_user$project$Utils$parens(
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$String$concat(
												A2(_elm_lang$core$List$map, strVar, _p13._1)),
											_p13._2.val)));
							}
						}();
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							_user$project$Utils$parens(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'forall',
									A2(
										_elm_lang$core$Basics_ops['++'],
										sVars,
										A2(
											_elm_lang$core$Basics_ops['++'],
											recurse(_p6._2),
											_p6._3.val)))));
				}
			}());
	});
var _user$project$LangUnparser$unparseWD = function (wd) {
	var strHidden = function (bool) {
		return bool ? ',\"hidden\"' : '';
	};
	var _p14 = wd.val;
	switch (_p14.ctor) {
		case 'NoWidgetDecl':
			return '';
		case 'IntSlider':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p14._0.val),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p14._1.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p14._2.val),
							A2(
								_elm_lang$core$Basics_ops['++'],
								strHidden(_p14._4),
								'}')))));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p14._0.val),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p14._1.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p14._2.val),
							A2(
								_elm_lang$core$Basics_ops['++'],
								strHidden(_p14._4),
								'}')))));
	}
};
var _user$project$LangUnparser$unparseWDWithUniformWhitespace = _user$project$LangUnparser$unparseWD;
var _user$project$LangUnparser$escapeQuotes = F2(
	function (quoteChar, string) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(quoteChar),
			function (_p15) {
				return A2(_elm_lang$core$Basics_ops['++'], '\\', quoteChar);
			},
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex(
					_elm_lang$core$Regex$escape('\\')),
				function (_p16) {
					return '\\\\';
				},
				string));
	});
var _user$project$LangUnparser$unparseBaseVal = function (bv) {
	var _p17 = bv;
	switch (_p17.ctor) {
		case 'EBool':
			if (_p17._0 === true) {
				return 'true';
			} else {
				return 'false';
			}
		case 'EString':
			var _p18 = _p17._0;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p18,
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_user$project$LangUnparser$escapeQuotes, _p18, _p17._1),
					_p18));
		default:
			return 'null';
	}
};
var _user$project$LangUnparser$unparseBaseValWithUniformWhitespace = _user$project$LangUnparser$unparseBaseVal;
var _user$project$LangUnparser$unparsePatWithUniformWhitespace = F2(
	function (includeWidgetDecls, pat) {
		var recurse = function (p) {
			return A2(_user$project$LangUnparser$unparsePatWithUniformWhitespace, includeWidgetDecls, p);
		};
		var _p19 = pat.val.p__;
		switch (_p19.ctor) {
			case 'PWildcard':
				return A2(_elm_lang$core$Basics_ops['++'], ' ', '_');
			case 'PVar':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p19._1,
						includeWidgetDecls ? _user$project$LangUnparser$unparseWDWithUniformWhitespace(_p19._2) : ''));
			case 'PList':
				if (_p19._3.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, recurse, _p19._1)),
								A2(_elm_lang$core$Basics_ops['++'], ' ', ']'))));
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, recurse, _p19._1)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										'|',
										A2(
											_elm_lang$core$Basics_ops['++'],
											recurse(_p19._3._0),
											A2(_elm_lang$core$Basics_ops['++'], ' ', ']')))))));
				}
			case 'PConst':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_user$project$ValUnparser$strNum(_p19._1));
			case 'PBase':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_user$project$LangUnparser$unparseBaseValWithUniformWhitespace(_p19._1));
			case 'PAs':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p19._1,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'@',
								recurse(_p19._3)))));
			default:
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' (',
					A2(
						_elm_lang$core$Basics_ops['++'],
						recurse(_p19._1),
						' )'));
		}
	});
var _user$project$LangUnparser$unparseWithUniformWhitespace = F3(
	function (includeWidgetDecls, includeConstAnnotations, exp) {
		var recurse = function (e) {
			return A3(_user$project$LangUnparser$unparseWithUniformWhitespace, includeWidgetDecls, includeConstAnnotations, e);
		};
		var recursePat = function (e) {
			return A2(_user$project$LangUnparser$unparsePatWithUniformWhitespace, includeWidgetDecls, e);
		};
		var _p20 = exp.val.e__;
		switch (_p20.ctor) {
			case 'EBase':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_user$project$LangUnparser$unparseBaseValWithUniformWhitespace(_p20._1));
			case 'EConst':
				var _p21 = _p20._2;
				var b = _p21._1;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p20._1),
						A2(
							_elm_lang$core$Basics_ops['++'],
							includeConstAnnotations ? b : '',
							includeWidgetDecls ? _user$project$LangUnparser$unparseWDWithUniformWhitespace(_p20._3) : '')));
			case 'EVar':
				return A2(_elm_lang$core$Basics_ops['++'], ' ', _p20._1);
			case 'EFun':
				if ((_p20._1.ctor === '::') && (_p20._1._1.ctor === '[]')) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(\\',
							A2(
								_elm_lang$core$Basics_ops['++'],
								recursePat(_p20._1._0),
								A2(
									_elm_lang$core$Basics_ops['++'],
									recurse(_p20._2),
									A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))));
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(\\(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, recursePat, _p20._1)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									')',
									A2(
										_elm_lang$core$Basics_ops['++'],
										recurse(_p20._2),
										A2(_elm_lang$core$Basics_ops['++'], ' ', ')'))))));
				}
			case 'EApp':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							recurse(_p20._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, recurse, _p20._2)),
								A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))));
			case 'EList':
				if (_p20._3.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(
										_elm_lang$core$List$map,
										function (_p22) {
											return recurse(
												_elm_lang$core$Tuple$second(_p22));
										},
										_p20._1)),
								A2(_elm_lang$core$Basics_ops['++'], ' ', ']'))));
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(
										_elm_lang$core$List$map,
										function (_p23) {
											return recurse(
												_elm_lang$core$Tuple$second(_p23));
										},
										_p20._1)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										'|',
										A2(
											_elm_lang$core$Basics_ops['++'],
											recurse(_p20._3._0),
											A2(_elm_lang$core$Basics_ops['++'], ' ', ']')))))));
				}
			case 'EOp':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$ValUnparser$strOp(_p20._1.val),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, recurse, _p20._2)),
								A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))));
			case 'EIf':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(if',
						A2(
							_elm_lang$core$Basics_ops['++'],
							recurse(_p20._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								recurse(_p20._3),
								A2(
									_elm_lang$core$Basics_ops['++'],
									recurse(_p20._5),
									A2(_elm_lang$core$Basics_ops['++'], ' ', ')'))))));
			case 'ELet':
				if (_p20._1.ctor === 'Let') {
					var tok = _p20._2 ? 'letrec' : 'let';
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								tok,
								A2(
									_elm_lang$core$Basics_ops['++'],
									recursePat(_p20._3),
									A2(
										_elm_lang$core$Basics_ops['++'],
										recurse(_p20._5),
										A2(
											_elm_lang$core$Basics_ops['++'],
											recurse(_p20._7),
											A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))))));
				} else {
					var tok = _p20._2 ? 'defrec' : 'def';
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								tok,
								A2(
									_elm_lang$core$Basics_ops['++'],
									recursePat(_p20._3),
									A2(
										_elm_lang$core$Basics_ops['++'],
										recurse(_p20._5),
										A2(
											_elm_lang$core$Basics_ops['++'],
											' ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												')',
												recurse(_p20._7))))))));
				}
			case 'ECase':
				var branchesStr = _elm_lang$core$String$concat(
					A2(
						_elm_lang$core$List$map,
						function (_p24) {
							var _p25 = _p24;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								' ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									'(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										recursePat(_p25._1),
										A2(
											_elm_lang$core$Basics_ops['++'],
											recurse(_p25._2),
											A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))));
						},
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.val;
							},
							_p20._2)));
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(case',
						A2(
							_elm_lang$core$Basics_ops['++'],
							recurse(_p20._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								branchesStr,
								A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))));
			case 'ETypeCase':
				var tbranchesStr = _elm_lang$core$String$concat(
					A2(
						_elm_lang$core$List$map,
						function (_p26) {
							var _p27 = _p26;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								' ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									'(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseTypeWithUniformWhitespace(_p27._1),
										A2(
											_elm_lang$core$Basics_ops['++'],
											recurse(_p27._2),
											A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))));
						},
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.val;
							},
							_p20._2)));
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(typecase',
						A2(
							_elm_lang$core$Basics_ops['++'],
							recurse(_p20._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								tbranchesStr,
								A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))));
			case 'EComment':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						';',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p20._1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								recurse(_p20._2)))));
			case 'EOption':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'# ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p20._1.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p20._3.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'\n',
											recurse(_p20._4))))))));
			case 'ETyp':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(typ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							recursePat(_p20._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparseTypeWithUniformWhitespace(_p20._2),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										')',
										recurse(_p20._3)))))));
			case 'EColonType':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							recurse(_p20._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									':',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseTypeWithUniformWhitespace(_p20._3),
										A2(_elm_lang$core$Basics_ops['++'], ' ', ')')))))));
			case 'ETypeAlias':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(def',
						A2(
							_elm_lang$core$Basics_ops['++'],
							recursePat(_p20._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparseTypeWithUniformWhitespace(_p20._2),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										')',
										recurse(_p20._3)))))));
			case 'EParens':
				return recurse(_p20._1);
			default:
				if (_p20._1.ctor === 'HoleNamed') {
					return A2(_elm_lang$core$Basics_ops['++'], ' ??', _p20._1._0);
				} else {
					return ' ??';
				}
		}
	});
var _user$project$LangUnparser$unparsePat = function (pat) {
	var _p28 = pat.val.p__;
	switch (_p28.ctor) {
		case 'PWildcard':
			return A2(_elm_lang$core$Basics_ops['++'], _p28._0.val, '_');
		case 'PVar':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p28._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._1,
					_user$project$LangUnparser$unparseWD(_p28._2)));
		case 'PList':
			if (_p28._3.ctor === 'Nothing') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparsePat, _p28._1)),
							A2(_elm_lang$core$Basics_ops['++'], _p28._4.val, ']'))));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparsePat, _p28._1)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p28._2.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'|',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparsePat(_p28._3._0),
										A2(_elm_lang$core$Basics_ops['++'], _p28._4.val, ']')))))));
			}
		case 'PConst':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p28._0.val,
				_user$project$ValUnparser$strNum(_p28._1));
		case 'PBase':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p28._0.val,
				_user$project$LangUnparser$unparseBaseVal(_p28._1));
		case 'PAs':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p28._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._1,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p28._2.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'@',
							_user$project$LangUnparser$unparsePat(_p28._3)))));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p28._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangUnparser$unparsePat(_p28._1),
						A2(_elm_lang$core$Basics_ops['++'], _p28._2.val, ')'))));
	}
};
var _user$project$LangUnparser$unparsePatWithIds = function (pat) {
	var pidTag = A2(
		_elm_lang$core$Basics_ops['++'],
		'«',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(pat.val.pid),
			'»'));
	var _p29 = pat.val.p__;
	switch (_p29.ctor) {
		case 'PWildcard':
			return A2(_elm_lang$core$Basics_ops['++'], _p29._0.val, '_');
		case 'PVar':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p29._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p29._1,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangUnparser$unparseWD(_p29._2),
						pidTag)));
		case 'PList':
			if (_p29._3.ctor === 'Nothing') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p29._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparsePatWithIds, _p29._1)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p29._4.val,
								A2(_elm_lang$core$Basics_ops['++'], ']', pidTag)))));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p29._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparsePatWithIds, _p29._1)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p29._2.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'|',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparsePatWithIds(_p29._3._0),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p29._4.val,
											A2(_elm_lang$core$Basics_ops['++'], ']', pidTag))))))));
			}
		case 'PConst':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p29._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$ValUnparser$strNum(_p29._1),
					pidTag));
		case 'PBase':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p29._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$LangUnparser$unparseBaseVal(_p29._1),
					pidTag));
		case 'PAs':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p29._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p29._1,
					A2(
						_elm_lang$core$Basics_ops['++'],
						pidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p29._2.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'@',
								_user$project$LangUnparser$unparsePatWithIds(_p29._3))))));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p29._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						pidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparsePatWithIds(_p29._1),
							A2(_elm_lang$core$Basics_ops['++'], _p29._2.val, ')')))));
	}
};
var _user$project$LangUnparser$unparse_ = function (e) {
	unparse_:
	while (true) {
		var _p30 = e.val.e__;
		switch (_p30.ctor) {
			case 'EBase':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					_user$project$LangUnparser$unparseBaseVal(_p30._1));
			case 'EConst':
				var _p31 = _p30._2;
				var b = _p31._1;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p30._1),
						A2(
							_elm_lang$core$Basics_ops['++'],
							b,
							_user$project$LangUnparser$unparseWD(_p30._3))));
			case 'EVar':
				return A2(_elm_lang$core$Basics_ops['++'], _p30._0.val, _p30._1);
			case 'EFun':
				if ((_p30._1.ctor === '::') && (_p30._1._1.ctor === '[]')) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p30._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(\\',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparsePat(_p30._1._0),
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparse_(_p30._2),
									A2(_elm_lang$core$Basics_ops['++'], _p30._3.val, ')')))));
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p30._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(\\(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparsePat, _p30._1)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									')',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparse_(_p30._2),
										A2(_elm_lang$core$Basics_ops['++'], _p30._3.val, ')'))))));
				}
			case 'EApp':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparse_(_p30._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparse_, _p30._2)),
								A2(_elm_lang$core$Basics_ops['++'], _p30._4.val, ')')))));
			case 'EList':
				if (_p30._3.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p30._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(
										_elm_lang$core$List$map,
										function (_p32) {
											return _user$project$LangUnparser$unparse_(
												_elm_lang$core$Tuple$second(_p32));
										},
										_p30._1)),
								A2(_elm_lang$core$Basics_ops['++'], _p30._4.val, ']'))));
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p30._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(
										_elm_lang$core$List$map,
										function (_p33) {
											return _user$project$LangUnparser$unparse_(
												_elm_lang$core$Tuple$second(_p33));
										},
										_p30._1)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p30._2.val,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'|',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$LangUnparser$unparse_(_p30._3._0),
											A2(_elm_lang$core$Basics_ops['++'], _p30._4.val, ']')))))));
				}
			case 'EOp':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$ValUnparser$strOp(_p30._1.val),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparse_, _p30._2)),
								A2(_elm_lang$core$Basics_ops['++'], _p30._3.val, ')')))));
			case 'EIf':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(if',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparse_(_p30._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparse_(_p30._3),
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparse_(_p30._5),
									A2(_elm_lang$core$Basics_ops['++'], _p30._6.val, ')'))))));
			case 'ELet':
				if (_p30._1.ctor === 'Let') {
					var _p35 = _p30._3;
					var _p34 = _p35.val.p__;
					if ((_p34.ctor === 'PVar') && (_p34._1 === '_IMPLICIT_MAIN')) {
						return '';
					} else {
						var tok = _p30._2 ? 'letrec' : 'let';
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p30._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									tok,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparsePat(_p35),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$LangUnparser$unparse_(_p30._5),
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$LangUnparser$unparse_(_p30._7),
												A2(_elm_lang$core$Basics_ops['++'], _p30._8.val, ')')))))));
					}
				} else {
					var tok = _p30._2 ? 'defrec' : 'def';
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p30._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								tok,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparsePat(_p30._3),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparse_(_p30._5),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p30._8.val,
											A2(
												_elm_lang$core$Basics_ops['++'],
												')',
												_user$project$LangUnparser$unparse_(_p30._7))))))));
				}
			case 'ECase':
				var branchesStr = _elm_lang$core$String$concat(
					A2(
						_elm_lang$core$List$map,
						function (_p36) {
							var _p37 = _p36;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p37._0.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparsePat(_p37._1),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$LangUnparser$unparse_(_p37._2),
											A2(_elm_lang$core$Basics_ops['++'], _p37._3.val, ')')))));
						},
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.val;
							},
							_p30._2)));
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(case',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparse_(_p30._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								branchesStr,
								A2(_elm_lang$core$Basics_ops['++'], _p30._3.val, ')')))));
			case 'ETypeCase':
				var tbranchesStr = _elm_lang$core$String$concat(
					A2(
						_elm_lang$core$List$map,
						function (_p38) {
							var _p39 = _p38;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p39._0.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(_user$project$LangUnparser$unparseType, false, _p39._1),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$LangUnparser$unparse_(_p39._2),
											A2(_elm_lang$core$Basics_ops['++'], _p39._3.val, ')')))));
						},
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.val;
							},
							_p30._2)));
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(typecase',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparse_(_p30._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								tbranchesStr,
								A2(_elm_lang$core$Basics_ops['++'], _p30._3.val, ')')))));
			case 'EComment':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						';',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p30._1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								_user$project$LangUnparser$unparse_(_p30._2)))));
			case 'EOption':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'# ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p30._1.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p30._2.val,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p30._3.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'\n',
											_user$project$LangUnparser$unparse_(_p30._4))))))));
			case 'ETyp':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(typ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparsePat(_p30._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$LangUnparser$unparseType, false, _p30._2),
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p30._4.val,
									A2(
										_elm_lang$core$Basics_ops['++'],
										')',
										_user$project$LangUnparser$unparse_(_p30._3)))))));
			case 'EColonType':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparse_(_p30._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p30._2.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									':',
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(_user$project$LangUnparser$unparseType, false, _p30._3),
										A2(_elm_lang$core$Basics_ops['++'], _p30._4.val, ')')))))));
			case 'ETypeAlias':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p30._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(def',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparsePat(_p30._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$LangUnparser$unparseType, false, _p30._2),
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p30._4.val,
									A2(
										_elm_lang$core$Basics_ops['++'],
										')',
										_user$project$LangUnparser$unparse_(_p30._3)))))));
			case 'EParens':
				var _v20 = _p30._1;
				e = _v20;
				continue unparse_;
			default:
				switch (_p30._1.ctor) {
					case 'HoleNamed':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p30._0.val,
							A2(_elm_lang$core$Basics_ops['++'], '??', _p30._1._0));
					case 'HoleLoc':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p30._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'??k',
								_elm_lang$core$Basics$toString(_p30._1._0)));
					default:
						return A2(_elm_lang$core$Basics_ops['++'], _p30._0.val, '??');
				}
		}
	}
};
var _user$project$LangUnparser$unparse = function (e) {
	return _user$project$LangUnparser$unparse_(e);
};
var _user$project$LangUnparser$unparseWithIds = function (e) {
	var eidTag = A2(
		_elm_lang$core$Basics_ops['++'],
		'<',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(e.val.eid),
			'>'));
	var _p40 = e.val.e__;
	switch (_p40.ctor) {
		case 'EBase':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$LangUnparser$unparseBaseVal(_p40._1),
					eidTag));
		case 'EConst':
			var _p41 = _p40._2;
			var locId = _p41._0;
			var b = _p41._1;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p40._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						b,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparseWD(_p40._3),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'{',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(locId),
									A2(_elm_lang$core$Basics_ops['++'], '}', eidTag)))))));
		case 'EVar':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(_elm_lang$core$Basics_ops['++'], _p40._1, eidTag));
		case 'EFun':
			if ((_p40._1.ctor === '::') && (_p40._1._1.ctor === '[]')) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p40._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							eidTag,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\\',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparsePatWithIds(_p40._1._0),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseWithIds(_p40._2),
										A2(_elm_lang$core$Basics_ops['++'], _p40._3.val, ')')))))));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p40._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							eidTag,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\\(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$String$concat(
										A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparsePatWithIds, _p40._1)),
									A2(
										_elm_lang$core$Basics_ops['++'],
										')',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$LangUnparser$unparseWithIds(_p40._2),
											A2(_elm_lang$core$Basics_ops['++'], _p40._3.val, ')'))))))));
			}
		case 'EApp':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangUnparser$unparseWithIds(_p40._1),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparseWithIds, _p40._2)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p40._4.val,
								A2(_elm_lang$core$Basics_ops['++'], ')', eidTag))))));
		case 'EList':
			if (_p40._3.ctor === 'Nothing') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p40._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(
									_elm_lang$core$List$map,
									function (_p42) {
										return _user$project$LangUnparser$unparseWithIds(
											_elm_lang$core$Tuple$second(_p42));
									},
									_p40._1)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p40._4.val,
								A2(_elm_lang$core$Basics_ops['++'], ']', eidTag)))));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p40._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(
									_elm_lang$core$List$map,
									function (_p43) {
										return _user$project$LangUnparser$unparseWithIds(
											_elm_lang$core$Tuple$second(_p43));
									},
									_p40._1)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p40._2.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'|',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseWithIds(_p40._3._0),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p40._4.val,
											A2(_elm_lang$core$Basics_ops['++'], ']', eidTag))))))));
			}
		case 'EOp':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$ValUnparser$strOp(_p40._1.val),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, _user$project$LangUnparser$unparseWithIds, _p40._2)),
								A2(_elm_lang$core$Basics_ops['++'], _p40._3.val, ')'))))));
		case 'EIf':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'if',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparseWithIds(_p40._1),
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparseWithIds(_p40._3),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseWithIds(_p40._5),
										A2(_elm_lang$core$Basics_ops['++'], _p40._6.val, ')'))))))));
		case 'ELet':
			if (_p40._1.ctor === 'Let') {
				var tok = _p40._2 ? 'letrec' : 'let';
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p40._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							eidTag,
							A2(
								_elm_lang$core$Basics_ops['++'],
								tok,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparsePatWithIds(_p40._3),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseWithIds(_p40._5),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$LangUnparser$unparseWithIds(_p40._7),
											A2(_elm_lang$core$Basics_ops['++'], _p40._8.val, ')'))))))));
			} else {
				var tok = _p40._2 ? 'defrec' : 'def';
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p40._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							eidTag,
							A2(
								_elm_lang$core$Basics_ops['++'],
								tok,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparsePatWithIds(_p40._3),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseWithIds(_p40._5),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p40._8.val,
											A2(
												_elm_lang$core$Basics_ops['++'],
												')',
												_user$project$LangUnparser$unparseWithIds(_p40._7)))))))));
			}
		case 'ECase':
			var branchesStr = _elm_lang$core$String$concat(
				A2(
					_elm_lang$core$List$map,
					function (_p44) {
						var _p45 = _p44;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p45._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparsePatWithIds(_p45._1),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseWithIds(_p45._2),
										A2(_elm_lang$core$Basics_ops['++'], _p45._3.val, ')')))));
					},
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.val;
						},
						_p40._2)));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'case',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparseWithIds(_p40._1),
								A2(
									_elm_lang$core$Basics_ops['++'],
									branchesStr,
									A2(_elm_lang$core$Basics_ops['++'], _p40._3.val, ')')))))));
		case 'ETypeCase':
			var tbranchesStr = _elm_lang$core$String$concat(
				A2(
					_elm_lang$core$List$map,
					function (_p46) {
						var _p47 = _p46;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p47._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$LangUnparser$unparseType, false, _p47._1),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LangUnparser$unparseWithIds(_p47._2),
										A2(_elm_lang$core$Basics_ops['++'], _p47._3.val, ')')))));
					},
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.val;
						},
						_p40._2)));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'typecase',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparseWithIds(_p40._1),
								A2(
									_elm_lang$core$Basics_ops['++'],
									tbranchesStr,
									A2(_elm_lang$core$Basics_ops['++'], _p40._3.val, ')')))))));
		case 'EComment':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					';',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p40._1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								_user$project$LangUnparser$unparseWithIds(_p40._2))))));
		case 'EOption':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'#',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p40._1.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									':',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p40._2.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p40._3.val,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'\n',
												_user$project$LangUnparser$unparseWithIds(_p40._4))))))))));
		case 'ETyp':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'typ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparsePatWithIds(_p40._1),
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$LangUnparser$unparseType, false, _p40._2),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p40._4.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											')',
											_user$project$LangUnparser$unparseWithIds(_p40._3)))))))));
		case 'EColonType':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangUnparser$unparseWithIds(_p40._1),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p40._2.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								A2(
									_elm_lang$core$Basics_ops['++'],
									eidTag,
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(_user$project$LangUnparser$unparseType, false, _p40._3),
										A2(_elm_lang$core$Basics_ops['++'], _p40._4.val, ')'))))))));
		case 'ETypeAlias':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'def',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangUnparser$unparsePatWithIds(_p40._1),
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$LangUnparser$unparseType, false, _p40._2),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p40._4.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											')',
											_user$project$LangUnparser$unparseWithIds(_p40._3)))))))));
		case 'EParens':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p40._0.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						eidTag,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$LangUnparser$unparseWithIds(_p40._1),
							A2(_elm_lang$core$Basics_ops['++'], _p40._3.val, ')')))));
		default:
			switch (_p40._1.ctor) {
				case 'HoleNamed':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p40._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'??',
							A2(_elm_lang$core$Basics_ops['++'], _p40._1._0, eidTag)));
				case 'HoleLoc':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p40._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'??k',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p40._1._0),
								eidTag)));
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p40._0.val,
						A2(_elm_lang$core$Basics_ops['++'], '??', eidTag));
			}
	}
};
var _user$project$LangUnparser$patsEquivalent = F2(
	function (pat1, pat2) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_user$project$LangUnparser$unparsePatWithUniformWhitespace, true, pat1),
			A2(_user$project$LangUnparser$unparsePatWithUniformWhitespace, true, pat2));
	});
var _user$project$LangUnparser$expsEquivalent = F2(
	function (exp1, exp2) {
		return _elm_lang$core$Native_Utils.eq(
			A3(_user$project$LangUnparser$unparseWithUniformWhitespace, true, true, exp1),
			A3(_user$project$LangUnparser$unparseWithUniformWhitespace, true, true, exp2));
	});
var _user$project$LangUnparser$bumpCol = F2(
	function (n, pos) {
		return _elm_lang$core$Native_Utils.update(
			pos,
			{col: n + pos.col});
	});
var _user$project$LangUnparser$incCol = _user$project$LangUnparser$bumpCol(1);
var _user$project$LangUnparser$debugLog = _user$project$Config$debugLog(_user$project$Config$debugParser);

var _user$project$FastParser$substPlusOf_ = F2(
	function (substPlus, exp) {
		var accumulator = F2(
			function (e, s) {
				var _p0 = e.val.e__;
				if ((_p0.ctor === 'EConst') && (_p0._2.ctor === '_Tuple3')) {
					var _p3 = _p0._1;
					var _p2 = _p0._2._0;
					var _p1 = A2(_elm_lang$core$Dict$get, _p2, s);
					if (_p1.ctor === 'Nothing') {
						return A3(
							_elm_lang$core$Dict$insert,
							_p2,
							_elm_lang$core$Native_Utils.update(
								e,
								{val: _p3}),
							s);
					} else {
						return _elm_lang$core$Native_Utils.eq(_p3, _p1._0.val) ? s : _elm_lang$core$Native_Utils.crash(
							'FastParser',
							{
								start: {line: 1710, column: 15},
								end: {line: 1710, column: 26}
							})(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'substPlusOf_ Duplicate locId ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p2),
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with differing value ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(_p3),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'\n',
												_user$project$LangUnparser$unparseWithIds(exp)))))));
					}
				} else {
					return s;
				}
			});
		return A3(_user$project$Lang$foldExp, accumulator, substPlus, exp);
	});
var _user$project$FastParser$recordIdentifiers = function (_p4) {
	recordIdentifiers:
	while (true) {
		var _p5 = _p4;
		var _p15 = _p5._0;
		var _p14 = _p5._1;
		var ret = function (e__) {
			return A3(
				_user$project$Info$WithInfo,
				A2(_user$project$Lang$Exp_, e__, _p14.val.eid),
				_p14.start,
				_p14.end);
		};
		var _p6 = {ctor: '_Tuple2', _0: _p15.val.p__, _1: _p14.val.e__};
		_v3_4:
		do {
			_v3_3:
			do {
				switch (_p6._0.ctor) {
					case 'PVar':
						switch (_p6._1.ctor) {
							case 'EConst':
								if (_p6._1._2.ctor === '_Tuple3') {
									return ret(
										A4(
											_user$project$Lang$EConst,
											_p6._1._0,
											_p6._1._1,
											{ctor: '_Tuple3', _0: _p6._1._2._0, _1: _p6._1._2._1, _2: _p6._0._1},
											_p6._1._3));
								} else {
									break _v3_4;
								}
							case 'EColonType':
								break _v3_3;
							default:
								break _v3_4;
						}
					case 'PList':
						switch (_p6._1.ctor) {
							case 'EList':
								var _p13 = _p6._1._4;
								var _p12 = _p6._1._2;
								var _p11 = _p6._1._0;
								var _p10 = _p6._1._3;
								var _p9 = _p6._1._1;
								var _p7 = A2(
									_user$project$Utils$maybeZip,
									_p6._0._1,
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p9));
								if (_p7.ctor === 'Nothing') {
									return ret(
										A5(_user$project$Lang$EList, _p11, _p9, _p12, _p10, _p13));
								} else {
									var es_ = A2(_elm_lang$core$List$map, _user$project$FastParser$recordIdentifiers, _p7._0);
									var me_ = function () {
										var _p8 = {ctor: '_Tuple2', _0: _p6._0._3, _1: _p10};
										if (((_p8.ctor === '_Tuple2') && (_p8._0.ctor === 'Just')) && (_p8._1.ctor === 'Just')) {
											return _elm_lang$core$Maybe$Just(
												_user$project$FastParser$recordIdentifiers(
													{ctor: '_Tuple2', _0: _p8._0._0, _1: _p8._1._0}));
										} else {
											return _p10;
										}
									}();
									return ret(
										A5(
											_user$project$Lang$EList,
											_p11,
											A2(
												_user$project$Utils$zip,
												A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p9),
												es_),
											_p12,
											me_,
											_p13));
								}
							case 'EColonType':
								break _v3_3;
							default:
								break _v3_4;
						}
					case 'PAs':
						var _v6 = {ctor: '_Tuple2', _0: _p6._0._3, _1: _p14};
						_p4 = _v6;
						continue recordIdentifiers;
					default:
						if (_p6._1.ctor === 'EColonType') {
							break _v3_3;
						} else {
							break _v3_4;
						}
				}
			} while(false);
			return ret(
				A5(
					_user$project$Lang$EColonType,
					_p6._1._0,
					_user$project$FastParser$recordIdentifiers(
						{ctor: '_Tuple2', _0: _p15, _1: _p6._1._1}),
					_p6._1._2,
					_p6._1._3,
					_p6._1._4));
		} while(false);
		return ret(_p6._1);
	}
};
var _user$project$FastParser$allIdsRaw = function (exp) {
	var pidsInPat = function (pat) {
		return A2(
			_elm_lang$core$List$map,
			function (_p16) {
				return function (_) {
					return _.pid;
				}(
					function (_) {
						return _.val;
					}(_p16));
			},
			_user$project$Lang$flattenPatTree(pat));
	};
	var pidsInPats = function (pats) {
		return A2(_elm_lang$core$List$concatMap, pidsInPat, pats);
	};
	var flattened = _user$project$Lang$flattenExpTree(exp);
	var eids = A2(
		_elm_lang$core$List$map,
		function (_p17) {
			return function (_) {
				return _.eid;
			}(
				function (_) {
					return _.val;
				}(_p17));
		},
		flattened);
	var otherIds = A2(
		_elm_lang$core$List$concatMap,
		function (exp) {
			var _p18 = exp.val.e__;
			_v7_6:
			do {
				switch (_p18.ctor) {
					case 'EConst':
						if (_p18._2.ctor === '_Tuple3') {
							return {
								ctor: '::',
								_0: _p18._2._0,
								_1: {ctor: '[]'}
							};
						} else {
							break _v7_6;
						}
					case 'ELet':
						return pidsInPat(_p18._3);
					case 'EFun':
						return pidsInPats(_p18._1);
					case 'ECase':
						return pidsInPats(
							_user$project$Lang$branchPats(_p18._2));
					case 'ETyp':
						return pidsInPat(_p18._1);
					case 'ETypeAlias':
						return pidsInPat(_p18._1);
					default:
						break _v7_6;
				}
			} while(false);
			return {ctor: '[]'};
		},
		flattened);
	return A2(_elm_lang$core$Basics_ops['++'], eids, otherIds);
};
var _user$project$FastParser$freshenPatPreserving = F3(
	function (idsToPreserve, initK, p) {
		var getId = function (k) {
			getId:
			while (true) {
				if (A2(_elm_lang$core$Set$member, k, idsToPreserve)) {
					var _v8 = k + 1;
					k = _v8;
					continue getId;
				} else {
					return k;
				}
			}
		};
		var assignIds = F2(
			function (pat, k) {
				if (A2(_elm_lang$core$Set$member, pat.val.pid, idsToPreserve)) {
					return {ctor: '_Tuple2', _0: pat, _1: k};
				} else {
					var pid = getId(k);
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Lang$setPId, pid, pat),
						_1: pid + 1
					};
				}
			});
		return A3(_user$project$Lang$mapFoldPatTopDown, assignIds, initK, p);
	});
var _user$project$FastParser$freshenPatsPreserving = F3(
	function (idsToPreserve, initK, pats) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (pat, _p19) {
					var _p20 = _p19;
					var _p21 = A3(_user$project$FastParser$freshenPatPreserving, idsToPreserve, _p20._1, pat);
					var newPat = _p21._0;
					var newK = _p21._1;
					return {
						ctor: '_Tuple2',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							_p20._0,
							{
								ctor: '::',
								_0: newPat,
								_1: {ctor: '[]'}
							}),
						_1: newK
					};
				}),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: initK
			},
			pats);
	});
var _user$project$FastParser$freshenPreserving = F3(
	function (idsToPreserve, initK, e) {
		var getId = function (k) {
			getId:
			while (true) {
				if (A2(_elm_lang$core$Set$member, k, idsToPreserve)) {
					var _v10 = k + 1;
					k = _v10;
					continue getId;
				} else {
					return k;
				}
			}
		};
		var assignIds = F2(
			function (exp, k) {
				var e__ = exp.val.e__;
				var _p22 = function () {
					var _p23 = e__;
					_v11_6:
					do {
						switch (_p23.ctor) {
							case 'EConst':
								if (_p23._2.ctor === '_Tuple3') {
									if (A2(_elm_lang$core$Set$member, _p23._2._0, idsToPreserve)) {
										return {ctor: '_Tuple2', _0: e__, _1: k};
									} else {
										var locId = getId(k);
										return {
											ctor: '_Tuple2',
											_0: A4(
												_user$project$Lang$EConst,
												_p23._0,
												_p23._1,
												{ctor: '_Tuple3', _0: locId, _1: _p23._2._1, _2: _p23._2._2},
												_p23._3),
											_1: locId + 1
										};
									}
								} else {
									break _v11_6;
								}
							case 'ELet':
								var _p24 = A3(_user$project$FastParser$freshenPatPreserving, idsToPreserve, k, _p23._3);
								var newP = _p24._0;
								var newK = _p24._1;
								var newE1 = _user$project$FastParser$recordIdentifiers(
									{ctor: '_Tuple2', _0: newP, _1: _p23._5});
								return {
									ctor: '_Tuple2',
									_0: A9(_user$project$Lang$ELet, _p23._0, _p23._1, _p23._2, newP, _p23._4, newE1, _p23._6, _p23._7, _p23._8),
									_1: newK
								};
							case 'EFun':
								var _p25 = A3(_user$project$FastParser$freshenPatsPreserving, idsToPreserve, k, _p23._1);
								var newPats = _p25._0;
								var newK = _p25._1;
								return {
									ctor: '_Tuple2',
									_0: A4(_user$project$Lang$EFun, _p23._0, newPats, _p23._2, _p23._3),
									_1: newK
								};
							case 'ECase':
								var _p26 = A3(
									_elm_lang$core$List$foldl,
									F2(
										function (branch, _p27) {
											var _p28 = _p27;
											var _p29 = branch.val;
											var bws1 = _p29._0;
											var pat = _p29._1;
											var ei = _p29._2;
											var bws2 = _p29._3;
											var _p30 = A3(_user$project$FastParser$freshenPatPreserving, idsToPreserve, _p28._1, pat);
											var newPi = _p30._0;
											var newK = _p30._1;
											return {
												ctor: '_Tuple2',
												_0: A2(
													_elm_lang$core$Basics_ops['++'],
													_p28._0,
													{
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															branch,
															{
																val: A4(_user$project$Lang$Branch_, bws1, newPi, ei, bws2)
															}),
														_1: {ctor: '[]'}
													}),
												_1: newK
											};
										}),
									{
										ctor: '_Tuple2',
										_0: {ctor: '[]'},
										_1: k
									},
									_p23._2);
								var newBranches = _p26._0;
								var newK = _p26._1;
								return {
									ctor: '_Tuple2',
									_0: A4(_user$project$Lang$ECase, _p23._0, _p23._1, newBranches, _p23._3),
									_1: newK
								};
							case 'ETyp':
								var _p31 = A3(_user$project$FastParser$freshenPatPreserving, idsToPreserve, k, _p23._1);
								var newPat = _p31._0;
								var newK = _p31._1;
								return {
									ctor: '_Tuple2',
									_0: A5(_user$project$Lang$ETyp, _p23._0, newPat, _p23._2, _p23._3, _p23._4),
									_1: newK
								};
							case 'ETypeAlias':
								var _p32 = A3(_user$project$FastParser$freshenPatPreserving, idsToPreserve, k, _p23._1);
								var newPat = _p32._0;
								var newK = _p32._1;
								return {
									ctor: '_Tuple2',
									_0: A5(_user$project$Lang$ETypeAlias, _p23._0, newPat, _p23._2, _p23._3, _p23._4),
									_1: newK
								};
							default:
								break _v11_6;
						}
					} while(false);
					return {ctor: '_Tuple2', _0: e__, _1: k};
				}();
				var newE__ = _p22._0;
				var newK = _p22._1;
				if (A2(_elm_lang$core$Set$member, exp.val.eid, idsToPreserve)) {
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Lang$replaceE__, exp, newE__),
						_1: newK
					};
				} else {
					var eid = getId(newK);
					return {
						ctor: '_Tuple2',
						_0: A3(
							_user$project$Info$WithInfo,
							A2(_user$project$Lang$Exp_, newE__, eid),
							exp.start,
							exp.end),
						_1: eid + 1
					};
				}
			});
		return A3(_user$project$Lang$mapFoldExp, assignIds, initK, e);
	});
var _user$project$FastParser$freshenClean = F2(
	function (initK, e) {
		return A3(_user$project$FastParser$freshenPreserving, _elm_lang$core$Set$empty, initK, e);
	});
var _user$project$FastParser$clearAllIds = function (root) {
	return A2(_user$project$Lang$mapExp, _user$project$Lang$clearNodeIds, root);
};
var _user$project$FastParser$isActualEId = function (eid) {
	return _elm_lang$core$Native_Utils.cmp(eid, 0) > 0;
};
var _user$project$FastParser$implicitMain = function () {
	var builder = function (p) {
		var withCorrectInfo = function (x) {
			return A3(_user$project$Info$WithInfo, x, p, p);
		};
		var name = function (_p33) {
			return withCorrectInfo(
				_user$project$Lang$pat_(_p33));
		}(
			A3(
				_user$project$Lang$PVar,
				_user$project$Lang$space1,
				'_IMPLICIT_MAIN',
				_user$project$Info$withDummyInfo(_user$project$Lang$NoWidgetDecl)));
		var binding = function (_p34) {
			return withCorrectInfo(
				_user$project$Lang$exp_(_p34));
		}(
			A2(
				_user$project$Lang$EBase,
				_user$project$Lang$space1,
				A2(_user$project$Lang$EString, _user$project$Lang$defaultQuoteChar, '...')));
		var body = function (_p35) {
			return withCorrectInfo(
				_user$project$Lang$exp_(_p35));
		}(
			A2(_user$project$Lang$EVar, _user$project$Lang$space1, 'main'));
		return function (_p36) {
			return withCorrectInfo(
				_user$project$Lang$exp_(_p36));
		}(
			A9(
				_user$project$Lang$ELet,
				_user$project$Lang$newline2,
				_user$project$Lang$Let,
				false,
				name,
				_user$project$Lang$ws(''),
				binding,
				_user$project$Lang$ws(''),
				body,
				_user$project$Lang$space0));
	};
	return A2(
		_elm_tools$parser$Parser_ops['|='],
		_elm_tools$parser$Parser$succeed(builder),
		_user$project$ParserUtils$getPos);
}();
var _user$project$FastParser$topLevelOption = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level option',
	A3(
		_user$project$LangParserUtils$paddedBefore,
		F3(
			function (wsStart, _p37, rest) {
				var _p38 = _p37;
				return _user$project$Lang$exp_(
					A5(_user$project$Lang$EOption, wsStart, _p38._0, _p38._1, _p38._2, rest));
			}),
		_user$project$LangParserUtils$spaces,
		_user$project$ParserUtils$trackInfo(
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										_elm_tools$parser$Parser$succeed(
											F3(
												function (v0, v1, v2) {
													return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
												})),
										_elm_tools$parser$Parser$symbol('#')),
									_user$project$LangParserUtils$spaces),
								_user$project$ParserUtils$trackInfo(
									A2(
										_elm_tools$parser$Parser$keep,
										_elm_tools$parser$Parser$zeroOrMore,
										function (c) {
											return (!_elm_lang$core$Native_Utils.eq(
												c,
												_elm_lang$core$Native_Utils.chr('\n'))) && ((!_elm_lang$core$Native_Utils.eq(
												c,
												_elm_lang$core$Native_Utils.chr(' '))) && (!_elm_lang$core$Native_Utils.eq(
												c,
												_elm_lang$core$Native_Utils.chr(':'))));
										}))),
							_elm_tools$parser$Parser$symbol(':')),
						_user$project$LangParserUtils$spaces),
					_user$project$ParserUtils$trackInfo(
						A2(
							_elm_tools$parser$Parser$keep,
							_elm_tools$parser$Parser$zeroOrMore,
							function (c) {
								return !_elm_lang$core$Native_Utils.eq(
									c,
									_elm_lang$core$Native_Utils.chr('\n'));
							}))),
				_elm_tools$parser$Parser$symbol('\n')))));
var _user$project$FastParser$topLevelComment = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level comment',
	A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (wsStart, _p39) {
				var _p40 = _p39;
				var _p41 = _p40._1;
				return A3(
					_user$project$Info$WithInfo,
					function (rest) {
						return _user$project$Lang$exp_(
							A3(_user$project$Lang$EComment, wsStart, _p41.val, rest));
					},
					_p40._0.start,
					_p41.end);
			}),
		_user$project$LangParserUtils$spaces,
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					_user$project$ParserUtils$trackInfo(
						_elm_tools$parser$Parser$symbol(';'))),
				_user$project$ParserUtils$trackInfo(
					A2(
						_elm_tools$parser$Parser$keep,
						_elm_tools$parser$Parser$zeroOrMore,
						function (c) {
							return !_elm_lang$core$Native_Utils.eq(
								c,
								_elm_lang$core$Native_Utils.chr('\n'));
						}))),
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: _elm_tools$parser$Parser$symbol('\n'),
					_1: {
						ctor: '::',
						_0: _elm_tools$parser$Parser$end,
						_1: {ctor: '[]'}
					}
				}))));
var _user$project$FastParser$holeEmpty = _user$project$LangParserUtils$mapExp_(
	A3(
		_user$project$LangParserUtils$paddedBefore,
		_user$project$Lang$EHole,
		_user$project$LangParserUtils$spaces,
		_user$project$ParserUtils$trackInfo(
			A2(_user$project$ParserUtils$token, '??', _user$project$Lang$HoleEmpty))));
var _user$project$FastParser$noRoles = function (t__) {
	return {t__: t__, roles: _elm_lang$core$Set$empty};
};
var _user$project$FastParser$baseType = F3(
	function (context, ctor, token) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			context,
			A3(
				_elm_tools$parser$Parser$delayedCommitMap,
				F2(
					function (ws, _p42) {
						return A3(
							_user$project$Info$WithInfo,
							_user$project$FastParser$noRoles(
								ctor(ws)),
							ws.start,
							ws.end);
					}),
				_user$project$LangParserUtils$spaces,
				_elm_tools$parser$Parser$keyword(token)));
	});
var _user$project$FastParser$nullType = A3(_user$project$FastParser$baseType, 'null type', _user$project$Lang$TNull, 'Null');
var _user$project$FastParser$numType = A3(_user$project$FastParser$baseType, 'num type', _user$project$Lang$TNum, 'Num');
var _user$project$FastParser$boolType = A3(_user$project$FastParser$baseType, 'bool type', _user$project$Lang$TBool, 'Bool');
var _user$project$FastParser$stringType = A3(_user$project$FastParser$baseType, 'string type', _user$project$Lang$TString, 'String');
var _user$project$FastParser$wildcardType = A2(
	_elm_tools$parser$Parser$inContext,
	'wildcard type',
	A3(
		_user$project$LangParserUtils$spaceSaverKeyword,
		_user$project$LangParserUtils$spaces,
		'_',
		function (_p43) {
			return _user$project$FastParser$noRoles(
				_user$project$Lang$TWildcard(_p43));
		}));
var _user$project$FastParser$namePattern = function (ident) {
	return _user$project$LangParserUtils$mapPat_(
		A3(
			_user$project$LangParserUtils$paddedBefore,
			F2(
				function (ws, name) {
					return A3(_user$project$Lang$PVar, ws, name, _user$project$Lang$noWidgetDecl);
				}),
			_user$project$LangParserUtils$spaces,
			ident));
};
var _user$project$FastParser$validTypeIdentifierFirstChar = function (c) {
	return _elm_lang$core$Char$isUpper(c);
};
var _user$project$FastParser$validVariableIdentifierFirstChar = function (c) {
	return _elm_lang$core$Char$isLower(c) || _elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr('_'));
};
var _user$project$FastParser$keywords = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'true',
		_1: {
			ctor: '::',
			_0: 'false',
			_1: {
				ctor: '::',
				_0: 'π',
				_1: {
					ctor: '::',
					_0: 'cos',
					_1: {
						ctor: '::',
						_0: 'sin',
						_1: {
							ctor: '::',
							_0: 'arccos',
							_1: {
								ctor: '::',
								_0: 'arcsin',
								_1: {
									ctor: '::',
									_0: 'abs',
									_1: {
										ctor: '::',
										_0: 'floor',
										_1: {
											ctor: '::',
											_0: 'ceiling',
											_1: {
												ctor: '::',
												_0: 'round',
												_1: {
													ctor: '::',
													_0: 'toString',
													_1: {
														ctor: '::',
														_0: 'sqrt',
														_1: {
															ctor: '::',
															_0: 'explode',
															_1: {
																ctor: '::',
																_0: 'mod',
																_1: {
																	ctor: '::',
																	_0: 'pow',
																	_1: {
																		ctor: '::',
																		_0: 'arctan2',
																		_1: {
																			ctor: '::',
																			_0: 'if',
																			_1: {
																				ctor: '::',
																				_0: 'case',
																				_1: {
																					ctor: '::',
																					_0: 'typecase',
																					_1: {
																						ctor: '::',
																						_0: 'let',
																						_1: {
																							ctor: '::',
																							_0: 'letrec',
																							_1: {
																								ctor: '::',
																								_0: 'def',
																								_1: {
																									ctor: '::',
																									_0: 'defrec',
																									_1: {
																										ctor: '::',
																										_0: 'typ',
																										_1: {
																											ctor: '::',
																											_0: 'empty',
																											_1: {
																												ctor: '::',
																												_0: 'insert',
																												_1: {
																													ctor: '::',
																													_0: 'get',
																													_1: {
																														ctor: '::',
																														_0: 'remove',
																														_1: {
																															ctor: '::',
																															_0: 'debug',
																															_1: {
																																ctor: '::',
																																_0: 'noWidgets',
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$FastParser$validIdentifierRestChar = function (c) {
	return _elm_lang$core$Char$isLower(c) || (_elm_lang$core$Char$isUpper(c) || (_elm_lang$core$Char$isDigit(c) || (_elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr('_')) || _elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr('\'')))));
};
var _user$project$FastParser$variableIdentifierString = A2(
	_elm_tools$parser$Parser$inContext,
	'variable identifier string',
	_user$project$ParserUtils$trackInfo(
		A3(_elm_tools$parser$Parser_LanguageKit$variable, _user$project$FastParser$validVariableIdentifierFirstChar, _user$project$FastParser$validIdentifierRestChar, _user$project$FastParser$keywords)));
var _user$project$FastParser$variablePattern = A2(
	_elm_tools$parser$Parser$inContext,
	'variable pattern',
	_user$project$FastParser$namePattern(_user$project$FastParser$variableIdentifierString));
var _user$project$FastParser$variableType = A2(
	_elm_tools$parser$Parser$inContext,
	'variable type',
	A3(
		_user$project$LangParserUtils$paddedBefore,
		F2(
			function (ws, name) {
				return _user$project$FastParser$noRoles(
					A2(_user$project$Lang$TVar, ws, name));
			}),
		_user$project$LangParserUtils$spaces,
		_user$project$FastParser$variableIdentifierString));
var _user$project$FastParser$variableExpression = _user$project$LangParserUtils$mapExp_(
	A3(_user$project$LangParserUtils$paddedBefore, _user$project$Lang$EVar, _user$project$LangParserUtils$spaces, _user$project$FastParser$variableIdentifierString));
var _user$project$FastParser$typeIdentifierString = A2(
	_elm_tools$parser$Parser$inContext,
	'type identifier string',
	_user$project$ParserUtils$trackInfo(
		A3(_elm_tools$parser$Parser_LanguageKit$variable, _user$project$FastParser$validTypeIdentifierFirstChar, _user$project$FastParser$validIdentifierRestChar, _user$project$FastParser$keywords)));
var _user$project$FastParser$typePattern = A2(
	_elm_tools$parser$Parser$inContext,
	'type pattern',
	_user$project$FastParser$namePattern(_user$project$FastParser$typeIdentifierString));
var _user$project$FastParser$namedType = A2(
	_elm_tools$parser$Parser$inContext,
	'named type',
	A3(
		_user$project$LangParserUtils$paddedBefore,
		F2(
			function (ws, name) {
				return {
					t__: A2(_user$project$Lang$TNamed, ws, name),
					roles: _elm_lang$core$Set$singleton(name)
				};
			}),
		_user$project$LangParserUtils$spaces,
		_user$project$FastParser$typeIdentifierString));
var _user$project$FastParser$holeIdentifier = A2(
	_elm_tools$parser$Parser$inContext,
	'hole identifier string',
	_user$project$ParserUtils$trackInfo(
		A3(_elm_tools$parser$Parser_LanguageKit$variable, _user$project$FastParser$validIdentifierRestChar, _user$project$FastParser$validIdentifierRestChar, _user$project$FastParser$keywords)));
var _user$project$FastParser$holeNamed = _user$project$LangParserUtils$mapExp_(
	A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (wsBefore, _p44) {
				var _p45 = _p44;
				var _p46 = _p45._1;
				return A3(
					_user$project$Info$withInfo,
					A2(
						_user$project$Lang$EHole,
						wsBefore,
						_user$project$Lang$HoleNamed(_p46.val)),
					_p45._0.start,
					_p46.end);
			}),
		_user$project$LangParserUtils$spaces,
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})),
				_user$project$ParserUtils$trackInfo(
					_elm_tools$parser$Parser$symbol('??'))),
			_user$project$FastParser$holeIdentifier)));
var _user$project$FastParser$hole = A2(
	_elm_tools$parser$Parser$inContext,
	'hole',
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _user$project$FastParser$holeNamed,
			_1: {
				ctor: '::',
				_0: _user$project$FastParser$holeEmpty,
				_1: {ctor: '[]'}
			}
		}));
var _user$project$FastParser$sanitizeVariableName = function (unsafeName) {
	return _elm_lang$core$String$fromList(
		A2(
			_user$project$Utils$changeTail,
			_elm_lang$core$List$filter(_user$project$FastParser$validIdentifierRestChar),
			A2(
				_user$project$Utils$mapHead,
				_elm_lang$core$Char$toLower,
				A2(
					_user$project$Utils$dropWhile,
					function (_p47) {
						return !function (_p48) {
							return _user$project$FastParser$validVariableIdentifierFirstChar(
								_elm_lang$core$Char$toLower(_p48));
						}(_p47);
					},
					_elm_lang$core$String$toList(unsafeName)))));
};
var _user$project$FastParser$null = A2(
	_elm_tools$parser$Parser$inContext,
	'null',
	_user$project$ParserUtils$trackInfo(
		A2(
			_elm_tools$parser$Parser$map,
			_elm_lang$core$Basics$always(_user$project$Lang$ENull),
			_elm_tools$parser$Parser$keyword('null'))));
var _user$project$FastParser$bool = A2(
	_elm_tools$parser$Parser$inContext,
	'bool',
	_user$project$ParserUtils$trackInfo(
		A2(
			_elm_tools$parser$Parser$map,
			_user$project$Lang$EBool,
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$map,
						_elm_lang$core$Basics$always(true),
						_elm_tools$parser$Parser$keyword('true')),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser$map,
							_elm_lang$core$Basics$always(false),
							_elm_tools$parser$Parser$keyword('false')),
						_1: {ctor: '[]'}
					}
				}))));
var _user$project$FastParser$string = function () {
	var stringHelper = function (quoteChar) {
		var quoteString = _elm_lang$core$String$fromChar(quoteChar);
		return A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(
						_user$project$Lang$EString(quoteString)),
					_elm_tools$parser$Parser$symbol(quoteString)),
				A2(
					_elm_tools$parser$Parser$keep,
					_elm_tools$parser$Parser$zeroOrMore,
					function (c) {
						return !_elm_lang$core$Native_Utils.eq(c, quoteChar);
					})),
			_elm_tools$parser$Parser$symbol(quoteString));
	};
	return A2(
		_elm_tools$parser$Parser$inContext,
		'string',
		_user$project$ParserUtils$trackInfo(
			_elm_tools$parser$Parser$oneOf(
				A2(
					_elm_lang$core$List$map,
					stringHelper,
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('\''),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.chr('\"'),
							_1: {ctor: '[]'}
						}
					}))));
}();
var _user$project$FastParser$baseValue = A2(
	_elm_tools$parser$Parser$inContext,
	'base value',
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _user$project$FastParser$string,
			_1: {
				ctor: '::',
				_0: _user$project$FastParser$bool,
				_1: {
					ctor: '::',
					_0: _user$project$FastParser$null,
					_1: {ctor: '[]'}
				}
			}
		}));
var _user$project$FastParser$baseValuePattern = _user$project$LangParserUtils$mapPat_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'base value pattern',
		A3(_user$project$LangParserUtils$paddedBefore, _user$project$Lang$PBase, _user$project$LangParserUtils$spaces, _user$project$FastParser$baseValue)));
var _user$project$FastParser$baseValueExpression = A2(
	_elm_tools$parser$Parser$inContext,
	'base value expression',
	_user$project$LangParserUtils$mapExp_(
		A3(_user$project$LangParserUtils$paddedBefore, _user$project$Lang$EBase, _user$project$LangParserUtils$spaces, _user$project$FastParser$baseValue)));
var _user$project$FastParser$frozenAnnotation = A2(
	_elm_tools$parser$Parser$inContext,
	'frozen annotation',
	_user$project$ParserUtils$trackInfo(
		_elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$List$map,
				function (a) {
					return A2(_user$project$ParserUtils$token, a, a);
				},
				{
					ctor: '::',
					_0: _user$project$Lang$frozen,
					_1: {
						ctor: '::',
						_0: _user$project$Lang$thawed,
						_1: {
							ctor: '::',
							_0: _user$project$Lang$assignOnlyOnce,
							_1: {
								ctor: '::',
								_0: _user$project$Lang$unann,
								_1: {ctor: '[]'}
							}
						}
					}
				}))));
var _user$project$FastParser$isInt = function (n) {
	return _elm_lang$core$Native_Utils.eq(
		n,
		_elm_lang$core$Basics$toFloat(
			_elm_lang$core$Basics$floor(n)));
};
var _user$project$FastParser$num = function () {
	var sign = _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(-1),
				_elm_tools$parser$Parser$symbol('-')),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$succeed(1),
				_1: {ctor: '[]'}
			}
		});
	return _user$project$ParserUtils$try(
		A2(
			_elm_tools$parser$Parser$inContext,
			'number',
			_user$project$ParserUtils$trackInfo(
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							F2(
								function (s, n) {
									return s * n;
								})),
						sign),
					_elm_tools$parser$Parser$float))));
}();
var _user$project$FastParser$widgetDecl = function (cap) {
	var combiner = F3(
		function (a, tok, b) {
			return A2(
				_elm_lang$core$List$all,
				_user$project$FastParser$isInt,
				{
					ctor: '::',
					_0: a.val,
					_1: {
						ctor: '::',
						_0: b.val,
						_1: {ctor: '[]'}
					}
				}) ? A5(
				_user$project$Lang$IntSlider,
				A2(_user$project$Info$mapInfoVal, _elm_lang$core$Basics$floor, a),
				tok,
				A2(_user$project$Info$mapInfoVal, _elm_lang$core$Basics$floor, b),
				cap,
				false) : A5(_user$project$Lang$NumSlider, a, tok, b, cap, false);
		});
	return A2(
		_elm_tools$parser$Parser$inContext,
		'widget declaration',
		_user$project$ParserUtils$trackInfo(
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										_elm_tools$parser$Parser$succeed(combiner),
										_elm_tools$parser$Parser$symbol('{')),
									_user$project$FastParser$num),
								_user$project$ParserUtils$trackInfo(
									A2(_user$project$ParserUtils$token, '-', '-'))),
							_user$project$FastParser$num),
						_elm_tools$parser$Parser$symbol('}')),
					_1: {
						ctor: '::',
						_0: _elm_tools$parser$Parser$succeed(_user$project$Lang$NoWidgetDecl),
						_1: {ctor: '[]'}
					}
				})));
};
var _user$project$FastParser$constantPattern = _user$project$LangParserUtils$mapPat_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'constant pattern',
		A3(_user$project$LangParserUtils$paddedBefore, _user$project$Lang$PConst, _user$project$LangParserUtils$spaces, _user$project$FastParser$num)));
var _user$project$FastParser$constantExpression = _user$project$LangParserUtils$mapExp_(
	A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (ws, _p49) {
				var _p50 = _p49;
				var _p52 = _p50._2;
				var _p51 = _p50._0;
				return A3(
					_user$project$Info$WithInfo,
					A4(
						_user$project$Lang$EConst,
						ws,
						_p51.val,
						A2(_user$project$Lang$dummyLocWithDebugInfo, _p50._1.val, _p51.val),
						_p52),
					_p51.start,
					_p52.end);
			}),
		_user$project$LangParserUtils$spaces,
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F3(
							function (v0, v1, v2) {
								return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
							})),
					_user$project$FastParser$num),
				_user$project$FastParser$frozenAnnotation),
			_user$project$FastParser$widgetDecl(_elm_lang$core$Maybe$Nothing))));
var _user$project$FastParser$block = F4(
	function (combiner, openSymbol, closeSymbol, p) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p54, _p53) {
					var _p55 = _p54;
					var _p56 = _p53;
					return A3(
						_user$project$Info$WithInfo,
						A3(combiner, _p55._0, _p56._0, _p56._1),
						_p55._1.start,
						_p56._2.end);
				}),
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					_user$project$LangParserUtils$spaces),
				_user$project$ParserUtils$trackInfo(
					_elm_tools$parser$Parser$symbol(openSymbol))),
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							F3(
								function (v0, v1, v2) {
									return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
								})),
						p),
					_user$project$LangParserUtils$spaces),
				_user$project$ParserUtils$trackInfo(
					_elm_tools$parser$Parser$symbol(closeSymbol))));
	});
var _user$project$FastParser$parenBlock = function (combiner) {
	return A3(_user$project$FastParser$block, combiner, '(', ')');
};
var _user$project$FastParser$parenedType = function (ctor) {
	return _user$project$FastParser$parenBlock(
		F3(
			function (wsStart, things, wsEnd) {
				return _user$project$FastParser$noRoles(
					A3(ctor, wsStart, things, wsEnd));
			}));
};
var _user$project$FastParser$bracketBlock = function (combiner) {
	return A3(_user$project$FastParser$block, combiner, '[', ']');
};
var _user$project$FastParser$listLiteralInternal = F3(
	function (context, combiner, elem) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			context,
			A2(
				_user$project$FastParser$bracketBlock,
				combiner,
				A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, elem)));
	});
var _user$project$FastParser$multiConsInternal = F3(
	function (context, combiner, elem) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			context,
			A2(
				_user$project$FastParser$bracketBlock,
				F3(
					function (wsStart, _p57, wsEnd) {
						var _p58 = _p57;
						return A5(combiner, wsStart, _p58._0, _p58._1, _p58._2, wsEnd);
					}),
				A3(
					_elm_tools$parser$Parser$delayedCommitMap,
					F2(
						function (_p59, tail) {
							var _p60 = _p59;
							return {ctor: '_Tuple3', _0: _p60._0, _1: _p60._1, _2: tail};
						}),
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								_elm_tools$parser$Parser$succeed(
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})),
								A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$oneOrMore, elem)),
							_user$project$LangParserUtils$spaces),
						_elm_tools$parser$Parser$symbol('|')),
					elem)));
	});
var _user$project$FastParser$genericList = function (args) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		args.generalContext,
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A3(_user$project$FastParser$multiConsInternal, args.multiConsContext, args.multiConsCombiner, args.elem),
				_1: {
					ctor: '::',
					_0: A3(_user$project$FastParser$listLiteralInternal, args.listLiteralContext, args.listLiteralCombiner, args.elem),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$FastParser$patternList = _user$project$LangParserUtils$mapPat_(
	_elm_tools$parser$Parser$lazy(
		function (_p61) {
			return _user$project$FastParser$genericList(
				{
					generalContext: 'pattern list',
					listLiteralContext: 'pattern list literal',
					multiConsContext: 'pattern multi cons literal',
					listLiteralCombiner: F3(
						function (wsStart, heads, wsEnd) {
							return A5(_user$project$Lang$PList, wsStart, heads, _user$project$Lang$space0, _elm_lang$core$Maybe$Nothing, wsEnd);
						}),
					multiConsCombiner: F5(
						function (wsStart, heads, wsBar, tail, wsEnd) {
							return A5(
								_user$project$Lang$PList,
								wsStart,
								heads,
								wsBar,
								_elm_lang$core$Maybe$Just(tail),
								wsEnd);
						}),
					elem: _user$project$FastParser$pattern
				});
		}));
var _user$project$FastParser$pattern = A2(
	_elm_tools$parser$Parser$inContext,
	'pattern',
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _elm_tools$parser$Parser$lazy(
				function (_p62) {
					return _user$project$FastParser$patternList;
				}),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$lazy(
					function (_p63) {
						return _user$project$FastParser$asPattern;
					}),
				_1: {
					ctor: '::',
					_0: _user$project$FastParser$constantPattern,
					_1: {
						ctor: '::',
						_0: _user$project$FastParser$baseValuePattern,
						_1: {
							ctor: '::',
							_0: _user$project$FastParser$variablePattern,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}));
var _user$project$FastParser$asPattern = _user$project$LangParserUtils$mapPat_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'as pattern',
		_elm_tools$parser$Parser$lazy(
			function (_p64) {
				return A3(
					_elm_tools$parser$Parser$delayedCommitMap,
					F2(
						function (_p65, pat) {
							var _p66 = _p65;
							var _p67 = _p66._1;
							return A3(
								_user$project$Info$WithInfo,
								A4(_user$project$Lang$PAs, _p66._0, _p67.val, _p66._2, pat),
								_p67.start,
								pat.end);
						}),
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									_elm_tools$parser$Parser$succeed(
										F3(
											function (v0, v1, v2) {
												return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
											})),
									_user$project$LangParserUtils$spaces),
								_user$project$FastParser$variableIdentifierString),
							_user$project$LangParserUtils$spaces),
						_elm_tools$parser$Parser$symbol('@')),
					_user$project$FastParser$pattern);
			})));
var _user$project$FastParser$tupleType = _elm_tools$parser$Parser$lazy(
	function (_p68) {
		return _user$project$FastParser$genericList(
			{
				generalContext: 'tuple type',
				listLiteralContext: 'tuple type list literal',
				multiConsContext: 'tuple type multi cons literal',
				listLiteralCombiner: F3(
					function (wsStart, heads, wsEnd) {
						return _user$project$FastParser$noRoles(
							A5(_user$project$Lang$TTuple, wsStart, heads, _user$project$Lang$space0, _elm_lang$core$Maybe$Nothing, wsEnd));
					}),
				multiConsCombiner: F5(
					function (wsStart, heads, wsBar, tail, wsEnd) {
						return _user$project$FastParser$noRoles(
							A5(
								_user$project$Lang$TTuple,
								wsStart,
								heads,
								wsBar,
								_elm_lang$core$Maybe$Just(tail),
								wsEnd));
					}),
				elem: _user$project$FastParser$typ
			});
	});
var _user$project$FastParser$typ = A2(
	_elm_tools$parser$Parser$inContext,
	'type',
	_elm_tools$parser$Parser$lazy(
		function (_p69) {
			return _elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: _user$project$FastParser$nullType,
					_1: {
						ctor: '::',
						_0: _user$project$FastParser$numType,
						_1: {
							ctor: '::',
							_0: _user$project$FastParser$boolType,
							_1: {
								ctor: '::',
								_0: _user$project$FastParser$stringType,
								_1: {
									ctor: '::',
									_0: _user$project$FastParser$wildcardType,
									_1: {
										ctor: '::',
										_0: _elm_tools$parser$Parser$lazy(
											function (_p70) {
												return _user$project$FastParser$functionType;
											}),
										_1: {
											ctor: '::',
											_0: _elm_tools$parser$Parser$lazy(
												function (_p71) {
													return _user$project$FastParser$listType;
												}),
											_1: {
												ctor: '::',
												_0: _elm_tools$parser$Parser$lazy(
													function (_p72) {
														return _user$project$FastParser$dictType;
													}),
												_1: {
													ctor: '::',
													_0: _elm_tools$parser$Parser$lazy(
														function (_p73) {
															return _user$project$FastParser$tupleType;
														}),
													_1: {
														ctor: '::',
														_0: _elm_tools$parser$Parser$lazy(
															function (_p74) {
																return _user$project$FastParser$forallType;
															}),
														_1: {
															ctor: '::',
															_0: _elm_tools$parser$Parser$lazy(
																function (_p75) {
																	return _user$project$FastParser$unionType;
																}),
															_1: {
																ctor: '::',
																_0: _user$project$FastParser$namedType,
																_1: {
																	ctor: '::',
																	_0: _user$project$FastParser$variableType,
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				});
		}));
var _user$project$FastParser$dictType = A2(
	_elm_tools$parser$Parser$inContext,
	'dictionary type',
	_elm_tools$parser$Parser$lazy(
		function (_p76) {
			return A2(
				_user$project$FastParser$parenedType,
				F3(
					function (wsStart, _p77, wsEnd) {
						var _p78 = _p77;
						return A4(_user$project$Lang$TDict, wsStart, _p78._0, _p78._1, wsEnd);
					}),
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})),
							_user$project$LangParserUtils$keywordWithSpace('TDict')),
						_user$project$FastParser$typ),
					_user$project$FastParser$typ));
		}));
var _user$project$FastParser$forallType = function () {
	var wsIdentifierPair = A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (ws, name) {
				return {ctor: '_Tuple2', _0: ws, _1: name.val};
			}),
		_user$project$LangParserUtils$spaces,
		_user$project$FastParser$variableIdentifierString);
	var quantifiers = _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$inContext,
				'forall type (one)',
				A2(_elm_tools$parser$Parser$map, _user$project$Lang$One, wsIdentifierPair)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$inContext,
					'forall type (many) ',
					_user$project$ParserUtils$untrackInfo(
						A2(
							_user$project$FastParser$parenBlock,
							_user$project$Lang$Many,
							A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, wsIdentifierPair)))),
				_1: {ctor: '[]'}
			}
		});
	return A2(
		_elm_tools$parser$Parser$inContext,
		'forall type',
		_elm_tools$parser$Parser$lazy(
			function (_p79) {
				return A2(
					_user$project$FastParser$parenedType,
					F3(
						function (wsStart, _p80, wsEnd) {
							var _p81 = _p80;
							return A4(_user$project$Lang$TForall, wsStart, _p81._0, _p81._1, wsEnd);
						}),
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								_elm_tools$parser$Parser$succeed(
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})),
								_user$project$LangParserUtils$keywordWithSpace('forall')),
							quantifiers),
						_user$project$FastParser$typ));
			}));
}();
var _user$project$FastParser$functionType = _elm_tools$parser$Parser$lazy(
	function (_p82) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			'function type',
			A2(
				_user$project$FastParser$parenedType,
				_user$project$Lang$TArrow,
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_user$project$LangParserUtils$keywordWithSpace('->')),
					A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$oneOrMore, _user$project$FastParser$typ))));
	});
var _user$project$FastParser$listType = A2(
	_elm_tools$parser$Parser$inContext,
	'list type',
	_elm_tools$parser$Parser$lazy(
		function (_p83) {
			return A2(
				_user$project$FastParser$parenedType,
				_user$project$Lang$TList,
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_user$project$LangParserUtils$keywordWithSpace('List')),
					_user$project$FastParser$typ));
		}));
var _user$project$FastParser$unionType = A2(
	_elm_tools$parser$Parser$inContext,
	'union type',
	_elm_tools$parser$Parser$lazy(
		function (_p84) {
			return A2(
				_user$project$FastParser$parenedType,
				_user$project$Lang$TUnion,
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_user$project$LangParserUtils$keywordWithSpace('union')),
					A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$oneOrMore, _user$project$FastParser$typ)));
		}));
var _user$project$FastParser$topLevelTypeDeclaration = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level type declaration',
	A2(
		_user$project$FastParser$parenBlock,
		F4(
			function (wsStart, _p85, wsEnd, rest) {
				var _p86 = _p85;
				return _user$project$Lang$exp_(
					A5(_user$project$Lang$ETyp, wsStart, _p86._0, _p86._1, rest, wsEnd));
			}),
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					_user$project$LangParserUtils$keywordWithSpace('typ')),
				_user$project$FastParser$variablePattern),
			_user$project$FastParser$typ)));
var _user$project$FastParser$topLevelTypeAlias = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level type alias',
	A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (_p88, _p87) {
				var _p89 = _p88;
				var _p90 = _p87;
				return A3(
					_user$project$Info$WithInfo,
					function (rest) {
						return _user$project$Lang$exp_(
							A5(_user$project$Lang$ETypeAlias, _p89._0, _p89._2, _p90._0, rest, _p90._1));
					},
					_p89._1.start,
					_p90._2.end);
			}),
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							F3(
								function (v0, v1, v2) {
									return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
								})),
						_user$project$LangParserUtils$spaces),
					_user$project$ParserUtils$trackInfo(
						_elm_tools$parser$Parser$symbol('('))),
				_user$project$LangParserUtils$keywordWithSpace('def')),
			_user$project$FastParser$typePattern),
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F3(
							function (v0, v1, v2) {
								return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
							})),
					_user$project$FastParser$typ),
				_user$project$LangParserUtils$spaces),
			_user$project$ParserUtils$trackInfo(
				_elm_tools$parser$Parser$symbol(')')))));
var _user$project$FastParser$parseT = _elm_tools$parser$Parser$run(_user$project$FastParser$typ);
var _user$project$FastParser$blockIgnoreWS = _user$project$FastParser$block(
	F3(
		function (wsStart, x, wsEnd) {
			return x;
		}));
var _user$project$FastParser$parenBlockIgnoreWS = A2(_user$project$FastParser$blockIgnoreWS, '(', ')');
var _user$project$FastParser$function = function () {
	var parameters = _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(_elm_tools$parser$Parser$map, _elm_lang$core$List$singleton, _user$project$FastParser$pattern),
			_1: {
				ctor: '::',
				_0: _user$project$ParserUtils$untrackInfo(
					_user$project$FastParser$parenBlockIgnoreWS(
						A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$oneOrMore, _user$project$FastParser$pattern))),
				_1: {ctor: '[]'}
			}
		});
	return _user$project$LangParserUtils$mapExp_(
		A2(
			_elm_tools$parser$Parser$inContext,
			'function',
			_elm_tools$parser$Parser$lazy(
				function (_p91) {
					return A2(
						_user$project$FastParser$parenBlock,
						F3(
							function (wsStart, _p92, wsEnd) {
								var _p93 = _p92;
								return A4(_user$project$Lang$EFun, wsStart, _p93._0, _p93._1, wsEnd);
							}),
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									_elm_tools$parser$Parser$succeed(
										F2(
											function (v0, v1) {
												return {ctor: '_Tuple2', _0: v0, _1: v1};
											})),
									_elm_tools$parser$Parser$symbol('\\')),
								parameters),
							_user$project$FastParser$exp));
				})));
}();
var _user$project$FastParser$exp = A2(
	_elm_tools$parser$Parser$inContext,
	'expression',
	_elm_tools$parser$Parser$lazy(
		function (_p94) {
			return _elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: _user$project$FastParser$constantExpression,
					_1: {
						ctor: '::',
						_0: _user$project$FastParser$baseValueExpression,
						_1: {
							ctor: '::',
							_0: _elm_tools$parser$Parser$lazy(
								function (_p95) {
									return _user$project$FastParser$typeAlias;
								}),
							_1: {
								ctor: '::',
								_0: _elm_tools$parser$Parser$lazy(
									function (_p96) {
										return _user$project$FastParser$conditional;
									}),
								_1: {
									ctor: '::',
									_0: _elm_tools$parser$Parser$lazy(
										function (_p97) {
											return _user$project$FastParser$letBinding;
										}),
									_1: {
										ctor: '::',
										_0: _elm_tools$parser$Parser$lazy(
											function (_p98) {
												return _user$project$FastParser$caseExpression;
											}),
										_1: {
											ctor: '::',
											_0: _elm_tools$parser$Parser$lazy(
												function (_p99) {
													return _user$project$FastParser$typeCaseExpression;
												}),
											_1: {
												ctor: '::',
												_0: _elm_tools$parser$Parser$lazy(
													function (_p100) {
														return _user$project$FastParser$typeDeclaration;
													}),
												_1: {
													ctor: '::',
													_0: _elm_tools$parser$Parser$lazy(
														function (_p101) {
															return _user$project$FastParser$typeAnnotation;
														}),
													_1: {
														ctor: '::',
														_0: _elm_tools$parser$Parser$lazy(
															function (_p102) {
																return _user$project$FastParser$list;
															}),
														_1: {
															ctor: '::',
															_0: _elm_tools$parser$Parser$lazy(
																function (_p103) {
																	return _user$project$FastParser$function;
																}),
															_1: {
																ctor: '::',
																_0: _elm_tools$parser$Parser$lazy(
																	function (_p104) {
																		return _user$project$FastParser$functionApplication;
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_tools$parser$Parser$lazy(
																		function (_p105) {
																			return _user$project$FastParser$operator;
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_tools$parser$Parser$lazy(
																			function (_p106) {
																				return _user$project$FastParser$comment;
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_tools$parser$Parser$lazy(
																				function (_p107) {
																					return _user$project$FastParser$option;
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_tools$parser$Parser$lazy(
																					function (_p108) {
																						return _user$project$FastParser$hole;
																					}),
																				_1: {
																					ctor: '::',
																					_0: _user$project$FastParser$variableExpression,
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				});
		}));
var _user$project$FastParser$caseExpression = _elm_tools$parser$Parser$lazy(
	function (_p109) {
		return A6(_user$project$FastParser$genericCase, 'case expression', 'case', _user$project$Lang$ECase, _user$project$Lang$Branch_, _user$project$FastParser$exp, _user$project$FastParser$pattern);
	});
var _user$project$FastParser$genericCase = F6(
	function (context, kword, combiner, branchCombiner, parser, branchParser) {
		var path = A2(
			_elm_tools$parser$Parser$inContext,
			A2(_elm_lang$core$Basics_ops['++'], context, ' path'),
			_elm_tools$parser$Parser$lazy(
				function (_p110) {
					return A2(
						_user$project$FastParser$parenBlock,
						F3(
							function (wsStart, _p111, wsEnd) {
								var _p112 = _p111;
								return A4(branchCombiner, wsStart, _p112._0, _p112._1, wsEnd);
							}),
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								_elm_tools$parser$Parser$succeed(
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})),
								branchParser),
							_user$project$FastParser$exp));
				}));
		return _user$project$LangParserUtils$mapExp_(
			A2(
				_elm_tools$parser$Parser$inContext,
				context,
				_elm_tools$parser$Parser$lazy(
					function (_p113) {
						return A2(
							_user$project$FastParser$parenBlock,
							F3(
								function (wsStart, _p114, wsEnd) {
									var _p115 = _p114;
									return A4(combiner, wsStart, _p115._0, _p115._1, wsEnd);
								}),
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										_elm_tools$parser$Parser$succeed(
											F2(
												function (v0, v1) {
													return {ctor: '_Tuple2', _0: v0, _1: v1};
												})),
										_user$project$LangParserUtils$keywordWithSpace(kword)),
									parser),
								A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, path)));
					})));
	});
var _user$project$FastParser$comment = _user$project$LangParserUtils$mapExp_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'comment',
		_elm_tools$parser$Parser$lazy(
			function (_p116) {
				return A3(
					_elm_tools$parser$Parser$delayedCommitMap,
					F2(
						function (wsStart, _p117) {
							var _p118 = _p117;
							var _p119 = _p118._1;
							return A3(
								_user$project$Info$WithInfo,
								A3(_user$project$Lang$EComment, wsStart, _p119.val, _p118._2),
								_p118._0.start,
								_p119.end);
						}),
					_user$project$LangParserUtils$spaces,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									_elm_tools$parser$Parser$succeed(
										F3(
											function (v0, v1, v2) {
												return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
											})),
									_user$project$ParserUtils$trackInfo(
										_elm_tools$parser$Parser$symbol(';'))),
								_user$project$ParserUtils$trackInfo(
									A2(
										_elm_tools$parser$Parser$keep,
										_elm_tools$parser$Parser$zeroOrMore,
										function (c) {
											return !_elm_lang$core$Native_Utils.eq(
												c,
												_elm_lang$core$Native_Utils.chr('\n'));
										}))),
							_elm_tools$parser$Parser$symbol('\n')),
						_user$project$FastParser$exp));
			})));
var _user$project$FastParser$conditional = _user$project$LangParserUtils$mapExp_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'conditional',
		_elm_tools$parser$Parser$lazy(
			function (_p120) {
				return A2(
					_user$project$FastParser$parenBlock,
					F3(
						function (wsStart, _p121, wsEnd) {
							var _p122 = _p121;
							return A7(
								_user$project$Lang$EIf,
								wsStart,
								_p122._0,
								_user$project$Lang$ws(''),
								_p122._1,
								_user$project$Lang$ws(''),
								_p122._2,
								wsEnd);
						}),
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									_elm_tools$parser$Parser$succeed(
										F3(
											function (v0, v1, v2) {
												return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
											})),
									_user$project$LangParserUtils$keywordWithSpace('if')),
								_user$project$FastParser$exp),
							_user$project$FastParser$exp),
						_user$project$FastParser$exp));
			})));
var _user$project$FastParser$functionApplication = _user$project$LangParserUtils$mapExp_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'function application',
		_elm_tools$parser$Parser$lazy(
			function (_p123) {
				return A2(
					_user$project$FastParser$parenBlock,
					F3(
						function (wsStart, _p124, wsEnd) {
							var _p125 = _p124;
							return A5(_user$project$Lang$EApp, wsStart, _p125._0, _p125._1, _user$project$Lang$SpaceApp, wsEnd);
						}),
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})),
							_user$project$FastParser$exp),
						A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$oneOrMore, _user$project$FastParser$exp)));
			})));
var _user$project$FastParser$letBinding = A2(
	_elm_tools$parser$Parser$inContext,
	'let binding',
	_elm_tools$parser$Parser$lazy(
		function (_p126) {
			return _elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: _user$project$FastParser$recursiveLetBinding,
					_1: {
						ctor: '::',
						_0: _user$project$FastParser$simpleLetBinding,
						_1: {
							ctor: '::',
							_0: _user$project$FastParser$recursiveDefBinding,
							_1: {
								ctor: '::',
								_0: _user$project$FastParser$simpleDefBinding,
								_1: {ctor: '[]'}
							}
						}
					}
				});
		}));
var _user$project$FastParser$recursiveDefBinding = _elm_tools$parser$Parser$lazy(
	function (_p127) {
		return A3(_user$project$FastParser$genericDefBinding, 'recursive def binding', 'defrec', true);
	});
var _user$project$FastParser$genericDefBinding = F3(
	function (context, kword, isRec) {
		return _user$project$LangParserUtils$mapExp_(
			A2(
				_elm_tools$parser$Parser$inContext,
				context,
				A3(
					_elm_tools$parser$Parser$delayedCommitMap,
					F2(
						function (_p129, _p128) {
							var _p130 = _p129;
							var _p131 = _p128;
							return A3(
								_user$project$Info$WithInfo,
								A9(_user$project$Lang$ELet, _p130._0, _user$project$Lang$Def, isRec, _p131._0, _user$project$Lang$space1, _p131._1, _user$project$Lang$space1, _p131._4, _p131._2),
								_p130._1.start,
								_p131._3.end);
						}),
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})),
							_user$project$LangParserUtils$spaces),
						_user$project$ParserUtils$trackInfo(
							_elm_tools$parser$Parser$symbol('('))),
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|.'],
											_elm_tools$parser$Parser$succeed(
												F5(
													function (v0, v1, v2, v3, v4) {
														return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
													})),
											_user$project$LangParserUtils$keywordWithSpace(kword)),
										_user$project$FastParser$pattern),
									_user$project$FastParser$exp),
								_user$project$LangParserUtils$spaces),
							_user$project$ParserUtils$trackInfo(
								_elm_tools$parser$Parser$symbol(')'))),
						_user$project$FastParser$exp))));
	});
var _user$project$FastParser$recursiveLetBinding = _elm_tools$parser$Parser$lazy(
	function (_p132) {
		return A3(_user$project$FastParser$genericLetBinding, 'recursive let binding', 'letrec', true);
	});
var _user$project$FastParser$genericLetBinding = F3(
	function (context, kword, isRec) {
		return _user$project$LangParserUtils$mapExp_(
			A2(
				_elm_tools$parser$Parser$inContext,
				context,
				A2(
					_user$project$FastParser$parenBlock,
					F3(
						function (wsStart, _p133, wsEnd) {
							var _p134 = _p133;
							return A9(_user$project$Lang$ELet, wsStart, _user$project$Lang$Let, isRec, _p134._0, _user$project$Lang$space1, _p134._1, _user$project$Lang$space1, _p134._2, wsEnd);
						}),
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									_elm_tools$parser$Parser$succeed(
										F3(
											function (v0, v1, v2) {
												return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
											})),
									_user$project$LangParserUtils$keywordWithSpace(kword)),
								_user$project$FastParser$pattern),
							_user$project$FastParser$exp),
						_user$project$FastParser$exp))));
	});
var _user$project$FastParser$simpleDefBinding = _elm_tools$parser$Parser$lazy(
	function (_p135) {
		return A3(_user$project$FastParser$genericDefBinding, 'non-recursive def binding', 'def', false);
	});
var _user$project$FastParser$simpleLetBinding = _elm_tools$parser$Parser$lazy(
	function (_p136) {
		return A3(_user$project$FastParser$genericLetBinding, 'non-recursive let binding', 'let', false);
	});
var _user$project$FastParser$list = _user$project$LangParserUtils$mapExp_(
	_elm_tools$parser$Parser$lazy(
		function (_p137) {
			return _user$project$FastParser$genericList(
				{
					generalContext: 'list',
					listLiteralContext: 'list literal',
					multiConsContext: 'multi cons literal',
					listLiteralCombiner: F3(
						function (wsStart, heads, wsEnd) {
							return A5(
								_user$project$Lang$EList,
								wsStart,
								A2(
									_elm_lang$core$List$map,
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})(_user$project$Lang$space0),
									heads),
								_user$project$Lang$space0,
								_elm_lang$core$Maybe$Nothing,
								wsEnd);
						}),
					multiConsCombiner: F5(
						function (wsStart, heads, wsBar, tail, wsEnd) {
							return A5(
								_user$project$Lang$EList,
								wsStart,
								A2(
									_elm_lang$core$List$map,
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})(_user$project$Lang$space0),
									heads),
								wsBar,
								_elm_lang$core$Maybe$Just(tail),
								wsEnd);
						}),
					elem: _user$project$FastParser$exp
				});
		}));
var _user$project$FastParser$operator = _user$project$LangParserUtils$mapExp_(
	function () {
		var op = _user$project$ParserUtils$trackInfo(
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_user$project$Lang$Pi),
						_elm_tools$parser$Parser$keyword('π')),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(_user$project$Lang$DictEmpty),
							_elm_tools$parser$Parser$keyword('empty')),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_tools$parser$Parser_ops['|.'],
								_elm_tools$parser$Parser$succeed(_user$project$Lang$Cos),
								_user$project$LangParserUtils$keywordWithSpace('cos')),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_tools$parser$Parser_ops['|.'],
									_elm_tools$parser$Parser$succeed(_user$project$Lang$Sin),
									_user$project$LangParserUtils$keywordWithSpace('sin')),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_tools$parser$Parser_ops['|.'],
										_elm_tools$parser$Parser$succeed(_user$project$Lang$ArcCos),
										_user$project$LangParserUtils$keywordWithSpace('arccos')),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_tools$parser$Parser_ops['|.'],
											_elm_tools$parser$Parser$succeed(_user$project$Lang$ArcSin),
											_user$project$LangParserUtils$keywordWithSpace('arcsin')),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_tools$parser$Parser_ops['|.'],
												_elm_tools$parser$Parser$succeed(_user$project$Lang$Abs),
												_user$project$LangParserUtils$keywordWithSpace('abs')),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_tools$parser$Parser_ops['|.'],
													_elm_tools$parser$Parser$succeed(_user$project$Lang$Floor),
													_user$project$LangParserUtils$keywordWithSpace('floor')),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_tools$parser$Parser_ops['|.'],
														_elm_tools$parser$Parser$succeed(_user$project$Lang$Ceil),
														_user$project$LangParserUtils$keywordWithSpace('ceiling')),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_tools$parser$Parser_ops['|.'],
															_elm_tools$parser$Parser$succeed(_user$project$Lang$Round),
															_user$project$LangParserUtils$keywordWithSpace('round')),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_tools$parser$Parser_ops['|.'],
																_elm_tools$parser$Parser$succeed(_user$project$Lang$ToStr),
																_user$project$LangParserUtils$keywordWithSpace('toString')),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_tools$parser$Parser_ops['|.'],
																	_elm_tools$parser$Parser$succeed(_user$project$Lang$Sqrt),
																	_user$project$LangParserUtils$keywordWithSpace('sqrt')),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_tools$parser$Parser_ops['|.'],
																		_elm_tools$parser$Parser$succeed(_user$project$Lang$Ln),
																		_user$project$LangParserUtils$keywordWithSpace('ln')),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_tools$parser$Parser_ops['|.'],
																			_elm_tools$parser$Parser$succeed(_user$project$Lang$Explode),
																			_user$project$LangParserUtils$keywordWithSpace('explode')),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_tools$parser$Parser_ops['|.'],
																				_elm_tools$parser$Parser$succeed(_user$project$Lang$Plus),
																				_user$project$LangParserUtils$keywordWithSpace('+')),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_tools$parser$Parser_ops['|.'],
																					_elm_tools$parser$Parser$succeed(_user$project$Lang$Minus),
																					_user$project$LangParserUtils$keywordWithSpace('-')),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_tools$parser$Parser_ops['|.'],
																						_elm_tools$parser$Parser$succeed(_user$project$Lang$Mult),
																						_user$project$LangParserUtils$keywordWithSpace('*')),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_tools$parser$Parser_ops['|.'],
																							_elm_tools$parser$Parser$succeed(_user$project$Lang$Div),
																							_user$project$LangParserUtils$keywordWithSpace('/')),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_tools$parser$Parser_ops['|.'],
																								_elm_tools$parser$Parser$succeed(_user$project$Lang$Lt),
																								_user$project$LangParserUtils$keywordWithSpace('<')),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_tools$parser$Parser_ops['|.'],
																									_elm_tools$parser$Parser$succeed(_user$project$Lang$Eq),
																									_user$project$LangParserUtils$keywordWithSpace('=')),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_tools$parser$Parser_ops['|.'],
																										_elm_tools$parser$Parser$succeed(_user$project$Lang$Mod),
																										_user$project$LangParserUtils$keywordWithSpace('mod')),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_tools$parser$Parser_ops['|.'],
																											_elm_tools$parser$Parser$succeed(_user$project$Lang$Pow),
																											_user$project$LangParserUtils$keywordWithSpace('pow')),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_tools$parser$Parser_ops['|.'],
																												_elm_tools$parser$Parser$succeed(_user$project$Lang$ArcTan2),
																												_user$project$LangParserUtils$keywordWithSpace('arctan2')),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_tools$parser$Parser_ops['|.'],
																													_elm_tools$parser$Parser$succeed(_user$project$Lang$DictInsert),
																													_user$project$LangParserUtils$keywordWithSpace('insert')),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_tools$parser$Parser_ops['|.'],
																														_elm_tools$parser$Parser$succeed(_user$project$Lang$DictGet),
																														_user$project$LangParserUtils$keywordWithSpace('get')),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_tools$parser$Parser_ops['|.'],
																															_elm_tools$parser$Parser$succeed(_user$project$Lang$DictRemove),
																															_user$project$LangParserUtils$keywordWithSpace('remove')),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_elm_tools$parser$Parser_ops['|.'],
																																_elm_tools$parser$Parser$succeed(_user$project$Lang$DebugLog),
																																_user$project$LangParserUtils$keywordWithSpace('debug')),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_elm_tools$parser$Parser_ops['|.'],
																																	_elm_tools$parser$Parser$succeed(_user$project$Lang$NoWidgets),
																																	_user$project$LangParserUtils$keywordWithSpace('noWidgets')),
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
		return A2(
			_elm_tools$parser$Parser$inContext,
			'operator',
			_elm_tools$parser$Parser$lazy(
				function (_p138) {
					return A2(
						_user$project$FastParser$parenBlock,
						F3(
							function (wsStart, _p139, wsEnd) {
								var _p140 = _p139;
								return A4(_user$project$Lang$EOp, wsStart, _p140._0, _p140._1, wsEnd);
							}),
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								_elm_tools$parser$Parser$succeed(
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})),
								op),
							A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, _user$project$FastParser$exp)));
				}));
	}());
var _user$project$FastParser$option = _user$project$LangParserUtils$mapExp_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'option',
		_elm_tools$parser$Parser$lazy(
			function (_p141) {
				return A3(
					_elm_tools$parser$Parser$delayedCommitMap,
					F2(
						function (wsStart, _p142) {
							var _p143 = _p142;
							var _p144 = _p143._3;
							return A3(
								_user$project$Info$WithInfo,
								A5(_user$project$Lang$EOption, wsStart, _p143._1, _p143._2, _p144, _p143._4),
								_p143._0.start,
								_p144.end);
						}),
					_user$project$LangParserUtils$spaces,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										A2(
											_elm_tools$parser$Parser_ops['|='],
											A2(
												_elm_tools$parser$Parser_ops['|.'],
												A2(
													_elm_tools$parser$Parser_ops['|='],
													_elm_tools$parser$Parser$succeed(
														F5(
															function (v0, v1, v2, v3, v4) {
																return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
															})),
													_user$project$ParserUtils$trackInfo(
														_elm_tools$parser$Parser$symbol('#'))),
												_user$project$LangParserUtils$spaces),
											_user$project$ParserUtils$trackInfo(
												A2(
													_elm_tools$parser$Parser$keep,
													_elm_tools$parser$Parser$zeroOrMore,
													function (c) {
														return (!_elm_lang$core$Native_Utils.eq(
															c,
															_elm_lang$core$Native_Utils.chr('\n'))) && ((!_elm_lang$core$Native_Utils.eq(
															c,
															_elm_lang$core$Native_Utils.chr(' '))) && (!_elm_lang$core$Native_Utils.eq(
															c,
															_elm_lang$core$Native_Utils.chr(':'))));
													}))),
										_elm_tools$parser$Parser$symbol(':')),
									_user$project$LangParserUtils$spaces),
								_user$project$ParserUtils$trackInfo(
									A2(
										_elm_tools$parser$Parser$keep,
										_elm_tools$parser$Parser$zeroOrMore,
										function (c) {
											return !_elm_lang$core$Native_Utils.eq(
												c,
												_elm_lang$core$Native_Utils.chr('\n'));
										}))),
							_elm_tools$parser$Parser$symbol('\n')),
						_user$project$FastParser$exp));
			})));
var _user$project$FastParser$typeAlias = _user$project$LangParserUtils$mapExp_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'type alias',
		A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p146, _p145) {
					var _p147 = _p146;
					var _p148 = _p145;
					return A3(
						_user$project$Info$WithInfo,
						A5(_user$project$Lang$ETypeAlias, _p147._0, _p147._2, _p148._0, _p148._3, _p148._1),
						_p147._1.start,
						_p148._2.end);
				}),
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F3(
									function (v0, v1, v2) {
										return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
									})),
							_user$project$LangParserUtils$spaces),
						_user$project$ParserUtils$trackInfo(
							_elm_tools$parser$Parser$symbol('('))),
					_user$project$LangParserUtils$keywordWithSpace('def ')),
				_user$project$FastParser$typePattern),
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F4(
									function (v0, v1, v2, v3) {
										return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
									})),
							_user$project$FastParser$typ),
						_user$project$LangParserUtils$spaces),
					_user$project$ParserUtils$trackInfo(
						_elm_tools$parser$Parser$symbol(')'))),
				_user$project$FastParser$exp))));
var _user$project$FastParser$typeAnnotation = _user$project$LangParserUtils$mapExp_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'type annotation',
		_elm_tools$parser$Parser$lazy(
			function (_p149) {
				return A2(
					_user$project$FastParser$parenBlock,
					F3(
						function (wsStart, _p150, wsEnd) {
							var _p151 = _p150;
							return A5(_user$project$Lang$EColonType, wsStart, _p151._0, _p151._1, _p151._2, wsEnd);
						}),
					A3(
						_elm_tools$parser$Parser$delayedCommitMap,
						F2(
							function (_p152, t) {
								var _p153 = _p152;
								return {ctor: '_Tuple3', _0: _p153._0, _1: _p153._1, _2: t};
							}),
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									_elm_tools$parser$Parser$succeed(
										F2(
											function (v0, v1) {
												return {ctor: '_Tuple2', _0: v0, _1: v1};
											})),
									_user$project$FastParser$exp),
								_user$project$LangParserUtils$spaces),
							_elm_tools$parser$Parser$symbol(':')),
						_user$project$FastParser$typ));
			})));
var _user$project$FastParser$typeCaseExpression = _elm_tools$parser$Parser$lazy(
	function (_p154) {
		return A6(_user$project$FastParser$genericCase, 'type case expression', 'typecase', _user$project$Lang$ETypeCase, _user$project$Lang$TBranch_, _user$project$FastParser$exp, _user$project$FastParser$typ);
	});
var _user$project$FastParser$typeDeclaration = _user$project$LangParserUtils$mapExp_(
	A2(
		_elm_tools$parser$Parser$inContext,
		'type declaration',
		A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p156, _p155) {
					var _p157 = _p156;
					var _p158 = _p155;
					return A3(
						_user$project$Info$WithInfo,
						A5(_user$project$Lang$ETyp, _p157._0, _p158._0, _p158._1, _p158._4, _p158._2),
						_p157._1.start,
						_p158._3.end);
				}),
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					_user$project$LangParserUtils$spaces),
				_user$project$ParserUtils$trackInfo(
					_elm_tools$parser$Parser$symbol('('))),
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									_elm_tools$parser$Parser$succeed(
										F5(
											function (v0, v1, v2, v3, v4) {
												return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
											})),
									_user$project$LangParserUtils$keywordWithSpace('typ')),
								_user$project$FastParser$variablePattern),
							_user$project$FastParser$typ),
						_user$project$LangParserUtils$spaces),
					_user$project$ParserUtils$trackInfo(
						_elm_tools$parser$Parser$symbol(')'))),
				_user$project$FastParser$exp))));
var _user$project$FastParser$genericTopLevelDef = F3(
	function (context, kword, isRec) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			context,
			A2(
				_user$project$FastParser$parenBlock,
				F4(
					function (wsStart, _p159, wsEnd, rest) {
						var _p160 = _p159;
						return _user$project$Lang$exp_(
							A9(_user$project$Lang$ELet, wsStart, _user$project$Lang$Def, isRec, _p160._0, _user$project$Lang$space1, _p160._1, _user$project$Lang$space1, rest, wsEnd));
					}),
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})),
							_user$project$LangParserUtils$keywordWithSpace(kword)),
						_user$project$FastParser$pattern),
					_user$project$FastParser$exp)));
	});
var _user$project$FastParser$recursiveTopLevelDef = A3(_user$project$FastParser$genericTopLevelDef, 'top-level recursive def binding', 'defrec', true);
var _user$project$FastParser$simpleTopLevelDef = A3(_user$project$FastParser$genericTopLevelDef, 'top-level non-recursive def binding', 'def', false);
var _user$project$FastParser$topLevelDef = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level def binding',
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _user$project$FastParser$recursiveTopLevelDef,
			_1: {
				ctor: '::',
				_0: _user$project$FastParser$simpleTopLevelDef,
				_1: {ctor: '[]'}
			}
		}));
var _user$project$FastParser$topLevelExp = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level expression',
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _user$project$FastParser$topLevelTypeAlias,
			_1: {
				ctor: '::',
				_0: _user$project$FastParser$topLevelDef,
				_1: {
					ctor: '::',
					_0: _user$project$FastParser$topLevelTypeDeclaration,
					_1: {
						ctor: '::',
						_0: _user$project$FastParser$topLevelComment,
						_1: {
							ctor: '::',
							_0: _user$project$FastParser$topLevelOption,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}));
var _user$project$FastParser$allTopLevelExps = A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, _user$project$FastParser$topLevelExp);
var _user$project$FastParser$mainExp = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: _user$project$FastParser$exp,
		_1: {
			ctor: '::',
			_0: _user$project$FastParser$implicitMain,
			_1: {ctor: '[]'}
		}
	});
var _user$project$FastParser$program = A2(
	_elm_tools$parser$Parser_ops['|.'],
	A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(_user$project$TopLevelExp$fuseTopLevelExps),
				_user$project$FastParser$allTopLevelExps),
			_user$project$FastParser$mainExp),
		_user$project$LangParserUtils$spaces),
	_elm_tools$parser$Parser$end);
var _user$project$FastParser$parseE_ = function (f) {
	return _elm_tools$parser$Parser$run(
		A2(_elm_tools$parser$Parser$map, f, _user$project$FastParser$program));
};
var _user$project$FastParser$_p161 = A2(
	_user$project$FastParser$freshenClean,
	1,
	A2(
		_user$project$Utils$fromOkay,
		'parse prelude',
		A2(_user$project$FastParser$parseE_, _elm_lang$core$Basics$identity, _user$project$PreludeGenerated$src)));
var _user$project$FastParser$prelude = _user$project$FastParser$_p161._0;
var _user$project$FastParser$initK = _user$project$FastParser$_p161._1;
var _user$project$FastParser$isPreludeLocId = function (k) {
	return _elm_lang$core$Native_Utils.cmp(k, _user$project$FastParser$initK) < 0;
};
var _user$project$FastParser$isPreludeLoc = function (_p162) {
	var _p163 = _p162;
	return _user$project$FastParser$isPreludeLocId(_p163._0);
};
var _user$project$FastParser$isPreludeEId = function (eid) {
	return _user$project$FastParser$isActualEId(eid) && (_elm_lang$core$Native_Utils.cmp(eid, _user$project$FastParser$initK) < 0);
};
var _user$project$FastParser$isProgramEId = function (eid) {
	return _user$project$FastParser$isActualEId(eid) && (!_user$project$FastParser$isPreludeEId(eid));
};
var _user$project$FastParser$duplicateAndAllIds = function (exp) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (id, _p164) {
				var _p165 = _p164;
				var _p167 = _p165._1;
				var _p166 = _p165._0;
				return (_elm_lang$core$Native_Utils.cmp(id, _user$project$FastParser$initK) > -1) ? (A2(_elm_lang$core$Set$member, id, _p167) ? {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Set$insert, id, _p166),
					_1: _p167
				} : {
					ctor: '_Tuple2',
					_0: _p166,
					_1: A2(_elm_lang$core$Set$insert, id, _p167)
				}) : {ctor: '_Tuple2', _0: _p166, _1: _p167};
			}),
		{ctor: '_Tuple2', _0: _elm_lang$core$Set$empty, _1: _elm_lang$core$Set$empty},
		_user$project$FastParser$allIdsRaw(exp));
};
var _user$project$FastParser$freshen = function (e) {
	var _p168 = _user$project$FastParser$duplicateAndAllIds(e);
	var duplicateIds = _p168._0;
	var allIds = _p168._1;
	var idsToPreserve = A2(_elm_lang$core$Set$diff, allIds, duplicateIds);
	var startK = _user$project$Utils$fromJust(
		_elm_lang$core$List$maximum(
			{
				ctor: '::',
				_0: _user$project$FastParser$initK,
				_1: _elm_lang$core$Set$toList(allIds)
			})) + 1;
	var _p169 = A3(_user$project$FastParser$freshenPreserving, idsToPreserve, startK, e);
	var result = _p169._0;
	return result;
};
var _user$project$FastParser$parseE = _user$project$FastParser$parseE_(_user$project$FastParser$freshen);
var _user$project$FastParser$freshenFrom = F2(
	function (initK, e) {
		var _p170 = _user$project$FastParser$duplicateAndAllIds(e);
		var duplicateIds = _p170._0;
		var allIds = _p170._1;
		var idsToPreserve = A2(
			_elm_lang$core$Set$filter,
			function (id) {
				return _elm_lang$core$Native_Utils.cmp(id, initK) < 0;
			},
			A2(_elm_lang$core$Set$diff, allIds, duplicateIds));
		var _p171 = A3(_user$project$FastParser$freshenPreserving, idsToPreserve, initK, e);
		var result = _p171._0;
		return result;
	});
var _user$project$FastParser$allIds = function (exp) {
	return _elm_lang$core$Tuple$second(
		_user$project$FastParser$duplicateAndAllIds(exp));
};
var _user$project$FastParser$preludeIds = _user$project$FastParser$allIds(_user$project$FastParser$prelude);
var _user$project$FastParser$maxId = function (exp) {
	var ids = _user$project$FastParser$allIds(exp);
	return _user$project$Utils$fromJust(
		_elm_lang$core$List$maximum(
			{
				ctor: '::',
				_0: _user$project$FastParser$initK,
				_1: _elm_lang$core$Set$toList(ids)
			}));
};
var _user$project$FastParser$preludeSubstPlus = A2(_user$project$FastParser$substPlusOf_, _elm_lang$core$Dict$empty, _user$project$FastParser$prelude);
var _user$project$FastParser$preludeSubst = A2(
	_elm_lang$core$Dict$map,
	_elm_lang$core$Basics$always(
		function (_) {
			return _.val;
		}),
	_user$project$FastParser$preludeSubstPlus);
var _user$project$FastParser$substPlusOf = function (e) {
	return A2(_user$project$FastParser$substPlusOf_, _user$project$FastParser$preludeSubstPlus, e);
};
var _user$project$FastParser$substOf = function (_p172) {
	return A2(
		_elm_lang$core$Dict$map,
		_elm_lang$core$Basics$always(
			function (_) {
				return _.val;
			}),
		_user$project$FastParser$substPlusOf(_p172));
};
var _user$project$FastParser$substStrOf = function (_p173) {
	return A2(
		_elm_lang$core$Dict$map,
		_elm_lang$core$Basics$always(_elm_lang$core$Basics$toString),
		_user$project$FastParser$substOf(_p173));
};

var _user$project$BinaryOperatorParser$getOperatorInfo = F2(
	function (op, _p0) {
		var _p1 = _p0;
		return A2(_elm_lang$core$Dict$get, op, _p1._0);
	});
var _user$project$BinaryOperatorParser$binaryOperator = function (args) {
	var _p2 = args;
	var precedenceTable = _p2.precedenceTable;
	var minimumPrecedence = _p2.minimumPrecedence;
	var expression = _p2.expression;
	var operator = _p2.operator;
	var representation = _p2.representation;
	var combine = _p2.combine;
	var loop = function (resultExp) {
		return A3(
			_elm_lang$core$Basics$flip,
			_elm_tools$parser$Parser$andThen,
			_user$project$ParserUtils$lookAhead(
				_user$project$ParserUtils$optional(operator)),
			function (maybeOperator) {
				var _p3 = maybeOperator;
				if (_p3.ctor === 'Just') {
					var _p7 = _p3._0;
					var opRepresentation = representation(_p7);
					var _p4 = A2(_user$project$BinaryOperatorParser$getOperatorInfo, opRepresentation, precedenceTable);
					if (_p4.ctor === 'Just') {
						var _p6 = _p4._0._1;
						if (_elm_lang$core$Native_Utils.cmp(_p6, minimumPrecedence) > -1) {
							var $continue = function (rightExp) {
								var newResult = A3(combine, resultExp, _p7, rightExp);
								return loop(newResult);
							};
							var nextMinimumPrecedence = function () {
								var _p5 = _p4._0._0;
								if (_p5.ctor === 'Left') {
									return _p6 + 1;
								} else {
									return _p6;
								}
							}();
							var rightHandSide = _user$project$BinaryOperatorParser$binaryOperator(
								_elm_lang$core$Native_Utils.update(
									args,
									{minimumPrecedence: nextMinimumPrecedence}));
							return A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
									operator),
								A2(_elm_tools$parser$Parser$andThen, $continue, rightHandSide));
						} else {
							return _elm_tools$parser$Parser$succeed(resultExp);
						}
					} else {
						return _elm_tools$parser$Parser$fail(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'trying to parse operator \'',
								A2(
									_elm_lang$core$Basics_ops['++'],
									opRepresentation,
									A2(_elm_lang$core$Basics_ops['++'], '\' but no information for it was found in the', ' precedence table'))));
					}
				} else {
					return _elm_tools$parser$Parser$succeed(resultExp);
				}
			});
	};
	return A2(_elm_tools$parser$Parser$andThen, loop, expression);
};
var _user$project$BinaryOperatorParser$Right = {ctor: 'Right'};
var _user$project$BinaryOperatorParser$Left = {ctor: 'Left'};
var _user$project$BinaryOperatorParser$PT = function (a) {
	return {ctor: 'PT', _0: a};
};
var _user$project$BinaryOperatorParser$emptyPrecedenceTable = _user$project$BinaryOperatorParser$PT(_elm_lang$core$Dict$empty);
var _user$project$BinaryOperatorParser$addOperator = F2(
	function (_p9, _p8) {
		var _p10 = _p9;
		var _p11 = _p8;
		return _user$project$BinaryOperatorParser$PT(
			A3(
				_elm_lang$core$Dict$insert,
				_p10._0,
				{ctor: '_Tuple2', _0: _p10._1, _1: _p10._2},
				_p11._0));
	});
var _user$project$BinaryOperatorParser$buildPrecedenceTable = function () {
	var build = F4(
		function (associativity, precedence, operators, table) {
			return A3(
				_elm_lang$core$List$foldl,
				function (op) {
					return _user$project$BinaryOperatorParser$addOperator(
						{ctor: '_Tuple3', _0: op, _1: associativity, _2: precedence});
				},
				table,
				operators);
		});
	var buildPrecedenceLevel = F2(
		function (_p12, table) {
			var _p13 = _p12;
			var _p14 = _p13._0;
			return A4(
				build,
				_user$project$BinaryOperatorParser$Right,
				_p14,
				_p13._2,
				A4(build, _user$project$BinaryOperatorParser$Left, _p14, _p13._1, table));
		});
	return A2(_elm_lang$core$List$foldl, buildPrecedenceLevel, _user$project$BinaryOperatorParser$emptyPrecedenceTable);
}();

var _user$project$ElmLang$infixOp_s = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: _user$project$Lang$Plus,
		_1: {
			ctor: '::',
			_0: _user$project$Lang$Minus,
			_1: {
				ctor: '::',
				_0: _user$project$Lang$Mult,
				_1: {
					ctor: '::',
					_0: _user$project$Lang$Div,
					_1: {
						ctor: '::',
						_0: _user$project$Lang$Lt,
						_1: {
							ctor: '::',
							_0: _user$project$Lang$Eq,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$ElmLang$isInfixOperator = function (op) {
	return A2(_elm_lang$core$Set$member, op.val, _user$project$ElmLang$infixOp_s);
};
var _user$project$ElmLang$symbols = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: _elm_lang$core$Native_Utils.chr('+'),
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('-'),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.chr('/'),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.chr('*'),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('='),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.chr('.'),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.chr('<'),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.chr('>'),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.chr('&'),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.chr('|'),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.chr('^'),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.chr('?'),
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.chr('%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.chr('#'),
															_1: {
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.chr('~'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.chr('!'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$ElmLang$isSymbol = function ($char) {
	return A2(_elm_lang$core$Set$member, $char, _user$project$ElmLang$symbols);
};

var _user$project$ElmParser$implicitMain = function () {
	var builder = function (p) {
		var withCorrectInfo = function (x) {
			return A3(_user$project$Info$WithInfo, x, p, p);
		};
		var name = function (_p0) {
			return withCorrectInfo(
				_user$project$Lang$pat_(_p0));
		}(
			A3(
				_user$project$Lang$PVar,
				_user$project$Lang$space1,
				'_IMPLICIT_MAIN',
				_user$project$Info$withDummyInfo(_user$project$Lang$NoWidgetDecl)));
		var binding = function (_p1) {
			return withCorrectInfo(
				_user$project$Lang$exp_(_p1));
		}(
			A2(
				_user$project$Lang$EBase,
				_user$project$Lang$space1,
				A2(_user$project$Lang$EString, _user$project$Lang$defaultQuoteChar, '...')));
		var body = function (_p2) {
			return withCorrectInfo(
				_user$project$Lang$exp_(_p2));
		}(
			A2(_user$project$Lang$EVar, _user$project$Lang$space1, 'main'));
		return function (_p3) {
			return withCorrectInfo(
				_user$project$Lang$exp_(_p3));
		}(
			A9(_user$project$Lang$ELet, _user$project$Lang$newline2, _user$project$Lang$Let, false, name, _user$project$Lang$space1, binding, _user$project$Lang$space1, body, _user$project$Lang$space0));
	};
	return A2(
		_elm_tools$parser$Parser_ops['|='],
		_elm_tools$parser$Parser$succeed(builder),
		_user$project$ParserUtils$getPos);
}();
var _user$project$ElmParser$topLevelComment = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level comment',
	A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (wsBefore, _p4) {
				var _p5 = _p4;
				var _p6 = _p5._1;
				return A3(
					_user$project$Info$withInfo,
					function (rest) {
						return _user$project$Lang$exp_(
							A3(_user$project$Lang$EComment, wsBefore, _p6.val, rest));
					},
					_p5._0.start,
					_p6.end);
			}),
		_user$project$LangParserUtils$spaces,
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					_user$project$ParserUtils$trackInfo(
						_elm_tools$parser$Parser$symbol('--'))),
				_user$project$ParserUtils$trackInfo(
					A2(
						_elm_tools$parser$Parser$keep,
						_elm_tools$parser$Parser$zeroOrMore,
						function (c) {
							return !_elm_lang$core$Native_Utils.eq(
								c,
								_elm_lang$core$Native_Utils.chr('\n'));
						}))),
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: _elm_tools$parser$Parser$symbol('\n'),
					_1: {
						ctor: '::',
						_0: _elm_tools$parser$Parser$end,
						_1: {ctor: '[]'}
					}
				}))));
var _user$project$ElmParser$isTopLevelDefImplicitlyRec = F2(
	function (pat, binding) {
		return _user$project$Lang$isPVar(
			_user$project$Lang$patEffectivePat(pat)) && _user$project$Lang$isFunc(
			_user$project$Lang$expEffectiveExp(binding));
	});
var _user$project$ElmParser$optionalTopLevelSemicolon = _user$project$ParserUtils$optional(
	A3(
		_user$project$LangParserUtils$paddedBefore,
		F3(
			function (_p9, _p8, _p7) {
				return {ctor: '_Tuple0'};
			}),
		_user$project$LangParserUtils$spaces,
		_user$project$ParserUtils$trackInfo(
			_elm_tools$parser$Parser$symbol(';'))));
var _user$project$ElmParser$spaceWithoutNLRegex = _elm_lang$core$Regex$regex('((?!\n)\\s)*');
var _user$project$ElmParser$spacesWithoutNewline = _user$project$ParserUtils$trackInfo(
	_user$project$ParserUtils$keepRegex(_user$project$ElmParser$spaceWithoutNLRegex));
var _user$project$ElmParser$topLevelOption = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level option',
	A3(
		_user$project$LangParserUtils$paddedBefore,
		F3(
			function (wsBefore, _p10, rest) {
				var _p11 = _p10;
				return _user$project$Lang$exp_(
					A5(_user$project$Lang$EOption, wsBefore, _p11._0, _p11._1, _p11._2, rest));
			}),
		_user$project$LangParserUtils$spaces,
		_user$project$ParserUtils$trackInfo(
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										_elm_tools$parser$Parser$succeed(
											F3(
												function (v0, v1, v2) {
													return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
												})),
										_elm_tools$parser$Parser$symbol('#')),
									_user$project$ElmParser$spacesWithoutNewline),
								_user$project$ParserUtils$trackInfo(
									A2(
										_elm_tools$parser$Parser$keep,
										_elm_tools$parser$Parser$zeroOrMore,
										function (c) {
											return (!_elm_lang$core$Native_Utils.eq(
												c,
												_elm_lang$core$Native_Utils.chr('\n'))) && ((!_elm_lang$core$Native_Utils.eq(
												c,
												_elm_lang$core$Native_Utils.chr(' '))) && (!_elm_lang$core$Native_Utils.eq(
												c,
												_elm_lang$core$Native_Utils.chr(':'))));
										}))),
							_elm_tools$parser$Parser$symbol(':')),
						_user$project$ElmParser$spacesWithoutNewline),
					_user$project$ParserUtils$trackInfo(
						A2(
							_elm_tools$parser$Parser$keep,
							_elm_tools$parser$Parser$zeroOrMore,
							function (c) {
								return !_elm_lang$core$Native_Utils.eq(
									c,
									_elm_lang$core$Native_Utils.chr('\n'));
							}))),
				_elm_tools$parser$Parser$symbol('\n')))));
var _user$project$ElmParser$topLevelSpaceRegex = _elm_lang$core$Regex$regex('((?!\n\n|\n\\w)\\s)*');
var _user$project$ElmParser$topLevelSpacePolicy = _user$project$ParserUtils$trackInfo(
	_user$project$ParserUtils$keepRegex(_user$project$ElmParser$topLevelSpaceRegex));
var _user$project$ElmParser$holeEmpty = function (sp) {
	return _user$project$LangParserUtils$mapExp_(
		A3(
			_user$project$LangParserUtils$paddedBefore,
			_user$project$Lang$EHole,
			sp,
			_user$project$ParserUtils$trackInfo(
				A2(_user$project$ParserUtils$token, '??', _user$project$Lang$HoleEmpty))));
};
var _user$project$ElmParser$opFromIdentifier = function (identifier) {
	var _p12 = identifier;
	switch (_p12) {
		case 'π':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Pi);
		case 'empty':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$DictEmpty);
		case 'cos':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Cos);
		case 'sin':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Sin);
		case 'arccos':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$ArcCos);
		case 'arcsin':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$ArcSin);
		case 'abs':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Abs);
		case 'floor':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Floor);
		case 'ceiling':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Ceil);
		case 'round':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Round);
		case 'toString':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$ToStr);
		case 'sqrt':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Sqrt);
		case 'ln':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Ln);
		case 'explode':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Explode);
		case '+':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Plus);
		case '-':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Minus);
		case '*':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Mult);
		case '/':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Div);
		case '<':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Lt);
		case '==':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Eq);
		case 'mod':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Mod);
		case 'pow':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Pow);
		case 'arctan2':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$ArcTan2);
		case 'insert':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$DictInsert);
		case 'get':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$DictGet);
		case 'remove':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$DictRemove);
		case 'debug':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$DebugLog);
		case 'noWidgets':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$NoWidgets);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$ElmParser$unaryOpFromIdentifier = function (identifier) {
	var _p13 = identifier;
	switch (_p13) {
		case 'π':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$Pi);
		case 'empty':
			return _elm_lang$core$Maybe$Just(_user$project$Lang$DictEmpty);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$ElmParser$builtInPatternPrecedenceList = {
	ctor: '::',
	_0: {
		ctor: '_Tuple3',
		_0: 2,
		_1: {ctor: '[]'},
		_2: {
			ctor: '::',
			_0: '::',
			_1: {ctor: '[]'}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple3',
			_0: 1,
			_1: {
				ctor: '::',
				_0: 'as',
				_1: {ctor: '[]'}
			},
			_2: {ctor: '[]'}
		},
		_1: {ctor: '[]'}
	}
};
var _user$project$ElmParser$builtInPatternPrecedenceTable = _user$project$BinaryOperatorParser$buildPrecedenceTable(_user$project$ElmParser$builtInPatternPrecedenceList);
var _user$project$ElmParser$builtInPrecedenceList = {
	ctor: '::',
	_0: {
		ctor: '_Tuple3',
		_0: 9,
		_1: {
			ctor: '::',
			_0: '>>',
			_1: {ctor: '[]'}
		},
		_2: {
			ctor: '::',
			_0: '<<',
			_1: {ctor: '[]'}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple3',
			_0: 8,
			_1: {ctor: '[]'},
			_2: {
				ctor: '::',
				_0: '^',
				_1: {ctor: '[]'}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: 7,
				_1: {
					ctor: '::',
					_0: '*',
					_1: {
						ctor: '::',
						_0: '/',
						_1: {
							ctor: '::',
							_0: '//',
							_1: {
								ctor: '::',
								_0: '%',
								_1: {
									ctor: '::',
									_0: 'rem',
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				_2: {ctor: '[]'}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple3',
					_0: 6,
					_1: {
						ctor: '::',
						_0: '+',
						_1: {
							ctor: '::',
							_0: '-',
							_1: {ctor: '[]'}
						}
					},
					_2: {ctor: '[]'}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple3',
						_0: 5,
						_1: {ctor: '[]'},
						_2: {
							ctor: '::',
							_0: '++',
							_1: {
								ctor: '::',
								_0: '::',
								_1: {ctor: '[]'}
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple3',
							_0: 4,
							_1: {
								ctor: '::',
								_0: '==',
								_1: {
									ctor: '::',
									_0: '/=',
									_1: {
										ctor: '::',
										_0: '<',
										_1: {
											ctor: '::',
											_0: '>',
											_1: {
												ctor: '::',
												_0: '<=',
												_1: {
													ctor: '::',
													_0: '>=',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							},
							_2: {ctor: '[]'}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple3',
								_0: 3,
								_1: {ctor: '[]'},
								_2: {
									ctor: '::',
									_0: '&&',
									_1: {ctor: '[]'}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple3',
									_0: 2,
									_1: {ctor: '[]'},
									_2: {
										ctor: '::',
										_0: '||',
										_1: {ctor: '[]'}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple3',
										_0: 1,
										_1: {ctor: '[]'},
										_2: {ctor: '[]'}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple3',
											_0: 0,
											_1: {
												ctor: '::',
												_0: '|>',
												_1: {ctor: '[]'}
											},
											_2: {
												ctor: '::',
												_0: '<|',
												_1: {ctor: '[]'}
											}
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$ElmParser$builtInPrecedenceTable = _user$project$BinaryOperatorParser$buildPrecedenceTable(_user$project$ElmParser$builtInPrecedenceList);
var _user$project$ElmParser$builtInOperators = A2(
	_elm_lang$core$List$concatMap,
	function (_p14) {
		var _p15 = _p14;
		return A2(_elm_lang$core$Basics_ops['++'], _p15._1, _p15._2);
	},
	_user$project$ElmParser$builtInPrecedenceList);
var _user$project$ElmParser$noRoles = function (t__) {
	return {t__: t__, roles: _elm_lang$core$Set$empty};
};
var _user$project$ElmParser$baseType = F4(
	function (context, ctor, sp, token) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			context,
			A3(
				_elm_tools$parser$Parser$delayedCommitMap,
				F2(
					function (ws, _p16) {
						return A3(
							_user$project$Info$WithInfo,
							_user$project$ElmParser$noRoles(
								ctor(ws)),
							ws.start,
							ws.end);
					}),
				sp,
				_elm_tools$parser$Parser$keyword(token)));
	});
var _user$project$ElmParser$nullType = function (sp) {
	return A4(_user$project$ElmParser$baseType, 'null type', _user$project$Lang$TNull, sp, 'Null');
};
var _user$project$ElmParser$numType = function (sp) {
	return A4(_user$project$ElmParser$baseType, 'num type', _user$project$Lang$TNum, sp, 'Num');
};
var _user$project$ElmParser$boolType = function (sp) {
	return A4(_user$project$ElmParser$baseType, 'bool type', _user$project$Lang$TBool, sp, 'Bool');
};
var _user$project$ElmParser$stringType = function (sp) {
	return A4(_user$project$ElmParser$baseType, 'string type', _user$project$Lang$TString, sp, 'String');
};
var _user$project$ElmParser$wildcardType = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'wildcard type',
		A3(
			_user$project$LangParserUtils$spaceSaverKeyword,
			sp,
			'_',
			function (_p17) {
				return _user$project$ElmParser$noRoles(
					_user$project$Lang$TWildcard(_p17));
			}));
};
var _user$project$ElmParser$wildcardPattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'wildcard pattern',
		_user$project$LangParserUtils$mapPat_(
			A3(
				_user$project$LangParserUtils$paddedBefore,
				F2(
					function (ws, _p18) {
						var _p19 = _p18;
						return _user$project$Lang$PWildcard(ws);
					}),
				sp,
				_user$project$ParserUtils$trackInfo(
					_elm_tools$parser$Parser$symbol('_')))));
};
var _user$project$ElmParser$namePattern = F2(
	function (sp, ident) {
		return _user$project$LangParserUtils$mapPat_(
			A3(
				_user$project$LangParserUtils$paddedBefore,
				F2(
					function (ws, name) {
						return A3(_user$project$Lang$PVar, ws, name, _user$project$Lang$noWidgetDecl);
					}),
				sp,
				ident));
	});
var _user$project$ElmParser$multilineConcatExp = F2(
	function (exps, startPosition) {
		var _p20 = exps;
		if (_p20.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'ElmParser',
				{
					start: {line: 412, column: 3},
					end: {line: 423, column: 36}
				},
				_p20)('Internal error: No expression in longstring literal');
		} else {
			if (_p20._1.ctor === '[]') {
				return _p20._0;
			} else {
				var _p23 = _p20._0;
				var tailPart = A2(_user$project$ElmParser$multilineConcatExp, _p20._1, _p23.end);
				var _p22 = _p23.val.e__;
				if (_p22.ctor === 'ELet') {
					return A2(
						_user$project$Lang$replaceE__,
						_p23,
						A9(_user$project$Lang$ELet, _p22._0, _p22._1, _p22._2, _p22._3, _p22._4, _p22._5, _p22._6, tailPart, _p22._8));
				} else {
					return A3(
						_user$project$Info$withInfo,
						_user$project$Lang$exp_(
							A4(
								_user$project$Lang$EOp,
								_user$project$Lang$space0,
								A3(_user$project$Info$withInfo, _user$project$Lang$Plus, _p23.end, tailPart.start),
								{
									ctor: '::',
									_0: _p23,
									_1: {
										ctor: '::',
										_0: tailPart,
										_1: {ctor: '[]'}
									}
								},
								_user$project$Lang$space0)),
						_p23.start,
						tailPart.end);
				}
			}
		}
	});
var _user$project$ElmParser$multilineParseUntilRegex = _elm_lang$core$Regex$regex('@|\"\"\"');
var _user$project$ElmParser$singleLineString = function () {
	var stringHelper = function (quoteChar) {
		var quoteString = _elm_lang$core$String$fromChar(quoteChar);
		var quoteEscapeRegex = _elm_lang$core$Regex$regex(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\n|\\\\|\\',
				A2(
					_elm_lang$core$Basics_ops['++'],
					quoteString,
					A2(_elm_lang$core$Basics_ops['++'], '|', quoteString))));
		return A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(
						_user$project$Lang$EString(quoteString)),
					_elm_tools$parser$Parser$symbol(quoteString)),
				A2(
					_elm_tools$parser$Parser$map,
					_elm_lang$core$String$concat,
					A2(
						_elm_tools$parser$Parser$repeat,
						_elm_tools$parser$Parser$zeroOrMore,
						_elm_tools$parser$Parser$oneOf(
							{
								ctor: '::',
								_0: A2(
									_elm_tools$parser$Parser$map,
									function (_p24) {
										return quoteString;
									},
									_elm_tools$parser$Parser$symbol(
										A2(_elm_lang$core$Basics_ops['++'], '\\', quoteString))),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_tools$parser$Parser$map,
										function (_p25) {
											return '\\';
										},
										_elm_tools$parser$Parser$symbol('\\\\')),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_tools$parser$Parser_ops['|='],
											A2(
												_elm_tools$parser$Parser_ops['|='],
												_elm_tools$parser$Parser$succeed(
													F2(
														function (a, b) {
															return A2(_elm_lang$core$Basics_ops['++'], a, b);
														})),
												A2(
													_elm_tools$parser$Parser$keep,
													_elm_tools$parser$Parser$Exactly(1),
													function (c) {
														return (!_elm_lang$core$Native_Utils.eq(c, quoteChar)) && ((!_elm_lang$core$Native_Utils.eq(
															c,
															_elm_lang$core$Native_Utils.chr('\\'))) && (!_elm_lang$core$Native_Utils.eq(
															c,
															_elm_lang$core$Native_Utils.chr('\n'))));
													})),
											_user$project$ParserUtils$keepUntilRegex(quoteEscapeRegex)),
										_1: {ctor: '[]'}
									}
								}
							})))),
			_elm_tools$parser$Parser$symbol(quoteString));
	};
	return A2(
		_elm_tools$parser$Parser$inContext,
		'single-line string',
		_user$project$ParserUtils$trackInfo(
			_elm_tools$parser$Parser$oneOf(
				A2(
					_elm_lang$core$List$map,
					stringHelper,
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('\''),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.chr('\"'),
							_1: {ctor: '[]'}
						}
					}))));
}();
var _user$project$ElmParser$bool = A2(
	_elm_tools$parser$Parser$inContext,
	'bool',
	_user$project$ParserUtils$trackInfo(
		A2(
			_elm_tools$parser$Parser$map,
			_user$project$Lang$EBool,
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(_user$project$ParserUtils$token, 'True', true),
					_1: {
						ctor: '::',
						_0: A2(_user$project$ParserUtils$token, 'False', false),
						_1: {ctor: '[]'}
					}
				}))));
var _user$project$ElmParser$baseValue = A2(
	_elm_tools$parser$Parser$inContext,
	'base value',
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _user$project$ElmParser$singleLineString,
			_1: {
				ctor: '::',
				_0: _user$project$ElmParser$bool,
				_1: {ctor: '[]'}
			}
		}));
var _user$project$ElmParser$baseValuePattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'base value pattern',
		_user$project$LangParserUtils$mapPat_(
			A3(_user$project$LangParserUtils$paddedBefore, _user$project$Lang$PBase, sp, _user$project$ElmParser$baseValue)));
};
var _user$project$ElmParser$baseValueExpression = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'base value expression',
		_user$project$LangParserUtils$mapExp_(
			A3(_user$project$LangParserUtils$paddedBefore, _user$project$Lang$EBase, sp, _user$project$ElmParser$baseValue)));
};
var _user$project$ElmParser$frozenAnnotation = A2(
	_elm_tools$parser$Parser$inContext,
	'frozen annotation',
	_user$project$ParserUtils$trackInfo(
		_elm_tools$parser$Parser$oneOf(
			A2(
				_elm_lang$core$List$map,
				function (a) {
					return A2(_user$project$ParserUtils$token, a, a);
				},
				{
					ctor: '::',
					_0: _user$project$Lang$frozen,
					_1: {
						ctor: '::',
						_0: _user$project$Lang$thawed,
						_1: {
							ctor: '::',
							_0: _user$project$Lang$assignOnlyOnce,
							_1: {
								ctor: '::',
								_0: _user$project$Lang$unann,
								_1: {ctor: '[]'}
							}
						}
					}
				}))));
var _user$project$ElmParser$isInt = function (n) {
	return _elm_lang$core$Native_Utils.eq(
		n,
		_elm_lang$core$Basics$toFloat(
			_elm_lang$core$Basics$floor(n)));
};
var _user$project$ElmParser$num = function () {
	var sign = _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(-1),
				_elm_tools$parser$Parser$symbol('-')),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$succeed(1),
				_1: {ctor: '[]'}
			}
		});
	return _user$project$ParserUtils$try(
		A2(
			_elm_tools$parser$Parser$inContext,
			'number',
			_user$project$ParserUtils$trackInfo(
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							F2(
								function (s, n) {
									return s * n;
								})),
						sign),
					_elm_tools$parser$Parser$float))));
}();
var _user$project$ElmParser$widgetDecl = function (cap) {
	var combiner = F3(
		function (a, tok, b) {
			return A2(
				_elm_lang$core$List$all,
				_user$project$ElmParser$isInt,
				{
					ctor: '::',
					_0: a.val,
					_1: {
						ctor: '::',
						_0: b.val,
						_1: {ctor: '[]'}
					}
				}) ? A5(
				_user$project$Lang$IntSlider,
				A2(_user$project$Info$mapInfoVal, _elm_lang$core$Basics$floor, a),
				tok,
				A2(_user$project$Info$mapInfoVal, _elm_lang$core$Basics$floor, b),
				cap,
				false) : A5(_user$project$Lang$NumSlider, a, tok, b, cap, false);
		});
	return A2(
		_elm_tools$parser$Parser$inContext,
		'widget declaration',
		_user$project$ParserUtils$trackInfo(
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										_elm_tools$parser$Parser$succeed(combiner),
										_elm_tools$parser$Parser$symbol('{')),
									_user$project$ElmParser$num),
								_user$project$ParserUtils$trackInfo(
									A2(_user$project$ParserUtils$token, '-', '-'))),
							_user$project$ElmParser$num),
						_elm_tools$parser$Parser$symbol('}')),
					_1: {
						ctor: '::',
						_0: _elm_tools$parser$Parser$succeed(_user$project$Lang$NoWidgetDecl),
						_1: {ctor: '[]'}
					}
				})));
};
var _user$project$ElmParser$constantPattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'constant pattern',
		_user$project$LangParserUtils$mapPat_(
			A3(_user$project$LangParserUtils$paddedBefore, _user$project$Lang$PConst, sp, _user$project$ElmParser$num)));
};
var _user$project$ElmParser$constantExpression = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'constant expression',
		_user$project$LangParserUtils$mapExp_(
			A3(
				_elm_tools$parser$Parser$delayedCommitMap,
				F2(
					function (ws, _p26) {
						var _p27 = _p26;
						var _p29 = _p27._2;
						var _p28 = _p27._0;
						return A3(
							_user$project$Info$withInfo,
							A4(
								_user$project$Lang$EConst,
								ws,
								_p28.val,
								A2(_user$project$Lang$dummyLocWithDebugInfo, _p27._1.val, _p28.val),
								_p29),
							_p28.start,
							_p29.end);
					}),
				sp,
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F3(
									function (v0, v1, v2) {
										return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
									})),
							_user$project$ElmParser$num),
						_user$project$ElmParser$frozenAnnotation),
					_user$project$ElmParser$widgetDecl(_elm_lang$core$Maybe$Nothing)))));
};
var _user$project$ElmParser$patternSymbolIdentifier = _user$project$ParserUtils$trackInfo(
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _elm_tools$parser$Parser$source(
				_elm_tools$parser$Parser$symbol('::')),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$source(
					_elm_tools$parser$Parser$keyword('as')),
				_1: {ctor: '[]'}
			}
		}));
var _user$project$ElmParser$patternOperator = function (sp) {
	return A3(
		_user$project$LangParserUtils$paddedBefore,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		sp,
		_user$project$ElmParser$patternSymbolIdentifier);
};
var _user$project$ElmParser$symbolIdentifier = _user$project$ParserUtils$trackInfo(
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _elm_tools$parser$Parser$source(
				_elm_tools$parser$Parser$symbol('<|')),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$source(
					_elm_tools$parser$Parser$symbol('|>')),
				_1: {
					ctor: '::',
					_0: _elm_tools$parser$Parser$source(
						_elm_tools$parser$Parser$symbol('::')),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser$keep,
							_elm_tools$parser$Parser$oneOrMore,
							function (x) {
								return _user$project$ElmLang$isSymbol(x) && (!_elm_lang$core$Native_Utils.eq(
									x,
									_elm_lang$core$Native_Utils.chr('|')));
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}));
var _user$project$ElmParser$operator = function (sp) {
	return A3(
		_user$project$LangParserUtils$paddedBefore,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		sp,
		_user$project$ElmParser$symbolIdentifier);
};
var _user$project$ElmParser$nonIdentifierCharSet = _elm_lang$core$Set$fromList(
	_elm_lang$core$String$toList('`~+-=/|\\!@#$%^&*() \t\r\n\b[]{};\':\",.?<>'));
var _user$project$ElmParser$isSmallFirstChar = function ($char) {
	return !(_elm_lang$core$Char$isUpper($char) || (_elm_lang$core$Char$isDigit($char) || (_elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('_')) || A2(_elm_lang$core$Set$member, $char, _user$project$ElmParser$nonIdentifierCharSet))));
};
var _user$project$ElmParser$isRestChar = function ($char) {
	return !A2(_elm_lang$core$Set$member, $char, _user$project$ElmParser$nonIdentifierCharSet);
};
var _user$project$ElmParser$keywords = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'let',
		_1: {
			ctor: '::',
			_0: 'letrec',
			_1: {
				ctor: '::',
				_0: 'in',
				_1: {
					ctor: '::',
					_0: 'case',
					_1: {
						ctor: '::',
						_0: 'of',
						_1: {
							ctor: '::',
							_0: 'if',
							_1: {
								ctor: '::',
								_0: 'then',
								_1: {
									ctor: '::',
									_0: 'else',
									_1: {
										ctor: '::',
										_0: 'type',
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$ElmParser$smallIdentifier = _user$project$ParserUtils$trackInfo(
	A3(_elm_tools$parser$Parser_LanguageKit$variable, _user$project$ElmParser$isSmallFirstChar, _user$project$ElmParser$isRestChar, _user$project$ElmParser$keywords));
var _user$project$ElmParser$variablePattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'variable pattern',
		A2(_user$project$ElmParser$namePattern, sp, _user$project$ElmParser$smallIdentifier));
};
var _user$project$ElmParser$variableType = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'variable type',
		A3(
			_user$project$LangParserUtils$paddedBefore,
			F2(
				function (ws, name) {
					return _user$project$ElmParser$noRoles(
						A2(_user$project$Lang$TVar, ws, name));
				}),
			sp,
			_user$project$ElmParser$smallIdentifier));
};
var _user$project$ElmParser$variableOrUnaryOpExpression = function (sp) {
	var eVarOrEOp = F2(
		function (ws, ident) {
			var _p30 = _user$project$ElmParser$unaryOpFromIdentifier(ident);
			if (_p30.ctor === 'Just') {
				return A4(
					_user$project$Lang$EOp,
					ws,
					A3(
						_user$project$Info$withInfo,
						_p30._0,
						ws.end,
						{
							line: ws.end.line,
							col: ws.end.col + _elm_lang$core$String$length(ident)
						}),
					{ctor: '[]'},
					_user$project$Lang$space0);
			} else {
				return A2(_user$project$Lang$EVar, ws, ident);
			}
		});
	return _user$project$LangParserUtils$mapExp_(
		A3(_user$project$LangParserUtils$paddedBefore, eVarOrEOp, sp, _user$project$ElmParser$smallIdentifier));
};
var _user$project$ElmParser$bigIdentifier = _user$project$ParserUtils$trackInfo(
	A3(_elm_tools$parser$Parser_LanguageKit$variable, _elm_lang$core$Char$isUpper, _user$project$ElmParser$isRestChar, _user$project$ElmParser$keywords));
var _user$project$ElmParser$typePattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'type pattern',
		A2(_user$project$ElmParser$namePattern, sp, _user$project$ElmParser$bigIdentifier));
};
var _user$project$ElmParser$namedType = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'named type',
		A3(
			_user$project$LangParserUtils$paddedBefore,
			F2(
				function (ws, name) {
					return {
						t__: A2(_user$project$Lang$TNamed, ws, name),
						roles: _elm_lang$core$Set$singleton(name)
					};
				}),
			sp,
			_user$project$ElmParser$bigIdentifier));
};
var _user$project$ElmParser$holeIdentifier = _user$project$ParserUtils$trackInfo(
	A3(_elm_tools$parser$Parser_LanguageKit$variable, _user$project$ElmParser$isRestChar, _user$project$ElmParser$isRestChar, _user$project$ElmParser$keywords));
var _user$project$ElmParser$holeNamed = function (sp) {
	return _user$project$LangParserUtils$mapExp_(
		A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (wsBefore, _p31) {
					var _p32 = _p31;
					var _p33 = _p32._1;
					return A3(
						_user$project$Info$withInfo,
						A2(
							_user$project$Lang$EHole,
							wsBefore,
							_user$project$Lang$HoleNamed(_p33.val)),
						_p32._0.start,
						_p33.end);
				}),
			sp,
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					_user$project$ParserUtils$trackInfo(
						_elm_tools$parser$Parser$symbol('??'))),
				_user$project$ElmParser$holeIdentifier)));
};
var _user$project$ElmParser$block = F5(
	function (combiner, sp, openSymbol, closeSymbol, p) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p35, _p34) {
					var _p36 = _p35;
					var _p37 = _p34;
					return A3(
						_user$project$Info$withInfo,
						A3(combiner, _p36._0, _p37._0, _p37._1),
						_p36._1.start,
						_p37._2.end);
				}),
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					sp),
				_user$project$ParserUtils$trackInfo(
					_elm_tools$parser$Parser$symbol(openSymbol))),
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							F3(
								function (v0, v1, v2) {
									return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
								})),
						p),
					_user$project$LangParserUtils$spaces),
				_user$project$ParserUtils$trackInfo(
					_elm_tools$parser$Parser$symbol(closeSymbol))));
	});
var _user$project$ElmParser$parenBlock = F2(
	function (combiner, sp) {
		return A4(_user$project$ElmParser$block, combiner, sp, '(', ')');
	});
var _user$project$ElmParser$parenedType = function (ctor) {
	return _user$project$ElmParser$parenBlock(
		F3(
			function (wsStart, things, wsEnd) {
				return _user$project$ElmParser$noRoles(
					A3(ctor, wsStart, things, wsEnd));
			}));
};
var _user$project$ElmParser$bracketBlock = F2(
	function (combiner, sp) {
		return A4(_user$project$ElmParser$block, combiner, sp, '[', ']');
	});
var _user$project$ElmParser$blockIgnoreWS = function (sp) {
	return A2(
		_user$project$ElmParser$block,
		F3(
			function (wsBefore, x, wsEnd) {
				return x;
			}),
		sp);
};
var _user$project$ElmParser$parenBlockIgnoreWS = function (sp) {
	return A3(_user$project$ElmParser$blockIgnoreWS, sp, '(', ')');
};
var _user$project$ElmParser$genericNonEmptyListWithTail = function (_p38) {
	var _p39 = _p38;
	var _p43 = _p39.item;
	return _elm_tools$parser$Parser$lazy(
		function (_p40) {
			var anotherWsAndItem = A3(
				_elm_tools$parser$Parser$delayedCommitMap,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				_user$project$LangParserUtils$spaces,
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_elm_tools$parser$Parser$symbol(',')),
					_p43));
			return A3(
				_user$project$LangParserUtils$paddedBefore,
				F2(
					function (wsBefore, _p41) {
						var _p42 = _p41;
						return A5(_p39.combinerTail, wsBefore, _p42._0, _p42._1, _p42._2, _p42._3);
					}),
				_p39.beforeSpacePolicy,
				_user$project$ParserUtils$trackInfo(
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|='],
											A2(
												_elm_tools$parser$Parser_ops['|='],
												A2(
													_elm_tools$parser$Parser_ops['|.'],
													_elm_tools$parser$Parser$succeed(
														F5(
															function (e, es, wsm, t, wse) {
																return {
																	ctor: '_Tuple4',
																	_0: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: _user$project$Lang$space0, _1: e},
																		_1: es
																	},
																	_1: wsm,
																	_2: t,
																	_3: wse
																};
															})),
													_elm_tools$parser$Parser$symbol('[')),
												_p43),
											A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, anotherWsAndItem)),
										_user$project$LangParserUtils$spaces),
									_elm_tools$parser$Parser$symbol('|')),
								_p39.tailItem),
							_user$project$LangParserUtils$spaces),
						_elm_tools$parser$Parser$symbol(']'))));
		});
};
var _user$project$ElmParser$genericNonEmptyList = function (_p44) {
	var _p45 = _p44;
	var _p49 = _p45.item;
	return _elm_tools$parser$Parser$lazy(
		function (_p46) {
			var anotherWsAndItem = A3(
				_elm_tools$parser$Parser$delayedCommitMap,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				_user$project$LangParserUtils$spaces,
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_elm_tools$parser$Parser$symbol(',')),
					_p49));
			return A3(
				_user$project$LangParserUtils$paddedBefore,
				F2(
					function (wsBefore, _p47) {
						var _p48 = _p47;
						return A3(_p45.combiner, wsBefore, _p48._0, _p48._1);
					}),
				_p45.beforeSpacePolicy,
				_user$project$ParserUtils$trackInfo(
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										_elm_tools$parser$Parser$succeed(
											F3(
												function (e, es, ws) {
													return {
														ctor: '_Tuple2',
														_0: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: _user$project$Lang$space0, _1: e},
															_1: es
														},
														_1: ws
													};
												})),
										_elm_tools$parser$Parser$symbol('[')),
									_p49),
								A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, anotherWsAndItem)),
							_user$project$LangParserUtils$spaces),
						_elm_tools$parser$Parser$symbol(']'))));
		});
};
var _user$project$ElmParser$genericEmptyList = function (_p50) {
	var _p51 = _p50;
	return A3(
		_user$project$LangParserUtils$paddedBefore,
		_p51.combiner,
		_p51.beforeSpacePolicy,
		_user$project$ParserUtils$trackInfo(
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_elm_tools$parser$Parser$symbol('[')),
					_user$project$LangParserUtils$spaces),
				_elm_tools$parser$Parser$symbol(']'))));
};
var _user$project$ElmParser$genericList = function (_p52) {
	var _p53 = _p52;
	var _p58 = _p53.item;
	var _p57 = _p53.combiner;
	var _p56 = _p53.beforeSpacePolicy;
	return _elm_tools$parser$Parser$lazy(
		function (_p54) {
			return _elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: _user$project$ParserUtils$try(
						_user$project$ElmParser$genericEmptyList(
							{
								combiner: F2(
									function (wsBefore, wsAfter) {
										return A3(
											_p57,
											wsBefore,
											{ctor: '[]'},
											wsAfter);
									}),
								beforeSpacePolicy: _p56
							})),
					_1: {
						ctor: '::',
						_0: _user$project$ParserUtils$try(
							_user$project$ElmParser$genericNonEmptyList(
								{item: _p58, combiner: _p57, beforeSpacePolicy: _p56})),
						_1: {
							ctor: '::',
							_0: _elm_tools$parser$Parser$lazy(
								function (_p55) {
									return _user$project$ElmParser$genericNonEmptyListWithTail(
										{item: _p58, combinerTail: _p53.combinerTail, tailItem: _p53.tailItem, beforeSpacePolicy: _p56});
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		});
};
var _user$project$ElmParser$listPattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'list pattern',
		_elm_tools$parser$Parser$lazy(
			function (_p59) {
				return _user$project$LangParserUtils$mapPat_(
					_user$project$ElmParser$genericList(
						{
							item: _user$project$ElmParser$pattern(_user$project$LangParserUtils$spaces),
							tailItem: _user$project$ElmParser$pattern(_user$project$LangParserUtils$spaces),
							combiner: F3(
								function (wsBefore, members, wsBeforeEnd) {
									return A5(
										_user$project$Lang$PList,
										wsBefore,
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, members),
										_user$project$Lang$space0,
										_elm_lang$core$Maybe$Nothing,
										wsBeforeEnd);
								}),
							combinerTail: F5(
								function (wsBefore, members, wsMiddle, tail, wsBeforeEnd) {
									return A5(
										_user$project$Lang$PList,
										wsBefore,
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, members),
										wsMiddle,
										_elm_lang$core$Maybe$Just(tail),
										wsBeforeEnd);
								}),
							beforeSpacePolicy: sp
						}));
			}));
};
var _user$project$ElmParser$pattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'pattern',
		_elm_tools$parser$Parser$lazy(
			function (_p60) {
				return _user$project$BinaryOperatorParser$binaryOperator(
					{
						precedenceTable: _user$project$ElmParser$builtInPatternPrecedenceTable,
						minimumPrecedence: 0,
						expression: _user$project$ElmParser$simplePattern(sp),
						operator: _user$project$ElmParser$patternOperator(sp),
						representation: function (_p61) {
							return _elm_lang$core$Tuple$second(
								function (_) {
									return _.val;
								}(_p61));
						},
						combine: F3(
							function (left, operator, right) {
								var _p62 = operator.val;
								var wsBefore = _p62._0;
								var identifier = _p62._1;
								var _p63 = identifier;
								switch (_p63) {
									case '::':
										return A3(
											_user$project$Info$withInfo,
											_user$project$Lang$pat_(
												A5(
													_user$project$Lang$PList,
													_user$project$Lang$space0,
													{
														ctor: '::',
														_0: left,
														_1: {ctor: '[]'}
													},
													wsBefore,
													_elm_lang$core$Maybe$Just(right),
													_user$project$Lang$space0)),
											left.start,
											right.end);
									case 'as':
										var _p64 = right.val.p__;
										if (_p64.ctor === 'PVar') {
											return A3(
												_user$project$Info$withInfo,
												_user$project$Lang$pat_(
													A4(_user$project$Lang$PAs, _p64._0, _p64._1, wsBefore, left)),
												left.start,
												right.end);
										} else {
											var _p65 = left.val.p__;
											if (_p65.ctor === 'PVar') {
												return A3(
													_user$project$Info$withInfo,
													_user$project$Lang$pat_(
														A4(_user$project$Lang$PAs, _p65._0, _p65._1, wsBefore, right)),
													left.start,
													right.end);
											} else {
												return _elm_lang$core$Native_Utils.crashCase(
													'ElmParser',
													{
														start: {line: 695, column: 25},
														end: {line: 701, column: 93}
													},
													_p65)('Parser does not support conjunction of patterns');
											}
										}
									default:
										return _elm_lang$core$Native_Utils.crashCase(
											'ElmParser',
											{
												start: {line: 681, column: 17},
												end: {line: 702, column: 103}
											},
											_p63)(
											A2(_elm_lang$core$Basics_ops['++'], 'Internal error: Got pattern operator other than :: or as ', _p63));
								}
							})
					});
			}));
};
var _user$project$ElmParser$simplePattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'simple pattern',
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: _elm_tools$parser$Parser$lazy(
					function (_p68) {
						return _user$project$ElmParser$listPattern(sp);
					}),
				_1: {
					ctor: '::',
					_0: _elm_tools$parser$Parser$lazy(
						function (_p69) {
							return _user$project$ElmParser$parensPattern(sp);
						}),
					_1: {
						ctor: '::',
						_0: _user$project$ElmParser$constantPattern(sp),
						_1: {
							ctor: '::',
							_0: _user$project$ElmParser$baseValuePattern(sp),
							_1: {
								ctor: '::',
								_0: _user$project$ElmParser$variablePattern(sp),
								_1: {
									ctor: '::',
									_0: _user$project$ElmParser$wildcardPattern(sp),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}));
};
var _user$project$ElmParser$parensPattern = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'parentheses',
		_user$project$LangParserUtils$mapPat_(
			_elm_tools$parser$Parser$lazy(
				function (_p70) {
					return A3(
						_user$project$LangParserUtils$paddedBefore,
						F2(
							function (wsBefore, _p71) {
								var _p72 = _p71;
								return A3(_user$project$Lang$PParens, wsBefore, _p72._0, _p72._1);
							}),
						sp,
						_user$project$ParserUtils$trackInfo(
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|.'],
											_elm_tools$parser$Parser$succeed(
												F2(
													function (v0, v1) {
														return {ctor: '_Tuple2', _0: v0, _1: v1};
													})),
											_elm_tools$parser$Parser$symbol('(')),
										_user$project$ElmParser$pattern(_user$project$LangParserUtils$spaces)),
									_user$project$LangParserUtils$spaces),
								_elm_tools$parser$Parser$symbol(')'))));
				})));
};
var _user$project$ElmParser$parsePatternUnfresh = _elm_tools$parser$Parser$run(
	_user$project$ElmParser$pattern(_user$project$LangParserUtils$spaces));
var _user$project$ElmParser$tupleType = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'tuple type',
		_elm_tools$parser$Parser$lazy(
			function (_p73) {
				return _user$project$ElmParser$genericList(
					{
						item: _user$project$ElmParser$typ(_user$project$LangParserUtils$spaces),
						tailItem: _user$project$ElmParser$typ(_user$project$LangParserUtils$spaces),
						combiner: F3(
							function (wsBefore, heads, wsEnd) {
								return _user$project$ElmParser$noRoles(
									A5(
										_user$project$Lang$TTuple,
										wsBefore,
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, heads),
										_user$project$Lang$space0,
										_elm_lang$core$Maybe$Nothing,
										wsEnd));
							}),
						combinerTail: F5(
							function (wsBefore, heads, wsMiddle, tail, wsEnd) {
								return _user$project$ElmParser$noRoles(
									A5(
										_user$project$Lang$TTuple,
										wsBefore,
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, heads),
										wsMiddle,
										_elm_lang$core$Maybe$Just(tail),
										wsEnd));
							}),
						beforeSpacePolicy: sp
					});
			}));
};
var _user$project$ElmParser$typ = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'type',
		_elm_tools$parser$Parser$lazy(
			function (_p74) {
				return _elm_tools$parser$Parser$oneOf(
					{
						ctor: '::',
						_0: _user$project$ElmParser$nullType(sp),
						_1: {
							ctor: '::',
							_0: _user$project$ElmParser$numType(sp),
							_1: {
								ctor: '::',
								_0: _user$project$ElmParser$boolType(sp),
								_1: {
									ctor: '::',
									_0: _user$project$ElmParser$stringType(sp),
									_1: {
										ctor: '::',
										_0: _user$project$ElmParser$wildcardType(sp),
										_1: {
											ctor: '::',
											_0: _elm_tools$parser$Parser$lazy(
												function (_p75) {
													return _user$project$ElmParser$functionType(sp);
												}),
											_1: {
												ctor: '::',
												_0: _elm_tools$parser$Parser$lazy(
													function (_p76) {
														return _user$project$ElmParser$listType(sp);
													}),
												_1: {
													ctor: '::',
													_0: _elm_tools$parser$Parser$lazy(
														function (_p77) {
															return _user$project$ElmParser$dictType(sp);
														}),
													_1: {
														ctor: '::',
														_0: _elm_tools$parser$Parser$lazy(
															function (_p78) {
																return _user$project$ElmParser$tupleType(sp);
															}),
														_1: {
															ctor: '::',
															_0: _elm_tools$parser$Parser$lazy(
																function (_p79) {
																	return _user$project$ElmParser$forallType(sp);
																}),
															_1: {
																ctor: '::',
																_0: _elm_tools$parser$Parser$lazy(
																	function (_p80) {
																		return _user$project$ElmParser$unionType(sp);
																	}),
																_1: {
																	ctor: '::',
																	_0: _user$project$ElmParser$namedType(sp),
																	_1: {
																		ctor: '::',
																		_0: _user$project$ElmParser$variableType(sp),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					});
			}));
};
var _user$project$ElmParser$dictType = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'dictionary type',
		_elm_tools$parser$Parser$lazy(
			function (_p81) {
				return A3(
					_user$project$ElmParser$parenedType,
					F3(
						function (wsBefore, _p82, wsEnd) {
							var _p83 = _p82;
							return A4(_user$project$Lang$TDict, wsBefore, _p83._0, _p83._1, wsEnd);
						}),
					sp,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								_elm_tools$parser$Parser$succeed(
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})),
								_user$project$LangParserUtils$keywordWithSpace('TDict')),
							_user$project$ElmParser$typ(sp)),
						_user$project$ElmParser$typ(sp)));
			}));
};
var _user$project$ElmParser$forallType = function (sp) {
	var wsIdentifierPair = A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (ws, name) {
				return {ctor: '_Tuple2', _0: ws, _1: name.val};
			}),
		_user$project$LangParserUtils$spaces,
		_user$project$ElmParser$smallIdentifier);
	var quantifiers = _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$inContext,
				'forall type (one)',
				A2(_elm_tools$parser$Parser$map, _user$project$Lang$One, wsIdentifierPair)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$inContext,
					'forall type (many) ',
					_user$project$ParserUtils$untrackInfo(
						A3(
							_user$project$ElmParser$parenBlock,
							_user$project$Lang$Many,
							sp,
							A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, wsIdentifierPair)))),
				_1: {ctor: '[]'}
			}
		});
	return A2(
		_elm_tools$parser$Parser$inContext,
		'forall type',
		_elm_tools$parser$Parser$lazy(
			function (_p84) {
				return A3(
					_user$project$ElmParser$parenBlock,
					F3(
						function (wsBefore, _p85, wsEnd) {
							var _p86 = _p85;
							return _user$project$ElmParser$noRoles(
								A4(_user$project$Lang$TForall, wsBefore, _p86._0, _p86._1, wsEnd));
						}),
					sp,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								_elm_tools$parser$Parser$succeed(
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})),
								_user$project$LangParserUtils$keywordWithSpace('forall')),
							quantifiers),
						_user$project$ElmParser$typ(_user$project$LangParserUtils$spaces)));
			}));
};
var _user$project$ElmParser$functionType = function (sp) {
	return _elm_tools$parser$Parser$lazy(
		function (_p87) {
			return A2(
				_elm_tools$parser$Parser$inContext,
				'function type',
				A3(
					_user$project$ElmParser$parenedType,
					_user$project$Lang$TArrow,
					sp,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
							_user$project$LangParserUtils$keywordWithSpace('->')),
						A2(
							_elm_tools$parser$Parser$repeat,
							_elm_tools$parser$Parser$oneOrMore,
							_user$project$ElmParser$typ(sp)))));
		});
};
var _user$project$ElmParser$listType = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'list type',
		_elm_tools$parser$Parser$lazy(
			function (_p88) {
				return A3(
					_user$project$ElmParser$parenedType,
					_user$project$Lang$TList,
					sp,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
							_user$project$LangParserUtils$keywordWithSpace('List')),
						_user$project$ElmParser$typ(sp)));
			}));
};
var _user$project$ElmParser$unionType = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'union type',
		_elm_tools$parser$Parser$lazy(
			function (_p89) {
				return A3(
					_user$project$ElmParser$parenedType,
					_user$project$Lang$TUnion,
					sp,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
							_user$project$LangParserUtils$keywordWithSpace('union')),
						A2(
							_elm_tools$parser$Parser$repeat,
							_elm_tools$parser$Parser$oneOrMore,
							_user$project$ElmParser$typ(_user$project$LangParserUtils$spaces))));
			}));
};
var _user$project$ElmParser$spaceColonType = function (sp) {
	return _elm_tools$parser$Parser$lazy(
		function (_p90) {
			return _user$project$ParserUtils$try(
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})),
							sp),
						_elm_tools$parser$Parser$symbol(':')),
					_user$project$ElmParser$typ(sp)));
		});
};
var _user$project$ElmParser$topLevelTypeDeclaration = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level type declaration',
	_elm_tools$parser$Parser$lazy(
		function (_p91) {
			return A3(
				_elm_tools$parser$Parser$delayedCommitMap,
				F2(
					function (_p92, t) {
						var _p93 = _p92;
						var _p94 = _p93._0;
						return A3(
							_user$project$Info$withInfo,
							function (rest) {
								return _user$project$Lang$exp_(
									A5(_user$project$Lang$ETyp, _user$project$Lang$space0, _p94, t, rest, _p93._1));
							},
							_p94.start,
							t.end);
					}),
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})),
							_user$project$ElmParser$pattern(_user$project$ElmParser$topLevelSpacePolicy)),
						_user$project$ElmParser$topLevelSpacePolicy),
					_elm_tools$parser$Parser$symbol(':')),
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_user$project$ElmParser$typ(_user$project$ElmParser$topLevelSpacePolicy)),
					_user$project$ElmParser$optionalTopLevelSemicolon));
		}));
var _user$project$ElmParser$topLevelTypeAlias = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level type alias',
	A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (_p95, t) {
				var _p96 = _p95;
				return A3(
					_user$project$Info$withInfo,
					function (rest) {
						return _user$project$Lang$exp_(
							A5(_user$project$Lang$ETypeAlias, _p96._0, _p96._2, t, rest, _user$project$Lang$space0));
					},
					_p96._1.start,
					t.end);
			}),
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F3(
									function (v0, v1, v2) {
										return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
									})),
							_user$project$LangParserUtils$spaces),
						_user$project$ParserUtils$trackInfo(
							_user$project$LangParserUtils$keywordWithSpace('type alias'))),
					_user$project$ElmParser$typePattern(_user$project$ElmParser$topLevelSpacePolicy)),
				_user$project$ElmParser$topLevelSpacePolicy),
			_elm_tools$parser$Parser$symbol('=')),
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
				_user$project$ElmParser$typ(_user$project$ElmParser$topLevelSpacePolicy)),
			_user$project$ElmParser$optionalTopLevelSemicolon)));
var _user$project$ElmParser$list = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'list',
		_elm_tools$parser$Parser$lazy(
			function (_p97) {
				return _user$project$LangParserUtils$mapExp_(
					_user$project$ElmParser$genericList(
						{
							item: _user$project$ElmParser$expression(_user$project$LangParserUtils$spaces),
							tailItem: _user$project$ElmParser$expression(_user$project$LangParserUtils$spaces),
							combiner: F3(
								function (wsBefore, members, wsBeforeEnd) {
									return A5(_user$project$Lang$EList, wsBefore, members, _user$project$Lang$space0, _elm_lang$core$Maybe$Nothing, wsBeforeEnd);
								}),
							combinerTail: F5(
								function (wsBefore, members, wsMiddle, tail, wsBeforeEnd) {
									return A5(
										_user$project$Lang$EList,
										wsBefore,
										members,
										wsMiddle,
										_elm_lang$core$Maybe$Just(tail),
										wsBeforeEnd);
								}),
							beforeSpacePolicy: sp
						}));
			}));
};
var _user$project$ElmParser$expression = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'expression',
		_elm_tools$parser$Parser$lazy(
			function (_p98) {
				return _user$project$BinaryOperatorParser$binaryOperator(
					{
						precedenceTable: _user$project$ElmParser$builtInPrecedenceTable,
						minimumPrecedence: 0,
						expression: _user$project$ElmParser$simpleExpressionWithPossibleArguments(sp),
						operator: _user$project$ElmParser$operator(sp),
						representation: function (_p99) {
							return _elm_lang$core$Tuple$second(
								function (_) {
									return _.val;
								}(_p99));
						},
						combine: F3(
							function (left, operator, right) {
								var _p100 = operator.val;
								var wsBefore = _p100._0;
								var identifier = _p100._1;
								var _p101 = _user$project$ElmParser$opFromIdentifier(identifier);
								if (_p101.ctor === 'Just') {
									var op = A3(_user$project$Info$withInfo, _p101._0, operator.start, operator.end);
									return A3(
										_user$project$Info$withInfo,
										_user$project$Lang$exp_(
											A4(
												_user$project$Lang$EOp,
												wsBefore,
												op,
												{
													ctor: '::',
													_0: left,
													_1: {
														ctor: '::',
														_0: right,
														_1: {ctor: '[]'}
													}
												},
												_user$project$Lang$space0)),
										left.start,
										right.end);
								} else {
									if (_elm_lang$core$Native_Utils.eq(identifier, '::')) {
										return A3(
											_user$project$Info$withInfo,
											_user$project$Lang$exp_(
												A5(
													_user$project$Lang$EList,
													_user$project$Lang$space0,
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: _user$project$Lang$space0, _1: left},
														_1: {ctor: '[]'}
													},
													wsBefore,
													_elm_lang$core$Maybe$Just(right),
													_user$project$Lang$space0)),
											left.start,
											right.end);
									} else {
										if (_elm_lang$core$Native_Utils.eq(identifier, '<|')) {
											return A2(
												_user$project$Lang$copyPrecedingWhitespace,
												left,
												A3(
													_user$project$Info$withInfo,
													_user$project$Lang$exp_(
														A5(
															_user$project$Lang$EApp,
															_user$project$Lang$space0,
															_user$project$Lang$removePrecedingWhitespace(left),
															{
																ctor: '::',
																_0: right,
																_1: {ctor: '[]'}
															},
															_user$project$Lang$LeftApp(wsBefore),
															_user$project$Lang$space0)),
													left.start,
													right.end));
										} else {
											if (_elm_lang$core$Native_Utils.eq(identifier, '|>')) {
												return A2(
													_user$project$Lang$copyPrecedingWhitespace,
													left,
													A3(
														_user$project$Info$withInfo,
														_user$project$Lang$exp_(
															A5(
																_user$project$Lang$EApp,
																_user$project$Lang$space0,
																right,
																{
																	ctor: '::',
																	_0: _user$project$Lang$removePrecedingWhitespace(left),
																	_1: {ctor: '[]'}
																},
																_user$project$Lang$RightApp(wsBefore),
																_user$project$Lang$space0)),
														left.start,
														right.end));
											} else {
												var opExp = A3(
													_user$project$Info$withInfo,
													_user$project$Lang$exp_(
														A2(_user$project$Lang$EVar, wsBefore, identifier)),
													operator.start,
													operator.end);
												return A2(
													_user$project$Lang$copyPrecedingWhitespace,
													opExp,
													A3(
														_user$project$Info$withInfo,
														_user$project$Lang$exp_(
															A5(
																_user$project$Lang$EApp,
																_user$project$Lang$space0,
																_user$project$Lang$removePrecedingWhitespace(opExp),
																{
																	ctor: '::',
																	_0: left,
																	_1: {
																		ctor: '::',
																		_0: right,
																		_1: {ctor: '[]'}
																	}
																},
																_user$project$Lang$SpaceApp,
																_user$project$Lang$space0)),
														left.start,
														right.end));
											}
										}
									}
								}
							})
					});
			}));
};
var _user$project$ElmParser$simpleExpressionWithPossibleArguments = function (sp) {
	return _elm_tools$parser$Parser$lazy(
		function (_p102) {
			return A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (untypedExp, mbType) {
								var _p103 = mbType;
								if (_p103.ctor === 'Nothing') {
									return untypedExp;
								} else {
									var _p104 = _p103._0._1;
									return A3(
										_user$project$Info$withInfo,
										_user$project$Lang$exp_(
											A5(_user$project$Lang$EColonType, _user$project$Lang$space0, untypedExp, _p103._0._0, _p104, _user$project$Lang$space0)),
										untypedExp.start,
										_p104.end);
								}
							})),
					_user$project$ElmParser$simpleUntypedExpressionWithPossibleArguments(sp)),
				_user$project$ParserUtils$optional(
					_user$project$ElmParser$spaceColonType(sp)));
		});
};
var _user$project$ElmParser$simpleUntypedExpressionWithPossibleArguments = function (sp) {
	var combine = F2(
		function (first, rest) {
			var last = A2(
				_elm_lang$core$Maybe$withDefault,
				first,
				_user$project$Utils$maybeLast(rest));
			var application = A5(
				_user$project$Lang$EApp,
				_user$project$Lang$ws(
					_user$project$Lang$precedingWhitespace(first)),
				_user$project$Lang$removePrecedingWhitespace(first),
				rest,
				_user$project$Lang$SpaceApp,
				_user$project$Lang$space0);
			var nonOpExp__ = function () {
				var _p105 = rest;
				if (_p105.ctor === '[]') {
					return first.val.e__;
				} else {
					return application;
				}
			}();
			var e_ = _user$project$Lang$exp_(
				function () {
					var _p106 = first.val.e__;
					if (_p106.ctor === 'EVar') {
						var _p107 = _user$project$ElmParser$opFromIdentifier(_p106._1);
						if (_p107.ctor === 'Just') {
							return A4(
								_user$project$Lang$EOp,
								_p106._0,
								A3(_user$project$Info$withInfo, _p107._0, first.start, first.end),
								rest,
								_user$project$Lang$space0);
						} else {
							return nonOpExp__;
						}
					} else {
						return nonOpExp__;
					}
				}());
			return A3(_user$project$Info$withInfo, e_, first.start, last.end);
		});
	return _elm_tools$parser$Parser$lazy(
		function (_p108) {
			return A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(combine),
					_user$project$ElmParser$simpleExpression(sp)),
				A2(
					_elm_tools$parser$Parser$repeat,
					_elm_tools$parser$Parser$zeroOrMore,
					_user$project$ElmParser$simpleExpression(sp)));
		});
};
var _user$project$ElmParser$simpleExpression = function (sp) {
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _user$project$ElmParser$constantExpression(sp),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$lazy(
					function (_p109) {
						return _user$project$ElmParser$multiLineInterpolatedString(sp);
					}),
				_1: {
					ctor: '::',
					_0: _user$project$ElmParser$baseValueExpression(sp),
					_1: {
						ctor: '::',
						_0: _elm_tools$parser$Parser$lazy(
							function (_p110) {
								return _user$project$ElmParser$function(sp);
							}),
						_1: {
							ctor: '::',
							_0: _elm_tools$parser$Parser$lazy(
								function (_p111) {
									return _user$project$ElmParser$list(sp);
								}),
							_1: {
								ctor: '::',
								_0: _elm_tools$parser$Parser$lazy(
									function (_p112) {
										return _user$project$ElmParser$conditional(sp);
									}),
								_1: {
									ctor: '::',
									_0: _elm_tools$parser$Parser$lazy(
										function (_p113) {
											return _user$project$ElmParser$caseExpression(sp);
										}),
									_1: {
										ctor: '::',
										_0: _elm_tools$parser$Parser$lazy(
											function (_p114) {
												return _user$project$ElmParser$letrecBinding(sp);
											}),
										_1: {
											ctor: '::',
											_0: _elm_tools$parser$Parser$lazy(
												function (_p115) {
													return _user$project$ElmParser$letBinding(sp);
												}),
											_1: {
												ctor: '::',
												_0: _elm_tools$parser$Parser$lazy(
													function (_p116) {
														return _user$project$ElmParser$lineComment(sp);
													}),
												_1: {
													ctor: '::',
													_0: _elm_tools$parser$Parser$lazy(
														function (_p117) {
															return _user$project$ElmParser$option(sp);
														}),
													_1: {
														ctor: '::',
														_0: _elm_tools$parser$Parser$lazy(
															function (_p118) {
																return _user$project$ElmParser$parens(sp);
															}),
														_1: {
															ctor: '::',
															_0: _elm_tools$parser$Parser$lazy(
																function (_p119) {
																	return _user$project$ElmParser$hole(sp);
																}),
															_1: {
																ctor: '::',
																_0: _user$project$ElmParser$variableOrUnaryOpExpression(sp),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$ElmParser$caseExpression = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'case expression',
		_elm_tools$parser$Parser$lazy(
			function (_p120) {
				var branch = A3(
					_user$project$LangParserUtils$paddedBefore,
					F2(
						function (wsBefore, _p121) {
							var _p122 = _p121;
							return A4(_user$project$Lang$Branch_, wsBefore, _p122._0, _p122._2, _p122._1);
						}),
					sp,
					_user$project$ParserUtils$trackInfo(
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|='],
											_elm_tools$parser$Parser$succeed(
												F3(
													function (v0, v1, v2) {
														return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
													})),
											_user$project$ElmParser$pattern(sp)),
										sp),
									_elm_tools$parser$Parser$symbol('->')),
								_user$project$ElmParser$expression(sp)),
							_elm_tools$parser$Parser$symbol(';'))));
				return _user$project$LangParserUtils$mapExp_(
					A3(
						_user$project$LangParserUtils$paddedBefore,
						F2(
							function (wsBefore, _p123) {
								var _p124 = _p123;
								return A4(_user$project$Lang$ECase, wsBefore, _p124._0, _p124._2, _p124._1);
							}),
						sp,
						_user$project$ParserUtils$trackInfo(
							A2(
								_elm_tools$parser$Parser$delayedCommit,
								_user$project$LangParserUtils$keywordWithSpace('case'),
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										A2(
											_elm_tools$parser$Parser_ops['|='],
											A2(
												_elm_tools$parser$Parser_ops['|='],
												_elm_tools$parser$Parser$succeed(
													F3(
														function (v0, v1, v2) {
															return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
														})),
												_user$project$ElmParser$expression(_user$project$LangParserUtils$spaces)),
											_user$project$LangParserUtils$spaces),
										_elm_tools$parser$Parser$keyword('of')),
									A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$oneOrMore, branch))))));
			}));
};
var _user$project$ElmParser$conditional = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'conditional',
		_elm_tools$parser$Parser$lazy(
			function (_p125) {
				return _user$project$LangParserUtils$mapExp_(
					A3(
						_user$project$LangParserUtils$paddedBefore,
						F2(
							function (wsBefore, _p126) {
								var _p127 = _p126;
								return A7(_user$project$Lang$EIf, wsBefore, _p127._0, _p127._1, _p127._2, _p127._3, _p127._4, _user$project$Lang$space0);
							}),
						sp,
						_user$project$ParserUtils$trackInfo(
							A2(
								_elm_tools$parser$Parser$delayedCommit,
								_user$project$LangParserUtils$keywordWithSpace('if'),
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										A2(
											_elm_tools$parser$Parser_ops['|='],
											A2(
												_elm_tools$parser$Parser_ops['|='],
												A2(
													_elm_tools$parser$Parser_ops['|.'],
													A2(
														_elm_tools$parser$Parser_ops['|='],
														A2(
															_elm_tools$parser$Parser_ops['|='],
															_elm_tools$parser$Parser$succeed(
																F5(
																	function (v0, v1, v2, v3, v4) {
																		return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
																	})),
															_user$project$ElmParser$expression(_user$project$LangParserUtils$spaces)),
														_user$project$LangParserUtils$spaces),
													_user$project$LangParserUtils$keywordWithSpace('then')),
												_user$project$ElmParser$expression(_user$project$LangParserUtils$spaces)),
											_user$project$LangParserUtils$spaces),
										_user$project$LangParserUtils$keywordWithSpace('else')),
									_user$project$ElmParser$expression(sp))))));
			}));
};
var _user$project$ElmParser$function = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'function',
		_elm_tools$parser$Parser$lazy(
			function (_p128) {
				return _user$project$LangParserUtils$mapExp_(
					A3(
						_user$project$LangParserUtils$paddedBefore,
						F2(
							function (wsBefore, _p129) {
								var _p130 = _p129;
								return A4(_user$project$Lang$EFun, wsBefore, _p130._0, _p130._1, _user$project$Lang$space0);
							}),
						sp,
						_user$project$ParserUtils$trackInfo(
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										A2(
											_elm_tools$parser$Parser_ops['|='],
											A2(
												_elm_tools$parser$Parser_ops['|.'],
												_elm_tools$parser$Parser$succeed(
													F2(
														function (v0, v1) {
															return {ctor: '_Tuple2', _0: v0, _1: v1};
														})),
												_elm_tools$parser$Parser$symbol('\\')),
											A2(
												_elm_tools$parser$Parser$repeat,
												_elm_tools$parser$Parser$oneOrMore,
												_user$project$ElmParser$pattern(_user$project$LangParserUtils$spaces))),
										_user$project$LangParserUtils$spaces),
									_elm_tools$parser$Parser$symbol('->')),
								_user$project$ElmParser$expression(sp)))));
			}));
};
var _user$project$ElmParser$hole = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'hole',
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: _user$project$ElmParser$holePBE(sp),
				_1: {
					ctor: '::',
					_0: _user$project$ElmParser$holeNamed(sp),
					_1: {
						ctor: '::',
						_0: _user$project$ElmParser$holeEmpty(sp),
						_1: {ctor: '[]'}
					}
				}
			}));
};
var _user$project$ElmParser$holePBE = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'PBE Hole',
		_elm_tools$parser$Parser$lazy(
			function (_p131) {
				var example = A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									_elm_tools$parser$Parser$succeed(
										F3(
											function (v0, v1, v2) {
												return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
											})),
									_user$project$LangParserUtils$spaces),
								_elm_tools$parser$Parser$int),
							_user$project$LangParserUtils$spaces),
						_elm_tools$parser$Parser$symbol('=>')),
					_user$project$ElmParser$expression(_user$project$LangParserUtils$spaces));
				var anotherWsCommaAndExample = A3(
					_elm_tools$parser$Parser$delayedCommitMap,
					F2(
						function (wsBeforeComma, _p132) {
							var _p133 = _p132;
							return {ctor: '_Tuple4', _0: wsBeforeComma, _1: _p133._0, _2: _p133._1, _3: _p133._2};
						}),
					_user$project$LangParserUtils$spaces,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
							_elm_tools$parser$Parser$symbol(',')),
						example));
				return _user$project$LangParserUtils$mapExp_(
					A3(
						_user$project$LangParserUtils$paddedBefore,
						F2(
							function (wsBefore, _p134) {
								var _p135 = _p134;
								return A2(
									_user$project$Lang$EHole,
									wsBefore,
									A2(
										_user$project$Lang$HolePBE,
										{
											ctor: '::',
											_0: {ctor: '_Tuple4', _0: _user$project$Lang$space0, _1: _p135._0._0, _2: _p135._0._1, _3: _p135._0._2},
											_1: _p135._1
										},
										_p135._2));
							}),
						sp,
						_user$project$ParserUtils$trackInfo(
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|='],
											A2(
												_elm_tools$parser$Parser_ops['|.'],
												_elm_tools$parser$Parser$succeed(
													F3(
														function (v0, v1, v2) {
															return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
														})),
												_elm_tools$parser$Parser$symbol('??(')),
											example),
										A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, anotherWsCommaAndExample)),
									_user$project$LangParserUtils$spaces),
								_elm_tools$parser$Parser$symbol(')')))));
			}));
};
var _user$project$ElmParser$letBinding = function (sp) {
	return _elm_tools$parser$Parser$lazy(
		function (_p136) {
			return A3(_user$project$ElmParser$genericLetBinding, sp, 'let', false);
		});
};
var _user$project$ElmParser$genericLetBinding = F3(
	function (sp, letkeyword, isRec) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			A2(_elm_lang$core$Basics_ops['++'], letkeyword, ' binding'),
			_elm_tools$parser$Parser$lazy(
				function (_p137) {
					return _user$project$LangParserUtils$mapExp_(
						A3(
							_user$project$LangParserUtils$paddedBefore,
							F2(
								function (wsBefore, _p138) {
									var _p139 = _p138;
									var _p141 = _p139._1;
									var _p140 = _p139._3;
									var binding = _elm_lang$core$List$isEmpty(_p141) ? _p140 : A3(
										_user$project$Info$withInfo,
										_user$project$Lang$exp_(
											A4(_user$project$Lang$EFun, _user$project$Lang$space0, _p141, _p140, _user$project$Lang$space0)),
										_p140.start,
										_p140.end);
									return A9(_user$project$Lang$ELet, wsBefore, _user$project$Lang$Let, isRec, _p139._0, _p139._2, binding, _p139._4, _p139._5, _user$project$Lang$space0);
								}),
							sp,
							_user$project$ParserUtils$trackInfo(
								A2(
									_elm_tools$parser$Parser$delayedCommit,
									_user$project$LangParserUtils$keywordWithSpace(letkeyword),
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|.'],
											A2(
												_elm_tools$parser$Parser_ops['|='],
												A2(
													_elm_tools$parser$Parser_ops['|='],
													A2(
														_elm_tools$parser$Parser_ops['|.'],
														A2(
															_elm_tools$parser$Parser_ops['|='],
															A2(
																_elm_tools$parser$Parser_ops['|='],
																A2(
																	_elm_tools$parser$Parser_ops['|='],
																	_elm_tools$parser$Parser$succeed(
																		F6(
																			function (v0, v1, v2, v3, v4, v5) {
																				return {ctor: '_Tuple6', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4, _5: v5};
																			})),
																	_user$project$ElmParser$pattern(_user$project$LangParserUtils$spaces)),
																A2(
																	_elm_tools$parser$Parser$repeat,
																	_elm_tools$parser$Parser$zeroOrMore,
																	_user$project$ElmParser$pattern(_user$project$LangParserUtils$spaces))),
															_user$project$LangParserUtils$spaces),
														_elm_tools$parser$Parser$symbol('=')),
													_user$project$ElmParser$expression(_user$project$LangParserUtils$spaces)),
												_user$project$LangParserUtils$spaces),
											_user$project$LangParserUtils$keywordWithSpace('in')),
										_user$project$ElmParser$expression(sp))))));
				}));
	});
var _user$project$ElmParser$letrecBinding = function (sp) {
	return _elm_tools$parser$Parser$lazy(
		function (_p142) {
			return A3(_user$project$ElmParser$genericLetBinding, sp, 'letrec', true);
		});
};
var _user$project$ElmParser$lineComment = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'line comment',
		_user$project$LangParserUtils$mapExp_(
			A3(
				_user$project$LangParserUtils$paddedBefore,
				F2(
					function (wsBefore, _p143) {
						var _p144 = _p143;
						return A3(_user$project$Lang$EComment, wsBefore, _p144._0, _p144._1);
					}),
				sp,
				_user$project$ParserUtils$trackInfo(
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									_elm_tools$parser$Parser$succeed(
										F2(
											function (v0, v1) {
												return {ctor: '_Tuple2', _0: v0, _1: v1};
											})),
									_elm_tools$parser$Parser$symbol('--')),
								A2(
									_elm_tools$parser$Parser$keep,
									_elm_tools$parser$Parser$zeroOrMore,
									function (c) {
										return !_elm_lang$core$Native_Utils.eq(
											c,
											_elm_lang$core$Native_Utils.chr('\n'));
									})),
							_elm_tools$parser$Parser$symbol('\n')),
						_user$project$ElmParser$expression(sp))))));
};
var _user$project$ElmParser$multiLineInterpolatedString = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'multi-line interpolated string',
		_user$project$LangParserUtils$mapExp_(
			_user$project$ParserUtils$trackInfo(
				A3(
					_elm_tools$parser$Parser$delayedCommitMap,
					F2(
						function (wsBefore, e) {
							return A4(_user$project$Lang$EParens, wsBefore, e, _user$project$Lang$LongStringSyntax, _user$project$Lang$space0);
						}),
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
							sp),
						_elm_tools$parser$Parser$symbol('\"\"\"')),
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
							_user$project$ElmParser$multilineContentParser),
						_elm_tools$parser$Parser$symbol('\"\"\"'))))));
};
var _user$project$ElmParser$multilineContentParser = A2(
	_elm_tools$parser$Parser$inContext,
	'multi-line string content',
	A2(
		_elm_tools$parser$Parser$andThen,
		function (exp) {
			return _user$project$ElmParser$multilineContentParserHelp(
				{
					ctor: '::',
					_0: exp,
					_1: {ctor: '[]'}
				});
		},
		_user$project$LangParserUtils$mapExp_(
			_user$project$ParserUtils$trackInfo(
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						function (str) {
							return A2(
								_user$project$Lang$EBase,
								_user$project$Lang$space0,
								A2(_user$project$Lang$EString, '\"', str));
						}),
					_user$project$ParserUtils$keepUntilRegex(_user$project$ElmParser$multilineParseUntilRegex))))));
var _user$project$ElmParser$multilineContentParserHelp = function (prevExps) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'multi-line string end or escape',
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: _user$project$ParserUtils$try(
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(
								_user$project$ElmParser$multilineConcatExp(
									_elm_lang$core$List$reverse(prevExps))),
							_user$project$ParserUtils$lookAhead(
								_elm_tools$parser$Parser$symbol('\"\"\"'))),
						_user$project$ParserUtils$getPos)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$andThen,
						function (_p145) {
							var _p146 = _p145;
							var _p152 = _p146._1;
							var _p151 = _p146._0;
							var _p147 = prevExps;
							if (_p147.ctor === '::') {
								var _p149 = _p147._0;
								var _p148 = {ctor: '_Tuple3', _0: _p149.val.e__, _1: _p151.val.e__, _2: _p152.val.e__};
								if (((((((_p148.ctor === '_Tuple3') && (_p148._0.ctor === 'EBase')) && (_p148._0._1.ctor === 'EString')) && (_p148._1.ctor === 'EBase')) && (_p148._1._1.ctor === 'EString')) && (_p148._2.ctor === 'EBase')) && (_p148._2._1.ctor === 'EString')) {
									return _user$project$ElmParser$multilineContentParserHelp(
										{
											ctor: '::',
											_0: A3(
												_user$project$Info$withInfo,
												_user$project$Lang$exp_(
													A2(
														_user$project$Lang$EBase,
														_p148._0._0,
														A2(
															_user$project$Lang$EString,
															_p148._0._1._0,
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p148._0._1._1,
																A2(_elm_lang$core$Basics_ops['++'], _p148._1._1._1, _p148._2._1._1))))),
												_p149.start,
												_p152.end),
											_1: prevExps
										});
								} else {
									return _user$project$ElmParser$multilineContentParserHelp(
										{
											ctor: '::',
											_0: _p152,
											_1: {ctor: '::', _0: _p151, _1: prevExps}
										});
								}
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'ElmParser',
									{
										start: {line: 447, column: 9},
										end: {line: 456, column: 118}
									},
									_p147)('Internal error: There should be always at least one expression in a longstring literal.');
							}
						},
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								_elm_tools$parser$Parser$succeed(
									F2(
										function (x, y) {
											return {ctor: '_Tuple2', _0: x, _1: y};
										})),
								A2(
									_elm_tools$parser$Parser$inContext,
									'multi-line string @expression',
									_elm_tools$parser$Parser$oneOf(
										{
											ctor: '::',
											_0: _user$project$LangParserUtils$mapExp_(
												_user$project$ParserUtils$trackInfo(
													A2(
														_elm_tools$parser$Parser$map,
														function (_p153) {
															return A2(
																_user$project$Lang$EBase,
																_user$project$Lang$space0,
																A2(_user$project$Lang$EString, '\"', '@'));
														},
														_elm_tools$parser$Parser$symbol('@@')))),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_tools$parser$Parser_ops['|='],
													A2(
														_elm_tools$parser$Parser_ops['|.'],
														_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
														_elm_tools$parser$Parser$symbol('@')),
													_elm_tools$parser$Parser$lazy(
														function (_p154) {
															return _user$project$ElmParser$multilineEscapedElmExpression;
														})),
												_1: {ctor: '[]'}
											}
										}))),
							_user$project$LangParserUtils$mapExp_(
								_user$project$ParserUtils$trackInfo(
									A2(
										_elm_tools$parser$Parser_ops['|='],
										_elm_tools$parser$Parser$succeed(
											function (str) {
												return A2(
													_user$project$Lang$EBase,
													_user$project$Lang$space0,
													A2(_user$project$Lang$EString, '\"', str));
											}),
										_user$project$ParserUtils$keepUntilRegex(_user$project$ElmParser$multilineParseUntilRegex)))))),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$ElmParser$multilineEscapedElmExpression = A2(
	_elm_tools$parser$Parser$inContext,
	'expression in multi-line string',
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _user$project$ParserUtils$try(
				_user$project$ParserUtils$trackInfo(
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							function (v) {
								return _user$project$Lang$exp_(
									A4(
										_user$project$Lang$EOp,
										_user$project$Lang$space0,
										A3(_user$project$Info$withInfo, _user$project$Lang$OptNumToString, v.start, v.start),
										{
											ctor: '::',
											_0: v,
											_1: {ctor: '[]'}
										},
										_user$project$Lang$space0));
							}),
						_user$project$ElmParser$variableOrUnaryOpExpression(_user$project$ElmParser$spacesWithoutNewline)))),
			_1: {
				ctor: '::',
				_0: _user$project$ParserUtils$try(
					_elm_tools$parser$Parser$lazy(
						function (_p155) {
							return _user$project$ElmParser$multilineGenericLetBinding;
						})),
				_1: {
					ctor: '::',
					_0: _elm_tools$parser$Parser$lazy(
						function (_p156) {
							return _user$project$LangParserUtils$mapExp_(
								_user$project$ParserUtils$trackInfo(
									A2(
										_elm_tools$parser$Parser_ops['|='],
										_elm_tools$parser$Parser$succeed(
											function (exp) {
												return A4(
													_user$project$Lang$EOp,
													_user$project$Lang$space0,
													A3(_user$project$Info$withInfo, _user$project$Lang$OptNumToString, exp.start, exp.start),
													{
														ctor: '::',
														_0: A3(
															_user$project$Info$withInfo,
															_user$project$Lang$exp_(
																A4(_user$project$Lang$EParens, _user$project$Lang$space0, exp, _user$project$Lang$ElmSyntax, _user$project$Lang$space0)),
															exp.start,
															exp.end),
														_1: {ctor: '[]'}
													},
													_user$project$Lang$space0);
											}),
										_user$project$ElmParser$parens(_user$project$ElmParser$spacesWithoutNewline))));
						}),
					_1: {ctor: '[]'}
				}
			}
		}));
var _user$project$ElmParser$multilineGenericLetBinding = A2(
	_elm_tools$parser$Parser$inContext,
	'let binding within a long string',
	_elm_tools$parser$Parser$lazy(
		function (_p157) {
			return A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|='],
											A2(
												_elm_tools$parser$Parser_ops['|='],
												_elm_tools$parser$Parser$succeed(
													F6(
														function (letdefWithInfo, isRec, pattern, parameters, wsBeforeEq, binding_) {
															var binding = _elm_lang$core$List$isEmpty(parameters) ? binding_ : A3(
																_user$project$Info$withInfo,
																_user$project$Lang$exp_(
																	A4(_user$project$Lang$EFun, _user$project$Lang$space0, parameters, binding_, _user$project$Lang$space0)),
																binding_.start,
																binding_.end);
															return A3(
																_user$project$Info$withInfo,
																_user$project$Lang$exp_(
																	A9(
																		_user$project$Lang$ELet,
																		_user$project$Lang$space0,
																		_user$project$Lang$Let,
																		function () {
																			var _p158 = isRec;
																			if (_p158.ctor === 'Just') {
																				return true;
																			} else {
																				return false;
																			}
																		}(),
																		pattern,
																		wsBeforeEq,
																		binding,
																		_user$project$Lang$space0,
																		_user$project$Lang$withDummyExpInfo(
																			A2(_user$project$Lang$EHole, _user$project$Lang$space0, _user$project$Lang$HoleEmpty)),
																		_user$project$Lang$space0)),
																letdefWithInfo.start,
																binding.end);
														})),
												_user$project$ParserUtils$trackInfo(
													_elm_tools$parser$Parser$source(
														_elm_tools$parser$Parser$keyword('let')))),
											_user$project$ParserUtils$optional(
												_elm_tools$parser$Parser$keyword('rec'))),
										_user$project$ElmParser$pattern(_user$project$ElmParser$spacesWithoutNewline)),
									A2(
										_elm_tools$parser$Parser$repeat,
										_elm_tools$parser$Parser$zeroOrMore,
										_user$project$ElmParser$pattern(_user$project$ElmParser$spacesWithoutNewline))),
								_user$project$ElmParser$spacesWithoutNewline),
							_elm_tools$parser$Parser$symbol('=')),
						_user$project$ElmParser$expression(_user$project$ElmParser$spacesWithoutNewline)),
					A2(
						_elm_tools$parser$Parser$ignore,
						_elm_tools$parser$Parser$zeroOrMore,
						function (c) {
							return _elm_lang$core$Native_Utils.eq(
								c,
								_elm_lang$core$Native_Utils.chr(' ')) || _elm_lang$core$Native_Utils.eq(
								c,
								_elm_lang$core$Native_Utils.chr('\t'));
						})),
				_elm_tools$parser$Parser$symbol('\n'));
		}));
var _user$project$ElmParser$parens = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'parentheses',
		_user$project$LangParserUtils$mapExp_(
			_elm_tools$parser$Parser$lazy(
				function (_p159) {
					return A3(
						_user$project$LangParserUtils$paddedBefore,
						F2(
							function (wsBefore, _p160) {
								var _p161 = _p160;
								return A4(_user$project$Lang$EParens, wsBefore, _p161._0, _user$project$Lang$Parens, _p161._1);
							}),
						sp,
						_user$project$ParserUtils$trackInfo(
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|.'],
											_elm_tools$parser$Parser$succeed(
												F2(
													function (v0, v1) {
														return {ctor: '_Tuple2', _0: v0, _1: v1};
													})),
											_elm_tools$parser$Parser$symbol('(')),
										_user$project$ElmParser$expression(_user$project$LangParserUtils$spaces)),
									_user$project$LangParserUtils$spaces),
								_elm_tools$parser$Parser$symbol(')'))));
				})));
};
var _user$project$ElmParser$option = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'option',
		_user$project$LangParserUtils$mapExp_(
			_elm_tools$parser$Parser$lazy(
				function (_p162) {
					return A3(
						_elm_tools$parser$Parser$delayedCommitMap,
						F2(
							function (wsBefore, _p163) {
								var _p164 = _p163;
								var _p165 = _p164._3;
								return A3(
									_user$project$Info$withInfo,
									A5(_user$project$Lang$EOption, wsBefore, _p164._1, _p164._2, _p165, _p164._4),
									_p164._0.start,
									_p165.end);
							}),
						sp,
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|.'],
											A2(
												_elm_tools$parser$Parser_ops['|='],
												A2(
													_elm_tools$parser$Parser_ops['|.'],
													A2(
														_elm_tools$parser$Parser_ops['|='],
														_elm_tools$parser$Parser$succeed(
															F5(
																function (v0, v1, v2, v3, v4) {
																	return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
																})),
														_user$project$ParserUtils$trackInfo(
															_elm_tools$parser$Parser$symbol('#'))),
													_user$project$LangParserUtils$spaces),
												_user$project$ParserUtils$trackInfo(
													A2(
														_elm_tools$parser$Parser$keep,
														_elm_tools$parser$Parser$zeroOrMore,
														function (c) {
															return (!_elm_lang$core$Native_Utils.eq(
																c,
																_elm_lang$core$Native_Utils.chr('\n'))) && ((!_elm_lang$core$Native_Utils.eq(
																c,
																_elm_lang$core$Native_Utils.chr(' '))) && (!_elm_lang$core$Native_Utils.eq(
																c,
																_elm_lang$core$Native_Utils.chr(':'))));
														}))),
											_elm_tools$parser$Parser$symbol(':')),
										sp),
									_user$project$ParserUtils$trackInfo(
										A2(
											_elm_tools$parser$Parser$keep,
											_elm_tools$parser$Parser$zeroOrMore,
											function (c) {
												return !_elm_lang$core$Native_Utils.eq(
													c,
													_elm_lang$core$Native_Utils.chr('\n'));
											}))),
								_elm_tools$parser$Parser$symbol('\n')),
							_user$project$ElmParser$expression(sp)));
				})));
};
var _user$project$ElmParser$colonType = function (sp) {
	return A2(
		_elm_tools$parser$Parser$inContext,
		'colon type',
		_user$project$LangParserUtils$mapExp_(
			_elm_tools$parser$Parser$lazy(
				function (_p166) {
					return A3(
						_user$project$ElmParser$parenBlock,
						F3(
							function (wsBefore, _p167, wsEnd) {
								var _p168 = _p167;
								return A5(_user$project$Lang$EColonType, wsBefore, _p168._0, _p168._1, _p168._2, wsEnd);
							}),
						sp,
						A3(
							_elm_tools$parser$Parser$delayedCommitMap,
							F2(
								function (_p169, t) {
									var _p170 = _p169;
									return {ctor: '_Tuple3', _0: _p170._0, _1: _p170._1, _2: t};
								}),
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										_elm_tools$parser$Parser$succeed(
											F2(
												function (v0, v1) {
													return {ctor: '_Tuple2', _0: v0, _1: v1};
												})),
										_user$project$ElmParser$expression(sp)),
									sp),
								_elm_tools$parser$Parser$symbol(':')),
							_user$project$ElmParser$typ(sp)));
				})));
};
var _user$project$ElmParser$topLevelDef = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level def binding',
	A3(
		_elm_tools$parser$Parser$delayedCommitMap,
		F2(
			function (_p171, binding_) {
				var _p172 = _p171;
				var _p174 = _p172._1;
				var _p173 = _p172._2;
				var binding = _elm_lang$core$List$isEmpty(_p173) ? binding_ : A3(
					_user$project$Info$withInfo,
					_user$project$Lang$exp_(
						A4(_user$project$Lang$EFun, _user$project$Lang$space0, _p173, binding_, _user$project$Lang$space0)),
					binding_.start,
					binding_.end);
				var isRec = A2(_user$project$ElmParser$isTopLevelDefImplicitlyRec, _p174, binding);
				return A3(
					_user$project$Info$withInfo,
					function (rest) {
						return _user$project$Lang$exp_(
							A9(_user$project$Lang$ELet, _p172._0, _user$project$Lang$Def, isRec, _p174, _p172._3, binding, _user$project$Lang$space0, rest, _user$project$Lang$space0));
					},
					_p174.start,
					binding.end);
			}),
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F4(
									function (v0, v1, v2, v3) {
										return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
									})),
							_user$project$LangParserUtils$spaces),
						_user$project$ElmParser$pattern(_user$project$ElmParser$topLevelSpacePolicy)),
					A2(
						_elm_tools$parser$Parser$repeat,
						_elm_tools$parser$Parser$zeroOrMore,
						_user$project$ElmParser$pattern(_user$project$ElmParser$topLevelSpacePolicy))),
				_user$project$ElmParser$topLevelSpacePolicy),
			_elm_tools$parser$Parser$symbol('=')),
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
				_user$project$ElmParser$expression(_user$project$ElmParser$topLevelSpacePolicy)),
			_user$project$ElmParser$optionalTopLevelSemicolon)));
var _user$project$ElmParser$topLevelExpression = A2(
	_elm_tools$parser$Parser$inContext,
	'top-level expression',
	_elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _user$project$ElmParser$topLevelDef,
			_1: {
				ctor: '::',
				_0: _user$project$ElmParser$topLevelTypeDeclaration,
				_1: {
					ctor: '::',
					_0: _user$project$ElmParser$topLevelTypeAlias,
					_1: {
						ctor: '::',
						_0: _user$project$ElmParser$topLevelComment,
						_1: {
							ctor: '::',
							_0: _user$project$ElmParser$topLevelOption,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}));
var _user$project$ElmParser$allTopLevelExpressions = A2(_elm_tools$parser$Parser$repeat, _elm_tools$parser$Parser$zeroOrMore, _user$project$ElmParser$topLevelExpression);
var _user$project$ElmParser$mainExpression = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: _user$project$ElmParser$expression(_user$project$LangParserUtils$spaces),
		_1: {
			ctor: '::',
			_0: _user$project$ElmParser$implicitMain,
			_1: {ctor: '[]'}
		}
	});
var _user$project$ElmParser$program = A2(
	_elm_tools$parser$Parser_ops['|.'],
	A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(_user$project$TopLevelExp$fuseTopLevelExps),
				_user$project$ElmParser$allTopLevelExpressions),
			_user$project$ElmParser$mainExpression),
		_user$project$LangParserUtils$spaces),
	_elm_tools$parser$Parser$end);
var _user$project$ElmParser$parse = _elm_tools$parser$Parser$run(
	A2(_elm_tools$parser$Parser$map, _user$project$FastParser$freshen, _user$project$ElmParser$program));

var _user$project$ElmUnparser$getPatPrecedence = function (pat) {
	var _p0 = pat.val.p__;
	_v0_2:
	do {
		switch (_p0.ctor) {
			case 'PList':
				if (_p0._3.ctor === 'Just') {
					var _p1 = A2(_user$project$BinaryOperatorParser$getOperatorInfo, '::', _user$project$ElmParser$builtInPatternPrecedenceTable);
					if (_p1.ctor === 'Nothing') {
						return 10;
					} else {
						return _p1._0._1;
					}
				} else {
					break _v0_2;
				}
			case 'PAs':
				var _p2 = A2(_user$project$BinaryOperatorParser$getOperatorInfo, 'as', _user$project$ElmParser$builtInPatternPrecedenceTable);
				if (_p2.ctor === 'Nothing') {
					return 10;
				} else {
					return _p2._0._1;
				}
			default:
				break _v0_2;
		}
	} while(false);
	return 10;
};
var _user$project$ElmUnparser$multilineRegexEscape = _elm_lang$core$Regex$regex('@');
var _user$project$ElmUnparser$wrapWithTightParens = function (unparsed) {
	var trimmed = _elm_lang$core$String$trimLeft(unparsed);
	var lengthDiff = _elm_lang$core$String$length(unparsed) - _elm_lang$core$String$length(trimmed);
	var ws = A2(_elm_lang$core$String$left, lengthDiff, unparsed);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		ws,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(_elm_lang$core$Basics_ops['++'], trimmed, ')')));
};
var _user$project$ElmUnparser$wrapPatternWithParensIfLessPrecedence = F3(
	function (outsidePat, insidePat, unparsedInsidePat) {
		return (_elm_lang$core$Native_Utils.cmp(
			_user$project$ElmUnparser$getPatPrecedence(insidePat),
			_user$project$ElmUnparser$getPatPrecedence(outsidePat)) < 0) ? _user$project$ElmUnparser$wrapWithTightParens(unparsedInsidePat) : unparsedInsidePat;
	});
var _user$project$ElmUnparser$wrapPatternWithParensIfLessEqPrecedence = F3(
	function (outsidePat, insidePat, unparsedInsidePat) {
		return (_elm_lang$core$Native_Utils.cmp(
			_user$project$ElmUnparser$getPatPrecedence(insidePat),
			_user$project$ElmUnparser$getPatPrecedence(outsidePat)) < 1) ? _user$project$ElmUnparser$wrapWithTightParens(unparsedInsidePat) : unparsedInsidePat;
	});
var _user$project$ElmUnparser$unparseOp = function (op) {
	var _p3 = op.val;
	switch (_p3.ctor) {
		case 'Pi':
			return 'π';
		case 'DictEmpty':
			return 'empty';
		case 'Cos':
			return 'cos';
		case 'Sin':
			return 'sin';
		case 'ArcCos':
			return 'arccos';
		case 'ArcSin':
			return 'arcsin';
		case 'Abs':
			return 'abs';
		case 'Floor':
			return 'floor';
		case 'Ceil':
			return 'ceiling';
		case 'Round':
			return 'round';
		case 'ToStr':
			return 'toString';
		case 'Sqrt':
			return 'sqrt';
		case 'Ln':
			return 'ln';
		case 'Explode':
			return 'explode';
		case 'Plus':
			return '+';
		case 'Minus':
			return '-';
		case 'Mult':
			return '*';
		case 'Div':
			return '/';
		case 'Lt':
			return '<';
		case 'Eq':
			return '==';
		case 'Mod':
			return 'mod';
		case 'Pow':
			return 'pow';
		case 'ArcTan2':
			return 'arctan2';
		case 'DictInsert':
			return 'insert';
		case 'DictGet':
			return 'get';
		case 'DictRemove':
			return 'remove';
		case 'DebugLog':
			return 'debug';
		case 'NoWidgets':
			return 'noWidgets';
		default:
			return 'optNumToString';
	}
};
var _user$project$ElmUnparser$getExpPrecedence = function (exp) {
	var _p4 = exp.val.e__;
	_v4_5:
	do {
		switch (_p4.ctor) {
			case 'EList':
				if (((_p4._1.ctor === '::') && (_p4._1._1.ctor === '[]')) && (_p4._3.ctor === 'Just')) {
					return 5;
				} else {
					break _v4_5;
				}
			case 'EApp':
				switch (_p4._3.ctor) {
					case 'LeftApp':
						return 0;
					case 'RightApp':
						return 0;
					default:
						break _v4_5;
				}
			case 'EColonType':
				return -1;
			case 'EOp':
				var _p5 = A2(
					_user$project$BinaryOperatorParser$getOperatorInfo,
					_user$project$ElmUnparser$unparseOp(_p4._1),
					_user$project$ElmParser$builtInPrecedenceTable);
				if (_p5.ctor === 'Nothing') {
					return 10;
				} else {
					return _p5._0._1;
				}
			default:
				break _v4_5;
		}
	} while(false);
	return 10;
};
var _user$project$ElmUnparser$wrapWithParensIfLessPrecedence = F3(
	function (outsideExp, insideExp, unparsedInsideExpr) {
		return (_elm_lang$core$Native_Utils.cmp(
			_user$project$ElmUnparser$getExpPrecedence(insideExp),
			_user$project$ElmUnparser$getExpPrecedence(outsideExp)) < 0) ? _user$project$ElmUnparser$wrapWithTightParens(unparsedInsideExpr) : unparsedInsideExpr;
	});
var _user$project$ElmUnparser$wrapWithParensIfLessEqPrecedence = F3(
	function (outsideExp, insideExp, unparsedInsideExpr) {
		return (_elm_lang$core$Native_Utils.cmp(
			_user$project$ElmUnparser$getExpPrecedence(insideExp),
			_user$project$ElmUnparser$getExpPrecedence(outsideExp)) < 1) ? _user$project$ElmUnparser$wrapWithTightParens(unparsedInsideExpr) : unparsedInsideExpr;
	});
var _user$project$ElmUnparser$unparseType = F2(
	function (shouldShowRoles, tipe) {
		var recurse = _user$project$ElmUnparser$unparseType(shouldShowRoles);
		var addRoles = function (unparsed) {
			return (shouldShowRoles && (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$Set$size(tipe.val.roles),
				0) > 0)) ? A2(
				_elm_lang$core$Basics_ops['++'],
				' (',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Utils$squish(unparsed),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' : ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$String$join,
								', ',
								_elm_lang$core$Set$toList(tipe.val.roles)),
							')')))) : unparsed;
		};
		return addRoles(
			function () {
				var _p6 = tipe.val.t__;
				switch (_p6.ctor) {
					case 'TNum':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Num');
					case 'TBool':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bool');
					case 'TString':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'String');
					case 'TNull':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Null');
					case 'TList':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(List',
								A2(
									_elm_lang$core$Basics_ops['++'],
									recurse(_p6._1),
									A2(_elm_lang$core$Basics_ops['++'], _p6._2.val, ')'))));
					case 'TDict':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(Dict',
								A2(
									_elm_lang$core$Basics_ops['++'],
									recurse(_p6._1),
									A2(
										_elm_lang$core$Basics_ops['++'],
										recurse(_p6._2),
										A2(_elm_lang$core$Basics_ops['++'], _p6._3.val, ')')))));
					case 'TTuple':
						var _p10 = _p6._4;
						var _p9 = _p6._0;
						var _p8 = _p6._1;
						var _p7 = _p6._3;
						if (_p7.ctor === 'Just') {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p9.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'[',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$String$concat(
											A2(_elm_lang$core$List$map, recurse, _p8)),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p6._2.val,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'|',
												A2(
													_elm_lang$core$Basics_ops['++'],
													recurse(_p7._0),
													A2(_elm_lang$core$Basics_ops['++'], _p10.val, ']')))))));
						} else {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p9.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'[',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$String$concat(
											A2(_elm_lang$core$List$map, recurse, _p8)),
										A2(_elm_lang$core$Basics_ops['++'], _p10.val, ']'))));
						}
					case 'TArrow':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(->',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$String$concat(
										A2(_elm_lang$core$List$map, recurse, _p6._1)),
									A2(_elm_lang$core$Basics_ops['++'], _p6._2.val, ')'))));
					case 'TUnion':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(union',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$String$concat(
										A2(_elm_lang$core$List$map, recurse, _p6._1)),
									A2(_elm_lang$core$Basics_ops['++'], _p6._2.val, ')'))));
					case 'TNamed':
						switch (_p6._1) {
							case 'Num':
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bad_NUM');
							case 'Bool':
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bad_BOOL');
							case 'String':
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bad_STRING');
							case 'Null':
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, 'Bad_NULL');
							default:
								return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, _p6._1);
						}
					case 'TVar':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, _p6._1);
					case 'TWildcard':
						return A2(_elm_lang$core$Basics_ops['++'], _p6._0.val, '_');
					default:
						var strVar = function (_p11) {
							var _p12 = _p11;
							return A2(_elm_lang$core$Basics_ops['++'], _p12._0.val, _p12._1);
						};
						var sVars = function () {
							var _p13 = _p6._1;
							if (_p13.ctor === 'One') {
								return strVar(_p13._0);
							} else {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_p13._0.val,
									_user$project$Utils$parens(
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$String$concat(
												A2(_elm_lang$core$List$map, strVar, _p13._1)),
											_p13._2.val)));
							}
						}();
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p6._0.val,
							_user$project$Utils$parens(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'forall',
									A2(
										_elm_lang$core$Basics_ops['++'],
										sVars,
										A2(
											_elm_lang$core$Basics_ops['++'],
											recurse(_p6._2),
											_p6._3.val)))));
				}
			}());
	});
var _user$project$ElmUnparser$unparseBaseValue = function (ebv) {
	var _p14 = ebv;
	switch (_p14.ctor) {
		case 'EBool':
			return _p14._0 ? 'True' : 'False';
		case 'EString':
			var _p17 = _p14._0;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p17,
				A2(
					_elm_lang$core$Basics_ops['++'],
					A4(
						_elm_lang$core$Regex$replace,
						_elm_lang$core$Regex$All,
						_elm_lang$core$Regex$regex(
							A2(_elm_lang$core$Basics_ops['++'], '\\\\|', _p17)),
						function (_p15) {
							var _p16 = _p15;
							return _elm_lang$core$Native_Utils.eq(_p16.match, '\\') ? '\\\\' : A2(_elm_lang$core$Basics_ops['++'], '\\', _p17);
						},
						_p14._1),
					_p17));
		default:
			return 'null';
	}
};
var _user$project$ElmUnparser$unparsePattern = function (p) {
	unparsePattern:
	while (true) {
		var _p18 = p.val.p__;
		switch (_p18.ctor) {
			case 'PVar':
				return A2(_elm_lang$core$Basics_ops['++'], _p18._0.val, _p18._1);
			case 'PConst':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p18._0.val,
					_elm_lang$core$Basics$toString(_p18._1));
			case 'PBase':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p18._0.val,
					_user$project$ElmUnparser$unparseBaseValue(_p18._1));
			case 'PWildcard':
				return A2(_elm_lang$core$Basics_ops['++'], _p18._0.val, '_');
			case 'PParens':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p18._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$ElmUnparser$unparsePattern(_p18._1),
							A2(_elm_lang$core$Basics_ops['++'], _p18._2.val, ')'))));
			case 'PList':
				if (_p18._3.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p18._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$String$join,
									',',
									A2(_elm_lang$core$List$map, _user$project$ElmUnparser$unparsePattern, _p18._1)),
								A2(_elm_lang$core$Basics_ops['++'], _p18._4.val, ']'))));
				} else {
					if (_p18._1.ctor === '::') {
						if (_p18._1._1.ctor === '[]') {
							var _p20 = _p18._3._0;
							var _p19 = _p18._1._0;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p18._0.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									A3(
										_user$project$ElmUnparser$wrapPatternWithParensIfLessPrecedence,
										p,
										_p19,
										_user$project$ElmUnparser$unparsePattern(_p19)),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p18._2.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'::',
											A2(
												_elm_lang$core$Basics_ops['++'],
												A3(
													_user$project$ElmUnparser$wrapPatternWithParensIfLessPrecedence,
													p,
													_p20,
													_user$project$ElmUnparser$unparsePattern(_p20)),
												_p18._4.val)))));
						} else {
							var _p23 = _p18._2;
							var _p22 = _p18._4;
							var _p21 = _p18._0;
							var _v13 = A2(
								_user$project$Lang$replaceP__,
								p,
								A5(
									_user$project$Lang$PList,
									_p21,
									{
										ctor: '::',
										_0: _p18._1._0,
										_1: {ctor: '[]'}
									},
									_p23,
									_elm_lang$core$Maybe$Just(
										A2(
											_user$project$Lang$replaceP__,
											p,
											A5(
												_user$project$Lang$PList,
												_p21,
												_p18._1._1,
												_p23,
												_elm_lang$core$Maybe$Just(_p18._3._0),
												_p22))),
									_p22));
							p = _v13;
							continue unparsePattern;
						}
					} else {
						var _v14 = _p18._3._0;
						p = _v14;
						continue unparsePattern;
					}
				}
			default:
				var _p24 = _p18._3;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A3(
						_user$project$ElmUnparser$wrapPatternWithParensIfLessPrecedence,
						p,
						_p24,
						_user$project$ElmUnparser$unparsePattern(_p24)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p18._2.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'as',
							A2(_elm_lang$core$Basics_ops['++'], _p18._0.val, _p18._1))));
		}
	}
};
var _user$project$ElmUnparser$unparseWD = function (wd) {
	var strHidden = function (bool) {
		return bool ? ',\"hidden\"' : '';
	};
	var _p25 = wd.val;
	switch (_p25.ctor) {
		case 'NoWidgetDecl':
			return '';
		case 'IntSlider':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p25._0.val),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p25._1.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p25._2.val),
							A2(
								_elm_lang$core$Basics_ops['++'],
								strHidden(_p25._4),
								'}')))));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p25._0.val),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p25._1.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p25._2.val),
							A2(
								_elm_lang$core$Basics_ops['++'],
								strHidden(_p25._4),
								'}')))));
	}
};
var _user$project$ElmUnparser$unparse = function (e) {
	unparse:
	while (true) {
		var unparseArg = function (e) {
			var _p26 = e.val.e__;
			_v16_7:
			do {
				switch (_p26.ctor) {
					case 'EConst':
						return _user$project$ElmUnparser$unparse(e);
					case 'EBase':
						return _user$project$ElmUnparser$unparse(e);
					case 'EVar':
						return _user$project$ElmUnparser$unparse(e);
					case 'EOp':
						if (_p26._2.ctor === '[]') {
							return _user$project$ElmUnparser$unparse(e);
						} else {
							break _v16_7;
						}
					case 'EList':
						return _user$project$ElmUnparser$unparse(e);
					case 'EParens':
						return _user$project$ElmUnparser$unparse(e);
					case 'EHole':
						return _user$project$ElmUnparser$unparse(e);
					default:
						break _v16_7;
				}
			} while(false);
			return _user$project$ElmUnparser$wrapWithTightParens(
				_user$project$ElmUnparser$unparse(e));
		};
		var unparseFuncPat = function (p) {
			var _p27 = p.val.p__;
			if (_p27.ctor === 'PAs') {
				return _user$project$ElmUnparser$wrapWithTightParens(
					_user$project$ElmUnparser$unparsePattern(p));
			} else {
				return _user$project$ElmUnparser$unparsePattern(p);
			}
		};
		var _p28 = e.val.e__;
		switch (_p28.ctor) {
			case 'EConst':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p28._1),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p28._2._1,
							_user$project$ElmUnparser$unparseWD(_p28._3))));
			case 'EBase':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					_user$project$ElmUnparser$unparseBaseValue(_p28._1));
			case 'EVar':
				return A2(_elm_lang$core$Basics_ops['++'], _p28._0.val, _p28._1);
			case 'EFun':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\\',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$String$concat(
								A2(_elm_lang$core$List$map, unparseFuncPat, _p28._1)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' ->',
								_user$project$ElmUnparser$unparse(_p28._2)))));
			case 'EApp':
				var _p34 = _p28._0;
				var _p33 = _p28._1;
				var _p32 = _p28._2;
				var _p29 = _p28._3;
				switch (_p29.ctor) {
					case 'SpaceApp':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p34.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$ElmUnparser$unparse(_p33),
								_elm_lang$core$String$concat(
									A2(_elm_lang$core$List$map, unparseArg, _p32))));
					case 'LeftApp':
						var _p30 = _p32;
						if ((_p30.ctor === '::') && (_p30._1.ctor === '[]')) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p34.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									A3(
										_user$project$ElmUnparser$wrapWithParensIfLessEqPrecedence,
										e,
										_p33,
										_user$project$ElmUnparser$unparse(_p33)),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p29._0.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'<|',
											_user$project$ElmUnparser$unparse(_p30._0)))));
						} else {
							return '?[internal error EApp LeftApp wrong number of arguments]?';
						}
					default:
						var _p31 = _p32;
						if ((_p31.ctor === '::') && (_p31._1.ctor === '[]')) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p34.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$ElmUnparser$unparse(_p31._0),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p29._0.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'|>',
											A3(
												_user$project$ElmUnparser$wrapWithParensIfLessEqPrecedence,
												e,
												_p33,
												_user$project$ElmUnparser$unparse(_p33))))));
						} else {
							return '?[internal error EApp RightApp wrong number of arguments]?';
						}
				}
			case 'EOp':
				var _p40 = _p28._0;
				var _p39 = _p28._1;
				var _p38 = _p28._2;
				var unparsedLikeAnApplication = A2(
					_elm_lang$core$Basics_ops['++'],
					_p40.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$ElmUnparser$unparseOp(_p39),
						_elm_lang$core$String$concat(
							A2(_elm_lang$core$List$map, unparseArg, _p38))));
				if (_user$project$ElmLang$isInfixOperator(_p39)) {
					var _p35 = _p38;
					if (((_p35.ctor === '::') && (_p35._1.ctor === '::')) && (_p35._1._1.ctor === '[]')) {
						var _p37 = _p35._1._0;
						var _p36 = _p35._0;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A3(
								_user$project$ElmUnparser$wrapWithParensIfLessPrecedence,
								e,
								_p36,
								_user$project$ElmUnparser$unparse(_p36)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p40.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$ElmUnparser$unparseOp(_p39),
									A3(
										_user$project$ElmUnparser$wrapWithParensIfLessPrecedence,
										e,
										_p37,
										_user$project$ElmUnparser$unparse(_p37)))));
					} else {
						return unparsedLikeAnApplication;
					}
				} else {
					return unparsedLikeAnApplication;
				}
			case 'EList':
				if (_p28._3.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p28._0.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[',
							A2(
								_elm_lang$core$Basics_ops['++'],
								function () {
									var _p41 = _p28._1;
									if (_p41.ctor === '[]') {
										return '';
									} else {
										if (_p41._1.ctor === '[]') {
											return _user$project$ElmUnparser$unparse(_p41._0._1);
										} else {
											return A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$ElmUnparser$unparse(_p41._0._1),
												_elm_lang$core$String$concat(
													A2(
														_elm_lang$core$List$map,
														function (_p42) {
															var _p43 = _p42;
															return A2(
																_elm_lang$core$Basics_ops['++'],
																_p43._0.val,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	',',
																	_user$project$ElmUnparser$unparse(_p43._1)));
														},
														_p41._1)));
										}
									}
								}(),
								A2(_elm_lang$core$Basics_ops['++'], _p28._4.val, ']'))));
				} else {
					if (_p28._1.ctor === '::') {
						if ((_p28._1._0.ctor === '_Tuple2') && (_p28._1._1.ctor === '[]')) {
							var _p45 = _p28._3._0;
							var _p44 = _p28._1._0._1;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_p28._0.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									A3(
										_user$project$ElmUnparser$wrapWithParensIfLessPrecedence,
										e,
										_p44,
										_user$project$ElmUnparser$unparse(_p44)),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p28._2.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'::',
											A2(
												_elm_lang$core$Basics_ops['++'],
												A3(
													_user$project$ElmUnparser$wrapWithParensIfLessPrecedence,
													e,
													_p45,
													_user$project$ElmUnparser$unparse(_p45)),
												_p28._4.val)))));
						} else {
							var _p48 = _p28._2;
							var _p47 = _p28._4;
							var _p46 = _p28._0;
							var _v25 = A2(
								_user$project$Lang$replaceE__,
								e,
								A5(
									_user$project$Lang$EList,
									_p46,
									{
										ctor: '::',
										_0: _p28._1._0,
										_1: {ctor: '[]'}
									},
									_p48,
									_elm_lang$core$Maybe$Just(
										A2(
											_user$project$Lang$replaceE__,
											e,
											A5(
												_user$project$Lang$EList,
												_p46,
												_p28._1._1,
												_p48,
												_elm_lang$core$Maybe$Just(_p28._3._0),
												_p47))),
									_p47));
							e = _v25;
							continue unparse;
						}
					} else {
						var _v26 = _p28._3._0;
						e = _v26;
						continue unparse;
					}
				}
			case 'EIf':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'if',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$ElmUnparser$unparse(_p28._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p28._2.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'then',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$ElmUnparser$unparse(_p28._3),
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p28._4.val,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'else',
												_user$project$ElmUnparser$unparse(_p28._5)))))))));
			case 'ECase':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'case',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$ElmUnparser$unparse(_p28._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p28._3.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'of',
									_elm_lang$core$String$concat(
										A2(_elm_lang$core$List$map, _user$project$ElmUnparser$unparseBranch, _p28._2)))))));
			case 'ELet':
				var _p59 = _p28._6;
				var _p58 = _p28._4;
				var _p57 = _p28._0;
				var _p56 = _p28._3;
				var _p55 = _p28._7;
				var _p54 = _p28._5;
				var _p49 = function () {
					var _p50 = _p54.val.e__;
					if (_p50.ctor === 'EFun') {
						return {ctor: '_Tuple2', _0: _p50._1, _1: _p50._2};
					} else {
						return {
							ctor: '_Tuple2',
							_0: {ctor: '[]'},
							_1: _p54
						};
					}
				}();
				var parameters = _p49._0;
				var binding = _p49._1;
				var strParametersDefault = _elm_lang$core$String$concat(
					A2(_elm_lang$core$List$map, unparseFuncPat, parameters));
				var strParameters = function () {
					var _p51 = {
						ctor: '_Tuple2',
						_0: parameters,
						_1: A2(_elm_lang$core$String$startsWith, ' ', strParametersDefault)
					};
					if (((_p51.ctor === '_Tuple2') && (_p51._0.ctor === '::')) && (_p51._1 === false)) {
						return A2(_elm_lang$core$Basics_ops['++'], ' ', strParametersDefault);
					} else {
						return strParametersDefault;
					}
				}();
				var _p52 = _p28._1;
				if (_p52.ctor === 'Let') {
					var _p53 = _p56.val.p__;
					if ((_p53.ctor === 'PVar') && (_p53._1 === '_IMPLICIT_MAIN')) {
						return '';
					} else {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p57.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p28._2 ? 'letrec' : 'let',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$ElmUnparser$unparsePattern(_p56),
									A2(
										_elm_lang$core$Basics_ops['++'],
										strParameters,
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p58.val,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'=',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$ElmUnparser$unparse(binding),
													A2(
														_elm_lang$core$Basics_ops['++'],
														_p59.val,
														A2(
															_elm_lang$core$Basics_ops['++'],
															'in',
															_user$project$ElmUnparser$unparse(_p55))))))))));
					}
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p57.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							function () {
								var strName = _user$project$ElmUnparser$unparsePattern(_p56);
								return A2(_elm_lang$core$String$startsWith, ' ', strName) ? A2(_elm_lang$core$String$dropLeft, 1, strName) : strName;
							}(),
							A2(
								_elm_lang$core$Basics_ops['++'],
								strParameters,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p58.val,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'=',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$ElmUnparser$unparse(binding),
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p59.val,
												_user$project$ElmUnparser$unparse(_p55))))))));
				}
			case 'EComment':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'--',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p28._1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								_user$project$ElmUnparser$unparse(_p28._2)))));
			case 'EOption':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'# ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p28._1.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p28._2.val,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p28._3.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'\n',
											_user$project$ElmUnparser$unparse(_p28._4))))))));
			case 'EParens':
				var _p63 = _p28._0;
				var _p62 = _p28._3;
				var _p61 = _p28._1;
				var _p60 = _p28._2;
				switch (_p60.ctor) {
					case 'Parens':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p63.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$ElmUnparser$unparse(_p61),
									A2(_elm_lang$core$Basics_ops['++'], _p62.val, ')'))));
					case 'LongStringSyntax':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p63.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\"\"\"',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$ElmUnparser$multilineContentUnparse(_p61),
									'\"\"\"')));
					default:
						var _v32 = A2(
							_user$project$Lang$replaceE__,
							e,
							A4(_user$project$Lang$EParens, _p63, _p61, _user$project$Lang$Parens, _p62));
						e = _v32;
						continue unparse;
				}
			case 'EHole':
				switch (_p28._1.ctor) {
					case 'HoleNamed':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p28._0.val,
							A2(_elm_lang$core$Basics_ops['++'], '??', _p28._1._0));
					case 'HoleLoc':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p28._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'??k',
								_elm_lang$core$Basics$toString(_p28._1._0)));
					case 'HolePBE':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p28._0.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'??(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(
										_elm_lang$core$String$join,
										'',
										A2(
											_user$project$Utils$mapi1,
											function (_p64) {
												var _p65 = _p64;
												var _p66 = _p65._0;
												return A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Native_Utils.eq(_p66, 1) ? '' : A2(_elm_lang$core$Basics_ops['++'], _p65._1._0.val, ','),
													A2(
														_elm_lang$core$Basics_ops['++'],
														_p65._1._1.val,
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(_p66),
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p65._1._2.val,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'=>',
																	_user$project$ElmUnparser$unparse(_p65._1._3))))));
											},
											_p28._1._0)),
									A2(_elm_lang$core$Basics_ops['++'], _p28._1._1.val, ')'))));
					default:
						return A2(_elm_lang$core$Basics_ops['++'], _p28._0.val, '??');
				}
			case 'EColonType':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$ElmUnparser$unparse(_p28._1),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p28._2.val,
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$ElmUnparser$unparseType, false, _p28._3),
									_p28._4.val)))));
			case 'ETyp':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$ElmUnparser$unparsePattern(_p28._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p28._4.val,
						A2(
							_elm_lang$core$Basics_ops['++'],
							':',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$ElmUnparser$unparseType, false, _p28._2),
								_user$project$ElmUnparser$unparse(_p28._3)))));
			case 'ETypeAlias':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p28._0.val,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'type alias',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$ElmUnparser$unparsePattern(_p28._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' =',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$ElmUnparser$unparseType, false, _p28._2),
									_user$project$ElmUnparser$unparse(_p28._3))))));
			default:
				return '{Error: typecase not yet implemented for Elm syntax}';
		}
	}
};
var _user$project$ElmUnparser$multilineContentUnparse = function (e) {
	var _p67 = e.val.e__;
	_v34_3:
	do {
		switch (_p67.ctor) {
			case 'EBase':
				if (_p67._1.ctor === 'EString') {
					return A4(
						_elm_lang$core$Regex$replace,
						_elm_lang$core$Regex$All,
						_user$project$ElmUnparser$multilineRegexEscape,
						function (m) {
							return '@@';
						},
						_p67._1._1);
				} else {
					break _v34_3;
				}
			case 'EOp':
				if (((_p67._2.ctor === '::') && (_p67._2._1.ctor === '::')) && (_p67._2._1._1.ctor === '[]')) {
					var _p79 = _p67._2._1._0;
					var _p78 = _p67._2._0;
					var _p68 = _p67._1.val;
					if (_p68.ctor === 'Plus') {
						var unwrapOptNumToString = function (x) {
							var _p69 = x;
							if (((_p69.ctor === 'EOp') && (_p69._2.ctor === '::')) && (_p69._2._1.ctor === '[]')) {
								var _p70 = _p69._1.val;
								if (_p70.ctor === 'OptNumToString') {
									return _p69._2._0.val.e__;
								} else {
									return x;
								}
							} else {
								return x;
							}
						};
						var _p71 = unwrapOptNumToString(_p78.val.e__);
						_v38_3:
						do {
							switch (_p71.ctor) {
								case 'EBase':
									if (_p71._1.ctor === 'EString') {
										return A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$ElmUnparser$multilineContentUnparse(_p78),
											_user$project$ElmUnparser$multilineContentUnparse(_p79));
									} else {
										break _v38_3;
									}
								case 'EVar':
									var _p77 = _p71._1;
									var _p72 = _p79.val.e__;
									_v39_2:
									do {
										switch (_p72.ctor) {
											case 'EOp':
												if (((_p72._2.ctor === '::') && (_p72._2._1.ctor === '::')) && (_p72._2._1._1.ctor === '[]')) {
													var _p73 = _p72._1.val;
													if (_p73.ctor === 'Plus') {
														var _p74 = _p72._2._0.val.e__;
														if ((_p74.ctor === 'EBase') && (_p74._1.ctor === 'EString')) {
															var varRep = function () {
																var _p75 = _elm_lang$core$String$uncons(_p74._1._1);
																if (_p75.ctor === 'Nothing') {
																	return A2(_elm_lang$core$Basics_ops['++'], '@', _p77);
																} else {
																	return _user$project$ElmParser$isRestChar(_p75._0._0) ? A2(
																		_elm_lang$core$Basics_ops['++'],
																		'@(',
																		A2(_elm_lang$core$Basics_ops['++'], _p77, ')')) : A2(_elm_lang$core$Basics_ops['++'], '@', _p77);
																}
															}();
															return A2(
																_elm_lang$core$Basics_ops['++'],
																varRep,
																_user$project$ElmUnparser$multilineContentUnparse(_p79));
														} else {
															return A2(
																_elm_lang$core$Basics_ops['++'],
																'@',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_p77,
																	_user$project$ElmUnparser$multilineContentUnparse(_p79)));
														}
													} else {
														return A2(
															_elm_lang$core$Basics_ops['++'],
															'@',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p77,
																_user$project$ElmUnparser$multilineContentUnparse(_p79)));
													}
												} else {
													break _v39_2;
												}
											case 'EBase':
												if (_p72._1.ctor === 'EString') {
													var varRep = function () {
														var _p76 = _elm_lang$core$String$uncons(_p72._1._1);
														if (_p76.ctor === 'Nothing') {
															return A2(_elm_lang$core$Basics_ops['++'], '@', _p77);
														} else {
															return _user$project$ElmParser$isRestChar(_p76._0._0) ? A2(
																_elm_lang$core$Basics_ops['++'],
																'@(',
																A2(_elm_lang$core$Basics_ops['++'], _p77, ')')) : A2(_elm_lang$core$Basics_ops['++'], '@', _p77);
														}
													}();
													return A2(
														_elm_lang$core$Basics_ops['++'],
														varRep,
														_user$project$ElmUnparser$multilineContentUnparse(_p79));
												} else {
													break _v39_2;
												}
											default:
												break _v39_2;
										}
									} while(false);
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'@',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p77,
											_user$project$ElmUnparser$multilineContentUnparse(_p79)));
								case 'EParens':
									if (_p71._2.ctor === 'ElmSyntax') {
										return A2(
											_elm_lang$core$Basics_ops['++'],
											'@',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$ElmUnparser$unparse(_p71._1),
												_user$project$ElmUnparser$multilineContentUnparse(_p79)));
									} else {
										break _v38_3;
									}
								default:
									break _v38_3;
							}
						} while(false);
						return A2(
							_elm_lang$core$Basics_ops['++'],
							'@(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$ElmUnparser$unparse(_p78),
								A2(
									_elm_lang$core$Basics_ops['++'],
									')',
									_user$project$ElmUnparser$multilineContentUnparse(_p79))));
					} else {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							'@(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$ElmUnparser$unparse(e),
								')'));
					}
				} else {
					break _v34_3;
				}
			case 'ELet':
				var remaining = _user$project$ElmUnparser$multilineContentUnparse(_p67._7);
				var definition = _user$project$ElmUnparser$unparse(_p67._5);
				var finalDefinition = function () {
					if (A2(_elm_lang$core$String$contains, '\n', definition)) {
						var _p80 = _elm_lang$core$String$uncons(
							_elm_lang$core$String$trim(definition));
						if (((_p80.ctor === 'Just') && (_p80._0.ctor === '_Tuple2')) && (_p80._0._0.valueOf() === '(')) {
							return A2(_elm_lang$core$Basics_ops['++'], definition, '\n');
						} else {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'(',
								A2(_elm_lang$core$Basics_ops['++'], definition, ')\n'));
						}
					} else {
						return A2(_elm_lang$core$Basics_ops['++'], definition, '\n');
					}
				}();
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'@',
					A2(
						_elm_lang$core$Basics_ops['++'],
						function () {
							var _p81 = _p67._1;
							if (_p81.ctor === 'Let') {
								return 'let';
							} else {
								return 'def';
							}
						}(),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p67._2 ? 'rec' : '',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p67._0.val,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$ElmUnparser$unparsePattern(_p67._3),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p67._4.val,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'=',
											A2(_elm_lang$core$Basics_ops['++'], finalDefinition, remaining))))))));
			default:
				break _v34_3;
		}
	} while(false);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'@(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$ElmUnparser$unparse(e),
			')'));
};
var _user$project$ElmUnparser$unparseBranch = function (branch) {
	var _p82 = branch.val;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_p82._0.val,
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$ElmUnparser$unparsePattern(_p82._1),
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p82._3.val,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'->',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$ElmUnparser$unparse(_p82._2),
						';')))));
};
var _user$project$ElmUnparser$debugLogExp = function (exp) {
	var _p83 = _user$project$Utils$log(
		_user$project$ElmUnparser$unparse(exp));
	return exp;
};
var _user$project$ElmUnparser$maybeDebugLogExp = function (maybeExp) {
	var _p84 = maybeExp;
	if (_p84.ctor === 'Just') {
		var _p85 = _user$project$ElmUnparser$debugLogExp(_p84._0);
		return maybeExp;
	} else {
		var _p86 = _user$project$Utils$log('No exp');
		return maybeExp;
	}
};

var _user$project$File$fileExtensionToString = function (fe) {
	var _p0 = fe;
	switch (_p0.ctor) {
		case 'LittleFile':
			return 'little';
		case 'ElmFile':
			return 'elm';
		case 'LittleIcon':
			return 'licon';
		default:
			return 'eicon';
	}
};
var _user$project$File$encodeFileExtension = function (fe) {
	return _elm_lang$core$Json_Encode$string(
		_user$project$File$fileExtensionToString(fe));
};
var _user$project$File$encodeFilename = function (_p1) {
	var _p2 = _p1;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'name',
				_1: _elm_lang$core$Json_Encode$string(_p2.name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'extension',
					_1: _user$project$File$encodeFileExtension(_p2.extension)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$File$encodeFile = function (file) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'filename',
				_1: _user$project$File$encodeFilename(file.filename)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'contents',
					_1: _elm_lang$core$Json_Encode$string(file.contents)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$File$Filename = F2(
	function (a, b) {
		return {name: a, extension: b};
	});
var _user$project$File$File = F2(
	function (a, b) {
		return {filename: a, contents: b};
	});
var _user$project$File$ElmIcon = {ctor: 'ElmIcon'};
var _user$project$File$LittleIcon = {ctor: 'LittleIcon'};
var _user$project$File$iconExtensionPrecedences = {
	ctor: '::',
	_0: _user$project$File$ElmIcon,
	_1: {
		ctor: '::',
		_0: _user$project$File$LittleIcon,
		_1: {ctor: '[]'}
	}
};
var _user$project$File$ElmFile = {ctor: 'ElmFile'};
var _user$project$File$LittleFile = {ctor: 'LittleFile'};
var _user$project$File$fileExtensionFromString = function (s) {
	var _p3 = s;
	switch (_p3) {
		case 'little':
			return _elm_lang$core$Maybe$Just(_user$project$File$LittleFile);
		case 'elm':
			return _elm_lang$core$Maybe$Just(_user$project$File$ElmFile);
		case 'licon':
			return _elm_lang$core$Maybe$Just(_user$project$File$LittleIcon);
		case 'eicon':
			return _elm_lang$core$Maybe$Just(_user$project$File$ElmIcon);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$File$fileExtensionDecoder = A3(
	_elm_lang$core$Basics$flip,
	_elm_lang$core$Json_Decode$andThen,
	_elm_lang$core$Json_Decode$string,
	function (s) {
		var _p4 = _user$project$File$fileExtensionFromString(s);
		if (_p4.ctor === 'Just') {
			return _elm_lang$core$Json_Decode$succeed(_p4._0);
		} else {
			return _elm_lang$core$Json_Decode$fail(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Unknown file extension \'.',
					A2(_elm_lang$core$Basics_ops['++'], s, '\'')));
		}
	});
var _user$project$File$filenameDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$File$Filename,
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'extension', _user$project$File$fileExtensionDecoder));
var _user$project$File$fileDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$File$File,
	A2(_elm_lang$core$Json_Decode$field, 'filename', _user$project$File$filenameDecoder),
	A2(_elm_lang$core$Json_Decode$field, 'contents', _elm_lang$core$Json_Decode$string));
var _user$project$File$fileIndexDecoder = _elm_lang$core$Json_Decode$list(_user$project$File$filenameDecoder);
var _user$project$File$parseFilename = function (s) {
	var $default = {name: s, extension: _user$project$File$ElmFile};
	var _p5 = _user$project$Utils$maybeLast(
		A2(_elm_lang$core$String$indexes, '.', s));
	if (_p5.ctor === 'Just') {
		var _p7 = _p5._0;
		var extensionString = A2(_elm_lang$core$String$dropLeft, _p7 + 1, s);
		var name = A2(_elm_lang$core$String$left, _p7, s);
		var _p6 = _user$project$File$fileExtensionFromString(extensionString);
		if (_p6.ctor === 'Just') {
			return {name: name, extension: _p6._0};
		} else {
			return $default;
		}
	} else {
		return $default;
	}
};

var _user$project$Syntax$encode = function (syntax) {
	return _elm_lang$core$Json_Encode$string(
		function () {
			var _p0 = syntax;
			if (_p0.ctor === 'Elm') {
				return 'Elm';
			} else {
				return 'Little';
			}
		}());
};
var _user$project$Syntax$iconExtension = function (syntax) {
	var _p1 = syntax;
	if (_p1.ctor === 'Elm') {
		return _user$project$File$ElmIcon;
	} else {
		return _user$project$File$LittleIcon;
	}
};
var _user$project$Syntax$sourceExtension = function (syntax) {
	var _p2 = syntax;
	if (_p2.ctor === 'Elm') {
		return _user$project$File$ElmFile;
	} else {
		return _user$project$File$LittleFile;
	}
};
var _user$project$Syntax$typeWithRolesUnparser = function (syntax) {
	var _p3 = syntax;
	if (_p3.ctor === 'Little') {
		return _user$project$LangUnparser$unparseType(true);
	} else {
		return _user$project$ElmUnparser$unparseType(true);
	}
};
var _user$project$Syntax$typeUnparser = function (syntax) {
	var _p4 = syntax;
	if (_p4.ctor === 'Little') {
		return _user$project$LangUnparser$unparseType(false);
	} else {
		return _user$project$ElmUnparser$unparseType(false);
	}
};
var _user$project$Syntax$patternUnparser = function (syntax) {
	var _p5 = syntax;
	if (_p5.ctor === 'Little') {
		return _user$project$LangUnparser$unparsePat;
	} else {
		return _user$project$ElmUnparser$unparsePattern;
	}
};
var _user$project$Syntax$unparser = function (syntax) {
	var _p6 = syntax;
	if (_p6.ctor === 'Little') {
		return _user$project$LangUnparser$unparse;
	} else {
		return _user$project$ElmUnparser$unparse;
	}
};
var _user$project$Syntax$parser = function (syntax) {
	var _p7 = syntax;
	if (_p7.ctor === 'Little') {
		return _user$project$FastParser$parseE;
	} else {
		return _user$project$ElmParser$parse;
	}
};
var _user$project$Syntax$convertSyntax = F3(
	function (oldSyntax, newSyntax, code) {
		return A2(
			_elm_lang$core$Result$map,
			_user$project$Syntax$unparser(newSyntax),
			A2(_user$project$Syntax$parser, oldSyntax, code));
	});
var _user$project$Syntax$Elm = {ctor: 'Elm'};
var _user$project$Syntax$Little = {ctor: 'Little'};
var _user$project$Syntax$fromFileExtension = function (extension) {
	var _p8 = extension;
	switch (_p8.ctor) {
		case 'ElmFile':
			return _user$project$Syntax$Elm;
		case 'ElmIcon':
			return _user$project$Syntax$Elm;
		case 'LittleFile':
			return _user$project$Syntax$Little;
		default:
			return _user$project$Syntax$Little;
	}
};

var _user$project$Types$matchPatToType = F2(
	function (pat, tipe) {
		var _p0 = {ctor: '_Tuple2', _0: pat.val.p__, _1: tipe.val.t__};
		_v0_2:
		do {
			if (_p0.ctor === '_Tuple2') {
				switch (_p0._0.ctor) {
					case 'PVar':
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _p0._0._1, _1: tipe},
								_1: {ctor: '[]'}
							});
					case 'PList':
						if (((_p0._0._3.ctor === 'Nothing') && (_p0._1.ctor === 'TTuple')) && (_p0._1._3.ctor === 'Nothing')) {
							return A2(
								_elm_lang$core$Maybe$map,
								_elm_lang$core$List$concat,
								A2(
									_elm_lang$core$Maybe$andThen,
									function (_p1) {
										return _user$project$Utils$projJusts(
											A2(
												_elm_lang$core$List$map,
												_elm_lang$core$Basics$uncurry(_user$project$Types$matchPatToType),
												_p1));
									},
									A2(_user$project$Utils$maybeZip, _p0._0._1, _p0._1._1)));
						} else {
							break _v0_2;
						}
					default:
						break _v0_2;
				}
			} else {
				break _v0_2;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Types$valIsType = F2(
	function (val, tipe) {
		var unsupported = function (msg) {
			return _elm_lang$core$Native_Utils.crash(
				'Types',
				{
					start: {line: 388, column: 5},
					end: {line: 388, column: 16}
				})(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'typing values against ',
					A2(_elm_lang$core$Basics_ops['++'], msg, ' is not supported')));
		};
		var _p2 = {ctor: '_Tuple2', _0: val.v_, _1: tipe.val.t__};
		_v1_12:
		do {
			if (_p2.ctor === '_Tuple2') {
				switch (_p2._1.ctor) {
					case 'TNum':
						if (_p2._0.ctor === 'VConst') {
							return true;
						} else {
							break _v1_12;
						}
					case 'TBool':
						if ((_p2._0.ctor === 'VBase') && (_p2._0._0.ctor === 'VBool')) {
							return true;
						} else {
							break _v1_12;
						}
					case 'TString':
						if ((_p2._0.ctor === 'VBase') && (_p2._0._0.ctor === 'VString')) {
							return true;
						} else {
							break _v1_12;
						}
					case 'TNull':
						if ((_p2._0.ctor === 'VBase') && (_p2._0._0.ctor === 'VNull')) {
							return true;
						} else {
							break _v1_12;
						}
					case 'TList':
						if (_p2._0.ctor === 'VList') {
							return A2(
								_elm_lang$core$List$all,
								function (v) {
									return A2(_user$project$Types$valIsType, v, _p2._1._1);
								},
								_p2._0._0);
						} else {
							break _v1_12;
						}
					case 'TDict':
						return unsupported('dictionary types');
					case 'TTuple':
						if (_p2._0.ctor === 'VList') {
							var _p7 = _p2._0._0;
							var _p6 = _p2._1._1;
							var typeListsMatch = A3(
								_elm_lang$core$List$foldl,
								F2(
									function (_p3, res) {
										var _p4 = _p3;
										return res && A2(_user$project$Types$valIsType, _p4._0, _p4._1);
									}),
								true,
								A2(_user$project$Utils$zip, _p7, _p6));
							var _p5 = _p2._1._3;
							if (_p5.ctor === 'Nothing') {
								return typeListsMatch && _elm_lang$core$Native_Utils.eq(
									_elm_lang$core$List$length(_p7),
									_elm_lang$core$List$length(_p6));
							} else {
								return typeListsMatch && ((_elm_lang$core$Native_Utils.cmp(
									_elm_lang$core$List$length(_p7),
									_elm_lang$core$List$length(_p6)) > -1) && A2(
									_elm_lang$core$List$all,
									function (v) {
										return A2(_user$project$Types$valIsType, v, _p5._0);
									},
									A2(
										_elm_lang$core$List$drop,
										_elm_lang$core$List$length(_p6),
										_p7)));
							}
						} else {
							break _v1_12;
						}
					case 'TArrow':
						return unsupported('arrow types');
					case 'TUnion':
						return A2(
							_elm_lang$core$List$any,
							_user$project$Types$valIsType(val),
							_p2._1._1);
					case 'TNamed':
						return unsupported('type aliases');
					case 'TVar':
						return unsupported('type variables');
					case 'TWildcard':
						return true;
					default:
						break _v1_12;
				}
			} else {
				break _v1_12;
			}
		} while(false);
		return false;
	});
var _user$project$Types$freeIdentifiersList = function (tipe) {
	freeIdentifiersList:
	while (true) {
		var _p8 = tipe.val.t__;
		switch (_p8.ctor) {
			case 'TNum':
				return {ctor: '[]'};
			case 'TBool':
				return {ctor: '[]'};
			case 'TString':
				return {ctor: '[]'};
			case 'TNull':
				return {ctor: '[]'};
			case 'TList':
				var _v5 = _p8._1;
				tipe = _v5;
				continue freeIdentifiersList;
			case 'TDict':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Types$freeIdentifiersList(_p8._1),
					_user$project$Types$freeIdentifiersList(_p8._2));
			case 'TTuple':
				return A2(
					_elm_lang$core$List$concatMap,
					_user$project$Types$freeIdentifiersList,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p8._1,
						A2(
							_elm_lang$core$Maybe$withDefault,
							{ctor: '[]'},
							A2(_elm_lang$core$Maybe$map, _elm_lang$core$List$singleton, _p8._3))));
			case 'TArrow':
				return A2(_elm_lang$core$List$concatMap, _user$project$Types$freeIdentifiersList, _p8._1);
			case 'TUnion':
				return A2(_elm_lang$core$List$concatMap, _user$project$Types$freeIdentifiersList, _p8._1);
			case 'TNamed':
				return {ctor: '[]'};
			case 'TVar':
				return {
					ctor: '::',
					_0: _p8._1,
					_1: {ctor: '[]'}
				};
			case 'TWildcard':
				return {ctor: '[]'};
			default:
				if (_p8._1.ctor === 'One') {
					return A2(
						_elm_lang$core$List$filter,
						F2(
							function (x, y) {
								return !_elm_lang$core$Native_Utils.eq(x, y);
							})(_p8._1._0._1),
						_user$project$Types$freeIdentifiersList(_p8._2));
				} else {
					var _p9 = _elm_lang$core$List$unzip(_p8._1._1);
					var idents = _p9._1;
					return A2(
						_elm_lang$core$List$filter,
						function (_p10) {
							return !A3(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, idents, _p10);
						},
						_user$project$Types$freeIdentifiersList(_p8._2));
				}
		}
	}
};
var _user$project$Types$isSubtype_ = F3(
	function (t1, t2, t2IdentToT1Ident) {
		isSubtype_:
		while (true) {
			var _p11 = {ctor: '_Tuple2', _0: t1.val.t__, _1: t2.val.t__};
			_v6_15:
			do {
				_v6_1:
				do {
					if (_p11.ctor === '_Tuple2') {
						switch (_p11._0.ctor) {
							case 'TList':
								var _v7 = A2(
									_user$project$Lang$replaceT__,
									t1,
									A5(
										_user$project$Lang$TTuple,
										_user$project$Lang$space1,
										{ctor: '[]'},
										_user$project$Lang$space1,
										_elm_lang$core$Maybe$Just(_p11._0._1),
										_user$project$Lang$space1)),
									_v8 = t2,
									_v9 = t2IdentToT1Ident;
								t1 = _v7;
								t2 = _v8;
								t2IdentToT1Ident = _v9;
								continue isSubtype_;
							case 'TNum':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TNum':
										return true;
									default:
										break _v6_15;
								}
							case 'TBool':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TBool':
										return true;
									default:
										break _v6_15;
								}
							case 'TString':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TString':
										return true;
									default:
										break _v6_15;
								}
							case 'TNull':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TNull':
										return true;
									default:
										break _v6_15;
								}
							case 'TDict':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TDict':
										return A3(_user$project$Types$isSubtype_, _p11._0._1, _p11._1._1, t2IdentToT1Ident) && A3(_user$project$Types$isSubtype_, _p11._0._2, _p11._1._2, t2IdentToT1Ident);
									default:
										break _v6_15;
								}
							case 'TTuple':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TTuple':
										var _p12 = A2(_user$project$Utils$zipAndLeftovers, _p11._0._1, _p11._1._1);
										var heads = _p12._0;
										var t1LeftoverHeads = _p12._1;
										var t2LeftoverHeads = _p12._2;
										return A2(
											_elm_lang$core$List$all,
											function (_p13) {
												var _p14 = _p13;
												return A3(_user$project$Types$isSubtype_, _p14._0, _p14._1, t2IdentToT1Ident);
											},
											heads) && function () {
											var _p15 = {ctor: '_Tuple4', _0: t1LeftoverHeads, _1: t2LeftoverHeads, _2: _p11._0._3, _3: _p11._1._3};
											_v11_2:
											do {
												if (_p15._3.ctor === 'Nothing') {
													if (_p15._0.ctor === '::') {
														return false;
													} else {
														if (_p15._1.ctor === '[]') {
															return true;
														} else {
															if (_p15._2.ctor === 'Nothing') {
																break _v11_2;
															} else {
																return A2(
																	_elm_lang$core$List$all,
																	function (t2Head) {
																		return A3(_user$project$Types$isSubtype_, _p15._2._0, t2Head, t2IdentToT1Ident);
																	},
																	t2LeftoverHeads);
															}
														}
													}
												} else {
													if (_p15._2.ctor === 'Nothing') {
														if (_p15._1.ctor === '::') {
															break _v11_2;
														} else {
															return false;
														}
													} else {
														var _p17 = _p15._3._0;
														var _p16 = _p15._2._0;
														return A3(_user$project$Types$isSubtype_, _p16, _p17, t2IdentToT1Ident) && (A2(
															_elm_lang$core$List$all,
															function (t1Head) {
																return A3(_user$project$Types$isSubtype_, t1Head, _p17, t2IdentToT1Ident);
															},
															t1LeftoverHeads) && A2(
															_elm_lang$core$List$all,
															function (t2Head) {
																return A3(_user$project$Types$isSubtype_, _p16, t2Head, t2IdentToT1Ident);
															},
															t2LeftoverHeads));
													}
												}
											} while(false);
											return false;
										}();
									default:
										break _v6_15;
								}
							case 'TArrow':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TArrow':
										return A3(
											_user$project$Utils$listsEqualBy,
											F2(
												function (t1, t2) {
													return A3(_user$project$Types$isSubtype_, t1, t2, t2IdentToT1Ident);
												}),
											_p11._0._1,
											_p11._1._1);
									default:
										break _v6_15;
								}
							case 'TUnion':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TUnion':
										return A3(
											_user$project$Utils$listsEqualBy,
											F2(
												function (t1, t2) {
													return A3(_user$project$Types$isSubtype_, t1, t2, t2IdentToT1Ident);
												}),
											_p11._0._1,
											_p11._1._1);
									default:
										break _v6_15;
								}
							case 'TNamed':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TNamed':
										return _elm_lang$core$Native_Utils.eq(_p11._0._1, _p11._1._1);
									default:
										break _v6_15;
								}
							case 'TVar':
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TVar':
										return A2(
											_elm_lang$core$Maybe$withDefault,
											false,
											A2(
												_elm_lang$core$Maybe$map,
												F2(
													function (x, y) {
														return _elm_lang$core$Native_Utils.eq(x, y);
													})(_p11._0._1),
												A2(_elm_lang$core$Dict$get, _p11._1._1, t2IdentToT1Ident)));
									default:
										break _v6_15;
								}
							case 'TWildcard':
								if (_p11._1.ctor === 'TList') {
									break _v6_1;
								} else {
									return true;
								}
							default:
								switch (_p11._1.ctor) {
									case 'TList':
										break _v6_1;
									case 'TForall':
										if (_p11._0._1.ctor === 'One') {
											if (((_p11._0._1._0.ctor === '_Tuple2') && (_p11._1._1.ctor === 'One')) && (_p11._1._1._0.ctor === '_Tuple2')) {
												var _v12 = _p11._0._2,
													_v13 = _p11._1._2,
													_v14 = A3(_elm_lang$core$Dict$insert, _p11._1._1._0._1, _p11._0._1._0._1, t2IdentToT1Ident);
												t1 = _v12;
												t2 = _v13;
												t2IdentToT1Ident = _v14;
												continue isSubtype_;
											} else {
												break _v6_15;
											}
										} else {
											if (_p11._1._1.ctor === 'Many') {
												var _p18 = A2(
													_user$project$Utils$maybeZip,
													A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p11._1._1._1),
													A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p11._0._1._1));
												if (_p18.ctor === 'Just') {
													var _v16 = _p11._0._2,
														_v17 = _p11._1._2,
														_v18 = A2(_user$project$Utils$insertAll, _p18._0, t2IdentToT1Ident);
													t1 = _v16;
													t2 = _v17;
													t2IdentToT1Ident = _v18;
													continue isSubtype_;
												} else {
													return false;
												}
											} else {
												break _v6_15;
											}
										}
									default:
										break _v6_15;
								}
						}
					} else {
						break _v6_15;
					}
				} while(false);
				var _v19 = t1,
					_v20 = A2(
					_user$project$Lang$replaceT__,
					t2,
					A5(
						_user$project$Lang$TTuple,
						_user$project$Lang$space1,
						{ctor: '[]'},
						_user$project$Lang$space1,
						_elm_lang$core$Maybe$Just(_p11._1._1),
						_user$project$Lang$space1)),
					_v21 = t2IdentToT1Ident;
				t1 = _v19;
				t2 = _v20;
				t2IdentToT1Ident = _v21;
				continue isSubtype_;
			} while(false);
			return false;
		}
	});
var _user$project$Types$isSubtype = F2(
	function (t1, t2) {
		var t2FreeIdents = _user$project$Utils$dedup(
			_user$project$Types$freeIdentifiersList(t2));
		var t1FreeIdents = _user$project$Utils$dedup(
			_user$project$Types$freeIdentifiersList(t1));
		var t2IdentToT1Ident = _elm_lang$core$Dict$fromList(
			A2(_user$project$Utils$zip, t2FreeIdents, t1FreeIdents));
		return A3(_user$project$Types$isSubtype_, t1, t2, t2IdentToT1Ident);
	});
var _user$project$Types$flattenUnion = function (tipe) {
	var _p19 = tipe.val.t__;
	if (_p19.ctor === 'TUnion') {
		var newTypes = A2(
			_elm_lang$core$List$concatMap,
			function (t) {
				var _p20 = _user$project$Types$flattenUnion(t).val.t__;
				if (_p20.ctor === 'TUnion') {
					return _p20._1;
				} else {
					return {
						ctor: '::',
						_0: t,
						_1: {ctor: '[]'}
					};
				}
			},
			_p19._1);
		return A2(
			_user$project$Lang$replaceT__,
			tipe,
			A3(_user$project$Lang$TUnion, _p19._0, newTypes, _p19._2));
	} else {
		return tipe;
	}
};
var _user$project$Types$inlineArrow = function (tipe) {
	var _p21 = tipe.val.t__;
	if (_p21.ctor === 'TArrow') {
		var _p22 = _user$project$Utils$maybeUnconsLast(_p21._1);
		if (_p22.ctor === 'Just') {
			var _p23 = _user$project$Types$inlineArrow(_p22._0._1).val.t__;
			if (_p23.ctor === 'TArrow') {
				return A2(
					_user$project$Lang$replaceT__,
					tipe,
					A3(
						_user$project$Lang$TArrow,
						_p21._0,
						A2(_elm_lang$core$Basics_ops['++'], _p22._0._0, _p23._1),
						_p21._2));
			} else {
				return tipe;
			}
		} else {
			return tipe;
		}
	} else {
		return tipe;
	}
};
var _user$project$Types$prettify = _user$project$Lang$mapType(
	function (_p24) {
		return _user$project$Types$inlineArrow(
			_user$project$Types$flattenUnion(_p24));
	});
var _user$project$Types$equal_ = F3(
	function (t1, t2, t2IdentToT1Ident) {
		equal_:
		while (true) {
			var _p25 = {
				ctor: '_Tuple2',
				_0: _user$project$Types$flattenUnion(
					_user$project$Types$inlineArrow(t1)).val.t__,
				_1: _user$project$Types$flattenUnion(
					_user$project$Types$inlineArrow(t2)).val.t__
			};
			_v27_16:
			do {
				_v27_10:
				do {
					if (_p25.ctor === '_Tuple2') {
						switch (_p25._0.ctor) {
							case 'TNum':
								switch (_p25._1.ctor) {
									case 'TNum':
										return true;
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									default:
										break _v27_16;
								}
							case 'TBool':
								switch (_p25._1.ctor) {
									case 'TBool':
										return true;
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									default:
										break _v27_16;
								}
							case 'TString':
								switch (_p25._1.ctor) {
									case 'TString':
										return true;
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									default:
										break _v27_16;
								}
							case 'TNull':
								switch (_p25._1.ctor) {
									case 'TNull':
										return true;
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									default:
										break _v27_16;
								}
							case 'TList':
								switch (_p25._1.ctor) {
									case 'TList':
										var _v28 = _p25._0._1,
											_v29 = _p25._1._1,
											_v30 = t2IdentToT1Ident;
										t1 = _v28;
										t2 = _v29;
										t2IdentToT1Ident = _v30;
										continue equal_;
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									default:
										break _v27_16;
								}
							case 'TDict':
								switch (_p25._1.ctor) {
									case 'TDict':
										return A3(_user$project$Types$equal_, _p25._0._1, _p25._1._1, t2IdentToT1Ident) && A3(_user$project$Types$equal_, _p25._0._2, _p25._1._2, t2IdentToT1Ident);
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									default:
										break _v27_16;
								}
							case 'TTuple':
								switch (_p25._1.ctor) {
									case 'TTuple':
										var maybeRestTypesMatch = function () {
											var _p26 = {ctor: '_Tuple2', _0: _p25._0._3, _1: _p25._1._3};
											_v31_2:
											do {
												if (_p26.ctor === '_Tuple2') {
													if (_p26._0.ctor === 'Nothing') {
														if (_p26._1.ctor === 'Nothing') {
															return true;
														} else {
															break _v31_2;
														}
													} else {
														if (_p26._1.ctor === 'Just') {
															return A3(_user$project$Types$equal_, _p26._0._0, _p26._1._0, t2IdentToT1Ident);
														} else {
															break _v31_2;
														}
													}
												} else {
													break _v31_2;
												}
											} while(false);
											return false;
										}();
										return maybeRestTypesMatch && A3(
											_user$project$Utils$listsEqualBy,
											F2(
												function (t1, t2) {
													return A3(_user$project$Types$equal_, t1, t2, t2IdentToT1Ident);
												}),
											_p25._0._1,
											_p25._1._1);
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									default:
										break _v27_16;
								}
							case 'TArrow':
								switch (_p25._1.ctor) {
									case 'TArrow':
										return A3(
											_user$project$Utils$listsEqualBy,
											F2(
												function (t1, t2) {
													return A3(_user$project$Types$equal_, t1, t2, t2IdentToT1Ident);
												}),
											_p25._0._1,
											_p25._1._1);
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									default:
										break _v27_16;
								}
							case 'TUnion':
								if (_p25._0._1.ctor === '::') {
									if ((_p25._1.ctor === 'TUnion') && (_p25._1._1.ctor === '::')) {
										var _p28 = _p25._1._1;
										var _p27 = _p25._0._1;
										return A2(
											_elm_lang$core$List$all,
											function (t1) {
												return A2(
													_elm_lang$core$List$any,
													function (t2) {
														return A3(_user$project$Types$equal_, t1, t2, t2IdentToT1Ident);
													},
													_p28);
											},
											_p27) && A2(
											_elm_lang$core$List$all,
											function (t2) {
												return A2(
													_elm_lang$core$List$any,
													function (t1) {
														return A3(_user$project$Types$equal_, t1, t2, t2IdentToT1Ident);
													},
													_p27);
											},
											_p28);
									} else {
										return A2(
											_elm_lang$core$List$all,
											function (t1) {
												return A3(_user$project$Types$equal_, t1, t2, t2IdentToT1Ident);
											},
											_p25._0._1);
									}
								} else {
									if ((_p25._1.ctor === 'TUnion') && (_p25._1._1.ctor === '::')) {
										break _v27_10;
									} else {
										break _v27_16;
									}
								}
							case 'TNamed':
								switch (_p25._1.ctor) {
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									case 'TNamed':
										return _elm_lang$core$Native_Utils.eq(_p25._0._1, _p25._1._1);
									default:
										break _v27_16;
								}
							case 'TVar':
								switch (_p25._1.ctor) {
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									case 'TVar':
										return A2(
											_elm_lang$core$Maybe$withDefault,
											false,
											A2(
												_elm_lang$core$Maybe$map,
												F2(
													function (x, y) {
														return _elm_lang$core$Native_Utils.eq(x, y);
													})(_p25._0._1),
												A2(_elm_lang$core$Dict$get, _p25._1._1, t2IdentToT1Ident)));
									default:
										break _v27_16;
								}
							case 'TWildcard':
								switch (_p25._1.ctor) {
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									case 'TWildcard':
										return true;
									default:
										break _v27_16;
								}
							default:
								switch (_p25._1.ctor) {
									case 'TUnion':
										if (_p25._1._1.ctor === '::') {
											break _v27_10;
										} else {
											break _v27_16;
										}
									case 'TForall':
										if (_p25._0._1.ctor === 'One') {
											if (((_p25._0._1._0.ctor === '_Tuple2') && (_p25._1._1.ctor === 'One')) && (_p25._1._1._0.ctor === '_Tuple2')) {
												var _v32 = _p25._0._2,
													_v33 = _p25._1._2,
													_v34 = A3(_elm_lang$core$Dict$insert, _p25._1._1._0._1, _p25._0._1._0._1, t2IdentToT1Ident);
												t1 = _v32;
												t2 = _v33;
												t2IdentToT1Ident = _v34;
												continue equal_;
											} else {
												break _v27_16;
											}
										} else {
											if (_p25._1._1.ctor === 'Many') {
												var _p29 = A2(
													_user$project$Utils$maybeZip,
													A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p25._1._1._1),
													A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p25._0._1._1));
												if (_p29.ctor === 'Just') {
													var _v36 = _p25._0._2,
														_v37 = _p25._1._2,
														_v38 = A2(_user$project$Utils$insertAll, _p29._0, t2IdentToT1Ident);
													t1 = _v36;
													t2 = _v37;
													t2IdentToT1Ident = _v38;
													continue equal_;
												} else {
													return false;
												}
											} else {
												break _v27_16;
											}
										}
									default:
										break _v27_16;
								}
						}
					} else {
						break _v27_16;
					}
				} while(false);
				return A2(
					_elm_lang$core$List$all,
					function (t2) {
						return A3(_user$project$Types$equal_, t1, t2, t2IdentToT1Ident);
					},
					_p25._1._1);
			} while(false);
			return false;
		}
	});
var _user$project$Types$equal = F2(
	function (t1, t2) {
		var t2FreeIdents = _user$project$Utils$dedup(
			_user$project$Types$freeIdentifiersList(t2));
		var t1FreeIdents = _user$project$Utils$dedup(
			_user$project$Types$freeIdentifiersList(t1));
		var t2IdentToT1Ident = _elm_lang$core$Dict$fromList(
			A2(_user$project$Utils$zip, t2FreeIdents, t1FreeIdents));
		return A3(_user$project$Types$equal_, t1, t2, t2IdentToT1Ident);
	});
var _user$project$Types$equalUnderSameTypeVars = F2(
	function (t1, t2) {
		var identifiers = _user$project$Utils$dedup(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Types$freeIdentifiersList(t1),
				_user$project$Types$freeIdentifiersList(t2)));
		var t2IdentToT1Ident = _elm_lang$core$Dict$fromList(
			A2(
				_elm_lang$core$List$map,
				function (ident) {
					return {ctor: '_Tuple2', _0: ident, _1: ident};
				},
				identifiers));
		return A3(_user$project$Types$equal_, t1, t2, t2IdentToT1Ident);
	});
var _user$project$Types$typeToMaybeArgTypesAndReturnType = function (tipe) {
	typeToMaybeArgTypesAndReturnType:
	while (true) {
		var _p30 = _user$project$Types$prettify(tipe).val.t__;
		switch (_p30.ctor) {
			case 'TForall':
				var _v40 = _p30._2;
				tipe = _v40;
				continue typeToMaybeArgTypesAndReturnType;
			case 'TArrow':
				var _p32 = _p30._1;
				var _p31 = {
					ctor: '_Tuple2',
					_0: A2(_user$project$Utils$dropLast, 1, _p32),
					_1: _user$project$Utils$maybeLast(_p32)
				};
				if ((_p31.ctor === '_Tuple2') && (_p31._1.ctor === 'Just')) {
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: _p31._0, _1: _p31._1._0});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _user$project$Types$typeToMaybeAliasIdent = function (tipe) {
	var _p33 = tipe.val.t__;
	if (_p33.ctor === 'TNamed') {
		return _elm_lang$core$Maybe$Just(_p33._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Types$typeToRoles = function (tipe) {
	var _p34 = _user$project$Types$typeToMaybeAliasIdent(tipe);
	if (_p34.ctor === 'Just') {
		return A2(_elm_lang$core$Set$insert, _p34._0, tipe.val.roles);
	} else {
		return tipe.val.roles;
	}
};
var _user$project$Types$isNumType = function (tipe) {
	isNumType:
	while (true) {
		var _p35 = tipe.val.t__;
		switch (_p35.ctor) {
			case 'TForall':
				var _v45 = _p35._2;
				tipe = _v45;
				continue isNumType;
			case 'TNum':
				return true;
			default:
				return false;
		}
	}
};
var _user$project$Types$isPointType = function (tipe) {
	return A2(
		_elm_lang$core$Set$member,
		'Point',
		_user$project$Types$typeToRoles(tipe)) || function () {
		var _p36 = tipe.val.t__;
		switch (_p36.ctor) {
			case 'TForall':
				return _user$project$Types$isPointType(_p36._2);
			case 'TTuple':
				var _p38 = A2(
					_elm_lang$core$List$map,
					function (_p37) {
						return function (_) {
							return _.t__;
						}(
							function (_) {
								return _.val;
							}(_p37));
					},
					_p36._1);
				if (((((_p38.ctor === '::') && (_p38._0.ctor === 'TNum')) && (_p38._1.ctor === '::')) && (_p38._1._0.ctor === 'TNum')) && (_p38._1._1.ctor === '[]')) {
					var _p40 = A2(
						_elm_lang$core$Maybe$map,
						function (_p39) {
							return function (_) {
								return _.t__;
							}(
								function (_) {
									return _.val;
								}(_p39));
						},
						_p36._3);
					if (_p40.ctor === 'Nothing') {
						return true;
					} else {
						if (_p40._0.ctor === 'TVar') {
							return true;
						} else {
							return false;
						}
					}
				} else {
					return false;
				}
			default:
				return false;
		}
	}();
};
var _user$project$Types$maybeListElementsType = function (tipe) {
	maybeListElementsType:
	while (true) {
		var _p41 = tipe.val.t__;
		switch (_p41.ctor) {
			case 'TList':
				return _elm_lang$core$Maybe$Just(_p41._1);
			case 'TForall':
				var _v50 = _p41._2;
				tipe = _v50;
				continue maybeListElementsType;
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _user$project$Types$isPointListType = function (tipe) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			_user$project$Types$isPointType,
			_user$project$Types$maybeListElementsType(tipe)));
};
var _user$project$Types$isListOrTuple = function (tipe) {
	isListOrTuple:
	while (true) {
		var _p42 = tipe.val.t__;
		switch (_p42.ctor) {
			case 'TList':
				return true;
			case 'TTuple':
				return true;
			case 'TForall':
				var _v52 = _p42._2;
				tipe = _v52;
				continue isListOrTuple;
			default:
				return false;
		}
	}
};
var _user$project$Types$allListsOrHomogenousTuplesOfSameTipe = function (tipes) {
	return A2(_elm_lang$core$List$all, _user$project$Types$isListOrTuple, tipes) && function () {
		var _p43 = A2(_elm_lang$core$List$concatMap, _user$project$Lang$childTypes, tipes);
		if (_p43.ctor === '[]') {
			return true;
		} else {
			return A2(
				_elm_lang$core$List$all,
				_user$project$Types$equalUnderSameTypeVars(_p43._0),
				_p43._1);
		}
	}();
};
var _user$project$Types$isListNotTuple = function (tipe) {
	isListNotTuple:
	while (true) {
		var _p44 = tipe.val.t__;
		switch (_p44.ctor) {
			case 'TList':
				return true;
			case 'TForall':
				var _v55 = _p44._2;
				tipe = _v55;
				continue isListNotTuple;
			default:
				return false;
		}
	}
};
var _user$project$Types$isArrow = function (tipe) {
	isArrow:
	while (true) {
		var _p45 = tipe.val.t__;
		switch (_p45.ctor) {
			case 'TForall':
				var _v57 = _p45._2;
				tipe = _v57;
				continue isArrow;
			case 'TArrow':
				return true;
			default:
				return false;
		}
	}
};
var _user$project$Types$isForall = function (tipe) {
	var _p46 = tipe.val.t__;
	if (_p46.ctor === 'TForall') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Types$withDummyRangeAndNoRoles = function (t__) {
	return _user$project$Lang$withDummyRange(
		{t__: t__, roles: _elm_lang$core$Set$empty});
};
var _user$project$Types$tBool = _user$project$Types$withDummyRangeAndNoRoles(
	_user$project$Lang$TBool(_user$project$Lang$space1));
var _user$project$Types$tNum = _user$project$Types$withDummyRangeAndNoRoles(
	_user$project$Lang$TNum(_user$project$Lang$space1));
var _user$project$Types$tString = _user$project$Types$withDummyRangeAndNoRoles(
	_user$project$Lang$TString(_user$project$Lang$space1));
var _user$project$Types$tNull = _user$project$Types$withDummyRangeAndNoRoles(
	_user$project$Lang$TNull(_user$project$Lang$space1));
var _user$project$Types$tVar = function (x) {
	return _user$project$Types$withDummyRangeAndNoRoles(
		A2(_user$project$Lang$TVar, _user$project$Lang$space1, x));
};
var _user$project$Types$tTupleRest = F2(
	function (ts, tRest) {
		return _user$project$Types$withDummyRangeAndNoRoles(
			A5(_user$project$Lang$TTuple, _user$project$Lang$space1, ts, _user$project$Lang$space0, tRest, _user$project$Lang$space0));
	});
var _user$project$Types$tTuple = function (ts) {
	return A2(_user$project$Types$tTupleRest, ts, _elm_lang$core$Maybe$Nothing);
};
var _user$project$Types$tList = function (t) {
	return _user$project$Types$withDummyRangeAndNoRoles(
		A3(_user$project$Lang$TList, _user$project$Lang$space1, t, _user$project$Lang$space0));
};
var _user$project$Types$tDict = F2(
	function (t1, t2) {
		return _user$project$Types$withDummyRangeAndNoRoles(
			A4(_user$project$Lang$TDict, _user$project$Lang$space1, t1, t2, _user$project$Lang$space0));
	});
var _user$project$Types$tArrows = function (ts) {
	return _user$project$Types$withDummyRangeAndNoRoles(
		A3(_user$project$Lang$TArrow, _user$project$Lang$space1, ts, _user$project$Lang$space0));
};
var _user$project$Types$tArrow = F2(
	function (t0, t1) {
		return _user$project$Types$tArrows(
			{
				ctor: '::',
				_0: t0,
				_1: {
					ctor: '::',
					_0: t1,
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Types$tForall = F2(
	function (vars, t) {
		var _p47 = vars;
		if (_p47.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Types',
				{
					start: {line: 39, column: 3},
					end: {line: 43, column: 94}
				},
				_p47)('AlgorithmJish tForall: no vars');
		} else {
			if (_p47._1.ctor === '[]') {
				return _user$project$Types$withDummyRangeAndNoRoles(
					A4(
						_user$project$Lang$TForall,
						_user$project$Lang$space1,
						_user$project$Lang$One(
							{ctor: '_Tuple2', _0: _user$project$Lang$space1, _1: _p47._0}),
						t,
						_user$project$Lang$space0));
			} else {
				var typeVars = {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _user$project$Lang$space0, _1: _p47._0},
					_1: A2(
						_elm_lang$core$List$map,
						function (a) {
							return {ctor: '_Tuple2', _0: _user$project$Lang$space1, _1: a};
						},
						_p47._1)
				};
				return _user$project$Types$withDummyRangeAndNoRoles(
					A4(
						_user$project$Lang$TForall,
						_user$project$Lang$space1,
						A3(_user$project$Lang$Many, _user$project$Lang$space1, typeVars, _user$project$Lang$space0),
						t,
						_user$project$Lang$space0));
			}
		}
	});
var _user$project$Types$tAny = A2(
	_user$project$Types$tForall,
	{
		ctor: '::',
		_0: 'a',
		_1: {ctor: '[]'}
	},
	_user$project$Types$tVar('a'));
var _user$project$Types$maybeListOrHomogenousTupleElementsType = function (tipe) {
	maybeListOrHomogenousTupleElementsType:
	while (true) {
		var figureItOut = function (_p49) {
			var _p50 = _p49;
			var _p51 = _user$project$Lang$childTypes(tipe);
			if (_p51.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_user$project$Types$tAny);
			} else {
				var _p54 = _p51._1;
				var _p53 = _p51._0;
				return (A2(
					_elm_lang$core$List$all,
					_user$project$Types$equalUnderSameTypeVars(_p53),
					_p54) && A2(
					_elm_lang$core$List$all,
					function (_p52) {
						return !A2(_user$project$Lang$typeContains, _user$project$Types$isForall, _p52);
					},
					{ctor: '::', _0: _p53, _1: _p54})) ? _elm_lang$core$Maybe$Just(_p53) : _elm_lang$core$Maybe$Nothing;
			}
		};
		var _p55 = tipe.val.t__;
		switch (_p55.ctor) {
			case 'TList':
				return figureItOut(
					{ctor: '_Tuple0'});
			case 'TTuple':
				return figureItOut(
					{ctor: '_Tuple0'});
			case 'TForall':
				var _v63 = _p55._2;
				tipe = _v63;
				continue maybeListOrHomogenousTupleElementsType;
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _user$project$Types$simplifyTailedTuple = function (tipe) {
	var wrap = function (t__) {
		return A2(_user$project$Lang$replaceT__, tipe, t__);
	};
	var _p56 = tipe.val.t__;
	if ((_p56.ctor === 'TTuple') && (_p56._3.ctor === 'Just')) {
		var _p57 = _user$project$Types$maybeListOrHomogenousTupleElementsType(tipe);
		if (_p57.ctor === 'Just') {
			return wrap(
				A3(_user$project$Lang$TList, _p56._0, _p57._0, _p56._4));
		} else {
			return tipe;
		}
	} else {
		return tipe;
	}
};
var _user$project$Types$valToMaybeType = function (val) {
	var _p58 = val.v_;
	switch (_p58.ctor) {
		case 'VConst':
			return _elm_lang$core$Maybe$Just(_user$project$Types$tNum);
		case 'VBase':
			switch (_p58._0.ctor) {
				case 'VBool':
					return _elm_lang$core$Maybe$Just(_user$project$Types$tBool);
				case 'VString':
					return _elm_lang$core$Maybe$Just(_user$project$Types$tString);
				default:
					return _elm_lang$core$Maybe$Just(_user$project$Types$tNull);
			}
		case 'VList':
			var _p59 = _user$project$Utils$projJusts(
				A2(_elm_lang$core$List$map, _user$project$Types$valToMaybeType, _p58._0));
			if (_p59.ctor === 'Just') {
				if (_p59._0.ctor === '[]') {
					return _elm_lang$core$Maybe$Just(
						A2(
							_user$project$Types$tForall,
							{
								ctor: '::',
								_0: 'a',
								_1: {ctor: '[]'}
							},
							_user$project$Types$tList(
								_user$project$Types$tVar('a'))));
				} else {
					var _p63 = _p59._0;
					var propertyPairList = _user$project$Types$tList(
						_user$project$Types$tTuple(
							{
								ctor: '::',
								_0: _user$project$Types$tString,
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$Types$tForall,
										{
											ctor: '::',
											_0: 'a',
											_1: {ctor: '[]'}
										},
										_user$project$Types$tVar('a')),
									_1: {ctor: '[]'}
								}
							}));
					var isPropertyPairType = function (t) {
						var _p60 = t.val.t__;
						_v68_2:
						do {
							switch (_p60.ctor) {
								case 'TList':
									return _elm_lang$core$Native_Utils.eq(_p60._1, _user$project$Types$tString);
								case 'TTuple':
									if ((((_p60._1.ctor === '::') && (_p60._1._1.ctor === '::')) && (_p60._1._1._1.ctor === '[]')) && (_p60._3.ctor === 'Nothing')) {
										return _elm_lang$core$Native_Utils.eq(_p60._1._0, _user$project$Types$tString);
									} else {
										break _v68_2;
									}
								default:
									break _v68_2;
							}
						} while(false);
						return false;
					};
					var _p61 = _user$project$Utils$dedup(_p63);
					if ((_p61.ctor === '::') && (_p61._1.ctor === '[]')) {
						var _p62 = _p61._0;
						return (_elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$length(_p63),
							2) && A2(_user$project$Types$equal, _user$project$Types$tNum, _p62)) ? _elm_lang$core$Maybe$Just(
							_user$project$Types$tTuple(
								{
									ctor: '::',
									_0: _user$project$Types$tNum,
									_1: {
										ctor: '::',
										_0: _user$project$Types$tNum,
										_1: {ctor: '[]'}
									}
								})) : (isPropertyPairType(_p62) ? _elm_lang$core$Maybe$Just(propertyPairList) : _elm_lang$core$Maybe$Just(
							_user$project$Types$tList(_p62)));
					} else {
						return A2(_elm_lang$core$List$all, isPropertyPairType, _p61) ? _elm_lang$core$Maybe$Just(propertyPairList) : _elm_lang$core$Maybe$Just(
							_user$project$Types$tTuple(_p63));
					}
				}
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Types$tUnion = function (ts) {
	return _user$project$Types$withDummyRangeAndNoRoles(
		A3(_user$project$Lang$TUnion, _user$project$Lang$space1, ts, _user$project$Lang$space0));
};

var _user$project$LangTools$isSurelyNumeric = F2(
	function (numericIdents, exp) {
		var recurse = function (e) {
			return A2(_user$project$LangTools$isSurelyNumeric, numericIdents, e);
		};
		var _p0 = exp.val.e__;
		switch (_p0.ctor) {
			case 'EConst':
				return true;
			case 'EBase':
				return false;
			case 'EVar':
				return A2(_elm_lang$core$Set$member, _p0._1, numericIdents);
			case 'EFun':
				return false;
			case 'EApp':
				return false;
			case 'EOp':
				var _p2 = _p0._2;
				var _p1 = _p0._1.val;
				switch (_p1.ctor) {
					case 'Pi':
						return true;
					case 'DictEmpty':
						return false;
					case 'Cos':
						return true;
					case 'Sin':
						return true;
					case 'ArcCos':
						return true;
					case 'ArcSin':
						return true;
					case 'Abs':
						return true;
					case 'Floor':
						return true;
					case 'Ceil':
						return true;
					case 'Round':
						return true;
					case 'ToStr':
						return false;
					case 'Sqrt':
						return true;
					case 'Ln':
						return true;
					case 'Explode':
						return false;
					case 'DebugLog':
						return A2(_elm_lang$core$List$any, recurse, _p2);
					case 'NoWidgets':
						return A2(_elm_lang$core$List$any, recurse, _p2);
					case 'Plus':
						return A2(_elm_lang$core$List$any, recurse, _p2);
					case 'Minus':
						return true;
					case 'Mult':
						return true;
					case 'Div':
						return true;
					case 'Lt':
						return false;
					case 'Eq':
						return false;
					case 'Mod':
						return true;
					case 'Pow':
						return true;
					case 'ArcTan2':
						return true;
					case 'DictGet':
						return false;
					case 'DictRemove':
						return false;
					case 'DictInsert':
						return false;
					default:
						return false;
				}
			case 'EList':
				return false;
			case 'EIf':
				return recurse(_p0._3) && recurse(_p0._5);
			case 'ECase':
				return A2(
					_elm_lang$core$List$all,
					recurse,
					_user$project$Lang$branchExps(_p0._2));
			case 'ETypeCase':
				return A2(
					_elm_lang$core$List$all,
					recurse,
					_user$project$Lang$tbranchExps(_p0._2));
			case 'EComment':
				return recurse(_p0._2);
			case 'EOption':
				return recurse(_p0._4);
			case 'ELet':
				return recurse(_p0._7);
			case 'ETyp':
				return recurse(_p0._3);
			case 'EColonType':
				return recurse(_p0._1);
			case 'ETypeAlias':
				return recurse(_p0._3);
			case 'EParens':
				return recurse(_p0._1);
			default:
				if (_p0._1.ctor === 'HoleVal') {
					return _user$project$Lang$valIsNum(_p0._1._0);
				} else {
					return false;
				}
		}
	});
var _user$project$LangTools$tryMatchExpPatToSomething = F4(
	function (makeThisMatch, postProcessDescendentWithPath, pat, exp) {
		var recurse = F2(
			function (pat, exp) {
				return A4(_user$project$LangTools$tryMatchExpPatToSomething, makeThisMatch, postProcessDescendentWithPath, pat, exp);
			});
		var thisMatch = A2(makeThisMatch, pat, exp);
		var addThisMatch = function (matchResult) {
			return A2(
				_elm_lang$core$Maybe$map,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					})(thisMatch),
				matchResult);
		};
		var postProcessDescendentsWithPath = F2(
			function (i, pathAndExps) {
				return A2(
					_elm_lang$core$List$map,
					postProcessDescendentWithPath(i),
					pathAndExps);
			});
		var matchListsAsFarAsPossible = F2(
			function (ps, es) {
				return A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$core$List$concat,
					_user$project$Utils$projJusts(
						A2(
							_user$project$Utils$mapi1,
							function (_p3) {
								var _p4 = _p3;
								return A2(
									_elm_lang$core$Maybe$map,
									postProcessDescendentsWithPath(_p4._0),
									A2(recurse, _p4._1._0, _p4._1._1));
							},
							A2(_user$project$Utils$zip, ps, es))));
			});
		var _p5 = pat.val.p__;
		switch (_p5.ctor) {
			case 'PWildcard':
				return _elm_lang$core$Maybe$Just(thisMatch);
			case 'PVar':
				return _elm_lang$core$Maybe$Just(thisMatch);
			case 'PAs':
				return addThisMatch(
					A2(
						_elm_lang$core$Maybe$map,
						postProcessDescendentsWithPath(1),
						A2(recurse, _p5._3, exp)));
			case 'PParens':
				return addThisMatch(
					A2(
						_elm_lang$core$Maybe$map,
						postProcessDescendentsWithPath(1),
						A2(recurse, _p5._1, exp)));
			case 'PList':
				if (_p5._3.ctor === 'Nothing') {
					var _p9 = _p5._1;
					var _p6 = _user$project$Lang$expEffectiveExp(exp).val.e__;
					if (_p6.ctor === 'EList') {
						if (_p6._3.ctor === 'Nothing') {
							var _p7 = _p6._1;
							return (!_elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(_p9),
								_elm_lang$core$List$length(_p7))) ? _elm_lang$core$Maybe$Nothing : addThisMatch(
								A2(
									matchListsAsFarAsPossible,
									_p9,
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p7)));
						} else {
							var _p8 = _p6._1;
							return (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$List$length(_p8),
								_elm_lang$core$List$length(_p9)) > 0) ? _elm_lang$core$Maybe$Nothing : addThisMatch(
								A2(
									matchListsAsFarAsPossible,
									_p9,
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p8)));
						}
					} else {
						return _elm_lang$core$Maybe$Just(thisMatch);
					}
				} else {
					var _p13 = _p5._1;
					var _p10 = _user$project$Lang$expEffectiveExp(exp).val.e__;
					if (_p10.ctor === 'EList') {
						if (_p10._3.ctor === 'Nothing') {
							var _p11 = _p10._1;
							return (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$List$length(_p11),
								_elm_lang$core$List$length(_p13)) < 0) ? _elm_lang$core$Maybe$Nothing : addThisMatch(
								A2(
									matchListsAsFarAsPossible,
									_p13,
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p11)));
						} else {
							var _p12 = _p10._1;
							return (!_elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(_p12),
								_elm_lang$core$List$length(_p13))) ? addThisMatch(
								A2(
									matchListsAsFarAsPossible,
									_p13,
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p12))) : addThisMatch(
								A2(
									matchListsAsFarAsPossible,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p13,
										{
											ctor: '::',
											_0: _p5._3._0,
											_1: {ctor: '[]'}
										}),
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p12),
										{
											ctor: '::',
											_0: _p10._3._0,
											_1: {ctor: '[]'}
										})));
						}
					} else {
						return _elm_lang$core$Maybe$Just(thisMatch);
					}
				}
			case 'PConst':
				var _p14 = _user$project$Lang$expEffectiveExp(exp).val.e__;
				if (_p14.ctor === 'EConst') {
					return _elm_lang$core$Native_Utils.eq(_p5._1, _p14._1) ? _elm_lang$core$Maybe$Just(thisMatch) : _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(thisMatch);
				}
			default:
				var _p15 = _user$project$Lang$expEffectiveExp(exp).val.e__;
				if (_p15.ctor === 'EBase') {
					return A2(_user$project$Lang$eBaseValsEqual, _p5._1, _p15._1) ? _elm_lang$core$Maybe$Just(thisMatch) : _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(thisMatch);
				}
		}
	});
var _user$project$LangTools$tryMatchExpPatToPats_ = F2(
	function (pat, exp) {
		return A4(
			_user$project$LangTools$tryMatchExpPatToSomething,
			F2(
				function (pat, exp) {
					return {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: pat, _1: exp},
						_1: {ctor: '[]'}
					};
				}),
			F2(
				function (i, binding) {
					return binding;
				}),
			pat,
			exp);
	});
var _user$project$LangTools$tryMatchExpPatToPaths_ = F2(
	function (pat, exp) {
		return A4(
			_user$project$LangTools$tryMatchExpPatToSomething,
			F2(
				function (pat, exp) {
					return {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {ctor: '[]'},
							_1: exp
						},
						_1: {ctor: '[]'}
					};
				}),
			F2(
				function (i, _p16) {
					var _p17 = _p16;
					return {
						ctor: '_Tuple2',
						_0: {ctor: '::', _0: i, _1: _p17._0},
						_1: _p17._1
					};
				}),
			pat,
			exp);
	});
var _user$project$LangTools$tryMatchExpPatToPats = F2(
	function (pat, exp) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(_user$project$LangTools$tryMatchExpPatToPats_, pat, exp));
	});
var _user$project$LangTools$findLetAndPatMatchingExp_ = F3(
	function (targetEId, program, letAndPatBoundEFindMap) {
		return A2(
			_user$project$Lang$mapFirstSuccessNode,
			function (exp) {
				var _p18 = exp.val.e__;
				if (_p18.ctor === 'ELet') {
					return A2(
						_user$project$Utils$mapFirstSuccess,
						letAndPatBoundEFindMap(exp),
						A2(_user$project$LangTools$tryMatchExpPatToPats, _p18._3, _p18._5));
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			},
			program);
	});
var _user$project$LangTools$findLetAndPatMatchingExp = F2(
	function (targetEId, program) {
		return A3(
			_user$project$LangTools$findLetAndPatMatchingExp_,
			targetEId,
			program,
			F2(
				function (letExp, _p19) {
					var _p20 = _p19;
					return _elm_lang$core$Native_Utils.eq(_p20._1.val.eid, targetEId) ? _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: letExp, _1: _p20._0}) : _elm_lang$core$Maybe$Nothing;
				}));
	});
var _user$project$LangTools$findLetAndPatMatchingExpLoose = F2(
	function (targetEId, program) {
		return A3(
			_user$project$LangTools$findLetAndPatMatchingExp_,
			targetEId,
			program,
			F2(
				function (letExp, _p21) {
					var _p22 = _p21;
					return A2(
						_elm_lang$core$List$member,
						targetEId,
						_user$project$Lang$expEffectiveEIds(_p22._1)) ? _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: letExp, _1: _p22._0}) : _elm_lang$core$Maybe$Nothing;
				}));
	});
var _user$project$LangTools$allSimplyResolvableLetPatBindings = function (program) {
	return A2(
		_elm_lang$core$List$concatMap,
		function (exp) {
			var _p23 = exp.val.e__;
			if (_p23.ctor === 'ELet') {
				return A2(_user$project$LangTools$tryMatchExpPatToPats, _p23._3, _p23._5);
			} else {
				return {ctor: '[]'};
			}
		},
		_user$project$Lang$flattenExpTree(program));
};
var _user$project$LangTools$tryMatchExpPatToPIds = F2(
	function (pat, exp) {
		return A2(
			_elm_lang$core$List$map,
			function (_p24) {
				var _p25 = _p24;
				return {ctor: '_Tuple2', _0: _p25._0.val.pid, _1: _p25._1};
			},
			A2(_user$project$LangTools$tryMatchExpPatToPats, pat, exp));
	});
var _user$project$LangTools$tryMatchExpPatToPaths = F2(
	function (pat, exp) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(_user$project$LangTools$tryMatchExpPatToPaths_, pat, exp));
	});
var _user$project$LangTools$tryMatchExpsPatsToPathsAtFunctionCall = F2(
	function (pats, exps) {
		return _elm_lang$core$List$concat(
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_user$project$Utils$projJusts(
					A2(
						_user$project$Utils$mapi1,
						function (_p26) {
							var _p27 = _p26;
							return A2(
								_elm_lang$core$Maybe$map,
								function (pathAndExps) {
									return A2(
										_elm_lang$core$List$map,
										function (_p28) {
											var _p29 = _p28;
											return {
												ctor: '_Tuple2',
												_0: {ctor: '::', _0: _p27._0, _1: _p29._0},
												_1: _p29._1
											};
										},
										pathAndExps);
								},
								A2(_user$project$LangTools$tryMatchExpPatToPaths_, _p27._1._0, _p27._1._1));
						},
						A2(_user$project$Utils$zip, pats, exps)))));
	});
var _user$project$LangTools$expPathsInExpList = function (exps) {
	return _elm_lang$core$List$concat(
		A2(
			_user$project$Utils$mapi1,
			function (_p30) {
				var _p31 = _p30;
				var _p36 = _p31._0;
				var _p35 = _p31._1;
				var _p32 = _p35.val.e__;
				if (_p32.ctor === 'EList') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _p35,
								_1: {
									ctor: '::',
									_0: _p36,
									_1: {ctor: '[]'}
								}
							},
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$map,
							function (_p33) {
								var _p34 = _p33;
								return {
									ctor: '_Tuple2',
									_0: _p34._0,
									_1: {ctor: '::', _0: _p36, _1: _p34._1}
								};
							},
							_user$project$LangTools$expPathsInExpList(
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p32._1))));
				} else {
					return {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _p35,
							_1: {
								ctor: '::',
								_0: _p36,
								_1: {ctor: '[]'}
							}
						},
						_1: {ctor: '[]'}
					};
				}
			},
			exps));
};
var _user$project$LangTools$eidPathInExpList = F2(
	function (exps, targetEId) {
		return A2(
			_user$project$Utils$mapFirstSuccess,
			function (_p37) {
				var _p38 = _p37;
				return _elm_lang$core$Native_Utils.eq(_p38._0.val.eid, targetEId) ? _elm_lang$core$Maybe$Just(_p38._1) : _elm_lang$core$Maybe$Nothing;
			},
			_user$project$LangTools$expPathsInExpList(exps));
	});
var _user$project$LangTools$followPathInPat = F2(
	function (path, pat) {
		followPathInPat:
		while (true) {
			var _p39 = {ctor: '_Tuple2', _0: pat.val.p__, _1: path};
			_v20_5:
			do {
				if (_p39.ctor === '_Tuple2') {
					if (_p39._1.ctor === '[]') {
						return _elm_lang$core$Maybe$Just(pat);
					} else {
						switch (_p39._0.ctor) {
							case 'PAs':
								if (_p39._1._0 === 1) {
									var _v21 = _p39._1._1,
										_v22 = _p39._0._3;
									path = _v21;
									pat = _v22;
									continue followPathInPat;
								} else {
									break _v20_5;
								}
							case 'PParens':
								if (_p39._1._0 === 1) {
									var _v23 = _p39._1._1,
										_v24 = _p39._0._1;
									path = _v23;
									pat = _v24;
									continue followPathInPat;
								} else {
									break _v20_5;
								}
							case 'PList':
								if (_p39._0._3.ctor === 'Nothing') {
									return A2(
										_elm_lang$core$Maybe$andThen,
										function (p) {
											return A2(_user$project$LangTools$followPathInPat, _p39._1._1, p);
										},
										A2(_user$project$Utils$maybeGeti1, _p39._1._0, _p39._0._1));
								} else {
									return A2(
										_elm_lang$core$Maybe$andThen,
										function (p) {
											return A2(_user$project$LangTools$followPathInPat, _p39._1._1, p);
										},
										A2(
											_user$project$Utils$maybeGeti1,
											_p39._1._0,
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p39._0._1,
												{
													ctor: '::',
													_0: _p39._0._3._0,
													_1: {ctor: '[]'}
												})));
								}
							default:
								break _v20_5;
						}
					}
				} else {
					break _v20_5;
				}
			} while(false);
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LangTools$findScopeExpAndPatByPathedPatternId = F2(
	function (_p40, exp) {
		var _p41 = _p40;
		var _p44 = _p41._1;
		var maybeScopeExp = A2(_user$project$Lang$findExpByEId, exp, _p41._0._0);
		var maybePat = function () {
			var _p43 = {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Maybe$map,
					function (_p42) {
						return function (_) {
							return _.e__;
						}(
							function (_) {
								return _.val;
							}(_p42));
					},
					maybeScopeExp),
				_1: _p44
			};
			_v26_3:
			do {
				if ((_p43.ctor === '_Tuple2') && (_p43._0.ctor === 'Just')) {
					switch (_p43._0._0.ctor) {
						case 'ELet':
							return A2(_user$project$LangTools$followPathInPat, _p44, _p43._0._0._3);
						case 'EFun':
							if (_p43._1.ctor === '::') {
								return A2(
									_elm_lang$core$Maybe$andThen,
									function (pat) {
										return A2(_user$project$LangTools$followPathInPat, _p43._1._1, pat);
									},
									A2(_user$project$Utils$maybeGeti1, _p43._1._0, _p43._0._0._1));
							} else {
								break _v26_3;
							}
						case 'ECase':
							return A2(
								_elm_lang$core$Maybe$andThen,
								function (pat) {
									return A2(_user$project$LangTools$followPathInPat, _p44, pat);
								},
								A2(
									_user$project$Utils$maybeGeti1,
									_p41._0._1,
									_user$project$Lang$branchPats(_p43._0._0._2)));
						default:
							break _v26_3;
					}
				} else {
					break _v26_3;
				}
			} while(false);
			return _elm_lang$core$Maybe$Nothing;
		}();
		return A2(
			_elm_lang$core$Maybe$map,
			function (pat) {
				return {
					ctor: '_Tuple2',
					_0: _user$project$Utils$fromJust(maybeScopeExp),
					_1: pat
				};
			},
			maybePat);
	});
var _user$project$LangTools$findPatByPathedPatternId = F2(
	function (pathedPatId, exp) {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Tuple$second,
			A2(_user$project$LangTools$findScopeExpAndPatByPathedPatternId, pathedPatId, exp));
	});
var _user$project$LangTools$pathedPatternIdToPId = F2(
	function (pathedPatId, exp) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p45) {
				return function (_) {
					return _.pid;
				}(
					function (_) {
						return _.val;
					}(_p45));
			},
			A2(_user$project$LangTools$findPatByPathedPatternId, pathedPatId, exp));
	});
var _user$project$LangTools$findScopeAreas = F2(
	function (_p46, exp) {
		var _p47 = _p46;
		var maybeScopeExp = A2(_user$project$Lang$findExpByEId, exp, _p47._0);
		var _p49 = A2(
			_elm_lang$core$Maybe$map,
			function (_p48) {
				return function (_) {
					return _.e__;
				}(
					function (_) {
						return _.val;
					}(_p48));
			},
			maybeScopeExp);
		_v28_3:
		do {
			if (_p49.ctor === 'Just') {
				switch (_p49._0.ctor) {
					case 'ELet':
						var _p50 = _p49._0._7;
						return _p49._0._2 ? {
							ctor: '::',
							_0: _p49._0._5,
							_1: {
								ctor: '::',
								_0: _p50,
								_1: {ctor: '[]'}
							}
						} : {
							ctor: '::',
							_0: _p50,
							_1: {ctor: '[]'}
						};
					case 'EFun':
						return {
							ctor: '::',
							_0: _p49._0._2,
							_1: {ctor: '[]'}
						};
					case 'ECase':
						return A2(
							_elm_lang$core$Maybe$withDefault,
							{ctor: '[]'},
							A2(
								_elm_lang$core$Maybe$map,
								function (branch) {
									return {
										ctor: '::',
										_0: branch,
										_1: {ctor: '[]'}
									};
								},
								A2(
									_user$project$Utils$maybeGeti1,
									_p47._1,
									_user$project$Lang$branchExps(_p49._0._2))));
					default:
						break _v28_3;
				}
			} else {
				break _v28_3;
			}
		} while(false);
		return {ctor: '[]'};
	});
var _user$project$LangTools$patToExp = function (pat) {
	return _user$project$Lang$withDummyExpInfo(
		function () {
			var _p51 = pat.val.p__;
			switch (_p51.ctor) {
				case 'PVar':
					return A2(_user$project$Lang$EVar, _p51._0, _p51._1);
				case 'PAs':
					return A2(_user$project$Lang$EVar, _p51._0, _p51._1);
				case 'PList':
					return A5(
						_user$project$Lang$EList,
						_p51._0,
						A2(
							_elm_lang$core$List$map,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								})(_user$project$Lang$space0),
							A2(_elm_lang$core$List$map, _user$project$LangTools$patToExp, _p51._1)),
						_p51._2,
						A2(_elm_lang$core$Maybe$map, _user$project$LangTools$patToExp, _p51._3),
						_p51._4);
				case 'PConst':
					return A4(_user$project$Lang$EConst, _p51._0, _p51._1, _user$project$Lang$dummyLoc, _user$project$Lang$noWidgetDecl);
				case 'PBase':
					return A2(_user$project$Lang$EBase, _p51._0, _p51._1);
				case 'PParens':
					return _user$project$LangTools$patToExp(_p51._1).val.e__;
				default:
					var _p52 = _elm_lang$core$Debug$log('WARNING: patToExp: PWildcard');
					return A4(_user$project$Lang$EConst, _p51._0, -9999, _user$project$Lang$dummyLoc, _user$project$Lang$noWidgetDecl);
			}
		}());
};
var _user$project$LangTools$setPatNameInPat = F3(
	function (path, newName, pat) {
		var _p53 = {ctor: '_Tuple2', _0: pat.val.p__, _1: path};
		_v30_6:
		do {
			if (_p53.ctor === '_Tuple2') {
				if (_p53._1.ctor === '[]') {
					switch (_p53._0.ctor) {
						case 'PVar':
							return A2(
								_user$project$Lang$replaceP__,
								pat,
								A3(_user$project$Lang$PVar, _p53._0._0, newName, _p53._0._2));
						case 'PAs':
							return A2(
								_user$project$Lang$replaceP__,
								pat,
								A4(_user$project$Lang$PAs, _p53._0._0, newName, _p53._0._2, _p53._0._3));
						default:
							break _v30_6;
					}
				} else {
					switch (_p53._0.ctor) {
						case 'PAs':
							if (_p53._1._0 === 1) {
								return A2(
									_user$project$Lang$replaceP__,
									pat,
									A4(
										_user$project$Lang$PAs,
										_p53._0._0,
										_p53._0._1,
										_p53._0._2,
										A3(_user$project$LangTools$setPatNameInPat, _p53._1._1, newName, _p53._0._3)));
							} else {
								break _v30_6;
							}
						case 'PList':
							if (_p53._0._3.ctor === 'Nothing') {
								var newPs = A3(
									_user$project$Utils$getReplacei1,
									_p53._1._0,
									A2(_user$project$LangTools$setPatNameInPat, _p53._1._1, newName),
									_p53._0._1);
								return A2(
									_user$project$Lang$replaceP__,
									pat,
									A5(_user$project$Lang$PList, _p53._0._0, newPs, _p53._0._2, _elm_lang$core$Maybe$Nothing, _p53._0._4));
							} else {
								var _p60 = _p53._0._4;
								var _p59 = _p53._0._2;
								var _p58 = _p53._0._0;
								var _p57 = _p53._0._3._0;
								var _p56 = _p53._0._1;
								var _p55 = _p53._1._1;
								var _p54 = _p53._1._0;
								if (_elm_lang$core$Native_Utils.cmp(
									_p54,
									_elm_lang$core$List$length(_p56)) < 1) {
									var newPs = A3(
										_user$project$Utils$getReplacei1,
										_p54,
										A2(_user$project$LangTools$setPatNameInPat, _p55, newName),
										_p56);
									return A2(
										_user$project$Lang$replaceP__,
										pat,
										A5(
											_user$project$Lang$PList,
											_p58,
											newPs,
											_p59,
											_elm_lang$core$Maybe$Just(_p57),
											_p60));
								} else {
									if (_elm_lang$core$Native_Utils.eq(
										_p54,
										_elm_lang$core$List$length(_p56) + 1)) {
										return A2(
											_user$project$Lang$replaceP__,
											pat,
											A5(
												_user$project$Lang$PList,
												_p58,
												_p56,
												_p59,
												_elm_lang$core$Maybe$Just(
													A3(_user$project$LangTools$setPatNameInPat, _p55, newName, _p57)),
												_p60));
									} else {
										return pat;
									}
								}
							}
						case 'PParens':
							if (_p53._1._0 === 1) {
								return A2(
									_user$project$Lang$replaceP__,
									pat,
									A3(
										_user$project$Lang$PParens,
										_p53._0._0,
										A3(_user$project$LangTools$setPatNameInPat, _p53._1._1, newName, _p53._0._1),
										_p53._0._2));
							} else {
								break _v30_6;
							}
						default:
							break _v30_6;
					}
				}
			} else {
				break _v30_6;
			}
		} while(false);
		return pat;
	});
var _user$project$LangTools$setPatName = F3(
	function (_p61, newName, exp) {
		var _p62 = _p61;
		var _p72 = _p62._1;
		var _p71 = _p62._0._1;
		var maybeScopeExp = A2(_user$project$Lang$findExpByEId, exp, _p62._0._0);
		var maybeNewScopeExp = function () {
			var makeNewScope = function (e__) {
				return A2(
					_user$project$Lang$replaceE__,
					_user$project$Utils$fromJust(maybeScopeExp),
					e__);
			};
			var _p64 = {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Maybe$map,
					function (_p63) {
						return function (_) {
							return _.e__;
						}(
							function (_) {
								return _.val;
							}(_p63));
					},
					maybeScopeExp),
				_1: _p72
			};
			_v32_3:
			do {
				if ((_p64.ctor === '_Tuple2') && (_p64._0.ctor === 'Just')) {
					switch (_p64._0._0.ctor) {
						case 'ELet':
							var newPat = A3(_user$project$LangTools$setPatNameInPat, _p72, newName, _p64._0._0._3);
							return _elm_lang$core$Maybe$Just(
								makeNewScope(
									A9(_user$project$Lang$ELet, _p64._0._0._0, _p64._0._0._1, _p64._0._0._2, newPat, _p64._0._0._4, _p64._0._0._5, _p64._0._0._6, _p64._0._0._7, _p64._0._0._8)));
						case 'EFun':
							if (_p64._1.ctor === '::') {
								var _p66 = _p64._0._0._1;
								var _p65 = _p64._1._0;
								return A2(
									_elm_lang$core$Maybe$map,
									function (pat) {
										var newPat = A3(_user$project$LangTools$setPatNameInPat, _p64._1._1, newName, pat);
										return makeNewScope(
											A4(
												_user$project$Lang$EFun,
												_p64._0._0._0,
												A3(_user$project$Utils$replacei, _p65, newPat, _p66),
												_p64._0._0._2,
												_p64._0._0._3));
									},
									A2(_user$project$Utils$maybeGeti1, _p65, _p66));
							} else {
								break _v32_3;
							}
						case 'ECase':
							var _p68 = _p64._0._0._2;
							return A2(
								_elm_lang$core$Maybe$map,
								function (branch) {
									var _p67 = branch.val;
									var ws1 = _p67._0;
									var pat = _p67._1;
									var exp = _p67._2;
									var ws2 = _p67._3;
									var newPat = A3(_user$project$LangTools$setPatNameInPat, _p72, newName, pat);
									var newBranch = _elm_lang$core$Native_Utils.update(
										branch,
										{
											val: A4(_user$project$Lang$Branch_, ws1, newPat, exp, ws2)
										});
									return makeNewScope(
										A4(
											_user$project$Lang$ECase,
											ws1,
											_p64._0._0._1,
											A3(_user$project$Utils$replacei, _p71, newBranch, _p68),
											ws2));
								},
								A2(_user$project$Utils$maybeGeti1, _p71, _p68));
						default:
							break _v32_3;
					}
				} else {
					break _v32_3;
				}
			} while(false);
			return _elm_lang$core$Maybe$Nothing;
		}();
		var _p69 = maybeNewScopeExp;
		if (_p69.ctor === 'Just') {
			var _p70 = _p69._0;
			return A3(_user$project$Lang$replaceExpNode, _p70.val.eid, _p70, exp);
		} else {
			return exp;
		}
	});
var _user$project$LangTools$renameIdentifiersInPat = F2(
	function (subst, pat) {
		var recurse = _user$project$LangTools$renameIdentifiersInPat(subst);
		var recurseList = _elm_lang$core$List$map(recurse);
		var pat__ = function () {
			var _p73 = pat.val.p__;
			switch (_p73.ctor) {
				case 'PVar':
					var _p74 = A2(_elm_lang$core$Dict$get, _p73._1, subst);
					if (_p74.ctor === 'Just') {
						return A3(_user$project$Lang$PVar, _p73._0, _p74._0, _p73._2);
					} else {
						return pat.val.p__;
					}
				case 'PList':
					if (_p73._3.ctor === 'Nothing') {
						return A5(
							_user$project$Lang$PList,
							_p73._0,
							recurseList(_p73._1),
							_p73._2,
							_elm_lang$core$Maybe$Nothing,
							_p73._4);
					} else {
						return A5(
							_user$project$Lang$PList,
							_p73._0,
							recurseList(_p73._1),
							_p73._2,
							_elm_lang$core$Maybe$Just(
								recurse(_p73._3._0)),
							_p73._4);
					}
				case 'PAs':
					var _p79 = _p73._2;
					var _p78 = _p73._0;
					var _p77 = _p73._3;
					var _p76 = _p73._1;
					var _p75 = A2(_elm_lang$core$Dict$get, _p76, subst);
					if (_p75.ctor === 'Just') {
						return A4(
							_user$project$Lang$PAs,
							_p78,
							_p75._0,
							_p79,
							recurse(_p77));
					} else {
						return A4(
							_user$project$Lang$PAs,
							_p78,
							_p76,
							_p79,
							recurse(_p77));
					}
				case 'PParens':
					return A3(
						_user$project$Lang$PParens,
						_p73._0,
						recurse(_p73._1),
						_p73._2);
				default:
					return pat.val.p__;
			}
		}();
		return A2(_user$project$Lang$replaceP__, pat, pat__);
	});
var _user$project$LangTools$renameIdentifiersInPats = F2(
	function (subst, pats) {
		return A2(
			_elm_lang$core$List$map,
			_user$project$LangTools$renameIdentifiersInPat(subst),
			pats);
	});
var _user$project$LangTools$renameIdentifiers = F2(
	function (subst, exp) {
		var exp__Renamer = function (e__) {
			var _p80 = e__;
			switch (_p80.ctor) {
				case 'EVar':
					var _p81 = A2(_elm_lang$core$Dict$get, _p80._1, subst);
					if (_p81.ctor === 'Just') {
						return A2(_user$project$Lang$EVar, _p80._0, _p81._0);
					} else {
						return e__;
					}
				case 'EFun':
					return A4(
						_user$project$Lang$EFun,
						_p80._0,
						A2(_user$project$LangTools$renameIdentifiersInPats, subst, _p80._1),
						_p80._2,
						_p80._3);
				case 'ECase':
					var branches_ = A2(
						_elm_lang$core$List$map,
						_user$project$Lang$mapValField(
							function (_p82) {
								var _p83 = _p82;
								return A4(
									_user$project$Lang$Branch_,
									_p83._0,
									A2(_user$project$LangTools$renameIdentifiersInPat, subst, _p83._1),
									_p83._2,
									_p83._3);
							}),
						_p80._2);
					return A4(_user$project$Lang$ECase, _p80._0, _p80._1, branches_, _p80._3);
				case 'ELet':
					return A9(
						_user$project$Lang$ELet,
						_p80._0,
						_p80._1,
						_p80._2,
						A2(_user$project$LangTools$renameIdentifiersInPat, subst, _p80._3),
						_p80._4,
						_p80._5,
						_p80._6,
						_p80._7,
						_p80._8);
				default:
					return e__;
			}
		};
		return A2(_user$project$Lang$mapExpViaExp__, exp__Renamer, exp);
	});
var _user$project$LangTools$renameIdentifier = F3(
	function (old, $new, exp) {
		return A2(
			_user$project$LangTools$renameIdentifiers,
			A2(_elm_lang$core$Dict$singleton, old, $new),
			exp);
	});
var _user$project$LangTools$renameIdentifierInPat = F3(
	function (old, $new, pat) {
		return A2(
			_user$project$LangTools$renameIdentifiersInPat,
			A2(_elm_lang$core$Dict$singleton, old, $new),
			pat);
	});
var _user$project$LangTools$renameIdentifierInPats = F3(
	function (old, $new, pats) {
		return A2(
			_elm_lang$core$List$map,
			A2(_user$project$LangTools$renameIdentifierInPat, old, $new),
			pats);
	});
var _user$project$LangTools$nonCollidingNames = F3(
	function (suggestedNames, i, existingNames) {
		nonCollidingNames:
		while (true) {
			var plainSuggestedNames = A2(
				_elm_lang$core$List$map,
				A2(_user$project$Utils$stringReplace, '{n}', ''),
				suggestedNames);
			if (!A2(_user$project$Utils$anyOverlapListSet, plainSuggestedNames, existingNames)) {
				return plainSuggestedNames;
			} else {
				var newNames = A2(
					_elm_lang$core$List$map,
					function (name) {
						return A2(_elm_lang$core$String$contains, '{n}', name) ? A3(
							_user$project$Utils$stringReplace,
							'{n}',
							_elm_lang$core$Basics$toString(i),
							name) : A2(
							_elm_lang$core$Basics_ops['++'],
							name,
							_elm_lang$core$Basics$toString(i));
					},
					suggestedNames);
				if (!A2(_user$project$Utils$anyOverlapListSet, newNames, existingNames)) {
					return newNames;
				} else {
					var _v40 = suggestedNames,
						_v41 = i + 1,
						_v42 = existingNames;
					suggestedNames = _v40;
					i = _v41;
					existingNames = _v42;
					continue nonCollidingNames;
				}
			}
		}
	});
var _user$project$LangTools$nonCollidingName = F3(
	function (suggestedName, i, existingNames) {
		return A2(
			_user$project$Utils$head,
			'LangTools.nonCollidingNames did not satisfy its invariant',
			A3(
				_user$project$LangTools$nonCollidingNames,
				{
					ctor: '::',
					_0: suggestedName,
					_1: {ctor: '[]'}
				},
				i,
				existingNames));
	});
var _user$project$LangTools$allRootPats = function (exp) {
	return A2(
		_elm_lang$core$List$concatMap,
		function (e) {
			var _p84 = e.val.e__;
			switch (_p84.ctor) {
				case 'EFun':
					return _p84._1;
				case 'ECase':
					return _user$project$Lang$branchPats(_p84._2);
				case 'ELet':
					return {
						ctor: '::',
						_0: _p84._3,
						_1: {ctor: '[]'}
					};
				case 'ETyp':
					return {
						ctor: '::',
						_0: _p84._1,
						_1: {ctor: '[]'}
					};
				case 'ETypeAlias':
					return {
						ctor: '::',
						_0: _p84._1,
						_1: {ctor: '[]'}
					};
				default:
					return {ctor: '[]'};
			}
		},
		_user$project$Lang$flattenExpTree(exp));
};
var _user$project$LangTools$allPats = function (_p85) {
	return A2(
		_elm_lang$core$List$concatMap,
		_user$project$Lang$flattenPatTree,
		_user$project$LangTools$allRootPats(_p85));
};
var _user$project$LangTools$expToMaybeHoleName = function (exp) {
	var _p86 = exp.val.e__;
	if ((_p86.ctor === 'EHole') && (_p86._1.ctor === 'HoleNamed')) {
		return _elm_lang$core$Maybe$Just(_p86._1._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToMaybeHoleLocId = function (exp) {
	var _p87 = exp.val.e__;
	if ((_p87.ctor === 'EHole') && (_p87._1.ctor === 'HoleLoc')) {
		return _elm_lang$core$Maybe$Just(_p87._1._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToMaybeHoleVal = function (exp) {
	var _p88 = exp.val.e__;
	if ((_p88.ctor === 'EHole') && (_p88._1.ctor === 'HoleVal')) {
		return _elm_lang$core$Maybe$Just(_p88._1._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToHoleVal = function (exp) {
	var _p89 = exp.val.e__;
	if ((_p89.ctor === 'EHole') && (_p89._1.ctor === 'HoleVal')) {
		return _p89._1._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1630, column: 3},
				end: {line: 1632, column: 116}
			},
			_p89)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToHoleVal exp is not an val hole: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToMaybeAppArgs = function (exp) {
	var _p91 = exp.val.e__;
	if (_p91.ctor === 'EApp') {
		return _elm_lang$core$Maybe$Just(_p91._2);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToMaybeAppFunc = function (exp) {
	var _p92 = exp.val.e__;
	if (_p92.ctor === 'EApp') {
		return _elm_lang$core$Maybe$Just(_p92._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToAppFunc = function (exp) {
	var _p93 = exp.val.e__;
	if (_p93.ctor === 'EApp') {
		return _p93._1;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1609, column: 3},
				end: {line: 1611, column: 108}
			},
			_p93)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToAppFunc exp is not an EApp: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToAppFuncAndArgs = function (exp) {
	var _p95 = exp.val.e__;
	if (_p95.ctor === 'EApp') {
		return {ctor: '_Tuple2', _0: _p95._1, _1: _p95._2};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1602, column: 3},
				end: {line: 1604, column: 118}
			},
			_p95)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToAppFuncAndArgs exp is not an EApp: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToAppArgs = function (exp) {
	var _p97 = exp.val.e__;
	if (_p97.ctor === 'EApp') {
		return _p97._2;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1595, column: 3},
				end: {line: 1597, column: 108}
			},
			_p97)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToAppArgs exp is not an EApp: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToCaseScrutinee = function (exp) {
	var _p99 = exp.val.e__;
	if (_p99.ctor === 'ECase') {
		return _p99._1;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1588, column: 3},
				end: {line: 1590, column: 115}
			},
			_p99)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToScrutinee exp is not an ECase: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$mapFuncBody = F2(
	function (f, exp) {
		var _p101 = exp.val.e__;
		if (_p101.ctor === 'EFun') {
			return A2(
				_user$project$Lang$replaceE__,
				exp,
				A4(
					_user$project$Lang$EFun,
					_p101._0,
					_p101._1,
					f(_p101._2),
					_p101._3));
		} else {
			var _p102 = _user$project$Utils$log('Warning: called LangTools.mapFuncBody on a non-func exp');
			return exp;
		}
	});
var _user$project$LangTools$mapFuncPats = F2(
	function (f, exp) {
		var _p103 = exp.val.e__;
		if (_p103.ctor === 'EFun') {
			return A2(
				_user$project$Lang$replaceE__,
				exp,
				A4(
					_user$project$Lang$EFun,
					_p103._0,
					f(_p103._1),
					_p103._2,
					_p103._3));
		} else {
			var _p104 = _user$project$Utils$log('Warning: called LangTools.mapFuncPats on a non-func exp');
			return exp;
		}
	});
var _user$project$LangTools$expToMaybeFuncPatsAndBody = function (exp) {
	var _p105 = exp.val.e__;
	if (_p105.ctor === 'EFun') {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p105._1, _1: _p105._2});
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToMaybeFuncBody = function (exp) {
	var _p106 = exp.val.e__;
	if (_p106.ctor === 'EFun') {
		return _elm_lang$core$Maybe$Just(_p106._2);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToFuncBody = function (exp) {
	var _p107 = exp.val.e__;
	if (_p107.ctor === 'EFun') {
		return _p107._2;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1554, column: 3},
				end: {line: 1556, column: 111}
			},
			_p107)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToFuncBody exp is not an EFun: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToMaybeFuncPats = function (exp) {
	var _p109 = exp.val.e__;
	if (_p109.ctor === 'EFun') {
		return _elm_lang$core$Maybe$Just(_p109._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToFuncPats = function (exp) {
	var _p110 = exp.val.e__;
	if (_p110.ctor === 'EFun') {
		return _p110._1;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1540, column: 3},
				end: {line: 1542, column: 107}
			},
			_p110)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToFuncPats exp is not an EFun: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToLetScopeAreas = function (exp) {
	var _p112 = exp.val.e__;
	if (_p112.ctor === 'ELet') {
		var _p113 = _p112._7;
		return _p112._2 ? {
			ctor: '::',
			_0: _p112._5,
			_1: {
				ctor: '::',
				_0: _p113,
				_1: {ctor: '[]'}
			}
		} : {
			ctor: '::',
			_0: _p113,
			_1: {ctor: '[]'}
		};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1533, column: 3},
				end: {line: 1535, column: 133}
			},
			_p112)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToLetScopeAreas exp is not an ELet: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToMaybeLetBody = function (exp) {
	var _p115 = exp.val.e__;
	if (_p115.ctor === 'ELet') {
		return _elm_lang$core$Maybe$Just(_p115._7);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToLetBody = function (exp) {
	var _p116 = exp.val.e__;
	if (_p116.ctor === 'ELet') {
		return _p116._7;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1519, column: 3},
				end: {line: 1521, column: 116}
			},
			_p116)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToLetBody exp is not an ELet: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToMaybeLetPatAndBoundExp = function (exp) {
	var _p118 = exp.val.e__;
	if (_p118.ctor === 'ELet') {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p118._3, _1: _p118._5});
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$findBoundExpByPathedPatternId = F2(
	function (_p119, exp) {
		var _p120 = _p119;
		var _p121 = A2(
			_elm_lang$core$Maybe$andThen,
			_user$project$LangTools$expToMaybeLetPatAndBoundExp,
			A2(_user$project$Lang$findExpByEId, exp, _p120._0._0));
		if (_p121.ctor === 'Just') {
			return A2(
				_user$project$Utils$mapFirstSuccess,
				function (_p122) {
					var _p123 = _p122;
					return _elm_lang$core$Native_Utils.eq(_p123._0, _p120._1) ? _elm_lang$core$Maybe$Just(_p123._1) : _elm_lang$core$Maybe$Nothing;
				},
				A2(_user$project$LangTools$tryMatchExpPatToPaths, _p121._0._0, _p121._0._1));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LangTools$expToLetPatAndBoundExp = function (exp) {
	var _p124 = exp.val.e__;
	if (_p124.ctor === 'ELet') {
		return {ctor: '_Tuple2', _0: _p124._3, _1: _p124._5};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1505, column: 3},
				end: {line: 1507, column: 132}
			},
			_p124)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToLetPatAndBoundExp exp is not an ELet: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToMaybeLetBoundExp = function (exp) {
	var _p126 = exp.val.e__;
	if (_p126.ctor === 'ELet') {
		return _elm_lang$core$Maybe$Just(_p126._5);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToLetBoundExp = function (exp) {
	var _p127 = exp.val.e__;
	if (_p127.ctor === 'ELet') {
		return _p127._5;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1491, column: 3},
				end: {line: 1493, column: 119}
			},
			_p127)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToLetPat exp is not an ELet: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToMaybeLetPat = function (exp) {
	var _p129 = exp.val.e__;
	if (_p129.ctor === 'ELet') {
		return _elm_lang$core$Maybe$Just(_p129._3);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToLetPat = function (exp) {
	var _p130 = exp.val.e__;
	if (_p130.ctor === 'ELet') {
		return _p130._3;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1477, column: 3},
				end: {line: 1479, column: 114}
			},
			_p130)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToLetPat exp is not an ELet: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToLetRec = function (exp) {
	var _p132 = exp.val.e__;
	if (_p132.ctor === 'ELet') {
		return _p132._2;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1470, column: 3},
				end: {line: 1472, column: 116}
			},
			_p132)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToLetRec exp is not an ELet: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToLetKind = function (exp) {
	var _p134 = exp.val.e__;
	if (_p134.ctor === 'ELet') {
		return _p134._1;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1463, column: 3},
				end: {line: 1465, column: 114}
			},
			_p134)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToLetKind exp is not an ELet: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToMaybeLetParts = function (exp) {
	var _p136 = exp.val.e__;
	if (_p136.ctor === 'ELet') {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple9', _0: _p136._0, _1: _p136._1, _2: _p136._2, _3: _p136._3, _4: _p136._4, _5: _p136._5, _6: _p136._6, _7: _p136._7, _8: _p136._8});
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToLetParts = function (exp) {
	var _p137 = exp.val.e__;
	if (_p137.ctor === 'ELet') {
		return {ctor: '_Tuple9', _0: _p137._0, _1: _p137._1, _2: _p137._2, _3: _p137._3, _4: _p137._4, _5: _p137._5, _6: _p137._6, _7: _p137._7, _8: _p137._8};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1449, column: 3},
				end: {line: 1451, column: 133}
			},
			_p137)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToLetParts exp is not an ELet: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToMaybeListHeads = function (exp) {
	var _p139 = exp.val.e__;
	if (_p139.ctor === 'EList') {
		return _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p139._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToListHeads = function (exp) {
	var _p140 = exp.val.e__;
	if (_p140.ctor === 'EList') {
		return A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p140._1);
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1435, column: 3},
				end: {line: 1437, column: 127}
			},
			_p140)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToListHeads exp is not an EList: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$expToListParts = function (exp) {
	var _p142 = exp.val.e__;
	if (_p142.ctor === 'EList') {
		return {
			ctor: '_Tuple5',
			_0: _p142._0,
			_1: A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p142._1),
			_2: _p142._2,
			_3: _p142._3,
			_4: _p142._4
		};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1428, column: 3},
				end: {line: 1430, column: 127}
			},
			_p142)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToListParts exp is not an EList: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$patToMaybePVarIdent = function (pat) {
	var _p144 = pat.val.p__;
	if (_p144.ctor === 'PVar') {
		return _elm_lang$core$Maybe$Just(_p144._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$patToMaybeIdent = function (pat) {
	var _p145 = pat.val.p__;
	switch (_p145.ctor) {
		case 'PVar':
			return _elm_lang$core$Maybe$Just(_p145._1);
		case 'PAs':
			return _elm_lang$core$Maybe$Just(_p145._1);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$identifiersListInPat = function (pat) {
	return A2(
		_elm_lang$core$List$filterMap,
		_user$project$LangTools$patToMaybeIdent,
		_user$project$Lang$flattenPatTree(pat));
};
var _user$project$LangTools$identifiersSetInPat = function (pat) {
	return _elm_lang$core$Set$fromList(
		_user$project$LangTools$identifiersListInPat(pat));
};
var _user$project$LangTools$identifiersSetInPats = function (pats) {
	return _user$project$Utils$unionAll(
		A2(_elm_lang$core$List$map, _user$project$LangTools$identifiersSetInPat, pats));
};
var _user$project$LangTools$visibleIdentifiersAtPredicate_ = F3(
	function (idents, exp, pred) {
		var ret = function (deeperIdents) {
			return (_elm_lang$core$Native_Utils.eq(
				0,
				_elm_lang$core$Set$size(deeperIdents)) && pred(exp)) ? idents : deeperIdents;
		};
		var recurse = function (e) {
			return A3(_user$project$LangTools$visibleIdentifiersAtPredicate_, idents, e, pred);
		};
		var recurseAllChildren = function (_p146) {
			var _p147 = _p146;
			return _user$project$Utils$unionAll(
				A2(
					_elm_lang$core$List$map,
					recurse,
					_user$project$Lang$childExps(exp)));
		};
		var recurseWithNewIdents = F2(
			function (pats, e) {
				return A3(
					_user$project$LangTools$visibleIdentifiersAtPredicate_,
					A2(
						_elm_lang$core$Set$union,
						_user$project$LangTools$identifiersSetInPats(pats),
						idents),
					e,
					pred);
			});
		var _p148 = exp.val.e__;
		switch (_p148.ctor) {
			case 'EConst':
				return ret(_elm_lang$core$Set$empty);
			case 'EBase':
				return ret(_elm_lang$core$Set$empty);
			case 'EVar':
				return ret(_elm_lang$core$Set$empty);
			case 'EFun':
				return ret(
					A2(recurseWithNewIdents, _p148._1, _p148._2));
			case 'EOp':
				return ret(
					recurseAllChildren(
						{ctor: '_Tuple0'}));
			case 'EList':
				return ret(
					recurseAllChildren(
						{ctor: '_Tuple0'}));
			case 'EIf':
				return ret(
					recurseAllChildren(
						{ctor: '_Tuple0'}));
			case 'ECase':
				var scrutineeResult = recurse(_p148._1);
				var branchResults = A2(
					_elm_lang$core$List$map,
					function (_p149) {
						var _p150 = _p149;
						return A2(
							recurseWithNewIdents,
							{
								ctor: '::',
								_0: _p150._1,
								_1: {ctor: '[]'}
							},
							_p150._2);
					},
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.val;
						},
						_p148._2));
				return ret(
					_user$project$Utils$unionAll(
						{ctor: '::', _0: scrutineeResult, _1: branchResults}));
			case 'ETypeCase':
				return ret(
					recurseAllChildren(
						{ctor: '_Tuple0'}));
			case 'EApp':
				return ret(
					recurseAllChildren(
						{ctor: '_Tuple0'}));
			case 'ELet':
				if (_p148._2 === false) {
					var assignResult = recurse(_p148._5);
					var bodyResult = A2(
						recurseWithNewIdents,
						{
							ctor: '::',
							_0: _p148._3,
							_1: {ctor: '[]'}
						},
						_p148._7);
					return ret(
						A2(_elm_lang$core$Set$union, assignResult, bodyResult));
				} else {
					var _p151 = _p148._3;
					var assignResult = A2(
						recurseWithNewIdents,
						{
							ctor: '::',
							_0: _p151,
							_1: {ctor: '[]'}
						},
						_p148._5);
					var bodyResult = A2(
						recurseWithNewIdents,
						{
							ctor: '::',
							_0: _p151,
							_1: {ctor: '[]'}
						},
						_p148._7);
					return ret(
						A2(_elm_lang$core$Set$union, assignResult, bodyResult));
				}
			case 'EComment':
				return ret(
					recurse(_p148._2));
			case 'EOption':
				return ret(
					recurse(_p148._4));
			case 'ETyp':
				return ret(
					recurse(_p148._3));
			case 'EColonType':
				return ret(
					recurse(_p148._1));
			case 'ETypeAlias':
				return ret(
					recurse(_p148._3));
			case 'EParens':
				return ret(
					recurse(_p148._1));
			default:
				return ret(
					recurseAllChildren(
						{ctor: '_Tuple0'}));
		}
	});
var _user$project$LangTools$visibleIdentifiersAtPredicateNoPrelude = F2(
	function (exp, pred) {
		return A3(_user$project$LangTools$visibleIdentifiersAtPredicate_, _elm_lang$core$Set$empty, exp, pred);
	});
var _user$project$LangTools$preludeIdentifiers = function () {
	var preludeViewerEId = _user$project$Lang$expEffectiveExp(_user$project$FastParser$prelude).val.eid;
	return A2(
		_user$project$LangTools$visibleIdentifiersAtPredicateNoPrelude,
		_user$project$FastParser$prelude,
		function (_p152) {
			return A2(
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					}),
				preludeViewerEId,
				function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p152)));
		});
}();
var _user$project$LangTools$visibleIdentifiersAtEIds = F2(
	function (program, eids) {
		var programIdents = A2(
			_user$project$LangTools$visibleIdentifiersAtPredicateNoPrelude,
			program,
			function (exp) {
				return A2(_elm_lang$core$Set$member, exp.val.eid, eids);
			});
		return A2(_elm_lang$core$Set$union, programIdents, _user$project$LangTools$preludeIdentifiers);
	});
var _user$project$LangTools$transformVarsUntilBound = F2(
	function (subst, exp) {
		var recurse = function (e) {
			return A2(_user$project$LangTools$transformVarsUntilBound, subst, e);
		};
		var recurseWithout = F2(
			function (introducedIdents, e) {
				var newSubst = A3(
					_elm_lang$core$List$foldl,
					_elm_lang$core$Dict$remove,
					subst,
					_elm_lang$core$Set$toList(introducedIdents));
				return _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Dict$size(newSubst),
					0) ? e : A2(_user$project$LangTools$transformVarsUntilBound, newSubst, e);
			});
		var _p153 = exp.val.e__;
		switch (_p153.ctor) {
			case 'EConst':
				return exp;
			case 'EBase':
				return exp;
			case 'EVar':
				var _p154 = A2(_elm_lang$core$Dict$get, _p153._1, subst);
				if (_p154.ctor === 'Just') {
					return _p154._0(exp);
				} else {
					return exp;
				}
			case 'EFun':
				var _p155 = _p153._1;
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A4(
						_user$project$Lang$EFun,
						_p153._0,
						_p155,
						A2(
							recurseWithout,
							_user$project$LangTools$identifiersSetInPats(_p155),
							_p153._2),
						_p153._3));
			case 'EOp':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A4(
						_user$project$Lang$EOp,
						_p153._0,
						_p153._1,
						A2(_elm_lang$core$List$map, recurse, _p153._2),
						_p153._3));
			case 'EList':
				var _p156 = _p153._1;
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A5(
						_user$project$Lang$EList,
						_p153._0,
						A2(
							_user$project$Utils$zip,
							A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p156),
							A2(
								_elm_lang$core$List$map,
								recurse,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p156))),
						_p153._2,
						A2(_elm_lang$core$Maybe$map, recurse, _p153._3),
						_p153._4));
			case 'EIf':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A7(
						_user$project$Lang$EIf,
						_p153._0,
						recurse(_p153._1),
						_p153._2,
						recurse(_p153._3),
						_p153._4,
						recurse(_p153._5),
						_p153._6));
			case 'ECase':
				var newScrutinee = recurse(_p153._1);
				var newBranches = A2(
					_elm_lang$core$List$map,
					_user$project$Lang$mapValField(
						function (_p157) {
							var _p158 = _p157;
							var _p159 = _p158._1;
							return A4(
								_user$project$Lang$Branch_,
								_p158._0,
								_p159,
								A2(
									recurseWithout,
									_user$project$LangTools$identifiersSetInPat(_p159),
									_p158._2),
								_p158._3);
						}),
					_p153._2);
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A4(_user$project$Lang$ECase, _p153._0, newScrutinee, newBranches, _p153._3));
			case 'ETypeCase':
				var newScrutinee = recurse(_p153._1);
				var newTBranches = A2(
					_elm_lang$core$List$map,
					_user$project$Lang$mapValField(
						function (_p160) {
							var _p161 = _p160;
							return A4(
								_user$project$Lang$TBranch_,
								_p161._0,
								_p161._1,
								recurse(_p161._2),
								_p161._3);
						}),
					_p153._2);
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A4(_user$project$Lang$ETypeCase, _p153._0, newScrutinee, newTBranches, _p153._3));
			case 'EApp':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A5(
						_user$project$Lang$EApp,
						_p153._0,
						recurse(_p153._1),
						A2(_elm_lang$core$List$map, recurse, _p153._2),
						_p153._3,
						_p153._4));
			case 'ELet':
				if (_p153._2 === false) {
					var _p162 = _p153._3;
					return A2(
						_user$project$Lang$replaceE__,
						exp,
						A9(
							_user$project$Lang$ELet,
							_p153._0,
							_p153._1,
							false,
							_p162,
							_p153._4,
							recurse(_p153._5),
							_p153._6,
							A2(
								recurseWithout,
								_user$project$LangTools$identifiersSetInPat(_p162),
								_p153._7),
							_p153._8));
				} else {
					var _p163 = _p153._3;
					return A2(
						_user$project$Lang$replaceE__,
						exp,
						A9(
							_user$project$Lang$ELet,
							_p153._0,
							_p153._1,
							true,
							_p163,
							_p153._4,
							A2(
								recurseWithout,
								_user$project$LangTools$identifiersSetInPat(_p163),
								_p153._5),
							_p153._6,
							A2(
								recurseWithout,
								_user$project$LangTools$identifiersSetInPat(_p163),
								_p153._7),
							_p153._8));
				}
			case 'EComment':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A3(
						_user$project$Lang$EComment,
						_p153._0,
						_p153._1,
						recurse(_p153._2)));
			case 'EOption':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A5(
						_user$project$Lang$EOption,
						_p153._0,
						_p153._1,
						_p153._2,
						_p153._3,
						recurse(_p153._4)));
			case 'ETyp':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A5(
						_user$project$Lang$ETyp,
						_p153._0,
						_p153._1,
						_p153._2,
						recurse(_p153._3),
						_p153._4));
			case 'EColonType':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A5(
						_user$project$Lang$EColonType,
						_p153._0,
						recurse(_p153._1),
						_p153._2,
						_p153._3,
						_p153._4));
			case 'ETypeAlias':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A5(
						_user$project$Lang$ETypeAlias,
						_p153._0,
						_p153._1,
						_p153._2,
						recurse(_p153._3),
						_p153._4));
			case 'EParens':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A4(
						_user$project$Lang$EParens,
						_p153._0,
						recurse(_p153._1),
						_p153._2,
						_p153._3));
			default:
				if (_p153._1.ctor === 'HolePBE') {
					return A2(
						_user$project$Lang$replaceE__,
						exp,
						A2(
							_user$project$Lang$EHole,
							_p153._0,
							A2(
								_user$project$Lang$HolePBE,
								A2(
									_elm_lang$core$List$map,
									function (_p164) {
										var _p165 = _p164;
										return {
											ctor: '_Tuple4',
											_0: _p165._0,
											_1: _p165._1,
											_2: _p165._2,
											_3: recurse(_p165._3)
										};
									},
									_p153._1._0),
								_p153._1._1)));
				} else {
					return exp;
				}
		}
	});
var _user$project$LangTools$renameVarsUntilBound = F2(
	function (renamings, exp) {
		var renamer = F2(
			function (newName, e) {
				var _p166 = e.val.e__;
				if (_p166.ctor === 'EVar') {
					return A2(
						_user$project$Lang$replaceE__,
						e,
						A2(_user$project$Lang$EVar, _p166._0, newName));
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'LangTools',
						{
							start: {line: 2641, column: 5},
							end: {line: 2643, column: 139}
						},
						_p166)(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'LangTools.renameVarsUntilBound: renamer should only be passed an EVar, but given: ',
							_elm_lang$core$Basics$toString(e)));
				}
			});
		var fnSubst = A2(
			_elm_lang$core$Dict$map,
			F2(
				function (_p168, newName) {
					return renamer(newName);
				}),
			renamings);
		return A2(_user$project$LangTools$transformVarsUntilBound, fnSubst, exp);
	});
var _user$project$LangTools$renameVarUntilBound = F3(
	function (oldName, newName, exp) {
		return A2(
			_user$project$LangTools$renameVarsUntilBound,
			A2(_elm_lang$core$Dict$singleton, oldName, newName),
			exp);
	});
var _user$project$LangTools$identifiersList = function (exp) {
	var folder = F2(
		function (e__, acc) {
			var _p169 = e__;
			switch (_p169.ctor) {
				case 'EVar':
					return {ctor: '::', _0: _p169._1, _1: acc};
				case 'EFun':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_elm_lang$core$List$concatMap, _user$project$LangTools$identifiersListInPat, _p169._1),
						acc);
				case 'ECase':
					var pats = _user$project$Lang$branchPats(_p169._2);
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_elm_lang$core$List$concatMap, _user$project$LangTools$identifiersListInPat, pats),
						acc);
				case 'ELet':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangTools$identifiersListInPat(_p169._3),
						acc);
				default:
					return acc;
			}
		});
	return A3(
		_user$project$Lang$foldExpViaE__,
		folder,
		{ctor: '[]'},
		exp);
};
var _user$project$LangTools$identifiersSet = function (exp) {
	return _elm_lang$core$Set$fromList(
		_user$project$LangTools$identifiersList(exp));
};
var _user$project$LangTools$identifiersSetPlusPrelude = function (exp) {
	return A2(
		_elm_lang$core$Set$union,
		_user$project$LangTools$identifiersSet(exp),
		_user$project$LangTools$preludeIdentifiers);
};
var _user$project$LangTools$identifierCounts = function (exp) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (ident, counts) {
				return A3(
					_elm_lang$core$Dict$update,
					ident,
					function (old) {
						var _p170 = old;
						if (_p170.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(_p170._0 + 1);
						} else {
							return _elm_lang$core$Maybe$Just(1);
						}
					},
					counts);
			}),
		_elm_lang$core$Dict$empty,
		_user$project$LangTools$identifiersList(exp));
};
var _user$project$LangTools$identifiersListInPats = function (pats) {
	return A2(_elm_lang$core$List$concatMap, _user$project$LangTools$identifiersListInPat, pats);
};
var _user$project$LangTools$identifiersListPatsOnly = function (exp) {
	var folder = F2(
		function (e__, acc) {
			var _p171 = e__;
			switch (_p171.ctor) {
				case 'EFun':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangTools$identifiersListInPats(_p171._1),
						acc);
				case 'ECase':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangTools$identifiersListInPats(
							_user$project$Lang$branchPats(_p171._2)),
						acc);
				case 'ELet':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangTools$identifiersListInPat(_p171._3),
						acc);
				default:
					return acc;
			}
		});
	return A3(
		_user$project$Lang$foldExpViaE__,
		folder,
		{ctor: '[]'},
		exp);
};
var _user$project$LangTools$identifiersSetPatsOnly = function (exp) {
	return _elm_lang$core$Set$fromList(
		_user$project$LangTools$identifiersListPatsOnly(exp));
};
var _user$project$LangTools$findScopeAreasByIdent = F2(
	function (ident, exp) {
		return A2(
			_elm_lang$core$List$concatMap,
			function (e) {
				var _p172 = e.val.e__;
				switch (_p172.ctor) {
					case 'ELet':
						return A2(
							_elm_lang$core$List$member,
							ident,
							_user$project$LangTools$identifiersListInPat(_p172._3)) ? _user$project$LangTools$expToLetScopeAreas(e) : {ctor: '[]'};
					case 'EFun':
						return A2(
							_elm_lang$core$List$member,
							ident,
							_user$project$LangTools$identifiersListInPats(_p172._1)) ? {
							ctor: '::',
							_0: _p172._2,
							_1: {ctor: '[]'}
						} : {ctor: '[]'};
					case 'ECase':
						return A2(
							_elm_lang$core$List$concatMap,
							function (_p173) {
								var _p174 = _p173;
								return A2(
									_elm_lang$core$List$member,
									ident,
									_user$project$LangTools$identifiersListInPat(_p174._0)) ? {
									ctor: '::',
									_0: _p174._1,
									_1: {ctor: '[]'}
								} : {ctor: '[]'};
							},
							_user$project$Lang$branchPatExps(_p172._2));
					default:
						return {ctor: '[]'};
				}
			},
			_user$project$Lang$flattenExpTree(exp));
	});
var _user$project$LangTools$assignUniqueNames_ = F3(
	function (exp, usedNames, oldNameToNewName) {
		var recurse = _user$project$LangTools$assignUniqueNames_;
		var recurseExps = function (es) {
			return A3(
				_elm_lang$core$List$foldl,
				F2(
					function (e, _p175) {
						var _p176 = _p175;
						var _p177 = A3(recurse, e, _p176._1, oldNameToNewName);
						var newE = _p177._0;
						var usedNames_ = _p177._1;
						var newNameToOldName_ = _p177._2;
						return {
							ctor: '_Tuple3',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								_p176._0,
								{
									ctor: '::',
									_0: newE,
									_1: {ctor: '[]'}
								}),
							_1: usedNames_,
							_2: A2(_elm_lang$core$Dict$union, newNameToOldName_, _p176._2)
						};
					}),
				{
					ctor: '_Tuple3',
					_0: {ctor: '[]'},
					_1: usedNames,
					_2: _elm_lang$core$Dict$empty
				},
				es);
		};
		var recurseExp = function (e) {
			var _p178 = recurseExps(
				{
					ctor: '::',
					_0: e,
					_1: {ctor: '[]'}
				});
			var newEs = _p178._0;
			var usedNames = _p178._1;
			var newNameToOldName = _p178._2;
			return {
				ctor: '_Tuple3',
				_0: A2(_user$project$Utils$head, 'assignUniqueNames_ head1', newEs),
				_1: usedNames,
				_2: newNameToOldName
			};
		};
		var assignUniqueNamesToPat_ = F2(
			function (pat, usedNames) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (name, _p179) {
							var _p180 = _p179;
							var _p183 = _p180._1;
							var _p182 = _p180._0;
							var _p181 = _p180._2;
							if (A2(_elm_lang$core$Set$member, name, _p183)) {
								var newName = A3(_user$project$LangTools$nonCollidingName, name, 2, _p183);
								return {
									ctor: '_Tuple3',
									_0: A3(_user$project$LangTools$renameIdentifierInPat, name, newName, _p182),
									_1: A2(_elm_lang$core$Set$insert, newName, _p183),
									_2: A3(_elm_lang$core$Dict$insert, name, newName, _p181)
								};
							} else {
								return {
									ctor: '_Tuple3',
									_0: _p182,
									_1: A2(_elm_lang$core$Set$insert, name, _p183),
									_2: _p181
								};
							}
						}),
					{ctor: '_Tuple3', _0: pat, _1: usedNames, _2: _elm_lang$core$Dict$empty},
					_user$project$LangTools$identifiersListInPat(pat));
			});
		var leafUnchanged = {ctor: '_Tuple3', _0: exp, _1: usedNames, _2: _elm_lang$core$Dict$empty};
		var _p184 = exp.val.e__;
		switch (_p184.ctor) {
			case 'EConst':
				return leafUnchanged;
			case 'EBase':
				return leafUnchanged;
			case 'EVar':
				var _p185 = A2(_elm_lang$core$Dict$get, _p184._1, oldNameToNewName);
				if (_p185.ctor === 'Just') {
					return {
						ctor: '_Tuple3',
						_0: A2(
							_user$project$Lang$replaceE__,
							exp,
							A2(_user$project$Lang$EVar, _p184._0, _p185._0)),
						_1: usedNames,
						_2: _elm_lang$core$Dict$empty
					};
				} else {
					return leafUnchanged;
				}
			case 'EFun':
				var _p186 = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (p, _p187) {
							var _p188 = _p187;
							var _p189 = A2(assignUniqueNamesToPat_, p, _p188._1);
							var newPat = _p189._0;
							var usedNames_ = _p189._1;
							var oldNameToNewNameAdditions_ = _p189._2;
							return {
								ctor: '_Tuple3',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p188._0,
									{
										ctor: '::',
										_0: newPat,
										_1: {ctor: '[]'}
									}),
								_1: usedNames_,
								_2: A2(_elm_lang$core$Dict$union, oldNameToNewNameAdditions_, _p188._2)
							};
						}),
					{
						ctor: '_Tuple3',
						_0: {ctor: '[]'},
						_1: usedNames,
						_2: _elm_lang$core$Dict$empty
					},
					_p184._1);
				var newPs = _p186._0;
				var usedNames_ = _p186._1;
				var oldNameToNewNameAdditions = _p186._2;
				var _p190 = A3(
					recurse,
					_p184._2,
					usedNames_,
					A2(_elm_lang$core$Dict$union, oldNameToNewNameAdditions, oldNameToNewName));
				var newBody = _p190._0;
				var usedNames__ = _p190._1;
				var newNameToOldName = _p190._2;
				var newNameToOldName_ = A2(
					_elm_lang$core$Dict$union,
					_user$project$Utils$flipDict(oldNameToNewNameAdditions),
					newNameToOldName);
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A4(_user$project$Lang$EFun, _p184._0, newPs, newBody, _p184._3)),
					_1: usedNames__,
					_2: newNameToOldName_
				};
			case 'EOp':
				var _p191 = recurseExps(_p184._2);
				var newEs = _p191._0;
				var usedNames_ = _p191._1;
				var newNameToOldName = _p191._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A4(_user$project$Lang$EOp, _p184._0, _p184._1, newEs, _p184._3)),
					_1: usedNames_,
					_2: newNameToOldName
				};
			case 'EList':
				if (_p184._3.ctor === 'Nothing') {
					var _p193 = _p184._1;
					var _p192 = recurseExps(
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p193));
					var newEs = _p192._0;
					var usedNames_ = _p192._1;
					var newNameToOldName = _p192._2;
					return {
						ctor: '_Tuple3',
						_0: A2(
							_user$project$Lang$replaceE__,
							exp,
							A5(
								_user$project$Lang$EList,
								_p184._0,
								A2(
									_user$project$Utils$zip,
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p193),
									newEs),
								_p184._2,
								_elm_lang$core$Maybe$Nothing,
								_p184._4)),
						_1: usedNames_,
						_2: newNameToOldName
					};
				} else {
					var _p196 = _p184._1;
					var _p194 = recurseExps(
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p196),
							{
								ctor: '::',
								_0: _p184._3._0,
								_1: {ctor: '[]'}
							}));
					var newEs = _p194._0;
					var usedNames_ = _p194._1;
					var newNameToOldName = _p194._2;
					var _p195 = {
						ctor: '_Tuple2',
						_0: _user$project$Utils$removeLastElement(newEs),
						_1: A2(_user$project$Utils$last, 'assignUniqueNames_', newEs)
					};
					var newHeads = _p195._0;
					var newTail = _p195._1;
					return {
						ctor: '_Tuple3',
						_0: A2(
							_user$project$Lang$replaceE__,
							exp,
							A5(
								_user$project$Lang$EList,
								_p184._0,
								A2(
									_user$project$Utils$zip,
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p196),
									newHeads),
								_p184._2,
								_elm_lang$core$Maybe$Just(newTail),
								_p184._4)),
						_1: usedNames_,
						_2: newNameToOldName
					};
				}
			case 'EIf':
				var _p197 = recurseExps(
					{
						ctor: '::',
						_0: _p184._1,
						_1: {
							ctor: '::',
							_0: _p184._3,
							_1: {
								ctor: '::',
								_0: _p184._5,
								_1: {ctor: '[]'}
							}
						}
					});
				var newEs = _p197._0;
				var usedNames_ = _p197._1;
				var newNameToOldName = _p197._2;
				var _p198 = newEs;
				if ((((_p198.ctor === '::') && (_p198._1.ctor === '::')) && (_p198._1._1.ctor === '::')) && (_p198._1._1._1.ctor === '[]')) {
					return {
						ctor: '_Tuple3',
						_0: A2(
							_user$project$Lang$replaceE__,
							exp,
							A7(_user$project$Lang$EIf, _p184._0, _p198._0, _p184._2, _p198._1._0, _p184._4, _p198._1._1._0, _p184._6)),
						_1: usedNames_,
						_2: newNameToOldName
					};
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'LangTools',
						{
							start: {line: 2912, column: 7},
							end: {line: 2920, column: 47}
						},
						_p198)('assignUniqueNames_ EIf');
				}
			case 'ECase':
				var _p200 = A3(recurse, _p184._1, usedNames, oldNameToNewName);
				var newScrutinee = _p200._0;
				var usedNames_ = _p200._1;
				var newNameToOldName = _p200._2;
				var _p201 = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (branch, _p202) {
							var _p203 = _p202;
							var _p204 = branch.val;
							var bws1 = _p204._0;
							var bPat = _p204._1;
							var bExp = _p204._2;
							var bws2 = _p204._3;
							var _p205 = A2(assignUniqueNamesToPat_, bPat, _p203._1);
							var newPat = _p205._0;
							var usedNames_ = _p205._1;
							var oldNameToNewNameAdditions = _p205._2;
							var _p206 = A3(
								recurse,
								bExp,
								usedNames_,
								A2(_elm_lang$core$Dict$union, oldNameToNewNameAdditions, oldNameToNewName));
							var newBody = _p206._0;
							var usedNames__ = _p206._1;
							var newNameToOldName_ = _p206._2;
							var newBranch = _elm_lang$core$Native_Utils.update(
								branch,
								{
									val: A4(_user$project$Lang$Branch_, bws1, newPat, newBody, bws2)
								});
							return {
								ctor: '_Tuple3',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p203._0,
									{
										ctor: '::',
										_0: newBranch,
										_1: {ctor: '[]'}
									}),
								_1: usedNames__,
								_2: A2(
									_elm_lang$core$Dict$union,
									_user$project$Utils$flipDict(oldNameToNewNameAdditions),
									A2(_elm_lang$core$Dict$union, newNameToOldName_, _p203._2))
							};
						}),
					{
						ctor: '_Tuple3',
						_0: {ctor: '[]'},
						_1: usedNames_,
						_2: newNameToOldName
					},
					_p184._2);
				var newBranches = _p201._0;
				var usedNames__ = _p201._1;
				var newNameToOldName_ = _p201._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A4(_user$project$Lang$ECase, _p184._0, newScrutinee, newBranches, _p184._3)),
					_1: usedNames__,
					_2: newNameToOldName_
				};
			case 'ETypeCase':
				var _p207 = A3(recurse, _p184._1, usedNames, oldNameToNewName);
				var newScrutinee = _p207._0;
				var usedNames_ = _p207._1;
				var newNameToOldName = _p207._2;
				var _p208 = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (tbranch, _p209) {
							var _p210 = _p209;
							var _p211 = tbranch.val;
							var bws1 = _p211._0;
							var bType = _p211._1;
							var bExp = _p211._2;
							var bws2 = _p211._3;
							var _p212 = A3(recurse, bExp, _p210._1, oldNameToNewName);
							var newBody = _p212._0;
							var usedNames_ = _p212._1;
							var newNameToOldName_ = _p212._2;
							var newTBranch = _elm_lang$core$Native_Utils.update(
								tbranch,
								{
									val: A4(_user$project$Lang$TBranch_, bws1, bType, newBody, bws2)
								});
							return {
								ctor: '_Tuple3',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p210._0,
									{
										ctor: '::',
										_0: newTBranch,
										_1: {ctor: '[]'}
									}),
								_1: usedNames_,
								_2: A2(_elm_lang$core$Dict$union, newNameToOldName_, _p210._2)
							};
						}),
					{
						ctor: '_Tuple3',
						_0: {ctor: '[]'},
						_1: usedNames_,
						_2: newNameToOldName
					},
					_p184._2);
				var newTBranches = _p208._0;
				var usedNames__ = _p208._1;
				var newNameToOldName_ = _p208._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A4(_user$project$Lang$ETypeCase, _p184._0, newScrutinee, newTBranches, _p184._3)),
					_1: usedNames__,
					_2: newNameToOldName_
				};
			case 'EApp':
				var _p213 = recurseExps(
					{ctor: '::', _0: _p184._1, _1: _p184._2});
				var newE1AndEs = _p213._0;
				var usedNames_ = _p213._1;
				var newNameToOldName = _p213._2;
				var _p214 = {
					ctor: '_Tuple2',
					_0: A2(_user$project$Utils$head, 'assignUniqueNames_ head', newE1AndEs),
					_1: A2(_user$project$Utils$tail, 'assignUniqueNames_ tail', newE1AndEs)
				};
				var newE1 = _p214._0;
				var newEs = _p214._1;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A5(_user$project$Lang$EApp, _p184._0, newE1, newEs, _p184._3, _p184._4)),
					_1: usedNames_,
					_2: newNameToOldName
				};
			case 'ELet':
				var _p218 = _p184._2;
				var _p215 = A2(assignUniqueNamesToPat_, _p184._3, usedNames);
				var newPat = _p215._0;
				var usedNames_ = _p215._1;
				var oldNameToNewNameAdditions = _p215._2;
				var oldNameToNewNameWithAdditions = A2(_elm_lang$core$Dict$union, oldNameToNewNameAdditions, oldNameToNewName);
				var oldNameToNewNameForBoundExp = _p218 ? oldNameToNewNameWithAdditions : oldNameToNewName;
				var _p216 = A3(recurse, _p184._5, usedNames_, oldNameToNewNameForBoundExp);
				var newE1 = _p216._0;
				var usedNames__ = _p216._1;
				var newNameToOldName = _p216._2;
				var _p217 = A3(recurse, _p184._7, usedNames__, oldNameToNewNameWithAdditions);
				var newE2 = _p217._0;
				var usedNames___ = _p217._1;
				var newNameToOldName_ = _p217._2;
				var newNameToOldName__ = A2(
					_elm_lang$core$Dict$union,
					_user$project$Utils$flipDict(oldNameToNewNameAdditions),
					A2(_elm_lang$core$Dict$union, newNameToOldName_, newNameToOldName));
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A9(_user$project$Lang$ELet, _p184._0, _p184._1, _p218, newPat, _p184._4, newE1, _p184._6, newE2, _p184._8)),
					_1: usedNames___,
					_2: newNameToOldName__
				};
			case 'EComment':
				var _p219 = recurseExp(_p184._2);
				var newE1 = _p219._0;
				var usedNames_ = _p219._1;
				var newNameToOldName = _p219._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A3(_user$project$Lang$EComment, _p184._0, _p184._1, newE1)),
					_1: usedNames_,
					_2: newNameToOldName
				};
			case 'EOption':
				var _p220 = recurseExp(_p184._4);
				var newE1 = _p220._0;
				var usedNames_ = _p220._1;
				var newNameToOldName = _p220._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A5(_user$project$Lang$EOption, _p184._0, _p184._1, _p184._2, _p184._3, newE1)),
					_1: usedNames_,
					_2: newNameToOldName
				};
			case 'ETyp':
				var _p221 = recurseExp(_p184._3);
				var newE1 = _p221._0;
				var usedNames_ = _p221._1;
				var newNameToOldName = _p221._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A5(_user$project$Lang$ETyp, _p184._0, _p184._1, _p184._2, newE1, _p184._4)),
					_1: usedNames_,
					_2: newNameToOldName
				};
			case 'EColonType':
				var _p222 = recurseExp(_p184._1);
				var newE1 = _p222._0;
				var usedNames_ = _p222._1;
				var newNameToOldName = _p222._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A5(_user$project$Lang$EColonType, _p184._0, newE1, _p184._2, _p184._3, _p184._4)),
					_1: usedNames_,
					_2: newNameToOldName
				};
			case 'ETypeAlias':
				var _p223 = recurseExp(_p184._3);
				var newE1 = _p223._0;
				var usedNames_ = _p223._1;
				var newNameToOldName = _p223._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A5(_user$project$Lang$ETypeAlias, _p184._0, _p184._1, _p184._2, newE1, _p184._4)),
					_1: usedNames_,
					_2: newNameToOldName
				};
			case 'EParens':
				var _p224 = recurseExp(_p184._1);
				var newE1 = _p224._0;
				var usedNames_ = _p224._1;
				var newNameToOldName = _p224._2;
				return {
					ctor: '_Tuple3',
					_0: A2(
						_user$project$Lang$replaceE__,
						exp,
						A4(_user$project$Lang$EParens, _p184._0, newE1, _p184._2, _p184._3)),
					_1: usedNames_,
					_2: newNameToOldName
				};
			default:
				if (_p184._1.ctor === 'HolePBE') {
					var _p230 = _p184._1._0;
					var _p225 = recurseExps(
						A2(
							_elm_lang$core$List$map,
							function (_p226) {
								var _p227 = _p226;
								return _p227._3;
							},
							_p230));
					var newEs = _p225._0;
					var usedNames_ = _p225._1;
					var newNameToOldName = _p225._2;
					return {
						ctor: '_Tuple3',
						_0: A2(
							_user$project$Lang$replaceE__,
							exp,
							A2(
								_user$project$Lang$EHole,
								_p184._0,
								A2(
									_user$project$Lang$HolePBE,
									A3(
										_elm_lang$core$List$map2,
										F2(
											function (_p228, e) {
												var _p229 = _p228;
												return {ctor: '_Tuple4', _0: _p229._0, _1: _p229._1, _2: _p229._2, _3: e};
											}),
										_p230,
										newEs),
									_p184._1._1))),
						_1: usedNames_,
						_2: newNameToOldName
					};
				} else {
					return leafUnchanged;
				}
		}
	});
var _user$project$LangTools$assignUniqueNames = function (program) {
	var initialUsedNames = _user$project$LangTools$identifiersSetPlusPrelude(program);
	var _p231 = A3(_user$project$LangTools$assignUniqueNames_, program, initialUsedNames, _elm_lang$core$Dict$empty);
	var newProgram = _p231._0;
	var usedNames = _p231._1;
	var newNameToOldName = _p231._2;
	return {ctor: '_Tuple2', _0: newProgram, _1: newNameToOldName};
};
var _user$project$LangTools$identPathsInPat = function (pat) {
	var childIdentPaths = A2(
		_user$project$Utils$concatMapi1,
		function (_p232) {
			var _p233 = _p232;
			return A2(
				_elm_lang$core$List$map,
				function (_p234) {
					var _p235 = _p234;
					return {
						ctor: '_Tuple2',
						_0: _p235._0,
						_1: {ctor: '::', _0: _p233._0, _1: _p235._1}
					};
				},
				_user$project$LangTools$identPathsInPat(_p233._1));
		},
		_user$project$Lang$childPats(pat));
	var _p236 = _user$project$LangTools$patToMaybeIdent(pat);
	if (_p236.ctor === 'Just') {
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _p236._0,
				_1: {ctor: '[]'}
			},
			_1: childIdentPaths
		};
	} else {
		return childIdentPaths;
	}
};
var _user$project$LangTools$pathForIdentInPat = F2(
	function (targetIdent, pat) {
		return A2(
			_user$project$Utils$mapFirstSuccess,
			function (_p237) {
				var _p238 = _p237;
				return _elm_lang$core$Native_Utils.eq(_p238._0, targetIdent) ? _elm_lang$core$Maybe$Just(_p238._1) : _elm_lang$core$Maybe$Nothing;
			},
			_user$project$LangTools$identPathsInPat(pat));
	});
var _user$project$LangTools$bindingPathedPatternIdFor_ = F4(
	function (currentBindingPathedPatternId, targetName, predicateMap, exp) {
		var recurse = F2(
			function (pathedPatternId, e) {
				return A4(_user$project$LangTools$bindingPathedPatternIdFor_, pathedPatternId, targetName, predicateMap, e);
			});
		var maybeNewBindingForRecursion = F3(
			function (pat, branchI, pathPrefix) {
				return A2(
					_elm_lang$core$Maybe$map,
					function (path) {
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple2', _0: exp.val.eid, _1: branchI},
								_1: A2(_elm_lang$core$Basics_ops['++'], pathPrefix, path)
							});
					},
					A2(_user$project$LangTools$pathForIdentInPat, targetName, pat));
			});
		var _p239 = A2(predicateMap, exp, currentBindingPathedPatternId);
		if (_p239.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(_p239._0);
		} else {
			var _p240 = exp.val.e__;
			switch (_p240.ctor) {
				case 'EFun':
					var newBindingPathedPatternId = A2(
						_elm_lang$core$Maybe$withDefault,
						currentBindingPathedPatternId,
						A2(
							_user$project$Utils$mapFirstSuccess,
							function (_p241) {
								var _p242 = _p241;
								return A3(
									maybeNewBindingForRecursion,
									_p242._1,
									1,
									{
										ctor: '::',
										_0: _p242._0,
										_1: {ctor: '[]'}
									});
							},
							_user$project$Utils$zipi1(_p240._1)));
					return A2(recurse, newBindingPathedPatternId, _p240._2);
				case 'ELet':
					var newBindingPathedPatternId = A2(
						_elm_lang$core$Maybe$withDefault,
						currentBindingPathedPatternId,
						A3(
							maybeNewBindingForRecursion,
							_p240._3,
							1,
							{ctor: '[]'}));
					var pathedPatternIdForBoundExp = _p240._2 ? newBindingPathedPatternId : currentBindingPathedPatternId;
					return A2(
						_user$project$Utils$firstOrLazySecond,
						A2(recurse, pathedPatternIdForBoundExp, _p240._5),
						function (_p243) {
							var _p244 = _p243;
							return A2(recurse, newBindingPathedPatternId, _p240._7);
						});
				case 'ECase':
					return A2(
						_user$project$Utils$mapFirstSuccess,
						function (_p245) {
							var _p246 = _p245;
							var newBindingPathedPatternId = A2(
								_elm_lang$core$Maybe$withDefault,
								currentBindingPathedPatternId,
								A3(
									maybeNewBindingForRecursion,
									_p246._1._0,
									_p246._0,
									{ctor: '[]'}));
							return A2(recurse, newBindingPathedPatternId, _p246._1._1);
						},
						_user$project$Utils$zipi1(
							_user$project$Lang$branchPatExps(_p240._2)));
				default:
					return A2(
						_user$project$Utils$mapFirstSuccess,
						recurse(currentBindingPathedPatternId),
						_user$project$Lang$childExps(exp));
			}
		}
	});
var _user$project$LangTools$bindingPathedPatternIdForIdentAtEId = F3(
	function (targetName, targetEId, program) {
		var predMap = F2(
			function (exp, maybeCurrentBindingPathedPatternId) {
				var _p247 = exp.val.e__;
				if (_p247.ctor === 'EVar') {
					return _elm_lang$core$Native_Utils.eq(exp.val.eid, targetEId) ? _elm_lang$core$Maybe$Just(maybeCurrentBindingPathedPatternId) : _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			});
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Maybe$Nothing,
			A4(_user$project$LangTools$bindingPathedPatternIdFor_, _elm_lang$core$Maybe$Nothing, targetName, predMap, program));
	});
var _user$project$LangTools$bindingScopeIdForIdentAtEId = F3(
	function (targetName, targetEId, program) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p248) {
				var _p249 = _p248;
				return _p249._0;
			},
			A3(_user$project$LangTools$bindingPathedPatternIdForIdentAtEId, targetName, targetEId, program));
	});
var _user$project$LangTools$bindingPathedPatternIdForUniqueName = F2(
	function (targetName, program) {
		var predMap = F2(
			function (e, maybeCurrentBindingPathedPatternId) {
				return maybeCurrentBindingPathedPatternId;
			});
		return A4(_user$project$LangTools$bindingPathedPatternIdFor_, _elm_lang$core$Maybe$Nothing, targetName, predMap, program);
	});
var _user$project$LangTools$indentPatsInPat = function (pat) {
	return A2(
		_elm_lang$core$List$filterMap,
		function (p) {
			var _p250 = _user$project$LangTools$patToMaybeIdent(p);
			if (_p250.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p250._0, _1: p});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		},
		_user$project$Lang$flattenPatTree(pat));
};
var _user$project$LangTools$indentPIdsInPat = function (pat) {
	return A2(
		_elm_lang$core$List$map,
		function (_p251) {
			var _p252 = _p251;
			return {ctor: '_Tuple2', _0: _p252._0, _1: _p252._1.val.pid};
		},
		_user$project$LangTools$indentPatsInPat(pat));
};
var _user$project$LangTools$findLetAndIdentBindingExp = F2(
	function (targetEId, program) {
		return A3(
			_user$project$LangTools$findLetAndPatMatchingExp_,
			targetEId,
			program,
			F2(
				function (letExp, _p253) {
					var _p254 = _p253;
					var _p255 = {
						ctor: '_Tuple2',
						_0: _user$project$LangTools$patToMaybeIdent(_p254._0),
						_1: _elm_lang$core$Native_Utils.eq(_p254._1.val.eid, targetEId)
					};
					if (((_p255.ctor === '_Tuple2') && (_p255._0.ctor === 'Just')) && (_p255._1 === true)) {
						return _elm_lang$core$Maybe$Just(
							{ctor: '_Tuple2', _0: letExp, _1: _p255._0._0});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}));
	});
var _user$project$LangTools$findLetAndIdentBindingExpLoose = F2(
	function (targetEId, program) {
		return A3(
			_user$project$LangTools$findLetAndPatMatchingExp_,
			targetEId,
			program,
			F2(
				function (letExp, _p256) {
					var _p257 = _p256;
					var _p258 = _user$project$LangTools$patToMaybeIdent(_p257._0);
					if (_p258.ctor === 'Just') {
						return A2(
							_elm_lang$core$List$member,
							targetEId,
							_user$project$Lang$expEffectiveEIds(_p257._1)) ? _elm_lang$core$Maybe$Just(
							{ctor: '_Tuple2', _0: letExp, _1: _p258._0}) : _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}));
	});
var _user$project$LangTools$expToIdent = function (exp) {
	var _p259 = exp.val.e__;
	if (_p259.ctor === 'EVar') {
		return _p259._1;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangTools',
			{
				start: {line: 1406, column: 3},
				end: {line: 1408, column: 101}
			},
			_p259)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'LangTools.expToIdent exp is not an EVar: ',
				_user$project$LangUnparser$unparseWithIds(exp)));
	}
};
var _user$project$LangTools$freeVars = function (exp) {
	var removeIntroducedBy = F2(
		function (pats, vars) {
			var introduced = _user$project$LangTools$identifiersListInPats(pats);
			return A2(
				_elm_lang$core$List$filter,
				function ($var) {
					return !A2(
						_elm_lang$core$List$member,
						_user$project$LangTools$expToIdent($var),
						introduced);
				},
				vars);
		});
	var _p261 = exp.val.e__;
	switch (_p261.ctor) {
		case 'EVar':
			return {
				ctor: '::',
				_0: exp,
				_1: {ctor: '[]'}
			};
		case 'EFun':
			return A2(
				removeIntroducedBy,
				_p261._1,
				_user$project$LangTools$freeVars(_p261._2));
		case 'ECase':
			var freeInEachBranch = A2(
				_elm_lang$core$List$concatMap,
				function (_p262) {
					var _p263 = _p262;
					return A2(
						removeIntroducedBy,
						{
							ctor: '::',
							_0: _p263._0,
							_1: {ctor: '[]'}
						},
						_user$project$LangTools$freeVars(_p263._1));
				},
				_user$project$Lang$branchPatExps(_p261._2));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$LangTools$freeVars(_p261._1),
				freeInEachBranch);
		case 'ELet':
			if (_p261._2 === false) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$LangTools$freeVars(_p261._5),
					A2(
						removeIntroducedBy,
						{
							ctor: '::',
							_0: _p261._3,
							_1: {ctor: '[]'}
						},
						_user$project$LangTools$freeVars(_p261._7)));
			} else {
				return A2(
					removeIntroducedBy,
					{
						ctor: '::',
						_0: _p261._3,
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangTools$freeVars(_p261._5),
						_user$project$LangTools$freeVars(_p261._7)));
			}
		default:
			return A2(
				_elm_lang$core$List$concatMap,
				_user$project$LangTools$freeVars,
				_user$project$Lang$childExps(exp));
	}
};
var _user$project$LangTools$identifierUses = F2(
	function (ident, exp) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p264) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					ident,
					_user$project$LangTools$expToIdent(_p264));
			},
			_user$project$LangTools$freeVars(exp));
	});
var _user$project$LangTools$identifierUsageEIds = F2(
	function (ident, exp) {
		return A2(
			_elm_lang$core$List$map,
			function (_p265) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p265));
			},
			A2(_user$project$LangTools$identifierUses, ident, exp));
	});
var _user$project$LangTools$identifierUsesAfterDefiningPat = F2(
	function (ident, exp) {
		return A2(
			_elm_lang$core$List$concatMap,
			function (scopeAreaExp) {
				return A2(_user$project$LangTools$identifierUses, ident, scopeAreaExp);
			},
			A2(_user$project$LangTools$findScopeAreasByIdent, ident, exp));
	});
var _user$project$LangTools$identifierSetUses = F2(
	function (identSet, exp) {
		return A2(
			_elm_lang$core$List$filter,
			function (varExp) {
				return A2(
					_elm_lang$core$Set$member,
					_user$project$LangTools$expToIdent(varExp),
					identSet);
			},
			_user$project$LangTools$freeVars(exp));
	});
var _user$project$LangTools$bindingPathedPatternIdFor = F2(
	function (varExp, program) {
		var targetName = _user$project$LangTools$expToIdent(varExp);
		var targetEId = varExp.val.eid;
		return A3(_user$project$LangTools$bindingPathedPatternIdForIdentAtEId, targetName, targetEId, program);
	});
var _user$project$LangTools$bindingScopeIdFor = F2(
	function (varExp, program) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p266) {
				var _p267 = _p266;
				return _p267._0;
			},
			A2(_user$project$LangTools$bindingPathedPatternIdFor, varExp, program));
	});
var _user$project$LangTools$expToMaybeIdent = function (exp) {
	var _p268 = exp.val.e__;
	if (_p268.ctor === 'EVar') {
		return _elm_lang$core$Maybe$Just(_p268._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$varsWithName = F2(
	function (ident, exp) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p269) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					_elm_lang$core$Maybe$Just(ident),
					_user$project$LangTools$expToMaybeIdent(_p269));
			},
			_user$project$Lang$flattenExpTree(exp));
	});
var _user$project$LangTools$freeIdentifiers = function (exp) {
	return _elm_lang$core$Set$fromList(
		A2(
			_user$project$Utils$fromJust_,
			'LangTools.freeIdentifiers',
			_user$project$Utils$projJusts(
				A2(
					_elm_lang$core$List$map,
					_user$project$LangTools$expToMaybeIdent,
					_user$project$LangTools$freeVars(exp)))));
};
var _user$project$LangTools$isLiteral = function (exp) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Set$size(
			_user$project$LangTools$freeIdentifiers(exp)),
		0);
};
var _user$project$LangTools$allVarsToBindingPatList = function (program) {
	var handleELet = F2(
		function (letExp, identToPId) {
			return A2(
				_elm_lang$core$Dict$union,
				_elm_lang$core$Dict$fromList(
					_user$project$LangTools$indentPatsInPat(
						_user$project$LangTools$expToLetPat(letExp))),
				identToPId);
		});
	var handleEFun = F2(
		function (funcExp, identToPId) {
			return A2(
				_elm_lang$core$Dict$union,
				_elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$concatMap,
						_user$project$LangTools$indentPatsInPat,
						_user$project$LangTools$expToFuncPats(funcExp))),
				identToPId);
		});
	var handleCaseBranch = F4(
		function (caseExp, branch, branchI, identToPId) {
			return A2(
				_elm_lang$core$Dict$union,
				_elm_lang$core$Dict$fromList(
					_user$project$LangTools$indentPatsInPat(
						_user$project$Lang$branchPat(branch))),
				identToPId);
		});
	return A7(
		_user$project$Lang$foldExpTopDownWithScope,
		F3(
			function (exp, expAndMaybePId, identToPId) {
				var _p270 = _user$project$LangTools$expToMaybeIdent(exp);
				if (_p270.ctor === 'Just') {
					return {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: exp,
							_1: A2(_elm_lang$core$Dict$get, _p270._0, identToPId)
						},
						_1: expAndMaybePId
					};
				} else {
					return expAndMaybePId;
				}
			}),
		handleELet,
		handleEFun,
		handleCaseBranch,
		{ctor: '[]'},
		_elm_lang$core$Dict$empty,
		program);
};
var _user$project$LangTools$allVarUsages = F2(
	function (targetVarEId, program) {
		var varsAndMaybePat = _user$project$LangTools$allVarsToBindingPatList(program);
		var _p273 = A2(
			_user$project$Utils$findFirst,
			function (_p271) {
				var _p272 = _p271;
				return _elm_lang$core$Native_Utils.eq(_p272._0.val.eid, targetVarEId);
			},
			varsAndMaybePat);
		if (_p273.ctor === 'Just') {
			if (_p273._0._1.ctor === 'Just') {
				return A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Tuple$first,
					A2(
						_elm_lang$core$List$filter,
						function (_p274) {
							var _p275 = _p274;
							return _elm_lang$core$Native_Utils.eq(
								_p275._1,
								_elm_lang$core$Maybe$Just(_p273._0._1._0));
						},
						varsAndMaybePat));
			} else {
				var targetIdent = _user$project$LangTools$expToIdent(_p273._0._0);
				return A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Tuple$first,
					A2(
						_elm_lang$core$List$filter,
						function (_p276) {
							var _p277 = _p276;
							return _elm_lang$core$Native_Utils.eq(_p277._1, _elm_lang$core$Maybe$Nothing) && _elm_lang$core$Native_Utils.eq(
								_user$project$LangTools$expToIdent(_p277._0),
								targetIdent);
						},
						varsAndMaybePat));
			}
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$LangTools$allVarEIdsToBindingPatList = function (program) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Tuple$mapFirst(
			function (_p278) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p278));
			}),
		_user$project$LangTools$allVarsToBindingPatList(program));
};
var _user$project$LangTools$allVarEIdsToBindingPat = function (program) {
	return _elm_lang$core$Dict$fromList(
		_user$project$LangTools$allVarEIdsToBindingPatList(program));
};
var _user$project$LangTools$allVarEIdsToBindingPId = function (program) {
	return A2(
		_elm_lang$core$Dict$map,
		F2(
			function (_p279, maybePat) {
				return A2(
					_elm_lang$core$Maybe$map,
					function (_p280) {
						return function (_) {
							return _.pid;
						}(
							function (_) {
								return _.val;
							}(_p280));
					},
					maybePat);
			}),
		_user$project$LangTools$allVarEIdsToBindingPat(program));
};
var _user$project$LangTools$allVarEIdsToBindingPIdList = function (program) {
	return A2(
		_elm_lang$core$List$map,
		function (_p281) {
			var _p282 = _p281;
			return {
				ctor: '_Tuple2',
				_0: _p282._0,
				_1: A2(
					_elm_lang$core$Maybe$map,
					function (_p283) {
						return function (_) {
							return _.pid;
						}(
							function (_) {
								return _.val;
							}(_p283));
					},
					_p282._1)
			};
		},
		_user$project$LangTools$allVarEIdsToBindingPatList(program));
};
var _user$project$LangTools$usedPIdsToVarEIds = function (program) {
	return _user$project$Utils$pairsToDictOfLists(
		A2(
			_elm_lang$core$List$filterMap,
			function (_p284) {
				var _p285 = _p284;
				return A2(
					_elm_lang$core$Maybe$map,
					function (pid) {
						return {ctor: '_Tuple2', _0: pid, _1: _p285._0};
					},
					_p285._1);
			},
			_user$project$LangTools$allVarEIdsToBindingPIdList(program)));
};
var _user$project$LangTools$allVarEIdsToBindingPatsBasedOnUniqueName = function (program) {
	var allIdentToPat = _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$concatMap,
			function (exp) {
				var _p286 = exp.val.e__;
				switch (_p286.ctor) {
					case 'EFun':
						return A2(_elm_lang$core$List$concatMap, _user$project$LangTools$indentPatsInPat, _p286._1);
					case 'ELet':
						return _user$project$LangTools$indentPatsInPat(_p286._3);
					case 'ECase':
						return A2(
							_elm_lang$core$List$concatMap,
							_user$project$LangTools$indentPatsInPat,
							_user$project$Lang$branchPats(_p286._2));
					default:
						return {ctor: '[]'};
				}
			},
			_user$project$Lang$flattenExpTree(program)));
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$filterMap,
			function (exp) {
				var _p287 = _user$project$LangTools$expToMaybeIdent(exp);
				if (_p287.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _p288 = A2(_elm_lang$core$Dict$get, _p287._0, allIdentToPat);
					if (_p288.ctor === 'Nothing') {
						return _elm_lang$core$Maybe$Just(
							{ctor: '_Tuple2', _0: exp.val.eid, _1: _elm_lang$core$Maybe$Nothing});
					} else {
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: exp.val.eid,
								_1: _elm_lang$core$Maybe$Just(_p288._0)
							});
					}
				}
			},
			_user$project$Lang$flattenExpTree(program)));
};
var _user$project$LangTools$allVarEIdsToBindingPIdBasedOnUniqueName = function (program) {
	return A2(
		_elm_lang$core$Dict$map,
		F2(
			function (_p289, maybePat) {
				return A2(
					_elm_lang$core$Maybe$map,
					function (_p290) {
						return function (_) {
							return _.pid;
						}(
							function (_) {
								return _.val;
							}(_p290));
					},
					maybePat);
			}),
		_user$project$LangTools$allVarEIdsToBindingPatsBasedOnUniqueName(program));
};
var _user$project$LangTools$expToMaybeVar = function (exp) {
	var _p291 = exp.val.e__;
	if (_p291.ctor === 'EVar') {
		return _elm_lang$core$Maybe$Just(exp);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$allVars = function (root) {
	return A2(
		_elm_lang$core$List$filterMap,
		_user$project$LangTools$expToMaybeVar,
		_user$project$Lang$flattenExpTree(root));
};
var _user$project$LangTools$expToMaybeLocId = function (exp) {
	var _p292 = exp.val.e__;
	if ((_p292.ctor === 'EConst') && (_p292._2.ctor === '_Tuple3')) {
		return _elm_lang$core$Maybe$Just(_p292._2._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToMaybeNumAndLoc = function (exp) {
	var _p293 = exp.val.e__;
	if (_p293.ctor === 'EConst') {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p293._1, _1: _p293._2});
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$expToMaybeNum = function (exp) {
	var _p294 = exp.val.e__;
	if (_p294.ctor === 'EConst') {
		return _elm_lang$core$Maybe$Just(_p294._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$effectiveBranches = function (exp) {
	var _p295 = _user$project$Lang$expEffectiveExp(exp).val.e__;
	switch (_p295.ctor) {
		case 'EIf':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$LangTools$effectiveBranches(_p295._3),
				_user$project$LangTools$effectiveBranches(_p295._5));
		case 'ECase':
			return A2(
				_elm_lang$core$List$concatMap,
				_user$project$LangTools$effectiveBranches,
				_user$project$Lang$branchExps(_p295._2));
		case 'ETypeCase':
			return A2(
				_elm_lang$core$List$concatMap,
				_user$project$LangTools$effectiveBranches,
				_user$project$Lang$tbranchExps(_p295._2));
		default:
			return {
				ctor: '::',
				_0: _user$project$Lang$expEffectiveExp(exp),
				_1: {ctor: '[]'}
			};
	}
};
var _user$project$LangTools$firstNonComment = function (exp) {
	firstNonComment:
	while (true) {
		var _p296 = exp.val.e__;
		if (_p296.ctor === 'EComment') {
			var _v144 = _p296._2;
			exp = _v144;
			continue firstNonComment;
		} else {
			return exp;
		}
	}
};
var _user$project$LangTools$deepestCommonAncestorOrSelfWithNewline = F3(
	function (program, expFilter, pred) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			program,
			A2(
				_user$project$Utils$findFirst,
				function (_p297) {
					return A2(
						_elm_lang$core$String$contains,
						'\n',
						_user$project$Lang$precedingWhitespace(_p297));
				},
				A2(
					_elm_lang$core$List$filter,
					expFilter,
					_elm_lang$core$List$reverse(
						_user$project$Utils$commonPrefix(
							A2(_user$project$Lang$findAllWithAncestors, pred, program))))));
	});
var _user$project$LangTools$deepestCommonAncestorWithNewline = F2(
	function (program, pred) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			program,
			A2(
				_user$project$Utils$findFirst,
				function (_p298) {
					return A2(
						_elm_lang$core$String$contains,
						'\n',
						_user$project$Lang$precedingWhitespace(_p298));
				},
				_elm_lang$core$List$reverse(
					A2(_user$project$Lang$commonAncestors, pred, program))));
	});
var _user$project$LangTools$deepestCommonScopeAndJustInside_ = F2(
	function (program, pred) {
		var allWithAncestorsScopesTagged = A2(
			_elm_lang$core$List$map,
			_user$project$Utils$dropLast(1),
			A2(_user$project$Lang$findAllWithAncestorsScopesTagged, pred, program));
		var commonAncestorsScopesTagged = _user$project$Utils$commonPrefix(allWithAncestorsScopesTagged);
		var commonAncestors = _user$project$Utils$commonPrefix(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$List$map(_elm_lang$core$Tuple$first),
				allWithAncestorsScopesTagged));
		var maybeDeepestCommonScope = A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Tuple$first,
			_user$project$Utils$maybeLast(
				A2(
					_elm_lang$core$List$filter,
					function (_p299) {
						var _p300 = _p299;
						return _p300._1;
					},
					commonAncestorsScopesTagged)));
		var maybeAncestorJustInsideCommonScope = function () {
			var _p303 = _user$project$Utils$maybeLast(
				A2(
					_user$project$Utils$takeWhile,
					function (_p301) {
						var _p302 = _p301;
						return !_p302._1;
					},
					_elm_lang$core$List$reverse(commonAncestorsScopesTagged)));
			if (_p303.ctor === 'Nothing') {
				return _elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$drop,
						_elm_lang$core$List$length(commonAncestorsScopesTagged),
						commonAncestors));
			} else {
				return _elm_lang$core$Maybe$Just(_p303._0._0);
			}
		}();
		return {ctor: '_Tuple2', _0: maybeDeepestCommonScope, _1: maybeAncestorJustInsideCommonScope};
	});
var _user$project$LangTools$deepestCommonScope = F2(
	function (exp, pred) {
		var _p304 = A2(_user$project$LangTools$deepestCommonScopeAndJustInside_, exp, pred);
		var maybeDeepestCommonScope = _p304._0;
		var candidates = _user$project$Utils$filterJusts(
			{
				ctor: '::',
				_0: _elm_lang$core$Maybe$Just(exp),
				_1: {
					ctor: '::',
					_0: maybeDeepestCommonScope,
					_1: {ctor: '[]'}
				}
			});
		return _user$project$Utils$last_(candidates);
	});
var _user$project$LangTools$justInsideDeepestCommonScope = F2(
	function (exp, pred) {
		var _p305 = A2(_user$project$LangTools$deepestCommonScopeAndJustInside_, exp, pred);
		var maybeDeepestCommonScope = _p305._0;
		var maybeAncestorJustInsideCommonScope = _p305._1;
		var candidates = _user$project$Utils$filterJusts(
			{
				ctor: '::',
				_0: _elm_lang$core$Maybe$Just(exp),
				_1: {
					ctor: '::',
					_0: maybeDeepestCommonScope,
					_1: {
						ctor: '::',
						_0: maybeAncestorJustInsideCommonScope,
						_1: {ctor: '[]'}
					}
				}
			});
		return _user$project$Utils$last_(candidates);
	});
var _user$project$LangTools$scopeNamesLocLiftedThrough_ = F3(
	function (targetLocId, scopeNames, exp) {
		var _p306 = exp.val.e__;
		_v148_2:
		do {
			switch (_p306.ctor) {
				case 'ELet':
					var scopeNames_ = function () {
						var _p307 = _p306._3.val.p__;
						switch (_p307.ctor) {
							case 'PVar':
								return A2(
									_elm_lang$core$Basics_ops['++'],
									scopeNames,
									{
										ctor: '::',
										_0: _p307._1,
										_1: {ctor: '[]'}
									});
							case 'PAs':
								return A2(
									_elm_lang$core$Basics_ops['++'],
									scopeNames,
									{
										ctor: '::',
										_0: _p307._1,
										_1: {ctor: '[]'}
									});
							default:
								return scopeNames;
						}
					}();
					return _user$project$Utils$firstMaybe(
						{
							ctor: '::',
							_0: A3(_user$project$LangTools$scopeNamesLocLiftedThrough_, targetLocId, scopeNames_, _p306._5),
							_1: {
								ctor: '::',
								_0: A3(_user$project$LangTools$scopeNamesLocLiftedThrough_, targetLocId, scopeNames, _p306._7),
								_1: {ctor: '[]'}
							}
						});
				case 'EConst':
					if (_p306._2.ctor === '_Tuple3') {
						return _elm_lang$core$Native_Utils.eq(_p306._2._0, targetLocId) ? _elm_lang$core$Maybe$Just(scopeNames) : _elm_lang$core$Maybe$Nothing;
					} else {
						break _v148_2;
					}
				default:
					break _v148_2;
			}
		} while(false);
		var recurse = function (exp) {
			return A3(_user$project$LangTools$scopeNamesLocLiftedThrough_, targetLocId, scopeNames, exp);
		};
		return A2(
			_user$project$Utils$mapFirstSuccess,
			recurse,
			_user$project$Lang$childExps(exp));
	});
var _user$project$LangTools$scopeNamesLocLiftedThrough = F2(
	function (newLetBody, targetLocId) {
		var _p308 = A3(
			_user$project$LangTools$scopeNamesLocLiftedThrough_,
			targetLocId,
			{ctor: '[]'},
			newLetBody);
		if (_p308.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return _p308._0;
		}
	});
var _user$project$LangTools$leadingCapitals = _elm_lang$core$Regex$regex('^[A-Z]+');
var _user$project$LangTools$downcaseLeadingCapitals = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$AtMost(1),
		_user$project$LangTools$leadingCapitals,
		function (_p309) {
			var _p310 = _p309;
			return _elm_lang$core$String$toLower(_p310.match);
		},
		string);
};
var _user$project$LangTools$trailingDigits = _elm_lang$core$Regex$regex('[0-9]+$');
var _user$project$LangTools$removeTrailingDigits = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$AtMost(1),
		_user$project$LangTools$trailingDigits,
		function (_p311) {
			return '';
		},
		string);
};
var _user$project$LangTools$leadingDigits = _elm_lang$core$Regex$regex('^[0-9]+');
var _user$project$LangTools$removeLeadingDigits = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$AtMost(1),
		_user$project$LangTools$leadingDigits,
		function (_p312) {
			return '';
		},
		string);
};
var _user$project$LangTools$typeToExpName = function (tipe) {
	typeToExpName:
	while (true) {
		var _p313 = tipe.val.t__;
		switch (_p313.ctor) {
			case 'TNum':
				return 'num';
			case 'TBool':
				return 'bool';
			case 'TString':
				return 'string';
			case 'TNull':
				return 'null';
			case 'TList':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$LangTools$typeToExpName(_p313._1),
					'List');
			case 'TTuple':
				if (_p313._3.ctor === 'Just') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangTools$typeToExpName(_p313._3._0),
						'List');
				} else {
					var headNames = A2(_elm_lang$core$List$map, _user$project$LangTools$typeToExpName, _p313._1);
					var _p314 = {
						ctor: '_Tuple2',
						_0: _user$project$Utils$dedup(headNames),
						_1: headNames
					};
					if (_p314._1.ctor === '[]') {
						return 'unit';
					} else {
						if (_p314._1._1.ctor === '[]') {
							return A2(_elm_lang$core$Basics_ops['++'], _p314._1._0, 'Singleton');
						} else {
							if (_p314._1._1._1.ctor === '[]') {
								if ((_p314._0.ctor === '::') && (_p314._0._1.ctor === '[]')) {
									var _p315 = _p314._0._0;
									return _elm_lang$core$Native_Utils.eq(_p315, 'num') ? 'point' : A2(_elm_lang$core$Basics_ops['++'], _p315, 'Pair');
								} else {
									return A2(
										_elm_lang$core$Basics_ops['++'],
										_p314._1._0,
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Utils$capitalize(_p314._1._1._0),
											'Pair'));
								}
							} else {
								if (_p314._1._1._1._1.ctor === '[]') {
									if ((_p314._0.ctor === '::') && (_p314._0._1.ctor === '[]')) {
										return A2(
											_elm_lang$core$Basics_ops['++'],
											'three',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Utils$capitalize(_p314._0._0),
												's'));
									} else {
										return A2(
											_elm_lang$core$Basics_ops['++'],
											_p314._1._0,
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Utils$capitalize(_p314._1._1._0),
												_user$project$Utils$capitalize(_p314._1._1._1._0)));
									}
								} else {
									return A2(
										_elm_lang$core$Basics_ops['++'],
										_p314._1._0,
										A2(
											_elm_lang$core$String$join,
											'',
											A2(_elm_lang$core$List$map, _user$project$Utils$capitalize, _p314._1._1)));
								}
							}
						}
					}
				}
			case 'TDict':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$LangTools$typeToExpName(_p313._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'To',
						_user$project$Utils$capitalize(
							_user$project$LangTools$typeToExpName(_p313._2))));
			case 'TArrow':
				return A2(
					_elm_lang$core$Maybe$withDefault,
					'func',
					A2(
						_elm_lang$core$Maybe$map,
						function (retType) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$LangTools$typeToExpName(retType),
								'Func');
						},
						_user$project$Utils$maybeLast(_p313._1)));
			case 'TUnion':
				if (_p313._1.ctor === '[]') {
					return 'nothing';
				} else {
					return A2(
						_elm_lang$core$String$join,
						'Or',
						{
							ctor: '::',
							_0: _user$project$LangTools$typeToExpName(_p313._1._0),
							_1: A2(
								_elm_lang$core$List$map,
								function (_p316) {
									return _user$project$Utils$capitalize(
										_user$project$LangTools$typeToExpName(_p316));
								},
								_p313._1._1)
						});
				}
			case 'TNamed':
				return _user$project$Utils$uncapitalize(_p313._1);
			case 'TVar':
				return 'thing';
			case 'TWildcard':
				return 'anything';
			default:
				var _v154 = _p313._2;
				tipe = _v154;
				continue typeToExpName;
		}
	}
};
var _user$project$LangTools$simpleExpNameWithDefault = F2(
	function ($default, exp) {
		var recurse = function (e) {
			return A2(_user$project$LangTools$simpleExpNameWithDefault, $default, e);
		};
		var _p317 = _user$project$Lang$expEffectiveExp(exp).val.e__;
		switch (_p317.ctor) {
			case 'EConst':
				return 'num';
			case 'EVar':
				return _p317._1;
			case 'EApp':
				return A2(
					_elm_lang$core$Maybe$withDefault,
					$default,
					_user$project$LangTools$expToMaybeIdent(_p317._1));
			case 'EList':
				if (_p317._3.ctor === 'Just') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						recurse(_p317._3._0),
						'List');
				} else {
					var _p321 = _p317._1;
					var headNames = A2(
						_elm_lang$core$List$map,
						function (_p318) {
							return _user$project$Utils$removeNumericSuffix(
								recurse(_p318));
						},
						_user$project$Lang$headExps(_p321));
					var _p319 = {
						ctor: '_Tuple2',
						_0: _user$project$Utils$dedup(headNames),
						_1: headNames
					};
					_v156_2:
					do {
						if (_p319._1.ctor === '[]') {
							return 'unit';
						} else {
							if (_p319._1._1.ctor === '[]') {
								return A2(_elm_lang$core$Basics_ops['++'], _p319._1._0, 'Singleton');
							} else {
								if (_p319._1._1._1.ctor === '[]') {
									if ((_p319._0.ctor === '::') && (_p319._0._1.ctor === '[]')) {
										break _v156_2;
									} else {
										return A2(
											_elm_lang$core$Basics_ops['++'],
											_p319._1._0,
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Utils$capitalize(_p319._1._1._0),
												'Pair'));
									}
								} else {
									if ((_p319._0.ctor === '::') && (_p319._0._1.ctor === '[]')) {
										break _v156_2;
									} else {
										if (_p319._1._1._1._1.ctor === '[]') {
											return A2(
												_elm_lang$core$Basics_ops['++'],
												_p319._1._0,
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$Utils$capitalize(_p319._1._1._0),
													_user$project$Utils$capitalize(_p319._1._1._1._0)));
										} else {
											return A2(
												_elm_lang$core$Basics_ops['++'],
												_p319._1._0,
												A2(
													_elm_lang$core$String$join,
													'',
													A2(_elm_lang$core$List$map, _user$project$Utils$capitalize, _p319._1._1)));
										}
									}
								}
							}
						}
					} while(false);
					var _p320 = _p319._0._0;
					return (_elm_lang$core$Native_Utils.eq(_p320, 'num') && _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$List$length(_p321),
						2)) ? 'point' : A2(_elm_lang$core$Basics_ops['++'], _p320, 's');
				}
			case 'EOp':
				return A2(
					_elm_lang$core$Maybe$withDefault,
					$default,
					A2(
						_user$project$Utils$findFirst,
						F2(
							function (x, y) {
								return !_elm_lang$core$Native_Utils.eq(x, y);
							})($default),
						A2(_elm_lang$core$List$map, recurse, _p317._2)));
			case 'EBase':
				switch (_p317._1.ctor) {
					case 'ENull':
						return 'null';
					case 'EString':
						return 'string';
					default:
						return 'bool';
				}
			case 'EFun':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					recurse(_p317._2),
					'Func');
			case 'EHole':
				return 'hole';
			default:
				return $default;
		}
	});
var _user$project$LangTools$defaultExpName = 'thing';
var _user$project$LangTools$simpleExpName = function (exp) {
	return A2(_user$project$LangTools$simpleExpNameWithDefault, _user$project$LangTools$defaultExpName, exp);
};
var _user$project$LangTools$reflowBoundExpWhitespace = function (boundExp) {
	var _p322 = boundExp.val.e__;
	if (_p322.ctor === 'EFun') {
		return A2(
			_user$project$Lang$replaceE__,
			boundExp,
			A4(
				_user$project$Lang$EFun,
				_user$project$Lang$ws(' '),
				A3(_user$project$Lang$setPatListWhitespace, ' ', ' ', _p322._1),
				A2(
					_user$project$Lang$replacePrecedingWhitespace,
					'\n  ',
					A2(
						_user$project$Lang$replaceIndentation,
						'  ',
						_user$project$Lang$removePrecedingWhitespace(_p322._2))),
				_p322._3));
	} else {
		return _user$project$Lang$expHasNewlines(
			_user$project$Lang$removePrecedingWhitespace(boundExp)) ? A2(
			_user$project$Lang$replacePrecedingWhitespace,
			'\n  ',
			A2(
				_user$project$Lang$replaceIndentation,
				'  ',
				_user$project$Lang$removePrecedingWhitespace(boundExp))) : A2(_user$project$Lang$replacePrecedingWhitespace, ' ', boundExp);
	}
};
var _user$project$LangTools$longLineLength = 50;
var _user$project$LangTools$copyListWhitespace = F2(
	function (templateList, list) {
		var _p323 = {ctor: '_Tuple2', _0: templateList.val.e__, _1: list.val.e__};
		if (((_p323.ctor === '_Tuple2') && (_p323._0.ctor === 'EList')) && (_p323._1.ctor === 'EList')) {
			var _p324 = A2(_user$project$Utils$zipAndLeftovers, _p323._0._1, _p323._1._1);
			var headPairs = _p324._0;
			var leftoverTemplateHeads = _p324._1;
			var leftoverHeads = _p324._2;
			var newHeads = A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				leftoverHeads,
				A2(
					_elm_lang$core$List$map,
					function (_p325) {
						var _p326 = _p325;
						return {
							ctor: '_Tuple2',
							_0: _p326._0._0,
							_1: A2(_user$project$Lang$copyPrecedingWhitespace, _p326._0._1, _p326._1._1)
						};
					},
					headPairs));
			return A2(
				_user$project$Lang$replaceE__,
				list,
				A5(_user$project$Lang$EList, _p323._0._0, newHeads, _p323._0._2, _p323._1._3, _p323._0._4));
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'LangTools',
				{
					start: {line: 514, column: 3},
					end: {line: 526, column: 131}
				},
				_p323)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Lang.copyListWs expected lists, but given ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LangUnparser$unparseWithIds(templateList),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' and ',
							_user$project$LangUnparser$unparseWithIds(list)))));
		}
	});
var _user$project$LangTools$outerSameValueExp = F2(
	function (program, targetExp) {
		var targetEId = _user$project$Lang$expEffectiveExp(targetExp).val.eid;
		return A2(
			_elm_lang$core$Maybe$withDefault,
			targetExp,
			A2(
				_user$project$Lang$findFirstNode,
				function (exp) {
					return _elm_lang$core$Native_Utils.eq(
						_user$project$Lang$expEffectiveExp(exp).val.eid,
						targetEId);
				},
				program));
	});
var _user$project$LangTools$findRecursiveBranch = F2(
	function (program, funcExp) {
		var _p328 = A2(_user$project$LangTools$findLetAndIdentBindingExpLoose, funcExp.val.eid, program);
		if ((_p328.ctor === 'Just') && (_p328._0.ctor === '_Tuple2')) {
			return _elm_lang$core$Native_Utils.eq(
				_user$project$LangTools$expToLetRec(_p328._0._0),
				true) ? A2(
				_elm_lang$core$Maybe$andThen,
				function (recCalls) {
					return A2(
						_user$project$Lang$mapFirstSuccessNode,
						function (e) {
							var _p329 = e.val.e__;
							if (_p329.ctor === 'EIf') {
								var _p331 = _p329._5;
								var _p330 = _p329._3;
								return A2(
									_user$project$Utils$isSublistAsSet,
									recCalls,
									_user$project$Lang$flattenExpTree(_p330)) ? _elm_lang$core$Maybe$Just(_p330) : (A2(
									_user$project$Utils$isSublistAsSet,
									recCalls,
									_user$project$Lang$flattenExpTree(_p331)) ? _elm_lang$core$Maybe$Just(_p331) : _elm_lang$core$Maybe$Nothing);
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						},
						funcExp);
				},
				A2(
					_user$project$Utils$filterMaybe,
					function (_p332) {
						return !_elm_lang$core$List$isEmpty(_p332);
					},
					A2(
						_elm_lang$core$Maybe$andThen,
						function (_p333) {
							return A2(
								_elm_lang$core$Maybe$map,
								_elm_lang$core$List$filter(_user$project$Lang$isApp),
								_user$project$Utils$projJusts(
									A2(
										_elm_lang$core$List$map,
										function (_p334) {
											return A2(
												_elm_lang$core$Maybe$withDefault,
												_elm_lang$core$Maybe$Nothing,
												A2(
													_user$project$Lang$parentByEId,
													program,
													function (_) {
														return _.eid;
													}(
														function (_) {
															return _.val;
														}(_p334))));
										},
										A2(_user$project$LangTools$identifierUses, _p328._0._1, _p333))));
						},
						_user$project$LangTools$expToMaybeFuncBody(funcExp)))) : _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LangTools$terminalExpLevels = function (exp) {
	var _p335 = _user$project$Lang$expEffectiveExp(exp).val.e__;
	switch (_p335.ctor) {
		case 'EIf':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$LangTools$terminalExpLevels(_p335._3),
				_user$project$LangTools$terminalExpLevels(_p335._5));
		case 'ECase':
			return A2(
				_elm_lang$core$List$concatMap,
				_user$project$LangTools$terminalExpLevels,
				_user$project$Lang$branchExps(_p335._2));
		case 'ETypeCase':
			return A2(
				_elm_lang$core$List$concatMap,
				_user$project$LangTools$terminalExpLevels,
				_user$project$Lang$tbranchExps(_p335._2));
		default:
			return {
				ctor: '::',
				_0: exp,
				_1: {ctor: '[]'}
			};
	}
};
var _user$project$LangTools$lastExp = function (exp) {
	lastExp:
	while (true) {
		var _p336 = _elm_lang$core$List$reverse(
			_user$project$Lang$childExps(exp));
		if (_p336.ctor === '[]') {
			return exp;
		} else {
			var _v164 = _p336._0;
			exp = _v164;
			continue lastExp;
		}
	}
};
var _user$project$LangTools$maybeSameLevelChild = function (exp) {
	var _p337 = exp.val.e__;
	switch (_p337.ctor) {
		case 'ETyp':
			return _elm_lang$core$Maybe$Just(_p337._3);
		case 'EColonType':
			return _elm_lang$core$Maybe$Just(_p337._1);
		case 'ETypeAlias':
			return _elm_lang$core$Maybe$Just(_p337._3);
		case 'ELet':
			return _elm_lang$core$Maybe$Just(_p337._7);
		case 'EComment':
			return _elm_lang$core$Maybe$Just(_p337._2);
		case 'EOption':
			return _elm_lang$core$Maybe$Just(_p337._4);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangTools$sameLevelExps = function (exp) {
	var _p338 = _user$project$LangTools$maybeSameLevelChild(exp);
	if (_p338.ctor === 'Just') {
		return {
			ctor: '::',
			_0: exp,
			_1: _user$project$LangTools$sameLevelExps(_p338._0)
		};
	} else {
		return {
			ctor: '::',
			_0: exp,
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$LangTools$lastSameLevelExp = function (exp) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		exp,
		A2(
			_elm_lang$core$Maybe$map,
			_user$project$LangTools$lastSameLevelExp,
			_user$project$LangTools$maybeSameLevelChild(exp)));
};
var _user$project$LangTools$isSameLevelEId = F2(
	function (eid, superExp) {
		isSameLevelEId:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(eid, superExp.val.eid)) {
				return true;
			} else {
				var _p339 = _user$project$LangTools$maybeSameLevelChild(superExp);
				if (_p339.ctor === 'Just') {
					var _v168 = eid,
						_v169 = _p339._0;
					eid = _v168;
					superExp = _v169;
					continue isSameLevelEId;
				} else {
					return false;
				}
			}
		}
	});
var _user$project$LangTools$reflowLetWhitespace = F2(
	function (program, letExp) {
		var _p340 = letExp.val.e__;
		if (_p340.ctor === 'ELet') {
			var _p354 = _p340._6;
			var _p353 = _p340._4;
			var _p352 = _p340._3;
			var _p351 = _p340._0;
			var _p350 = _p340._1;
			var _p349 = _p340._2;
			var _p348 = _p340._5;
			var _p347 = _p340._7;
			var oldIndentation = _user$project$Lang$indentationOf(letExp);
			var oneOrTwoNewlinesBeforeLet = function () {
				var newlineCount = _elm_lang$core$List$length(
					A2(_elm_lang$core$String$split, '\n', _p351.val)) - 1;
				return (_elm_lang$core$Native_Utils.cmp(newlineCount, 1) < 1) ? '\n' : '\n\n';
			}();
			var _p341 = _p348.val.e__;
			if (_p341.ctor === 'EFun') {
				var _p346 = _p341._1;
				var _p345 = _p341._2;
				var multipleLinesForFunction = A2(
					_elm_lang$core$String$contains,
					'\n',
					_user$project$LangUnparser$unparse(_p345)) || (_elm_lang$core$Native_Utils.cmp(
					_user$project$LangTools$longLineLength,
					_elm_lang$core$String$length(
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$LangUnparser$unparsePatWithUniformWhitespace, true, _p352),
							A3(_user$project$LangUnparser$unparseWithUniformWhitespace, true, true, _p348)))) < 0);
				var newLineForFunctionArgs = _elm_lang$core$Native_Utils.cmp(
					_user$project$LangTools$longLineLength,
					_elm_lang$core$String$length(
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$LangUnparser$unparsePatWithUniformWhitespace, true, _p352),
							A2(
								_elm_lang$core$String$join,
								' ',
								A2(
									_elm_lang$core$List$map,
									_user$project$LangUnparser$unparsePatWithUniformWhitespace(true),
									_p346))))) < 0;
				var _p342 = function () {
					if (A2(_user$project$LangTools$isSameLevelEId, letExp.val.eid, program)) {
						var oldBodyWs = _user$project$Lang$precedingWhitespace(_p347);
						return newLineForFunctionArgs ? {
							ctor: '_Tuple5',
							_0: '\n\n',
							_1: '\n  ',
							_2: '\n    ',
							_3: A2(_user$project$Lang$replaceIndentation, '    ', _p345),
							_4: 2
						} : (multipleLinesForFunction ? {
							ctor: '_Tuple5',
							_0: '\n\n',
							_1: ' ',
							_2: '\n  ',
							_3: A2(_user$project$Lang$replaceIndentation, '  ', _p345),
							_4: 2
						} : {ctor: '_Tuple5', _0: oneOrTwoNewlinesBeforeLet, _1: ' ', _2: ' ', _3: _p345, _4: 1});
					} else {
						var letWs = A2(_elm_lang$core$Basics_ops['++'], oneOrTwoNewlinesBeforeLet, oldIndentation);
						var _p343 = newLineForFunctionArgs ? {
							ctor: '_Tuple3',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								A2(_elm_lang$core$Basics_ops['++'], oldIndentation, '  ')),
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								A2(_elm_lang$core$Basics_ops['++'], oldIndentation, '    ')),
							_2: A2(
								_user$project$Lang$replaceIndentation,
								A2(_elm_lang$core$Basics_ops['++'], oldIndentation, '    '),
								_p345)
						} : (multipleLinesForFunction ? {
							ctor: '_Tuple3',
							_0: ' ',
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								A2(_elm_lang$core$Basics_ops['++'], oldIndentation, '  ')),
							_2: A2(
								_user$project$Lang$replaceIndentation,
								A2(_elm_lang$core$Basics_ops['++'], oldIndentation, '  '),
								_p345)
						} : {ctor: '_Tuple3', _0: ' ', _1: ' ', _2: _p345});
						var funcWs = _p343._0;
						var fbodyWs = _p343._1;
						var newFBody = _p343._2;
						var bodyMinimalNewlineCount = multipleLinesForFunction ? 2 : 1;
						return {ctor: '_Tuple5', _0: letWs, _1: funcWs, _2: fbodyWs, _3: newFBody, _4: bodyMinimalNewlineCount};
					}
				}();
				var letWs_ = _p342._0;
				var funcWs_ = _p342._1;
				var fbodyWs_ = _p342._2;
				var newFBody = _p342._3;
				var bodyMinimalNewlineCount = _p342._4;
				var _p344 = {
					ctor: '_Tuple3',
					_0: _user$project$Lang$ws(letWs_),
					_1: _user$project$Lang$ws(funcWs_),
					_2: _user$project$Lang$ws(fbodyWs_)
				};
				var letWs = _p344._0;
				var funcWs = _p344._1;
				var fbodyWs = _p344._2;
				var newFunc = A2(
					_user$project$Lang$replaceE__,
					_p348,
					A4(
						_user$project$Lang$EFun,
						funcWs,
						A3(_user$project$Lang$setPatListWhitespace, '', ' ', _p346),
						A2(_user$project$Lang$replacePrecedingWhitespace, fbodyWs_, newFBody),
						_user$project$Lang$space0));
				return A2(
					_user$project$Lang$replaceE__,
					letExp,
					A9(
						_user$project$Lang$ELet,
						letWs,
						_p350,
						_p349,
						A2(_user$project$Lang$replacePrecedingWhitespacePat, ' ', _p352),
						_p353,
						newFunc,
						_p354,
						A3(
							_user$project$Lang$ensureNNewlinesExp,
							bodyMinimalNewlineCount,
							_user$project$Lang$extractIndentation(letWs_),
							_p347),
						_user$project$Lang$space0));
			} else {
				var minimalSurroundingNewlineCount = A2(
					_elm_lang$core$String$contains,
					'\n',
					_user$project$LangUnparser$unparse(_p348)) ? 2 : 1;
				var newlinesBefore = _elm_lang$core$Native_Utils.eq(letExp.val.eid, program.val.eid) ? 0 : minimalSurroundingNewlineCount;
				return A2(
					_user$project$Lang$replaceE__,
					letExp,
					A9(
						_user$project$Lang$ELet,
						_user$project$Lang$ws(
							A3(_user$project$Lang$ensureNNewlines, newlinesBefore, _p351.val, _p351.val)),
						_p350,
						_p349,
						A2(_user$project$Lang$replacePrecedingWhitespacePat, ' ', _p352),
						_p353,
						_p348,
						_p354,
						A3(
							_user$project$Lang$ensureNNewlinesExp,
							minimalSurroundingNewlineCount,
							_user$project$Lang$extractIndentation(_p351.val),
							_p347),
						_user$project$Lang$space0));
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'LangTools',
				{
					start: {line: 536, column: 3},
					end: {line: 651, column: 92}
				},
				_p340)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'reflowLetWhitespace expected an ELet, got: ',
					_user$project$LangUnparser$unparseWithIds(letExp)));
		}
	});
var _user$project$LangTools$newLetFancyWhitespace = F6(
	function (insertedLetEId, isRec, pat, boundExp, expToWrap, program) {
		var isTopLevel = A2(_user$project$LangTools$isSameLevelEId, expToWrap.val.eid, program);
		var letOrDef = isTopLevel ? _user$project$Lang$Def : _user$project$Lang$Let;
		var isActuallyRec = isTopLevel ? A2(_user$project$ElmParser$isTopLevelDefImplicitlyRec, pat, boundExp) : isRec;
		var newLetIndentation = function () {
			var _p356 = A2(_user$project$Lang$parentByEId, program, expToWrap.val.eid);
			if ((_p356.ctor === 'Just') && (_p356._0.ctor === 'Just')) {
				var _p358 = _p356._0._0;
				return _elm_lang$core$Native_Utils.eq(
					A2(
						_elm_lang$core$Maybe$map,
						function (_p357) {
							return function (_) {
								return _.eid;
							}(
								function (_) {
									return _.val;
								}(_p357));
						},
						_user$project$LangTools$expToMaybeLetBody(_p358)),
					_elm_lang$core$Maybe$Just(expToWrap.val.eid)) ? A2(_user$project$Lang$indentationAt, _p358.val.eid, program) : A2(_user$project$Lang$indentationAt, expToWrap.val.eid, program);
			} else {
				return A2(_user$project$Lang$indentationAt, expToWrap.val.eid, program);
			}
		}();
		var newlineCountAfterLet = function () {
			var newlinesBeforeWrapped = _elm_lang$core$List$length(
				A2(
					_elm_lang$core$String$split,
					'\n',
					_user$project$Lang$precedingWhitespace(expToWrap))) - 1;
			return (isTopLevel || (_elm_lang$core$Native_Utils.cmp(newlinesBeforeWrapped, 2) > -1)) ? 2 : 1;
		}();
		var newlineCountBeforeLet = _elm_lang$core$Native_Utils.eq(expToWrap.val.eid, program.val.eid) ? 1 : newlineCountAfterLet;
		var expToWrapWithNewWs = function () {
			var wrappedExpIndent = (_user$project$Lang$isLet(expToWrap) || isTopLevel) ? '' : '  ';
			return (_user$project$Lang$patHasNewlines(pat) || _user$project$Lang$expHasNewlines(boundExp)) ? A2(
				_user$project$Lang$replaceIndentation,
				wrappedExpIndent,
				A2(_user$project$Lang$ensureWhitespaceNNewlinesExp, newlineCountAfterLet, expToWrap)) : A3(_user$project$Lang$ensureWhitespaceSmartExp, newlineCountAfterLet, wrappedExpIndent, expToWrap);
		}();
		return A2(
			_user$project$Lang$indent,
			newLetIndentation,
			A2(
				_user$project$Lang$replacePrecedingWhitespace,
				A2(_elm_lang$core$String$repeat, newlineCountBeforeLet, '\n'),
				A2(
					_user$project$Lang$withDummyExpInfoEId,
					insertedLetEId,
					A9(
						_user$project$Lang$ELet,
						_user$project$Lang$space0,
						letOrDef,
						isActuallyRec,
						_user$project$Lang$ensureWhitespacePat(pat),
						_user$project$Lang$space1,
						_user$project$Lang$ensureWhitespaceExp(
							A2(_user$project$Lang$replaceIndentation, '  ', boundExp)),
						_user$project$Lang$space1,
						expToWrapWithNewWs,
						_user$project$Lang$space0))));
	});
var _user$project$LangTools$newVariableVisibleTo = F6(
	function (insertedLetEId, suggestedName, startingNumberForNonCollidingName, boundExp, observerEIds, program) {
		var eidToWrap = function (_) {
			return _.eid;
		}(
			function (_) {
				return _.val;
			}(
				A3(
					_user$project$LangTools$deepestCommonAncestorOrSelfWithNewline,
					program,
					_elm_lang$core$Basics$always(true),
					function (exp) {
						return A2(_elm_lang$core$List$member, exp.val.eid, observerEIds);
					})));
		var newName = A3(
			_user$project$LangTools$nonCollidingName,
			suggestedName,
			startingNumberForNonCollidingName,
			A2(
				_user$project$LangTools$visibleIdentifiersAtEIds,
				program,
				_elm_lang$core$Set$fromList(observerEIds)));
		var newProgram = A3(
			_user$project$Lang$mapExpNode,
			eidToWrap,
			function (expToWrap) {
				return A6(
					_user$project$LangTools$newLetFancyWhitespace,
					insertedLetEId,
					false,
					_user$project$Lang$pVar(newName),
					boundExp,
					expToWrap,
					program);
			},
			program);
		return {ctor: '_Tuple2', _0: newName, _1: newProgram};
	});
var _user$project$LangTools$wrapWithLets = F3(
	function (listOfListsOfNamesAndAssigns, eidToWrap, program) {
		var nonEmptyListOfListsOfNamesAndAssigns = A2(
			_elm_lang$core$List$filter,
			function (_p359) {
				return !_elm_lang$core$List$isEmpty(_p359);
			},
			listOfListsOfNamesAndAssigns);
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (letNamesAndAssigns, program) {
					var _p360 = _user$project$Lang$patBoundExpOf(letNamesAndAssigns);
					var pat = _p360._0;
					var boundExp = _p360._1;
					return A3(
						_user$project$Lang$mapExpNode,
						eidToWrap,
						function (expToWrap) {
							return A6(_user$project$LangTools$newLetFancyWhitespace, -1, false, pat, boundExp, expToWrap, program);
						},
						program);
				}),
			program,
			nonEmptyListOfListsOfNamesAndAssigns);
	});
var _user$project$LangTools$isSameLevel = F2(
	function (exp, superExp) {
		isSameLevel:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(exp, superExp)) {
				return true;
			} else {
				var _p361 = _user$project$LangTools$maybeSameLevelChild(superExp);
				if (_p361.ctor === 'Just') {
					var _v174 = exp,
						_v175 = _p361._0;
					exp = _v174;
					superExp = _v175;
					continue isSameLevel;
				} else {
					return false;
				}
			}
		}
	});
var _user$project$LangTools$justFindPatByPId = F2(
	function (exp, pid) {
		return A2(
			_user$project$Utils$fromJust__,
			function (_p362) {
				var _p363 = _p362;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Couldn\'t find pid ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(pid),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' in ',
							_user$project$LangUnparser$unparseWithIds(exp))));
			},
			A2(_user$project$Lang$findPatByPId, exp, pid));
	});
var _user$project$LangTools$justFindExpWithAncestorsByEId = F2(
	function (root, eid) {
		return A2(
			_user$project$Utils$fromJust__,
			function (_p364) {
				var _p365 = _p364;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'justFindExpWithAncestorsByEId: Couldn\'t find eid ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(eid),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' in ',
							_user$project$LangUnparser$unparseWithIds(root))));
			},
			A2(_user$project$Lang$findWithAncestorsByEId, root, eid));
	});
var _user$project$LangTools$deepestAncestorWithNewline = F2(
	function (program, eid) {
		var ancestors = A2(
			_user$project$Utils$dropLast,
			1,
			A2(_user$project$LangTools$justFindExpWithAncestorsByEId, program, eid));
		var ancestorsWithNewlines = A2(
			_elm_lang$core$List$filter,
			function (_p366) {
				return A2(
					_elm_lang$core$String$contains,
					'\n',
					_user$project$Lang$precedingWhitespace(_p366));
			},
			ancestors);
		return _user$project$Utils$last_(
			{ctor: '::', _0: program, _1: ancestorsWithNewlines});
	});
var _user$project$LangTools$justFindExpByEId = F2(
	function (exp, eid) {
		return A2(
			_user$project$Utils$fromJust__,
			function (_p367) {
				var _p368 = _p367;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Couldn\'t find eid ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(eid),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' in ',
							_user$project$LangUnparser$unparseWithIds(exp))));
			},
			A2(_user$project$Lang$findExpByEId, exp, eid));
	});
var _user$project$LangTools$locationInProgram = F2(
	function (program, eid) {
		return _user$project$Info$parsedThingToLocation(
			A2(_user$project$LangTools$justFindExpByEId, program, eid));
	});
var _user$project$LangTools$outerSameValueExpByEId = F2(
	function (program, targetEId) {
		return A2(
			_user$project$LangTools$outerSameValueExp,
			program,
			A2(_user$project$LangTools$justFindExpByEId, program, targetEId));
	});
var _user$project$LangTools$newLetAfterComments = F4(
	function (eidToWrap, pat, boundExp, program) {
		return A3(
			_user$project$Lang$mapExpNode,
			_user$project$LangTools$firstNonComment(
				A2(_user$project$LangTools$justFindExpByEId, program, eidToWrap)).val.eid,
			function (nonComment) {
				return A6(_user$project$LangTools$newLetFancyWhitespace, -1, false, pat, boundExp, nonComment, program);
			},
			program);
	});
var _user$project$LangTools$allLocsAndNumbers = function (exp) {
	return A3(
		_user$project$Lang$foldExpViaE__,
		F2(
			function (e__, acc) {
				var _p369 = e__;
				if (_p369.ctor === 'EConst') {
					return {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p369._2, _1: _p369._1},
						_1: acc
					};
				} else {
					return acc;
				}
			}),
		{ctor: '[]'},
		exp);
};
var _user$project$LangTools$allLocIds = function (exp) {
	return A2(
		_elm_lang$core$List$map,
		function (_p370) {
			var _p371 = _p370;
			return _p371._0._0;
		},
		_user$project$LangTools$allLocsAndNumbers(exp));
};
var _user$project$LangTools$frozenLocIdsAndNumbers = function (exp) {
	return A2(
		_elm_lang$core$List$map,
		function (_p372) {
			var _p373 = _p372;
			return {ctor: '_Tuple2', _0: _p373._0._0, _1: _p373._1};
		},
		A2(
			_elm_lang$core$List$filter,
			function (_p374) {
				var _p375 = _p374;
				return _elm_lang$core$Native_Utils.eq(_p375._0._1, '!') || _user$project$FastParser$isPreludeLocId(_p375._0._0);
			},
			_user$project$LangTools$allLocsAndNumbers(exp)));
};
var _user$project$LangTools$unfrozenLocIdsAndNumbers = function (exp) {
	return A2(
		_elm_lang$core$List$map,
		function (_p376) {
			var _p377 = _p376;
			return {ctor: '_Tuple2', _0: _p377._0._0, _1: _p377._1};
		},
		A2(
			_elm_lang$core$List$filter,
			function (_p378) {
				var _p379 = _p378;
				return (!_elm_lang$core$Native_Utils.eq(_p379._0._1, '!')) && (!_user$project$FastParser$isPreludeLocId(_p379._0._0));
			},
			_user$project$LangTools$allLocsAndNumbers(exp)));
};
var _user$project$LangTools$replaceConstsWithVars = F2(
	function (locIdToNewName, exp) {
		var replacer = function (exp__) {
			var _p380 = exp__;
			if ((_p380.ctor === 'EConst') && (_p380._2.ctor === '_Tuple3')) {
				var _p381 = A2(_elm_lang$core$Dict$get, _p380._2._0, locIdToNewName);
				if (_p381.ctor === 'Just') {
					return A2(_user$project$Lang$EVar, _p380._0, _p381._0);
				} else {
					return exp__;
				}
			} else {
				return exp__;
			}
		};
		return A2(_user$project$Lang$mapExpViaExp__, replacer, exp);
	});
var _user$project$LangTools$patternListsEqual = F2(
	function (patsA, patsB) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$List$all(
					function (_p382) {
						var _p383 = _p382;
						return A2(_user$project$LangTools$patternsEqual, _p383._0, _p383._1);
					}),
				A2(_user$project$Utils$maybeZip, patsA, patsB)));
	});
var _user$project$LangTools$patternsEqual = F2(
	function (patA, patB) {
		patternsEqual:
		while (true) {
			var _p384 = {ctor: '_Tuple2', _0: patA.val.p__, _1: patB.val.p__};
			_v188_8:
			do {
				_v188_7:
				do {
					if (_p384.ctor === '_Tuple2') {
						switch (_p384._0.ctor) {
							case 'PVar':
								switch (_p384._1.ctor) {
									case 'PVar':
										return _elm_lang$core$Native_Utils.eq(_p384._0._1, _p384._1._1);
									case 'PParens':
										break _v188_7;
									default:
										break _v188_8;
								}
							case 'PConst':
								switch (_p384._1.ctor) {
									case 'PConst':
										return _elm_lang$core$Native_Utils.eq(_p384._0._1, _p384._1._1);
									case 'PParens':
										break _v188_7;
									default:
										break _v188_8;
								}
							case 'PBase':
								switch (_p384._1.ctor) {
									case 'PBase':
										return A2(_user$project$Lang$eBaseValsEqual, _p384._0._1, _p384._1._1);
									case 'PParens':
										break _v188_7;
									default:
										break _v188_8;
								}
							case 'PList':
								switch (_p384._1.ctor) {
									case 'PList':
										if (_p384._0._3.ctor === 'Nothing') {
											if (_p384._1._3.ctor === 'Nothing') {
												return A2(_user$project$LangTools$patternListsEqual, _p384._0._1, _p384._1._1);
											} else {
												break _v188_8;
											}
										} else {
											if (_p384._1._3.ctor === 'Just') {
												return A2(
													_user$project$LangTools$patternListsEqual,
													{ctor: '::', _0: _p384._0._3._0, _1: _p384._0._1},
													{ctor: '::', _0: _p384._1._3._0, _1: _p384._1._1});
											} else {
												break _v188_8;
											}
										}
									case 'PParens':
										break _v188_7;
									default:
										break _v188_8;
								}
							case 'PAs':
								switch (_p384._1.ctor) {
									case 'PAs':
										return _elm_lang$core$Native_Utils.eq(_p384._0._1, _p384._1._1) && A2(_user$project$LangTools$patternsEqual, _p384._0._3, _p384._1._3);
									case 'PParens':
										break _v188_7;
									default:
										break _v188_8;
								}
							case 'PParens':
								var _v189 = _p384._0._1,
									_v190 = patB;
								patA = _v189;
								patB = _v190;
								continue patternsEqual;
							default:
								if (_p384._1.ctor === 'PParens') {
									break _v188_7;
								} else {
									break _v188_8;
								}
						}
					} else {
						break _v188_8;
					}
				} while(false);
				var _v191 = patA,
					_v192 = _p384._1._1;
				patA = _v191;
				patB = _v192;
				continue patternsEqual;
			} while(false);
			return false;
		}
	});
var _user$project$LangTools$matchExp = F2(
	function (structure, exp) {
		matchExp:
		while (true) {
			var childDiffs = function (_p385) {
				var _p386 = _p385;
				var _p387 = A2(
					_user$project$Utils$maybeZip,
					_user$project$Lang$childExps(structure),
					_user$project$Lang$childExps(exp));
				if (_p387.ctor === 'Just') {
					return A2(
						_elm_lang$core$Maybe$map,
						_elm_lang$core$List$concat,
						_user$project$Utils$projJusts(
							A2(
								_elm_lang$core$List$map,
								function (_p388) {
									var _p389 = _p388;
									return A2(_user$project$LangTools$matchExp, _p389._0, _p389._1);
								},
								_p387._0)));
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			};
			var _p390 = {ctor: '_Tuple2', _0: structure.val.e__, _1: exp.val.e__};
			_v196_20:
			do {
				if (_p390.ctor === '_Tuple2') {
					switch (_p390._0.ctor) {
						case 'EHole':
							switch (_p390._0._1.ctor) {
								case 'HoleEmpty':
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: exp,
											_1: {ctor: '[]'}
										});
								case 'HolePredicate':
									return _p390._0._1._0(exp) ? _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: exp,
											_1: {ctor: '[]'}
										}) : _elm_lang$core$Maybe$Nothing;
								default:
									break _v196_20;
							}
						case 'EConst':
							if (_p390._1.ctor === 'EConst') {
								return _elm_lang$core$Native_Utils.eq(_p390._0._1, _p390._1._1) ? _elm_lang$core$Maybe$Just(
									{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'EBase':
							if (_p390._1.ctor === 'EBase') {
								return A2(_user$project$Lang$eBaseValsEqual, _p390._0._1, _p390._1._1) ? _elm_lang$core$Maybe$Just(
									{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'EVar':
							if (_p390._1.ctor === 'EVar') {
								return _elm_lang$core$Native_Utils.eq(_p390._0._1, _p390._1._1) ? _elm_lang$core$Maybe$Just(
									{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'EFun':
							if (_p390._1.ctor === 'EFun') {
								return A2(_user$project$LangTools$patternListsEqual, _p390._0._1, _p390._1._1) ? childDiffs(
									{ctor: '_Tuple0'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'EOp':
							if (_p390._1.ctor === 'EOp') {
								return _elm_lang$core$Native_Utils.eq(_p390._0._1.val, _p390._1._1.val) ? childDiffs(
									{ctor: '_Tuple0'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'EList':
							if (_p390._0._3.ctor === 'Nothing') {
								if ((_p390._1.ctor === 'EList') && (_p390._1._3.ctor === 'Nothing')) {
									return childDiffs(
										{ctor: '_Tuple0'});
								} else {
									break _v196_20;
								}
							} else {
								if ((_p390._1.ctor === 'EList') && (_p390._1._3.ctor === 'Just')) {
									return childDiffs(
										{ctor: '_Tuple0'});
								} else {
									break _v196_20;
								}
							}
						case 'EApp':
							if (_p390._1.ctor === 'EApp') {
								return childDiffs(
									{ctor: '_Tuple0'});
							} else {
								break _v196_20;
							}
						case 'ELet':
							if (_p390._1.ctor === 'ELet') {
								return (_elm_lang$core$Native_Utils.eq(_p390._0._2, _p390._1._2) && A2(_user$project$LangTools$patternsEqual, _p390._0._3, _p390._1._3)) ? childDiffs(
									{ctor: '_Tuple0'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'EIf':
							if (_p390._1.ctor === 'EIf') {
								return childDiffs(
									{ctor: '_Tuple0'});
							} else {
								break _v196_20;
							}
						case 'ECase':
							if (_p390._1.ctor === 'ECase') {
								return A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Maybe$Nothing,
									A2(
										_elm_lang$core$Maybe$andThen,
										function (branchPairs) {
											var bValPairs = A2(
												_elm_lang$core$List$map,
												function (_p391) {
													var _p392 = _p391;
													return {ctor: '_Tuple2', _0: _p392._0.val, _1: _p392._1.val};
												},
												branchPairs);
											return A2(
												_elm_lang$core$List$all,
												function (_p393) {
													var _p394 = _p393;
													return A2(_user$project$LangTools$patternsEqual, _p394._0._1, _p394._1._1);
												},
												bValPairs) ? _elm_lang$core$Maybe$Just(
												childDiffs(
													{ctor: '_Tuple0'})) : _elm_lang$core$Maybe$Nothing;
										},
										A2(_user$project$Utils$maybeZip, _p390._0._2, _p390._1._2)));
							} else {
								break _v196_20;
							}
						case 'ETypeCase':
							if (_p390._1.ctor === 'ETypeCase') {
								return A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Maybe$Nothing,
									A2(
										_elm_lang$core$Maybe$andThen,
										function (tbranchPairs) {
											var tbValPairs = A2(
												_elm_lang$core$List$map,
												function (_p395) {
													var _p396 = _p395;
													return {ctor: '_Tuple2', _0: _p396._0.val, _1: _p396._1.val};
												},
												tbranchPairs);
											return A2(
												_elm_lang$core$List$all,
												function (_p397) {
													var _p398 = _p397;
													return A2(_user$project$Types$equal, _p398._0._1, _p398._1._1);
												},
												tbValPairs) ? _elm_lang$core$Maybe$Just(
												childDiffs(
													{ctor: '_Tuple0'})) : _elm_lang$core$Maybe$Nothing;
										},
										A2(_user$project$Utils$maybeZip, _p390._0._2, _p390._1._2)));
							} else {
								break _v196_20;
							}
						case 'EComment':
							if (_p390._1.ctor === 'EComment') {
								return _elm_lang$core$Native_Utils.eq(_p390._0._1, _p390._1._1) ? childDiffs(
									{ctor: '_Tuple0'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'EOption':
							if (_p390._1.ctor === 'EOption') {
								return (_elm_lang$core$Native_Utils.eq(_p390._0._1, _p390._1._1) && _elm_lang$core$Native_Utils.eq(_p390._0._3, _p390._1._3)) ? childDiffs(
									{ctor: '_Tuple0'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'ETyp':
							if (_p390._1.ctor === 'ETyp') {
								return (A2(_user$project$LangTools$patternsEqual, _p390._0._1, _p390._1._1) && A2(_user$project$Types$equal, _p390._0._2, _p390._1._2)) ? childDiffs(
									{ctor: '_Tuple0'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						case 'EColonType':
							if (_p390._1.ctor === 'EColonType') {
								if (A2(_user$project$Types$equal, _p390._0._3, _p390._1._3)) {
									var _v201 = _p390._0._1,
										_v202 = _p390._1._1;
									structure = _v201;
									exp = _v202;
									continue matchExp;
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							} else {
								break _v196_20;
							}
						case 'ETypeAlias':
							if (_p390._1.ctor === 'ETypeAlias') {
								return (A2(_user$project$LangTools$patternsEqual, _p390._0._1, _p390._1._1) && A2(_user$project$Types$equal, _p390._0._2, _p390._1._2)) ? childDiffs(
									{ctor: '_Tuple0'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v196_20;
							}
						default:
							if (_p390._1.ctor === 'EParens') {
								return childDiffs(
									{ctor: '_Tuple0'});
							} else {
								break _v196_20;
							}
					}
				} else {
					break _v196_20;
				}
			} while(false);
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LangTools$findExpMatches = F2(
	function (structure, program) {
		return A2(
			_elm_lang$core$List$filterMap,
			function (exp) {
				var _p399 = A2(_user$project$LangTools$matchExp, structure, exp);
				if (_p399.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: exp, _1: _p399._0});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			},
			_user$project$Lang$flattenExpTree(program));
	});
var _user$project$LangTools$findExpMatch = F2(
	function (structure, program) {
		return A2(
			_user$project$Lang$mapFirstSuccessNode,
			function (exp) {
				var _p400 = A2(_user$project$LangTools$matchExp, structure, exp);
				if (_p400.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: exp, _1: _p400._0});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			},
			program);
	});
var _user$project$LangTools$extraExpsDiff = F2(
	function (baseExp, otherExp) {
		extraExpsDiff:
		while (true) {
			var childDiffs = function (_p401) {
				var _p402 = _p401;
				var _p403 = A2(
					_user$project$Utils$maybeZip,
					_user$project$Lang$childExps(baseExp),
					_user$project$Lang$childExps(otherExp));
				if (_p403.ctor === 'Just') {
					return A2(
						_elm_lang$core$List$concatMap,
						function (_p404) {
							var _p405 = _p404;
							return A2(_user$project$LangTools$extraExpsDiff, _p405._0, _p405._1);
						},
						_p403._0);
				} else {
					return {
						ctor: '::',
						_0: otherExp,
						_1: {ctor: '[]'}
					};
				}
			};
			var _p406 = {ctor: '_Tuple2', _0: baseExp.val.e__, _1: otherExp.val.e__};
			_v208_21:
			do {
				_v208_20:
				do {
					_v208_13:
					do {
						if (_p406.ctor === '_Tuple2') {
							switch (_p406._0.ctor) {
								case 'EConst':
									switch (_p406._1.ctor) {
										case 'EConst':
											return _elm_lang$core$Native_Utils.eq(_p406._0._1, _p406._1._1) ? {ctor: '[]'} : {
												ctor: '::',
												_0: otherExp,
												_1: {ctor: '[]'}
											};
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EBase':
									switch (_p406._1.ctor) {
										case 'EBase':
											return A2(_user$project$Lang$eBaseValsEqual, _p406._0._1, _p406._1._1) ? {ctor: '[]'} : {
												ctor: '::',
												_0: otherExp,
												_1: {ctor: '[]'}
											};
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EVar':
									switch (_p406._1.ctor) {
										case 'EVar':
											return _elm_lang$core$Native_Utils.eq(_p406._0._1, _p406._1._1) ? {ctor: '[]'} : {
												ctor: '::',
												_0: otherExp,
												_1: {ctor: '[]'}
											};
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EFun':
									switch (_p406._1.ctor) {
										case 'EFun':
											if (A2(_user$project$LangTools$patternListsEqual, _p406._0._1, _p406._1._1)) {
												var _v209 = _p406._0._2,
													_v210 = _p406._1._2;
												baseExp = _v209;
												otherExp = _v210;
												continue extraExpsDiff;
											} else {
												return {
													ctor: '::',
													_0: otherExp,
													_1: {ctor: '[]'}
												};
											}
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EOp':
									switch (_p406._1.ctor) {
										case 'EOp':
											return _elm_lang$core$Native_Utils.eq(_p406._0._1.val, _p406._1._1.val) ? childDiffs(
												{ctor: '_Tuple0'}) : {
												ctor: '::',
												_0: otherExp,
												_1: {ctor: '[]'}
											};
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EList':
									switch (_p406._1.ctor) {
										case 'EList':
											if (_p406._0._3.ctor === 'Nothing') {
												if (_p406._1._3.ctor === 'Nothing') {
													return childDiffs(
														{ctor: '_Tuple0'});
												} else {
													break _v208_21;
												}
											} else {
												if (_p406._1._3.ctor === 'Just') {
													return childDiffs(
														{ctor: '_Tuple0'});
												} else {
													break _v208_21;
												}
											}
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EApp':
									switch (_p406._1.ctor) {
										case 'EApp':
											return childDiffs(
												{ctor: '_Tuple0'});
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'ELet':
									switch (_p406._1.ctor) {
										case 'ELet':
											return (_elm_lang$core$Native_Utils.eq(_p406._0._2, _p406._1._2) && A2(_user$project$LangTools$patternsEqual, _p406._0._3, _p406._1._3)) ? A2(
												_elm_lang$core$Basics_ops['++'],
												A2(_user$project$LangTools$extraExpsDiff, _p406._0._5, _p406._1._5),
												A2(_user$project$LangTools$extraExpsDiff, _p406._0._7, _p406._1._7)) : {
												ctor: '::',
												_0: otherExp,
												_1: {ctor: '[]'}
											};
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EIf':
									switch (_p406._1.ctor) {
										case 'EIf':
											return A2(
												_elm_lang$core$Basics_ops['++'],
												A2(_user$project$LangTools$extraExpsDiff, _p406._0._1, _p406._1._1),
												A2(
													_elm_lang$core$Basics_ops['++'],
													A2(_user$project$LangTools$extraExpsDiff, _p406._0._3, _p406._1._3),
													A2(_user$project$LangTools$extraExpsDiff, _p406._0._5, _p406._1._5)));
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'ECase':
									switch (_p406._1.ctor) {
										case 'ECase':
											return A2(
												_elm_lang$core$Maybe$withDefault,
												{
													ctor: '::',
													_0: otherExp,
													_1: {ctor: '[]'}
												},
												A2(
													_elm_lang$core$Maybe$andThen,
													function (branchPairs) {
														var bValPairs = A2(
															_elm_lang$core$List$map,
															function (_p407) {
																var _p408 = _p407;
																return {ctor: '_Tuple2', _0: _p408._0.val, _1: _p408._1.val};
															},
															branchPairs);
														return A2(
															_elm_lang$core$List$all,
															function (_p409) {
																var _p410 = _p409;
																return A2(_user$project$LangTools$patternsEqual, _p410._0._1, _p410._1._1);
															},
															bValPairs) ? _elm_lang$core$Maybe$Just(
															childDiffs(
																{ctor: '_Tuple0'})) : _elm_lang$core$Maybe$Nothing;
													},
													A2(_user$project$Utils$maybeZip, _p406._0._2, _p406._1._2)));
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'ETypeCase':
									switch (_p406._1.ctor) {
										case 'ETypeCase':
											return A2(
												_elm_lang$core$Maybe$withDefault,
												{
													ctor: '::',
													_0: otherExp,
													_1: {ctor: '[]'}
												},
												A2(
													_elm_lang$core$Maybe$andThen,
													function (tbranchPairs) {
														var tbValPairs = A2(
															_elm_lang$core$List$map,
															function (_p411) {
																var _p412 = _p411;
																return {ctor: '_Tuple2', _0: _p412._0.val, _1: _p412._1.val};
															},
															tbranchPairs);
														return A2(
															_elm_lang$core$List$all,
															function (_p413) {
																var _p414 = _p413;
																return A2(_user$project$Types$equal, _p414._0._1, _p414._1._1);
															},
															tbValPairs) ? _elm_lang$core$Maybe$Just(
															childDiffs(
																{ctor: '_Tuple0'})) : _elm_lang$core$Maybe$Nothing;
													},
													A2(_user$project$Utils$maybeZip, _p406._0._2, _p406._1._2)));
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EComment':
									var _v215 = _p406._0._2,
										_v216 = otherExp;
									baseExp = _v215;
									otherExp = _v216;
									continue extraExpsDiff;
								case 'EOption':
									switch (_p406._1.ctor) {
										case 'EComment':
											break _v208_13;
										case 'EOption':
											return {
												ctor: '::',
												_0: otherExp,
												_1: {ctor: '[]'}
											};
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'ETyp':
									switch (_p406._1.ctor) {
										case 'EComment':
											break _v208_13;
										case 'ETyp':
											if (A2(_user$project$LangTools$patternsEqual, _p406._0._1, _p406._1._1) && A2(_user$project$Types$equal, _p406._0._2, _p406._1._2)) {
												var _v217 = _p406._0._3,
													_v218 = _p406._1._3;
												baseExp = _v217;
												otherExp = _v218;
												continue extraExpsDiff;
											} else {
												return {
													ctor: '::',
													_0: otherExp,
													_1: {ctor: '[]'}
												};
											}
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EColonType':
									switch (_p406._1.ctor) {
										case 'EComment':
											break _v208_13;
										case 'EColonType':
											if (A2(_user$project$Types$equal, _p406._0._3, _p406._1._3)) {
												var _v219 = _p406._0._1,
													_v220 = _p406._1._1;
												baseExp = _v219;
												otherExp = _v220;
												continue extraExpsDiff;
											} else {
												return {
													ctor: '::',
													_0: otherExp,
													_1: {ctor: '[]'}
												};
											}
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'ETypeAlias':
									switch (_p406._1.ctor) {
										case 'EComment':
											break _v208_13;
										case 'ETypeAlias':
											if (A2(_user$project$LangTools$patternsEqual, _p406._0._1, _p406._1._1) && A2(_user$project$Types$equal, _p406._0._2, _p406._1._2)) {
												var _v221 = _p406._0._3,
													_v222 = _p406._1._3;
												baseExp = _v221;
												otherExp = _v222;
												continue extraExpsDiff;
											} else {
												return {
													ctor: '::',
													_0: otherExp,
													_1: {ctor: '[]'}
												};
											}
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
								case 'EParens':
									switch (_p406._1.ctor) {
										case 'EComment':
											break _v208_13;
										case 'EParens':
											var _v223 = _p406._0._1,
												_v224 = _p406._1._1;
											baseExp = _v223;
											otherExp = _v224;
											continue extraExpsDiff;
										default:
											var _v225 = _p406._0._1,
												_v226 = otherExp;
											baseExp = _v225;
											otherExp = _v226;
											continue extraExpsDiff;
									}
								default:
									switch (_p406._1.ctor) {
										case 'EComment':
											break _v208_13;
										case 'EParens':
											break _v208_20;
										default:
											break _v208_21;
									}
							}
						} else {
							break _v208_21;
						}
					} while(false);
					var _v227 = baseExp,
						_v228 = _p406._1._2;
					baseExp = _v227;
					otherExp = _v228;
					continue extraExpsDiff;
				} while(false);
				var _v229 = baseExp,
					_v230 = _p406._1._1;
				baseExp = _v229;
				otherExp = _v230;
				continue extraExpsDiff;
			} while(false);
			return {
				ctor: '::',
				_0: otherExp,
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$LangTools$countNodes = F2(
	function (pred, exp) {
		return A2(
			_user$project$Utils$count,
			pred,
			_user$project$Lang$flattenExpTree(exp));
	});
var _user$project$LangTools$typeNodeCount = function (tipe) {
	var _p415 = tipe.val.t__;
	switch (_p415.ctor) {
		case 'TNum':
			return 1;
		case 'TBool':
			return 1;
		case 'TString':
			return 1;
		case 'TNull':
			return 1;
		case 'TList':
			return 1 + _user$project$LangTools$typeNodeCount(_p415._1);
		case 'TDict':
			return (1 + _user$project$LangTools$typeNodeCount(_p415._1)) + _user$project$LangTools$typeNodeCount(_p415._2);
		case 'TTuple':
			if (_p415._3.ctor === 'Nothing') {
				return 1 + _user$project$LangTools$typesNodeCount(_p415._1);
			} else {
				return (1 + _user$project$LangTools$typesNodeCount(_p415._1)) + _user$project$LangTools$typeNodeCount(_p415._3._0);
			}
		case 'TArrow':
			return 1 + _user$project$LangTools$typesNodeCount(_p415._1);
		case 'TUnion':
			return 1 + _user$project$LangTools$typesNodeCount(_p415._1);
		case 'TNamed':
			return 1;
		case 'TVar':
			return 1;
		case 'TForall':
			if (_p415._1.ctor === 'One') {
				return 1 + _user$project$LangTools$typeNodeCount(_p415._2);
			} else {
				return (1 + _elm_lang$core$List$length(_p415._1._1)) + _user$project$LangTools$typeNodeCount(_p415._2);
			}
		default:
			return 1;
	}
};
var _user$project$LangTools$typesNodeCount = function (types) {
	return _elm_lang$core$List$sum(
		A2(_elm_lang$core$List$map, _user$project$LangTools$typeNodeCount, types));
};
var _user$project$LangTools$patNodeCount = function (pat) {
	var _p416 = pat.val.p__;
	switch (_p416.ctor) {
		case 'PWildcard':
			return 1;
		case 'PVar':
			return 1;
		case 'PConst':
			return 1;
		case 'PBase':
			return 1;
		case 'PList':
			if (_p416._3.ctor === 'Just') {
				return (1 + _user$project$LangTools$patsNodeCount(_p416._1)) + _user$project$LangTools$patNodeCount(_p416._3._0);
			} else {
				return 1 + _user$project$LangTools$patsNodeCount(_p416._1);
			}
		case 'PAs':
			return 1 + _user$project$LangTools$patNodeCount(_p416._3);
		default:
			return 1 + _user$project$LangTools$patNodeCount(_p416._1);
	}
};
var _user$project$LangTools$patsNodeCount = function (pats) {
	return _elm_lang$core$List$sum(
		A2(_elm_lang$core$List$map, _user$project$LangTools$patNodeCount, pats));
};
var _user$project$LangTools$subExpsOfSizeAtLeast_ = F2(
	function (min, exp) {
		var _p417 = function (_p418) {
			var _p419 = _p418;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$List$sum(_p419._0),
				_1: _elm_lang$core$List$concat(_p419._1)
			};
		}(
			_elm_lang$core$List$unzip(
				A2(
					_elm_lang$core$List$map,
					_user$project$LangTools$subExpsOfSizeAtLeast_(min),
					_user$project$Lang$childExps(exp))));
		var childrenTotal = _p417._0;
		var largeSubExps = _p417._1;
		if (_elm_lang$core$Native_Utils.cmp(childrenTotal, min) > -1) {
			return (!_user$project$Lang$isComment(exp)) ? {
				ctor: '_Tuple2',
				_0: childrenTotal,
				_1: {ctor: '::', _0: exp, _1: largeSubExps}
			} : {ctor: '_Tuple2', _0: childrenTotal, _1: largeSubExps};
		} else {
			var thisSizeWithoutChildren = function () {
				var _p420 = exp.val.e__;
				switch (_p420.ctor) {
					case 'EConst':
						return 1;
					case 'EBase':
						return 1;
					case 'EVar':
						return 1;
					case 'EFun':
						return 1 + _user$project$LangTools$patsNodeCount(_p420._1);
					case 'EOp':
						return 1;
					case 'EList':
						if (_p420._3.ctor === 'Just') {
							return 1;
						} else {
							return 1;
						}
					case 'EIf':
						return 1;
					case 'ECase':
						var _p421 = _p420._2;
						return (1 + _elm_lang$core$List$length(_p421)) + _user$project$LangTools$patsNodeCount(
							_user$project$Lang$branchPats(_p421));
					case 'ETypeCase':
						var _p422 = _p420._2;
						return (1 + _elm_lang$core$List$length(_p422)) + _user$project$LangTools$typesNodeCount(
							_user$project$Lang$tbranchTypes(_p422));
					case 'EApp':
						return 1;
					case 'ELet':
						return 1 + _user$project$LangTools$patNodeCount(_p420._3);
					case 'EComment':
						return 0;
					case 'EOption':
						return 1;
					case 'ETyp':
						return (1 + _user$project$LangTools$patNodeCount(_p420._1)) + _user$project$LangTools$typeNodeCount(_p420._2);
					case 'EColonType':
						return 1 + _user$project$LangTools$typeNodeCount(_p420._3);
					case 'ETypeAlias':
						return (1 + _user$project$LangTools$patNodeCount(_p420._1)) + _user$project$LangTools$typeNodeCount(_p420._2);
					case 'EParens':
						return 1;
					default:
						return 1;
				}
			}();
			if (!_elm_lang$core$Native_Utils.eq(
				largeSubExps,
				{ctor: '[]'})) {
				return _elm_lang$core$Native_Utils.crash(
					'LangTools',
					{
						start: {line: 106, column: 7},
						end: {line: 106, column: 18}
					})('LangTools.thisSizeWithoutChildren bug');
			} else {
				var thisSize = thisSizeWithoutChildren + childrenTotal;
				return {
					ctor: '_Tuple2',
					_0: thisSize,
					_1: (_elm_lang$core$Native_Utils.cmp(thisSize, min) > -1) ? {
						ctor: '::',
						_0: exp,
						_1: {ctor: '[]'}
					} : {ctor: '[]'}
				};
			}
		}
	});
var _user$project$LangTools$subExpsOfSizeAtLeast = F2(
	function (min, exp) {
		var _p423 = A2(_user$project$LangTools$subExpsOfSizeAtLeast_, min, exp);
		var exps = _p423._1;
		return exps;
	});
var _user$project$LangTools$nodeCount = function (exp) {
	var expsNodeCount = function (exps) {
		return _elm_lang$core$List$sum(
			A2(_elm_lang$core$List$map, _user$project$LangTools$nodeCount, exps));
	};
	var _p424 = exp.val.e__;
	switch (_p424.ctor) {
		case 'EConst':
			return 1;
		case 'EBase':
			return 1;
		case 'EVar':
			return 1;
		case 'EFun':
			return (1 + _user$project$LangTools$patsNodeCount(_p424._1)) + _user$project$LangTools$nodeCount(_p424._2);
		case 'EOp':
			return 1 + expsNodeCount(_p424._2);
		case 'EList':
			if (_p424._3.ctor === 'Just') {
				return (1 + expsNodeCount(
					A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p424._1))) + _user$project$LangTools$nodeCount(_p424._3._0);
			} else {
				return 1 + expsNodeCount(
					A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p424._1));
			}
		case 'EIf':
			return 1 + expsNodeCount(
				{
					ctor: '::',
					_0: _p424._1,
					_1: {
						ctor: '::',
						_0: _p424._3,
						_1: {
							ctor: '::',
							_0: _p424._5,
							_1: {ctor: '[]'}
						}
					}
				});
		case 'ECase':
			var _p425 = _p424._2;
			return (((1 + _elm_lang$core$List$length(_p425)) + _user$project$LangTools$nodeCount(_p424._1)) + _user$project$LangTools$patsNodeCount(
				_user$project$Lang$branchPats(_p425))) + expsNodeCount(
				_user$project$Lang$branchExps(_p425));
		case 'ETypeCase':
			var _p426 = _p424._2;
			return (((1 + _elm_lang$core$List$length(_p426)) + _user$project$LangTools$nodeCount(_p424._1)) + _user$project$LangTools$typesNodeCount(
				_user$project$Lang$tbranchTypes(_p426))) + expsNodeCount(
				_user$project$Lang$tbranchExps(_p426));
		case 'EApp':
			return (1 + _user$project$LangTools$nodeCount(_p424._1)) + expsNodeCount(_p424._2);
		case 'ELet':
			return ((1 + _user$project$LangTools$patNodeCount(_p424._3)) + _user$project$LangTools$nodeCount(_p424._5)) + _user$project$LangTools$nodeCount(_p424._7);
		case 'EComment':
			return 0 + _user$project$LangTools$nodeCount(_p424._2);
		case 'EOption':
			return 1 + _user$project$LangTools$nodeCount(_p424._4);
		case 'ETyp':
			return ((1 + _user$project$LangTools$patNodeCount(_p424._1)) + _user$project$LangTools$typeNodeCount(_p424._2)) + _user$project$LangTools$nodeCount(_p424._3);
		case 'EColonType':
			return (1 + _user$project$LangTools$typeNodeCount(_p424._3)) + _user$project$LangTools$nodeCount(_p424._1);
		case 'ETypeAlias':
			return ((1 + _user$project$LangTools$patNodeCount(_p424._1)) + _user$project$LangTools$typeNodeCount(_p424._2)) + _user$project$LangTools$nodeCount(_p424._3);
		case 'EParens':
			return 1 + _user$project$LangTools$nodeCount(_p424._1);
		default:
			if (_p424._1.ctor === 'HolePBE') {
				return 1 + expsNodeCount(
					A2(
						_elm_lang$core$List$map,
						function (_p427) {
							var _p428 = _p427;
							return _p428._3;
						},
						_p424._1._0));
			} else {
				return 1;
			}
	}
};
var _user$project$LangTools$logProgram = F2(
	function (caption, program) {
		var _p429 = _user$project$Utils$log(
			A2(
				_elm_lang$core$Basics_ops['++'],
				caption,
				A2(
					_elm_lang$core$Basics_ops['++'],
					':\n',
					A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, program))));
		return program;
	});
var _user$project$LangTools$CannotCompare = {ctor: 'CannotCompare'};
var _user$project$LangTools$NoMatch = {ctor: 'NoMatch'};
var _user$project$LangTools$Match = function (a) {
	return {ctor: 'Match', _0: a};
};
var _user$project$LangTools$tryMatchExp = F2(
	function (pat, exp) {
		tryMatchExp:
		while (true) {
			var matchMap = F2(
				function (f, matchResult) {
					var _p430 = matchResult;
					if (_p430.ctor === 'Match') {
						return _user$project$LangTools$Match(
							f(_p430._0));
					} else {
						return matchResult;
					}
				});
			var projMatches = function (resultList) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (matchResult, acc) {
							var _p431 = {ctor: '_Tuple2', _0: matchResult, _1: acc};
							_v238_1:
							do {
								if (_p431._0.ctor === 'Match') {
									switch (_p431._1.ctor) {
										case 'Match':
											return _user$project$LangTools$Match(
												A2(_elm_lang$core$Basics_ops['++'], _p431._0._0, _p431._1._0));
										case 'CannotCompare':
											break _v238_1;
										default:
											break _v238_1;
									}
								} else {
									if (_p431._1.ctor === 'CannotCompare') {
										return _user$project$LangTools$CannotCompare;
									} else {
										return _p431._0;
									}
								}
							} while(false);
							return _p431._1;
						}),
					_user$project$LangTools$Match(
						{ctor: '[]'}),
					resultList);
			};
			var contractedExp = _user$project$Lang$expEffectiveExp(exp);
			var _p432 = pat.val.p__;
			switch (_p432.ctor) {
				case 'PWildcard':
					return _user$project$LangTools$Match(
						{ctor: '[]'});
				case 'PVar':
					return _user$project$LangTools$Match(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _p432._1, _1: exp},
							_1: {ctor: '[]'}
						});
				case 'PAs':
					return A2(
						matchMap,
						function (env) {
							return {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _p432._1, _1: exp},
								_1: env
							};
						},
						A2(_user$project$LangTools$tryMatchExp, _p432._3, exp));
				case 'PList':
					if (_p432._3.ctor === 'Nothing') {
						var _p433 = contractedExp.val.e__;
						if ((_p433.ctor === 'EList') && (_p433._3.ctor === 'Nothing')) {
							var _p434 = A2(
								_user$project$Utils$maybeZip,
								_p432._1,
								_user$project$Lang$headExps(_p433._1));
							if (_p434.ctor === 'Nothing') {
								return _user$project$LangTools$NoMatch;
							} else {
								return projMatches(
									A2(
										_elm_lang$core$List$map,
										function (_p435) {
											var _p436 = _p435;
											return A2(_user$project$LangTools$tryMatchExp, _p436._0, _p436._1);
										},
										_p434._0));
							}
						} else {
							return _user$project$LangTools$CannotCompare;
						}
					} else {
						var _p446 = _p432._3._0;
						var _p445 = _p432._1;
						var _p437 = contractedExp.val.e__;
						if (_p437.ctor === 'EList') {
							if (_p437._3.ctor === 'Nothing') {
								var _p441 = _p437._1;
								if (_elm_lang$core$Native_Utils.cmp(
									_elm_lang$core$List$length(_p441),
									_elm_lang$core$List$length(_p445)) < 0) {
									return _user$project$LangTools$NoMatch;
								} else {
									var _p438 = A2(
										_user$project$Utils$split,
										_elm_lang$core$List$length(_p445),
										_user$project$Lang$headExps(_p441));
									var headExps = _p438._0;
									var tailExps = _p438._1;
									var tryHeadMatch = projMatches(
										A2(
											_elm_lang$core$List$map,
											function (_p439) {
												var _p440 = _p439;
												return A2(_user$project$LangTools$tryMatchExp, _p440._0, _p440._1);
											},
											A2(_user$project$Utils$zip, _p445, headExps)));
									var tryTailMatch = A2(
										_user$project$LangTools$tryMatchExp,
										_p446,
										A2(_user$project$Lang$eList, tailExps, _elm_lang$core$Maybe$Nothing));
									return projMatches(
										{
											ctor: '::',
											_0: tryHeadMatch,
											_1: {
												ctor: '::',
												_0: tryTailMatch,
												_1: {ctor: '[]'}
											}
										});
								}
							} else {
								var _p444 = _p437._1;
								if (_elm_lang$core$Native_Utils.cmp(
									_elm_lang$core$List$length(_p444),
									_elm_lang$core$List$length(_p445)) < 0) {
									return _user$project$LangTools$NoMatch;
								} else {
									if (!_elm_lang$core$Native_Utils.eq(
										_elm_lang$core$List$length(_p444),
										_elm_lang$core$List$length(_p445))) {
										return _user$project$LangTools$CannotCompare;
									} else {
										var tryHeadMatch = projMatches(
											A2(
												_elm_lang$core$List$map,
												function (_p442) {
													var _p443 = _p442;
													return A2(_user$project$LangTools$tryMatchExp, _p443._0, _p443._1);
												},
												A2(
													_user$project$Utils$zip,
													_p445,
													_user$project$Lang$headExps(_p444))));
										var tryTailMatch = A2(_user$project$LangTools$tryMatchExp, _p446, _p437._3._0);
										return projMatches(
											{
												ctor: '::',
												_0: tryHeadMatch,
												_1: {
													ctor: '::',
													_0: tryTailMatch,
													_1: {ctor: '[]'}
												}
											});
									}
								}
							}
						} else {
							return _user$project$LangTools$CannotCompare;
						}
					}
				case 'PConst':
					var _p447 = contractedExp.val.e__;
					if (_p447.ctor === 'EConst') {
						return _elm_lang$core$Native_Utils.eq(_p432._1, _p447._1) ? _user$project$LangTools$Match(
							{ctor: '[]'}) : _user$project$LangTools$NoMatch;
					} else {
						return _user$project$LangTools$CannotCompare;
					}
				case 'PBase':
					var _p448 = contractedExp.val.e__;
					if (_p448.ctor === 'EBase') {
						return A2(_user$project$Lang$eBaseValsEqual, _p432._1, _p448._1) ? _user$project$LangTools$Match(
							{ctor: '[]'}) : _user$project$LangTools$NoMatch;
					} else {
						return _user$project$LangTools$CannotCompare;
					}
				default:
					var _v248 = _p432._1,
						_v249 = exp;
					pat = _v248;
					exp = _v249;
					continue tryMatchExp;
			}
		}
	});
var _user$project$LangTools$tryMatchExpReturningList = F2(
	function (pat, exp) {
		var _p449 = A2(_user$project$LangTools$tryMatchExp, pat, exp);
		if (_p449.ctor === 'Match') {
			return _p449._0;
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$LangTools$findPatAndBoundExpByPId = F2(
	function (targetPId, exp) {
		var _p450 = A2(_user$project$Lang$findScopeExpAndPatByPId, exp, targetPId);
		if (_p450.ctor === 'Just') {
			var _p452 = _p450._0._1;
			var _p451 = {
				ctor: '_Tuple2',
				_0: _user$project$LangTools$expToMaybeLetPatAndBoundExp(_p450._0._0),
				_1: _user$project$LangTools$patToMaybeIdent(_p452)
			};
			if ((((_p451.ctor === '_Tuple2') && (_p451._0.ctor === 'Just')) && (_p451._0._0.ctor === '_Tuple2')) && (_p451._1.ctor === 'Just')) {
				return A2(
					_elm_lang$core$Maybe$map,
					function (boundExp) {
						return {ctor: '_Tuple2', _0: _p452, _1: boundExp};
					},
					A2(
						_user$project$Utils$maybeFind,
						_p451._1._0,
						A2(_user$project$LangTools$tryMatchExpReturningList, _p451._0._0._0, _p451._0._0._1)));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LangTools$findBoundExpByPId = F2(
	function (targetPId, exp) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p453) {
				var _p454 = _p453;
				return _p454._1;
			},
			A2(_user$project$LangTools$findPatAndBoundExpByPId, targetPId, exp));
	});
var _user$project$LangTools$allSimplyResolvableLetBindings = function (program) {
	return A2(
		_elm_lang$core$List$concatMap,
		function (exp) {
			var _p455 = exp.val.e__;
			if (_p455.ctor === 'ELet') {
				return A2(_user$project$LangTools$tryMatchExpReturningList, _p455._3, _p455._5);
			} else {
				return {ctor: '[]'};
			}
		},
		_user$project$Lang$flattenExpTree(program));
};
var _user$project$LangTools$numericLetBoundIdentifiers = function (program) {
	var expBindings = _user$project$LangTools$allSimplyResolvableLetBindings(program);
	var findAllNumericIdents = function (numericIdents) {
		findAllNumericIdents:
		while (true) {
			var moreNumericIdents = A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(
					_elm_lang$core$List$filter,
					function (_p456) {
						var _p457 = _p456;
						return A2(_user$project$LangTools$isSurelyNumeric, numericIdents, _p457._1);
					},
					expBindings));
			if (_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(moreNumericIdents),
				_elm_lang$core$Set$size(numericIdents))) {
				return numericIdents;
			} else {
				var _v256 = _elm_lang$core$Set$fromList(moreNumericIdents);
				numericIdents = _v256;
				continue findAllNumericIdents;
			}
		}
	};
	return findAllNumericIdents(_elm_lang$core$Set$empty);
};
var _user$project$LangTools$BoundUnknown = {ctor: 'BoundUnknown'};
var _user$project$LangTools$Bound = function (a) {
	return {ctor: 'Bound', _0: a};
};
var _user$project$LangTools$expPatEnvAt_ = F2(
	function (exp, targetEId) {
		var recurse = function (e) {
			return A2(_user$project$LangTools$expPatEnvAt_, e, targetEId);
		};
		var recurseAllChildren = function (_p458) {
			var _p459 = _p458;
			return A2(
				_user$project$Utils$mapFirstSuccess,
				recurse,
				_user$project$Lang$childExps(exp));
		};
		var addShallowerBoundUnknowns = F2(
			function (newPats, deeperBindings) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (pat, bindings) {
							var _p460 = _user$project$LangTools$patToMaybeIdent(pat);
							if (_p460.ctor === 'Just') {
								var _p461 = _p460._0;
								return A2(_elm_lang$core$Dict$member, _p461, bindings) ? bindings : A3(
									_elm_lang$core$Dict$insert,
									_p461,
									{ctor: '_Tuple2', _0: pat, _1: _user$project$LangTools$BoundUnknown},
									bindings);
							} else {
								return bindings;
							}
						}),
					deeperBindings,
					newPats);
			});
		var addShallowerBoundExps = F2(
			function (patExpMatchings, deeperBindings) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (_p462, bindings) {
							var _p463 = _p462;
							var _p466 = _p463._0;
							var _p464 = _user$project$LangTools$patToMaybeIdent(_p466);
							if (_p464.ctor === 'Just') {
								var _p465 = _p464._0;
								return A2(_elm_lang$core$Dict$member, _p465, bindings) ? bindings : A3(
									_elm_lang$core$Dict$insert,
									_p465,
									{
										ctor: '_Tuple2',
										_0: _p466,
										_1: _user$project$LangTools$Bound(_p463._1)
									},
									bindings);
							} else {
								return bindings;
							}
						}),
					deeperBindings,
					patExpMatchings);
			});
		var addBindingsFrom = F3(
			function (pat, e, deeperBindings) {
				return A2(
					addShallowerBoundUnknowns,
					_user$project$Lang$flattenPatTree(pat),
					A2(
						addShallowerBoundExps,
						A2(_user$project$LangTools$tryMatchExpPatToPats, pat, e),
						deeperBindings));
			});
		if (_elm_lang$core$Native_Utils.eq(exp.val.eid, targetEId)) {
			return _elm_lang$core$Maybe$Just(_elm_lang$core$Dict$empty);
		} else {
			var _p467 = exp.val.e__;
			switch (_p467.ctor) {
				case 'EConst':
					return _elm_lang$core$Maybe$Nothing;
				case 'EBase':
					return _elm_lang$core$Maybe$Nothing;
				case 'EVar':
					return _elm_lang$core$Maybe$Nothing;
				case 'EFun':
					return A2(
						_elm_lang$core$Maybe$map,
						addShallowerBoundUnknowns(
							A2(_elm_lang$core$List$concatMap, _user$project$Lang$flattenPatTree, _p467._1)),
						recurse(_p467._2));
				case 'EOp':
					return recurseAllChildren(
						{ctor: '_Tuple0'});
				case 'EList':
					return recurseAllChildren(
						{ctor: '_Tuple0'});
				case 'EIf':
					return recurseAllChildren(
						{ctor: '_Tuple0'});
				case 'ECase':
					var _p468 = recurse(_p467._1);
					if (_p468.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p468._0);
					} else {
						return A2(
							_user$project$Utils$mapFirstSuccess,
							function (_p469) {
								var _p470 = _p469;
								var _p471 = _p470._2;
								return A2(
									_elm_lang$core$Maybe$map,
									A2(addBindingsFrom, _p470._1, _p471),
									recurse(_p471));
							},
							A2(
								_elm_lang$core$List$map,
								function (_) {
									return _.val;
								},
								_p467._2));
					}
				case 'ETypeCase':
					return recurseAllChildren(
						{ctor: '_Tuple0'});
				case 'EApp':
					return recurseAllChildren(
						{ctor: '_Tuple0'});
				case 'ELet':
					if (_p467._2 === false) {
						var _p473 = _p467._5;
						var _p472 = recurse(_p473);
						if (_p472.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(_p472._0);
						} else {
							return A2(
								_elm_lang$core$Maybe$map,
								A2(addBindingsFrom, _p467._3, _p473),
								recurse(_p467._7));
						}
					} else {
						return A2(
							_elm_lang$core$Maybe$map,
							A2(addBindingsFrom, _p467._3, _p467._5),
							recurseAllChildren(
								{ctor: '_Tuple0'}));
					}
				case 'EComment':
					return recurse(_p467._2);
				case 'EOption':
					return recurse(_p467._4);
				case 'ETyp':
					return recurse(_p467._3);
				case 'EColonType':
					return recurse(_p467._1);
				case 'ETypeAlias':
					return recurse(_p467._3);
				case 'EParens':
					return recurse(_p467._1);
				default:
					return recurseAllChildren(
						{ctor: '_Tuple0'});
			}
		}
	});
var _user$project$LangTools$preludePatExpEnv = A2(
	_user$project$Utils$fromJust_,
	'LangTools.preludePatExpEnv',
	A2(
		_user$project$LangTools$expPatEnvAt_,
		_user$project$FastParser$prelude,
		_user$project$LangTools$lastSameLevelExp(_user$project$FastParser$prelude).val.eid));
var _user$project$LangTools$expEnvAt_ = F2(
	function (exp, targetEId) {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Dict$map(
				F2(
					function (_p475, _p474) {
						var _p476 = _p474;
						return _p476._1;
					})),
			A2(_user$project$LangTools$expPatEnvAt_, exp, targetEId));
	});
var _user$project$LangTools$preludeExpEnv = A2(
	_user$project$Utils$fromJust_,
	'LangTools.preludeExpEnv',
	A2(
		_user$project$LangTools$expEnvAt_,
		_user$project$FastParser$prelude,
		_user$project$LangTools$lastSameLevelExp(_user$project$FastParser$prelude).val.eid));
var _user$project$LangTools$expEnvAt = F2(
	function (exp, targetEId) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (bindings) {
				return A2(_elm_lang$core$Dict$union, bindings, _user$project$LangTools$preludeExpEnv);
			},
			A2(_user$project$LangTools$expEnvAt_, exp, targetEId));
	});
var _user$project$LangTools$resolveIdentifierToExp = F3(
	function (ident, viewerEId, program) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			_elm_lang$core$Dict$get(ident),
			A2(_user$project$LangTools$expEnvAt, program, viewerEId));
	});
var _user$project$LangTools$expDescriptionParts_ = F5(
	function (program, exp, numericIdents, targetEId, equivalentEIds) {
		var recurse = F2(
			function (e, numericIdents) {
				return A5(_user$project$LangTools$expDescriptionParts_, program, e, numericIdents, targetEId, equivalentEIds);
			});
		var varIdentOrDefault = F2(
			function (e, $default) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					$default,
					_user$project$LangTools$expToMaybeIdent(e));
			});
		var searchChildren = function (numericIdents) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				A2(
					_user$project$Utils$mapFirstSuccess,
					function (child) {
						var _p477 = A2(recurse, child, numericIdents);
						if (_p477.ctor === '[]') {
							return _elm_lang$core$Maybe$Nothing;
						} else {
							return _elm_lang$core$Maybe$Just(_p477);
						}
					},
					_user$project$Lang$childExps(exp)));
		};
		if (_elm_lang$core$Native_Utils.eq(exp.val.eid, targetEId)) {
			return {
				ctor: '::',
				_0: _user$project$LangTools$simpleExpName(exp),
				_1: {ctor: '[]'}
			};
		} else {
			var numericIdents_ = function () {
				var identsToRemove = function () {
					var _p478 = exp.val.e__;
					switch (_p478.ctor) {
						case 'EFun':
							return _user$project$LangTools$identifiersListInPats(_p478._1);
						case 'ECase':
							return _user$project$LangTools$identifiersListInPats(
								_user$project$Lang$branchPats(_p478._2));
						case 'ELet':
							return _user$project$LangTools$identifiersListInPat(_p478._3);
						default:
							return {ctor: '[]'};
					}
				}();
				return A2(_user$project$Utils$removeAllFromSet, identsToRemove, numericIdents);
			}();
			var _p479 = exp.val.e__;
			_v268_4:
			do {
				switch (_p479.ctor) {
					case 'ELet':
						var _p497 = _p479._3;
						var _p496 = _p479._2;
						var _p495 = _p479._5;
						var namedAssigns = A2(_user$project$LangTools$tryMatchExpReturningList, _p497, _p495);
						var numericIdents__ = function () {
							var _p480 = _elm_lang$core$List$unzip(
								A2(
									_elm_lang$core$List$filter,
									function (_p481) {
										var _p482 = _p481;
										return A2(_user$project$LangTools$isSurelyNumeric, numericIdents_, _p482._1);
									},
									namedAssigns));
							var newNumericIdents = _p480._0;
							return A2(_user$project$Utils$insertAllIntoSet, newNumericIdents, numericIdents_);
						}();
						var _p485 = A2(
							_elm_lang$core$List$filter,
							function (_p483) {
								var _p484 = _p483;
								return !_elm_lang$core$Native_Utils.eq(
									A2(_user$project$Lang$findExpByEId, _p484._1, targetEId),
									_elm_lang$core$Maybe$Nothing);
							},
							namedAssigns);
						if (_p485.ctor === '[]') {
							if (A2(_elm_lang$core$Set$member, _p495.val.eid, equivalentEIds)) {
								var _p486 = _user$project$LangTools$identifiersListInPat(_p497);
								if (_p486.ctor === '[]') {
									return {
										ctor: '::',
										_0: _user$project$LangTools$simpleExpName(_p495),
										_1: {ctor: '[]'}
									};
								} else {
									return {
										ctor: '::',
										_0: A2(
											varIdentOrDefault,
											_p495,
											A2(_elm_lang$core$String$join, '', _p486)),
										_1: {ctor: '[]'}
									};
								}
							} else {
								var scopeNames = function () {
									var _p487 = _p497.val.p__;
									switch (_p487.ctor) {
										case 'PVar':
											return {
												ctor: '::',
												_0: _p487._1,
												_1: {ctor: '[]'}
											};
										case 'PAs':
											return {
												ctor: '::',
												_0: _p487._1,
												_1: {ctor: '[]'}
											};
										default:
											var _p488 = _user$project$LangTools$identifiersListInPat(_p497);
											if (_p488.ctor === '[]') {
												return {ctor: '[]'};
											} else {
												return {
													ctor: '::',
													_0: A2(_elm_lang$core$String$join, '', _p488),
													_1: {ctor: '[]'}
												};
											}
									}
								}();
								var _p489 = A2(
									recurse,
									_p495,
									_p496 ? numericIdents__ : numericIdents_);
								if (_p489.ctor === '[]') {
									return A2(recurse, _p479._7, numericIdents__);
								} else {
									return A2(_elm_lang$core$Basics_ops['++'], scopeNames, _p489);
								}
							}
						} else {
							var _p494 = _p485;
							var _p490 = A2(_user$project$Utils$last, 'LangTools.expDescriptionParts', _p494);
							var ident = _p490._0;
							var matchingExp = _p490._1;
							var _p491 = _elm_lang$core$List$unzip(_p494);
							var idents = _p491._0;
							if (A2(_elm_lang$core$Set$member, matchingExp.val.eid, equivalentEIds)) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$Utils$dropLast, 1, idents),
									{
										ctor: '::',
										_0: A2(varIdentOrDefault, matchingExp, ident),
										_1: {ctor: '[]'}
									});
							} else {
								var _p492 = A2(
									recurse,
									matchingExp,
									_p496 ? numericIdents__ : numericIdents_);
								if (_p492.ctor === '[]') {
									return _elm_lang$core$Native_Utils.crashCase(
										'LangTools',
										{
											start: {line: 989, column: 15},
											end: {line: 991, column: 53}
										},
										_p492)(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'LangTools.expDescriptionParts expected to find targetEId in\n',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$LangUnparser$unparseWithIds(matchingExp),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\nin\n',
													_user$project$LangUnparser$unparseWithIds(_p495)))));
								} else {
									return A2(_elm_lang$core$Basics_ops['++'], idents, _p492);
								}
							}
						}
					case 'EApp':
						var _p498 = searchChildren(numericIdents_);
						if (_p498.ctor === '[]') {
							return {ctor: '[]'};
						} else {
							return A2(
								_elm_lang$core$Maybe$withDefault,
								_p498,
								A2(
									_elm_lang$core$Maybe$andThen,
									function (funcName) {
										var _p499 = A3(_user$project$LangTools$resolveIdentifierToExp, funcName, targetEId, program);
										if ((_p499.ctor === 'Just') && (_p499._0.ctor === 'Bound')) {
											var _p500 = _p499._0._0.val.e__;
											if (_p500.ctor === 'EFun') {
												return A2(
													_user$project$Utils$mapFirstSuccess,
													function (_p501) {
														var _p502 = _p501;
														var _p503 = A2(_user$project$LangTools$tryMatchExp, _p502._0, _p502._1);
														if (_p503.ctor === 'Match') {
															return A2(
																_elm_lang$core$Maybe$map,
																function (_p504) {
																	var _p505 = _p504;
																	return {
																		ctor: '::',
																		_0: A2(
																			varIdentOrDefault,
																			_user$project$Lang$expEffectiveExp(_p505._1),
																			_p505._0),
																		_1: {ctor: '[]'}
																	};
																},
																A2(
																	_user$project$Utils$findFirst,
																	function (_p506) {
																		var _p507 = _p506;
																		return A2(_elm_lang$core$Set$member, _p507._1.val.eid, equivalentEIds);
																	},
																	_p503._0));
														} else {
															return _elm_lang$core$Maybe$Nothing;
														}
													},
													A2(_user$project$Utils$zip, _p500._1, _p479._2));
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									},
									_user$project$LangTools$expToMaybeIdent(_p479._1)));
						}
					case 'EList':
						if ((((((_p479._1.ctor === '::') && (_p479._1._0.ctor === '_Tuple2')) && (_p479._1._1.ctor === '::')) && (_p479._1._1._0.ctor === '_Tuple2')) && (_p479._1._1._1.ctor === '[]')) && (_p479._3.ctor === 'Nothing')) {
							var _p510 = _p479._1._1._0._1;
							var _p509 = _p479._1._0._1;
							var _p508 = {
								ctor: '_Tuple2',
								_0: A2(recurse, _p509, numericIdents_),
								_1: A2(recurse, _p510, numericIdents_)
							};
							_v284_2:
							do {
								if (_p508.ctor === '_Tuple2') {
									if (_p508._0.ctor === '::') {
										if ((_p508._0._0 === 'num') && (_p508._0._1.ctor === '[]')) {
											return A2(_user$project$LangTools$isSurelyNumeric, numericIdents_, _p510) ? {
												ctor: '::',
												_0: 'x',
												_1: {ctor: '[]'}
											} : searchChildren(numericIdents_);
										} else {
											break _v284_2;
										}
									} else {
										if (((_p508._1.ctor === '::') && (_p508._1._0 === 'num')) && (_p508._1._1.ctor === '[]')) {
											return A2(_user$project$LangTools$isSurelyNumeric, numericIdents_, _p509) ? {
												ctor: '::',
												_0: 'y',
												_1: {ctor: '[]'}
											} : searchChildren(numericIdents_);
										} else {
											break _v284_2;
										}
									}
								} else {
									break _v284_2;
								}
							} while(false);
							return searchChildren(numericIdents_);
						} else {
							break _v268_4;
						}
					case 'EColonType':
						var _p511 = searchChildren(numericIdents_);
						if (_p511.ctor === '[]') {
							return {ctor: '[]'};
						} else {
							if (_p511._1.ctor === '[]') {
								var _p512 = _p511._0;
								return _elm_lang$core$Native_Utils.eq(
									_user$project$LangTools$simpleExpName(_p479._1),
									_p512) ? {
									ctor: '::',
									_0: _user$project$LangTools$typeToExpName(_p479._3),
									_1: {ctor: '[]'}
								} : {
									ctor: '::',
									_0: _p512,
									_1: {ctor: '[]'}
								};
							} else {
								return _p511;
							}
						}
					default:
						break _v268_4;
				}
			} while(false);
			return searchChildren(numericIdents_);
		}
	});
var _user$project$LangTools$expDescriptionParts = F2(
	function (program, targetEId) {
		var equivalentEIds = _elm_lang$core$Set$fromList(
			_user$project$Lang$expEffectiveEIds(
				A2(_user$project$LangTools$outerSameValueExpByEId, program, targetEId)));
		return A5(_user$project$LangTools$expDescriptionParts_, program, program, _elm_lang$core$Set$empty, targetEId, equivalentEIds);
	});
var _user$project$LangTools$locIdDescriptionParts = F2(
	function (program, locId) {
		var _p513 = A2(
			_elm_lang$core$Maybe$map,
			_user$project$LangTools$expDescriptionParts(program),
			A2(_user$project$Lang$locIdToEId, program, locId));
		if (_p513.ctor === 'Just') {
			return _p513._0;
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_user$project$LangTools$scopeNamesLocLiftedThrough, program, locId),
				{
					ctor: '::',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						'k',
						_elm_lang$core$Basics$toString(locId)),
					_1: {ctor: '[]'}
				});
		}
	});
var _user$project$LangTools$locIdDescription = F2(
	function (program, locId) {
		return A2(
			_elm_lang$core$String$join,
			' ',
			A2(_user$project$LangTools$locIdDescriptionParts, program, locId));
	});
var _user$project$LangTools$expNameForEIdWithDefault = F3(
	function ($default, program, targetEId) {
		var _p514 = A2(
			_user$project$Utils$takeLast,
			1,
			A2(_user$project$LangTools$expDescriptionParts, program, targetEId));
		if ((_p514.ctor === '::') && (_p514._1.ctor === '[]')) {
			return _p514._0;
		} else {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				$default,
				A2(
					_elm_lang$core$Maybe$map,
					_user$project$LangTools$simpleExpNameWithDefault($default),
					A2(_user$project$Lang$findExpByEId, program, targetEId)));
		}
	});
var _user$project$LangTools$expNameForEId = F2(
	function (program, targetEId) {
		return A3(_user$project$LangTools$expNameForEIdWithDefault, _user$project$LangTools$defaultExpName, program, targetEId);
	});
var _user$project$LangTools$commonNameForEIdsWithDefault = F3(
	function (defaultName, program, eids) {
		var expNames = A2(
			_elm_lang$core$List$map,
			_user$project$LangTools$expNameForEId(program),
			eids);
		var prefixCandidate = _user$project$LangTools$removeLeadingDigits(
			_user$project$Utils$commonPrefixString(expNames));
		var suffixCandidate = _user$project$LangTools$removeLeadingDigits(
			_user$project$Utils$commonSuffixString(expNames));
		var candidate = function () {
			var candidate = _elm_lang$core$Native_Utils.eq(prefixCandidate, '') ? suffixCandidate : (_elm_lang$core$Native_Utils.eq(suffixCandidate, '') ? prefixCandidate : (_elm_lang$core$Native_Utils.eq(prefixCandidate, _user$project$LangTools$defaultExpName) ? suffixCandidate : (_elm_lang$core$Native_Utils.eq(suffixCandidate, _user$project$LangTools$defaultExpName) ? prefixCandidate : (_elm_lang$core$Native_Utils.eq(prefixCandidate, 'num') ? suffixCandidate : (_elm_lang$core$Native_Utils.eq(suffixCandidate, 'num') ? prefixCandidate : ((_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$String$length(prefixCandidate),
				_elm_lang$core$String$length(suffixCandidate)) < 0) ? suffixCandidate : prefixCandidate))))));
			return _user$project$LangTools$downcaseLeadingCapitals(candidate);
		}();
		return (_elm_lang$core$Native_Utils.eq(candidate, '') || (_elm_lang$core$Native_Utils.eq(candidate, 'num') || _elm_lang$core$Native_Utils.eq(candidate, _user$project$LangTools$defaultExpName))) ? A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Native_Utils.eq(candidate, '') ? defaultName : candidate,
			A2(
				_elm_lang$core$Maybe$map,
				function (nums) {
					return (_elm_lang$core$Native_Utils.eq(
						A2(
							_elm_lang$core$List$map,
							function (_p515) {
								return _elm_lang$core$Basics$toFloat(
									_elm_lang$core$Basics$round(_p515));
							},
							nums),
						nums) && (_elm_lang$core$Native_Utils.eq(
						_user$project$Utils$dedup(nums),
						nums) && ((A2(_elm_lang$core$List$member, 0, nums) || A2(_elm_lang$core$List$member, 1, nums)) && A2(
						_elm_lang$core$List$all,
						function (n) {
							return (_elm_lang$core$Native_Utils.cmp(0, n) < 1) && (_elm_lang$core$Native_Utils.cmp(n, 10) < 0);
						},
						nums)))) ? 'i' : 'num';
				},
				_user$project$Utils$projJusts(
					A2(
						_elm_lang$core$List$map,
						function (eid) {
							return A2(
								_elm_lang$core$Maybe$andThen,
								_user$project$LangTools$expToMaybeNum,
								A2(_user$project$Lang$findExpByEId, program, eid));
						},
						eids)))) : candidate;
	});
var _user$project$LangTools$commonNameForEIds = F2(
	function (program, eids) {
		return A3(_user$project$LangTools$commonNameForEIdsWithDefault, _user$project$LangTools$defaultExpName, program, eids);
	});
var _user$project$LangTools$expNameForExpWithDefault = F3(
	function ($default, program, exp) {
		var _p516 = A2(
			_user$project$Utils$takeLast,
			1,
			A2(_user$project$LangTools$expDescriptionParts, program, exp.val.eid));
		if ((_p516.ctor === '::') && (_p516._1.ctor === '[]')) {
			return _p516._0;
		} else {
			return A2(_user$project$LangTools$simpleExpNameWithDefault, $default, exp);
		}
	});
var _user$project$LangTools$expNameForExp = F2(
	function (program, exp) {
		return A3(_user$project$LangTools$expNameForExpWithDefault, _user$project$LangTools$defaultExpName, program, exp);
	});
var _user$project$LangTools$maybeResolveIdentifierToExp = F3(
	function (ident, viewerEId, program) {
		var _p517 = A3(_user$project$LangTools$resolveIdentifierToExp, ident, viewerEId, program);
		if ((_p517.ctor === 'Just') && (_p517._0.ctor === 'Bound')) {
			return _elm_lang$core$Maybe$Just(_p517._0._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LangTools$eidToMaybeCorrespondingArgumentPathedPatId = F2(
	function (program, targetEId) {
		return A2(
			_user$project$Utils$mapFirstSuccess,
			function (exp) {
				var _p518 = exp.val.e__;
				if (_p518.ctor === 'EApp') {
					var _p525 = _p518._1;
					var _p519 = _p525.val.e__;
					if (_p519.ctor === 'EVar') {
						var _p520 = A3(_user$project$LangTools$resolveIdentifierToExp, _p519._1, _p525.val.eid, program);
						if ((_p520.ctor === 'Just') && (_p520._0.ctor === 'Bound')) {
							var _p524 = _p520._0._0;
							var _p521 = {
								ctor: '_Tuple2',
								_0: _p524.val.e__,
								_1: _user$project$FastParser$isPreludeEId(_p524.val.eid)
							};
							if (((_p521.ctor === '_Tuple2') && (_p521._0.ctor === 'EFun')) && (_p521._1 === false)) {
								return A2(
									_user$project$Utils$mapFirstSuccess,
									function (_p522) {
										var _p523 = _p522;
										return _elm_lang$core$Native_Utils.eq(_p523._1.val.eid, targetEId) ? _elm_lang$core$Maybe$Just(
											{
												ctor: '_Tuple2',
												_0: {ctor: '_Tuple2', _0: _p524.val.eid, _1: 1},
												_1: _p523._0
											}) : _elm_lang$core$Maybe$Nothing;
									},
									A2(_user$project$LangTools$tryMatchExpsPatsToPathsAtFunctionCall, _p521._0._1, _p518._2));
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			},
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				A2(_user$project$Lang$findWithAncestorsByEId, program, targetEId)));
	});
var _user$project$LangTools$expPatEnvAt = F2(
	function (exp, targetEId) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (bindings) {
				return A2(_elm_lang$core$Dict$union, bindings, _user$project$LangTools$preludePatExpEnv);
			},
			A2(_user$project$LangTools$expPatEnvAt_, exp, targetEId));
	});

var _user$project$Native_Javascript = {

    tripleEqualsOperator : function(a) { return function(b) {
      return a === b;
    }}

};

var _user$project$Javascript$tripleEqualsOperator = F2(
	function (a, b) {
		return A2(_user$project$Native_Javascript.tripleEqualsOperator, a, b);
	});

var _user$project$Provenance$debugShow = function (val) {
	var _p0 = val.provenance;
	var exp = _p0._0;
	var basedOnVals = _p0._1;
	var premiseStrs = A2(_elm_lang$core$List$map, _user$project$Provenance$debugShow, basedOnVals);
	var conclusionStr = A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$LangUnparser$unparseWithIds(exp),
		A2(
			_elm_lang$core$Basics_ops['++'],
			' ⇓ ',
			_user$project$ValUnparser$strVal(val)));
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$String$join, '; ', premiseStrs),
			A2(_elm_lang$core$Basics_ops['++'], ') | ', conclusionStr)));
};
var _user$project$Provenance$interpretationIsNonEmpty = function (val) {
	var _p1 = val.provenance;
	var exp = _p1._0;
	var basedOnVals = _p1._1;
	return _user$project$FastParser$isProgramEId(exp.val.eid) || A2(_elm_lang$core$List$any, _user$project$Provenance$interpretationIsNonEmpty, basedOnVals);
};
var _user$project$Provenance$isPossibleSingleEIdInterpretation = F2(
	function (eid, val) {
		var _p2 = val.provenance;
		var exp = _p2._0;
		var basedOnVals = _p2._1;
		return (_elm_lang$core$Native_Utils.eq(exp.val.eid, eid) && _user$project$FastParser$isProgramEId(exp.val.eid)) || function () {
			var relevantChildren = A2(_elm_lang$core$List$filter, _user$project$Provenance$interpretationIsNonEmpty, basedOnVals);
			var _p3 = relevantChildren;
			if (_p3.ctor === '[]') {
				return false;
			} else {
				return A2(
					_elm_lang$core$List$all,
					_user$project$Provenance$isPossibleSingleEIdInterpretation(eid),
					relevantChildren);
			}
		}();
	});
var _user$project$Provenance$valTreeToSingleEIdInterpretations = F3(
	function (program, expFilter, val) {
		return A2(
			_elm_lang$core$List$map,
			function (_p4) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p4));
			},
			A2(
				_elm_lang$core$List$filter,
				function (exp) {
					return A2(_user$project$Provenance$isPossibleSingleEIdInterpretation, exp.val.eid, val);
				},
				A2(
					_elm_lang$core$List$filter,
					expFilter,
					_user$project$Lang$flattenExpTree(program))));
	});
var _user$project$Provenance$valTreeToMostDistalProgramEIdInterpretation = F2(
	function (expFilter, val) {
		var _p5 = val.provenance;
		var exp = _p5._0;
		var basedOnVals = _p5._1;
		var childrenInterpretations = A2(
			_elm_lang$core$List$map,
			_user$project$Provenance$valTreeToMostDistalProgramEIdInterpretation(expFilter),
			basedOnVals);
		return A2(
			_elm_lang$core$List$any,
			function (_p6) {
				return !_elm_lang$core$Set$isEmpty(_p6);
			},
			childrenInterpretations) ? _user$project$Utils$unionAll(childrenInterpretations) : ((_user$project$FastParser$isProgramEId(exp.val.eid) && expFilter(exp)) ? _elm_lang$core$Set$singleton(exp.val.eid) : _elm_lang$core$Set$empty);
	});
var _user$project$Provenance$valTreeToMostProximalProgramEIdInterpretation = F2(
	function (expFilter, val) {
		var _p7 = val.provenance;
		var exp = _p7._0;
		var basedOnVals = _p7._1;
		return (_user$project$FastParser$isProgramEId(exp.val.eid) && expFilter(exp)) ? _elm_lang$core$Set$singleton(exp.val.eid) : _user$project$Utils$unionAll(
			A2(
				_elm_lang$core$List$map,
				_user$project$Provenance$valTreeToMostProximalProgramEIdInterpretation(expFilter),
				basedOnVals));
	});
var _user$project$Provenance$isRelevantParentPoint = F3(
	function (expFilter, pointVals, parent) {
		var _p8 = parent.provenance;
		var parentExp = _p8._0;
		return _user$project$FastParser$isProgramEId(parentExp.val.eid) && (A2(_elm_lang$core$List$member, parent, pointVals) && expFilter(parentExp));
	});
var _user$project$Provenance$valTreeToMostProximalProgramPointEIdInterpretation = F3(
	function (expFilter, pointVals, val) {
		var _p9 = val.provenance;
		var exp = _p9._0;
		var basedOnVals = _p9._1;
		var _p10 = A2(
			_user$project$Utils$findFirst,
			A2(_user$project$Provenance$isRelevantParentPoint, expFilter, pointVals),
			_user$project$Lang$valParents(val));
		if (_p10.ctor === 'Just') {
			var _p12 = _p10._0;
			var _p11 = _p12.provenance;
			var parentExp = _p11._0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Set$singleton(parentExp.val.eid),
				_1: {
					ctor: '::',
					_0: _p12,
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p13 = _elm_lang$core$List$unzip(
				A2(
					_elm_lang$core$List$map,
					A2(_user$project$Provenance$valTreeToMostProximalProgramPointEIdInterpretation, expFilter, pointVals),
					basedOnVals));
			var childrenInterpretations = _p13._0;
			var pointValsUsed = _p13._1;
			return A2(
				_elm_lang$core$List$any,
				F2(
					function (x, y) {
						return !_elm_lang$core$Native_Utils.eq(x, y);
					})(
					{ctor: '[]'}),
				pointValsUsed) ? {
				ctor: '_Tuple2',
				_0: _user$project$Utils$unionAll(childrenInterpretations),
				_1: _user$project$Utils$unionAllAsSet(pointValsUsed)
			} : ((_user$project$FastParser$isProgramEId(exp.val.eid) && expFilter(exp)) ? {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Set$singleton(exp.val.eid),
				_1: {ctor: '[]'}
			} : {
				ctor: '_Tuple2',
				_0: _user$project$Utils$unionAll(childrenInterpretations),
				_1: {ctor: '[]'}
			});
		}
	});
var _user$project$Provenance$valTreeToMostDistalProgramPointEIdInterpretation = F3(
	function (expFilter, pointVals, val) {
		var _p14 = val.provenance;
		var exp = _p14._0;
		var basedOnVals = _p14._1;
		var _p15 = _elm_lang$core$List$unzip(
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$Provenance$valTreeToMostDistalProgramPointEIdInterpretation, expFilter, pointVals),
				basedOnVals));
		var childrenInterpretations = _p15._0;
		var pointValsUsed = _p15._1;
		if (A2(
			_elm_lang$core$List$any,
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				})(
				{ctor: '[]'}),
			pointValsUsed)) {
			return {
				ctor: '_Tuple2',
				_0: _user$project$Utils$unionAll(childrenInterpretations),
				_1: _user$project$Utils$unionAllAsSet(pointValsUsed)
			};
		} else {
			var _p16 = A2(
				_user$project$Utils$findFirst,
				A2(_user$project$Provenance$isRelevantParentPoint, expFilter, pointVals),
				_elm_lang$core$List$reverse(
					_user$project$Lang$valParents(val)));
			if (_p16.ctor === 'Just') {
				var _p18 = _p16._0;
				var _p17 = _p18.provenance;
				var parentExp = _p17._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Set$singleton(parentExp.val.eid),
					_1: {
						ctor: '::',
						_0: _p18,
						_1: {ctor: '[]'}
					}
				};
			} else {
				return A2(
					_elm_lang$core$List$any,
					function (_p19) {
						return !_elm_lang$core$Set$isEmpty(_p19);
					},
					childrenInterpretations) ? {
					ctor: '_Tuple2',
					_0: _user$project$Utils$unionAll(childrenInterpretations),
					_1: {ctor: '[]'}
				} : ((_user$project$FastParser$isProgramEId(exp.val.eid) && expFilter(exp)) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Set$singleton(exp.val.eid),
					_1: {ctor: '[]'}
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Set$empty,
					_1: {ctor: '[]'}
				});
			}
		}
	});
var _user$project$Provenance$proximalValInterpretationsAllInside = F2(
	function (vals, val) {
		var _p20 = val.provenance;
		var exp = _p20._0;
		var basedOnVals = _p20._1;
		return A2(_elm_lang$core$List$member, val, vals) ? {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: val,
				_1: {ctor: '[]'}
			},
			_1: {ctor: '[]'}
		} : (_elm_lang$core$Native_Utils.eq(
			basedOnVals,
			{ctor: '[]'}) ? {ctor: '[]'} : A2(
			_elm_lang$core$List$map,
			_user$project$Utils$unionAllAsSet,
			_user$project$Utils$cartProdAll(
				A2(
					_elm_lang$core$List$map,
					_user$project$Provenance$proximalValInterpretationsAllInside(vals),
					basedOnVals))));
	});
var _user$project$Provenance$valInterpretationsAllInside = F2(
	function (vals, val) {
		var _p21 = val.provenance;
		var exp = _p21._0;
		var basedOnVals = _p21._1;
		var perhapsThisVal = A2(_elm_lang$core$List$member, val, vals) ? {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: val,
				_1: {ctor: '[]'}
			},
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		var childrenInterps = A2(
			_elm_lang$core$List$map,
			_user$project$Utils$unionAllAsSet,
			_user$project$Utils$cartProdAll(
				A2(
					_elm_lang$core$List$map,
					_user$project$Provenance$valInterpretationsAllInside(vals),
					basedOnVals)));
		return A2(_elm_lang$core$Basics_ops['++'], perhapsThisVal, childrenInterps);
	});
var _user$project$Provenance$valTreeToAllProgramEIdInterpretations_ = F3(
	function (ignoreUninterpretedSubtress, expFilter, val) {
		var _p22 = val.provenance;
		var exp = _p22._0;
		var basedOnVals = _p22._1;
		var perhapsThisExp = (_user$project$FastParser$isProgramEId(exp.val.eid) && expFilter(exp)) ? {
			ctor: '::',
			_0: _elm_lang$core$Set$singleton(exp.val.eid),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return _user$project$Utils$dedup(
			A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				perhapsThisExp,
				A2(
					_elm_lang$core$List$map,
					_user$project$Utils$unionAll,
					_user$project$Utils$cartProdAll(
						(ignoreUninterpretedSubtress ? _elm_lang$core$List$filter(
							function (_p23) {
								return !_elm_lang$core$List$isEmpty(_p23);
							}) : _elm_lang$core$Basics$identity)(
							A2(
								_elm_lang$core$List$map,
								A2(_user$project$Provenance$valTreeToAllProgramEIdInterpretations_, ignoreUninterpretedSubtress, expFilter),
								basedOnVals))))));
	});
var _user$project$Provenance$valTreeToAllProgramEIdInterpretationsIgnoringUninterpretedSubtrees = F2(
	function (expFilter, val) {
		return A3(_user$project$Provenance$valTreeToAllProgramEIdInterpretations_, true, expFilter, val);
	});
var _user$project$Provenance$valTreeToAllProgramEIdInterpretations = function (val) {
	return A3(
		_user$project$Provenance$valTreeToAllProgramEIdInterpretations_,
		false,
		_elm_lang$core$Basics$always(true),
		val);
};
var _user$project$Provenance$expNonControlFlowChildren = function (exp) {
	var _p24 = exp.val.e__;
	switch (_p24.ctor) {
		case 'EConst':
			return {ctor: '[]'};
		case 'EBase':
			return {ctor: '[]'};
		case 'EVar':
			return {ctor: '[]'};
		case 'EFun':
			return {ctor: '[]'};
		case 'EOp':
			return _user$project$Lang$childExps(exp);
		case 'EList':
			return _user$project$Lang$childExps(exp);
		case 'EApp':
			return _p24._2;
		case 'ELet':
			return {
				ctor: '::',
				_0: _p24._7,
				_1: {ctor: '[]'}
			};
		case 'EIf':
			return {
				ctor: '::',
				_0: _p24._3,
				_1: {
					ctor: '::',
					_0: _p24._5,
					_1: {ctor: '[]'}
				}
			};
		case 'ECase':
			return _user$project$Lang$branchExps(_p24._2);
		case 'ETypeCase':
			return _user$project$Lang$tbranchExps(_p24._2);
		case 'EComment':
			return _user$project$Lang$childExps(exp);
		case 'EOption':
			return _user$project$Lang$childExps(exp);
		case 'ETyp':
			return _user$project$Lang$childExps(exp);
		case 'EColonType':
			return _user$project$Lang$childExps(exp);
		case 'ETypeAlias':
			return _user$project$Lang$childExps(exp);
		case 'EParens':
			return _user$project$Lang$childExps(exp);
		default:
			return _user$project$Lang$childExps(exp);
	}
};
var _user$project$Provenance$expandEIdInterpretationOutward = F2(
	function (program, interpretation) {
		expandEIdInterpretationOutward:
		while (true) {
			var interpPiecesExpanded = A2(
				_elm_lang$core$List$map,
				function (_p25) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(
							A2(_user$project$LangTools$outerSameValueExpByEId, program, _p25)));
				},
				interpretation);
			var parents = A2(
				_user$project$Utils$dedupBy,
				function (_p26) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(_p26));
				},
				_user$project$Utils$filterJusts(
					_user$project$Utils$filterJusts(
						A2(
							_elm_lang$core$List$map,
							_user$project$Lang$parentByEId(program),
							interpPiecesExpanded))));
			var interpExpandedIntoParents = A3(
				_elm_lang$core$List$foldl,
				F2(
					function (parent, interpretation) {
						var parentNonControlFlowChildrenEIds = A2(
							_elm_lang$core$List$map,
							function (_p27) {
								return function (_) {
									return _.eid;
								}(
									function (_) {
										return _.val;
									}(_p27));
							},
							_user$project$Provenance$expNonControlFlowChildren(parent));
						return A2(_user$project$Utils$isSublistAsSet, parentNonControlFlowChildrenEIds, interpretation) ? {
							ctor: '::',
							_0: parent.val.eid,
							_1: A2(_user$project$Utils$diffAsSet, interpretation, parentNonControlFlowChildrenEIds)
						} : interpretation;
					}),
				interpPiecesExpanded,
				parents);
			if (_elm_lang$core$Native_Utils.eq(interpretation, interpExpandedIntoParents)) {
				return interpretation;
			} else {
				var _v4 = program,
					_v5 = interpExpandedIntoParents;
				program = _v4;
				interpretation = _v5;
				continue expandEIdInterpretationOutward;
			}
		}
	});
var _user$project$Provenance$valTreeToSingleEIdInterpretationsSlow = F3(
	function (program, expFilter, val) {
		var _p28 = val.provenance;
		var exp = _p28._0;
		var basedOnVals = _p28._1;
		var perhapsThisExp = (_user$project$FastParser$isProgramEId(exp.val.eid) && expFilter(exp)) ? {
			ctor: '::',
			_0: exp.val.eid,
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return _user$project$Utils$dedup(
			A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				perhapsThisExp,
				A2(
					_elm_lang$core$List$filterMap,
					function (interpretation) {
						var _p29 = _elm_lang$core$Set$toList(interpretation);
						if ((_p29.ctor === '::') && (_p29._1.ctor === '[]')) {
							return _elm_lang$core$Maybe$Just(_p29._0);
						} else {
							var _p30 = A2(_user$project$Provenance$expandEIdInterpretationOutward, program, _p29);
							if ((_p30.ctor === '::') && (_p30._1.ctor === '[]')) {
								var _p31 = _p30._0;
								return A2(
									F2(
										function (x, y) {
											return _elm_lang$core$Native_Utils.eq(x, y);
										}),
									_elm_lang$core$Maybe$Just(true),
									A2(
										_elm_lang$core$Maybe$map,
										expFilter,
										A2(_user$project$Lang$findExpByEId, program, _p31))) ? _elm_lang$core$Maybe$Just(_p31) : _elm_lang$core$Maybe$Nothing;
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_user$project$Utils$dedup(
						A2(
							_elm_lang$core$List$map,
							_user$project$Utils$unionAll,
							_user$project$Utils$cartProdAll(
								A2(
									_elm_lang$core$List$filter,
									function (_p32) {
										return !_elm_lang$core$List$isEmpty(_p32);
									},
									A2(
										_elm_lang$core$List$map,
										_user$project$Provenance$valTreeToAllProgramEIdInterpretationsIgnoringUninterpretedSubtrees(expFilter),
										basedOnVals))))))));
	});
var _user$project$Provenance$coordinateIntermediatesToSharedPointParents = F2(
	function (xIntermediates, yIntermediates) {
		var valsWherePossiblyXCoord = A2(
			_elm_lang$core$List$concatMap,
			function (intermediateVal) {
				return A2(
					_elm_lang$core$List$filter,
					function (parent) {
						var _p33 = parent.v_;
						if ((((_p33.ctor === 'VList') && (_p33._0.ctor === '::')) && (_p33._0._1.ctor === '::')) && (_p33._0._1._1.ctor === '[]')) {
							return _elm_lang$core$Native_Utils.eq(_p33._0._0, intermediateVal);
						} else {
							return false;
						}
					},
					_user$project$Lang$valParents(intermediateVal));
			},
			xIntermediates);
		var valsWherePossiblyYCoord = A2(
			_elm_lang$core$List$concatMap,
			function (intermediateVal) {
				return A2(
					_elm_lang$core$List$filter,
					function (parent) {
						var _p34 = parent.v_;
						if ((((_p34.ctor === 'VList') && (_p34._0.ctor === '::')) && (_p34._0._1.ctor === '::')) && (_p34._0._1._1.ctor === '[]')) {
							return _elm_lang$core$Native_Utils.eq(_p34._0._1._0, intermediateVal);
						} else {
							return false;
						}
					},
					_user$project$Lang$valParents(intermediateVal));
			},
			yIntermediates);
		var parentPoints = A2(_user$project$Utils$intersectAsSet, valsWherePossiblyXCoord, valsWherePossiblyYCoord);
		return parentPoints;
	});
var _user$project$Provenance$flattenValBasedOnTree = function (val) {
	var _p35 = val.provenance;
	var exp = _p35._0;
	var basedOnVals = _p35._1;
	return {
		ctor: '::',
		_0: val,
		_1: A2(_elm_lang$core$List$concatMap, _user$project$Provenance$flattenValBasedOnTree, basedOnVals)
	};
};
var _user$project$Provenance$valsToProximalDistalPointInterpretations = F3(
	function (expFilter, xValTree, yValTree) {
		var parentPoints = A2(
			_user$project$Provenance$coordinateIntermediatesToSharedPointParents,
			_user$project$Provenance$flattenValBasedOnTree(xValTree),
			_user$project$Provenance$flattenValBasedOnTree(yValTree));
		var pointInterpretation = F3(
			function (valTreeToProgramPointEIdInterpretation, preferredCoordVal, otherCoordVal) {
				var _p36 = A2(valTreeToProgramPointEIdInterpretation, parentPoints, preferredCoordVal);
				var coord1Interp = _p36._0;
				var valsUsed1 = _p36._1;
				var _p37 = A2(valTreeToProgramPointEIdInterpretation, valsUsed1, otherCoordVal);
				var coord2Interp = _p37._0;
				var valsUsed2 = _p37._1;
				return _elm_lang$core$Native_Utils.eq(
					valsUsed1,
					{ctor: '[]'}) ? _elm_lang$core$Set$empty : ((!_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$List$length(valsUsed1),
					_elm_lang$core$List$length(valsUsed2))) ? _elm_lang$core$Set$empty : A2(_elm_lang$core$Set$union, coord1Interp, coord2Interp));
			});
		var proximalToXInterpretation = A3(
			pointInterpretation,
			_user$project$Provenance$valTreeToMostProximalProgramPointEIdInterpretation(expFilter),
			xValTree,
			yValTree);
		var proximalToYInterpretation = A3(
			pointInterpretation,
			_user$project$Provenance$valTreeToMostProximalProgramPointEIdInterpretation(expFilter),
			yValTree,
			xValTree);
		var distalToXInterpretation = A3(
			pointInterpretation,
			_user$project$Provenance$valTreeToMostDistalProgramPointEIdInterpretation(expFilter),
			xValTree,
			yValTree);
		var distalToYInterpretation = A3(
			pointInterpretation,
			_user$project$Provenance$valTreeToMostDistalProgramPointEIdInterpretation(expFilter),
			yValTree,
			xValTree);
		return {ctor: '_Tuple4', _0: proximalToXInterpretation, _1: proximalToYInterpretation, _2: distalToXInterpretation, _3: distalToYInterpretation};
	});
var _user$project$Provenance$valToMaybePreviousSameVal = function (val) {
	var success = function (_p38) {
		var _p39 = _p38;
		var _p40 = _user$project$Lang$valBasedOn(val);
		if ((_p40.ctor === '::') && (_p40._1.ctor === '[]')) {
			return _elm_lang$core$Maybe$Just(_p40._0);
		} else {
			var _p41 = _user$project$Utils$log(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'valToMaybePreviousSameVal shouldn\'t happen: unexpected extra basedOnVals ',
					_user$project$ValUnparser$strVal(val)));
			return _elm_lang$core$Maybe$Nothing;
		}
	};
	var _p42 = _user$project$Lang$valExp(val).val.e__;
	switch (_p42.ctor) {
		case 'EConst':
			return _elm_lang$core$Maybe$Nothing;
		case 'EBase':
			return _elm_lang$core$Maybe$Nothing;
		case 'EFun':
			return _elm_lang$core$Maybe$Nothing;
		case 'EList':
			return _elm_lang$core$Maybe$Nothing;
		case 'EVar':
			return success(
				{ctor: '_Tuple0'});
		case 'EApp':
			return success(
				{ctor: '_Tuple0'});
		case 'EOp':
			return (!_elm_lang$core$Native_Utils.eq(
				_user$project$Lang$expEffectiveExp(
					_user$project$Lang$valExp(val)),
				_user$project$Lang$valExp(val))) ? success(
				{ctor: '_Tuple0'}) : _elm_lang$core$Maybe$Nothing;
		case 'ELet':
			var _p43 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: ELet shouldn\'t appear in provenance');
			return _elm_lang$core$Maybe$Nothing;
		case 'EIf':
			return success(
				{ctor: '_Tuple0'});
		case 'ECase':
			return success(
				{ctor: '_Tuple0'});
		case 'ETypeCase':
			return success(
				{ctor: '_Tuple0'});
		case 'EComment':
			var _p44 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: EComment shouldn\'t appear in provenance');
			return _elm_lang$core$Maybe$Nothing;
		case 'EOption':
			var _p45 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: EOption shouldn\'t appear in provenance');
			return _elm_lang$core$Maybe$Nothing;
		case 'ETyp':
			var _p46 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: ETyp shouldn\'t appear in provenance');
			return _elm_lang$core$Maybe$Nothing;
		case 'EColonType':
			var _p47 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: EColonType shouldn\'t appear in provenance');
			return _elm_lang$core$Maybe$Nothing;
		case 'ETypeAlias':
			var _p48 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: ETypeAlias shouldn\'t appear in provenance');
			return _elm_lang$core$Maybe$Nothing;
		case 'EParens':
			var _p49 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: EParens shouldn\'t appear in provenance');
			return _elm_lang$core$Maybe$Nothing;
		default:
			switch (_p42._1.ctor) {
				case 'HoleVal':
					return success(
						{ctor: '_Tuple0'});
				case 'HoleLoc':
					var _p50 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: Loc hole shouldn\'t appear in provenance');
					return _elm_lang$core$Maybe$Nothing;
				case 'HolePredicate':
					var _p51 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: Predicate hole shouldn\'t appear in provenance');
					return _elm_lang$core$Maybe$Nothing;
				case 'HoleNamed':
					if (_p42._1._0 === 'terminationCondition') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _p52 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: Empty named hole shouldn\'t appear in provenance');
						return _elm_lang$core$Maybe$Nothing;
					}
				case 'HoleEmpty':
					var _p53 = _user$project$Utils$log('valToMaybePreviousSameVal shouldn\'t happen: Empty hole shouldn\'t appear in provenance');
					return _elm_lang$core$Maybe$Nothing;
				default:
					return success(
						{ctor: '_Tuple0'});
			}
	}
};
var _user$project$Provenance$valToSameVals = function (val) {
	var _p54 = _user$project$Provenance$valToMaybePreviousSameVal(val);
	if (_p54.ctor === 'Just') {
		return {
			ctor: '::',
			_0: val,
			_1: _user$project$Provenance$valToSameVals(_p54._0)
		};
	} else {
		return {
			ctor: '::',
			_0: val,
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$Provenance$valToDistalSameVal = function (val) {
	valToDistalSameVal:
	while (true) {
		var _p55 = _user$project$Provenance$valToMaybePreviousSameVal(val);
		if (_p55.ctor === 'Just') {
			var _v15 = _p55._0;
			val = _v15;
			continue valToDistalSameVal;
		} else {
			return val;
		}
	}
};
var _user$project$Provenance$valBasedOnTreeToProgramExps = F2(
	function (program, val) {
		valBasedOnTreeToProgramExps:
		while (true) {
			var _p56 = {
				ctor: '_Tuple3',
				_0: _user$project$FastParser$isProgramEId(
					_user$project$Lang$valEId(val)),
				_1: _user$project$Lang$expEffectiveExp(
					_user$project$Lang$valExp(val)).val.e__,
				_2: _user$project$Lang$valBasedOn(val)
			};
			if (_p56._0 === true) {
				if (((_p56._1.ctor === 'EVar') && (_p56._2.ctor === '::')) && (_p56._2._1.ctor === '[]')) {
					if (_elm_lang$core$Native_Utils.eq(
						A3(
							_user$project$LangTools$resolveIdentifierToExp,
							_p56._1._1,
							_user$project$Lang$valEId(val),
							program),
						_elm_lang$core$Maybe$Nothing)) {
						return A2(
							_elm_lang$core$List$filter,
							function (_p57) {
								return _user$project$FastParser$isProgramEId(
									function (_) {
										return _.eid;
									}(
										function (_) {
											return _.val;
										}(_p57)));
							},
							A2(
								_elm_lang$core$List$map,
								_user$project$Lang$valExp,
								_user$project$Provenance$valToSameVals(val)));
					} else {
						var _v17 = program,
							_v18 = _p56._2._0;
						program = _v17;
						val = _v18;
						continue valBasedOnTreeToProgramExps;
					}
				} else {
					return A2(
						_elm_lang$core$List$filter,
						function (_p58) {
							return _user$project$FastParser$isProgramEId(
								function (_) {
									return _.eid;
								}(
									function (_) {
										return _.val;
									}(_p58)));
						},
						A2(
							_elm_lang$core$List$map,
							_user$project$Lang$valExp,
							_user$project$Provenance$valToSameVals(val)));
				}
			} else {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(
						_elm_lang$core$Maybe$map,
						_user$project$Provenance$valBasedOnTreeToProgramExps(program),
						_user$project$Provenance$valToMaybePreviousSameVal(val)));
			}
		}
	});
var _user$project$Provenance$valBasedOnTreeToProgramExp = F2(
	function (program, val) {
		return _elm_lang$core$List$head(
			A2(_user$project$Provenance$valBasedOnTreeToProgramExps, program, val));
	});
var _user$project$Provenance$valEqFast = F2(
	function (v1, v2) {
		return A2(_user$project$Javascript$tripleEqualsOperator, v1, v2);
	});
var _user$project$Provenance$isSameOrDistalSameVal = F2(
	function (sameOrDistal, reference) {
		return A2(
			_elm_lang$core$List$any,
			_user$project$Provenance$valEqFast(sameOrDistal),
			_user$project$Provenance$valToSameVals(reference));
	});
var _user$project$Provenance$dedupSameVals = function (vals) {
	return A3(
		_user$project$Utils$foldr,
		{ctor: '[]'},
		F2(
			function (val, deduped) {
				var newDeduped = A2(
					_elm_lang$core$List$filter,
					function (dedupedVal) {
						return !A2(_user$project$Provenance$isSameOrDistalSameVal, dedupedVal, val);
					},
					deduped);
				return A2(
					_elm_lang$core$List$any,
					function (dedupedVal) {
						return A2(_user$project$Provenance$isSameOrDistalSameVal, val, dedupedVal);
					},
					newDeduped) ? newDeduped : {ctor: '::', _0: val, _1: newDeduped};
			}),
		vals);
};
var _user$project$Provenance$consolidatePointPartsIntoPoints = function (vals) {
	var makePoint = F2(
		function (val1, val2) {
			var _p59 = {
				ctor: '_Tuple2',
				_0: _user$project$Provenance$valToSameVals(val1),
				_1: _user$project$Provenance$valToSameVals(val2)
			};
			var val1Sames = _p59._0;
			var val2Sames = _p59._1;
			var _p60 = _user$project$Provenance$dedupSameVals(
				A2(_user$project$Provenance$coordinateIntermediatesToSharedPointParents, val1Sames, val2Sames));
			if (_p60.ctor === '::') {
				return _elm_lang$core$Maybe$Just(_p60._0);
			} else {
				var _p61 = _user$project$Provenance$dedupSameVals(
					A2(_user$project$Provenance$coordinateIntermediatesToSharedPointParents, val2Sames, val1Sames));
				if (_p61.ctor === '::') {
					return _elm_lang$core$Maybe$Just(_p61._0);
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		});
	var _p62 = vals;
	if (_p62.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p65 = _p62._0;
		var _p64 = _p62._1;
		var _p63 = A2(
			_user$project$Utils$mapAndRemoveFirstSuccess,
			makePoint(_p65),
			_p64);
		if (_p63.ctor === 'Just') {
			return {
				ctor: '::',
				_0: _p63._0._0,
				_1: _user$project$Provenance$consolidatePointPartsIntoPoints(_p63._0._1)
			};
		} else {
			return {
				ctor: '::',
				_0: _p65,
				_1: _user$project$Provenance$consolidatePointPartsIntoPoints(_p64)
			};
		}
	}
};
var _user$project$Provenance$didAffect = F2(
	function (causeVal, effectVal) {
		return A2(
			_elm_lang$core$List$any,
			_user$project$Provenance$valEqFast(causeVal),
			_user$project$Provenance$flattenValBasedOnTree(effectVal));
	});
var _user$project$Provenance$listMemberByValEqFast = F2(
	function (targetVal, vals) {
		var _p66 = vals;
		if (_p66.ctor === '[]') {
			return false;
		} else {
			return A2(_user$project$Provenance$valEqFast, targetVal, _p66._0) || A2(_user$project$Provenance$listMemberByValEqFast, targetVal, _p66._1);
		}
	});
var _user$project$Provenance$dedupByValEqFast = function (vals) {
	var _p67 = A3(
		_user$project$Utils$foldl,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		F2(
			function (val, _p68) {
				var _p69 = _p68;
				var _p71 = _p69._1;
				var _p70 = _p69._0;
				return A2(_user$project$Provenance$listMemberByValEqFast, val, _p71) ? {ctor: '_Tuple2', _0: _p70, _1: _p71} : {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_p70,
						{
							ctor: '::',
							_0: val,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '::', _0: val, _1: _p71}
				};
			}),
		vals);
	var deduped = _p67._0;
	return deduped;
};
var _user$project$Provenance$pointPartsToPointValsStrict = F2(
	function (xValTree, yValTree) {
		var parentPoints = A2(
			_user$project$Provenance$coordinateIntermediatesToSharedPointParents,
			_user$project$Provenance$valToSameVals(xValTree),
			_user$project$Provenance$valToSameVals(yValTree));
		return _user$project$Provenance$dedupByValEqFast(
			A2(_elm_lang$core$List$concatMap, _user$project$Provenance$valToSameVals, parentPoints));
	});
var _user$project$Provenance$pointPartsToProgramPointEIdsStrict = F3(
	function (expFilter, xValTree, yValTree) {
		return _user$project$Utils$dedup(
			A2(
				_elm_lang$core$List$map,
				function (_p72) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(_p72));
				},
				A2(
					_elm_lang$core$List$filter,
					function (pointExp) {
						return _user$project$FastParser$isProgramEId(pointExp.val.eid) && expFilter(pointExp);
					},
					A2(
						_elm_lang$core$List$map,
						_user$project$Lang$valExp,
						A2(_user$project$Provenance$pointPartsToPointValsStrict, xValTree, yValTree)))));
	});
var _user$project$Provenance$equivalentValParents = function (_p73) {
	return _user$project$Provenance$dedupByValEqFast(
		A2(
			_elm_lang$core$List$concatMap,
			_user$project$Provenance$valToSameVals,
			A2(
				_elm_lang$core$List$concatMap,
				_user$project$Lang$valParents,
				_user$project$Provenance$valToSameVals(_p73))));
};
var _user$project$Provenance$intersectAsSetByValEqFast = F2(
	function (vals1, vals2) {
		return A2(
			_elm_lang$core$List$filter,
			function (v) {
				return A2(_user$project$Provenance$listMemberByValEqFast, v, vals2);
			},
			vals1);
	});
var _user$project$Provenance$sharedParents = function (vals) {
	var _p74 = vals;
	if (_p74.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		if (_p74._1.ctor === '[]') {
			return _user$project$Provenance$equivalentValParents(_p74._0);
		} else {
			return A2(
				_user$project$Provenance$intersectAsSetByValEqFast,
				_user$project$Provenance$sharedParents(_p74._1),
				_user$project$Provenance$equivalentValParents(_p74._0));
		}
	}
};
var _user$project$Provenance$valsSame = F2(
	function (v1, v2) {
		return A2(
			_user$project$Provenance$valEqFast,
			_user$project$Provenance$valToDistalSameVal(v1),
			_user$project$Provenance$valToDistalSameVal(v2));
	});
var _user$project$Provenance$valToMaybeLetPat = F2(
	function (program, val) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p75) {
				var _p76 = _p75;
				return _p76._0;
			},
			A2(
				_user$project$Utils$findFirst,
				function (_p77) {
					var _p78 = _p77;
					return A2(
						_user$project$Provenance$isPossibleSingleEIdInterpretation,
						_user$project$Lang$expEffectiveExp(_p78._1).val.eid,
						val);
				},
				_user$project$LangTools$allSimplyResolvableLetPatBindings(program)));
	});
var _user$project$Provenance$nameForVal = F2(
	function (program, val) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$LangTools$simpleExpName(
				_user$project$Lang$valExp(val)),
			A2(
				_elm_lang$core$Maybe$map,
				_user$project$LangTools$expNameForEId(program),
				_elm_lang$core$List$head(
					A3(
						_user$project$Provenance$valTreeToSingleEIdInterpretations,
						program,
						_elm_lang$core$Basics$always(true),
						val))));
	});

var _user$project$ValWidgets$valToMaybeWidget = function (val) {
	var _p0 = val.v_;
	if (_p0.ctor === 'VList') {
		var _p4 = _p0._0;
		var _p1 = {
			ctor: '_Tuple2',
			_0: _p4,
			_1: A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.v_;
				},
				_p4)
		};
		if ((_p1.ctor === '_Tuple2') && (_p1._0.ctor === '::')) {
			if (((((((_p1._0._1.ctor === '::') && (_p1._0._1._1.ctor === '[]')) && (_p1._1.ctor === '::')) && (_p1._1._0.ctor === 'VConst')) && (_p1._1._1.ctor === '::')) && (_p1._1._1._0.ctor === 'VConst')) && (_p1._1._1._1.ctor === '[]')) {
				return _elm_lang$core$Maybe$Just(
					A5(_user$project$Lang$WPoint, _p1._1._0._1, _p1._0._0, _p1._1._1._0._1, _p1._0._1._0, val));
			} else {
				var _p3 = A2(
					_elm_lang$core$Maybe$map,
					function (_p2) {
						return function (_) {
							return _.t__;
						}(
							function (_) {
								return _.val;
							}(_p2));
					},
					_user$project$Types$valToMaybeType(val));
				if ((_p3.ctor === 'Just') && (_p3._0.ctor === 'TList')) {
					return _elm_lang$core$Maybe$Just(
						_user$project$Lang$WList(val));
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$ValWidgets$isSameWidgetType = F2(
	function (w1, w2) {
		var _p5 = {ctor: '_Tuple2', _0: w1, _1: w2};
		_v3_6:
		do {
			if (_p5.ctor === '_Tuple2') {
				switch (_p5._0.ctor) {
					case 'WIntSlider':
						if (_p5._1.ctor === 'WIntSlider') {
							return true;
						} else {
							break _v3_6;
						}
					case 'WNumSlider':
						if (_p5._1.ctor === 'WNumSlider') {
							return true;
						} else {
							break _v3_6;
						}
					case 'WPoint':
						if (_p5._1.ctor === 'WPoint') {
							return true;
						} else {
							break _v3_6;
						}
					case 'WOffset1D':
						if (_p5._1.ctor === 'WOffset1D') {
							return true;
						} else {
							break _v3_6;
						}
					case 'WCall':
						if (_p5._1.ctor === 'WCall') {
							return true;
						} else {
							break _v3_6;
						}
					default:
						if (_p5._1.ctor === 'WList') {
							return true;
						} else {
							break _v3_6;
						}
				}
			} else {
				break _v3_6;
			}
		} while(false);
		return false;
	});
var _user$project$ValWidgets$widgetsSameForPostprocessingRemoval = F2(
	function (widget1, widget2) {
		var _p6 = {ctor: '_Tuple2', _0: widget1, _1: widget2};
		_v4_6:
		do {
			if (_p6.ctor === '_Tuple2') {
				switch (_p6._0.ctor) {
					case 'WIntSlider':
						if (_p6._1.ctor === 'WIntSlider') {
							return _elm_lang$core$Native_Utils.eq(_p6._0._5, _p6._1._5);
						} else {
							break _v4_6;
						}
					case 'WNumSlider':
						if (_p6._1.ctor === 'WNumSlider') {
							return _elm_lang$core$Native_Utils.eq(_p6._0._5, _p6._1._5);
						} else {
							break _v4_6;
						}
					case 'WPoint':
						if (_p6._1.ctor === 'WPoint') {
							return _elm_lang$core$Native_Utils.eq(_p6._0._0, _p6._1._0) && (A2(_user$project$Provenance$valEqFast, _p6._0._1, _p6._1._1) && (_elm_lang$core$Native_Utils.eq(_p6._0._2, _p6._1._2) && (A2(_user$project$Provenance$valEqFast, _p6._0._3, _p6._1._3) && A2(_user$project$Provenance$valEqFast, _p6._0._4, _p6._1._4))));
						} else {
							break _v4_6;
						}
					case 'WOffset1D':
						if (_p6._1.ctor === 'WOffset1D') {
							return _elm_lang$core$Native_Utils.eq(_p6._0._0, _p6._1._0) && (_elm_lang$core$Native_Utils.eq(_p6._0._1, _p6._1._1) && (_elm_lang$core$Native_Utils.eq(_p6._0._2, _p6._1._2) && (_elm_lang$core$Native_Utils.eq(_p6._0._3, _p6._1._3) && (_elm_lang$core$Native_Utils.eq(_p6._0._4, _p6._1._4) && (A2(_user$project$Provenance$valEqFast, _p6._0._5, _p6._1._5) && (A2(_user$project$Provenance$valEqFast, _p6._0._6, _p6._1._6) && A2(_user$project$Provenance$valEqFast, _p6._0._7, _p6._1._7)))))));
						} else {
							break _v4_6;
						}
					case 'WCall':
						if (_p6._1.ctor === 'WCall') {
							return _elm_lang$core$Native_Utils.eq(_p6._0._0, _p6._1._0) && (A2(_user$project$Provenance$valEqFast, _p6._0._1, _p6._1._1) && (_user$project$Utils$allTrue(
								A3(_elm_lang$core$List$map2, _user$project$Provenance$valEqFast, _p6._0._2, _p6._1._2)) && (A2(_user$project$Provenance$valEqFast, _p6._0._3, _p6._1._3) && _user$project$Utils$allTrue(
								A3(_elm_lang$core$List$map2, _user$project$ValWidgets$widgetsSameForPostprocessingRemoval, _p6._0._4, _p6._1._4)))));
						} else {
							break _v4_6;
						}
					default:
						if (_p6._1.ctor === 'WList') {
							return A2(_user$project$Provenance$valEqFast, _p6._0._0, _p6._1._0);
						} else {
							break _v4_6;
						}
				}
			} else {
				break _v4_6;
			}
		} while(false);
		return false;
	});
var _user$project$ValWidgets$widgetToMaybeVal = function (widget) {
	var _p7 = widget;
	switch (_p7.ctor) {
		case 'WIntSlider':
			return _elm_lang$core$Maybe$Just(_p7._4);
		case 'WNumSlider':
			return _elm_lang$core$Maybe$Just(_p7._4);
		case 'WPoint':
			return _elm_lang$core$Maybe$Just(_p7._4);
		case 'WOffset1D':
			return _elm_lang$core$Maybe$Just(_p7._5);
		case 'WCall':
			return _elm_lang$core$Maybe$Nothing;
		default:
			return _elm_lang$core$Maybe$Just(_p7._0);
	}
};

var _user$project$Eval$btString = F2(
	function (syntax, bt) {
		var _p0 = bt;
		if (_p0.ctor === '[]') {
			return '';
		} else {
			var singleLineExpStrs = A2(
				_elm_lang$core$String$join,
				'\n',
				_elm_lang$core$List$reverse(
					A2(
						_elm_lang$core$List$map,
						function (_p1) {
							return _user$project$Utils$head_(
								_elm_lang$core$String$lines(
									_elm_lang$core$String$trimLeft(
										A2(_user$project$Syntax$unparser, syntax, _p1))));
						},
						_p0._1)));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				singleLineExpStrs,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\n',
					A2(_user$project$Syntax$unparser, syntax, _p0._0)));
		}
	});
var _user$project$Eval$errorWithBacktrace = F3(
	function (syntax, bt, message) {
		return _user$project$Lang$errorMsg(
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_user$project$Eval$btString, syntax, bt),
				A2(_elm_lang$core$Basics_ops['++'], '\n', message)));
	});
var _user$project$Eval$crashWithBacktrace = F3(
	function (syntax, bt, message) {
		return _user$project$Lang$crashWithMsg(
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_user$project$Eval$btString, syntax, bt),
				A2(_elm_lang$core$Basics_ops['++'], '\n', message)));
	});
var _user$project$Eval$postProcessWidgets = F2(
	function (program, widgets) {
		var dedupedWidgets = A3(
			_user$project$Utils$foldr,
			{ctor: '[]'},
			F2(
				function (widget, deduped) {
					return A2(
						_elm_lang$core$List$any,
						_user$project$ValWidgets$widgetsSameForPostprocessingRemoval(widget),
						deduped) ? deduped : {ctor: '::', _0: widget, _1: deduped};
				}),
			widgets);
		var _p2 = A2(
			_elm_lang$core$List$partition,
			function (widget) {
				var _p3 = widget;
				switch (_p3.ctor) {
					case 'WIntSlider':
						if (_p3._6 === false) {
							return true;
						} else {
							return false;
						}
					case 'WNumSlider':
						if (_p3._6 === false) {
							return true;
						} else {
							return false;
						}
					case 'WPoint':
						return false;
					case 'WOffset1D':
						return false;
					case 'WCall':
						return false;
					default:
						return false;
				}
			},
			dedupedWidgets);
		var rangeWidgets = _p2._0;
		var pointWidgets = _p2._1;
		var rangeWidgetsBetterDescriptions = A2(
			_elm_lang$core$List$map,
			function (widget) {
				var _p4 = widget;
				switch (_p4.ctor) {
					case 'WIntSlider':
						var _p5 = _p4._4;
						return A7(
							_user$project$Lang$WIntSlider,
							_p4._0,
							_p4._1,
							A3(
								_user$project$LangTools$expNameForEIdWithDefault,
								_p4._2,
								program,
								_user$project$Lang$valExp(_p5).val.eid),
							_p4._3,
							_p5,
							_p4._5,
							_p4._6);
					case 'WNumSlider':
						var _p6 = _p4._4;
						return A7(
							_user$project$Lang$WNumSlider,
							_p4._0,
							_p4._1,
							A3(
								_user$project$LangTools$expNameForEIdWithDefault,
								_p4._2,
								program,
								_user$project$Lang$valExp(_p6).val.eid),
							_p4._3,
							_p6,
							_p4._5,
							_p4._6);
					default:
						return widget;
				}
			},
			rangeWidgets);
		return A2(_elm_lang$core$Basics_ops['++'], rangeWidgetsBetterDescriptions, pointWidgets);
	});
var _user$project$Eval$addSubsumingPriorWidgets = F2(
	function (widget, widgets) {
		var _p7 = _user$project$ValWidgets$widgetToMaybeVal(widget);
		if (_p7.ctor === 'Just') {
			var priorValsToRemove = _user$project$Provenance$valToSameVals(_p7._0);
			var wsSamePointSubsumed = A2(
				_elm_lang$core$List$filter,
				function (priorWidget) {
					var _p8 = _user$project$ValWidgets$widgetToMaybeVal(priorWidget);
					if (_p8.ctor === 'Just') {
						return !(A2(_user$project$ValWidgets$isSameWidgetType, widget, priorWidget) && A2(_elm_lang$core$List$member, _p8._0, priorValsToRemove));
					} else {
						return true;
					}
				},
				widgets);
			return A2(
				_elm_lang$core$Basics_ops['++'],
				wsSamePointSubsumed,
				{
					ctor: '::',
					_0: widget,
					_1: {ctor: '[]'}
				});
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				widgets,
				{
					ctor: '::',
					_0: widget,
					_1: {ctor: '[]'}
				});
		}
	});
var _user$project$Eval$valToDictKey = F3(
	function (syntax, bt, val_) {
		var _p9 = val_;
		_v5_5:
		do {
			switch (_p9.ctor) {
				case 'VConst':
					if (_p9._1.ctor === '_Tuple2') {
						return _elm_lang$core$Result$Ok(
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Basics$toString(_p9._1._0),
								_1: 'num'
							});
					} else {
						break _v5_5;
					}
				case 'VBase':
					switch (_p9._0.ctor) {
						case 'VBool':
							return _elm_lang$core$Result$Ok(
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Basics$toString(_p9._0._0),
									_1: 'bool'
								});
						case 'VString':
							return _elm_lang$core$Result$Ok(
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Basics$toString(_p9._0._0),
									_1: 'string'
								});
						default:
							return _elm_lang$core$Result$Ok(
								{ctor: '_Tuple2', _0: '', _1: 'null'});
					}
				case 'VList':
					return A2(
						_elm_lang$core$Result$map,
						function (keyStrings) {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Basics$toString(keyStrings),
								_1: 'list'
							};
						},
						_user$project$Utils$projOk(
							A2(
								_elm_lang$core$List$map,
								function (_p10) {
									return A3(
										_user$project$Eval$valToDictKey,
										syntax,
										bt,
										function (_) {
											return _.v_;
										}(_p10));
								},
								_p9._0)));
				default:
					break _v5_5;
			}
		} while(false);
		return A3(
			_user$project$Eval$errorWithBacktrace,
			syntax,
			bt,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Cannot use ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$ValUnparser$strVal(
						{
							v_: val_,
							provenance: _user$project$Lang$dummyProvenance,
							parents: _user$project$Lang$Parents(
								{ctor: '[]'})
						}),
					' in a key to a dictionary.')));
	});
var _user$project$Eval$eBaseToVBase = function (eBaseVal) {
	var _p11 = eBaseVal;
	switch (_p11.ctor) {
		case 'EBool':
			return _user$project$Lang$VBool(_p11._0);
		case 'EString':
			return _user$project$Lang$VString(_p11._1);
		default:
			return _user$project$Lang$VNull;
	}
};
var _user$project$Eval$recursionLimit = 100;
var _user$project$Eval$evalDelta = F4(
	function (syntax, bt, op, is) {
		var _p12 = A2(_user$project$Lang$maybeEvalMathOp, op, is);
		if (_p12.ctor === 'Just') {
			return _p12._0;
		} else {
			return A3(
				_user$project$Eval$crashWithBacktrace,
				syntax,
				bt,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Little evaluator bug: Eval.evalDelta ',
					_user$project$ValUnparser$strOp(op)));
		}
	});
var _user$project$Eval$runUntilTheEnd = _elm_lang$core$Basics$always(false);
var _user$project$Eval$mkCap = F2(
	function (mcap, l) {
		var s = function () {
			var _p13 = {ctor: '_Tuple2', _0: mcap, _1: l};
			if (_p13._0.ctor === 'Just') {
				return _p13._0._0.val;
			} else {
				if (_p13._1._2 === '') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'k',
						_elm_lang$core$Basics$toString(_p13._1._0));
				} else {
					return _p13._1._2;
				}
			}
		}();
		return s;
	});
var _user$project$Eval$lookupVar = F5(
	function (syntax, env, bt, x, pos) {
		var _p14 = A2(_user$project$Utils$maybeFind, x, env);
		if (_p14.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p14._0);
		} else {
			return A3(
				_user$project$Eval$errorWithBacktrace,
				syntax,
				bt,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Lang$strPos(pos),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' variable not found: ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							x,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\nVariables in scope: ',
								A2(
									_elm_lang$core$String$join,
									' ',
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, env)))))));
		}
	});
var _user$project$Eval$match = function (_p15) {
	match:
	while (true) {
		var _p16 = _p15;
		var _p25 = _p16._1;
		var _p24 = _p16._0;
		var _p17 = {ctor: '_Tuple2', _0: _p24.val.p__, _1: _p25.v_};
		_v11_9:
		do {
			_v11_5:
			do {
				if (_p17.ctor === '_Tuple2') {
					switch (_p17._0.ctor) {
						case 'PWildcard':
							return _elm_lang$core$Maybe$Just(
								{ctor: '[]'});
						case 'PVar':
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p17._0._1, _1: _p25},
									_1: {ctor: '[]'}
								});
						case 'PAs':
							var _p18 = _user$project$Eval$match(
								{ctor: '_Tuple2', _0: _p17._0._3, _1: _p25});
							if (_p18.ctor === 'Just') {
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p17._0._1, _1: _p25},
										_1: _p18._0
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						case 'PList':
							if (_p17._0._3.ctor === 'Nothing') {
								if (_p17._1.ctor === 'VList') {
									return A2(
										_user$project$Utils$bindMaybe,
										_user$project$Eval$matchList,
										A2(_user$project$Utils$maybeZip, _p17._0._1, _p17._1._0));
								} else {
									break _v11_5;
								}
							} else {
								if (_p17._1.ctor === 'VList') {
									var _p22 = _p17._1._0;
									var _p21 = _p17._0._1;
									var _p19 = {
										ctor: '_Tuple2',
										_0: _elm_lang$core$List$length(_p21),
										_1: _elm_lang$core$List$length(_p22)
									};
									var n = _p19._0;
									var m = _p19._1;
									if (_elm_lang$core$Native_Utils.cmp(n, m) > 0) {
										return _elm_lang$core$Maybe$Nothing;
									} else {
										var _p20 = A2(_user$project$Utils$split, n, _p22);
										var vs1 = _p20._0;
										var vs2 = _p20._1;
										var vRest = {
											v_: _user$project$Lang$VList(vs2),
											provenance: A2(
												_user$project$Lang$Provenance,
												A2(
													_user$project$Lang$eApp,
													_user$project$Lang$eVar0('drop'),
													{
														ctor: '::',
														_0: _user$project$Lang$provenanceExp(_p25.provenance),
														_1: {
															ctor: '::',
															_0: _user$project$Lang$eConstDummyLoc(
																_elm_lang$core$Basics$toFloat(n)),
															_1: {ctor: '[]'}
														}
													}),
												{
													ctor: '::',
													_0: _p25,
													_1: {ctor: '[]'}
												}),
											parents: _user$project$Lang$Parents(
												{ctor: '[]'})
										};
										return A2(
											_user$project$Eval$cons,
											{ctor: '_Tuple2', _0: _p17._0._3._0, _1: vRest},
											_user$project$Eval$matchList(
												A2(_user$project$Utils$zip, _p21, vs1)));
									}
								} else {
									break _v11_5;
								}
							}
						case 'PConst':
							if ((_p17._1.ctor === 'VConst') && (_p17._1._1.ctor === '_Tuple2')) {
								return _elm_lang$core$Native_Utils.eq(_p17._0._1, _p17._1._1._0) ? _elm_lang$core$Maybe$Just(
									{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v11_9;
							}
						case 'PBase':
							if (_p17._1.ctor === 'VBase') {
								return _elm_lang$core$Native_Utils.eq(
									_user$project$Eval$eBaseToVBase(_p17._0._1),
									_p17._1._0) ? _elm_lang$core$Maybe$Just(
									{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
							} else {
								break _v11_9;
							}
						default:
							var _v13 = {ctor: '_Tuple2', _0: _p17._0._1, _1: _p25};
							_p15 = _v13;
							continue match;
					}
				} else {
					break _v11_9;
				}
			} while(false);
			return _elm_lang$core$Maybe$Nothing;
		} while(false);
		return _elm_lang$core$Native_Utils.crashCase(
			'Eval',
			{
				start: {line: 24, column: 15},
				end: {line: 50, column: 111}
			},
			_p17)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Little evaluator bug: Eval.match ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p24.val.p__),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' vs ',
						_elm_lang$core$Basics$toString(_p25.v_)))));
	}
};
var _user$project$Eval$cons = F2(
	function (pv, menv) {
		var _p26 = {
			ctor: '_Tuple2',
			_0: menv,
			_1: _user$project$Eval$match(pv)
		};
		if (((_p26.ctor === '_Tuple2') && (_p26._0.ctor === 'Just')) && (_p26._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], _p26._1._0, _p26._0._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Eval$matchList = function (pvs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (pv, acc) {
				var _p27 = {
					ctor: '_Tuple2',
					_0: acc,
					_1: _user$project$Eval$match(pv)
				};
				if (((_p27.ctor === '_Tuple2') && (_p27._0.ctor === 'Just')) && (_p27._1.ctor === 'Just')) {
					return _elm_lang$core$Maybe$Just(
						A2(_elm_lang$core$Basics_ops['++'], _p27._1._0, _p27._0._0));
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}),
		_elm_lang$core$Maybe$Just(
			{ctor: '[]'}),
		pvs);
};
var _user$project$Eval$PBEHolesSeenRefCell = function (a) {
	return {pbeHolesSeen: a};
};
var _user$project$Eval$EarlyAbort = function (a) {
	return {ctor: 'EarlyAbort', _0: a};
};
var _user$project$Eval$eval = F8(
	function (showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt, pbeHolesSeenRefCell, e) {
		var makeProvenance = function (basedOn) {
			return A2(_user$project$Lang$Provenance, e, basedOn);
		};
		var addParent_ = F2(
			function (vParent, v) {
				var _p28 = function () {
					var _p29 = v.v_;
					switch (_p29.ctor) {
						case 'VConst':
							return {ctor: '_Tuple0'};
						case 'VBase':
							return {ctor: '_Tuple0'};
						case 'VClosure':
							return {ctor: '_Tuple0'};
						case 'VList':
							var _p30 = A2(
								_elm_lang$core$List$map,
								addParent_(vParent),
								_p29._0);
							return {ctor: '_Tuple0'};
						default:
							var _p31 = A2(
								_elm_lang$core$Dict$map,
								F2(
									function (_p32, val) {
										return A2(addParent_, vParent, val);
									}),
								_p29._0);
							return {ctor: '_Tuple0'};
					}
				}();
				var priorParents = _user$project$Lang$valParents(v);
				var _p33 = A3(
					_user$project$ImpureGoodies$mutateRecordField,
					v.parents,
					'_0',
					{ctor: '::', _0: vParent, _1: priorParents});
				return {ctor: '_Tuple0'};
			});
		var addParent = function (v) {
			if (_user$project$FastParser$isProgramEId(e.val.eid)) {
				var _p34 = v.v_;
				switch (_p34.ctor) {
					case 'VConst':
						return v;
					case 'VBase':
						return v;
					case 'VClosure':
						return v;
					case 'VList':
						var _p35 = A2(
							_elm_lang$core$List$map,
							addParent_(v),
							_p34._0);
						return v;
					default:
						var _p36 = A2(
							_elm_lang$core$Dict$map,
							F2(
								function (_p37, val) {
									return A2(addParent_, v, val);
								}),
							_p34._0);
						return v;
				}
			} else {
				return v;
			}
		};
		var retEnv = function (deeperRetEnv) {
			return _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$Maybe$Just(e.val.eid),
				maybeRetEnvEId) ? _elm_lang$core$Maybe$Just(env) : deeperRetEnv;
		};
		var retEnvHere = retEnv(_elm_lang$core$Maybe$Nothing);
		var introduceVal = F2(
			function (basedOn, v_) {
				return addParent(
					A3(
						_user$project$Lang$Val,
						v_,
						makeProvenance(basedOn),
						_user$project$Lang$Parents(
							{ctor: '[]'})));
			});
		var retBoth = F3(
			function (basedOn, _p38, deeperRetEnv) {
				var _p39 = _p38;
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: A2(introduceVal, basedOn, _p39._0),
						_1: _p39._1
					},
					_1: retEnv(deeperRetEnv)
				};
			});
		var ret = F2(
			function (basedOn, v_) {
				return A3(
					retBoth,
					basedOn,
					{
						ctor: '_Tuple2',
						_0: v_,
						_1: {ctor: '[]'}
					},
					_elm_lang$core$Maybe$Nothing);
			});
		var retV = F2(
			function (basedOn, v) {
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: addParent(
							_elm_lang$core$Native_Utils.update(
								v,
								{
									provenance: makeProvenance(basedOn)
								})),
						_1: {ctor: '[]'}
					},
					_1: retEnvHere
				};
			});
		var retVBoth = F3(
			function (basedOn, _p40, deeperRetEnv) {
				var _p41 = _p40;
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: addParent(
							_elm_lang$core$Native_Utils.update(
								_p41._0,
								{
									provenance: makeProvenance(basedOn)
								})),
						_1: _p41._1
					},
					_1: retEnv(deeperRetEnv)
				};
			});
		var addParentToRet = function (_p42) {
			var _p43 = _p42;
			return {
				ctor: '_Tuple2',
				_0: {
					ctor: '_Tuple2',
					_0: addParent(_p43._0._0),
					_1: _p43._0._1
				},
				_1: _p43._1
			};
		};
		var addProvenanceToRet = F2(
			function (basedOn, _p44) {
				var _p45 = _p44;
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: addParent(
							_elm_lang$core$Native_Utils.update(
								_p45._0._0,
								{
									provenance: makeProvenance(basedOn)
								})),
						_1: _p45._0._1
					},
					_1: _p45._1
				};
			});
		var addWidgets = F2(
			function (ws1, _p46) {
				var _p47 = _p46;
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _p47._0._0,
						_1: A2(_elm_lang$core$Basics_ops['++'], ws1, _p47._0._1)
					},
					_1: _p47._1
				};
			});
		var attachEarlierRetEnv = F2(
			function (earlierRetEnv, _p48) {
				var _p49 = _p48;
				return {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: _p49._0._0, _1: _p49._0._1},
					_1: A2(_user$project$Utils$orMaybe, _p49._1, earlierRetEnv)
				};
			});
		var attachLaterRetEnv = F2(
			function (laterRetEnv, _p50) {
				var _p51 = _p50;
				return {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: _p51._0._0, _1: _p51._0._1},
					_1: A2(_user$project$Utils$orMaybe, laterRetEnv, _p51._1)
				};
			});
		var bt_ = (_elm_lang$core$Native_Utils.cmp(e.start.line, 1) > -1) ? {ctor: '::', _0: e, _1: bt} : bt;
		var recurse = A7(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt_, pbeHolesSeenRefCell);
		return function (ret) {
			return abortPred(e) ? _user$project$ImpureGoodies$throw(
				_user$project$Eval$EarlyAbort(ret)) : ret;
		}(
			A2(
				_elm_lang$core$Result$map,
				function (_p52) {
					var _p53 = _p52;
					var _p57 = _p53._0._0;
					var _p56 = _p53;
					var maybeOp = function () {
						var _p54 = e.val.e__;
						if (_p54.ctor === 'EOp') {
							return _elm_lang$core$Maybe$Just(_p54._1.val);
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}();
					var _p55 = {
						ctor: '_Tuple3',
						_0: _user$project$ValWidgets$valToMaybeWidget(_p57),
						_1: _user$project$FastParser$isProgramEId(e.val.eid),
						_2: maybeOp
					};
					_v27_2:
					do {
						if (_p55.ctor === '_Tuple3') {
							if ((_p55._2.ctor === 'Just') && (_p55._2._0.ctor === 'NoWidgets')) {
								return _p56;
							} else {
								if ((_p55._0.ctor === 'Just') && (_p55._1 === true)) {
									return {
										ctor: '_Tuple2',
										_0: {
											ctor: '_Tuple2',
											_0: _p57,
											_1: A2(_user$project$Eval$addSubsumingPriorWidgets, _p55._0._0, _p53._0._1)
										},
										_1: _p53._1
									};
								} else {
									break _v27_2;
								}
							}
						} else {
							break _v27_2;
						}
					} while(false);
					return _p56;
				},
				function () {
					var _p58 = e.val.e__;
					switch (_p58.ctor) {
						case 'EConst':
							var _p61 = _p58._1;
							var _p60 = _p58._2;
							var v_ = A2(
								_user$project$Lang$VConst,
								_elm_lang$core$Maybe$Nothing,
								{
									ctor: '_Tuple2',
									_0: _p61,
									_1: _user$project$Lang$MathVar(_p58._2._0)
								});
							var retVal = A2(
								introduceVal,
								{ctor: '[]'},
								v_);
							var _p59 = _p58._3.val;
							switch (_p59.ctor) {
								case 'NoWidgetDecl':
									return _elm_lang$core$Result$Ok(
										{
											ctor: '_Tuple2',
											_0: {
												ctor: '_Tuple2',
												_0: retVal,
												_1: {ctor: '[]'}
											},
											_1: retEnvHere
										});
								case 'IntSlider':
									var widget = A7(
										_user$project$Lang$WIntSlider,
										_p59._0.val,
										_p59._2.val,
										A2(_user$project$Eval$mkCap, _p59._3, _p60),
										_elm_lang$core$Basics$floor(_p61),
										retVal,
										_p60,
										_p59._4);
									return _elm_lang$core$Result$Ok(
										{
											ctor: '_Tuple2',
											_0: {
												ctor: '_Tuple2',
												_0: retVal,
												_1: {
													ctor: '::',
													_0: widget,
													_1: {ctor: '[]'}
												}
											},
											_1: retEnvHere
										});
								default:
									var widget = A7(
										_user$project$Lang$WNumSlider,
										_p59._0.val,
										_p59._2.val,
										A2(_user$project$Eval$mkCap, _p59._3, _p60),
										_p61,
										retVal,
										_p60,
										_p59._4);
									return _elm_lang$core$Result$Ok(
										{
											ctor: '_Tuple2',
											_0: {
												ctor: '_Tuple2',
												_0: retVal,
												_1: {
													ctor: '::',
													_0: widget,
													_1: {ctor: '[]'}
												}
											},
											_1: retEnvHere
										});
							}
						case 'EBase':
							return _elm_lang$core$Result$Ok(
								A2(
									ret,
									{ctor: '[]'},
									_user$project$Lang$VBase(
										_user$project$Eval$eBaseToVBase(_p58._1))));
						case 'EVar':
							return A2(
								_elm_lang$core$Result$map,
								function (v) {
									return A2(
										retV,
										{
											ctor: '::',
											_0: v,
											_1: {ctor: '[]'}
										},
										v);
								},
								A5(
									_user$project$Eval$lookupVar,
									syntax,
									env,
									{ctor: '::', _0: e, _1: bt},
									_p58._1,
									e.start));
						case 'EFun':
							return _elm_lang$core$Result$Ok(
								A2(
									ret,
									{ctor: '[]'},
									A4(_user$project$Lang$VClosure, _elm_lang$core$Maybe$Nothing, _p58._1, _p58._2, env)));
						case 'EOp':
							return A2(
								_elm_lang$core$Result$map,
								function (_p62) {
									var _p63 = _p62;
									return addParentToRet(
										{
											ctor: '_Tuple2',
											_0: _p63._0,
											_1: retEnv(_p63._1)
										});
								},
								_user$project$Eval$evalOp(showPreludeOffsets)(maybeRetEnvEId)(abortPred)(syntax)(env)(e)(
									{ctor: '::', _0: e, _1: bt})(pbeHolesSeenRefCell)(_p58._1)(_p58._2));
						case 'EList':
							var _p64 = _user$project$Utils$projOk(
								A2(
									_elm_lang$core$List$map,
									recurse,
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p58._1)));
							if (_p64.ctor === 'Err') {
								return _elm_lang$core$Result$Err(_p64._0);
							} else {
								var _p65 = _elm_lang$core$List$unzip(_p64._0);
								var vws = _p65._0;
								var deeperRetEnvs = _p65._1;
								var deeperRetEnv = A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Maybe$Nothing,
									A2(
										_user$project$Utils$findLast,
										F2(
											function (x, y) {
												return !_elm_lang$core$Native_Utils.eq(x, y);
											})(_elm_lang$core$Maybe$Nothing),
										deeperRetEnvs));
								var _p66 = _elm_lang$core$List$unzip(vws);
								var vs = _p66._0;
								var wss = _p66._1;
								var ws = _elm_lang$core$List$concat(wss);
								var _p67 = {ctor: '_Tuple3', _0: _p58._3, _1: vs, _2: true};
								if (_p67._0.ctor === 'Nothing') {
									if ((((_p67._1.ctor === '::') && (_p67._1._1.ctor === '::')) && (_p67._1._1._1.ctor === '[]')) && (_p67._2 === true)) {
										var _p73 = _p67._1._1._0;
										var _p72 = _p67._1._0;
										var _p68 = {ctor: '_Tuple2', _0: _p72.v_, _1: _p73.v_};
										if (((_p68.ctor === '_Tuple2') && (_p68._0.ctor === 'VConst')) && (_p68._1.ctor === 'VConst')) {
											var _p71 = _p68._1._1;
											var _p70 = _p68._0._1;
											var coordinateInfo1 = {ctor: '_Tuple3', _0: _user$project$Lang$X, _1: _p71, _2: _p73};
											var taggedV1 = _elm_lang$core$Native_Utils.update(
												_p72,
												{
													v_: A2(
														_user$project$Lang$VConst,
														_elm_lang$core$Maybe$Just(coordinateInfo1),
														_p70)
												});
											var taggedV2 = _elm_lang$core$Native_Utils.update(
												_p73,
												{
													v_: A2(
														_user$project$Lang$VConst,
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple3', _0: _user$project$Lang$Y, _1: _p70, _2: taggedV1}),
														_p71)
												});
											var _p69 = A3(_user$project$ImpureGoodies$mutateRecordField, coordinateInfo1, '_2', taggedV2);
											return _elm_lang$core$Result$Ok(
												A3(
													retBoth,
													vs,
													{
														ctor: '_Tuple2',
														_0: _user$project$Lang$VList(
															{
																ctor: '::',
																_0: taggedV1,
																_1: {
																	ctor: '::',
																	_0: taggedV2,
																	_1: {ctor: '[]'}
																}
															}),
														_1: ws
													},
													deeperRetEnv));
										} else {
											return _elm_lang$core$Result$Ok(
												A3(
													retBoth,
													vs,
													{
														ctor: '_Tuple2',
														_0: _user$project$Lang$VList(vs),
														_1: ws
													},
													deeperRetEnv));
										}
									} else {
										return _elm_lang$core$Result$Ok(
											A3(
												retBoth,
												vs,
												{
													ctor: '_Tuple2',
													_0: _user$project$Lang$VList(vs),
													_1: ws
												},
												deeperRetEnv));
									}
								} else {
									var _p77 = _p67._0._0;
									var _p74 = recurse(_p77);
									if (_p74.ctor === 'Err') {
										return _elm_lang$core$Result$Err(_p74._0);
									} else {
										var _p76 = _p74._0._0._0;
										var _p75 = _p76.v_;
										if (_p75.ctor === 'VList') {
											return _elm_lang$core$Result$Ok(
												A3(
													retBoth,
													A2(
														_elm_lang$core$Basics_ops['++'],
														vs,
														{
															ctor: '::',
															_0: _p76,
															_1: {ctor: '[]'}
														}),
													{
														ctor: '_Tuple2',
														_0: _user$project$Lang$VList(
															A2(_elm_lang$core$Basics_ops['++'], vs, _p75._0)),
														_1: A2(_elm_lang$core$Basics_ops['++'], ws, _p74._0._0._1)
													},
													A2(_user$project$Utils$orMaybe, _p74._0._1, deeperRetEnv)));
										} else {
											return A3(
												_user$project$Eval$errorWithBacktrace,
												syntax,
												{ctor: '::', _0: e, _1: bt},
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$Lang$strPos(_p77.start),
													' rest expression not a list.'));
										}
									}
								}
							}
						case 'EIf':
							var _p86 = _p58._1;
							var _p78 = recurse(_p86);
							if (_p78.ctor === 'Err') {
								return _elm_lang$core$Result$Err(_p78._0);
							} else {
								var _p85 = _p78._0._0._1;
								var _p84 = _p78._0._1;
								var _p79 = _p78._0._0._0.v_;
								if ((_p79.ctor === 'VBase') && (_p79._0.ctor === 'VBool')) {
									if (_p79._0._0 === true) {
										return A2(
											_elm_lang$core$Result$map,
											function (_p80) {
												var _p81 = _p80;
												return A2(
													attachLaterRetEnv,
													retEnvHere,
													A2(
														attachEarlierRetEnv,
														_p84,
														A2(
															addProvenanceToRet,
															{
																ctor: '::',
																_0: _p81._0._0,
																_1: {ctor: '[]'}
															},
															A2(addWidgets, _p85, _p81))));
											},
											recurse(_p58._3));
									} else {
										return A2(
											_elm_lang$core$Result$map,
											function (_p82) {
												var _p83 = _p82;
												return A2(
													attachLaterRetEnv,
													retEnvHere,
													A2(
														attachEarlierRetEnv,
														_p84,
														A2(
															addProvenanceToRet,
															{
																ctor: '::',
																_0: _p83._0._0,
																_1: {ctor: '[]'}
															},
															A2(addWidgets, _p85, _p83))));
											},
											recurse(_p58._5));
									}
								} else {
									return A3(
										_user$project$Eval$errorWithBacktrace,
										syntax,
										{ctor: '::', _0: e, _1: bt},
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Lang$strPos(_p86.start),
											' if-exp expected a Bool but got something else.'));
								}
							}
						case 'ECase':
							var _p90 = _p58._1;
							var _p87 = recurse(_p90);
							if (_p87.ctor === 'Err') {
								return _elm_lang$core$Result$Err(_p87._0);
							} else {
								var _p88 = A9(_user$project$Eval$evalBranches, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt_, pbeHolesSeenRefCell, _p87._0._0._0, _p58._2);
								if (_p88.ctor === 'Ok') {
									if (((_p88._0.ctor === 'Just') && (_p88._0._0.ctor === '_Tuple2')) && (_p88._0._0._0.ctor === '_Tuple2')) {
										var _p89 = _p88._0._0._0._0;
										return _elm_lang$core$Result$Ok(
											A3(
												retVBoth,
												{
													ctor: '::',
													_0: _p89,
													_1: {ctor: '[]'}
												},
												{
													ctor: '_Tuple2',
													_0: _p89,
													_1: A2(_elm_lang$core$Basics_ops['++'], _p87._0._0._1, _p88._0._0._0._1)
												},
												A2(_user$project$Utils$orMaybe, _p88._0._0._1, _p87._0._1)));
									} else {
										return A3(
											_user$project$Eval$errorWithBacktrace,
											syntax,
											{ctor: '::', _0: e, _1: bt},
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Lang$strPos(_p90.start),
												' non-exhaustive case statement'));
									}
								} else {
									return _elm_lang$core$Result$Err(_p88._0);
								}
							}
						case 'ETypeCase':
							var _p94 = _p58._1;
							var _p91 = recurse(_p94);
							if (_p91.ctor === 'Err') {
								return _elm_lang$core$Result$Err(_p91._0);
							} else {
								var _p92 = A9(_user$project$Eval$evalTBranches, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt_, pbeHolesSeenRefCell, _p91._0._0._0, _p58._2);
								if (_p92.ctor === 'Ok') {
									if (((_p92._0.ctor === 'Just') && (_p92._0._0.ctor === '_Tuple2')) && (_p92._0._0._0.ctor === '_Tuple2')) {
										var _p93 = _p92._0._0._0._0;
										return _elm_lang$core$Result$Ok(
											A3(
												retVBoth,
												{
													ctor: '::',
													_0: _p93,
													_1: {ctor: '[]'}
												},
												{
													ctor: '_Tuple2',
													_0: _p93,
													_1: A2(_elm_lang$core$Basics_ops['++'], _p91._0._0._1, _p92._0._0._0._1)
												},
												A2(_user$project$Utils$orMaybe, _p92._0._0._1, _p91._0._1)));
									} else {
										return A3(
											_user$project$Eval$errorWithBacktrace,
											syntax,
											{ctor: '::', _0: e, _1: bt},
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Lang$strPos(_p94.start),
												' non-exhaustive typecase statement'));
									}
								} else {
									return _elm_lang$core$Result$Err(_p92._0);
								}
							}
						case 'EApp':
							if (_p58._2.ctor === '[]') {
								return A3(
									_user$project$Eval$errorWithBacktrace,
									syntax,
									{ctor: '::', _0: e, _1: bt},
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Lang$strPos(_p58._1.start),
										' application with no arguments'));
							} else {
								var _p107 = _p58._2;
								var _p106 = _p58._1;
								var _p95 = recurse(_p106);
								if (_p95.ctor === 'Err') {
									return _elm_lang$core$Result$Err(_p95._0);
								} else {
									var _p105 = _p95._0._0._0;
									var _p96 = _p105.v_;
									if (_p96.ctor === 'VClosure') {
										var _p104 = _p96._1;
										var _p103 = _p96._2;
										var _p102 = _p96._3;
										var argValsAndFuncRes = function () {
											var _p97 = _p96._0;
											if (_p97.ctor === 'Nothing') {
												return _user$project$Eval$apply(showPreludeOffsets)(maybeRetEnvEId)(abortPred)(syntax)(env)(bt)(bt_)(pbeHolesSeenRefCell)(e)(_p104)(_p107)(_p103)(_p102);
											} else {
												return _user$project$Eval$apply(showPreludeOffsets)(maybeRetEnvEId)(abortPred)(syntax)(env)(bt)(bt_)(pbeHolesSeenRefCell)(e)(_p104)(_p107)(_p103)(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: _p97._0, _1: _p105},
														_1: _p102
													});
											}
										}();
										return A2(
											_elm_lang$core$Result$map,
											function (_p98) {
												var _p99 = _p98;
												var _p101 = _p99._1._0._1;
												var _p100 = _p99._1._0._0;
												var perhapsCallWidget = (_user$project$FastParser$isProgramEId(e.val.eid) && _user$project$FastParser$isProgramEId(_p103.val.eid)) ? {
													ctor: '::',
													_0: A5(_user$project$Lang$WCall, e.val.eid, _p105, _p99._0, _p100, _p101),
													_1: {ctor: '[]'}
												} : {ctor: '[]'};
												var perhapsPointWidgetsFromPrelude = (_user$project$FastParser$isProgramEId(e.val.eid) && _user$project$FastParser$isPreludeEId(_p103.val.eid)) ? A2(
													_elm_lang$core$List$filter,
													_user$project$Lang$isPointWidget,
													A2(
														_elm_lang$core$List$filterMap,
														_user$project$ValWidgets$valToMaybeWidget,
														A2(
															_elm_lang$core$Maybe$withDefault,
															{ctor: '[]'},
															_user$project$Lang$vListToMaybeVals(_p100)))) : {ctor: '[]'};
												return A3(
													retVBoth,
													{
														ctor: '::',
														_0: _p100,
														_1: {ctor: '[]'}
													},
													{
														ctor: '_Tuple2',
														_0: _p100,
														_1: A2(
															_elm_lang$core$Basics_ops['++'],
															perhapsPointWidgetsFromPrelude,
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p95._0._0._1,
																A2(_elm_lang$core$Basics_ops['++'], _p101, perhapsCallWidget)))
													},
													A2(_user$project$Utils$orMaybe, _p99._1._1, _p95._0._1));
											},
											argValsAndFuncRes);
									} else {
										return A3(
											_user$project$Eval$errorWithBacktrace,
											syntax,
											{ctor: '::', _0: e, _1: bt},
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Lang$strPos(_p106.start),
												' not a function'));
									}
								}
							}
						case 'ELet':
							if (_p58._2 === false) {
								var _p113 = _p58._3;
								var _p108 = recurse(_p58._5);
								if (_p108.ctor === 'Err') {
									return _elm_lang$core$Result$Err(_p108._0);
								} else {
									var _p112 = _p108._0._0._0;
									var _p109 = A2(
										_user$project$Eval$cons,
										{ctor: '_Tuple2', _0: _p113, _1: _p112},
										_elm_lang$core$Maybe$Just(env));
									if (_p109.ctor === 'Just') {
										return A2(
											_elm_lang$core$Result$map,
											function (_p110) {
												return A2(
													attachLaterRetEnv,
													retEnvHere,
													A2(
														attachEarlierRetEnv,
														_p108._0._1,
														A2(addWidgets, _p108._0._0._1, _p110)));
											},
											A8(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, _p109._0, bt_, pbeHolesSeenRefCell, _p58._7));
									} else {
										return A3(
											_user$project$Eval$errorWithBacktrace,
											syntax,
											{ctor: '::', _0: e, _1: bt},
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Lang$strPos(e.start),
												A2(
													_elm_lang$core$Basics_ops['++'],
													' could not match pattern ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														function (_p111) {
															return _user$project$Utils$squish(
																A2(_user$project$Syntax$patternUnparser, syntax, _p111));
														}(_p113),
														A2(
															_elm_lang$core$Basics_ops['++'],
															' with ',
															_user$project$ValUnparser$strVal(_p112))))));
									}
								}
							} else {
								var _p121 = _p58._5;
								var _p114 = recurse(_p121);
								if (_p114.ctor === 'Err') {
									return _elm_lang$core$Result$Err(_p114._0);
								} else {
									var _p120 = _p114._0._0._0;
									var _p115 = {
										ctor: '_Tuple2',
										_0: _user$project$Lang$patEffectivePat(_p58._3).val.p__,
										_1: _p120.v_
									};
									_v51_2:
									do {
										if (_p115.ctor === '_Tuple2') {
											switch (_p115._0.ctor) {
												case 'PVar':
													if ((_p115._1.ctor === 'VClosure') && (_p115._1._0.ctor === 'Nothing')) {
														var _p119 = _p115._0._1;
														var _p116 = A2(
															_user$project$Utils$assert,
															'eval letrec',
															_elm_lang$core$Native_Utils.eq(env, _p115._1._3));
														var v1Named = _elm_lang$core$Native_Utils.update(
															_p120,
															{
																v_: A4(
																	_user$project$Lang$VClosure,
																	_elm_lang$core$Maybe$Just(_p119),
																	_p115._1._1,
																	_p115._1._2,
																	env)
															});
														var _p117 = A2(
															_user$project$Eval$cons,
															{
																ctor: '_Tuple2',
																_0: _user$project$Lang$pVar(_p119),
																_1: v1Named
															},
															_elm_lang$core$Maybe$Just(env));
														if (_p117.ctor === 'Just') {
															return A2(
																_elm_lang$core$Result$map,
																function (_p118) {
																	return A2(
																		attachLaterRetEnv,
																		retEnvHere,
																		A2(
																			attachEarlierRetEnv,
																			_p114._0._1,
																			A2(addWidgets, _p114._0._0._1, _p118)));
																},
																A8(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, _p117._0, bt_, pbeHolesSeenRefCell, _p58._7));
														} else {
															return A3(
																_user$project$Eval$errorWithBacktrace,
																syntax,
																{ctor: '::', _0: e, _1: bt},
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_user$project$Lang$strPos(e.start),
																	'bad ELet'));
														}
													} else {
														break _v51_2;
													}
												case 'PList':
													return A3(
														_user$project$Eval$errorWithBacktrace,
														syntax,
														{ctor: '::', _0: e, _1: bt},
														A2(
															_elm_lang$core$Basics_ops['++'],
															_user$project$Lang$strPos(_p121.start),
															'mutually recursive functions (i.e. letrec [...] [...] e) \\n                 not yet implemented'));
												default:
													break _v51_2;
											}
										} else {
											break _v51_2;
										}
									} while(false);
									return A3(
										_user$project$Eval$errorWithBacktrace,
										syntax,
										{ctor: '::', _0: e, _1: bt},
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Lang$strPos(e.start),
											' bad letrec'));
								}
							}
						case 'EColonType':
							return A2(
								_elm_lang$core$Result$map,
								attachEarlierRetEnv(retEnvHere),
								recurse(_p58._1));
						case 'EComment':
							return A2(
								_elm_lang$core$Result$map,
								attachEarlierRetEnv(retEnvHere),
								recurse(_p58._2));
						case 'EOption':
							return A2(
								_elm_lang$core$Result$map,
								attachEarlierRetEnv(retEnvHere),
								recurse(_p58._4));
						case 'ETyp':
							return A2(
								_elm_lang$core$Result$map,
								attachEarlierRetEnv(retEnvHere),
								recurse(_p58._3));
						case 'ETypeAlias':
							return A2(
								_elm_lang$core$Result$map,
								attachEarlierRetEnv(retEnvHere),
								recurse(_p58._3));
						case 'EParens':
							return A2(
								_elm_lang$core$Result$map,
								attachEarlierRetEnv(retEnvHere),
								recurse(_p58._1));
						default:
							switch (_p58._1.ctor) {
								case 'HoleVal':
									var _p122 = _p58._1._0;
									return _elm_lang$core$Result$Ok(
										A2(
											ret,
											{
												ctor: '::',
												_0: _p122,
												_1: {ctor: '[]'}
											},
											_p122.v_));
								case 'HoleLoc':
									return A3(
										_user$project$Eval$errorWithBacktrace,
										syntax,
										{ctor: '::', _0: e, _1: bt},
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Lang$strPos(e.start),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' loc hole ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(_p58._1._0),
													'!'))));
								case 'HoleEmpty':
									return A3(
										_user$project$Eval$errorWithBacktrace,
										syntax,
										{ctor: '::', _0: e, _1: bt},
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Lang$strPos(e.start),
											' empty hole!'));
								case 'HolePredicate':
									return A3(
										_user$project$Eval$errorWithBacktrace,
										syntax,
										{ctor: '::', _0: e, _1: bt},
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Lang$strPos(e.start),
											' predicate hole!'));
								case 'HoleNamed':
									if (_p58._1._0 === 'terminationCondition') {
										var parentIf = A2(
											_elm_lang$core$Maybe$withDefault,
											_user$project$Lang$eHoleNamed(' * Nothing * '),
											_elm_lang$core$List$head(bt));
										return (_elm_lang$core$Native_Utils.cmp(
											A2(
												_user$project$Utils$count,
												F2(
													function (x, y) {
														return _elm_lang$core$Native_Utils.eq(x, y);
													})(parentIf),
												bt),
											2) > -1) ? _elm_lang$core$Result$Ok(
											A2(
												ret,
												{ctor: '[]'},
												_user$project$Lang$VBase(
													_user$project$Lang$VBool(true)))) : _elm_lang$core$Result$Ok(
											A2(
												ret,
												{ctor: '[]'},
												_user$project$Lang$VBase(
													_user$project$Lang$VBool(false))));
									} else {
										return A3(
											_user$project$Eval$errorWithBacktrace,
											syntax,
											{ctor: '::', _0: e, _1: bt},
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Lang$strPos(e.start),
												A2(
													_elm_lang$core$Basics_ops['++'],
													' empty hole ',
													A2(_elm_lang$core$Basics_ops['++'], _p58._1._0, '!'))));
									}
								default:
									var seenCount = A2(
										_user$project$Utils$count,
										function (_p123) {
											var _p124 = _p123;
											return _elm_lang$core$Native_Utils.eq(_p124._0, e);
										},
										pbeHolesSeenRefCell.pbeHolesSeen);
									var _p125 = A2(_user$project$Utils$maybeGeti1, seenCount + 1, _p58._1._0);
									if (_p125.ctor === 'Just') {
										var pbeHoleSeenBeforeEval = {
											ctor: '_Tuple3',
											_0: e,
											_1: env,
											_2: _elm_lang$core$Result$Err('example not evaluated yet')
										};
										var _p126 = A3(
											_user$project$ImpureGoodies$mutateRecordField,
											pbeHolesSeenRefCell,
											'pbeHolesSeen',
											A2(
												_elm_lang$core$Basics_ops['++'],
												pbeHolesSeenRefCell.pbeHolesSeen,
												{
													ctor: '::',
													_0: pbeHoleSeenBeforeEval,
													_1: {ctor: '[]'}
												}));
										var holesSeenIToReplace = _elm_lang$core$List$length(pbeHolesSeenRefCell.pbeHolesSeen);
										var evaledResult = recurse(_p125._0._3);
										var pbeHoleSeenAfterEval = {
											ctor: '_Tuple3',
											_0: e,
											_1: env,
											_2: A2(
												_elm_lang$core$Result$map,
												function (_p127) {
													var _p128 = _p127;
													return _p128._0._0;
												},
												evaledResult)
										};
										var _p129 = A3(
											_user$project$ImpureGoodies$mutateRecordField,
											pbeHolesSeenRefCell,
											'pbeHolesSeen',
											A3(_user$project$Utils$replacei, holesSeenIToReplace, pbeHoleSeenAfterEval, pbeHolesSeenRefCell.pbeHolesSeen));
										return A2(
											_elm_lang$core$Result$map,
											function (_p130) {
												var _p131 = _p130;
												return A2(
													attachLaterRetEnv,
													retEnvHere,
													A2(
														addProvenanceToRet,
														{
															ctor: '::',
															_0: _p131._0._0,
															_1: {ctor: '[]'}
														},
														_p131));
											},
											evaledResult);
									} else {
										return A3(
											_user$project$Eval$errorWithBacktrace,
											syntax,
											{ctor: '::', _0: e, _1: bt},
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Lang$strPos(e.start),
												' encountered PBE hole too many times—no more examples to use for evaluation!'));
									}
							}
					}
				}()));
	});
var _user$project$Eval$apply = function (showPreludeOffsets) {
	return function (maybeRetEnvEId) {
		return function (abortPred) {
			return function (syntax) {
				return function (env) {
					return function (bt) {
						return function (bt_) {
							return function (pbeHolesSeenRefCell) {
								return function (e) {
									return function (psLeft) {
										return function (esLeft) {
											return function (funcBody) {
												return function (closureEnv) {
													if (_elm_lang$core$Native_Utils.cmp(
														A2(
															_user$project$Utils$count,
															function (_p132) {
																return A2(
																	F2(
																		function (x, y) {
																			return _elm_lang$core$Native_Utils.eq(x, y);
																		}),
																	e.val.eid,
																	function (_) {
																		return _.eid;
																	}(
																		function (_) {
																			return _.val;
																		}(_p132)));
															},
															bt),
														_user$project$Eval$recursionLimit) > 0) {
														return A3(
															_user$project$Eval$errorWithBacktrace,
															syntax,
															{ctor: '::', _0: e, _1: bt},
															A2(
																_elm_lang$core$Basics_ops['++'],
																_user$project$Lang$strPos(e.start),
																' Too much recursion!!'));
													} else {
														var recurse = A9(_user$project$Eval$apply, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt, bt_, pbeHolesSeenRefCell, e);
														var _p133 = {ctor: '_Tuple2', _0: psLeft, _1: esLeft};
														if (_p133._0.ctor === '[]') {
															if (_p133._1.ctor === '[]') {
																return A2(
																	_elm_lang$core$Result$map,
																	function (valAndWsAndRetEnv) {
																		return {
																			ctor: '_Tuple2',
																			_0: {ctor: '[]'},
																			_1: valAndWsAndRetEnv
																		};
																	},
																	A8(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, closureEnv, bt_, pbeHolesSeenRefCell, funcBody));
															} else {
																var _p148 = _p133._1;
																return A2(
																	_elm_lang$core$Result$andThen,
																	function (_p134) {
																		var _p135 = _p134;
																		var _p147 = _p135._0._1;
																		var _p146 = _p135._0._0;
																		var _p145 = _p135._1;
																		var _p136 = _p146.v_;
																		if (_p136.ctor === 'VClosure') {
																			var _p144 = _p136._1;
																			var _p143 = _p136._2;
																			var _p142 = _p136._3;
																			var _p137 = _p136._0;
																			if (_p137.ctor === 'Nothing') {
																				return A2(
																					_elm_lang$core$Result$map,
																					function (_p138) {
																						var _p139 = _p138;
																						return {
																							ctor: '_Tuple2',
																							_0: _p139._0,
																							_1: {
																								ctor: '_Tuple2',
																								_0: {
																									ctor: '_Tuple2',
																									_0: _p139._1._0._0,
																									_1: A2(_elm_lang$core$Basics_ops['++'], _p147, _p139._1._0._1)
																								},
																								_1: A2(_user$project$Utils$orMaybe, _p139._1._1, _p145)
																							}
																						};
																					},
																					A4(recurse, _p144, _p148, _p143, _p142));
																			} else {
																				return A2(
																					_elm_lang$core$Result$map,
																					function (_p140) {
																						var _p141 = _p140;
																						return {
																							ctor: '_Tuple2',
																							_0: _p141._0,
																							_1: {
																								ctor: '_Tuple2',
																								_0: {
																									ctor: '_Tuple2',
																									_0: _p141._1._0._0,
																									_1: A2(_elm_lang$core$Basics_ops['++'], _p147, _p141._1._0._1)
																								},
																								_1: A2(_user$project$Utils$orMaybe, _p141._1._1, _p145)
																							}
																						};
																					},
																					A4(
																						recurse,
																						_p144,
																						_p148,
																						_p143,
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: _p137._0, _1: _p146},
																							_1: _p142
																						}));
																			}
																		} else {
																			return A3(
																				_user$project$Eval$errorWithBacktrace,
																				syntax,
																				{ctor: '::', _0: e, _1: bt},
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					_user$project$Lang$strPos(e.start),
																					' too many arguments given to function'));
																		}
																	},
																	A8(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, closureEnv, bt_, pbeHolesSeenRefCell, funcBody));
															}
														} else {
															if (_p133._1.ctor === '[]') {
																var finalVal = {
																	v_: A4(_user$project$Lang$VClosure, _elm_lang$core$Maybe$Nothing, _p133._0, funcBody, closureEnv),
																	provenance: _user$project$Lang$dummyProvenance,
																	parents: _user$project$Lang$Parents(
																		{ctor: '[]'})
																};
																return _elm_lang$core$Result$Ok(
																	{
																		ctor: '_Tuple2',
																		_0: {ctor: '[]'},
																		_1: {
																			ctor: '_Tuple2',
																			_0: {
																				ctor: '_Tuple2',
																				_0: finalVal,
																				_1: {ctor: '[]'}
																			},
																			_1: _elm_lang$core$Maybe$Nothing
																		}
																	});
															} else {
																var _p154 = _p133._1._0;
																var _p149 = A8(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt_, pbeHolesSeenRefCell, _p154);
																if (_p149.ctor === 'Err') {
																	return _elm_lang$core$Result$Err(_p149._0);
																} else {
																	var _p153 = _p149._0._0._0;
																	var _p150 = A2(
																		_user$project$Eval$cons,
																		{ctor: '_Tuple2', _0: _p133._0._0, _1: _p153},
																		_elm_lang$core$Maybe$Just(closureEnv));
																	if (_p150.ctor === 'Just') {
																		return A2(
																			_elm_lang$core$Result$map,
																			function (_p151) {
																				var _p152 = _p151;
																				return {
																					ctor: '_Tuple2',
																					_0: {ctor: '::', _0: _p153, _1: _p152._0},
																					_1: {
																						ctor: '_Tuple2',
																						_0: {
																							ctor: '_Tuple2',
																							_0: _p152._1._0._0,
																							_1: A2(_elm_lang$core$Basics_ops['++'], _p149._0._0._1, _p152._1._0._1)
																						},
																						_1: A2(_user$project$Utils$orMaybe, _p152._1._1, _p149._0._1)
																					}
																				};
																			},
																			A4(recurse, _p133._0._1, _p133._1._1, funcBody, _p150._0));
																	} else {
																		return A3(
																			_user$project$Eval$errorWithBacktrace,
																			syntax,
																			{ctor: '::', _0: _p154, _1: bt},
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				_user$project$Lang$strPos(_p154.start),
																				' bad arguments to function'));
																	}
																}
															}
														}
													}
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Eval$evalBranches = F9(
	function (showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt, pbeHolesSeenRefCell, v, bs) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p155, acc) {
					var _p156 = _p155;
					var _p157 = {
						ctor: '_Tuple2',
						_0: acc,
						_1: A2(
							_user$project$Eval$cons,
							{ctor: '_Tuple2', _0: _p156._1, _1: v},
							_elm_lang$core$Maybe$Just(env))
					};
					_v67_3:
					do {
						if (_p157.ctor === '_Tuple2') {
							if (_p157._0.ctor === 'Ok') {
								if (_p157._0._0.ctor === 'Just') {
									return acc;
								} else {
									if (_p157._1.ctor === 'Just') {
										return A2(
											_elm_lang$core$Result$map,
											_elm_lang$core$Maybe$Just,
											A8(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, _p157._1._0, bt, pbeHolesSeenRefCell, _p156._2));
									} else {
										break _v67_3;
									}
								}
							} else {
								return acc;
							}
						} else {
							break _v67_3;
						}
					} while(false);
					return _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing);
				}),
			_elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing),
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.val;
				},
				bs));
	});
var _user$project$Eval$evalOp = function (showPreludeOffsets) {
	return function (maybeRetEnvEId) {
		return function (abortPred) {
			return function (syntax) {
				return function (env) {
					return function (e) {
						return function (bt) {
							return function (pbeHolesSeenRefCell) {
								return function (opWithInfo) {
									return function (es) {
										var _p158 = {ctor: '_Tuple2', _0: opWithInfo.val, _1: opWithInfo.start};
										var op = _p158._0;
										var opStart = _p158._1;
										var argsEvaledRes = _user$project$Utils$projOk(
											A2(
												_elm_lang$core$List$map,
												A7(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt, pbeHolesSeenRefCell),
												es));
										var _p159 = argsEvaledRes;
										if (_p159.ctor === 'Err') {
											return _elm_lang$core$Result$Err(_p159._0);
										} else {
											var _p160 = _elm_lang$core$List$unzip(_p159._0);
											var vws = _p160._0;
											var deeperRetEnvs = _p160._1;
											var retEnv = A2(
												_elm_lang$core$Maybe$withDefault,
												_elm_lang$core$Maybe$Nothing,
												A2(
													_user$project$Utils$findLast,
													F2(
														function (x, y) {
															return !_elm_lang$core$Native_Utils.eq(x, y);
														})(_elm_lang$core$Maybe$Nothing),
													deeperRetEnvs));
											var _p161 = _elm_lang$core$List$unzip(vws);
											var vs = _p161._0;
											var wss = _p161._1;
											var error = function (_p162) {
												var _p163 = _p162;
												return A3(
													_user$project$Eval$errorWithBacktrace,
													syntax,
													bt,
													A2(
														_elm_lang$core$Basics_ops['++'],
														'Bad arguments to ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_user$project$ValUnparser$strOp(op),
															A2(
																_elm_lang$core$Basics_ops['++'],
																' operator ',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_user$project$Lang$strPos(opStart),
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		':\n',
																		_user$project$Utils$lines(
																			A2(
																				_elm_lang$core$List$map,
																				function (_p164) {
																					var _p165 = _p164;
																					return A2(
																						_elm_lang$core$Basics_ops['++'],
																						_user$project$ValUnparser$strVal(_p165._0),
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							' from ',
																							A2(_user$project$Syntax$unparser, syntax, _p165._1)));
																				},
																				A2(_user$project$Utils$zip, vs, es)))))))));
											};
											var addProvenance = function (val_) {
												return A3(
													_user$project$Lang$Val,
													val_,
													A2(_user$project$Lang$Provenance, e, vs),
													_user$project$Lang$Parents(
														{ctor: '[]'}));
											};
											var addProvenanceOk = function (val_) {
												return _elm_lang$core$Result$Ok(
													addProvenance(val_));
											};
											var nullaryOp = F2(
												function (args, retVal_) {
													var _p166 = args;
													if (_p166.ctor === '[]') {
														return addProvenanceOk(retVal_);
													} else {
														return error(
															{ctor: '_Tuple0'});
													}
												});
											var unaryMathOp = F2(
												function (op, args) {
													var _p167 = args;
													if ((((_p167.ctor === '::') && (_p167._0.ctor === 'VConst')) && (_p167._0._1.ctor === '_Tuple2')) && (_p167._1.ctor === '[]')) {
														return addProvenanceOk(
															A2(
																_user$project$Lang$VConst,
																_elm_lang$core$Maybe$Nothing,
																{
																	ctor: '_Tuple2',
																	_0: A4(
																		_user$project$Eval$evalDelta,
																		syntax,
																		bt,
																		op,
																		{
																			ctor: '::',
																			_0: _p167._0._1._0,
																			_1: {ctor: '[]'}
																		}),
																	_1: A2(
																		_user$project$Lang$MathOp,
																		op,
																		{
																			ctor: '::',
																			_0: _p167._0._1._1,
																			_1: {ctor: '[]'}
																		})
																}));
													} else {
														return error(
															{ctor: '_Tuple0'});
													}
												});
											var binMathOp = F2(
												function (op, args) {
													var _p168 = args;
													if (((((((_p168.ctor === '::') && (_p168._0.ctor === 'VConst')) && (_p168._0._1.ctor === '_Tuple2')) && (_p168._1.ctor === '::')) && (_p168._1._0.ctor === 'VConst')) && (_p168._1._0._1.ctor === '_Tuple2')) && (_p168._1._1.ctor === '[]')) {
														var maybeAxisAndOtherDim = function () {
															var _p169 = {ctor: '_Tuple3', _0: op, _1: _p168._0._0, _2: _p168._1._0._0};
															_v74_3:
															do {
																if (_p169.ctor === '_Tuple3') {
																	if (_p169._1.ctor === 'Nothing') {
																		if ((_p169._0.ctor === 'Plus') && (_p169._2.ctor === 'Just')) {
																			return _elm_lang$core$Maybe$Just(_p169._2._0);
																		} else {
																			break _v74_3;
																		}
																	} else {
																		if (_p169._2.ctor === 'Nothing') {
																			switch (_p169._0.ctor) {
																				case 'Plus':
																					return _elm_lang$core$Maybe$Just(_p169._1._0);
																				case 'Minus':
																					return _elm_lang$core$Maybe$Just(_p169._1._0);
																				default:
																					break _v74_3;
																			}
																		} else {
																			break _v74_3;
																		}
																	}
																} else {
																	break _v74_3;
																}
															} while(false);
															return _elm_lang$core$Maybe$Nothing;
														}();
														return addProvenanceOk(
															A2(
																_user$project$Lang$VConst,
																maybeAxisAndOtherDim,
																{
																	ctor: '_Tuple2',
																	_0: A4(
																		_user$project$Eval$evalDelta,
																		syntax,
																		bt,
																		op,
																		{
																			ctor: '::',
																			_0: _p168._0._1._0,
																			_1: {
																				ctor: '::',
																				_0: _p168._1._0._1._0,
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: A2(
																		_user$project$Lang$MathOp,
																		op,
																		{
																			ctor: '::',
																			_0: _p168._0._1._1,
																			_1: {
																				ctor: '::',
																				_0: _p168._1._0._1._1,
																				_1: {ctor: '[]'}
																			}
																		})
																}));
													} else {
														return error(
															{ctor: '_Tuple0'});
													}
												});
											var args = A2(
												_elm_lang$core$List$map,
												function (_) {
													return _.v_;
												},
												vs);
											var newValRes = function () {
												var _p170 = op;
												switch (_p170.ctor) {
													case 'Plus':
														var _p171 = args;
														if (((((((_p171.ctor === '::') && (_p171._0.ctor === 'VBase')) && (_p171._0._0.ctor === 'VString')) && (_p171._1.ctor === '::')) && (_p171._1._0.ctor === 'VBase')) && (_p171._1._0._0.ctor === 'VString')) && (_p171._1._1.ctor === '[]')) {
															return addProvenanceOk(
																_user$project$Lang$VBase(
																	_user$project$Lang$VString(
																		A2(_elm_lang$core$Basics_ops['++'], _p171._0._0._0, _p171._1._0._0._0))));
														} else {
															return A2(binMathOp, op, args);
														}
													case 'Minus':
														return A2(binMathOp, op, args);
													case 'Mult':
														return A2(binMathOp, op, args);
													case 'Div':
														return A2(binMathOp, op, args);
													case 'Mod':
														return A2(binMathOp, op, args);
													case 'Pow':
														return A2(binMathOp, op, args);
													case 'ArcTan2':
														return A2(binMathOp, op, args);
													case 'Lt':
														var _p172 = args;
														if (((((((_p172.ctor === '::') && (_p172._0.ctor === 'VConst')) && (_p172._0._1.ctor === '_Tuple2')) && (_p172._1.ctor === '::')) && (_p172._1._0.ctor === 'VConst')) && (_p172._1._0._1.ctor === '_Tuple2')) && (_p172._1._1.ctor === '[]')) {
															return addProvenanceOk(
																_user$project$Lang$VBase(
																	_user$project$Lang$VBool(
																		_elm_lang$core$Native_Utils.cmp(_p172._0._1._0, _p172._1._0._1._0) < 0)));
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
													case 'Eq':
														var _p173 = args;
														_v78_2:
														do {
															if (((_p173.ctor === '::') && (_p173._1.ctor === '::')) && (_p173._1._1.ctor === '[]')) {
																switch (_p173._0.ctor) {
																	case 'VConst':
																		if (((_p173._0._1.ctor === '_Tuple2') && (_p173._1._0.ctor === 'VConst')) && (_p173._1._0._1.ctor === '_Tuple2')) {
																			return addProvenanceOk(
																				_user$project$Lang$VBase(
																					_user$project$Lang$VBool(
																						_elm_lang$core$Native_Utils.eq(_p173._0._1._0, _p173._1._0._1._0))));
																		} else {
																			break _v78_2;
																		}
																	case 'VBase':
																		if (((_p173._0._0.ctor === 'VString') && (_p173._1._0.ctor === 'VBase')) && (_p173._1._0._0.ctor === 'VString')) {
																			return addProvenanceOk(
																				_user$project$Lang$VBase(
																					_user$project$Lang$VBool(
																						_elm_lang$core$Native_Utils.eq(_p173._0._0._0, _p173._1._0._0._0))));
																		} else {
																			break _v78_2;
																		}
																	default:
																		break _v78_2;
																}
															} else {
																return error(
																	{ctor: '_Tuple0'});
															}
														} while(false);
														return addProvenanceOk(
															_user$project$Lang$VBase(
																_user$project$Lang$VBool(false)));
													case 'Pi':
														return A2(
															nullaryOp,
															args,
															A2(
																_user$project$Lang$VConst,
																_elm_lang$core$Maybe$Nothing,
																{
																	ctor: '_Tuple2',
																	_0: _elm_lang$core$Basics$pi,
																	_1: A2(
																		_user$project$Lang$MathOp,
																		op,
																		{ctor: '[]'})
																}));
													case 'DictEmpty':
														return A2(
															nullaryOp,
															args,
															_user$project$Lang$VDict(_elm_lang$core$Dict$empty));
													case 'DictInsert':
														var _p174 = vs;
														if ((((_p174.ctor === '::') && (_p174._1.ctor === '::')) && (_p174._1._1.ctor === '::')) && (_p174._1._1._1.ctor === '[]')) {
															var _p175 = _p174._1._1._0.v_;
															if (_p175.ctor === 'VDict') {
																return A2(
																	_elm_lang$core$Result$map,
																	function (dkey) {
																		return addProvenance(
																			_user$project$Lang$VDict(
																				A3(_elm_lang$core$Dict$insert, dkey, _p174._1._0, _p175._0)));
																	},
																	A3(_user$project$Eval$valToDictKey, syntax, bt, _p174._0.v_));
															} else {
																return error(
																	{ctor: '_Tuple0'});
															}
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
													case 'DictGet':
														var _p176 = args;
														if ((((_p176.ctor === '::') && (_p176._1.ctor === '::')) && (_p176._1._0.ctor === 'VDict')) && (_p176._1._1.ctor === '[]')) {
															return A2(
																_elm_lang$core$Result$map,
																function (dkey) {
																	return A3(
																		_user$project$Utils$getWithDefault,
																		dkey,
																		addProvenance(
																			_user$project$Lang$VBase(_user$project$Lang$VNull)),
																		_p176._1._0._0);
																},
																A3(_user$project$Eval$valToDictKey, syntax, bt, _p176._0));
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
													case 'DictRemove':
														var _p177 = args;
														if ((((_p177.ctor === '::') && (_p177._1.ctor === '::')) && (_p177._1._0.ctor === 'VDict')) && (_p177._1._1.ctor === '[]')) {
															return A2(
																_elm_lang$core$Result$map,
																function (dkey) {
																	return addProvenance(
																		_user$project$Lang$VDict(
																			A2(_elm_lang$core$Dict$remove, dkey, _p177._1._0._0)));
																},
																A3(_user$project$Eval$valToDictKey, syntax, bt, _p177._0));
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
													case 'Cos':
														return A2(unaryMathOp, op, args);
													case 'Sin':
														return A2(unaryMathOp, op, args);
													case 'ArcCos':
														return A2(unaryMathOp, op, args);
													case 'ArcSin':
														return A2(unaryMathOp, op, args);
													case 'Abs':
														return A2(unaryMathOp, op, args);
													case 'Floor':
														return A2(unaryMathOp, op, args);
													case 'Ceil':
														return A2(unaryMathOp, op, args);
													case 'Round':
														return A2(unaryMathOp, op, args);
													case 'Sqrt':
														return A2(unaryMathOp, op, args);
													case 'Ln':
														return A2(unaryMathOp, op, args);
													case 'Explode':
														var _p178 = args;
														if ((((_p178.ctor === '::') && (_p178._0.ctor === 'VBase')) && (_p178._0._0.ctor === 'VString')) && (_p178._1.ctor === '[]')) {
															return addProvenanceOk(
																_user$project$Lang$VList(
																	A2(
																		_user$project$Utils$mapi0,
																		function (_p179) {
																			var _p180 = _p179;
																			return {
																				v_: _user$project$Lang$VBase(
																					_user$project$Lang$VString(_p180._1)),
																				provenance: A2(
																					_user$project$Lang$Provenance,
																					A2(
																						_user$project$Lang$eCall,
																						'nth',
																						{
																							ctor: '::',
																							_0: e,
																							_1: {
																								ctor: '::',
																								_0: _user$project$Lang$eConstDummyLoc(
																									_elm_lang$core$Basics$toFloat(_p180._0)),
																								_1: {ctor: '[]'}
																							}
																						}),
																					vs),
																				parents: _user$project$Lang$Parents(
																					{ctor: '[]'})
																			};
																		},
																		A2(
																			_elm_lang$core$List$map,
																			_elm_lang$core$String$fromChar,
																			_elm_lang$core$String$toList(_p178._0._0._0)))));
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
													case 'DebugLog':
														var _p181 = vs;
														if ((_p181.ctor === '::') && (_p181._1.ctor === '[]')) {
															var _p183 = _p181._0;
															var _p182 = A2(
																_elm_lang$core$Debug$log,
																_user$project$ValUnparser$strVal(_p183),
																'');
															return _elm_lang$core$Result$Ok(_p183);
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
													case 'NoWidgets':
														var _p184 = vs;
														if ((_p184.ctor === '::') && (_p184._1.ctor === '[]')) {
															return _elm_lang$core$Result$Ok(_p184._0);
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
													case 'ToStr':
														var _p185 = vs;
														if ((_p185.ctor === '::') && (_p185._1.ctor === '[]')) {
															return addProvenanceOk(
																_user$project$Lang$VBase(
																	_user$project$Lang$VString(
																		_user$project$ValUnparser$strVal(_p185._0))));
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
													default:
														var _p186 = vs;
														if ((_p186.ctor === '::') && (_p186._1.ctor === '[]')) {
															var _p187 = _p186._0.v_;
															_v89_2:
															do {
																switch (_p187.ctor) {
																	case 'VConst':
																		if (_p187._1.ctor === '_Tuple2') {
																			return addProvenanceOk(
																				_user$project$Lang$VBase(
																					_user$project$Lang$VString(
																						_elm_lang$core$Basics$toString(_p187._1._0))));
																		} else {
																			break _v89_2;
																		}
																	case 'VBase':
																		if (_p187._0.ctor === 'VString') {
																			return addProvenanceOk(_p187);
																		} else {
																			break _v89_2;
																		}
																	default:
																		break _v89_2;
																}
															} while(false);
															return error(
																{ctor: '_Tuple0'});
														} else {
															return error(
																{ctor: '_Tuple0'});
														}
												}
											}();
											var _p188 = newValRes;
											if (_p188.ctor === 'Err') {
												return _elm_lang$core$Result$Err(_p188._0);
											} else {
												var _p206 = _p188._0;
												var newWidgets = function () {
													var _p189 = {
														ctor: '_Tuple4',
														_0: showPreludeOffsets || _user$project$FastParser$isProgramEId(e.val.eid),
														_1: op,
														_2: args,
														_3: vs
													};
													_v91_3:
													do {
														if ((((_p189.ctor === '_Tuple4') && (_p189._0 === true)) && (_p189._2.ctor === '::')) && (_p189._2._0.ctor === 'VConst')) {
															if (_p189._2._0._0.ctor === 'Nothing') {
																if (((((((((_p189._1.ctor === 'Plus') && (_p189._2._1.ctor === '::')) && (_p189._2._1._0.ctor === 'VConst')) && (_p189._2._1._0._0.ctor === 'Just')) && (_p189._2._1._0._0._0.ctor === '_Tuple3')) && (_p189._2._1._1.ctor === '[]')) && (_p189._3.ctor === '::')) && (_p189._3._1.ctor === '::')) && (_p189._3._1._1.ctor === '[]')) {
																	var _p199 = _p189._2._1._0._0._0._2;
																	var _p198 = _p189._2._1._0._0._0._1;
																	var _p197 = _p189._2._1._0._1;
																	var _p196 = _p189._2._1._0._0._0._0;
																	var _p195 = _elm_lang$core$Native_Utils.eq(_p196, _user$project$Lang$X) ? {ctor: '_Tuple4', _0: _p197, _1: _p198, _2: _p206, _3: _p199} : {ctor: '_Tuple4', _0: _p198, _1: _p197, _2: _p199, _3: _p206};
																	var baseXNumTr = _p195._0;
																	var baseYNumTr = _p195._1;
																	var endXVal = _p195._2;
																	var endYVal = _p195._3;
																	return {
																		ctor: '::',
																		_0: A8(_user$project$Lang$WOffset1D, baseXNumTr, baseYNumTr, _p196, _user$project$Lang$Positive, _p189._2._0._1, _p189._3._0, endXVal, endYVal),
																		_1: {ctor: '[]'}
																	};
																} else {
																	break _v91_3;
																}
															} else {
																if ((((((((_p189._2._0._0._0.ctor === '_Tuple3') && (_p189._2._1.ctor === '::')) && (_p189._2._1._0.ctor === 'VConst')) && (_p189._2._1._0._0.ctor === 'Nothing')) && (_p189._2._1._1.ctor === '[]')) && (_p189._3.ctor === '::')) && (_p189._3._1.ctor === '::')) && (_p189._3._1._1.ctor === '[]')) {
																	switch (_p189._1.ctor) {
																		case 'Plus':
																			var _p194 = _p189._2._0._0._0._2;
																			var _p193 = _p189._2._0._0._0._1;
																			var _p192 = _p189._2._0._1;
																			var _p191 = _p189._2._0._0._0._0;
																			var _p190 = _elm_lang$core$Native_Utils.eq(_p191, _user$project$Lang$X) ? {ctor: '_Tuple4', _0: _p192, _1: _p193, _2: _p206, _3: _p194} : {ctor: '_Tuple4', _0: _p193, _1: _p192, _2: _p194, _3: _p206};
																			var baseXNumTr = _p190._0;
																			var baseYNumTr = _p190._1;
																			var endXVal = _p190._2;
																			var endYVal = _p190._3;
																			return {
																				ctor: '::',
																				_0: A8(_user$project$Lang$WOffset1D, baseXNumTr, baseYNumTr, _p191, _user$project$Lang$Positive, _p189._2._1._0._1, _p189._3._1._0, endXVal, endYVal),
																				_1: {ctor: '[]'}
																			};
																		case 'Minus':
																			var _p204 = _p189._2._0._0._0._2;
																			var _p203 = _p189._2._0._0._0._1;
																			var _p202 = _p189._2._0._1;
																			var _p201 = _p189._2._0._0._0._0;
																			var _p200 = _elm_lang$core$Native_Utils.eq(_p201, _user$project$Lang$X) ? {ctor: '_Tuple4', _0: _p202, _1: _p203, _2: _p206, _3: _p204} : {ctor: '_Tuple4', _0: _p203, _1: _p202, _2: _p204, _3: _p206};
																			var baseXNumTr = _p200._0;
																			var baseYNumTr = _p200._1;
																			var endXVal = _p200._2;
																			var endYVal = _p200._3;
																			return {
																				ctor: '::',
																				_0: A8(_user$project$Lang$WOffset1D, baseXNumTr, baseYNumTr, _p201, _user$project$Lang$Negative, _p189._2._1._0._1, _p189._3._1._0, endXVal, endYVal),
																				_1: {ctor: '[]'}
																			};
																		default:
																			break _v91_3;
																	}
																} else {
																	break _v91_3;
																}
															}
														} else {
															break _v91_3;
														}
													} while(false);
													return {ctor: '[]'};
												}();
												var widgets = function () {
													var _p205 = op;
													if (_p205.ctor === 'NoWidgets') {
														return {ctor: '[]'};
													} else {
														return A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$List$concat(wss),
															newWidgets);
													}
												}();
												return _elm_lang$core$Result$Ok(
													{
														ctor: '_Tuple2',
														_0: {ctor: '_Tuple2', _0: _p206, _1: widgets},
														_1: retEnv
													});
											}
										}
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Eval$evalTBranches = F9(
	function (showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt, pbeHolesSeenRefCell, val, tbranches) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p207, acc) {
					var _p208 = _p207;
					var _p209 = acc;
					if (_p209.ctor === 'Ok') {
						if (_p209._0.ctor === 'Just') {
							return acc;
						} else {
							return A2(_user$project$Types$valIsType, val, _p208._1) ? A2(
								_elm_lang$core$Result$map,
								_elm_lang$core$Maybe$Just,
								A8(_user$project$Eval$eval, showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, env, bt, pbeHolesSeenRefCell, _p208._2)) : acc;
						}
					} else {
						return acc;
					}
				}),
			_elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing),
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.val;
				},
				tbranches));
	});
var _user$project$Eval$initEnvRes = function () {
	var endingEId = _user$project$Lang$expEffectiveExp(_user$project$FastParser$prelude).val.eid;
	return A2(
		_elm_lang$core$Result$map,
		function (_p210) {
			return A2(
				_user$project$Utils$fromJust_,
				'Eval.initEnvRes',
				_elm_lang$core$Tuple$second(_p210));
		},
		A8(
			_user$project$Eval$eval,
			false,
			_elm_lang$core$Maybe$Just(endingEId),
			_user$project$Eval$runUntilTheEnd,
			_user$project$Syntax$Little,
			{ctor: '[]'},
			{ctor: '[]'},
			{
				pbeHolesSeen: {ctor: '[]'}
			},
			_user$project$FastParser$prelude));
}();
var _user$project$Eval$initEnv = A2(_user$project$Utils$fromOk, 'Eval.initEnv', _user$project$Eval$initEnvRes);
var _user$project$Eval$doEvalEarlyAbort = F6(
	function (showPreludeOffsets, maybeRetEnvEId, abortPred, syntax, initEnv, e) {
		var pbeHolesSeenRefCell = {
			pbeHolesSeen: {ctor: '[]'}
		};
		return A2(
			_elm_lang$core$Result$map,
			function (_p211) {
				var _p212 = _p211;
				return {
					ctor: '_Tuple3',
					_0: {
						ctor: '_Tuple2',
						_0: _p212._0._0,
						_1: A2(_user$project$Eval$postProcessWidgets, e, _p212._0._1)
					},
					_1: _p212._1,
					_2: pbeHolesSeenRefCell.pbeHolesSeen
				};
			},
			A3(
				_user$project$ImpureGoodies$tryCatch,
				'EarlyAbort',
				function (_p213) {
					var _p214 = _p213;
					return A8(
						_user$project$Eval$eval,
						showPreludeOffsets,
						maybeRetEnvEId,
						abortPred,
						syntax,
						initEnv,
						{ctor: '[]'},
						pbeHolesSeenRefCell,
						e);
				},
				function (_p215) {
					var _p216 = _p215;
					return _p216._0;
				}));
	});
var _user$project$Eval$doEval = function (showPreludeOffsets) {
	return A3(_user$project$Eval$doEvalEarlyAbort, showPreludeOffsets, _elm_lang$core$Maybe$Nothing, _user$project$Eval$runUntilTheEnd);
};
var _user$project$Eval$run = F3(
	function (showPreludeOffsets, syntax, e) {
		return A2(
			_user$project$ImpureGoodies$logTimedRun,
			'Eval.run',
			function (_p217) {
				var _p218 = _p217;
				return A2(
					_elm_lang$core$Result$map,
					_user$project$Utils$fst3,
					A4(_user$project$Eval$doEval, showPreludeOffsets, syntax, _user$project$Eval$initEnv, e));
			});
	});
var _user$project$Eval$parseAndRun = function (_p219) {
	return _user$project$ValUnparser$strVal(
		_elm_lang$core$Tuple$first(
			_user$project$Utils$fromOk_(
				A3(
					_user$project$Eval$run,
					false,
					_user$project$Syntax$Little,
					A2(
						_user$project$Utils$fromOkay,
						'parseAndRun',
						_user$project$FastParser$parseE(_p219))))));
};
var _user$project$Eval$parseAndRun_ = function (_p220) {
	return A2(
		_user$project$ValUnparser$strVal_,
		true,
		_elm_lang$core$Tuple$first(
			_user$project$Utils$fromOk_(
				A3(
					_user$project$Eval$run,
					false,
					_user$project$Syntax$Little,
					A2(
						_user$project$Utils$fromOkay,
						'parseAndRun_',
						_user$project$FastParser$parseE(_p220))))));
};
var _user$project$Eval$simpleEvalToMaybeVal = function (e) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (_p221) {
			var _p222 = _p221;
			return _p222._0._0;
		},
		_elm_lang$core$Result$toMaybe(
			A8(
				_user$project$Eval$eval,
				false,
				_elm_lang$core$Maybe$Nothing,
				_user$project$Eval$runUntilTheEnd,
				_user$project$Syntax$Elm,
				_user$project$Eval$initEnv,
				{ctor: '[]'},
				{
					pbeHolesSeen: {ctor: '[]'}
				},
				e)));
};

function combineBounds(a, b) {
  if (!a) { return b; }
  if (!b) { return a; }

  return {
    left:  Math.min(a.left,  b.left),
    top:   Math.min(a.top,   b.top),
    right: Math.max(a.right, b.right),
    bot:   Math.max(a.bot,   b.bot)
  };
}

function defaultIfNaN(perhapsNaN, defaultNum) {
  if (isNaN(perhapsNaN)) {
    return defaultNum;
  } else {
    return perhapsNaN;
  }
}

function isGoodNumber(item) {
  return typeof item === 'number' && !isNaN(item);
}

function perhapsMakeBounds(x1, y1, x2, y2) {
  if (isGoodNumber(x1) && isGoodNumber(y1) && isGoodNumber(x2) && isGoodNumber(y2)) {
    return {
      left:  Math.min(x1, x2),
      top:   Math.min(y1, y2),
      right: Math.max(x1, x2),
      bot:   Math.max(y1, y2)
    }
  } else {
    return null;
  }
}

function expandBounds(perhapsBounds, amount) {
  if (perhapsBounds) {
    return {
      left:  perhapsBounds.left  - amount,
      top:   perhapsBounds.top   - amount,
      right: perhapsBounds.right + amount,
      bot:   perhapsBounds.bot   + amount
    }
  } else {
    return perhapsBounds;
  }
}

// Will cut off arcs.
// Incorrect if relative positioning used.
function pathCommandsToBounds(cmds) {
  var strPts = [];

  // Apparently, `replace` is how you loop over all matches in JS. 🔥
  cmds.replace(/[MLT]\s*([\-\d\.]+)\s+([\-\d\.]+)/, function (_, xStr, yStr) {
    strPts.push([xStr, yStr]);
  });
  cmds.replace(/C\s*([\-\d\.]+)\s+([\-\d\.]+)\s*[,\s]\s*([\-\d\.]+)\s+([\-\d\.]+)\s*[,\s]\s*([\-\d\.]+)\s+([\-\d\.]+)/, function (_, x1Str, y1Str, x2Str, y2Str, xStr, yStr) {
    strPts.push([x1Str, y1Str], [x2Str, y2Str], [xStr, yStr]);
  });
  cmds.replace(/[SQ]\s*([\-\d\.]+)\s+([\-\d\.]+)\s*[,\s]\s*([\-\d\.]+)\s+([\-\d\.]+)/, function (_, x1Str, y1Str, xStr, yStr) {
    strPts.push([x1Str, y1Str], [xStr, yStr]);
  });
  // Arcs. Imprecise.
  // A rx ry x-axis-rotation large-arc-flag sweep-flag x y
  cmds.replace(/A\s*([\-\d\.]+)\s+([\-\d\.]+)\s+([\-\d\.]+)\s+([\-\d\.]+)\s+([\-\d\.]+)\s+([\-\d\.]+)\s+([\-\d\.]+)/, function (_, rxStr, ryStr, __, ___, ____, xStr, yStr) {
    strPts.push([xStr, yStr])
  });

  return strPointsToBounds(strPts);
}

function polyPointsToBounds(pointsStr) {
  var strPts = [];

  // Apparently, `replace` is how you loop over all matches in JS. 🔥
  pointsStr.replace(/([\-\d\.]+)\s+([\-\d\.]+)/, function (_, xStr, yStr) {
    strPts.push([xStr, yStr]);
  });

  return strPointsToBounds(strPts);
}

function strPointsToBounds(strPts) {
  var bounds = null;
	for (var i = 0; i < strPts.length; i++)
	{
    var x = parseFloat(strPts[i][0]);
    var y = parseFloat(strPts[i][1]);
    bounds = combineBounds(bounds, perhapsMakeBounds(x, y, x, y));
  }
  return bounds;
}

function estimatedBounds(vNode) {
  var recurse = estimatedBounds;

  // Yanked from https://github.com/elm-lang/virtual-dom/blob/2.0.4/src/Native/VirtualDom.js
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return recurse(vNode.node);

		case 'tagger':
			return recurse(vNode.node);

		case 'text':
			return null;

		case 'node':
			var children = vNode.children;
      var childBounds = null;

			for (var i = 0; i < children.length; i++)
			{
        childBounds = combineBounds(childBounds, recurse(children[i]));
			}

      switch (vNode.tag)
      {
        case 'svg':
          return childBounds;

        case 'circle':
          var cx          = parseFloat(vNode.facts['ATTR']['cx']);
          var cy          = parseFloat(vNode.facts['ATTR']['cy']);
          var r           = parseFloat(vNode.facts['ATTR']['r']);
          var strokeWidth = defaultIfNaN(parseFloat(vNode.facts['ATTR']['stroke-width']), 0);
          var x1          = cx - r - strokeWidth/2.0;
          var y1          = cy - r - strokeWidth/2.0;
          var x2          = cx + r + strokeWidth/2.0;
          var y2          = cy + r + strokeWidth/2.0;

          return combineBounds(childBounds, perhapsMakeBounds(x1, y1, x2, y2));

        case 'ellipse':
          var cx          = parseFloat(vNode.facts['ATTR']['cx']);
          var cy          = parseFloat(vNode.facts['ATTR']['cy']);
          var rx          = parseFloat(vNode.facts['ATTR']['rx']);
          var ry          = parseFloat(vNode.facts['ATTR']['ry']);
          var strokeWidth = defaultIfNaN(parseFloat(vNode.facts['ATTR']['stroke-width']), 0);
          var x1          = cx - rx - strokeWidth/2.0;
          var y1          = cy - ry - strokeWidth/2.0;
          var x2          = cx + rx + strokeWidth/2.0;
          var y2          = cy + ry + strokeWidth/2.0;

          return combineBounds(childBounds, perhapsMakeBounds(x1, y1, x2, y2));

        case 'image':
          var x1          = parseFloat(vNode.facts['ATTR']['x']);
          var y1          = parseFloat(vNode.facts['ATTR']['y']);
          var width       = parseFloat(vNode.facts['ATTR']['width']);
          var height      = parseFloat(vNode.facts['ATTR']['height']);
          var x2          = x1 + width;
          var y2          = y1 + height;

          return combineBounds(childBounds, perhapsMakeBounds(x1, y1, x2, y2));

        case 'line':
          var x1          = parseFloat(vNode.facts['ATTR']['x1']);
          var y1          = parseFloat(vNode.facts['ATTR']['y1']);
          var x2          = parseFloat(vNode.facts['ATTR']['x2']);
          var y2          = parseFloat(vNode.facts['ATTR']['y2']);
          var strokeWidth = defaultIfNaN(parseFloat(vNode.facts['ATTR']['stroke-width']), 0);
          x1 -= strokeWidth/2.0;
          y1 -= strokeWidth/2.0;
          x2 += strokeWidth/2.0;
          y2 += strokeWidth/2.0;

          return combineBounds(childBounds, perhapsMakeBounds(x1, y1, x2, y2));

        case 'path':
          // May cut off arcs.
          // Incorrect if relative positioning used.
          var cmds        = vNode.facts['ATTR']['d'];
          var strokeWidth = defaultIfNaN(parseFloat(vNode.facts['ATTR']['stroke-width']), 0);
          if (cmds) {
            var pathBounds = pathCommandsToBounds(cmds);
            return combineBounds(childBounds, expandBounds(pathBounds, strokeWidth));
          } else {
            return childBounds;
          }

        case 'polygon':
          var pointsStr   = vNode.facts['ATTR']['points'];
          var strokeWidth = defaultIfNaN(parseFloat(vNode.facts['ATTR']['stroke-width']), 0);
          if (pointsStr) {
            var polyBounds = polyPointsToBounds(pointsStr);
            return combineBounds(childBounds, expandBounds(polyBounds, strokeWidth));
          } else {
            return childBounds;
          }

        case 'polyline':
          var pointsStr   = vNode.facts['ATTR']['points'];
          var strokeWidth = defaultIfNaN(parseFloat(vNode.facts['ATTR']['stroke-width']), 0);
          if (pointsStr) {
            var polyBounds = polyPointsToBounds(pointsStr);
            return combineBounds(childBounds, expandBounds(polyBounds, strokeWidth));
          } else {
            return childBounds;
          }

        case 'rect':
          var x           = parseFloat(vNode.facts['ATTR']['x']);
          var y           = parseFloat(vNode.facts['ATTR']['y']);
          var width       = parseFloat(vNode.facts['ATTR']['width']);
          var height      = parseFloat(vNode.facts['ATTR']['height']);
          var strokeWidth = defaultIfNaN(parseFloat(vNode.facts['ATTR']['stroke-width']), 0);
          var x1          = x - strokeWidth/2.0;
          var y1          = y - strokeWidth/2.0;
          var x2          = x + width + strokeWidth/2.0;
          var y2          = y + height + strokeWidth/2.0;

          return combineBounds(childBounds, perhapsMakeBounds(x1, y1, x2, y2));

        case 'text':
          var x           = parseFloat(vNode.facts['ATTR']['x']);
          var y           = parseFloat(vNode.facts['ATTR']['y']);

          return combineBounds(childBounds, perhapsMakeBounds(x, y, x, y));

        default:
          return childBounds;
      }

    // Todo if needed
		case 'keyed-node':
			return null;

    // Todo if needed
		case 'custom':
			return null;
	}
}


var _user$project$Native_LangSvg = {

  estimatedBounds : function (vNode) {
    var perhapsBounds = estimatedBounds(vNode);
    if (perhapsBounds) {
      return _elm_lang$core$Maybe$Just(perhapsBounds);
    } else {
      return _elm_lang$core$Maybe$Nothing;
    }
  },

  vNodeType : function (vNode) {
    return vNode.type;
  },

  vNodeTag : function (vNode) {
    return vNode.tag;
  },

  vNodeChildren : function (vNode) {
    var childrenArray = vNode.children;

    // Found this code somewhere inside Elm's core.
    var list = _elm_lang$core$Native_List.Nil;
    for (var i = childrenArray.length; i--; )
    {
      list = _elm_lang$core$Native_List.Cons(childrenArray[i], list);
    }
    return list;
  }

    // randomFloat : function(_) {
    //   return Math.random();
    // },
    //
    // crashToNothing : function(thunk) {
    //   try {
    //     // Just (thunk ())
    //     var result = thunk({ctor: '_Tuple0'});
    //     return _elm_lang$core$Maybe$Just(result);
    //   } catch(err) {
    //     if (err.ctor === undefined) { // Internal crash, not something thrown with ImpureGoodies.throw below.
    //       // Nothing
    //       console.log(err);
    //       return _elm_lang$core$Maybe$Nothing;
    //     } else {
    //       throw err;
    //     }
    //   }
    // },
    //
    // crashToError : function(thunk) {
    //   try {
    //     // Ok (thunk ())
    //     var result = thunk({ctor: '_Tuple0'});
    //     return _elm_lang$core$Result$Ok(result);
    //   } catch(err) {
    //     if (err.ctor === undefined) { // Internal crash, not something thrown with ImpureGoodies.throw below.
    //       // Err (toString err)
    //       return _elm_lang$core$Result$Err(err.toString());
    //     } else {
    //       throw err;
    //     }
    //   }
    // },
    //
    // throw : function(exception) {
    //   throw(exception)
    // },
    //
    // tryCatch : function(exceptionConstructorName) { return function(thunk) { return function(catchThunk) {
    //   try {
    //     return thunk({ctor: '_Tuple0'});
    //   } catch(exception) {
    //     if (exception.ctor === exceptionConstructorName) {
    //       return catchThunk(exception);
    //     } else {
    //       throw exception;
    //     }
    //   }
    // }}},
    //
    // mutateRecordField : function(record) { return function(fieldName) { return function(newValue) {
    //   // Sanity check.
    //   if (typeof record[fieldName] == typeof newValue) {
    //     record[fieldName] = newValue;
    //     return record;
    //   } else {
    //     throw "ImpureGoodies.mutateRecordField: types do not match" + (typeof record[fieldName]) + " vs " + (typeof newValue);
    //   }
    // }}},
    //
    // timedRun : function(thunk) {
    //   var start = (new Date()).getTime();
    //   var result = thunk(_elm_lang$core$Native_Utils.Tuple0);
    //   var end = (new Date()).getTime();
    //
    //   return _elm_lang$core$Native_Utils.Tuple2(result, end-start);
    // }

};

var _user$project$ColorNum$htmlColorNames = A2(
	_elm_lang$core$Basics_ops['++'],
	A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Tuple$mapFirst(_elm_lang$core$String$toLower),
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'AliceBlue',
				_1: {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple3', _0: 240, _1: 248, _2: 255},
					_1: {ctor: '_Tuple3', _0: 208, _1: 1, _2: 0.97}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'AntiqueWhite',
					_1: {
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple3', _0: 250, _1: 235, _2: 215},
						_1: {ctor: '_Tuple3', _0: 34, _1: 0.78, _2: 0.91}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'Aqua',
						_1: {
							ctor: '_Tuple2',
							_0: {ctor: '_Tuple3', _0: 0, _1: 255, _2: 255},
							_1: {ctor: '_Tuple3', _0: 180, _1: 1, _2: 0.5}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'Aquamarine',
							_1: {
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple3', _0: 127, _1: 255, _2: 212},
								_1: {ctor: '_Tuple3', _0: 160, _1: 1, _2: 0.75}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'Azure',
								_1: {
									ctor: '_Tuple2',
									_0: {ctor: '_Tuple3', _0: 240, _1: 255, _2: 255},
									_1: {ctor: '_Tuple3', _0: 180, _1: 1, _2: 0.97}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'Beige',
									_1: {
										ctor: '_Tuple2',
										_0: {ctor: '_Tuple3', _0: 245, _1: 245, _2: 220},
										_1: {ctor: '_Tuple3', _0: 60, _1: 0.56, _2: 0.91}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'Bisque',
										_1: {
											ctor: '_Tuple2',
											_0: {ctor: '_Tuple3', _0: 255, _1: 228, _2: 196},
											_1: {ctor: '_Tuple3', _0: 33, _1: 1, _2: 0.88}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'Black',
											_1: {
												ctor: '_Tuple2',
												_0: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0},
												_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'BlanchedAlmond',
												_1: {
													ctor: '_Tuple2',
													_0: {ctor: '_Tuple3', _0: 255, _1: 235, _2: 205},
													_1: {ctor: '_Tuple3', _0: 36, _1: 1, _2: 0.9}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'Blue',
													_1: {
														ctor: '_Tuple2',
														_0: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 255},
														_1: {ctor: '_Tuple3', _0: 240, _1: 1, _2: 0.5}
													}
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'BlueViolet',
														_1: {
															ctor: '_Tuple2',
															_0: {ctor: '_Tuple3', _0: 138, _1: 43, _2: 226},
															_1: {ctor: '_Tuple3', _0: 271, _1: 0.76, _2: 0.53}
														}
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'Brown',
															_1: {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple3', _0: 165, _1: 42, _2: 42},
																_1: {ctor: '_Tuple3', _0: 0, _1: 0.59, _2: 0.41}
															}
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'BurlyWood',
																_1: {
																	ctor: '_Tuple2',
																	_0: {ctor: '_Tuple3', _0: 222, _1: 184, _2: 135},
																	_1: {ctor: '_Tuple3', _0: 34, _1: 0.57, _2: 0.7}
																}
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'CadetBlue',
																	_1: {
																		ctor: '_Tuple2',
																		_0: {ctor: '_Tuple3', _0: 95, _1: 158, _2: 160},
																		_1: {ctor: '_Tuple3', _0: 182, _1: 0.25, _2: 0.5}
																	}
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'Chartreuse',
																		_1: {
																			ctor: '_Tuple2',
																			_0: {ctor: '_Tuple3', _0: 127, _1: 255, _2: 0},
																			_1: {ctor: '_Tuple3', _0: 90, _1: 1, _2: 0.5}
																		}
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: 'Chocolate',
																			_1: {
																				ctor: '_Tuple2',
																				_0: {ctor: '_Tuple3', _0: 210, _1: 105, _2: 30},
																				_1: {ctor: '_Tuple3', _0: 25, _1: 0.75, _2: 0.47}
																			}
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: 'Coral',
																				_1: {
																					ctor: '_Tuple2',
																					_0: {ctor: '_Tuple3', _0: 255, _1: 127, _2: 80},
																					_1: {ctor: '_Tuple3', _0: 16, _1: 1, _2: 0.66}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '_Tuple2',
																					_0: 'CornflowerBlue',
																					_1: {
																						ctor: '_Tuple2',
																						_0: {ctor: '_Tuple3', _0: 100, _1: 149, _2: 237},
																						_1: {ctor: '_Tuple3', _0: 219, _1: 0.79, _2: 0.66}
																					}
																				},
																				_1: {
																					ctor: '::',
																					_0: {
																						ctor: '_Tuple2',
																						_0: 'Cornsilk',
																						_1: {
																							ctor: '_Tuple2',
																							_0: {ctor: '_Tuple3', _0: 255, _1: 248, _2: 220},
																							_1: {ctor: '_Tuple3', _0: 48, _1: 1, _2: 0.93}
																						}
																					},
																					_1: {
																						ctor: '::',
																						_0: {
																							ctor: '_Tuple2',
																							_0: 'Crimson',
																							_1: {
																								ctor: '_Tuple2',
																								_0: {ctor: '_Tuple3', _0: 220, _1: 20, _2: 60},
																								_1: {ctor: '_Tuple3', _0: 348, _1: 0.83, _2: 0.47}
																							}
																						},
																						_1: {
																							ctor: '::',
																							_0: {
																								ctor: '_Tuple2',
																								_0: 'Cyan',
																								_1: {
																									ctor: '_Tuple2',
																									_0: {ctor: '_Tuple3', _0: 0, _1: 255, _2: 255},
																									_1: {ctor: '_Tuple3', _0: 180, _1: 1, _2: 0.5}
																								}
																							},
																							_1: {
																								ctor: '::',
																								_0: {
																									ctor: '_Tuple2',
																									_0: 'DarkBlue',
																									_1: {
																										ctor: '_Tuple2',
																										_0: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 139},
																										_1: {ctor: '_Tuple3', _0: 240, _1: 1, _2: 0.27}
																									}
																								},
																								_1: {
																									ctor: '::',
																									_0: {
																										ctor: '_Tuple2',
																										_0: 'DarkCyan',
																										_1: {
																											ctor: '_Tuple2',
																											_0: {ctor: '_Tuple3', _0: 0, _1: 139, _2: 139},
																											_1: {ctor: '_Tuple3', _0: 180, _1: 1, _2: 0.27}
																										}
																									},
																									_1: {
																										ctor: '::',
																										_0: {
																											ctor: '_Tuple2',
																											_0: 'DarkGoldenRod',
																											_1: {
																												ctor: '_Tuple2',
																												_0: {ctor: '_Tuple3', _0: 184, _1: 134, _2: 11},
																												_1: {ctor: '_Tuple3', _0: 43, _1: 0.89, _2: 0.38}
																											}
																										},
																										_1: {
																											ctor: '::',
																											_0: {
																												ctor: '_Tuple2',
																												_0: 'DarkGray',
																												_1: {
																													ctor: '_Tuple2',
																													_0: {ctor: '_Tuple3', _0: 169, _1: 169, _2: 169},
																													_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.66}
																												}
																											},
																											_1: {
																												ctor: '::',
																												_0: {
																													ctor: '_Tuple2',
																													_0: 'DarkGrey',
																													_1: {
																														ctor: '_Tuple2',
																														_0: {ctor: '_Tuple3', _0: 169, _1: 169, _2: 169},
																														_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.66}
																													}
																												},
																												_1: {
																													ctor: '::',
																													_0: {
																														ctor: '_Tuple2',
																														_0: 'DarkGreen',
																														_1: {
																															ctor: '_Tuple2',
																															_0: {ctor: '_Tuple3', _0: 0, _1: 100, _2: 0},
																															_1: {ctor: '_Tuple3', _0: 120, _1: 1, _2: 0.2}
																														}
																													},
																													_1: {
																														ctor: '::',
																														_0: {
																															ctor: '_Tuple2',
																															_0: 'DarkKhaki',
																															_1: {
																																ctor: '_Tuple2',
																																_0: {ctor: '_Tuple3', _0: 189, _1: 183, _2: 107},
																																_1: {ctor: '_Tuple3', _0: 56, _1: 0.38, _2: 0.58}
																															}
																														},
																														_1: {
																															ctor: '::',
																															_0: {
																																ctor: '_Tuple2',
																																_0: 'DarkMagenta',
																																_1: {
																																	ctor: '_Tuple2',
																																	_0: {ctor: '_Tuple3', _0: 139, _1: 0, _2: 139},
																																	_1: {ctor: '_Tuple3', _0: 300, _1: 1, _2: 0.27}
																																}
																															},
																															_1: {
																																ctor: '::',
																																_0: {
																																	ctor: '_Tuple2',
																																	_0: 'DarkOliveGreen',
																																	_1: {
																																		ctor: '_Tuple2',
																																		_0: {ctor: '_Tuple3', _0: 85, _1: 107, _2: 47},
																																		_1: {ctor: '_Tuple3', _0: 82, _1: 0.39, _2: 0.3}
																																	}
																																},
																																_1: {
																																	ctor: '::',
																																	_0: {
																																		ctor: '_Tuple2',
																																		_0: 'DarkOrange',
																																		_1: {
																																			ctor: '_Tuple2',
																																			_0: {ctor: '_Tuple3', _0: 255, _1: 140, _2: 0},
																																			_1: {ctor: '_Tuple3', _0: 33, _1: 1, _2: 0.5}
																																		}
																																	},
																																	_1: {
																																		ctor: '::',
																																		_0: {
																																			ctor: '_Tuple2',
																																			_0: 'DarkOrchid',
																																			_1: {
																																				ctor: '_Tuple2',
																																				_0: {ctor: '_Tuple3', _0: 153, _1: 50, _2: 204},
																																				_1: {ctor: '_Tuple3', _0: 280, _1: 0.61, _2: 0.5}
																																			}
																																		},
																																		_1: {
																																			ctor: '::',
																																			_0: {
																																				ctor: '_Tuple2',
																																				_0: 'DarkRed',
																																				_1: {
																																					ctor: '_Tuple2',
																																					_0: {ctor: '_Tuple3', _0: 139, _1: 0, _2: 0},
																																					_1: {ctor: '_Tuple3', _0: 0, _1: 1, _2: 0.27}
																																				}
																																			},
																																			_1: {
																																				ctor: '::',
																																				_0: {
																																					ctor: '_Tuple2',
																																					_0: 'DarkSalmon',
																																					_1: {
																																						ctor: '_Tuple2',
																																						_0: {ctor: '_Tuple3', _0: 233, _1: 150, _2: 122},
																																						_1: {ctor: '_Tuple3', _0: 15, _1: 0.72, _2: 0.7}
																																					}
																																				},
																																				_1: {
																																					ctor: '::',
																																					_0: {
																																						ctor: '_Tuple2',
																																						_0: 'DarkSeaGreen',
																																						_1: {
																																							ctor: '_Tuple2',
																																							_0: {ctor: '_Tuple3', _0: 143, _1: 188, _2: 143},
																																							_1: {ctor: '_Tuple3', _0: 120, _1: 0.25, _2: 0.65}
																																						}
																																					},
																																					_1: {
																																						ctor: '::',
																																						_0: {
																																							ctor: '_Tuple2',
																																							_0: 'DarkSlateBlue',
																																							_1: {
																																								ctor: '_Tuple2',
																																								_0: {ctor: '_Tuple3', _0: 72, _1: 61, _2: 139},
																																								_1: {ctor: '_Tuple3', _0: 248, _1: 0.39, _2: 0.39}
																																							}
																																						},
																																						_1: {
																																							ctor: '::',
																																							_0: {
																																								ctor: '_Tuple2',
																																								_0: 'DarkSlateGray',
																																								_1: {
																																									ctor: '_Tuple2',
																																									_0: {ctor: '_Tuple3', _0: 47, _1: 79, _2: 79},
																																									_1: {ctor: '_Tuple3', _0: 180, _1: 0.25, _2: 0.25}
																																								}
																																							},
																																							_1: {
																																								ctor: '::',
																																								_0: {
																																									ctor: '_Tuple2',
																																									_0: 'DarkSlateGrey',
																																									_1: {
																																										ctor: '_Tuple2',
																																										_0: {ctor: '_Tuple3', _0: 47, _1: 79, _2: 79},
																																										_1: {ctor: '_Tuple3', _0: 180, _1: 0.25, _2: 0.25}
																																									}
																																								},
																																								_1: {
																																									ctor: '::',
																																									_0: {
																																										ctor: '_Tuple2',
																																										_0: 'DarkTurquoise',
																																										_1: {
																																											ctor: '_Tuple2',
																																											_0: {ctor: '_Tuple3', _0: 0, _1: 206, _2: 209},
																																											_1: {ctor: '_Tuple3', _0: 181, _1: 1, _2: 0.41}
																																										}
																																									},
																																									_1: {
																																										ctor: '::',
																																										_0: {
																																											ctor: '_Tuple2',
																																											_0: 'DarkViolet',
																																											_1: {
																																												ctor: '_Tuple2',
																																												_0: {ctor: '_Tuple3', _0: 148, _1: 0, _2: 211},
																																												_1: {ctor: '_Tuple3', _0: 282, _1: 1, _2: 0.41}
																																											}
																																										},
																																										_1: {
																																											ctor: '::',
																																											_0: {
																																												ctor: '_Tuple2',
																																												_0: 'DeepPink',
																																												_1: {
																																													ctor: '_Tuple2',
																																													_0: {ctor: '_Tuple3', _0: 255, _1: 20, _2: 147},
																																													_1: {ctor: '_Tuple3', _0: 328, _1: 1, _2: 0.54}
																																												}
																																											},
																																											_1: {
																																												ctor: '::',
																																												_0: {
																																													ctor: '_Tuple2',
																																													_0: 'DeepSkyBlue',
																																													_1: {
																																														ctor: '_Tuple2',
																																														_0: {ctor: '_Tuple3', _0: 0, _1: 191, _2: 255},
																																														_1: {ctor: '_Tuple3', _0: 195, _1: 1, _2: 0.5}
																																													}
																																												},
																																												_1: {
																																													ctor: '::',
																																													_0: {
																																														ctor: '_Tuple2',
																																														_0: 'DimGray',
																																														_1: {
																																															ctor: '_Tuple2',
																																															_0: {ctor: '_Tuple3', _0: 105, _1: 105, _2: 105},
																																															_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.41}
																																														}
																																													},
																																													_1: {
																																														ctor: '::',
																																														_0: {
																																															ctor: '_Tuple2',
																																															_0: 'DimGrey',
																																															_1: {
																																																ctor: '_Tuple2',
																																																_0: {ctor: '_Tuple3', _0: 105, _1: 105, _2: 105},
																																																_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.41}
																																															}
																																														},
																																														_1: {
																																															ctor: '::',
																																															_0: {
																																																ctor: '_Tuple2',
																																																_0: 'DodgerBlue',
																																																_1: {
																																																	ctor: '_Tuple2',
																																																	_0: {ctor: '_Tuple3', _0: 30, _1: 144, _2: 255},
																																																	_1: {ctor: '_Tuple3', _0: 210, _1: 1, _2: 0.56}
																																																}
																																															},
																																															_1: {
																																																ctor: '::',
																																																_0: {
																																																	ctor: '_Tuple2',
																																																	_0: 'FireBrick',
																																																	_1: {
																																																		ctor: '_Tuple2',
																																																		_0: {ctor: '_Tuple3', _0: 178, _1: 34, _2: 34},
																																																		_1: {ctor: '_Tuple3', _0: 0, _1: 0.68, _2: 0.42}
																																																	}
																																																},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {
																																																		ctor: '_Tuple2',
																																																		_0: 'FloralWhite',
																																																		_1: {
																																																			ctor: '_Tuple2',
																																																			_0: {ctor: '_Tuple3', _0: 255, _1: 250, _2: 240},
																																																			_1: {ctor: '_Tuple3', _0: 40, _1: 1, _2: 0.97}
																																																		}
																																																	},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {
																																																			ctor: '_Tuple2',
																																																			_0: 'ForestGreen',
																																																			_1: {
																																																				ctor: '_Tuple2',
																																																				_0: {ctor: '_Tuple3', _0: 34, _1: 139, _2: 34},
																																																				_1: {ctor: '_Tuple3', _0: 120, _1: 0.61, _2: 0.34}
																																																			}
																																																		},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {
																																																				ctor: '_Tuple2',
																																																				_0: 'Fuchsia',
																																																				_1: {
																																																					ctor: '_Tuple2',
																																																					_0: {ctor: '_Tuple3', _0: 255, _1: 0, _2: 255},
																																																					_1: {ctor: '_Tuple3', _0: 300, _1: 1, _2: 0.5}
																																																				}
																																																			},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {
																																																					ctor: '_Tuple2',
																																																					_0: 'Gainsboro',
																																																					_1: {
																																																						ctor: '_Tuple2',
																																																						_0: {ctor: '_Tuple3', _0: 220, _1: 220, _2: 220},
																																																						_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.86}
																																																					}
																																																				},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {
																																																						ctor: '_Tuple2',
																																																						_0: 'GhostWhite',
																																																						_1: {
																																																							ctor: '_Tuple2',
																																																							_0: {ctor: '_Tuple3', _0: 248, _1: 248, _2: 255},
																																																							_1: {ctor: '_Tuple3', _0: 240, _1: 1, _2: 0.99}
																																																						}
																																																					},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {
																																																							ctor: '_Tuple2',
																																																							_0: 'Gold',
																																																							_1: {
																																																								ctor: '_Tuple2',
																																																								_0: {ctor: '_Tuple3', _0: 255, _1: 215, _2: 0},
																																																								_1: {ctor: '_Tuple3', _0: 51, _1: 1, _2: 0.5}
																																																							}
																																																						},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {
																																																								ctor: '_Tuple2',
																																																								_0: 'GoldenRod',
																																																								_1: {
																																																									ctor: '_Tuple2',
																																																									_0: {ctor: '_Tuple3', _0: 218, _1: 165, _2: 32},
																																																									_1: {ctor: '_Tuple3', _0: 43, _1: 0.74, _2: 0.49}
																																																								}
																																																							},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {
																																																									ctor: '_Tuple2',
																																																									_0: 'Gray',
																																																									_1: {
																																																										ctor: '_Tuple2',
																																																										_0: {ctor: '_Tuple3', _0: 128, _1: 128, _2: 128},
																																																										_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.5}
																																																									}
																																																								},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {
																																																										ctor: '_Tuple2',
																																																										_0: 'Grey',
																																																										_1: {
																																																											ctor: '_Tuple2',
																																																											_0: {ctor: '_Tuple3', _0: 128, _1: 128, _2: 128},
																																																											_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.5}
																																																										}
																																																									},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {
																																																											ctor: '_Tuple2',
																																																											_0: 'Green',
																																																											_1: {
																																																												ctor: '_Tuple2',
																																																												_0: {ctor: '_Tuple3', _0: 0, _1: 128, _2: 0},
																																																												_1: {ctor: '_Tuple3', _0: 120, _1: 1, _2: 0.25}
																																																											}
																																																										},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {
																																																												ctor: '_Tuple2',
																																																												_0: 'GreenYellow',
																																																												_1: {
																																																													ctor: '_Tuple2',
																																																													_0: {ctor: '_Tuple3', _0: 173, _1: 255, _2: 47},
																																																													_1: {ctor: '_Tuple3', _0: 84, _1: 1, _2: 0.59}
																																																												}
																																																											},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {
																																																													ctor: '_Tuple2',
																																																													_0: 'HoneyDew',
																																																													_1: {
																																																														ctor: '_Tuple2',
																																																														_0: {ctor: '_Tuple3', _0: 240, _1: 255, _2: 240},
																																																														_1: {ctor: '_Tuple3', _0: 120, _1: 1, _2: 0.97}
																																																													}
																																																												},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {
																																																														ctor: '_Tuple2',
																																																														_0: 'HotPink',
																																																														_1: {
																																																															ctor: '_Tuple2',
																																																															_0: {ctor: '_Tuple3', _0: 255, _1: 105, _2: 180},
																																																															_1: {ctor: '_Tuple3', _0: 330, _1: 1, _2: 0.71}
																																																														}
																																																													},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {
																																																															ctor: '_Tuple2',
																																																															_0: 'IndianRed ',
																																																															_1: {
																																																																ctor: '_Tuple2',
																																																																_0: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0},
																																																																_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}
																																																															}
																																																														},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {
																																																																ctor: '_Tuple2',
																																																																_0: 'Indigo  ',
																																																																_1: {
																																																																	ctor: '_Tuple2',
																																																																	_0: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0},
																																																																	_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}
																																																																}
																																																															},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {
																																																																	ctor: '_Tuple2',
																																																																	_0: 'Ivory',
																																																																	_1: {
																																																																		ctor: '_Tuple2',
																																																																		_0: {ctor: '_Tuple3', _0: 255, _1: 255, _2: 240},
																																																																		_1: {ctor: '_Tuple3', _0: 60, _1: 1, _2: 0.97}
																																																																	}
																																																																},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {
																																																																		ctor: '_Tuple2',
																																																																		_0: 'Khaki',
																																																																		_1: {
																																																																			ctor: '_Tuple2',
																																																																			_0: {ctor: '_Tuple3', _0: 240, _1: 230, _2: 140},
																																																																			_1: {ctor: '_Tuple3', _0: 54, _1: 0.77, _2: 0.75}
																																																																		}
																																																																	},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {
																																																																			ctor: '_Tuple2',
																																																																			_0: 'Lavender',
																																																																			_1: {
																																																																				ctor: '_Tuple2',
																																																																				_0: {ctor: '_Tuple3', _0: 230, _1: 230, _2: 250},
																																																																				_1: {ctor: '_Tuple3', _0: 240, _1: 0.67, _2: 0.94}
																																																																			}
																																																																		},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {
																																																																				ctor: '_Tuple2',
																																																																				_0: 'LavenderBlush',
																																																																				_1: {
																																																																					ctor: '_Tuple2',
																																																																					_0: {ctor: '_Tuple3', _0: 255, _1: 240, _2: 245},
																																																																					_1: {ctor: '_Tuple3', _0: 340, _1: 1, _2: 0.97}
																																																																				}
																																																																			},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {
																																																																					ctor: '_Tuple2',
																																																																					_0: 'LawnGreen',
																																																																					_1: {
																																																																						ctor: '_Tuple2',
																																																																						_0: {ctor: '_Tuple3', _0: 124, _1: 252, _2: 0},
																																																																						_1: {ctor: '_Tuple3', _0: 90, _1: 1, _2: 0.49}
																																																																					}
																																																																				},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {
																																																																						ctor: '_Tuple2',
																																																																						_0: 'LemonChiffon',
																																																																						_1: {
																																																																							ctor: '_Tuple2',
																																																																							_0: {ctor: '_Tuple3', _0: 255, _1: 250, _2: 205},
																																																																							_1: {ctor: '_Tuple3', _0: 54, _1: 1, _2: 0.9}
																																																																						}
																																																																					},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {
																																																																							ctor: '_Tuple2',
																																																																							_0: 'LightBlue',
																																																																							_1: {
																																																																								ctor: '_Tuple2',
																																																																								_0: {ctor: '_Tuple3', _0: 173, _1: 216, _2: 230},
																																																																								_1: {ctor: '_Tuple3', _0: 195, _1: 0.53, _2: 0.79}
																																																																							}
																																																																						},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {
																																																																								ctor: '_Tuple2',
																																																																								_0: 'LightCoral',
																																																																								_1: {
																																																																									ctor: '_Tuple2',
																																																																									_0: {ctor: '_Tuple3', _0: 240, _1: 128, _2: 128},
																																																																									_1: {ctor: '_Tuple3', _0: 0, _1: 0.79, _2: 0.72}
																																																																								}
																																																																							},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {
																																																																									ctor: '_Tuple2',
																																																																									_0: 'LightCyan',
																																																																									_1: {
																																																																										ctor: '_Tuple2',
																																																																										_0: {ctor: '_Tuple3', _0: 224, _1: 255, _2: 255},
																																																																										_1: {ctor: '_Tuple3', _0: 180, _1: 1, _2: 0.94}
																																																																									}
																																																																								},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {
																																																																										ctor: '_Tuple2',
																																																																										_0: 'LightGoldenRodYellow',
																																																																										_1: {
																																																																											ctor: '_Tuple2',
																																																																											_0: {ctor: '_Tuple3', _0: 250, _1: 250, _2: 210},
																																																																											_1: {ctor: '_Tuple3', _0: 60, _1: 0.8, _2: 0.9}
																																																																										}
																																																																									},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {
																																																																											ctor: '_Tuple2',
																																																																											_0: 'LightGray',
																																																																											_1: {
																																																																												ctor: '_Tuple2',
																																																																												_0: {ctor: '_Tuple3', _0: 211, _1: 211, _2: 211},
																																																																												_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.83}
																																																																											}
																																																																										},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {
																																																																												ctor: '_Tuple2',
																																																																												_0: 'LightGrey',
																																																																												_1: {
																																																																													ctor: '_Tuple2',
																																																																													_0: {ctor: '_Tuple3', _0: 211, _1: 211, _2: 211},
																																																																													_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.83}
																																																																												}
																																																																											},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {
																																																																													ctor: '_Tuple2',
																																																																													_0: 'LightGreen',
																																																																													_1: {
																																																																														ctor: '_Tuple2',
																																																																														_0: {ctor: '_Tuple3', _0: 144, _1: 238, _2: 144},
																																																																														_1: {ctor: '_Tuple3', _0: 120, _1: 0.73, _2: 0.75}
																																																																													}
																																																																												},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {
																																																																														ctor: '_Tuple2',
																																																																														_0: 'LightPink',
																																																																														_1: {
																																																																															ctor: '_Tuple2',
																																																																															_0: {ctor: '_Tuple3', _0: 255, _1: 182, _2: 193},
																																																																															_1: {ctor: '_Tuple3', _0: 351, _1: 1, _2: 0.86}
																																																																														}
																																																																													},
																																																																													_1: {ctor: '[]'}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}),
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'LightSalmon',
			_1: {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple3', _0: 255, _1: 160, _2: 122},
				_1: {ctor: '_Tuple3', _0: 17, _1: 1, _2: 0.74}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'LightSeaGreen',
				_1: {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple3', _0: 32, _1: 178, _2: 170},
					_1: {ctor: '_Tuple3', _0: 177, _1: 0.7, _2: 0.41}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'LightSkyBlue',
					_1: {
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple3', _0: 135, _1: 206, _2: 250},
						_1: {ctor: '_Tuple3', _0: 203, _1: 0.92, _2: 0.75}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'LightSlateGray',
						_1: {
							ctor: '_Tuple2',
							_0: {ctor: '_Tuple3', _0: 119, _1: 136, _2: 153},
							_1: {ctor: '_Tuple3', _0: 210, _1: 0.14, _2: 0.53}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'LightSlateGrey',
							_1: {
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple3', _0: 119, _1: 136, _2: 153},
								_1: {ctor: '_Tuple3', _0: 210, _1: 0.14, _2: 0.53}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'LightSteelBlue',
								_1: {
									ctor: '_Tuple2',
									_0: {ctor: '_Tuple3', _0: 176, _1: 196, _2: 222},
									_1: {ctor: '_Tuple3', _0: 214, _1: 0.41, _2: 0.78}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'LightYellow',
									_1: {
										ctor: '_Tuple2',
										_0: {ctor: '_Tuple3', _0: 255, _1: 255, _2: 224},
										_1: {ctor: '_Tuple3', _0: 60, _1: 1, _2: 0.94}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'Lime',
										_1: {
											ctor: '_Tuple2',
											_0: {ctor: '_Tuple3', _0: 0, _1: 255, _2: 0},
											_1: {ctor: '_Tuple3', _0: 120, _1: 1, _2: 0.5}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'LimeGreen',
											_1: {
												ctor: '_Tuple2',
												_0: {ctor: '_Tuple3', _0: 50, _1: 205, _2: 50},
												_1: {ctor: '_Tuple3', _0: 120, _1: 0.61, _2: 0.5}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'Linen',
												_1: {
													ctor: '_Tuple2',
													_0: {ctor: '_Tuple3', _0: 250, _1: 240, _2: 230},
													_1: {ctor: '_Tuple3', _0: 30, _1: 0.67, _2: 0.94}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'Magenta',
													_1: {
														ctor: '_Tuple2',
														_0: {ctor: '_Tuple3', _0: 255, _1: 0, _2: 255},
														_1: {ctor: '_Tuple3', _0: 300, _1: 1, _2: 0.5}
													}
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'Maroon',
														_1: {
															ctor: '_Tuple2',
															_0: {ctor: '_Tuple3', _0: 128, _1: 0, _2: 0},
															_1: {ctor: '_Tuple3', _0: 0, _1: 1, _2: 0.25}
														}
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'MediumAquaMarine',
															_1: {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple3', _0: 102, _1: 205, _2: 170},
																_1: {ctor: '_Tuple3', _0: 160, _1: 0.51, _2: 0.6}
															}
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'MediumBlue',
																_1: {
																	ctor: '_Tuple2',
																	_0: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 205},
																	_1: {ctor: '_Tuple3', _0: 240, _1: 1, _2: 0.4}
																}
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'MediumOrchid',
																	_1: {
																		ctor: '_Tuple2',
																		_0: {ctor: '_Tuple3', _0: 186, _1: 85, _2: 211},
																		_1: {ctor: '_Tuple3', _0: 288, _1: 0.59, _2: 0.58}
																	}
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'MediumPurple',
																		_1: {
																			ctor: '_Tuple2',
																			_0: {ctor: '_Tuple3', _0: 147, _1: 112, _2: 219},
																			_1: {ctor: '_Tuple3', _0: 260, _1: 0.6, _2: 0.65}
																		}
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: 'MediumSeaGreen',
																			_1: {
																				ctor: '_Tuple2',
																				_0: {ctor: '_Tuple3', _0: 60, _1: 179, _2: 113},
																				_1: {ctor: '_Tuple3', _0: 147, _1: 0.5, _2: 0.47}
																			}
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: 'MediumSlateBlue',
																				_1: {
																					ctor: '_Tuple2',
																					_0: {ctor: '_Tuple3', _0: 123, _1: 104, _2: 238},
																					_1: {ctor: '_Tuple3', _0: 249, _1: 0.8, _2: 0.67}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '_Tuple2',
																					_0: 'MediumSpringGreen',
																					_1: {
																						ctor: '_Tuple2',
																						_0: {ctor: '_Tuple3', _0: 0, _1: 250, _2: 154},
																						_1: {ctor: '_Tuple3', _0: 157, _1: 1, _2: 0.49}
																					}
																				},
																				_1: {
																					ctor: '::',
																					_0: {
																						ctor: '_Tuple2',
																						_0: 'MediumTurquoise',
																						_1: {
																							ctor: '_Tuple2',
																							_0: {ctor: '_Tuple3', _0: 72, _1: 209, _2: 204},
																							_1: {ctor: '_Tuple3', _0: 178, _1: 0.6, _2: 0.55}
																						}
																					},
																					_1: {
																						ctor: '::',
																						_0: {
																							ctor: '_Tuple2',
																							_0: 'MediumVioletRed',
																							_1: {
																								ctor: '_Tuple2',
																								_0: {ctor: '_Tuple3', _0: 199, _1: 21, _2: 133},
																								_1: {ctor: '_Tuple3', _0: 322, _1: 0.81, _2: 0.43}
																							}
																						},
																						_1: {
																							ctor: '::',
																							_0: {
																								ctor: '_Tuple2',
																								_0: 'MidnightBlue',
																								_1: {
																									ctor: '_Tuple2',
																									_0: {ctor: '_Tuple3', _0: 25, _1: 25, _2: 112},
																									_1: {ctor: '_Tuple3', _0: 240, _1: 0.64, _2: 0.27}
																								}
																							},
																							_1: {
																								ctor: '::',
																								_0: {
																									ctor: '_Tuple2',
																									_0: 'MintCream',
																									_1: {
																										ctor: '_Tuple2',
																										_0: {ctor: '_Tuple3', _0: 245, _1: 255, _2: 250},
																										_1: {ctor: '_Tuple3', _0: 150, _1: 1, _2: 0.98}
																									}
																								},
																								_1: {
																									ctor: '::',
																									_0: {
																										ctor: '_Tuple2',
																										_0: 'MistyRose',
																										_1: {
																											ctor: '_Tuple2',
																											_0: {ctor: '_Tuple3', _0: 255, _1: 228, _2: 225},
																											_1: {ctor: '_Tuple3', _0: 6, _1: 1, _2: 0.94}
																										}
																									},
																									_1: {
																										ctor: '::',
																										_0: {
																											ctor: '_Tuple2',
																											_0: 'Moccasin',
																											_1: {
																												ctor: '_Tuple2',
																												_0: {ctor: '_Tuple3', _0: 255, _1: 228, _2: 181},
																												_1: {ctor: '_Tuple3', _0: 38, _1: 1, _2: 0.85}
																											}
																										},
																										_1: {
																											ctor: '::',
																											_0: {
																												ctor: '_Tuple2',
																												_0: 'NavajoWhite',
																												_1: {
																													ctor: '_Tuple2',
																													_0: {ctor: '_Tuple3', _0: 255, _1: 222, _2: 173},
																													_1: {ctor: '_Tuple3', _0: 36, _1: 1, _2: 0.84}
																												}
																											},
																											_1: {
																												ctor: '::',
																												_0: {
																													ctor: '_Tuple2',
																													_0: 'Navy',
																													_1: {
																														ctor: '_Tuple2',
																														_0: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 128},
																														_1: {ctor: '_Tuple3', _0: 240, _1: 1, _2: 0.25}
																													}
																												},
																												_1: {
																													ctor: '::',
																													_0: {
																														ctor: '_Tuple2',
																														_0: 'OldLace',
																														_1: {
																															ctor: '_Tuple2',
																															_0: {ctor: '_Tuple3', _0: 253, _1: 245, _2: 230},
																															_1: {ctor: '_Tuple3', _0: 39, _1: 0.85, _2: 0.95}
																														}
																													},
																													_1: {
																														ctor: '::',
																														_0: {
																															ctor: '_Tuple2',
																															_0: 'Olive',
																															_1: {
																																ctor: '_Tuple2',
																																_0: {ctor: '_Tuple3', _0: 128, _1: 128, _2: 0},
																																_1: {ctor: '_Tuple3', _0: 60, _1: 1, _2: 0.25}
																															}
																														},
																														_1: {
																															ctor: '::',
																															_0: {
																																ctor: '_Tuple2',
																																_0: 'OliveDrab',
																																_1: {
																																	ctor: '_Tuple2',
																																	_0: {ctor: '_Tuple3', _0: 107, _1: 142, _2: 35},
																																	_1: {ctor: '_Tuple3', _0: 80, _1: 0.6, _2: 0.35}
																																}
																															},
																															_1: {
																																ctor: '::',
																																_0: {
																																	ctor: '_Tuple2',
																																	_0: 'Orange',
																																	_1: {
																																		ctor: '_Tuple2',
																																		_0: {ctor: '_Tuple3', _0: 255, _1: 165, _2: 0},
																																		_1: {ctor: '_Tuple3', _0: 39, _1: 1, _2: 0.5}
																																	}
																																},
																																_1: {
																																	ctor: '::',
																																	_0: {
																																		ctor: '_Tuple2',
																																		_0: 'OrangeRed',
																																		_1: {
																																			ctor: '_Tuple2',
																																			_0: {ctor: '_Tuple3', _0: 255, _1: 69, _2: 0},
																																			_1: {ctor: '_Tuple3', _0: 16, _1: 1, _2: 0.5}
																																		}
																																	},
																																	_1: {
																																		ctor: '::',
																																		_0: {
																																			ctor: '_Tuple2',
																																			_0: 'Orchid',
																																			_1: {
																																				ctor: '_Tuple2',
																																				_0: {ctor: '_Tuple3', _0: 218, _1: 112, _2: 214},
																																				_1: {ctor: '_Tuple3', _0: 302, _1: 0.59, _2: 0.65}
																																			}
																																		},
																																		_1: {
																																			ctor: '::',
																																			_0: {
																																				ctor: '_Tuple2',
																																				_0: 'PaleGoldenRod',
																																				_1: {
																																					ctor: '_Tuple2',
																																					_0: {ctor: '_Tuple3', _0: 238, _1: 232, _2: 170},
																																					_1: {ctor: '_Tuple3', _0: 55, _1: 0.67, _2: 0.8}
																																				}
																																			},
																																			_1: {
																																				ctor: '::',
																																				_0: {
																																					ctor: '_Tuple2',
																																					_0: 'PaleGreen',
																																					_1: {
																																						ctor: '_Tuple2',
																																						_0: {ctor: '_Tuple3', _0: 152, _1: 251, _2: 152},
																																						_1: {ctor: '_Tuple3', _0: 120, _1: 0.93, _2: 0.79}
																																					}
																																				},
																																				_1: {
																																					ctor: '::',
																																					_0: {
																																						ctor: '_Tuple2',
																																						_0: 'PaleTurquoise',
																																						_1: {
																																							ctor: '_Tuple2',
																																							_0: {ctor: '_Tuple3', _0: 175, _1: 238, _2: 238},
																																							_1: {ctor: '_Tuple3', _0: 180, _1: 0.65, _2: 0.81}
																																						}
																																					},
																																					_1: {
																																						ctor: '::',
																																						_0: {
																																							ctor: '_Tuple2',
																																							_0: 'PaleVioletRed',
																																							_1: {
																																								ctor: '_Tuple2',
																																								_0: {ctor: '_Tuple3', _0: 219, _1: 112, _2: 147},
																																								_1: {ctor: '_Tuple3', _0: 340, _1: 0.6, _2: 0.65}
																																							}
																																						},
																																						_1: {
																																							ctor: '::',
																																							_0: {
																																								ctor: '_Tuple2',
																																								_0: 'PapayaWhip',
																																								_1: {
																																									ctor: '_Tuple2',
																																									_0: {ctor: '_Tuple3', _0: 255, _1: 239, _2: 213},
																																									_1: {ctor: '_Tuple3', _0: 37, _1: 1, _2: 0.92}
																																								}
																																							},
																																							_1: {
																																								ctor: '::',
																																								_0: {
																																									ctor: '_Tuple2',
																																									_0: 'PeachPuff',
																																									_1: {
																																										ctor: '_Tuple2',
																																										_0: {ctor: '_Tuple3', _0: 255, _1: 218, _2: 185},
																																										_1: {ctor: '_Tuple3', _0: 28, _1: 1, _2: 0.86}
																																									}
																																								},
																																								_1: {
																																									ctor: '::',
																																									_0: {
																																										ctor: '_Tuple2',
																																										_0: 'Peru',
																																										_1: {
																																											ctor: '_Tuple2',
																																											_0: {ctor: '_Tuple3', _0: 205, _1: 133, _2: 63},
																																											_1: {ctor: '_Tuple3', _0: 30, _1: 0.59, _2: 0.53}
																																										}
																																									},
																																									_1: {
																																										ctor: '::',
																																										_0: {
																																											ctor: '_Tuple2',
																																											_0: 'Pink',
																																											_1: {
																																												ctor: '_Tuple2',
																																												_0: {ctor: '_Tuple3', _0: 255, _1: 192, _2: 203},
																																												_1: {ctor: '_Tuple3', _0: 350, _1: 1, _2: 0.88}
																																											}
																																										},
																																										_1: {
																																											ctor: '::',
																																											_0: {
																																												ctor: '_Tuple2',
																																												_0: 'Plum',
																																												_1: {
																																													ctor: '_Tuple2',
																																													_0: {ctor: '_Tuple3', _0: 221, _1: 160, _2: 221},
																																													_1: {ctor: '_Tuple3', _0: 300, _1: 0.47, _2: 0.75}
																																												}
																																											},
																																											_1: {
																																												ctor: '::',
																																												_0: {
																																													ctor: '_Tuple2',
																																													_0: 'PowderBlue',
																																													_1: {
																																														ctor: '_Tuple2',
																																														_0: {ctor: '_Tuple3', _0: 176, _1: 224, _2: 230},
																																														_1: {ctor: '_Tuple3', _0: 187, _1: 0.52, _2: 0.8}
																																													}
																																												},
																																												_1: {
																																													ctor: '::',
																																													_0: {
																																														ctor: '_Tuple2',
																																														_0: 'Purple',
																																														_1: {
																																															ctor: '_Tuple2',
																																															_0: {ctor: '_Tuple3', _0: 128, _1: 0, _2: 128},
																																															_1: {ctor: '_Tuple3', _0: 300, _1: 1, _2: 0.25}
																																														}
																																													},
																																													_1: {
																																														ctor: '::',
																																														_0: {
																																															ctor: '_Tuple2',
																																															_0: 'RebeccaPurple',
																																															_1: {
																																																ctor: '_Tuple2',
																																																_0: {ctor: '_Tuple3', _0: 102, _1: 51, _2: 153},
																																																_1: {ctor: '_Tuple3', _0: 270, _1: 0.5, _2: 0.4}
																																															}
																																														},
																																														_1: {
																																															ctor: '::',
																																															_0: {
																																																ctor: '_Tuple2',
																																																_0: 'Red',
																																																_1: {
																																																	ctor: '_Tuple2',
																																																	_0: {ctor: '_Tuple3', _0: 255, _1: 0, _2: 0},
																																																	_1: {ctor: '_Tuple3', _0: 0, _1: 1, _2: 0.5}
																																																}
																																															},
																																															_1: {
																																																ctor: '::',
																																																_0: {
																																																	ctor: '_Tuple2',
																																																	_0: 'RosyBrown',
																																																	_1: {
																																																		ctor: '_Tuple2',
																																																		_0: {ctor: '_Tuple3', _0: 188, _1: 143, _2: 143},
																																																		_1: {ctor: '_Tuple3', _0: 0, _1: 0.25, _2: 0.65}
																																																	}
																																																},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {
																																																		ctor: '_Tuple2',
																																																		_0: 'RoyalBlue',
																																																		_1: {
																																																			ctor: '_Tuple2',
																																																			_0: {ctor: '_Tuple3', _0: 65, _1: 105, _2: 225},
																																																			_1: {ctor: '_Tuple3', _0: 225, _1: 0.73, _2: 0.57}
																																																		}
																																																	},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {
																																																			ctor: '_Tuple2',
																																																			_0: 'SaddleBrown',
																																																			_1: {
																																																				ctor: '_Tuple2',
																																																				_0: {ctor: '_Tuple3', _0: 139, _1: 69, _2: 19},
																																																				_1: {ctor: '_Tuple3', _0: 25, _1: 0.76, _2: 0.31}
																																																			}
																																																		},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {
																																																				ctor: '_Tuple2',
																																																				_0: 'Salmon',
																																																				_1: {
																																																					ctor: '_Tuple2',
																																																					_0: {ctor: '_Tuple3', _0: 250, _1: 128, _2: 114},
																																																					_1: {ctor: '_Tuple3', _0: 6, _1: 0.93, _2: 0.71}
																																																				}
																																																			},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {
																																																					ctor: '_Tuple2',
																																																					_0: 'SandyBrown',
																																																					_1: {
																																																						ctor: '_Tuple2',
																																																						_0: {ctor: '_Tuple3', _0: 244, _1: 164, _2: 96},
																																																						_1: {ctor: '_Tuple3', _0: 28, _1: 0.87, _2: 0.67}
																																																					}
																																																				},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {
																																																						ctor: '_Tuple2',
																																																						_0: 'SeaGreen',
																																																						_1: {
																																																							ctor: '_Tuple2',
																																																							_0: {ctor: '_Tuple3', _0: 46, _1: 139, _2: 87},
																																																							_1: {ctor: '_Tuple3', _0: 146, _1: 0.5, _2: 0.36}
																																																						}
																																																					},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {
																																																							ctor: '_Tuple2',
																																																							_0: 'SeaShell',
																																																							_1: {
																																																								ctor: '_Tuple2',
																																																								_0: {ctor: '_Tuple3', _0: 255, _1: 245, _2: 238},
																																																								_1: {ctor: '_Tuple3', _0: 25, _1: 1, _2: 0.97}
																																																							}
																																																						},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {
																																																								ctor: '_Tuple2',
																																																								_0: 'Sienna',
																																																								_1: {
																																																									ctor: '_Tuple2',
																																																									_0: {ctor: '_Tuple3', _0: 160, _1: 82, _2: 45},
																																																									_1: {ctor: '_Tuple3', _0: 19, _1: 0.56, _2: 0.4}
																																																								}
																																																							},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {
																																																									ctor: '_Tuple2',
																																																									_0: 'Silver',
																																																									_1: {
																																																										ctor: '_Tuple2',
																																																										_0: {ctor: '_Tuple3', _0: 192, _1: 192, _2: 192},
																																																										_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.75}
																																																									}
																																																								},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {
																																																										ctor: '_Tuple2',
																																																										_0: 'SkyBlue',
																																																										_1: {
																																																											ctor: '_Tuple2',
																																																											_0: {ctor: '_Tuple3', _0: 135, _1: 206, _2: 235},
																																																											_1: {ctor: '_Tuple3', _0: 197, _1: 0.71, _2: 0.73}
																																																										}
																																																									},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {
																																																											ctor: '_Tuple2',
																																																											_0: 'SlateBlue',
																																																											_1: {
																																																												ctor: '_Tuple2',
																																																												_0: {ctor: '_Tuple3', _0: 106, _1: 90, _2: 205},
																																																												_1: {ctor: '_Tuple3', _0: 248, _1: 0.53, _2: 0.58}
																																																											}
																																																										},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {
																																																												ctor: '_Tuple2',
																																																												_0: 'SlateGray',
																																																												_1: {
																																																													ctor: '_Tuple2',
																																																													_0: {ctor: '_Tuple3', _0: 112, _1: 128, _2: 144},
																																																													_1: {ctor: '_Tuple3', _0: 210, _1: 0.13, _2: 0.5}
																																																												}
																																																											},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {
																																																													ctor: '_Tuple2',
																																																													_0: 'SlateGrey',
																																																													_1: {
																																																														ctor: '_Tuple2',
																																																														_0: {ctor: '_Tuple3', _0: 112, _1: 128, _2: 144},
																																																														_1: {ctor: '_Tuple3', _0: 210, _1: 0.13, _2: 0.5}
																																																													}
																																																												},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {
																																																														ctor: '_Tuple2',
																																																														_0: 'Snow',
																																																														_1: {
																																																															ctor: '_Tuple2',
																																																															_0: {ctor: '_Tuple3', _0: 255, _1: 250, _2: 250},
																																																															_1: {ctor: '_Tuple3', _0: 0, _1: 1, _2: 0.99}
																																																														}
																																																													},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {
																																																															ctor: '_Tuple2',
																																																															_0: 'SpringGreen',
																																																															_1: {
																																																																ctor: '_Tuple2',
																																																																_0: {ctor: '_Tuple3', _0: 0, _1: 255, _2: 127},
																																																																_1: {ctor: '_Tuple3', _0: 150, _1: 1, _2: 0.5}
																																																															}
																																																														},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {
																																																																ctor: '_Tuple2',
																																																																_0: 'SteelBlue',
																																																																_1: {
																																																																	ctor: '_Tuple2',
																																																																	_0: {ctor: '_Tuple3', _0: 70, _1: 130, _2: 180},
																																																																	_1: {ctor: '_Tuple3', _0: 207, _1: 0.44, _2: 0.49}
																																																																}
																																																															},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {
																																																																	ctor: '_Tuple2',
																																																																	_0: 'Tan',
																																																																	_1: {
																																																																		ctor: '_Tuple2',
																																																																		_0: {ctor: '_Tuple3', _0: 210, _1: 180, _2: 140},
																																																																		_1: {ctor: '_Tuple3', _0: 34, _1: 0.44, _2: 0.69}
																																																																	}
																																																																},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {
																																																																		ctor: '_Tuple2',
																																																																		_0: 'Teal',
																																																																		_1: {
																																																																			ctor: '_Tuple2',
																																																																			_0: {ctor: '_Tuple3', _0: 0, _1: 128, _2: 128},
																																																																			_1: {ctor: '_Tuple3', _0: 180, _1: 1, _2: 0.25}
																																																																		}
																																																																	},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {
																																																																			ctor: '_Tuple2',
																																																																			_0: 'Thistle',
																																																																			_1: {
																																																																				ctor: '_Tuple2',
																																																																				_0: {ctor: '_Tuple3', _0: 216, _1: 191, _2: 216},
																																																																				_1: {ctor: '_Tuple3', _0: 300, _1: 0.24, _2: 0.8}
																																																																			}
																																																																		},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {
																																																																				ctor: '_Tuple2',
																																																																				_0: 'Tomato',
																																																																				_1: {
																																																																					ctor: '_Tuple2',
																																																																					_0: {ctor: '_Tuple3', _0: 255, _1: 99, _2: 71},
																																																																					_1: {ctor: '_Tuple3', _0: 9, _1: 1, _2: 0.64}
																																																																				}
																																																																			},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {
																																																																					ctor: '_Tuple2',
																																																																					_0: 'Turquoise',
																																																																					_1: {
																																																																						ctor: '_Tuple2',
																																																																						_0: {ctor: '_Tuple3', _0: 64, _1: 224, _2: 208},
																																																																						_1: {ctor: '_Tuple3', _0: 174, _1: 0.72, _2: 0.56}
																																																																					}
																																																																				},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {
																																																																						ctor: '_Tuple2',
																																																																						_0: 'Violet',
																																																																						_1: {
																																																																							ctor: '_Tuple2',
																																																																							_0: {ctor: '_Tuple3', _0: 238, _1: 130, _2: 238},
																																																																							_1: {ctor: '_Tuple3', _0: 300, _1: 0.76, _2: 0.72}
																																																																						}
																																																																					},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {
																																																																							ctor: '_Tuple2',
																																																																							_0: 'Wheat',
																																																																							_1: {
																																																																								ctor: '_Tuple2',
																																																																								_0: {ctor: '_Tuple3', _0: 245, _1: 222, _2: 179},
																																																																								_1: {ctor: '_Tuple3', _0: 39, _1: 0.77, _2: 0.83}
																																																																							}
																																																																						},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {
																																																																								ctor: '_Tuple2',
																																																																								_0: 'White',
																																																																								_1: {
																																																																									ctor: '_Tuple2',
																																																																									_0: {ctor: '_Tuple3', _0: 255, _1: 255, _2: 255},
																																																																									_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 1}
																																																																								}
																																																																							},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {
																																																																									ctor: '_Tuple2',
																																																																									_0: 'WhiteSmoke',
																																																																									_1: {
																																																																										ctor: '_Tuple2',
																																																																										_0: {ctor: '_Tuple3', _0: 245, _1: 245, _2: 245},
																																																																										_1: {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0.96}
																																																																									}
																																																																								},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {
																																																																										ctor: '_Tuple2',
																																																																										_0: 'Yellow',
																																																																										_1: {
																																																																											ctor: '_Tuple2',
																																																																											_0: {ctor: '_Tuple3', _0: 255, _1: 255, _2: 0},
																																																																											_1: {ctor: '_Tuple3', _0: 60, _1: 1, _2: 0.5}
																																																																										}
																																																																									},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {
																																																																											ctor: '_Tuple2',
																																																																											_0: 'YellowGreen',
																																																																											_1: {
																																																																												ctor: '_Tuple2',
																																																																												_0: {ctor: '_Tuple3', _0: 154, _1: 205, _2: 50},
																																																																												_1: {ctor: '_Tuple3', _0: 80, _1: 0.61, _2: 0.5}
																																																																											}
																																																																										},
																																																																										_1: {ctor: '[]'}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$ColorNum$convertStringToRgbAndHue = function (_p0) {
	var _p1 = _p0;
	var colorName = _elm_lang$core$String$toLower(_p1._1);
	var values = A2(_user$project$Utils$maybeFind, colorName, _user$project$ColorNum$htmlColorNames);
	return A2(
		_user$project$Utils$mapMaybe,
		function (_p2) {
			var _p3 = _p2;
			var colorNum = _elm_lang$core$Native_Utils.eq(colorName, 'black') ? 360 : (_elm_lang$core$Native_Utils.eq(colorName, 'white') ? 499 : ((A2(_elm_lang$core$String$contains, 'gray', colorName) || A2(_elm_lang$core$String$contains, 'grey', colorName)) ? 450 : _p3._1._0));
			return {
				ctor: '_Tuple3',
				_0: _p1._0,
				_1: {ctor: '_Tuple3', _0: _p3._0._0, _1: _p3._0._1, _2: _p3._0._2},
				_2: colorNum
			};
		},
		values);
};
var _user$project$ColorNum$numToSaturatedColor = function (val) {
	var min = 55;
	var max = 200;
	var diff = max - min;
	var n = _elm_lang$core$Basics$toFloat(
		A2(_elm_lang$core$Basics_ops['%'], val, 360));
	var i = (_elm_lang$core$Basics$floor(n) / 60) | 0;
	var _p4 = i;
	switch (_p4) {
		case 0:
			return {
				ctor: '_Tuple4',
				_0: max,
				_1: _elm_lang$core$Basics$round(min + (diff * (1 - ((60 - n) / 60)))),
				_2: min,
				_3: 1.0
			};
		case 1:
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Basics$round(max - (diff * (1 - ((120 - n) / 60)))),
				_1: max,
				_2: min,
				_3: 1.0
			};
		case 2:
			return {
				ctor: '_Tuple4',
				_0: min,
				_1: max,
				_2: _elm_lang$core$Basics$round(min + (diff * (1 - ((180 - n) / 60)))),
				_3: 1.0
			};
		case 3:
			return {
				ctor: '_Tuple4',
				_0: min,
				_1: _elm_lang$core$Basics$round(max - (diff * (1 - ((240 - n) / 60)))),
				_2: max,
				_3: 1.0
			};
		case 4:
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Basics$round(min + (diff * (1 - ((300 - n) / 60)))),
				_1: min,
				_2: max,
				_3: 1.0
			};
		case 5:
			return {
				ctor: '_Tuple4',
				_0: max,
				_1: min,
				_2: _elm_lang$core$Basics$round(max - (diff * (1 - ((360 - n) / 60)))),
				_3: 1.0
			};
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'ColorNum',
				{
					start: {line: 47, column: 4},
					end: {line: 54, column: 35}
				},
				_p4)('numToColor');
	}
};
var _user$project$ColorNum$maxColorNum = 530;
var _user$project$ColorNum$numToColorScaled = F2(
	function (width, i) {
		var rescale = F3(
			function (_p7, _p6, x) {
				var _p8 = _p7;
				var _p11 = _p8._0;
				var _p9 = _p6;
				var _p10 = _p9._0;
				var rangeIn = _p8._1 - _p11;
				var rangeOut = _p9._1 - _p10;
				return (((_elm_lang$core$Basics$toFloat(x) - _p11) / rangeIn) * rangeOut) + _p10;
			});
		var gray = function (j) {
			return _elm_lang$core$Basics$round(
				A3(
					rescale,
					{ctor: '_Tuple2', _0: 380, _1: 480},
					{ctor: '_Tuple2', _0: 0, _1: 255},
					j));
		};
		var j = _elm_lang$core$Basics$round((i / width) * _user$project$ColorNum$maxColorNum);
		if (A2(
			_user$project$Utils$between,
			j,
			{ctor: '_Tuple2', _0: 0, _1: 360})) {
			return _user$project$ColorNum$numToSaturatedColor(j);
		} else {
			if (A2(
				_user$project$Utils$between,
				j,
				{ctor: '_Tuple2', _0: 360, _1: 380})) {
				return {ctor: '_Tuple4', _0: 0, _1: 0, _2: 0, _3: 1.0};
			} else {
				if (A2(
					_user$project$Utils$between,
					j,
					{ctor: '_Tuple2', _0: 380, _1: 480})) {
					var x = gray(j);
					return {ctor: '_Tuple4', _0: x, _1: x, _2: x, _3: 1.0};
				} else {
					if (A2(
						_user$project$Utils$between,
						j,
						{ctor: '_Tuple2', _0: 480, _1: 500})) {
						return {ctor: '_Tuple4', _0: 255, _1: 255, _2: 255, _3: 1.0};
					} else {
						var opacity = _elm_lang$core$Basics$sqrt(
							A3(
								rescale,
								{ctor: '_Tuple2', _0: 500, _1: 529},
								{ctor: '_Tuple2', _0: 1.0, _1: 0.0},
								j));
						return {ctor: '_Tuple4', _0: 255, _1: 255, _2: 255, _3: opacity};
					}
				}
			}
		}
	});
var _user$project$ColorNum$numToColor = _user$project$ColorNum$numToColorScaled(_user$project$ColorNum$maxColorNum);

var _user$project$Either$Right = function (a) {
	return {ctor: 'Right', _0: a};
};
var _user$project$Either$Left = function (a) {
	return {ctor: 'Left', _0: a};
};

var _user$project$LangSvg$fetchMovieFrameVal = F6(
	function (showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, movieVal) {
		var _p0 = _user$project$Lang$unwrapVList(movieVal);
		_v0_2:
		do {
			if (((((_p0.ctor === 'Just') && (_p0._0.ctor === '::')) && (_p0._0._0.ctor === 'VBase')) && (_p0._0._0._0.ctor === 'VString')) && (_p0._0._1.ctor === '::')) {
				if (_p0._0._1._1.ctor === '[]') {
					if ((_p0._0._0._0._0 === 'Static') && (_p0._0._1._0.ctor === 'VClosure')) {
						var getFrameValClosure = A2(
							_user$project$Utils$geti,
							2,
							A2(_user$project$Lang$vListToVals, 'fetchMovieFrameVal1', movieVal));
						return A2(
							_elm_lang$core$Result$map,
							function (_p1) {
								var _p2 = _p1;
								return _p2._0._0;
							},
							A4(
								_user$project$Eval$doEval,
								showPreludeOffsets,
								syntax,
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'getFrameVal', _1: getFrameValClosure},
									_1: {ctor: '[]'}
								},
								A2(
									_user$project$Lang$eCall,
									'getFrameVal',
									{
										ctor: '::',
										_0: _user$project$Lang$eConstDummyLoc(
											_elm_lang$core$Basics$toFloat(slideNumber)),
										_1: {
											ctor: '::',
											_0: _user$project$Lang$eConstDummyLoc(
												_elm_lang$core$Basics$toFloat(movieNumber)),
											_1: {ctor: '[]'}
										}
									})));
					} else {
						break _v0_2;
					}
				} else {
					if ((((((((_p0._0._0._0._0 === 'Dynamic') && (_p0._0._1._0.ctor === 'VConst')) && (_p0._0._1._0._1.ctor === '_Tuple2')) && (_p0._0._1._1._0.ctor === 'VClosure')) && (_p0._0._1._1._1.ctor === '::')) && (_p0._0._1._1._1._0.ctor === 'VBase')) && (_p0._0._1._1._1._0._0.ctor === 'VBool')) && (_p0._0._1._1._1._1.ctor === '[]')) {
						var getFrameValClosure = A2(
							_user$project$Utils$geti,
							3,
							A2(_user$project$Lang$vListToVals, 'fetchMovieFrameVal2', movieVal));
						return A2(
							_elm_lang$core$Result$map,
							function (_p3) {
								var _p4 = _p3;
								return _p4._0._0;
							},
							A4(
								_user$project$Eval$doEval,
								showPreludeOffsets,
								syntax,
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'getFrameVal', _1: getFrameValClosure},
									_1: {ctor: '[]'}
								},
								A2(
									_user$project$Lang$eCall,
									'getFrameVal',
									{
										ctor: '::',
										_0: _user$project$Lang$eConstDummyLoc(
											_elm_lang$core$Basics$toFloat(slideNumber)),
										_1: {
											ctor: '::',
											_0: _user$project$Lang$eConstDummyLoc(
												_elm_lang$core$Basics$toFloat(movieNumber)),
											_1: {
												ctor: '::',
												_0: _user$project$Lang$eConstDummyLoc(movieTime),
												_1: {ctor: '[]'}
											}
										}
									})));
					} else {
						break _v0_2;
					}
				}
			} else {
				break _v0_2;
			}
		} while(false);
		return _elm_lang$core$Result$Ok(movieVal);
	});
var _user$project$LangSvg$fetchMovieDurationAndContinueBool = function (movieVal) {
	var _p5 = _user$project$Lang$unwrapVList(movieVal);
	_v3_2:
	do {
		if (((((_p5.ctor === 'Just') && (_p5._0.ctor === '::')) && (_p5._0._0.ctor === 'VBase')) && (_p5._0._0._0.ctor === 'VString')) && (_p5._0._1.ctor === '::')) {
			if (_p5._0._1._1.ctor === '[]') {
				if ((_p5._0._0._0._0 === 'Static') && (_p5._0._1._0.ctor === 'VClosure')) {
					return {ctor: '_Tuple2', _0: 0.0, _1: false};
				} else {
					break _v3_2;
				}
			} else {
				if ((((((((_p5._0._0._0._0 === 'Dynamic') && (_p5._0._1._0.ctor === 'VConst')) && (_p5._0._1._0._1.ctor === '_Tuple2')) && (_p5._0._1._1._0.ctor === 'VClosure')) && (_p5._0._1._1._1.ctor === '::')) && (_p5._0._1._1._1._0.ctor === 'VBase')) && (_p5._0._1._1._1._0._0.ctor === 'VBool')) && (_p5._0._1._1._1._1.ctor === '[]')) {
					return {ctor: '_Tuple2', _0: _p5._0._1._0._1._0, _1: _p5._0._1._1._1._0._0._0};
				} else {
					break _v3_2;
				}
			}
		} else {
			break _v3_2;
		}
	} while(false);
	return {ctor: '_Tuple2', _0: 0.0, _1: false};
};
var _user$project$LangSvg$fetchMovieCount = function (slideVal) {
	var _p6 = _user$project$Lang$unwrapVList(slideVal);
	if ((((((_p6.ctor === 'Just') && (_p6._0.ctor === '::')) && (_p6._0._0.ctor === 'VConst')) && (_p6._0._0._1.ctor === '_Tuple2')) && (_p6._0._1.ctor === '::')) && (_p6._0._1._1.ctor === '[]')) {
		return _elm_lang$core$Basics$round(_p6._0._0._1._0);
	} else {
		return 1;
	}
};
var _user$project$LangSvg$fetchSlideCount = function (val) {
	var _p7 = _user$project$Lang$unwrapVList(val);
	if ((((((_p7.ctor === 'Just') && (_p7._0.ctor === '::')) && (_p7._0._0.ctor === 'VConst')) && (_p7._0._0._1.ctor === '_Tuple2')) && (_p7._0._1.ctor === '::')) && (_p7._0._1._1.ctor === '[]')) {
		return _elm_lang$core$Basics$round(_p7._0._0._1._0);
	} else {
		return 1;
	}
};
var _user$project$LangSvg$vIntFrozen = function (n) {
	return {
		v_: A2(
			_user$project$Lang$VConst,
			_elm_lang$core$Maybe$Nothing,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toFloat(n),
				_1: _user$project$Lang$dummyTrace
			}),
		provenance: A2(
			_user$project$Lang$Provenance,
			_user$project$Lang$eConstDummyLoc0(
				_elm_lang$core$Basics$toFloat(n)),
			{ctor: '[]'}),
		parents: _user$project$Lang$Parents(
			{ctor: '[]'})
	};
};
var _user$project$LangSvg$fetchSlideVal = F4(
	function (showPreludeOffsets, syntax, slideNumber, val) {
		var _p8 = _user$project$Lang$unwrapVList(val);
		if (((((((((_p8.ctor === 'Just') && (_p8._0.ctor === '::')) && (_p8._0._0.ctor === 'VConst')) && (_p8._0._0._1.ctor === '_Tuple2')) && (_p8._0._1.ctor === '::')) && (_p8._0._1._0.ctor === 'VClosure')) && (_p8._0._1._0._1.ctor === '::')) && (_p8._0._1._0._1._1.ctor === '[]')) && (_p8._0._1._1.ctor === '[]')) {
			var _p12 = _p8._0._1._0._1._0;
			var _p9 = _p12.val.p__;
			if (_p9.ctor === 'PVar') {
				var fenv_ = {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _p9._1,
						_1: _user$project$LangSvg$vIntFrozen(slideNumber)
					},
					_1: _p8._0._1._0._3
				};
				return A2(
					_elm_lang$core$Result$map,
					function (_p10) {
						var _p11 = _p10;
						return _p11._0._0;
					},
					A4(_user$project$Eval$doEval, showPreludeOffsets, syntax, fenv_, _p8._0._1._0._2));
			} else {
				return _elm_lang$core$Result$Err(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'expected slide function to take a single argument, got ',
						_elm_lang$core$Basics$toString(_p12.val.p__)));
			}
		} else {
			return _elm_lang$core$Result$Ok(val);
		}
	});
var _user$project$LangSvg$resolveToMovieCount = F4(
	function (showPreludeOffsets, syntax, slideNumber, val) {
		return A2(
			_elm_lang$core$Result$map,
			_user$project$LangSvg$fetchMovieCount,
			A4(_user$project$LangSvg$fetchSlideVal, showPreludeOffsets, syntax, slideNumber, val));
	});
var _user$project$LangSvg$fetchMovieVal = F4(
	function (showPreludeOffsets, syntax, movieNumber, slideVal) {
		var _p13 = _user$project$Lang$unwrapVList(slideVal);
		if (((((((((_p13.ctor === 'Just') && (_p13._0.ctor === '::')) && (_p13._0._0.ctor === 'VConst')) && (_p13._0._0._1.ctor === '_Tuple2')) && (_p13._0._1.ctor === '::')) && (_p13._0._1._0.ctor === 'VClosure')) && (_p13._0._1._0._1.ctor === '::')) && (_p13._0._1._0._1._1.ctor === '[]')) && (_p13._0._1._1.ctor === '[]')) {
			var _p17 = _p13._0._1._0._1._0;
			var _p14 = _p17.val.p__;
			if (_p14.ctor === 'PVar') {
				var fenv_ = {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _p14._1,
						_1: _user$project$LangSvg$vIntFrozen(movieNumber)
					},
					_1: _p13._0._1._0._3
				};
				return A2(
					_elm_lang$core$Result$map,
					function (_p15) {
						var _p16 = _p15;
						return _p16._0._0;
					},
					A4(_user$project$Eval$doEval, showPreludeOffsets, syntax, fenv_, _p13._0._1._0._2));
			} else {
				return _elm_lang$core$Result$Err(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'expected movie function to take a single argument, got ',
						_elm_lang$core$Basics$toString(_p17.val.p__)));
			}
		} else {
			return _elm_lang$core$Result$Ok(slideVal);
		}
	});
var _user$project$LangSvg$fetchEverything_ = F6(
	function (showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, val) {
		var slideCount = _user$project$LangSvg$fetchSlideCount(val);
		return A2(
			_elm_lang$core$Result$andThen,
			function (slideVal) {
				var movieCount = _user$project$LangSvg$fetchMovieCount(slideVal);
				return A2(
					_elm_lang$core$Result$andThen,
					function (movieVal) {
						var _p18 = _user$project$LangSvg$fetchMovieDurationAndContinueBool(movieVal);
						var movieDuration = _p18._0;
						var $continue = _p18._1;
						return A2(
							_elm_lang$core$Result$map,
							function (movieFrameVal) {
								return {ctor: '_Tuple5', _0: slideCount, _1: movieCount, _2: movieDuration, _3: $continue, _4: movieFrameVal};
							},
							A6(_user$project$LangSvg$fetchMovieFrameVal, showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, movieVal));
					},
					A4(_user$project$LangSvg$fetchMovieVal, showPreludeOffsets, syntax, movieNumber, slideVal));
			},
			A4(_user$project$LangSvg$fetchSlideVal, showPreludeOffsets, syntax, slideNumber, val));
	});
var _user$project$LangSvg$resolveToMovieFrameVal = F6(
	function (showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, val) {
		return A2(
			_elm_lang$core$Result$map,
			function (_p19) {
				var _p20 = _p19;
				return _p20._4;
			},
			A6(_user$project$LangSvg$fetchEverything_, showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, val));
	});
var _user$project$LangSvg$foldSlate = F3(
	function (_p21, acc, f) {
		var _p22 = _p21;
		var foldNode = F2(
			function (i, acc) {
				var node = A3(_user$project$Utils$justGet_, 'foldSlate', i, _p22._1);
				var _p23 = node.interpreted;
				if (_p23.ctor === 'TextNode') {
					return A3(f, i, node, acc);
				} else {
					return A3(
						f,
						i,
						node,
						A3(_elm_lang$core$List$foldl, foldNode, acc, _p23._2));
				}
			});
		return A2(foldNode, _p22._0, acc);
	});
var _user$project$LangSvg$foldSlateNodeInfo = F3(
	function (slate, acc, f) {
		return A3(
			_user$project$LangSvg$foldSlate,
			slate,
			acc,
			F2(
				function (i, node) {
					var _p24 = node.interpreted;
					if (_p24.ctor === 'TextNode') {
						return f(
							_user$project$Either$Left(
								{ctor: '_Tuple2', _0: i, _1: _p24._0}));
					} else {
						return f(
							_user$project$Either$Right(
								{ctor: '_Tuple3', _0: i, _1: _p24._0, _2: _p24._1}));
					}
				}));
	});
var _user$project$LangSvg$childNodeIds = function (node) {
	var _p25 = node.interpreted;
	if (_p25.ctor === 'SvgNode') {
		return _p25._2;
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$LangSvg$descendantNodeIds = F2(
	function (indexedTree, node) {
		var childIds = _user$project$LangSvg$childNodeIds(node);
		var deeperIds = A2(
			_elm_lang$core$List$concatMap,
			_user$project$LangSvg$descendantNodeIds(indexedTree),
			A2(
				_elm_lang$core$List$filterMap,
				function (nodeId) {
					return A2(_elm_lang$core$Dict$get, nodeId, indexedTree);
				},
				childIds));
		return A2(_elm_lang$core$Basics_ops['++'], childIds, deeperIds);
	});
var _user$project$LangSvg$maybeGetSvgNode = F2(
	function (nodeId, _p26) {
		var _p27 = _p26;
		var _p28 = A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.interpreted;
			},
			A2(_elm_lang$core$Dict$get, nodeId, _p27._1));
		if ((_p28.ctor === 'Just') && (_p28._0.ctor === 'SvgNode')) {
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple3', _0: _p28._0._0, _1: _p28._0._1, _2: _p28._0._2});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LangSvg$justGetSvgNode = F3(
	function (cap, nodeId, slate) {
		return A2(
			_user$project$Utils$fromJust_,
			A2(_elm_lang$core$Basics_ops['++'], 'justGetSvgNode: ', cap),
			A2(_user$project$LangSvg$maybeGetSvgNode, nodeId, slate));
	});
var _user$project$LangSvg$maybeFindBounds = function (l) {
	var _p29 = A2(_user$project$Utils$maybeFind, 'BOUNDS', l);
	if (_p29.ctor === 'Nothing') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var roundBounds = true;
		var _p30 = {ctor: '_Tuple2', _0: _p29._0.interpreted, _1: roundBounds};
		_v20_2:
		do {
			if ((_p30.ctor === '_Tuple2') && (_p30._0.ctor === 'ABounds')) {
				if (_p30._1 === false) {
					return _elm_lang$core$Maybe$Just(_p30._0._0);
				} else {
					if (_p30._0._0.ctor === '_Tuple4') {
						var f = _elm_lang$core$Tuple$mapFirst(
							function (_p31) {
								return _elm_lang$core$Basics$toFloat(
									_elm_lang$core$Basics$round(_p31));
							});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple4',
								_0: f(_p30._0._0._0),
								_1: f(_p30._0._0._1),
								_2: f(_p30._0._0._2),
								_3: f(_p30._0._0._3)
							});
					} else {
						break _v20_2;
					}
				}
			} else {
				break _v20_2;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$LangSvg$maybeFindBlobId = function (l) {
	var _p32 = A2(_user$project$Utils$maybeFind, 'BLOB', l);
	if (_p32.ctor === 'Nothing') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p33 = _p32._0.interpreted;
		if (_p33.ctor === 'AString') {
			return _elm_lang$core$Maybe$Just(
				_user$project$Utils$parseInt(_p33._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _user$project$LangSvg$findAVal = F2(
	function (attr, attrs) {
		var _p34 = A2(_user$project$Utils$maybeFind, attr, attrs);
		if (_p34.ctor === 'Just') {
			return _p34._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'LangSvg',
				{
					start: {line: 714, column: 3},
					end: {line: 716, column: 53}
				},
				_p34)(
				A2(_elm_lang$core$Basics_ops['++'], 'findAVal: ', attr));
		}
	});
var _user$project$LangSvg$aVal = function (av_) {
	return {
		interpreted: av_,
		val: {
			v_: _user$project$Lang$VList(
				{ctor: '[]'}),
			provenance: _user$project$Lang$dummyProvenance,
			parents: _user$project$Lang$Parents(
				{ctor: '[]'})
		}
	};
};
var _user$project$LangSvg$vNodeChildren = function (svg) {
	return _user$project$Native_LangSvg.vNodeChildren(svg);
};
var _user$project$LangSvg$vNodeTag = function (svg) {
	return _user$project$Native_LangSvg.vNodeTag(svg);
};
var _user$project$LangSvg$vNodeType = function (svg) {
	return _user$project$Native_LangSvg.vNodeType(svg);
};
var _user$project$LangSvg$maybeSvgChildren = function (svg) {
	return (_elm_lang$core$Native_Utils.eq(
		_user$project$LangSvg$vNodeType(svg),
		'node') && _elm_lang$core$Native_Utils.eq(
		_user$project$LangSvg$vNodeTag(svg),
		'svg')) ? _elm_lang$core$Maybe$Just(
		_user$project$LangSvg$vNodeChildren(svg)) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$LangSvg$maybeInlineListOfShapes = function (svg) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		{
			ctor: '::',
			_0: svg,
			_1: {ctor: '[]'}
		},
		_user$project$LangSvg$maybeSvgChildren(svg));
};
var _user$project$LangSvg$estimatedBounds = function (svg) {
	return _user$project$Native_LangSvg.estimatedBounds(svg);
};
var _user$project$LangSvg$getBoundsAttrs = function (attrs0) {
	return A2(
		_elm_lang$core$Maybe$andThen,
		function (_p36) {
			var _p37 = _p36;
			return A2(
				_elm_lang$core$Maybe$andThen,
				function (_p38) {
					var _p39 = _p38;
					return A2(
						_elm_lang$core$Maybe$andThen,
						function (_p40) {
							var _p41 = _p40;
							return A2(
								_elm_lang$core$Maybe$andThen,
								function (_p42) {
									var _p43 = _p42;
									var _p44 = {ctor: '_Tuple4', _0: _p37._0.interpreted, _1: _p41._0.interpreted, _2: _p39._0.interpreted, _3: _p43._0.interpreted};
									if (((((((((_p44.ctor === '_Tuple4') && (_p44._0.ctor === 'ANum')) && (_p44._0._0.ctor === '_Tuple2')) && (_p44._1.ctor === 'ANum')) && (_p44._1._0.ctor === '_Tuple2')) && (_p44._2.ctor === 'ANum')) && (_p44._2._0.ctor === '_Tuple2')) && (_p44._3.ctor === 'ANum')) && (_p44._3._0.ctor === '_Tuple2')) {
										return _elm_lang$core$Maybe$Just(
											{ctor: '_Tuple5', _0: _p44._0._0._0, _1: _p44._1._0._0, _2: _p44._2._0._0, _3: _p44._3._0._0, _4: _p43._1});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								},
								A2(_user$project$Utils$maybeRemoveFirst, 'BOT', _p41._1));
						},
						A2(_user$project$Utils$maybeRemoveFirst, 'TOP', _p39._1));
				},
				A2(_user$project$Utils$maybeRemoveFirst, 'RIGHT', _p37._1));
		},
		A2(_user$project$Utils$maybeRemoveFirst, 'LEFT', attrs0));
};
var _user$project$LangSvg$specialAttrs = {
	ctor: '::',
	_0: 'HIDDEN',
	_1: {
		ctor: '::',
		_0: 'ZONES',
		_1: {ctor: '[]'}
	}
};
var _user$project$LangSvg$removeSpecialAttrs = _elm_lang$core$List$filter(
	function (_p45) {
		var _p46 = _p45;
		return !A2(_elm_lang$core$List$member, _p46._0, _user$project$LangSvg$specialAttrs);
	});
var _user$project$LangSvg$strBounds = function (_p47) {
	var _p48 = _p47;
	return _user$project$Utils$spaces(
		A2(
			_elm_lang$core$List$map,
			function (_p49) {
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Tuple$first(_p49));
			},
			{
				ctor: '::',
				_0: _p48._0,
				_1: {
					ctor: '::',
					_0: _p48._1,
					_1: {
						ctor: '::',
						_0: _p48._2,
						_1: {
							ctor: '::',
							_0: _p48._3,
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};
var _user$project$LangSvg$strTransformCmd = function (cmd) {
	var _p50 = cmd;
	switch (_p50.ctor) {
		case 'Rot':
			var nums = A2(
				_elm_lang$core$List$map,
				function (_p51) {
					return _elm_lang$core$Basics$toString(
						_elm_lang$core$Tuple$first(_p51));
				},
				{
					ctor: '::',
					_0: _p50._0,
					_1: {
						ctor: '::',
						_0: _p50._1,
						_1: {
							ctor: '::',
							_0: _p50._2,
							_1: {ctor: '[]'}
						}
					}
				});
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'rotate',
				_user$project$Utils$parens(
					_user$project$Utils$spaces(nums)));
		case 'Scale':
			var nums = A2(
				_elm_lang$core$List$map,
				function (_p52) {
					return _elm_lang$core$Basics$toString(
						_elm_lang$core$Tuple$first(_p52));
				},
				{
					ctor: '::',
					_0: _p50._0,
					_1: {
						ctor: '::',
						_0: _p50._1,
						_1: {ctor: '[]'}
					}
				});
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'scale',
				_user$project$Utils$parens(
					_user$project$Utils$spaces(nums)));
		default:
			var nums = A2(
				_elm_lang$core$List$map,
				function (_p53) {
					return _elm_lang$core$Basics$toString(
						_elm_lang$core$Tuple$first(_p53));
				},
				{
					ctor: '::',
					_0: _p50._0,
					_1: {
						ctor: '::',
						_0: _p50._1,
						_1: {ctor: '[]'}
					}
				});
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'translate',
				_user$project$Utils$parens(
					_user$project$Utils$spaces(nums)));
	}
};
var _user$project$LangSvg$strAPathCmds = function () {
	var strPt = function (_p54) {
		var _p55 = _p54;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(
				_elm_lang$core$Tuple$first(_p55._1._0)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				_elm_lang$core$Basics$toString(
					_elm_lang$core$Tuple$first(_p55._1._1))));
	};
	var strNum = function (_p56) {
		var _p57 = _p56;
		return _elm_lang$core$Basics$toString(_p57._0);
	};
	var strPathCmd = function (c) {
		var _p58 = c;
		switch (_p58.ctor) {
			case 'CmdZ':
				return _p58._0;
			case 'CmdMLT':
				return _user$project$Utils$spaces(
					{
						ctor: '::',
						_0: _p58._0,
						_1: {
							ctor: '::',
							_0: strPt(_p58._1),
							_1: {ctor: '[]'}
						}
					});
			case 'CmdHV':
				return _user$project$Utils$spaces(
					{
						ctor: '::',
						_0: _p58._0,
						_1: {
							ctor: '::',
							_0: strNum(_p58._1),
							_1: {ctor: '[]'}
						}
					});
			case 'CmdC':
				return _user$project$Utils$spaces(
					{
						ctor: '::',
						_0: _p58._0,
						_1: A2(
							_elm_lang$core$List$map,
							strPt,
							{
								ctor: '::',
								_0: _p58._1,
								_1: {
									ctor: '::',
									_0: _p58._2,
									_1: {
										ctor: '::',
										_0: _p58._3,
										_1: {ctor: '[]'}
									}
								}
							})
					});
			case 'CmdSQ':
				return _user$project$Utils$spaces(
					{
						ctor: '::',
						_0: _p58._0,
						_1: A2(
							_elm_lang$core$List$map,
							strPt,
							{
								ctor: '::',
								_0: _p58._1,
								_1: {
									ctor: '::',
									_0: _p58._2,
									_1: {ctor: '[]'}
								}
							})
					});
			default:
				return _user$project$Utils$spaces(
					{
						ctor: '::',
						_0: _p58._0,
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$List$map,
								strNum,
								{
									ctor: '::',
									_0: _p58._1,
									_1: {
										ctor: '::',
										_0: _p58._2,
										_1: {
											ctor: '::',
											_0: _p58._3,
											_1: {
												ctor: '::',
												_0: _p58._4,
												_1: {
													ctor: '::',
													_0: _p58._5,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							{
								ctor: '::',
								_0: strPt(_p58._6),
								_1: {ctor: '[]'}
							})
					});
		}
	};
	return function (_p59) {
		return _user$project$Utils$spaces(
			A2(_elm_lang$core$List$map, strPathCmd, _p59));
	};
}();
var _user$project$LangSvg$matchCmd = F2(
	function (cmd, s) {
		var c = _user$project$Utils$unwrap1(
			_elm_lang$core$String$toList(cmd));
		var cs = _elm_lang$core$String$toList(s);
		return A2(
			_elm_lang$core$List$member,
			c,
			A2(
				_elm_lang$core$Basics_ops['++'],
				cs,
				A2(_elm_lang$core$List$map, _elm_lang$core$Char$toLower, cs)));
	});
var _user$project$LangSvg$projConsts = F2(
	function (k, vs) {
		var _p60 = {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.eq(k, 0),
			_1: vs
		};
		_v35_2:
		do {
			if (_p60.ctor === '_Tuple2') {
				if (_p60._0 === true) {
					return {
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: vs
					};
				} else {
					if (_p60._1.ctor === '::') {
						var _p61 = _p60._1._0.v_;
						if (_p61.ctor === 'VConst') {
							var _p62 = A2(_user$project$LangSvg$projConsts, k - 1, _p60._1._1);
							var l1 = _p62._0;
							var l2 = _p62._1;
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: _p61._1, _1: l1},
								_1: l2
							};
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'LangSvg',
								{
									start: {line: 388, column: 7},
									end: {line: 393, column: 35}
								},
								_p61)('projConsts');
						}
					} else {
						break _v35_2;
					}
				}
			} else {
				break _v35_2;
			}
		} while(false);
		return _elm_lang$core$Native_Utils.crashCase(
			'LangSvg',
			{
				start: {line: 385, column: 3},
				end: {line: 395, column: 31}
			},
			_p60)('projConsts');
	});
var _user$project$LangSvg$addIdPoints = F3(
	function (cmd, counts, pts) {
		var c = _user$project$Utils$unwrap1(
			_elm_lang$core$String$toList(cmd));
		if (_elm_lang$core$Char$isLower(c)) {
			return {
				ctor: '_Tuple2',
				_0: counts,
				_1: A2(
					_elm_lang$core$List$map,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})(_elm_lang$core$Maybe$Nothing),
					pts)
			};
		} else {
			if (_elm_lang$core$Char$isUpper(c)) {
				var _p65 = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (pt, _p66) {
							var _p67 = _p66;
							var _p68 = _p67._0;
							var nextId = 1 + _p68.numPoints;
							var acc1_ = _elm_lang$core$Native_Utils.update(
								_p68,
								{numPoints: nextId});
							var acc2_ = {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Maybe$Just(nextId),
									_1: pt
								},
								_1: _p67._1
							};
							return {ctor: '_Tuple2', _0: acc1_, _1: acc2_};
						}),
					{
						ctor: '_Tuple2',
						_0: counts,
						_1: {ctor: '[]'}
					},
					pts);
				var counts_ = _p65._0;
				var l = _p65._1;
				return {
					ctor: '_Tuple2',
					_0: counts_,
					_1: _elm_lang$core$List$reverse(l)
				};
			} else {
				return _elm_lang$core$Native_Utils.crash(
					'LangSvg',
					{
						start: {line: 382, column: 5},
						end: {line: 382, column: 16}
					})('addIdPoints');
			}
		}
	});
var _user$project$LangSvg_ops = _user$project$LangSvg_ops || {};
_user$project$LangSvg_ops['+++'] = F2(
	function (x, _p69) {
		var _p70 = _p69;
		return {
			ctor: '_Tuple2',
			_0: {ctor: '::', _0: x, _1: _p70._0},
			_1: _p70._1
		};
	});
var _user$project$LangSvg$strRgba_ = function (rgba) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'rgba',
		_user$project$Utils$parens(
			_user$project$Utils$commas(
				A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, rgba))));
};
var _user$project$LangSvg$strRgba = function (_p71) {
	var _p72 = _p71;
	return _user$project$LangSvg$strRgba_(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			{
				ctor: '::',
				_0: _p72._0,
				_1: {
					ctor: '::',
					_0: _p72._1,
					_1: {
						ctor: '::',
						_0: _p72._2,
						_1: {
							ctor: '::',
							_0: _p72._3,
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};
var _user$project$LangSvg$strPoint = function (_p73) {
	var _p74 = _p73;
	var _p75 = _user$project$Utils$unwrap2(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			{
				ctor: '::',
				_0: _p74._0,
				_1: {
					ctor: '::',
					_0: _p74._1,
					_1: {ctor: '[]'}
				}
			}));
	var x = _p75._0;
	var y = _p75._1;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(x),
		A2(
			_elm_lang$core$Basics_ops['++'],
			',',
			_elm_lang$core$Basics$toString(y)));
};
var _user$project$LangSvg$strAVal = function (a) {
	var _p76 = a.interpreted;
	switch (_p76.ctor) {
		case 'AString':
			return _p76._0;
		case 'ANum':
			return _elm_lang$core$Basics$toString(
				_elm_lang$core$Tuple$first(_p76._0));
		case 'APoints':
			return _user$project$Utils$spaces(
				A2(_elm_lang$core$List$map, _user$project$LangSvg$strPoint, _p76._0));
		case 'ARgba':
			return _user$project$LangSvg$strRgba(_p76._0);
		case 'APath2':
			return _user$project$LangSvg$strAPathCmds(
				_elm_lang$core$Tuple$first(_p76._0));
		case 'ATransform':
			return _user$project$Utils$spaces(
				A2(_elm_lang$core$List$map, _user$project$LangSvg$strTransformCmd, _p76._0));
		case 'ABounds':
			return _user$project$LangSvg$strBounds(_p76._0);
		case 'AColorNum':
			if (_p76._0._1.ctor === 'Nothing') {
				var _p77 = _user$project$ColorNum$numToColor(_p76._0._0._0);
				var r = _p77._0;
				var g = _p77._1;
				var b = _p77._2;
				var o = _p77._3;
				return _user$project$LangSvg$strRgba_(
					{
						ctor: '::',
						_0: _elm_lang$core$Basics$toFloat(r),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toFloat(g),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toFloat(b),
								_1: {
									ctor: '::',
									_0: o,
									_1: {ctor: '[]'}
								}
							}
						}
					});
			} else {
				var _p78 = _user$project$ColorNum$numToColor(_p76._0._0._0);
				var r = _p78._0;
				var g = _p78._1;
				var b = _p78._2;
				var o = _p78._3;
				return _user$project$LangSvg$strRgba_(
					{
						ctor: '::',
						_0: _elm_lang$core$Basics$toFloat(r),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toFloat(g),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toFloat(b),
								_1: {
									ctor: '::',
									_0: o * _p76._0._1._0._0,
									_1: {ctor: '[]'}
								}
							}
						}
					});
			}
		default:
			return _user$project$LangSvg$strStyle(_p76._0);
	}
};
var _user$project$LangSvg$strStyle = function (styles) {
	return A2(
		_elm_lang$core$String$join,
		'; ',
		A2(
			_elm_lang$core$List$map,
			function (_p79) {
				var _p80 = _p79;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p80._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						': ',
						_user$project$LangSvg$strAVal(_p80._1)));
			},
			styles));
};
var _user$project$LangSvg$printAttr = function (_p81) {
	var _p82 = _p81;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_p82._0,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'=',
			A3(
				_user$project$Utils$delimit,
				'\'',
				'\'',
				_user$project$LangSvg$strAVal(_p82._1))));
};
var _user$project$LangSvg$printAttrs = function (l) {
	var _p83 = l;
	if (_p83.ctor === '[]') {
		return '';
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			' ',
			_user$project$Utils$spaces(
				A2(_elm_lang$core$List$map, _user$project$LangSvg$printAttr, l)));
	}
};
var _user$project$LangSvg$rootIsShapeOrText = function (_p84) {
	var _p85 = _p84;
	var _p86 = A2(
		_elm_lang$core$Maybe$map,
		function (_) {
			return _.interpreted;
		},
		A2(_elm_lang$core$Dict$get, _p85._0, _p85._1));
	if (_p86.ctor === 'Just') {
		if (_p86._0.ctor === 'TextNode') {
			return true;
		} else {
			return A2(
				_elm_lang$core$List$member,
				_p86._0._0,
				{
					ctor: '::',
					_0: 'svg',
					_1: {
						ctor: '::',
						_0: 'g',
						_1: {
							ctor: '::',
							_0: 'line',
							_1: {
								ctor: '::',
								_0: 'rect',
								_1: {
									ctor: '::',
									_0: 'circle',
									_1: {
										ctor: '::',
										_0: 'ellipse',
										_1: {
											ctor: '::',
											_0: 'path',
											_1: {
												ctor: '::',
												_0: 'polygon',
												_1: {
													ctor: '::',
													_0: 'polyline',
													_1: {
														ctor: '::',
														_0: 'text',
														_1: {
															ctor: '::',
															_0: 'image',
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				});
		}
	} else {
		return false;
	}
};
var _user$project$LangSvg$maxStrokeWidthNum = 20;
var _user$project$LangSvg$replaceAv_ = F2(
	function (av, av_) {
		return {interpreted: av_, val: av.val};
	});
var _user$project$LangSvg$expectedButGotStr = F2(
	function (x, s) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'expected ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				x,
				A2(_elm_lang$core$Basics_ops['++'], ', but got: ', s)));
	});
var _user$project$LangSvg$expectedButGotCrash = F2(
	function (x, s) {
		return _elm_lang$core$Native_Utils.crash(
			'LangSvg',
			{
				start: {line: 68, column: 27},
				end: {line: 68, column: 38}
			})(
			A2(_user$project$LangSvg$expectedButGotStr, x, s));
	});
var _user$project$LangSvg$toNum = function (a) {
	var _p87 = a.interpreted;
	if (_p87.ctor === 'ANum') {
		return _p87._0;
	} else {
		return A2(
			_user$project$LangSvg$expectedButGotCrash,
			'a number',
			_user$project$LangSvg$strAVal(a));
	}
};
var _user$project$LangSvg$toColorNum = function (a) {
	var _p88 = a.interpreted;
	if (_p88.ctor === 'AColorNum') {
		return _p88._0;
	} else {
		return A2(
			_user$project$LangSvg$expectedButGotCrash,
			'a color number',
			_user$project$LangSvg$strAVal(a));
	}
};
var _user$project$LangSvg$toNumIsh = function (a) {
	var _p89 = a.interpreted;
	_v49_2:
	do {
		switch (_p89.ctor) {
			case 'ANum':
				return _p89._0;
			case 'AColorNum':
				if (_p89._0.ctor === '_Tuple2') {
					return _p89._0._0;
				} else {
					break _v49_2;
				}
			default:
				break _v49_2;
		}
	} while(false);
	return A2(
		_user$project$LangSvg$expectedButGotCrash,
		'a number or color number',
		_user$project$LangSvg$strAVal(a));
};
var _user$project$LangSvg$findNumishAttr = F2(
	function (attr, attrs) {
		return _user$project$LangSvg$toNumIsh(
			A2(_user$project$LangSvg$findAVal, attr, attrs));
	});
var _user$project$LangSvg$toPoints = function (a) {
	var _p90 = a.interpreted;
	if (_p90.ctor === 'APoints') {
		return _p90._0;
	} else {
		return A2(
			_user$project$LangSvg$expectedButGotCrash,
			'a list of points',
			_user$project$LangSvg$strAVal(a));
	}
};
var _user$project$LangSvg$getPolyPoints = function (attrs) {
	var _p91 = A2(_user$project$Utils$maybeFind, 'points', attrs);
	if (_p91.ctor === 'Just') {
		return _user$project$LangSvg$toPoints(_p91._0);
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'LangSvg',
			{
				start: {line: 724, column: 3},
				end: {line: 726, column: 45}
			},
			_p91)('getPolyPoints');
	}
};
var _user$project$LangSvg$getPtCount = function (attrs) {
	return _elm_lang$core$List$length(
		_user$project$LangSvg$getPolyPoints(attrs));
};
var _user$project$LangSvg$getPolyPoint = F2(
	function (attrs, i) {
		return A2(
			_user$project$Utils$geti,
			i,
			_user$project$LangSvg$getPolyPoints(attrs));
	});
var _user$project$LangSvg$toPath = function (a) {
	var _p93 = a.interpreted;
	if (_p93.ctor === 'APath2') {
		return _p93._0;
	} else {
		return A2(
			_user$project$LangSvg$expectedButGotCrash,
			'path commands',
			_user$project$LangSvg$strAVal(a));
	}
};
var _user$project$LangSvg$pathIndexPoints = function (nodeAttrs) {
	var cmds = _elm_lang$core$Tuple$first(
		_user$project$LangSvg$toPath(
			A3(
				_user$project$Utils$find,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'pathPoints nodeAttrs looking for \"d\" in ',
					_elm_lang$core$Basics$toString(nodeAttrs)),
				nodeAttrs,
				'd')));
	var pts = A2(
		_elm_lang$core$List$filterMap,
		function (_p94) {
			var _p95 = _p94;
			var _p96 = _p95._0;
			if (_p96.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p96._0, _1: _p95._1});
			}
		},
		A2(
			_elm_lang$core$List$concatMap,
			function (cmd) {
				var _p97 = cmd;
				switch (_p97.ctor) {
					case 'CmdZ':
						return {ctor: '[]'};
					case 'CmdMLT':
						return {
							ctor: '::',
							_0: _p97._1,
							_1: {ctor: '[]'}
						};
					case 'CmdHV':
						return {ctor: '[]'};
					case 'CmdC':
						return {
							ctor: '::',
							_0: _p97._1,
							_1: {
								ctor: '::',
								_0: _p97._2,
								_1: {
									ctor: '::',
									_0: _p97._3,
									_1: {ctor: '[]'}
								}
							}
						};
					case 'CmdSQ':
						return {
							ctor: '::',
							_0: _p97._1,
							_1: {
								ctor: '::',
								_0: _p97._2,
								_1: {ctor: '[]'}
							}
						};
					default:
						return {
							ctor: '::',
							_0: _p97._6,
							_1: {ctor: '[]'}
						};
				}
			},
			cmds));
	return pts;
};
var _user$project$LangSvg$getPathPoint = F2(
	function (attrs, i) {
		var _p98 = A2(
			_user$project$Utils$maybeFind,
			i,
			_user$project$LangSvg$pathIndexPoints(attrs));
		if (_p98.ctor === 'Just') {
			return _p98._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'LangSvg',
				{
					start: {line: 730, column: 3},
					end: {line: 732, column: 42}
				},
				_p98)('getPathPoint');
		}
	});
var _user$project$LangSvg$toTransformRot = function (a) {
	var _p100 = a.interpreted;
	if ((((_p100.ctor === 'ATransform') && (_p100._0.ctor === '::')) && (_p100._0._0.ctor === 'Rot')) && (_p100._0._1.ctor === '[]')) {
		return {ctor: '_Tuple3', _0: _p100._0._0._0, _1: _p100._0._0._1, _2: _p100._0._0._2};
	} else {
		return A2(
			_user$project$LangSvg$expectedButGotCrash,
			'a rotation transform',
			_user$project$LangSvg$strAVal(a));
	}
};
var _user$project$LangSvg$expectedButGot = F2(
	function (x, s) {
		return _elm_lang$core$Result$Err(
			A2(_user$project$LangSvg$expectedButGotStr, x, s));
	});
var _user$project$LangSvg$valToPoint = function (v) {
	var _p101 = v.v_;
	if (_p101.ctor === 'VList') {
		var _p102 = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.v_;
			},
			_p101._0);
		if (((((_p102.ctor === '::') && (_p102._0.ctor === 'VConst')) && (_p102._1.ctor === '::')) && (_p102._1._0.ctor === 'VConst')) && (_p102._1._1.ctor === '[]')) {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple2', _0: _p102._0._1, _1: _p102._1._0._1});
		} else {
			return A2(
				_user$project$LangSvg$expectedButGot,
				'a point',
				_user$project$ValUnparser$strVal(v));
		}
	} else {
		return A2(
			_user$project$LangSvg$expectedButGot,
			'a point',
			_user$project$ValUnparser$strVal(v));
	}
};
var _user$project$LangSvg$valsToRgba = function (vs) {
	var _p103 = A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.v_;
		},
		vs);
	if (((((((((_p103.ctor === '::') && (_p103._0.ctor === 'VConst')) && (_p103._1.ctor === '::')) && (_p103._1._0.ctor === 'VConst')) && (_p103._1._1.ctor === '::')) && (_p103._1._1._0.ctor === 'VConst')) && (_p103._1._1._1.ctor === '::')) && (_p103._1._1._1._0.ctor === 'VConst')) && (_p103._1._1._1._1.ctor === '[]')) {
		return _elm_lang$core$Result$Ok(
			{ctor: '_Tuple4', _0: _p103._0._1, _1: _p103._1._0._1, _2: _p103._1._1._0._1, _3: _p103._1._1._1._0._1});
	} else {
		return A2(
			_user$project$LangSvg$expectedButGot,
			'rgba',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'[',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$join,
						', ',
						A2(_elm_lang$core$List$map, _user$project$ValUnparser$strVal, vs)),
					']')));
	}
};
var _user$project$LangSvg$valToBounds = function (vs) {
	var _p104 = A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.v_;
		},
		vs);
	if (((((((((_p104.ctor === '::') && (_p104._0.ctor === 'VConst')) && (_p104._1.ctor === '::')) && (_p104._1._0.ctor === 'VConst')) && (_p104._1._1.ctor === '::')) && (_p104._1._1._0.ctor === 'VConst')) && (_p104._1._1._1.ctor === '::')) && (_p104._1._1._1._0.ctor === 'VConst')) && (_p104._1._1._1._1.ctor === '[]')) {
		return _elm_lang$core$Result$Ok(
			{ctor: '_Tuple4', _0: _p104._0._1, _1: _p104._1._0._1, _2: _p104._1._1._0._1, _3: _p104._1._1._1._0._1});
	} else {
		return A2(
			_user$project$LangSvg$expectedButGot,
			'bounds',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'[',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$join,
						', ',
						A2(_elm_lang$core$List$map, _user$project$ValUnparser$strVal, vs)),
					']')));
	}
};
var _user$project$LangSvg$attr = _elm_lang$virtual_dom$VirtualDom$attribute;
var _user$project$LangSvg$compileAttr = F2(
	function (k, v) {
		return A2(
			_user$project$LangSvg$attr,
			k,
			_user$project$LangSvg$strAVal(v));
	});
var _user$project$LangSvg$compileAttrs = _elm_lang$core$List$map(
	_elm_lang$core$Basics$uncurry(_user$project$LangSvg$compileAttr));
var _user$project$LangSvg$WithVal = F2(
	function (a, b) {
		return {interpreted: a, val: b};
	});
var _user$project$LangSvg$PathCounts = function (a) {
	return {numPoints: a};
};
var _user$project$LangSvg$AStyle = function (a) {
	return {ctor: 'AStyle', _0: a};
};
var _user$project$LangSvg$ABounds = function (a) {
	return {ctor: 'ABounds', _0: a};
};
var _user$project$LangSvg$ATransform = function (a) {
	return {ctor: 'ATransform', _0: a};
};
var _user$project$LangSvg$aTransform = function (_p105) {
	return _user$project$LangSvg$aVal(
		_user$project$LangSvg$ATransform(_p105));
};
var _user$project$LangSvg$APath2 = function (a) {
	return {ctor: 'APath2', _0: a};
};
var _user$project$LangSvg$AColorNum = function (a) {
	return {ctor: 'AColorNum', _0: a};
};
var _user$project$LangSvg$ARgba = function (a) {
	return {ctor: 'ARgba', _0: a};
};
var _user$project$LangSvg$APoints = function (a) {
	return {ctor: 'APoints', _0: a};
};
var _user$project$LangSvg$aPoints = function (_p106) {
	return _user$project$LangSvg$aVal(
		_user$project$LangSvg$APoints(_p106));
};
var _user$project$LangSvg$AString = function (a) {
	return {ctor: 'AString', _0: a};
};
var _user$project$LangSvg$aString = function (_p107) {
	return _user$project$LangSvg$aVal(
		_user$project$LangSvg$AString(_p107));
};
var _user$project$LangSvg$addAttrs = F2(
	function (kind, attrs) {
		return _elm_lang$core$Native_Utils.eq(kind, 'svg') ? {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'xmlns',
				_1: _user$project$LangSvg$aString('http://www.w3.org/2000/svg')
			},
			_1: attrs
		} : attrs;
	});
var _user$project$LangSvg$ANum = function (a) {
	return {ctor: 'ANum', _0: a};
};
var _user$project$LangSvg$aNum = function (_p108) {
	return _user$project$LangSvg$aVal(
		_user$project$LangSvg$ANum(_p108));
};
var _user$project$LangSvg$desugarBoundedShapes = F2(
	function (shape0, attrs0) {
		var mkNum = function (n) {
			return _user$project$LangSvg$aNum(
				{ctor: '_Tuple2', _0: n, _1: _user$project$Lang$dummyTrace});
		};
		var _p109 = shape0;
		switch (_p109) {
			case 'BOX':
				return A2(
					_user$project$Utils$mapMaybe,
					function (_p110) {
						var _p111 = _p110;
						var _p113 = _p111._1;
						var _p112 = _p111._0;
						var newAttrs = {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'x',
								_1: mkNum(_p112)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'y',
									_1: mkNum(_p113)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'width',
										_1: mkNum(_p111._2 - _p112)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'height',
											_1: mkNum(_p111._3 - _p113)
										},
										_1: {ctor: '[]'}
									}
								}
							}
						};
						return {
							ctor: '_Tuple2',
							_0: 'rect',
							_1: A2(_elm_lang$core$Basics_ops['++'], newAttrs, _p111._4)
						};
					},
					_user$project$LangSvg$getBoundsAttrs(attrs0));
			case 'OVAL':
				return A2(
					_user$project$Utils$mapMaybe,
					function (_p114) {
						var _p115 = _p114;
						var _p119 = _p115._1;
						var _p118 = _p115._2;
						var _p117 = _p115._0;
						var _p116 = _p115._3;
						var newAttrs = {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'cx',
								_1: mkNum(_p117 + ((_p118 - _p117) / 2))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'cy',
									_1: mkNum(_p119 + ((_p116 - _p119) / 2))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'rx',
										_1: mkNum((_p118 - _p117) / 2)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'ry',
											_1: mkNum((_p116 - _p119) / 2)
										},
										_1: {ctor: '[]'}
									}
								}
							}
						};
						return {
							ctor: '_Tuple2',
							_0: 'ellipse',
							_1: A2(_elm_lang$core$Basics_ops['++'], newAttrs, _p115._4)
						};
					},
					_user$project$LangSvg$getBoundsAttrs(attrs0));
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LangSvg$desugarShapeAttrs = F4(
	function (xCanvas, yCanvas, shape0, attrs0) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '_Tuple2', _0: shape0, _1: attrs0},
			A2(_user$project$LangSvg$desugarBoundedShapes, shape0, attrs0));
	});
var _user$project$LangSvg$printNode = F4(
	function (showGhosts, k, slate, i) {
		var _p120 = function (_) {
			return _.interpreted;
		}(
			A2(_user$project$Utils$justGet, i, slate));
		if (_p120.ctor === 'TextNode') {
			return _p120._0;
		} else {
			var _p123 = _p120._2;
			var _p121 = A4(_user$project$LangSvg$desugarShapeAttrs, 0, 0, _p120._0, _p120._1);
			var kind = _p121._0;
			var l1 = _p121._1;
			var _p122 = {
				ctor: '_Tuple2',
				_0: showGhosts,
				_1: A2(_user$project$Utils$maybeRemoveFirst, 'HIDDEN', l1)
			};
			if (((_p122.ctor === '_Tuple2') && (_p122._0 === false)) && (_p122._1.ctor === 'Just')) {
				return '';
			} else {
				if (_elm_lang$core$Native_Utils.eq(
					_p123,
					{ctor: '[]'})) {
					var l1_ = A2(
						_user$project$LangSvg$addAttrs,
						kind,
						_user$project$LangSvg$removeSpecialAttrs(l1));
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A3(
							_user$project$Utils$delimit,
							'<',
							'>',
							A2(
								_elm_lang$core$Basics_ops['++'],
								kind,
								_user$project$LangSvg$printAttrs(l1_))),
						A3(_user$project$Utils$delimit, '</', '>', kind));
				} else {
					var l1_ = A2(
						_user$project$LangSvg$addAttrs,
						kind,
						_user$project$LangSvg$removeSpecialAttrs(l1));
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A3(
							_user$project$Utils$delimit,
							'<',
							'>',
							A2(
								_elm_lang$core$Basics_ops['++'],
								kind,
								_user$project$LangSvg$printAttrs(l1_))),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A4(_user$project$LangSvg$printNodes, showGhosts, k + 1, slate, _p123),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\n',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Lang$tab(k),
										A3(_user$project$Utils$delimit, '</', '>', kind))))));
				}
			}
		}
	});
var _user$project$LangSvg$printNodes = F3(
	function (showGhosts, k, slate) {
		return function (_p124) {
			return _user$project$Utils$lines(
				A2(
					_elm_lang$core$List$map,
					function (_p125) {
						return A2(
							F2(
								function (x, y) {
									return A2(_elm_lang$core$Basics_ops['++'], x, y);
								}),
							_user$project$Lang$tab(k),
							A4(_user$project$LangSvg$printNode, showGhosts, k, slate, _p125));
					},
					_p124));
		};
	});
var _user$project$LangSvg$printSvg = F2(
	function (showGhosts, _p126) {
		var _p127 = _p126;
		var s = A4(_user$project$LangSvg$printNode, showGhosts, 0, _p127._1, _p127._0);
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[ ]+\\n'),
			function (_p128) {
				return '';
			},
			s);
	});
var _user$project$LangSvg$buildSvgSimple_ = F2(
	function (tree, i) {
		var _p129 = function (_) {
			return _.interpreted;
		}(
			A3(
				_user$project$Utils$justGet_,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'LangSvg.buildSvgSimple_ ',
					_elm_lang$core$Basics$toString(i)),
				i,
				tree));
		if (_p129.ctor === 'TextNode') {
			return _elm_lang$virtual_dom$VirtualDom$text(_p129._0);
		} else {
			var _p133 = _p129._1;
			var _p130 = A2(_user$project$Utils$maybeRemoveFirst, 'HIDDEN', _p133);
			if (_p130.ctor === 'Just') {
				return A2(
					_elm_lang$svg$Svg$svg,
					{ctor: '[]'},
					{ctor: '[]'});
			} else {
				var attrs_ = function () {
					var _p131 = A2(_user$project$Utils$maybeRemoveFirst, 'ZONES', _p133);
					if (_p131.ctor === 'Nothing') {
						return _p133;
					} else {
						return _p131._0._1;
					}
				}();
				var children = A2(
					_elm_lang$core$List$map,
					_user$project$LangSvg$buildSvgSimple_(tree),
					_p129._2);
				var _p132 = A4(_user$project$LangSvg$desugarShapeAttrs, 0, 0, _p129._0, attrs_);
				var rawKind = _p132._0;
				var rawAttrs = _p132._1;
				return A3(
					_elm_lang$svg$Svg$node,
					rawKind,
					_user$project$LangSvg$compileAttrs(rawAttrs),
					children);
			}
		}
	});
var _user$project$LangSvg$buildSvgSimple = function (_p134) {
	var _p135 = _p134;
	return A2(_user$project$LangSvg$buildSvgSimple_, _p135._1, _p135._0);
};
var _user$project$LangSvg$CmdA = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'CmdA', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _user$project$LangSvg$CmdSQ = F3(
	function (a, b, c) {
		return {ctor: 'CmdSQ', _0: a, _1: b, _2: c};
	});
var _user$project$LangSvg$CmdC = F4(
	function (a, b, c, d) {
		return {ctor: 'CmdC', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$LangSvg$CmdHV = F2(
	function (a, b) {
		return {ctor: 'CmdHV', _0: a, _1: b};
	});
var _user$project$LangSvg$CmdMLT = F2(
	function (a, b) {
		return {ctor: 'CmdMLT', _0: a, _1: b};
	});
var _user$project$LangSvg$CmdZ = function (a) {
	return {ctor: 'CmdZ', _0: a};
};
var _user$project$LangSvg$valsToPath2_ = F2(
	function (counts, vs) {
		var _p136 = vs;
		if (_p136.ctor === '[]') {
			return _elm_lang$core$Result$Ok(
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: counts
				});
		} else {
			var _p148 = _p136._1;
			var _p137 = _p136._0.v_;
			if ((_p137.ctor === 'VBase') && (_p137._0.ctor === 'VString')) {
				var _p147 = _p137._0._0;
				if (A2(_user$project$LangSvg$matchCmd, _p147, 'Z')) {
					return A2(
						_elm_lang$core$Result$map,
						function (rest) {
							return A2(
								_user$project$LangSvg_ops['+++'],
								_user$project$LangSvg$CmdZ(_p147),
								rest);
						},
						A2(_user$project$LangSvg$valsToPath2_, counts, _p148));
				} else {
					if (A2(_user$project$LangSvg$matchCmd, _p147, 'MLT')) {
						var _p138 = A2(
							_elm_lang$core$Tuple$mapFirst,
							_user$project$Utils$unwrap2,
							A2(_user$project$LangSvg$projConsts, 2, _p148));
						var x = _p138._0._0;
						var y = _p138._0._1;
						var vs__ = _p138._1;
						var _p139 = A2(
							_elm_lang$core$Tuple$mapSecond,
							_user$project$Utils$unwrap1,
							A3(
								_user$project$LangSvg$addIdPoints,
								_p147,
								counts,
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: x, _1: y},
									_1: {ctor: '[]'}
								}));
						var counts_ = _p139._0;
						var pt = _p139._1;
						return A2(
							_elm_lang$core$Result$map,
							function (rest) {
								return A2(
									_user$project$LangSvg_ops['+++'],
									A2(_user$project$LangSvg$CmdMLT, _p147, pt),
									rest);
							},
							A2(_user$project$LangSvg$valsToPath2_, counts_, vs__));
					} else {
						if (A2(_user$project$LangSvg$matchCmd, _p147, 'HV')) {
							var _p140 = A2(
								_elm_lang$core$Tuple$mapFirst,
								_user$project$Utils$unwrap1,
								A2(_user$project$LangSvg$projConsts, 1, _p148));
							var i = _p140._0;
							var vs__ = _p140._1;
							return A2(
								_elm_lang$core$Result$map,
								function (rest) {
									return A2(
										_user$project$LangSvg_ops['+++'],
										A2(_user$project$LangSvg$CmdHV, _p147, i),
										rest);
								},
								A2(_user$project$LangSvg$valsToPath2_, counts, vs__));
						} else {
							if (A2(_user$project$LangSvg$matchCmd, _p147, 'C')) {
								var _p141 = A2(
									_elm_lang$core$Tuple$mapFirst,
									_user$project$Utils$unwrap6,
									A2(_user$project$LangSvg$projConsts, 6, _p148));
								var x1 = _p141._0._0;
								var y1 = _p141._0._1;
								var x2 = _p141._0._2;
								var y2 = _p141._0._3;
								var x = _p141._0._4;
								var y = _p141._0._5;
								var vs__ = _p141._1;
								var _p142 = A2(
									_elm_lang$core$Tuple$mapSecond,
									_user$project$Utils$unwrap3,
									A3(
										_user$project$LangSvg$addIdPoints,
										_p147,
										counts,
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: x1, _1: y1},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: x2, _1: y2},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: x, _1: y},
													_1: {ctor: '[]'}
												}
											}
										}));
								var counts_ = _p142._0;
								var pt1 = _p142._1._0;
								var pt2 = _p142._1._1;
								var pt3 = _p142._1._2;
								return A2(
									_elm_lang$core$Result$map,
									function (rest) {
										return A2(
											_user$project$LangSvg_ops['+++'],
											A4(_user$project$LangSvg$CmdC, _p147, pt1, pt2, pt3),
											rest);
									},
									A2(_user$project$LangSvg$valsToPath2_, counts_, vs__));
							} else {
								if (A2(_user$project$LangSvg$matchCmd, _p147, 'SQ')) {
									var _p143 = A2(
										_elm_lang$core$Tuple$mapFirst,
										_user$project$Utils$unwrap4,
										A2(_user$project$LangSvg$projConsts, 4, _p148));
									var x1 = _p143._0._0;
									var y1 = _p143._0._1;
									var x = _p143._0._2;
									var y = _p143._0._3;
									var vs__ = _p143._1;
									var _p144 = A2(
										_elm_lang$core$Tuple$mapSecond,
										_user$project$Utils$unwrap2,
										A3(
											_user$project$LangSvg$addIdPoints,
											_p147,
											counts,
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: x1, _1: y1},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: x, _1: y},
													_1: {ctor: '[]'}
												}
											}));
									var counts_ = _p144._0;
									var pt1 = _p144._1._0;
									var pt2 = _p144._1._1;
									return A2(
										_elm_lang$core$Result$map,
										function (rest) {
											return A2(
												_user$project$LangSvg_ops['+++'],
												A3(_user$project$LangSvg$CmdSQ, _p147, pt1, pt2),
												rest);
										},
										A2(_user$project$LangSvg$valsToPath2_, counts_, vs__));
								} else {
									if (A2(_user$project$LangSvg$matchCmd, _p147, 'A')) {
										var _p145 = A2(
											_elm_lang$core$Tuple$mapFirst,
											_user$project$Utils$unwrap7,
											A2(_user$project$LangSvg$projConsts, 7, _p148));
										var rx = _p145._0._0;
										var ry = _p145._0._1;
										var axis = _p145._0._2;
										var flag = _p145._0._3;
										var sweep = _p145._0._4;
										var x = _p145._0._5;
										var y = _p145._0._6;
										var vs__ = _p145._1;
										var _p146 = A2(
											_elm_lang$core$Tuple$mapSecond,
											_user$project$Utils$unwrap1,
											A3(
												_user$project$LangSvg$addIdPoints,
												_p147,
												counts,
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: x, _1: y},
													_1: {ctor: '[]'}
												}));
										var counts_ = _p146._0;
										var pt = _p146._1;
										return A2(
											_elm_lang$core$Result$map,
											function (rest) {
												return A2(
													_user$project$LangSvg_ops['+++'],
													A7(_user$project$LangSvg$CmdA, _p147, rx, ry, axis, flag, sweep, pt),
													rest);
											},
											A2(_user$project$LangSvg$valsToPath2_, counts_, vs__));
									} else {
										return _elm_lang$core$Result$Err('valsToPath2_');
									}
								}
							}
						}
					}
				}
			} else {
				return _elm_lang$core$Result$Err('valsToPath2_');
			}
		}
	});
var _user$project$LangSvg$valsToPath2 = _user$project$LangSvg$valsToPath2_(
	{numPoints: 0});
var _user$project$LangSvg$Trans = F2(
	function (a, b) {
		return {ctor: 'Trans', _0: a, _1: b};
	});
var _user$project$LangSvg$Scale = F2(
	function (a, b) {
		return {ctor: 'Scale', _0: a, _1: b};
	});
var _user$project$LangSvg$Rot = F3(
	function (a, b, c) {
		return {ctor: 'Rot', _0: a, _1: b, _2: c};
	});
var _user$project$LangSvg$valToTransformCmd = function (v) {
	var _p149 = v.v_;
	if (_p149.ctor === 'VList') {
		var _p150 = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.v_;
			},
			_p149._0);
		if (((_p150.ctor === '::') && (_p150._0.ctor === 'VBase')) && (_p150._0._0.ctor === 'VString')) {
			var _p151 = {ctor: '_Tuple2', _0: _p150._0._0._0, _1: _p150._1};
			_v76_3:
			do {
				if (((((_p151.ctor === '_Tuple2') && (_p151._1.ctor === '::')) && (_p151._1._0.ctor === 'VConst')) && (_p151._1._1.ctor === '::')) && (_p151._1._1._0.ctor === 'VConst')) {
					if (_p151._1._1._1.ctor === '::') {
						if (((_p151._0 === 'rotate') && (_p151._1._1._1._0.ctor === 'VConst')) && (_p151._1._1._1._1.ctor === '[]')) {
							return _elm_lang$core$Result$Ok(
								A3(_user$project$LangSvg$Rot, _p151._1._0._1, _p151._1._1._0._1, _p151._1._1._1._0._1));
						} else {
							break _v76_3;
						}
					} else {
						switch (_p151._0) {
							case 'scale':
								return _elm_lang$core$Result$Ok(
									A2(_user$project$LangSvg$Scale, _p151._1._0._1, _p151._1._1._0._1));
							case 'translate':
								return _elm_lang$core$Result$Ok(
									A2(_user$project$LangSvg$Trans, _p151._1._0._1, _p151._1._1._0._1));
							default:
								break _v76_3;
						}
					}
				} else {
					break _v76_3;
				}
			} while(false);
			return A2(
				_user$project$LangSvg$expectedButGot,
				'a transform command',
				_user$project$ValUnparser$strVal(v));
		} else {
			return A2(
				_user$project$LangSvg$expectedButGot,
				'a transform command',
				_user$project$ValUnparser$strVal(v));
		}
	} else {
		return A2(
			_user$project$LangSvg$expectedButGot,
			'a transform command',
			_user$project$ValUnparser$strVal(v));
	}
};
var _user$project$LangSvg$valsToTransform = function (_p152) {
	return _user$project$Utils$projOk(
		A2(_elm_lang$core$List$map, _user$project$LangSvg$valToTransformCmd, _p152));
};
var _user$project$LangSvg$valToAttr = function (v) {
	var _p153 = v.v_;
	if ((((_p153.ctor === 'VList') && (_p153._0.ctor === '::')) && (_p153._0._1.ctor === '::')) && (_p153._0._1._1.ctor === '[]')) {
		var _p163 = _p153._0._1._0;
		var _p154 = {ctor: '_Tuple2', _0: _p153._0._0.v_, _1: _p163.v_};
		if (((_p154.ctor === '_Tuple2') && (_p154._0.ctor === 'VBase')) && (_p154._0._0.ctor === 'VString')) {
			var _p162 = _p154._0._0._0;
			var avRes = function () {
				var _p155 = {ctor: '_Tuple2', _0: _p162, _1: _p154._1};
				_v79_16:
				do {
					if (_p155.ctor === '_Tuple2') {
						switch (_p155._1.ctor) {
							case 'VList':
								switch (_p155._0) {
									case 'points':
										return A2(
											_elm_lang$core$Result$map,
											_user$project$LangSvg$APoints,
											_user$project$Utils$projOk(
												A2(_elm_lang$core$List$map, _user$project$LangSvg$valToPoint, _p155._1._0)));
									case 'fill':
										if ((_p155._1._0.ctor === '::') && (_p155._1._0._1.ctor === '::')) {
											if (_p155._1._0._1._1.ctor === '::') {
												if ((_p155._1._0._1._1._1.ctor === '::') && (_p155._1._0._1._1._1._1.ctor === '[]')) {
													return A2(
														_elm_lang$core$Result$map,
														_user$project$LangSvg$ARgba,
														_user$project$LangSvg$valsToRgba(
															{
																ctor: '::',
																_0: _p155._1._0._0,
																_1: {
																	ctor: '::',
																	_0: _p155._1._0._1._0,
																	_1: {
																		ctor: '::',
																		_0: _p155._1._0._1._1._0,
																		_1: {
																			ctor: '::',
																			_0: _p155._1._0._1._1._1._0,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}));
												} else {
													break _v79_16;
												}
											} else {
												var _p157 = _p155._1._0._1._0;
												var _p156 = {ctor: '_Tuple2', _0: _p155._1._0._0.v_, _1: _p157.v_};
												if (((_p156.ctor === '_Tuple2') && (_p156._0.ctor === 'VConst')) && (_p156._1.ctor === 'VConst')) {
													return _elm_lang$core$Result$Ok(
														_user$project$LangSvg$AColorNum(
															{
																ctor: '_Tuple2',
																_0: _p156._0._1,
																_1: _elm_lang$core$Maybe$Just(_p156._1._1)
															}));
												} else {
													return _elm_lang$core$Result$Err(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'bad fill: ',
															_user$project$ValUnparser$strVal(_p157)));
												}
											}
										} else {
											break _v79_16;
										}
									case 'stroke':
										if ((_p155._1._0.ctor === '::') && (_p155._1._0._1.ctor === '::')) {
											if (_p155._1._0._1._1.ctor === '::') {
												if ((_p155._1._0._1._1._1.ctor === '::') && (_p155._1._0._1._1._1._1.ctor === '[]')) {
													return A2(
														_elm_lang$core$Result$map,
														_user$project$LangSvg$ARgba,
														_user$project$LangSvg$valsToRgba(
															{
																ctor: '::',
																_0: _p155._1._0._0,
																_1: {
																	ctor: '::',
																	_0: _p155._1._0._1._0,
																	_1: {
																		ctor: '::',
																		_0: _p155._1._0._1._1._0,
																		_1: {
																			ctor: '::',
																			_0: _p155._1._0._1._1._1._0,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}));
												} else {
													break _v79_16;
												}
											} else {
												var _p159 = _p155._1._0._1._0;
												var _p158 = {ctor: '_Tuple2', _0: _p155._1._0._0.v_, _1: _p159.v_};
												if (((_p158.ctor === '_Tuple2') && (_p158._0.ctor === 'VConst')) && (_p158._1.ctor === 'VConst')) {
													return _elm_lang$core$Result$Ok(
														_user$project$LangSvg$AColorNum(
															{
																ctor: '_Tuple2',
																_0: _p158._0._1,
																_1: _elm_lang$core$Maybe$Just(_p158._1._1)
															}));
												} else {
													return _elm_lang$core$Result$Err(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'bad stroke: ',
															_user$project$ValUnparser$strVal(_p159)));
												}
											}
										} else {
											break _v79_16;
										}
									case 'background-color':
										if ((_p155._1._0.ctor === '::') && (_p155._1._0._1.ctor === '::')) {
											if (_p155._1._0._1._1.ctor === '::') {
												if ((_p155._1._0._1._1._1.ctor === '::') && (_p155._1._0._1._1._1._1.ctor === '[]')) {
													return A2(
														_elm_lang$core$Result$map,
														_user$project$LangSvg$ARgba,
														_user$project$LangSvg$valsToRgba(
															{
																ctor: '::',
																_0: _p155._1._0._0,
																_1: {
																	ctor: '::',
																	_0: _p155._1._0._1._0,
																	_1: {
																		ctor: '::',
																		_0: _p155._1._0._1._1._0,
																		_1: {
																			ctor: '::',
																			_0: _p155._1._0._1._1._1._0,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}));
												} else {
													break _v79_16;
												}
											} else {
												var _p161 = _p155._1._0._1._0;
												var _p160 = {ctor: '_Tuple2', _0: _p155._1._0._0.v_, _1: _p161.v_};
												if (((_p160.ctor === '_Tuple2') && (_p160._0.ctor === 'VConst')) && (_p160._1.ctor === 'VConst')) {
													return _elm_lang$core$Result$Ok(
														_user$project$LangSvg$AColorNum(
															{
																ctor: '_Tuple2',
																_0: _p160._0._1,
																_1: _elm_lang$core$Maybe$Just(_p160._1._1)
															}));
												} else {
													return _elm_lang$core$Result$Err(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'bad background-color: ',
															_user$project$ValUnparser$strVal(_p161)));
												}
											}
										} else {
											break _v79_16;
										}
									case 'd':
										return A2(
											_elm_lang$core$Result$map,
											_user$project$LangSvg$APath2,
											_user$project$LangSvg$valsToPath2(_p155._1._0));
									case 'transform':
										return A2(
											_elm_lang$core$Result$map,
											_user$project$LangSvg$ATransform,
											_user$project$LangSvg$valsToTransform(_p155._1._0));
									case 'BOUNDS':
										return A2(
											_elm_lang$core$Result$map,
											_user$project$LangSvg$ABounds,
											_user$project$LangSvg$valToBounds(_p155._1._0));
									case 'style':
										return A2(
											_elm_lang$core$Result$map,
											_user$project$LangSvg$AStyle,
											_user$project$LangSvg$valToStyle(_p155._1._0));
									default:
										break _v79_16;
								}
							case 'VConst':
								switch (_p155._0) {
									case 'fill':
										return _elm_lang$core$Result$Ok(
											_user$project$LangSvg$AColorNum(
												{ctor: '_Tuple2', _0: _p155._1._1, _1: _elm_lang$core$Maybe$Nothing}));
									case 'stroke':
										return _elm_lang$core$Result$Ok(
											_user$project$LangSvg$AColorNum(
												{ctor: '_Tuple2', _0: _p155._1._1, _1: _elm_lang$core$Maybe$Nothing}));
									case 'background-color':
										return _elm_lang$core$Result$Ok(
											_user$project$LangSvg$AColorNum(
												{ctor: '_Tuple2', _0: _p155._1._1, _1: _elm_lang$core$Maybe$Nothing}));
									default:
										return _elm_lang$core$Result$Ok(
											_user$project$LangSvg$ANum(_p155._1._1));
								}
							case 'VBase':
								if (_p155._1._0.ctor === 'VString') {
									return _elm_lang$core$Result$Ok(
										_user$project$LangSvg$AString(_p155._1._0._0));
								} else {
									break _v79_16;
								}
							default:
								break _v79_16;
						}
					} else {
						break _v79_16;
					}
				} while(false);
				return _elm_lang$core$Result$Err(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'bad SVG attribute value for ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p162,
							A2(
								_elm_lang$core$Basics_ops['++'],
								': ',
								_user$project$ValUnparser$strVal(_p163)))));
			}();
			return A2(
				_elm_lang$core$Result$map,
				function (av) {
					return {
						ctor: '_Tuple2',
						_0: _p162,
						_1: {interpreted: av, val: _p163}
					};
				},
				avRes);
		} else {
			return _elm_lang$core$Result$Err(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'malformed attribute pair: ',
					_user$project$ValUnparser$strVal(v)));
		}
	} else {
		return _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'malformed attribute list, bad element: ',
				_user$project$ValUnparser$strVal(v)));
	}
};
var _user$project$LangSvg$valToStyle = function (vs) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (v, acc) {
				return A2(
					_elm_lang$core$Result$andThen,
					function (styles) {
						return A2(
							_elm_lang$core$Result$andThen,
							function (attr) {
								return _elm_lang$core$Result$Ok(
									{ctor: '::', _0: attr, _1: styles});
							},
							_user$project$LangSvg$valToCssAttr(v));
					},
					acc);
			}),
		_elm_lang$core$Result$Ok(
			{ctor: '[]'}),
		vs);
};
var _user$project$LangSvg$valToCssAttr = _user$project$LangSvg$valToAttr;
var _user$project$LangSvg$SvgNode = F3(
	function (a, b, c) {
		return {ctor: 'SvgNode', _0: a, _1: b, _2: c};
	});
var _user$project$LangSvg$dummySvgNode = function () {
	var zero = _user$project$LangSvg$aNum(
		{ctor: '_Tuple2', _0: 0, _1: _user$project$Lang$dummyTrace});
	return A3(
		_user$project$LangSvg$SvgNode,
		'circle',
		A2(
			_elm_lang$core$List$map,
			function (k) {
				return {ctor: '_Tuple2', _0: k, _1: zero};
			},
			{
				ctor: '::',
				_0: 'cx',
				_1: {
					ctor: '::',
					_0: 'cy',
					_1: {
						ctor: '::',
						_0: 'r',
						_1: {ctor: '[]'}
					}
				}
			}),
		{ctor: '[]'});
}();
var _user$project$LangSvg$TextNode = function (a) {
	return {ctor: 'TextNode', _0: a};
};
var _user$project$LangSvg$valToIndexedTree_ = F2(
	function (v, _p164) {
		var _p165 = _p164;
		var _p178 = _p165._0;
		var _p177 = _p165._1;
		var thunk = function (_p166) {
			var _p167 = _p166;
			var _p168 = v.v_;
			if (_p168.ctor === 'VList') {
				var _p169 = A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.v_;
					},
					_p168._0);
				_v86_2:
				do {
					if ((((_p169.ctor === '::') && (_p169._0.ctor === 'VBase')) && (_p169._0._0.ctor === 'VString')) && (_p169._1.ctor === '::')) {
						if (_p169._1._1.ctor === '[]') {
							if (((_p169._0._0._0 === 'TEXT') && (_p169._1._0.ctor === 'VBase')) && (_p169._1._0._0.ctor === 'VString')) {
								var node = {
									interpreted: _user$project$LangSvg$TextNode(_p169._1._0._0._0),
									val: v
								};
								return _elm_lang$core$Result$Ok(
									{
										ctor: '_Tuple2',
										_0: 1 + _p178,
										_1: A3(_elm_lang$core$Dict$insert, _p178, node, _p177)
									});
							} else {
								break _v86_2;
							}
						} else {
							if (((_p169._1._0.ctor === 'VList') && (_p169._1._1._0.ctor === 'VList')) && (_p169._1._1._1.ctor === '[]')) {
								var processChild = F2(
									function (vi, acc) {
										var _p170 = acc;
										if (_p170.ctor === 'Err') {
											return acc;
										} else {
											return A2(
												_elm_lang$core$Result$map,
												function (_p171) {
													var _p172 = _p171;
													var _p173 = _p172._0;
													var a_children_ = {ctor: '::', _0: _p173 - 1, _1: _p170._0._2};
													return {ctor: '_Tuple3', _0: _p173, _1: _p172._1, _2: a_children_};
												},
												A2(
													_user$project$LangSvg$valToIndexedTree_,
													vi,
													{ctor: '_Tuple2', _0: _p170._0._0, _1: _p170._0._1}));
										}
									});
								return A2(
									_elm_lang$core$Result$andThen,
									function (_p174) {
										var _p175 = _p174;
										var _p176 = _p175._0;
										return A2(
											_elm_lang$core$Result$map,
											function (attrs) {
												var node = {
													interpreted: A3(
														_user$project$LangSvg$SvgNode,
														_p169._0._0._0,
														attrs,
														_elm_lang$core$List$reverse(_p175._2)),
													val: v
												};
												return {
													ctor: '_Tuple2',
													_0: 1 + _p176,
													_1: A3(_elm_lang$core$Dict$insert, _p176, node, _p175._1)
												};
											},
											_user$project$Utils$projOk(
												A2(_elm_lang$core$List$map, _user$project$LangSvg$valToAttr, _p169._1._0._0)));
									},
									A3(
										_elm_lang$core$List$foldl,
										processChild,
										_elm_lang$core$Result$Ok(
											{
												ctor: '_Tuple3',
												_0: _p178,
												_1: _p177,
												_2: {ctor: '[]'}
											}),
										_p169._1._1._0._0));
							} else {
								break _v86_2;
							}
						}
					} else {
						break _v86_2;
					}
				} while(false);
				return A2(
					_user$project$LangSvg$expectedButGot,
					'an SVG node',
					_user$project$ValUnparser$strVal(v));
			} else {
				return A2(
					_user$project$LangSvg$expectedButGot,
					'an SVG node',
					_user$project$ValUnparser$strVal(v));
			}
		};
		return _user$project$Utils$unwrapNestedResult(
			_user$project$ImpureGoodies$crashToError(thunk));
	});
var _user$project$LangSvg$svgValToIndexedTree = function (v) {
	var thunk = function (_p179) {
		var _p180 = _p179;
		return A2(
			_elm_lang$core$Result$map,
			function (_p181) {
				var _p182 = _p181;
				var rootId = _p182._0 - 1;
				return {ctor: '_Tuple2', _0: rootId, _1: _p182._1};
			},
			A2(
				_user$project$LangSvg$valToIndexedTree_,
				v,
				{ctor: '_Tuple2', _0: 1, _1: _elm_lang$core$Dict$empty}));
	};
	return thunk(
		{ctor: '_Tuple0'});
};
var _user$project$LangSvg$vListToIndexedTree = function (vList) {
	var valNoProvenance = function (v_) {
		return {
			v_: v_,
			provenance: _user$project$Lang$dummyProvenance,
			parents: _user$project$Lang$Parents(
				{ctor: '[]'})
		};
	};
	var newSvg = valNoProvenance(
		_user$project$Lang$VList(
			{
				ctor: '::',
				_0: valNoProvenance(
					_user$project$Lang$VBase(
						_user$project$Lang$VString('svg'))),
				_1: {
					ctor: '::',
					_0: valNoProvenance(
						_user$project$Lang$VList(
							{ctor: '[]'})),
					_1: {
						ctor: '::',
						_0: vList,
						_1: {ctor: '[]'}
					}
				}
			}));
	return _user$project$LangSvg$svgValToIndexedTree(newSvg);
};
var _user$project$LangSvg$valToIndexedTree = function (v) {
	var asSvg = _user$project$LangSvg$svgValToIndexedTree(v);
	var _p183 = asSvg;
	if (_p183.ctor === 'Ok') {
		return asSvg;
	} else {
		var asSvgList = _user$project$LangSvg$vListToIndexedTree(v);
		var _p184 = asSvgList;
		if (_p184.ctor === 'Ok') {
			return asSvgList;
		} else {
			var _p185 = _user$project$Utils$log(_p183._0);
			var node = {
				interpreted: _user$project$LangSvg$TextNode(
					_user$project$ValUnparser$strVal(v)),
				val: v
			};
			return _elm_lang$core$Result$Ok(
				{
					ctor: '_Tuple2',
					_0: 1,
					_1: A2(_elm_lang$core$Dict$singleton, 1, node)
				});
		}
	}
};
var _user$project$LangSvg$fetchEverything = F6(
	function (showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, val) {
		return A2(
			_elm_lang$core$Result$andThen,
			function (_p186) {
				var _p187 = _p186;
				return A2(
					_elm_lang$core$Result$map,
					function (indexedTree) {
						return {ctor: '_Tuple5', _0: _p187._0, _1: _p187._1, _2: _p187._2, _3: _p187._3, _4: indexedTree};
					},
					_user$project$LangSvg$valToIndexedTree(_p187._4));
			},
			A6(_user$project$LangSvg$fetchEverything_, showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, val));
	});
var _user$project$LangSvg$resolveToRootedIndexedTree = F6(
	function (showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, val) {
		return A2(
			_elm_lang$core$Result$map,
			function (_p188) {
				var _p189 = _p188;
				return _p189._4;
			},
			A6(_user$project$LangSvg$fetchEverything, showPreludeOffsets, syntax, slideNumber, movieNumber, movieTime, val));
	});
var _user$project$LangSvg$evalToSvg = F3(
	function (syntax, env, exp) {
		return A2(
			_elm_lang$core$Result$andThen,
			function (_p190) {
				var _p191 = _p190;
				return A2(
					_elm_lang$core$Result$map,
					_user$project$LangSvg$buildSvgSimple,
					A6(_user$project$LangSvg$resolveToRootedIndexedTree, false, syntax, 1, 1, 0, _p191._0._0));
			},
			A4(_user$project$Eval$doEval, false, syntax, env, exp));
	});

var _user$project$ShapeWidgets$selectedBlobsValTrees = F2(
	function (_p1, _p0) {
		return {ctor: '[]'};
	});
var _user$project$ShapeWidgets$selectedBlobsToProximalDistalEIdInterpretations = F4(
	function (_p5, _p4, _p3, _p2) {
		return {ctor: '_Tuple2', _0: _elm_lang$core$Set$empty, _1: _elm_lang$core$Set$empty};
	});
var _user$project$ShapeWidgets$featureEquationToValTree = function (valEqn) {
	var _p6 = valEqn;
	if (_p6.ctor === 'EqnNum') {
		return _p6._0;
	} else {
		var childVals = A2(_elm_lang$core$List$map, _user$project$ShapeWidgets$featureEquationToValTree, _p6._1);
		return {
			v_: _user$project$Lang$VList(
				{ctor: '[]'}),
			provenance: A2(
				_user$project$Lang$Provenance,
				_user$project$Lang$eTuple(
					{ctor: '[]'}),
				childVals),
			parents: _user$project$Lang$Parents(
				{ctor: '[]'})
		};
	}
};
var _user$project$ShapeWidgets$featureEquationToEIdSets = F2(
	function (expFilter, valEqn) {
		return A2(
			_user$project$Provenance$valTreeToAllProgramEIdInterpretationsIgnoringUninterpretedSubtrees,
			expFilter,
			_user$project$ShapeWidgets$featureEquationToValTree(valEqn));
	});
var _user$project$ShapeWidgets$featureEquationToProximalDistalEIdSets = F2(
	function (expFilter, valEqn) {
		var valTree = _user$project$ShapeWidgets$featureEquationToValTree(valEqn);
		return {
			ctor: '_Tuple2',
			_0: A2(_user$project$Provenance$valTreeToMostProximalProgramEIdInterpretation, expFilter, valTree),
			_1: A2(_user$project$Provenance$valTreeToMostDistalProgramEIdInterpretation, expFilter, valTree)
		};
	});
var _user$project$ShapeWidgets$wOpacitySlider = 20;
var _user$project$ShapeWidgets$wStrokeWidthSlider = 60;
var _user$project$ShapeWidgets$wColorSlider = 265;
var _user$project$ShapeWidgets$zoneToMaybePointFeature = function (realZone) {
	var _p7 = realZone;
	if (_p7.ctor === 'ZPoint') {
		return _elm_lang$core$Maybe$Just(_p7._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$ShapeWidgets$realZoneDesc = function (realZone) {
	return A3(
		_user$project$Utils$stringReplace,
		')',
		'',
		A3(
			_user$project$Utils$stringReplace,
			'(',
			'',
			A3(
				_user$project$Utils$stringReplace,
				' ',
				'',
				_elm_lang$core$Basics$toString(realZone))));
};
var _user$project$ShapeWidgets$pointsToMaybeBounds = function (points) {
	var _p8 = _elm_lang$core$List$unzip(points);
	var xs = _p8._0;
	var ys = _p8._1;
	var _p9 = _user$project$Utils$projJusts(
		{
			ctor: '::',
			_0: _elm_lang$core$List$minimum(xs),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$List$minimum(ys),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$List$maximum(xs),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$List$maximum(ys),
						_1: {ctor: '[]'}
					}
				}
			}
		});
	if ((((((_p9.ctor === 'Just') && (_p9._0.ctor === '::')) && (_p9._0._1.ctor === '::')) && (_p9._0._1._1.ctor === '::')) && (_p9._0._1._1._1.ctor === '::')) && (_p9._0._1._1._1._1.ctor === '[]')) {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple4', _0: _p9._0._0, _1: _p9._0._1._0, _2: _p9._0._1._1._0, _3: _p9._0._1._1._1._0});
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$ShapeWidgets$widgetBoundsPadding = 12;
var _user$project$ShapeWidgets$heightForWListExp = 0;
var _user$project$ShapeWidgets$heightForWCallFuncName = 0;
var _user$project$ShapeWidgets$widgetTopSpaceNeeded = function (widget) {
	var _p10 = widget;
	switch (_p10.ctor) {
		case 'WCall':
			return _user$project$ShapeWidgets$heightForWCallFuncName;
		case 'WList':
			return _user$project$ShapeWidgets$heightForWListExp;
		default:
			return 0;
	}
};
var _user$project$ShapeWidgets$heightForWCallPats = 25;
var _user$project$ShapeWidgets$valToMaybeAnnotatedPoint = function (val) {
	var _p11 = val.v_;
	_v4_3:
	do {
		switch (_p11.ctor) {
			case 'VConst':
				if ((_p11._0.ctor === 'Just') && (_p11._0._0.ctor === '_Tuple3')) {
					if (_p11._0._0._0.ctor === 'X') {
						if ((_p11._0._0._1.ctor === '_Tuple2') && (_p11._1.ctor === '_Tuple2')) {
							return _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p11._1._0, _1: _p11._0._0._1._0});
						} else {
							break _v4_3;
						}
					} else {
						if ((_p11._0._0._1.ctor === '_Tuple2') && (_p11._1.ctor === '_Tuple2')) {
							return _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p11._0._0._1._0, _1: _p11._1._0});
						} else {
							break _v4_3;
						}
					}
				} else {
					break _v4_3;
				}
			case 'VList':
				var _p12 = A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.v_;
					},
					_p11._0);
				if (((((((((((((_p12.ctor === '::') && (_p12._0.ctor === 'VConst')) && (_p12._0._0.ctor === 'Just')) && (_p12._0._0._0.ctor === '_Tuple3')) && (_p12._0._0._0._0.ctor === 'X')) && (_p12._0._1.ctor === '_Tuple2')) && (_p12._1.ctor === '::')) && (_p12._1._0.ctor === 'VConst')) && (_p12._1._0._0.ctor === 'Just')) && (_p12._1._0._0._0.ctor === '_Tuple3')) && (_p12._1._0._0._0._0.ctor === 'Y')) && (_p12._1._0._1.ctor === '_Tuple2')) && (_p12._1._1.ctor === '[]')) {
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: _p12._0._1._0, _1: _p12._1._0._1._0});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			default:
				break _v4_3;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};
var _user$project$ShapeWidgets$expandBounds = F3(
	function (padding, extraTopPadding, _p13) {
		var _p14 = _p13;
		return {ctor: '_Tuple4', _0: _p14._0 - padding, _1: (_p14._1 - padding) - extraTopPadding, _2: _p14._2 + padding, _3: _p14._3 + padding};
	});
var _user$project$ShapeWidgets$boundsContains = F2(
	function (_p16, _p15) {
		var _p17 = _p16;
		var _p18 = _p15;
		var _p20 = _p18._1;
		var _p19 = _p18._0;
		return (_elm_lang$core$Native_Utils.cmp(_p17._0, _p19) < 1) && ((_elm_lang$core$Native_Utils.cmp(_p19, _p17._2) < 1) && ((_elm_lang$core$Native_Utils.cmp(_p17._1, _p20) < 1) && (_elm_lang$core$Native_Utils.cmp(_p20, _p17._3) < 1)));
	});
var _user$project$ShapeWidgets$boundsArea = function (_p21) {
	var _p22 = _p21;
	return _elm_lang$core$Basics$abs((_p22._2 - _p22._0) * (_p22._3 - _p22._1));
};
var _user$project$ShapeWidgets$boundsCenter = function (_p23) {
	var _p24 = _p23;
	return {ctor: '_Tuple2', _0: (_p24._0 + _p24._2) / 2.0, _1: (_p24._1 + _p24._3) / 2.0};
};
var _user$project$ShapeWidgets$maybeBoundsIntersection = F2(
	function (_p26, _p25) {
		var _p27 = _p26;
		var _p28 = _p25;
		var _p29 = {
			ctor: '_Tuple4',
			_0: A2(_elm_lang$core$Basics$max, _p27._0, _p28._0),
			_1: A2(_elm_lang$core$Basics$max, _p27._1, _p28._1),
			_2: A2(_elm_lang$core$Basics$min, _p27._2, _p28._2),
			_3: A2(_elm_lang$core$Basics$min, _p27._3, _p28._3)
		};
		var left = _p29._0;
		var top = _p29._1;
		var right = _p29._2;
		var bot = _p29._3;
		return ((_elm_lang$core$Native_Utils.cmp(left, right) > 0) || (_elm_lang$core$Native_Utils.cmp(top, bot) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple4', _0: left, _1: top, _2: right, _3: bot});
	});
var _user$project$ShapeWidgets$enclosureOfBoundsPair = F2(
	function (_p31, _p30) {
		var _p32 = _p31;
		var _p33 = _p30;
		return {
			ctor: '_Tuple4',
			_0: A2(_elm_lang$core$Basics$min, _p32._0, _p33._0),
			_1: A2(_elm_lang$core$Basics$min, _p32._1, _p33._1),
			_2: A2(_elm_lang$core$Basics$max, _p32._2, _p33._2),
			_3: A2(_elm_lang$core$Basics$max, _p32._3, _p33._3)
		};
	});
var _user$project$ShapeWidgets$maybeEnclosureOfAllBounds = function (bounds) {
	var _p34 = bounds;
	if (_p34.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _user$project$ShapeWidgets$enclosureOfBoundsPair, _p34._0, _p34._1));
	}
};
var _user$project$ShapeWidgets$maybeEnclosureOfAllPoints = function (points) {
	return _user$project$ShapeWidgets$maybeEnclosureOfAllBounds(
		A2(
			_elm_lang$core$List$map,
			function (_p35) {
				var _p36 = _p35;
				var _p38 = _p36._1;
				var _p37 = _p36._0;
				return {ctor: '_Tuple4', _0: _p37, _1: _p38, _2: _p37, _3: _p38};
			},
			points));
};
var _user$project$ShapeWidgets$rejiggerWidgetBounds = F2(
	function (widgets, boundsMaybes) {
		var indexToWidget = _user$project$Utils$listToIndexedDict(widgets);
		var boundsMaybesIndexed = _user$project$Utils$zipi1(boundsMaybes);
		var containsDAG = _user$project$Utils$listToIndexedDict(
			A2(
				_elm_lang$core$List$map,
				function (_p39) {
					var _p40 = _p39;
					var _p48 = _p40._0;
					var _p41 = _p40._1;
					if (_p41.ctor === 'Just') {
						var _p47 = _p41._0;
						return _elm_lang$core$Native_Utils.eq(
							_user$project$ShapeWidgets$boundsArea(_p47),
							0) ? {ctor: '[]'} : A2(
							_elm_lang$core$List$filterMap,
							function (_p42) {
								var _p43 = _p42;
								var _p46 = _p43._0;
								var _p44 = _p43._1;
								if (_p44.ctor === 'Just') {
									var _p45 = _p44._0;
									return (_elm_lang$core$Native_Utils.cmp(
										_user$project$ShapeWidgets$boundsArea(_p45),
										0) > 0) ? ((_elm_lang$core$Native_Utils.eq(
										_user$project$ShapeWidgets$boundsArea(_p45),
										_user$project$ShapeWidgets$boundsArea(_p47)) && (_elm_lang$core$Native_Utils.cmp(
										A2(
											_elm_lang$core$Maybe$withDefault,
											0,
											A2(
												_elm_lang$core$Maybe$map,
												_user$project$ShapeWidgets$boundsArea,
												A2(_user$project$ShapeWidgets$maybeBoundsIntersection, _p47, _p45))),
										0.75 * _user$project$ShapeWidgets$boundsArea(_p45)) > 0)) ? ((_elm_lang$core$Native_Utils.cmp(_p48, _p46) > 0) ? _elm_lang$core$Maybe$Just(_p46) : _elm_lang$core$Maybe$Nothing) : (((_elm_lang$core$Native_Utils.cmp(
										_user$project$ShapeWidgets$boundsArea(_p45),
										_user$project$ShapeWidgets$boundsArea(_p47)) < 1) && (_elm_lang$core$Native_Utils.cmp(
										A2(
											_elm_lang$core$Maybe$withDefault,
											0,
											A2(
												_elm_lang$core$Maybe$map,
												_user$project$ShapeWidgets$boundsArea,
												A2(_user$project$ShapeWidgets$maybeBoundsIntersection, _p47, _p45))),
										0.75 * _user$project$ShapeWidgets$boundsArea(_p45)) > 0)) ? _elm_lang$core$Maybe$Just(_p46) : _elm_lang$core$Maybe$Nothing)) : _elm_lang$core$Maybe$Nothing;
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							},
							A2(_user$project$Utils$removei, _p48, boundsMaybesIndexed));
					} else {
						return {ctor: '[]'};
					}
				},
				boundsMaybesIndexed));
		var computeMoreBounds = function (calculated) {
			computeMoreBounds:
			while (true) {
				var newCalculated = A3(
					_user$project$Utils$foldl,
					calculated,
					F2(
						function (i, calculated) {
							if (A2(_elm_lang$core$Dict$member, i, calculated)) {
								return calculated;
							} else {
								var descendentIs = A3(
									_user$project$Utils$getWithDefault,
									i,
									{ctor: '[]'},
									containsDAG);
								var maybeDescendentBounds = A2(
									_elm_lang$core$Maybe$map,
									_user$project$ShapeWidgets$maybeEnclosureOfAllBounds,
									_user$project$Utils$projJusts(
										A2(
											_elm_lang$core$List$map,
											A2(_elm_lang$core$Basics$flip, _elm_lang$core$Dict$get, calculated),
											descendentIs)));
								var _p49 = {
									ctor: '_Tuple2',
									_0: maybeDescendentBounds,
									_1: A2(_user$project$Utils$geti, i, boundsMaybes)
								};
								_v21_2:
								do {
									if ((_p49.ctor === '_Tuple2') && (_p49._0.ctor === 'Just')) {
										if (_p49._0._0.ctor === 'Just') {
											if (_p49._1.ctor === 'Just') {
												var thisWidget = A3(_user$project$Utils$justGet_, '', i, indexToWidget);
												var newBounds = A2(
													_user$project$ShapeWidgets$enclosureOfBoundsPair,
													_p49._1._0,
													A3(
														_user$project$ShapeWidgets$expandBounds,
														_user$project$ShapeWidgets$widgetBoundsPadding,
														_user$project$ShapeWidgets$widgetTopSpaceNeeded(thisWidget),
														_p49._0._0._0));
												return A3(_elm_lang$core$Dict$insert, i, newBounds, calculated);
											} else {
												break _v21_2;
											}
										} else {
											if (_p49._1.ctor === 'Just') {
												return A3(_elm_lang$core$Dict$insert, i, _p49._1._0, calculated);
											} else {
												break _v21_2;
											}
										}
									} else {
										break _v21_2;
									}
								} while(false);
								return calculated;
							}
						}),
					A2(
						_elm_lang$core$List$range,
						1,
						_elm_lang$core$List$length(boundsMaybes)));
				if (_elm_lang$core$Native_Utils.eq(newCalculated, calculated)) {
					return calculated;
				} else {
					var _v22 = newCalculated;
					calculated = _v22;
					continue computeMoreBounds;
				}
			}
		};
		var indexToNewBounds = computeMoreBounds(_elm_lang$core$Dict$empty);
		return A2(
			_user$project$Utils$mapi1,
			function (_p50) {
				var _p51 = _p50;
				return A2(
					_user$project$Utils$orMaybe,
					A2(_elm_lang$core$Dict$get, _p51._0, indexToNewBounds),
					_p51._1);
			},
			boundsMaybes);
	});
var _user$project$ShapeWidgets$evaluateFeatureEquation = function (eqn) {
	var _p52 = eqn;
	if (_p52.ctor === 'EqnNum') {
		return _elm_lang$core$Maybe$Just(_p52._0);
	} else {
		if (((_p52._1.ctor === '::') && (_p52._1._1.ctor === '::')) && (_p52._1._1._1.ctor === '[]')) {
			var maybeLeftResult = _user$project$ShapeWidgets$evaluateFeatureEquation(_p52._1._0);
			var maybeRightResult = _user$project$ShapeWidgets$evaluateFeatureEquation(_p52._1._1._0);
			var _p53 = {ctor: '_Tuple2', _0: maybeLeftResult, _1: maybeRightResult};
			if (((_p53.ctor === '_Tuple2') && (_p53._0.ctor === 'Just')) && (_p53._1.ctor === 'Just')) {
				return _user$project$Eval$simpleEvalToMaybeVal(
					A2(
						_user$project$Lang$eOp,
						_p52._0,
						{
							ctor: '::',
							_0: _user$project$Lang$eHoleVal(_p53._0._0),
							_1: {
								ctor: '::',
								_0: _user$project$Lang$eHoleVal(_p53._1._0),
								_1: {ctor: '[]'}
							}
						}));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _user$project$ShapeWidgets$evaluateFeatureEquation_ = function (_p54) {
	return A2(
		_user$project$Utils$fromJust_,
		'evaluateFeatureEquation_',
		_user$project$ShapeWidgets$evaluateFeatureEquation(_p54));
};
var _user$project$ShapeWidgets$getAttrVal = F2(
	function (attrName, attrList) {
		return function (_) {
			return _.val;
		}(
			A3(
				_user$project$Utils$find,
				A2(_elm_lang$core$Basics_ops['++'], 'featureEquation: getAttr ', attrName),
				attrList,
				attrName));
	});
var _user$project$ShapeWidgets$equationNumTrs = function (featureEqn) {
	var _p55 = featureEqn;
	if (_p55.ctor === 'EqnNum') {
		return {
			ctor: '::',
			_0: _user$project$Lang$valToNumTr(_p55._0),
			_1: {ctor: '[]'}
		};
	} else {
		return A2(_elm_lang$core$List$concatMap, _user$project$ShapeWidgets$equationNumTrs, _p55._1);
	}
};
var _user$project$ShapeWidgets$shapeIdToMaybeVal = F3(
	function (nodeId, shapeTree, widgets) {
		if (_elm_lang$core$Native_Utils.cmp(-2 - nodeId, 0) > 0) {
			var widgetId = -2 - nodeId;
			var _p56 = A2(_user$project$Utils$maybeGeti1, widgetId, widgets);
			if (_p56.ctor === 'Just') {
				switch (_p56._0.ctor) {
					case 'WNumSlider':
						return _elm_lang$core$Maybe$Just(_p56._0._4);
					case 'WIntSlider':
						return _elm_lang$core$Maybe$Just(_p56._0._4);
					case 'WPoint':
						return _elm_lang$core$Maybe$Just(_p56._0._4);
					case 'WOffset1D':
						return _elm_lang$core$Maybe$Just(_p56._0._5);
					case 'WCall':
						return _elm_lang$core$Maybe$Just(_p56._0._3);
					default:
						return _elm_lang$core$Maybe$Just(_p56._0._0);
				}
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			return A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.val;
				},
				A2(_elm_lang$core$Dict$get, nodeId, shapeTree));
		}
	});
var _user$project$ShapeWidgets$selectedShapesValTrees = F3(
	function (_p57, widgets, selectedShapes) {
		var _p58 = _p57;
		return A2(
			_elm_lang$core$List$map,
			function (nodeId) {
				return A2(
					_user$project$Utils$fromJust_,
					'selectedShapesValTrees: can\'t make shape into val equation',
					A3(_user$project$ShapeWidgets$shapeIdToMaybeVal, nodeId, _p58._1, widgets));
			},
			selectedShapes);
	});
var _user$project$ShapeWidgets$maybeEvaluateWidgetPointFeatureXYVals = F2(
	function (widget, pointFeature) {
		var _p59 = {ctor: '_Tuple2', _0: widget, _1: pointFeature};
		_v29_6:
		do {
			if (_p59.ctor === '_Tuple2') {
				switch (_p59._0.ctor) {
					case 'WIntSlider':
						return _elm_lang$core$Maybe$Nothing;
					case 'WNumSlider':
						return _elm_lang$core$Maybe$Nothing;
					case 'WPoint':
						if (_p59._1.ctor === 'LonePoint') {
							return _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p59._0._1, _1: _p59._0._3});
						} else {
							break _v29_6;
						}
					case 'WOffset1D':
						if (_p59._1.ctor === 'EndPoint') {
							return _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p59._0._6, _1: _p59._0._7});
						} else {
							break _v29_6;
						}
					case 'WCall':
						return _elm_lang$core$Maybe$Nothing;
					default:
						return _elm_lang$core$Maybe$Nothing;
				}
			} else {
				break _v29_6;
			}
		} while(false);
		return _elm_lang$core$Native_Utils.crashCase(
			'ShapeWidgets',
			{
				start: {line: 264, column: 3},
				end: {line: 271, column: 124}
			},
			_p59)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'bad feature for widget: ',
				_elm_lang$core$Basics$toString(pointFeature)));
	});
var _user$project$ShapeWidgets$maybeEvaluateWidgetPointFeature = F2(
	function (widget, pointFeature) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p61) {
				var _p62 = _p61;
				return {
					ctor: '_Tuple2',
					_0: _user$project$Lang$valToNum(_p62._0),
					_1: _user$project$Lang$valToNum(_p62._1)
				};
			},
			A2(_user$project$ShapeWidgets$maybeEvaluateWidgetPointFeatureXYVals, widget, pointFeature));
	});
var _user$project$ShapeWidgets$featuresToMaybeSelectablePoint = F2(
	function (feature1, feature2) {
		var _p63 = {ctor: '_Tuple2', _0: feature1, _1: feature2};
		_v31_2:
		do {
			if (((_p63.ctor === '_Tuple2') && (_p63._0.ctor === 'ShapeFeature')) && (_p63._1.ctor === 'ShapeFeature')) {
				switch (_p63._0._1.ctor) {
					case 'XFeat':
						if (_p63._1._1.ctor === 'YFeat') {
							var _p65 = _p63._0._1._0;
							var _p64 = _p63._0._0;
							return (_elm_lang$core$Native_Utils.eq(_p64, _p63._1._0) && _elm_lang$core$Native_Utils.eq(_p65, _p63._1._1._0)) ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p64, _1: _p65}) : _elm_lang$core$Maybe$Nothing;
						} else {
							break _v31_2;
						}
					case 'YFeat':
						if (_p63._1._1.ctor === 'XFeat') {
							var _p67 = _p63._0._1._0;
							var _p66 = _p63._0._0;
							return (_elm_lang$core$Native_Utils.eq(_p66, _p63._1._0) && _elm_lang$core$Native_Utils.eq(_p67, _p63._1._1._0)) ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p66, _1: _p67}) : _elm_lang$core$Maybe$Nothing;
						} else {
							break _v31_2;
						}
					default:
						break _v31_2;
				}
			} else {
				break _v31_2;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$ShapeWidgets$featuresAreXYPairs = F2(
	function (feature1, feature2) {
		return _user$project$Utils$maybeToBool(
			A2(_user$project$ShapeWidgets$featuresToMaybeSelectablePoint, feature1, feature2));
	});
var _user$project$ShapeWidgets$featuresToSelectablePoints = function (features) {
	var _p68 = features;
	if (_p68.ctor === '::') {
		var _p69 = _p68._1;
		return A2(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			_user$project$ShapeWidgets$featuresToSelectablePoints(_p69),
			A2(
				_elm_lang$core$List$filterMap,
				function (otherFeature) {
					return A2(_user$project$ShapeWidgets$featuresToMaybeSelectablePoint, _p68._0, otherFeature);
				},
				_p69));
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$ShapeWidgets$featureIsY = function (feature) {
	var _p70 = feature;
	if ((_p70.ctor === 'ShapeFeature') && (_p70._1.ctor === 'YFeat')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$ShapeWidgets$featureIsX = function (feature) {
	var _p71 = feature;
	if ((_p71.ctor === 'ShapeFeature') && (_p71._1.ctor === 'XFeat')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$ShapeWidgets$featureIsXOrY = function (feature) {
	return _user$project$ShapeWidgets$featureIsX(feature) || _user$project$ShapeWidgets$featureIsY(feature);
};
var _user$project$ShapeWidgets$extractSelectablePoints = function (selectablePointsPair) {
	var _p72 = _elm_lang$core$Set$toList(selectablePointsPair);
	if (((_p72.ctor === '::') && (_p72._1.ctor === '::')) && (_p72._1._1.ctor === '[]')) {
		return {ctor: '_Tuple2', _0: _p72._0, _1: _p72._1._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'ShapeWidgets',
			{
				start: {line: 171, column: 3},
				end: {line: 173, column: 104}
			},
			_p72)('extractSelectablePoints: expected distancePair set to have two elements');
	}
};
var _user$project$ShapeWidgets$simpleDesc = function (adt) {
	return A3(
		_user$project$Utils$stringReplace,
		')',
		'',
		A3(
			_user$project$Utils$stringReplace,
			'(',
			'',
			A3(
				_user$project$Utils$stringReplace,
				' ',
				'',
				_elm_lang$core$Basics$toString(adt))));
};
var _user$project$ShapeWidgets$selectableDistanceBetweenFeaturesDesc = function (selectablePointsPair) {
	var _p74 = _user$project$ShapeWidgets$extractSelectablePoints(selectablePointsPair);
	var pointFeature1 = _p74._0._1;
	var pointFeature2 = _p74._1._1;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$ShapeWidgets$simpleDesc(pointFeature1),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'To',
			_user$project$ShapeWidgets$simpleDesc(pointFeature2)));
};
var _user$project$ShapeWidgets$featureDesc = function (feature) {
	var _p75 = feature;
	if (_p75.ctor === 'ShapeFeature') {
		return _user$project$ShapeWidgets$simpleDesc(_p75._1);
	} else {
		return _user$project$ShapeWidgets$selectableDistanceBetweenFeaturesDesc(_p75._0);
	}
};
var _user$project$ShapeWidgets$BoxyFeatureEquations = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {left: a, top: b, right: c, bottom: d, cx: e, cy: f, mWidth: g, mHeight: h, mRadius: i, mRadiusX: j, mRadiusY: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$ShapeWidgets$BoxyNums = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {left: a, top: b, right: c, bot: d, width: e, height: f, cx: g, cy: h, rx: i, ry: j, r: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$ShapeWidgets$EndPoint = {ctor: 'EndPoint'};
var _user$project$ShapeWidgets$Midpoint = function (a) {
	return {ctor: 'Midpoint', _0: a};
};
var _user$project$ShapeWidgets$Point = function (a) {
	return {ctor: 'Point', _0: a};
};
var _user$project$ShapeWidgets$LonePoint = {ctor: 'LonePoint'};
var _user$project$ShapeWidgets$pointFeaturesOfWidget = function (widget) {
	var _p76 = widget;
	switch (_p76.ctor) {
		case 'WIntSlider':
			return {ctor: '[]'};
		case 'WNumSlider':
			return {ctor: '[]'};
		case 'WPoint':
			return {
				ctor: '::',
				_0: _user$project$ShapeWidgets$LonePoint,
				_1: {ctor: '[]'}
			};
		case 'WOffset1D':
			return {
				ctor: '::',
				_0: _user$project$ShapeWidgets$EndPoint,
				_1: {ctor: '[]'}
			};
		case 'WCall':
			return {ctor: '[]'};
		default:
			return {ctor: '[]'};
	}
};
var _user$project$ShapeWidgets$Center = {ctor: 'Center'};
var _user$project$ShapeWidgets$LeftEdge = {ctor: 'LeftEdge'};
var _user$project$ShapeWidgets$BotEdge = {ctor: 'BotEdge'};
var _user$project$ShapeWidgets$RightEdge = {ctor: 'RightEdge'};
var _user$project$ShapeWidgets$TopEdge = {ctor: 'TopEdge'};
var _user$project$ShapeWidgets$BotRight = {ctor: 'BotRight'};
var _user$project$ShapeWidgets$BotLeft = {ctor: 'BotLeft'};
var _user$project$ShapeWidgets$TopRight = {ctor: 'TopRight'};
var _user$project$ShapeWidgets$TopLeft = {ctor: 'TopLeft'};
var _user$project$ShapeWidgets$Offset = {ctor: 'Offset'};
var _user$project$ShapeWidgets$RadiusY = {ctor: 'RadiusY'};
var _user$project$ShapeWidgets$RadiusX = {ctor: 'RadiusX'};
var _user$project$ShapeWidgets$Radius = {ctor: 'Radius'};
var _user$project$ShapeWidgets$Height = {ctor: 'Height'};
var _user$project$ShapeWidgets$Width = {ctor: 'Width'};
var _user$project$ShapeWidgets$Quantity = {ctor: 'Quantity'};
var _user$project$ShapeWidgets$Rotation = {ctor: 'Rotation'};
var _user$project$ShapeWidgets$StrokeWidth = {ctor: 'StrokeWidth'};
var _user$project$ShapeWidgets$StrokeOpacity = {ctor: 'StrokeOpacity'};
var _user$project$ShapeWidgets$StrokeColor = {ctor: 'StrokeColor'};
var _user$project$ShapeWidgets$FillOpacity = {ctor: 'FillOpacity'};
var _user$project$ShapeWidgets$FillColor = {ctor: 'FillColor'};
var _user$project$ShapeWidgets$OFeat = function (a) {
	return {ctor: 'OFeat', _0: a};
};
var _user$project$ShapeWidgets$DFeat = function (a) {
	return {ctor: 'DFeat', _0: a};
};
var _user$project$ShapeWidgets$YFeat = function (a) {
	return {ctor: 'YFeat', _0: a};
};
var _user$project$ShapeWidgets$XFeat = function (a) {
	return {ctor: 'XFeat', _0: a};
};
var _user$project$ShapeWidgets$shapeFeaturesOfGenericFeature = function (genericFeature) {
	var _p77 = genericFeature;
	if (_p77.ctor === 'PointFeature') {
		var _p78 = _p77._0;
		return {
			ctor: '::',
			_0: _user$project$ShapeWidgets$XFeat(_p78),
			_1: {
				ctor: '::',
				_0: _user$project$ShapeWidgets$YFeat(_p78),
				_1: {ctor: '[]'}
			}
		};
	} else {
		return {
			ctor: '::',
			_0: _user$project$ShapeWidgets$DFeat(_p77._0),
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$ShapeWidgets$DistanceBetweenFeatures = function (a) {
	return {ctor: 'DistanceBetweenFeatures', _0: a};
};
var _user$project$ShapeWidgets$ShapeFeature = F2(
	function (a, b) {
		return {ctor: 'ShapeFeature', _0: a, _1: b};
	});
var _user$project$ShapeWidgets$selectablePointToSelectableFeatures = function (_p79) {
	var _p80 = _p79;
	var _p82 = _p80._1;
	var _p81 = _p80._0;
	return {
		ctor: '_Tuple2',
		_0: A2(
			_user$project$ShapeWidgets$ShapeFeature,
			_p81,
			_user$project$ShapeWidgets$XFeat(_p82)),
		_1: A2(
			_user$project$ShapeWidgets$ShapeFeature,
			_p81,
			_user$project$ShapeWidgets$YFeat(_p82))
	};
};
var _user$project$ShapeWidgets$DistanceFeature = function (a) {
	return {ctor: 'DistanceFeature', _0: a};
};
var _user$project$ShapeWidgets$PointFeature = function (a) {
	return {ctor: 'PointFeature', _0: a};
};
var _user$project$ShapeWidgets$eightGenericPointFeatures = A2(
	_elm_lang$core$List$map,
	_user$project$ShapeWidgets$PointFeature,
	{
		ctor: '::',
		_0: _user$project$ShapeWidgets$TopLeft,
		_1: {
			ctor: '::',
			_0: _user$project$ShapeWidgets$TopRight,
			_1: {
				ctor: '::',
				_0: _user$project$ShapeWidgets$BotLeft,
				_1: {
					ctor: '::',
					_0: _user$project$ShapeWidgets$BotRight,
					_1: {
						ctor: '::',
						_0: _user$project$ShapeWidgets$TopEdge,
						_1: {
							ctor: '::',
							_0: _user$project$ShapeWidgets$RightEdge,
							_1: {
								ctor: '::',
								_0: _user$project$ShapeWidgets$BotEdge,
								_1: {
									ctor: '::',
									_0: _user$project$ShapeWidgets$LeftEdge,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$ShapeWidgets$nineGenericPointFeatures = A2(
	_elm_lang$core$Basics_ops['++'],
	_user$project$ShapeWidgets$eightGenericPointFeatures,
	{
		ctor: '::',
		_0: _user$project$ShapeWidgets$PointFeature(_user$project$ShapeWidgets$Center),
		_1: {ctor: '[]'}
	});
var _user$project$ShapeWidgets$simpleKindGenericFeatures = {
	ctor: '::',
	_0: {
		ctor: '_Tuple2',
		_0: 'rect',
		_1: A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$ShapeWidgets$nineGenericPointFeatures,
			A2(
				_elm_lang$core$List$map,
				_user$project$ShapeWidgets$DistanceFeature,
				{
					ctor: '::',
					_0: _user$project$ShapeWidgets$Width,
					_1: {
						ctor: '::',
						_0: _user$project$ShapeWidgets$Height,
						_1: {ctor: '[]'}
					}
				}))
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'BOX',
			_1: A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$ShapeWidgets$nineGenericPointFeatures,
				A2(
					_elm_lang$core$List$map,
					_user$project$ShapeWidgets$DistanceFeature,
					{
						ctor: '::',
						_0: _user$project$ShapeWidgets$Width,
						_1: {
							ctor: '::',
							_0: _user$project$ShapeWidgets$Height,
							_1: {ctor: '[]'}
						}
					}))
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'circle',
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$ShapeWidgets$nineGenericPointFeatures,
					A2(
						_elm_lang$core$List$map,
						_user$project$ShapeWidgets$DistanceFeature,
						{
							ctor: '::',
							_0: _user$project$ShapeWidgets$Radius,
							_1: {ctor: '[]'}
						}))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'OVAL',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$ShapeWidgets$nineGenericPointFeatures,
						A2(
							_elm_lang$core$List$map,
							_user$project$ShapeWidgets$DistanceFeature,
							{
								ctor: '::',
								_0: _user$project$ShapeWidgets$RadiusX,
								_1: {
									ctor: '::',
									_0: _user$project$ShapeWidgets$RadiusY,
									_1: {ctor: '[]'}
								}
							}))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'ellipse',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$ShapeWidgets$nineGenericPointFeatures,
							A2(
								_elm_lang$core$List$map,
								_user$project$ShapeWidgets$DistanceFeature,
								{
									ctor: '::',
									_0: _user$project$ShapeWidgets$RadiusX,
									_1: {
										ctor: '::',
										_0: _user$project$ShapeWidgets$RadiusY,
										_1: {ctor: '[]'}
									}
								}))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'line',
							_1: A2(
								_elm_lang$core$List$map,
								_user$project$ShapeWidgets$PointFeature,
								{
									ctor: '::',
									_0: _user$project$ShapeWidgets$Point(1),
									_1: {
										ctor: '::',
										_0: _user$project$ShapeWidgets$Point(2),
										_1: {
											ctor: '::',
											_0: _user$project$ShapeWidgets$Center,
											_1: {ctor: '[]'}
										}
									}
								})
						},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	}
};
var _user$project$ShapeWidgets$polyKindGenericFeatures = F2(
	function (kind, attrs) {
		var cap = 'polyKindGenericFeatures';
		var err = function (s) {
			return _elm_lang$core$Native_Utils.crash(
				'ShapeWidgets',
				{
					start: {line: 87, column: 15},
					end: {line: 87, column: 26}
				})(
				_user$project$Utils$spaces(
					{
						ctor: '::',
						_0: cap,
						_1: {
							ctor: '::',
							_0: kind,
							_1: {
								ctor: '::',
								_0: ': ',
								_1: {
									ctor: '::',
									_0: s,
									_1: {ctor: '[]'}
								}
							}
						}
					}));
		};
		if (_elm_lang$core$Native_Utils.eq(kind, 'polygon')) {
			var _p83 = A3(_user$project$Utils$find, cap, attrs, 'points').interpreted;
			if (_p83.ctor === 'APoints') {
				return A2(
					_elm_lang$core$List$concatMap,
					function (i) {
						return {
							ctor: '::',
							_0: _user$project$ShapeWidgets$PointFeature(
								_user$project$ShapeWidgets$Point(i)),
							_1: {
								ctor: '::',
								_0: _user$project$ShapeWidgets$PointFeature(
									_user$project$ShapeWidgets$Midpoint(i)),
								_1: {ctor: '[]'}
							}
						};
					},
					A2(
						_elm_lang$core$List$range,
						1,
						_elm_lang$core$List$length(_p83._0)));
			} else {
				return err('polyKindGenericFeatures: points not found');
			}
		} else {
			if (_elm_lang$core$Native_Utils.eq(kind, 'path')) {
				var _p84 = A3(_user$project$Utils$find, cap, attrs, 'd').interpreted;
				if ((_p84.ctor === 'APath2') && (_p84._0.ctor === '_Tuple2')) {
					return A2(
						_elm_lang$core$List$concatMap,
						function (i) {
							return {
								ctor: '::',
								_0: _user$project$ShapeWidgets$PointFeature(
									_user$project$ShapeWidgets$Point(i)),
								_1: {ctor: '[]'}
							};
						},
						A2(_elm_lang$core$List$range, 1, _p84._0._1.numPoints));
				} else {
					return err('polyKindGenericFeatures: d not found');
				}
			} else {
				return err(
					A2(_elm_lang$core$Basics_ops['++'], 'polyKindGenericFeatures: ', kind));
			}
		}
	});
var _user$project$ShapeWidgets$genericFeaturesOfShape = F2(
	function (kind, attrs) {
		var _p85 = {
			ctor: '_Tuple2',
			_0: A2(_user$project$Utils$maybeFind, kind, _user$project$ShapeWidgets$simpleKindGenericFeatures),
			_1: kind
		};
		_v42_3:
		do {
			if (_p85.ctor === '_Tuple2') {
				if (_p85._0.ctor === 'Just') {
					return _p85._0._0;
				} else {
					switch (_p85._1) {
						case 'polygon':
							return A2(_user$project$ShapeWidgets$polyKindGenericFeatures, kind, attrs);
						case 'path':
							return A2(_user$project$ShapeWidgets$polyKindGenericFeatures, kind, attrs);
						default:
							break _v42_3;
					}
				}
			} else {
				break _v42_3;
			}
		} while(false);
		return {ctor: '[]'};
	});
var _user$project$ShapeWidgets$pointFeaturesOfShape = F2(
	function (kind, attrs) {
		return A2(
			_elm_lang$core$List$concatMap,
			function (feature) {
				var _p86 = feature;
				if (_p86.ctor === 'PointFeature') {
					return {
						ctor: '::',
						_0: _p86._0,
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			},
			A2(_user$project$ShapeWidgets$genericFeaturesOfShape, kind, attrs));
	});
var _user$project$ShapeWidgets$shapeFeaturesOfShape = F2(
	function (kind, attrs) {
		return A2(
			_elm_lang$core$List$concatMap,
			_user$project$ShapeWidgets$shapeFeaturesOfGenericFeature,
			A2(_user$project$ShapeWidgets$genericFeaturesOfShape, kind, attrs));
	});
var _user$project$ShapeWidgets$featuresOfShape = F3(
	function (nodeId, kind, attrs) {
		return A2(
			_elm_lang$core$List$map,
			function (shapeFeature) {
				return A2(_user$project$ShapeWidgets$ShapeFeature, nodeId, shapeFeature);
			},
			A2(_user$project$ShapeWidgets$shapeFeaturesOfShape, kind, attrs));
	});
var _user$project$ShapeWidgets$EqnOp = F2(
	function (a, b) {
		return {ctor: 'EqnOp', _0: a, _1: b};
	});
var _user$project$ShapeWidgets$plus = F2(
	function (a, b) {
		return A2(
			_user$project$ShapeWidgets$EqnOp,
			_user$project$Lang$Plus,
			{
				ctor: '::',
				_0: a,
				_1: {
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$ShapeWidgets$minus = F2(
	function (a, b) {
		return A2(
			_user$project$ShapeWidgets$EqnOp,
			_user$project$Lang$Minus,
			{
				ctor: '::',
				_0: a,
				_1: {
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$ShapeWidgets$div = F2(
	function (a, b) {
		return A2(
			_user$project$ShapeWidgets$EqnOp,
			_user$project$Lang$Div,
			{
				ctor: '::',
				_0: a,
				_1: {
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$ShapeWidgets$EqnNum = function (a) {
	return {ctor: 'EqnNum', _0: a};
};
var _user$project$ShapeWidgets$selectedShapeToEquation = F3(
	function (nodeId, shapeTree, widgets) {
		return A2(
			_elm_lang$core$Maybe$map,
			_user$project$ShapeWidgets$EqnNum,
			A3(_user$project$ShapeWidgets$shapeIdToMaybeVal, nodeId, shapeTree, widgets));
	});
var _user$project$ShapeWidgets$selectedShapesToProximalDistalEIdInterpretations = F5(
	function (program, _p87, widgets, selectedShapes, expFilter) {
		var _p88 = _p87;
		var _p89 = _elm_lang$core$List$unzip(
			A2(
				_elm_lang$core$List$map,
				function (nodeId) {
					return A2(
						_user$project$ShapeWidgets$featureEquationToProximalDistalEIdSets,
						expFilter,
						A2(
							_user$project$Utils$fromJust_,
							'selectedShapesToProximalDistalEIdInterpretations: can\'t make shape into val equation',
							A3(_user$project$ShapeWidgets$selectedShapeToEquation, nodeId, _p88._1, widgets)));
				},
				selectedShapes));
		var proximalEIdSets = _p89._0;
		var distalEIdSets = _p89._1;
		return {
			ctor: '_Tuple2',
			_0: _user$project$Utils$unionAll(proximalEIdSets),
			_1: _user$project$Utils$unionAll(distalEIdSets)
		};
	});
var _user$project$ShapeWidgets$eqnNumTwo = _user$project$ShapeWidgets$EqnNum(
	A3(_user$project$Utils$find, 'ShapeWidgets.eqnNumTwo', _user$project$Eval$initEnv, 'two'));
var _user$project$ShapeWidgets$widgetFeatureEquation = F2(
	function (shapeFeature, widget) {
		var _p90 = widget;
		switch (_p90.ctor) {
			case 'WIntSlider':
				return _user$project$ShapeWidgets$EqnNum(_p90._4);
			case 'WNumSlider':
				return _user$project$ShapeWidgets$EqnNum(_p90._4);
			case 'WPoint':
				var _p91 = shapeFeature;
				_v46_2:
				do {
					switch (_p91.ctor) {
						case 'XFeat':
							if (_p91._0.ctor === 'LonePoint') {
								return _user$project$ShapeWidgets$EqnNum(_p90._1);
							} else {
								break _v46_2;
							}
						case 'YFeat':
							if (_p91._0.ctor === 'LonePoint') {
								return _user$project$ShapeWidgets$EqnNum(_p90._3);
							} else {
								break _v46_2;
							}
						default:
							break _v46_2;
					}
				} while(false);
				return _elm_lang$core$Native_Utils.crashCase(
					'ShapeWidgets',
					{
						start: {line: 570, column: 7},
						end: {line: 573, column: 164}
					},
					_p91)(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'widgetFeatureEquation WPoint only supports XFeat LonePoint and YFeat LonePoint; but asked for ',
						_elm_lang$core$Basics$toString(shapeFeature)));
			case 'WOffset1D':
				var _p93 = shapeFeature;
				_v47_3:
				do {
					switch (_p93.ctor) {
						case 'DFeat':
							if (_p93._0.ctor === 'Offset') {
								return _user$project$ShapeWidgets$EqnNum(_p90._5);
							} else {
								break _v47_3;
							}
						case 'XFeat':
							if (_p93._0.ctor === 'EndPoint') {
								return _user$project$ShapeWidgets$EqnNum(_p90._6);
							} else {
								break _v47_3;
							}
						case 'YFeat':
							if (_p93._0.ctor === 'EndPoint') {
								return _user$project$ShapeWidgets$EqnNum(_p90._7);
							} else {
								break _v47_3;
							}
						default:
							break _v47_3;
					}
				} while(false);
				return _elm_lang$core$Native_Utils.crashCase(
					'ShapeWidgets',
					{
						start: {line: 575, column: 7},
						end: {line: 579, column: 179}
					},
					_p93)(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'widgetFeatureEquation WOffset1D only supports DFeat Offset, XFeat EndPoint, and YFeat EndPoint; but asked for ',
						_elm_lang$core$Basics$toString(shapeFeature)));
			case 'WCall':
				return _elm_lang$core$Native_Utils.crashCase(
					'ShapeWidgets',
					{
						start: {line: 566, column: 3},
						end: {line: 583, column: 110}
					},
					_p90)(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'WCall does not have any feature val equations, but asked for ',
						_elm_lang$core$Basics$toString(shapeFeature)));
			default:
				return _elm_lang$core$Native_Utils.crashCase(
					'ShapeWidgets',
					{
						start: {line: 566, column: 3},
						end: {line: 583, column: 110}
					},
					_p90)(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'WList does not have any feature val equations, but asked for ',
						_elm_lang$core$Basics$toString(shapeFeature)));
		}
	});
var _user$project$ShapeWidgets$boxyFeatureEquations = F2(
	function (kind, attrs) {
		var get = function (attr) {
			return _user$project$ShapeWidgets$EqnNum(
				A2(_user$project$ShapeWidgets$getAttrVal, attr, attrs));
		};
		var _p97 = kind;
		switch (_p97) {
			case 'rect':
				return {
					left: get('x'),
					top: get('y'),
					right: A2(
						_user$project$ShapeWidgets$plus,
						get('x'),
						get('width')),
					bottom: A2(
						_user$project$ShapeWidgets$plus,
						get('y'),
						get('height')),
					cx: A2(
						_user$project$ShapeWidgets$plus,
						get('x'),
						A2(
							_user$project$ShapeWidgets$div,
							get('width'),
							_user$project$ShapeWidgets$eqnNumTwo)),
					cy: A2(
						_user$project$ShapeWidgets$plus,
						get('y'),
						A2(
							_user$project$ShapeWidgets$div,
							get('height'),
							_user$project$ShapeWidgets$eqnNumTwo)),
					mWidth: _elm_lang$core$Maybe$Just(
						get('width')),
					mHeight: _elm_lang$core$Maybe$Just(
						get('height')),
					mRadius: _elm_lang$core$Maybe$Nothing,
					mRadiusX: _elm_lang$core$Maybe$Nothing,
					mRadiusY: _elm_lang$core$Maybe$Nothing
				};
			case 'BOX':
				return {
					left: get('LEFT'),
					top: get('TOP'),
					right: get('RIGHT'),
					bottom: get('BOT'),
					cx: A2(
						_user$project$ShapeWidgets$div,
						A2(
							_user$project$ShapeWidgets$plus,
							get('LEFT'),
							get('RIGHT')),
						_user$project$ShapeWidgets$eqnNumTwo),
					cy: A2(
						_user$project$ShapeWidgets$div,
						A2(
							_user$project$ShapeWidgets$plus,
							get('TOP'),
							get('BOT')),
						_user$project$ShapeWidgets$eqnNumTwo),
					mWidth: _elm_lang$core$Maybe$Just(
						A2(
							_user$project$ShapeWidgets$minus,
							get('RIGHT'),
							get('LEFT'))),
					mHeight: _elm_lang$core$Maybe$Just(
						A2(
							_user$project$ShapeWidgets$minus,
							get('BOT'),
							get('TOP'))),
					mRadius: _elm_lang$core$Maybe$Nothing,
					mRadiusX: _elm_lang$core$Maybe$Nothing,
					mRadiusY: _elm_lang$core$Maybe$Nothing
				};
			case 'OVAL':
				return {
					left: get('LEFT'),
					top: get('TOP'),
					right: get('RIGHT'),
					bottom: get('BOT'),
					cx: A2(
						_user$project$ShapeWidgets$div,
						A2(
							_user$project$ShapeWidgets$plus,
							get('LEFT'),
							get('RIGHT')),
						_user$project$ShapeWidgets$eqnNumTwo),
					cy: A2(
						_user$project$ShapeWidgets$div,
						A2(
							_user$project$ShapeWidgets$plus,
							get('TOP'),
							get('BOT')),
						_user$project$ShapeWidgets$eqnNumTwo),
					mWidth: _elm_lang$core$Maybe$Nothing,
					mHeight: _elm_lang$core$Maybe$Nothing,
					mRadius: _elm_lang$core$Maybe$Nothing,
					mRadiusX: _elm_lang$core$Maybe$Just(
						A2(
							_user$project$ShapeWidgets$div,
							A2(
								_user$project$ShapeWidgets$minus,
								get('RIGHT'),
								get('LEFT')),
							_user$project$ShapeWidgets$eqnNumTwo)),
					mRadiusY: _elm_lang$core$Maybe$Just(
						A2(
							_user$project$ShapeWidgets$div,
							A2(
								_user$project$ShapeWidgets$minus,
								get('BOT'),
								get('TOP')),
							_user$project$ShapeWidgets$eqnNumTwo))
				};
			case 'circle':
				return {
					left: A2(
						_user$project$ShapeWidgets$minus,
						get('cx'),
						get('r')),
					top: A2(
						_user$project$ShapeWidgets$minus,
						get('cy'),
						get('r')),
					right: A2(
						_user$project$ShapeWidgets$plus,
						get('cx'),
						get('r')),
					bottom: A2(
						_user$project$ShapeWidgets$plus,
						get('cy'),
						get('r')),
					cx: get('cx'),
					cy: get('cy'),
					mWidth: _elm_lang$core$Maybe$Nothing,
					mHeight: _elm_lang$core$Maybe$Nothing,
					mRadius: _elm_lang$core$Maybe$Just(
						get('r')),
					mRadiusX: _elm_lang$core$Maybe$Nothing,
					mRadiusY: _elm_lang$core$Maybe$Nothing
				};
			case 'ellipse':
				return {
					left: A2(
						_user$project$ShapeWidgets$minus,
						get('cx'),
						get('rx')),
					top: A2(
						_user$project$ShapeWidgets$minus,
						get('cy'),
						get('ry')),
					right: A2(
						_user$project$ShapeWidgets$plus,
						get('cx'),
						get('rx')),
					bottom: A2(
						_user$project$ShapeWidgets$plus,
						get('cy'),
						get('ry')),
					cx: get('cx'),
					cy: get('cy'),
					mWidth: _elm_lang$core$Maybe$Nothing,
					mHeight: _elm_lang$core$Maybe$Nothing,
					mRadius: _elm_lang$core$Maybe$Nothing,
					mRadiusX: _elm_lang$core$Maybe$Just(
						get('rx')),
					mRadiusY: _elm_lang$core$Maybe$Just(
						get('ry'))
				};
			default:
				return _elm_lang$core$Native_Utils.crashCase(
					'ShapeWidgets',
					{
						start: {line: 589, column: 3},
						end: {line: 661, column: 57}
					},
					_p97)(
					A2(_elm_lang$core$Basics_ops['++'], 'boxyFeatureEquations: ', kind));
		}
	});
var _user$project$ShapeWidgets$shapeFeatureEquation = F3(
	function (shapeFeature, kind, nodeAttrs) {
		var getPathPoint = F2(
			function (attrList, i) {
				var toPointValPairs = function (vListElems) {
					toPointValPairs:
					while (true) {
						var commandIsAnyOf = F2(
							function (cmd, options) {
								return A2(
									_elm_lang$core$String$contains,
									_elm_lang$core$String$toUpper(cmd),
									options);
							});
						var _p99 = vListElems;
						if (_p99.ctor === '[]') {
							return {ctor: '[]'};
						} else {
							var _p113 = _p99._0;
							var _p112 = _p99._1;
							var _p100 = _p113.v_;
							if ((_p100.ctor === 'VBase') && (_p100._0.ctor === 'VString')) {
								var _p110 = _p100._0._0;
								if (A2(commandIsAnyOf, _p110, 'Z')) {
									var _v51 = _p112;
									vListElems = _v51;
									continue toPointValPairs;
								} else {
									if (A2(commandIsAnyOf, _p110, 'MLT')) {
										var _p101 = A2(_user$project$Utils$split, 2, _p112);
										if ((((_p101.ctor === '_Tuple2') && (_p101._0.ctor === '::')) && (_p101._0._1.ctor === '::')) && (_p101._0._1._1.ctor === '[]')) {
											return {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: _p101._0._0, _1: _p101._0._1._0},
												_1: toPointValPairs(_p101._1)
											};
										} else {
											var _p102 = _user$project$Utils$log('toPointValPairs MLT parse fail');
											return {ctor: '[]'};
										}
									} else {
										if (A2(commandIsAnyOf, _p110, 'HV')) {
											var _v53 = A2(_elm_lang$core$List$drop, 1, _p112);
											vListElems = _v53;
											continue toPointValPairs;
										} else {
											if (A2(commandIsAnyOf, _p110, 'C')) {
												var _p103 = A2(_user$project$Utils$split, 6, _p112);
												if ((((((((_p103.ctor === '_Tuple2') && (_p103._0.ctor === '::')) && (_p103._0._1.ctor === '::')) && (_p103._0._1._1.ctor === '::')) && (_p103._0._1._1._1.ctor === '::')) && (_p103._0._1._1._1._1.ctor === '::')) && (_p103._0._1._1._1._1._1.ctor === '::')) && (_p103._0._1._1._1._1._1._1.ctor === '[]')) {
													return {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: _p103._0._0, _1: _p103._0._1._0},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: _p103._0._1._1._0, _1: _p103._0._1._1._1._0},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: _p103._0._1._1._1._1._0, _1: _p103._0._1._1._1._1._1._0},
																_1: toPointValPairs(_p103._1)
															}
														}
													};
												} else {
													var _p104 = _user$project$Utils$log('toPointValPairs C parse fail');
													return {ctor: '[]'};
												}
											} else {
												if (A2(commandIsAnyOf, _p110, 'SQ')) {
													var _p105 = A2(_user$project$Utils$split, 4, _p112);
													if ((((((_p105.ctor === '_Tuple2') && (_p105._0.ctor === '::')) && (_p105._0._1.ctor === '::')) && (_p105._0._1._1.ctor === '::')) && (_p105._0._1._1._1.ctor === '::')) && (_p105._0._1._1._1._1.ctor === '[]')) {
														return {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: _p105._0._0, _1: _p105._0._1._0},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: _p105._0._1._1._0, _1: _p105._0._1._1._1._0},
																_1: toPointValPairs(_p105._1)
															}
														};
													} else {
														var _p106 = _user$project$Utils$log('toPointValPairs SQ parse fail');
														return {ctor: '[]'};
													}
												} else {
													if (A2(commandIsAnyOf, _p110, 'A')) {
														var _p107 = A2(_user$project$Utils$split, 7, _p112);
														if (((((((((_p107.ctor === '_Tuple2') && (_p107._0.ctor === '::')) && (_p107._0._1.ctor === '::')) && (_p107._0._1._1.ctor === '::')) && (_p107._0._1._1._1.ctor === '::')) && (_p107._0._1._1._1._1.ctor === '::')) && (_p107._0._1._1._1._1._1.ctor === '::')) && (_p107._0._1._1._1._1._1._1.ctor === '::')) && (_p107._0._1._1._1._1._1._1._1.ctor === '[]')) {
															return {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: _p107._0._1._1._1._1._1._0, _1: _p107._0._1._1._1._1._1._1._0},
																_1: toPointValPairs(_p107._1)
															};
														} else {
															var _p108 = _user$project$Utils$log('toPointValPairs A parse fail');
															return {ctor: '[]'};
														}
													} else {
														var _p109 = _user$project$Utils$log(
															A2(_elm_lang$core$Basics_ops['++'], 'toPointValPairs bad command ', _p110));
														return {ctor: '[]'};
													}
												}
											}
										}
									}
								}
							} else {
								var _p111 = _user$project$Utils$log(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'toPointValPairs expected command string, got ',
										_user$project$ValUnparser$strVal(_p113)));
								return {ctor: '[]'};
							}
						}
					}
				};
				var _p114 = A3(_user$project$Utils$find, 'featureEquation: getPathPoint d', attrList, 'd').val.v_;
				if (_p114.ctor === 'VList') {
					return A2(
						_user$project$Utils$geti,
						i,
						toPointValPairs(_p114._0));
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'ShapeWidgets',
						{
							start: {line: 441, column: 5},
							end: {line: 443, column: 65}
						},
						_p114)('featureEquation: getPathPoint2');
				}
			});
		var getPolyPoint = F2(
			function (attrList, i) {
				var _p116 = A3(_user$project$Utils$find, 'featureEquation: getPolyPoint', attrList, 'points').val.v_;
				if (_p116.ctor === 'VList') {
					var _p117 = A2(_user$project$Utils$geti, i, _p116._0).v_;
					if ((((_p117.ctor === 'VList') && (_p117._0.ctor === '::')) && (_p117._0._1.ctor === '::')) && (_p117._0._1._1.ctor === '[]')) {
						return {ctor: '_Tuple2', _0: _p117._0._0, _1: _p117._0._1._0};
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'ShapeWidgets',
							{
								start: {line: 448, column: 9},
								end: {line: 450, column: 77}
							},
							_p117)('featureEquation: getPolyPoint2');
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'ShapeWidgets',
						{
							start: {line: 446, column: 5},
							end: {line: 451, column: 67}
						},
						_p116)('featureEquation: getPolyPoint3');
				}
			});
		var toOpacity = function (attrVal) {
			var _p120 = attrVal.val.v_;
			if ((((_p120.ctor === 'VList') && (_p120._0.ctor === '::')) && (_p120._0._1.ctor === '::')) && (_p120._0._1._1.ctor === '[]')) {
				return _p120._0._1._0;
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'ShapeWidgets',
					{
						start: {line: 454, column: 5},
						end: {line: 456, column: 72}
					},
					_p120)('featureEquation: toOpacity');
			}
		};
		var toTransformRot = function (attrVal) {
			var _p122 = attrVal.val.v_;
			if ((((((_p122.ctor === 'VList') && (_p122._0.ctor === '::')) && (_p122._0._1.ctor === '::')) && (_p122._0._1._1.ctor === '::')) && (_p122._0._1._1._1.ctor === '::')) && (_p122._0._1._1._1._1.ctor === '[]')) {
				return _elm_lang$core$Native_Utils.eq(
					_p122._0._0.v_,
					_user$project$Lang$VBase(
						_user$project$Lang$VString('rotate'))) ? {ctor: '_Tuple3', _0: _p122._0._1._0, _1: _p122._0._1._1._0, _2: _p122._0._1._1._1._0} : _elm_lang$core$Native_Utils.crash(
					'ShapeWidgets',
					{
						start: {line: 460, column: 97},
						end: {line: 460, column: 108}
					})('featureEquation: bad rotate command');
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'ShapeWidgets',
					{
						start: {line: 459, column: 5},
						end: {line: 461, column: 80}
					},
					_p122)('featureEquation: toTransformRot');
			}
		};
		var get = function (attr) {
			return _user$project$ShapeWidgets$EqnNum(
				A2(_user$project$ShapeWidgets$getAttrVal, attr, nodeAttrs));
		};
		var crash = function (_p124) {
			return _elm_lang$core$Native_Utils.crash(
				'ShapeWidgets',
				{
					start: {line: 465, column: 5},
					end: {line: 465, column: 16}
				})(
				_user$project$Utils$spaces(
					{
						ctor: '::',
						_0: 'shapeFeatureEquationOf:',
						_1: {
							ctor: '::',
							_0: kind,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(shapeFeature),
								_1: {ctor: '[]'}
							}
						}
					}));
		};
		var handleLine = function (_p125) {
			var _p126 = _p125;
			var _p127 = shapeFeature;
			_v63_6:
			do {
				switch (_p127.ctor) {
					case 'XFeat':
						switch (_p127._0.ctor) {
							case 'Point':
								switch (_p127._0._0) {
									case 1:
										return get('x1');
									case 2:
										return get('x2');
									default:
										break _v63_6;
								}
							case 'Center':
								return A2(
									_user$project$ShapeWidgets$div,
									A2(
										_user$project$ShapeWidgets$plus,
										get('x1'),
										get('x2')),
									_user$project$ShapeWidgets$eqnNumTwo);
							default:
								break _v63_6;
						}
					case 'YFeat':
						switch (_p127._0.ctor) {
							case 'Point':
								switch (_p127._0._0) {
									case 1:
										return get('y1');
									case 2:
										return get('y2');
									default:
										break _v63_6;
								}
							case 'Center':
								return A2(
									_user$project$ShapeWidgets$div,
									A2(
										_user$project$ShapeWidgets$plus,
										get('y1'),
										get('y2')),
									_user$project$ShapeWidgets$eqnNumTwo);
							default:
								break _v63_6;
						}
					default:
						break _v63_6;
				}
			} while(false);
			return crash(
				{ctor: '_Tuple0'});
		};
		var handleBoxyShape = function (_p128) {
			var _p129 = _p128;
			var equations = A2(_user$project$ShapeWidgets$boxyFeatureEquations, kind, nodeAttrs);
			var _p130 = shapeFeature;
			_v65_19:
			do {
				switch (_p130.ctor) {
					case 'XFeat':
						switch (_p130._0.ctor) {
							case 'TopLeft':
								return equations.left;
							case 'TopRight':
								return equations.right;
							case 'BotLeft':
								return equations.left;
							case 'BotRight':
								return equations.right;
							case 'TopEdge':
								return equations.cx;
							case 'BotEdge':
								return equations.cx;
							case 'LeftEdge':
								return equations.left;
							case 'RightEdge':
								return equations.right;
							case 'Center':
								return equations.cx;
							default:
								break _v65_19;
						}
					case 'YFeat':
						switch (_p130._0.ctor) {
							case 'TopLeft':
								return equations.top;
							case 'TopRight':
								return equations.top;
							case 'BotLeft':
								return equations.bottom;
							case 'BotRight':
								return equations.bottom;
							case 'TopEdge':
								return equations.top;
							case 'BotEdge':
								return equations.bottom;
							case 'LeftEdge':
								return equations.cy;
							case 'RightEdge':
								return equations.cy;
							case 'Center':
								return equations.cy;
							default:
								break _v65_19;
						}
					case 'DFeat':
						var cap = _user$project$Utils$spaces(
							{
								ctor: '::',
								_0: 'shapeFeatureEquationOf:',
								_1: {
									ctor: '::',
									_0: kind,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(shapeFeature),
										_1: {ctor: '[]'}
									}
								}
							});
						var _p131 = _p130._0;
						switch (_p131.ctor) {
							case 'Width':
								return A2(_user$project$Utils$fromJust_, cap, equations.mWidth);
							case 'Height':
								return A2(_user$project$Utils$fromJust_, cap, equations.mHeight);
							case 'Radius':
								return A2(_user$project$Utils$fromJust_, cap, equations.mRadius);
							case 'RadiusX':
								return A2(_user$project$Utils$fromJust_, cap, equations.mRadiusX);
							case 'RadiusY':
								return A2(_user$project$Utils$fromJust_, cap, equations.mRadiusY);
							default:
								return crash(
									{ctor: '_Tuple0'});
						}
					default:
						break _v65_19;
				}
			} while(false);
			return crash(
				{ctor: '_Tuple0'});
		};
		var handlePath = function (_p132) {
			var _p133 = _p132;
			var x = function (i) {
				return _user$project$ShapeWidgets$EqnNum(
					_elm_lang$core$Tuple$first(
						A2(getPathPoint, nodeAttrs, i)));
			};
			var y = function (i) {
				return _user$project$ShapeWidgets$EqnNum(
					_elm_lang$core$Tuple$second(
						A2(getPathPoint, nodeAttrs, i)));
			};
			var _p134 = shapeFeature;
			_v68_2:
			do {
				switch (_p134.ctor) {
					case 'XFeat':
						if (_p134._0.ctor === 'Point') {
							return x(_p134._0._0);
						} else {
							break _v68_2;
						}
					case 'YFeat':
						if (_p134._0.ctor === 'Point') {
							return y(_p134._0._0);
						} else {
							break _v68_2;
						}
					default:
						break _v68_2;
				}
			} while(false);
			return crash(
				{ctor: '_Tuple0'});
		};
		var handlePoly = function (_p135) {
			var _p136 = _p135;
			var ptCount = _user$project$LangSvg$getPtCount(nodeAttrs);
			var x = function (i) {
				return _user$project$ShapeWidgets$EqnNum(
					_elm_lang$core$Tuple$first(
						A2(getPolyPoint, nodeAttrs, i)));
			};
			var y = function (i) {
				return _user$project$ShapeWidgets$EqnNum(
					_elm_lang$core$Tuple$second(
						A2(getPolyPoint, nodeAttrs, i)));
			};
			var _p137 = shapeFeature;
			_v70_4:
			do {
				switch (_p137.ctor) {
					case 'XFeat':
						switch (_p137._0.ctor) {
							case 'Point':
								return x(_p137._0._0);
							case 'Midpoint':
								var _p138 = _p137._0._0;
								var i2 = _elm_lang$core$Native_Utils.eq(_p138, ptCount) ? 1 : (_p138 + 1);
								return A2(
									_user$project$ShapeWidgets$div,
									A2(
										_user$project$ShapeWidgets$plus,
										x(_p138),
										x(i2)),
									_user$project$ShapeWidgets$eqnNumTwo);
							default:
								break _v70_4;
						}
					case 'YFeat':
						switch (_p137._0.ctor) {
							case 'Point':
								return y(_p137._0._0);
							case 'Midpoint':
								var _p139 = _p137._0._0;
								var i2 = _elm_lang$core$Native_Utils.eq(_p139, ptCount) ? 1 : (_p139 + 1);
								return A2(
									_user$project$ShapeWidgets$div,
									A2(
										_user$project$ShapeWidgets$plus,
										y(_p139),
										y(i2)),
									_user$project$ShapeWidgets$eqnNumTwo);
							default:
								break _v70_4;
						}
					default:
						break _v70_4;
				}
			} while(false);
			return crash(
				{ctor: '_Tuple0'});
		};
		var _p140 = shapeFeature;
		_v71_6:
		do {
			if (_p140.ctor === 'OFeat') {
				switch (_p140._0.ctor) {
					case 'FillColor':
						return get('fill');
					case 'StrokeColor':
						return get('stroke');
					case 'StrokeWidth':
						return get('stroke-width');
					case 'FillOpacity':
						return _user$project$ShapeWidgets$EqnNum(
							toOpacity(
								A2(_user$project$Utils$find_, nodeAttrs, 'fill')));
					case 'StrokeOpacity':
						return _user$project$ShapeWidgets$EqnNum(
							toOpacity(
								A2(_user$project$Utils$find_, nodeAttrs, 'stroke')));
					case 'Rotation':
						var _p141 = toTransformRot(
							A2(_user$project$Utils$find_, nodeAttrs, 'transform'));
						var rot = _p141._0;
						return _user$project$ShapeWidgets$EqnNum(rot);
					default:
						break _v71_6;
				}
			} else {
				break _v71_6;
			}
		} while(false);
		var _p142 = kind;
		switch (_p142) {
			case 'line':
				return handleLine(
					{ctor: '_Tuple0'});
			case 'polygon':
				return handlePoly(
					{ctor: '_Tuple0'});
			case 'polyline':
				return handlePoly(
					{ctor: '_Tuple0'});
			case 'path':
				return handlePath(
					{ctor: '_Tuple0'});
			case 'rect':
				return handleBoxyShape(
					{ctor: '_Tuple0'});
			case 'BOX':
				return handleBoxyShape(
					{ctor: '_Tuple0'});
			case 'circle':
				return handleBoxyShape(
					{ctor: '_Tuple0'});
			case 'ellipse':
				return handleBoxyShape(
					{ctor: '_Tuple0'});
			case 'OVAL':
				return handleBoxyShape(
					{ctor: '_Tuple0'});
			default:
				return crash(
					{ctor: '_Tuple0'});
		}
	});
var _user$project$ShapeWidgets$featureToEquation = F3(
	function (selectableFeature, tree, widgets) {
		var vConst = function (n) {
			return {
				v_: A2(
					_user$project$Lang$VConst,
					_elm_lang$core$Maybe$Nothing,
					{ctor: '_Tuple2', _0: n, _1: _user$project$Lang$dummyTrace}),
				provenance: _user$project$Lang$dummyProvenance,
				parents: _user$project$Lang$Parents(
					{ctor: '[]'})
			};
		};
		var _p143 = selectableFeature;
		if (_p143.ctor === 'ShapeFeature') {
			var _p149 = _p143._1;
			var _p148 = _p143._0;
			if (!(_elm_lang$core$Native_Utils.cmp(_p148, -2) < 0)) {
				var _p144 = A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.interpreted;
					},
					A2(_elm_lang$core$Dict$get, _p148, tree));
				if (_p144.ctor === 'Just') {
					if (_p144._0.ctor === 'SvgNode') {
						return _elm_lang$core$Maybe$Just(
							A3(_user$project$ShapeWidgets$shapeFeatureEquation, _p149, _p144._0._0, _p144._0._1));
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'ShapeWidgets',
						{
							start: {line: 310, column: 9},
							end: {line: 318, column: 119}
						},
						_p144)(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'ShapeWidgets.selectableShapeFeatureToEquation ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p148),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(tree)))));
				}
			} else {
				var widgetId = (0 - _p148) - 2;
				var _p146 = A2(_user$project$Utils$maybeGeti1, widgetId, widgets);
				if (_p146.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(
						A2(_user$project$ShapeWidgets$widgetFeatureEquation, _p149, _p146._0));
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'ShapeWidgets',
						{
							start: {line: 323, column: 9},
							end: {line: 325, column: 158}
						},
						_p146)(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'ShapeWidgets.selectableShapeFeatureToEquation can\'t find widget ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(widgetId),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' in ',
									_elm_lang$core$Basics$toString(widgets)))));
				}
			}
		} else {
			var _p150 = _user$project$ShapeWidgets$extractSelectablePoints(_p143._0);
			var selectablePoint1 = _p150._0;
			var selectablePoint2 = _p150._1;
			var _p151 = _user$project$ShapeWidgets$selectablePointToSelectableFeatures(selectablePoint1);
			var x1Feature = _p151._0;
			var y1Feature = _p151._1;
			var _p152 = _user$project$ShapeWidgets$selectablePointToSelectableFeatures(selectablePoint2);
			var x2Feature = _p152._0;
			var y2Feature = _p152._1;
			var getEqn = function (selectableFeature) {
				return A3(_user$project$ShapeWidgets$featureToEquation, selectableFeature, tree, widgets);
			};
			var _p153 = {
				ctor: '_Tuple4',
				_0: getEqn(x1Feature),
				_1: getEqn(y1Feature),
				_2: getEqn(x2Feature),
				_3: getEqn(y2Feature)
			};
			if (((((_p153.ctor === '_Tuple4') && (_p153._0.ctor === 'Just')) && (_p153._1.ctor === 'Just')) && (_p153._2.ctor === 'Just')) && (_p153._3.ctor === 'Just')) {
				var deltaXEqn = A2(
					_user$project$ShapeWidgets$EqnOp,
					_user$project$Lang$Minus,
					{
						ctor: '::',
						_0: _p153._2._0,
						_1: {
							ctor: '::',
							_0: _p153._0._0,
							_1: {ctor: '[]'}
						}
					});
				var deltaYEqn = A2(
					_user$project$ShapeWidgets$EqnOp,
					_user$project$Lang$Minus,
					{
						ctor: '::',
						_0: _p153._3._0,
						_1: {
							ctor: '::',
							_0: _p153._1._0,
							_1: {ctor: '[]'}
						}
					});
				var deltaXSquaredEqn = A2(
					_user$project$ShapeWidgets$EqnOp,
					_user$project$Lang$Pow,
					{
						ctor: '::',
						_0: deltaXEqn,
						_1: {
							ctor: '::',
							_0: _user$project$ShapeWidgets$eqnNumTwo,
							_1: {ctor: '[]'}
						}
					});
				var deltaYSquaredEqn = A2(
					_user$project$ShapeWidgets$EqnOp,
					_user$project$Lang$Pow,
					{
						ctor: '::',
						_0: deltaYEqn,
						_1: {
							ctor: '::',
							_0: _user$project$ShapeWidgets$eqnNumTwo,
							_1: {ctor: '[]'}
						}
					});
				var distanceEqn = A2(
					_user$project$ShapeWidgets$EqnOp,
					_user$project$Lang$Sqrt,
					{
						ctor: '::',
						_0: A2(
							_user$project$ShapeWidgets$EqnOp,
							_user$project$Lang$Plus,
							{
								ctor: '::',
								_0: deltaXSquaredEqn,
								_1: {
									ctor: '::',
									_0: deltaYSquaredEqn,
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
				return _elm_lang$core$Maybe$Just(distanceEqn);
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	});
var _user$project$ShapeWidgets$selectedFeaturesToProximalDistalEIdInterpretations = F5(
	function (program, _p154, widgets, selectedFeatures, expFilter) {
		var _p155 = _p154;
		var _p156 = _elm_lang$core$List$unzip(
			A2(
				_elm_lang$core$List$map,
				function (feature) {
					return A2(
						_user$project$ShapeWidgets$featureEquationToProximalDistalEIdSets,
						expFilter,
						A2(
							_user$project$Utils$fromJust_,
							'selectedFeaturesToEIdLists: can\'t make feature into val equation',
							A3(_user$project$ShapeWidgets$featureToEquation, feature, _p155._1, widgets)));
				},
				selectedFeatures));
		var proximalEIdSets = _p156._0;
		var distalEIdSets = _p156._1;
		return {
			ctor: '_Tuple2',
			_0: _user$project$Utils$unionAll(proximalEIdSets),
			_1: _user$project$Utils$unionAll(distalEIdSets)
		};
	});
var _user$project$ShapeWidgets$selectedFeaturesToProximalDistalPointEIdInterpretations = F5(
	function (program, _p157, widgets, selectedFeatures, expFilter) {
		var _p158 = _p157;
		var _p171 = _p158._1;
		var recurse = function (remainingFeatures) {
			return A5(_user$project$ShapeWidgets$selectedFeaturesToProximalDistalPointEIdInterpretations, program, _p158, widgets, remainingFeatures, expFilter);
		};
		var _p159 = selectedFeatures;
		if (_p159.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _elm_lang$core$Set$empty,
					_1: {ctor: '[]'}
				},
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Set$empty,
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p170 = _p159._0;
			var _p169 = _p159._1;
			var returnNotPartOfAPoint = function (_p160) {
				var _p161 = _p160;
				var _p162 = A2(
					_user$project$ShapeWidgets$featureEquationToProximalDistalEIdSets,
					expFilter,
					A2(
						_user$project$Utils$fromJust_,
						'selectedFeaturesToProximalDistalPointEIdInterpretations0: can\'t make feature into val equation',
						A3(_user$project$ShapeWidgets$featureToEquation, _p170, _p171, widgets)));
				var thisProximalInterp = _p162._0;
				var thisDistalInterp = _p162._1;
				var _p163 = recurse(_p169);
				var remainingProximalInterps = _p163._0;
				var remainingDistalInterps = _p163._1;
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Set$union(thisProximalInterp),
						remainingProximalInterps),
					_1: A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Set$union(thisDistalInterp),
						remainingDistalInterps)
				};
			};
			var _p164 = A2(
				_user$project$Utils$findFirst,
				function (otherSelectableFeature) {
					return A2(_user$project$ShapeWidgets$featuresAreXYPairs, _p170, otherSelectableFeature);
				},
				_p169);
			if (_p164.ctor === 'Just') {
				var _p168 = _p164._0;
				var _p165 = _user$project$ShapeWidgets$featureIsX(_p170) ? {ctor: '_Tuple2', _0: _p170, _1: _p168} : {ctor: '_Tuple2', _0: _p168, _1: _p170};
				var xSelectableFeature = _p165._0;
				var ySelectableFeature = _p165._1;
				var xValEqn = A2(
					_user$project$Utils$fromJust_,
					'selectedFeaturesToEIdLists1: can\'t make feature into val equation',
					A3(_user$project$ShapeWidgets$featureToEquation, xSelectableFeature, _p171, widgets));
				var yValEqn = A2(
					_user$project$Utils$fromJust_,
					'selectedFeaturesToEIdLists2: can\'t make feature into val equation',
					A3(_user$project$ShapeWidgets$featureToEquation, ySelectableFeature, _p171, widgets));
				var xValTree = _user$project$ShapeWidgets$featureEquationToValTree(xValEqn);
				var yValTree = _user$project$ShapeWidgets$featureEquationToValTree(yValEqn);
				var _p166 = A3(_user$project$Provenance$valsToProximalDistalPointInterpretations, expFilter, xValTree, yValTree);
				var proximalInterp1 = _p166._0;
				var proximalInterp2 = _p166._1;
				var distalInterp1 = _p166._2;
				var distalInterp2 = _p166._3;
				if (((!_elm_lang$core$Native_Utils.eq(proximalInterp1, _elm_lang$core$Set$empty)) || (!_elm_lang$core$Native_Utils.eq(proximalInterp2, _elm_lang$core$Set$empty))) && ((!_elm_lang$core$Native_Utils.eq(distalInterp1, _elm_lang$core$Set$empty)) || (!_elm_lang$core$Native_Utils.eq(distalInterp2, _elm_lang$core$Set$empty)))) {
					var _p167 = recurse(
						A2(_user$project$Utils$removeAsSet, _p168, _p169));
					var remainingProximalInterps = _p167._0;
					var remainingDistalInterps = _p167._1;
					return {
						ctor: '_Tuple2',
						_0: A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Basics$uncurry(_elm_lang$core$Set$union),
							A2(
								_user$project$Utils$cartProd,
								_user$project$Utils$dedup(
									A2(
										_elm_lang$core$List$filter,
										F2(
											function (x, y) {
												return !_elm_lang$core$Native_Utils.eq(x, y);
											})(_elm_lang$core$Set$empty),
										{
											ctor: '::',
											_0: proximalInterp1,
											_1: {
												ctor: '::',
												_0: proximalInterp2,
												_1: {ctor: '[]'}
											}
										})),
								remainingProximalInterps)),
						_1: A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Basics$uncurry(_elm_lang$core$Set$union),
							A2(
								_user$project$Utils$cartProd,
								_user$project$Utils$dedup(
									A2(
										_elm_lang$core$List$filter,
										F2(
											function (x, y) {
												return !_elm_lang$core$Native_Utils.eq(x, y);
											})(_elm_lang$core$Set$empty),
										{
											ctor: '::',
											_0: distalInterp1,
											_1: {
												ctor: '::',
												_0: distalInterp2,
												_1: {ctor: '[]'}
											}
										})),
								remainingDistalInterps))
					};
				} else {
					if ((!_elm_lang$core$Native_Utils.eq(proximalInterp1, _elm_lang$core$Set$empty)) || (!_elm_lang$core$Native_Utils.eq(proximalInterp2, _elm_lang$core$Set$empty))) {
						return _elm_lang$core$Native_Utils.crash(
							'ShapeWidgets',
							{
								start: {line: 1392, column: 13},
								end: {line: 1392, column: 24}
							})(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'selectedFeaturesToProximalDistalPointEIdInterpretations: proximal interpretation exists but distal does not!\n',
								_elm_lang$core$Basics$toString(
									{ctor: '_Tuple4', _0: proximalInterp1, _1: proximalInterp2, _2: distalInterp1, _3: distalInterp2})));
					} else {
						if ((!_elm_lang$core$Native_Utils.eq(distalInterp1, _elm_lang$core$Set$empty)) || (!_elm_lang$core$Native_Utils.eq(distalInterp2, _elm_lang$core$Set$empty))) {
							return _elm_lang$core$Native_Utils.crash(
								'ShapeWidgets',
								{
									start: {line: 1394, column: 13},
									end: {line: 1394, column: 24}
								})(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'selectedFeaturesToProximalDistalPointEIdInterpretations: distal interpretation exists but proximal does not!\n',
									_elm_lang$core$Basics$toString(
										{ctor: '_Tuple4', _0: proximalInterp1, _1: proximalInterp2, _2: distalInterp1, _3: distalInterp2})));
						} else {
							return returnNotPartOfAPoint(
								{ctor: '_Tuple0'});
						}
					}
				}
			} else {
				return returnNotPartOfAPoint(
					{ctor: '_Tuple0'});
			}
		}
	});
var _user$project$ShapeWidgets$selectionsProximalDistalEIdInterpretations_ = F7(
	function (program, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter) {
		var _p172 = A5(_user$project$ShapeWidgets$selectedFeaturesToProximalDistalEIdInterpretations, program, slate, widgets, selectedFeatures, expFilter);
		var featureProximalEIds = _p172._0;
		var featureDistalEIds = _p172._1;
		var _p173 = A2(
			_user$project$Utils$mapBoth,
			_user$project$Utils$unionAll,
			_elm_lang$core$List$unzip(
				{
					ctor: '::',
					_0: A5(_user$project$ShapeWidgets$selectedShapesToProximalDistalEIdInterpretations, program, slate, widgets, selectedShapes, expFilter),
					_1: {
						ctor: '::',
						_0: A4(
							_user$project$ShapeWidgets$selectedBlobsToProximalDistalEIdInterpretations,
							program,
							slate,
							_elm_lang$core$Dict$toList(selectedBlobs),
							expFilter),
						_1: {ctor: '[]'}
					}
				}));
		var otherProximalEIds = _p173._0;
		var otherDistalEIds = _p173._1;
		var _p174 = A5(_user$project$ShapeWidgets$selectedFeaturesToProximalDistalPointEIdInterpretations, program, slate, widgets, selectedFeatures, expFilter);
		var pointProximalInterps = _p174._0;
		var pointDistalInterps = _p174._1;
		return {
			ctor: '_Tuple2',
			_0: _user$project$Utils$dedup(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Set$toList,
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Set$union(otherProximalEIds),
							pointProximalInterps),
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Set$union, featureProximalEIds, otherProximalEIds),
							_1: {ctor: '[]'}
						}))),
			_1: _user$project$Utils$dedup(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Set$toList,
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Set$union(otherDistalEIds),
							pointDistalInterps),
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Set$union, featureDistalEIds, otherDistalEIds),
							_1: {ctor: '[]'}
						})))
		};
	});
var _user$project$ShapeWidgets$selectionsProximalDistalEIdInterpretations = F7(
	function (program, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter) {
		var _p175 = A7(_user$project$ShapeWidgets$selectionsProximalDistalEIdInterpretations_, program, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter);
		var proximalInterps = _p175._0;
		var distalInterps = _p175._1;
		return _user$project$Utils$dedup(
			A2(_elm_lang$core$Basics_ops['++'], proximalInterps, distalInterps));
	});
var _user$project$ShapeWidgets$selectionsProximalEIdInterpretations = F7(
	function (program, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter) {
		var _p176 = A7(_user$project$ShapeWidgets$selectionsProximalDistalEIdInterpretations_, program, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter);
		var proximalInterps = _p176._0;
		return proximalInterps;
	});
var _user$project$ShapeWidgets$selectionsUniqueProximalEIdInterpretations = F7(
	function (program, _p177, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter) {
		var _p178 = _p177;
		var _p185 = _p178._1;
		var eidsToNotSelect = function () {
			var shapeProvenanceEIdsNotToSelect = function () {
				if (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$List$length(selectedShapes),
					0)) {
					return _elm_lang$core$Set$empty;
				} else {
					var effectiveSelectedNodeIds = function () {
						var selectedDescendentIds = _elm_lang$core$Set$fromList(
							A2(
								_elm_lang$core$List$concatMap,
								_user$project$LangSvg$descendantNodeIds(_p185),
								A2(
									_elm_lang$core$List$filterMap,
									function (nodeId) {
										return A2(_elm_lang$core$Dict$get, nodeId, _p185);
									},
									selectedShapes)));
						return A2(
							_elm_lang$core$Set$union,
							_elm_lang$core$Set$fromList(selectedShapes),
							selectedDescendentIds);
					}();
					return _elm_lang$core$Set$fromList(
						A2(
							_elm_lang$core$List$map,
							function (_p179) {
								return function (_) {
									return _.eid;
								}(
									function (_) {
										return _.val;
									}(
										_user$project$Lang$valExp(_p179)));
							},
							A2(
								_elm_lang$core$List$concatMap,
								function (_p180) {
									var _p181 = _p180;
									return _user$project$Provenance$flattenValBasedOnTree(_p181._1.val);
								},
								A2(
									_elm_lang$core$List$filter,
									function (_p182) {
										var _p183 = _p182;
										return !_user$project$Utils$anyOverlap(
											{
												ctor: '::',
												_0: _elm_lang$core$Set$singleton(_p183._0),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Set$fromList(
														A2(_user$project$LangSvg$descendantNodeIds, _p185, _p183._1)),
													_1: {
														ctor: '::',
														_0: effectiveSelectedNodeIds,
														_1: {ctor: '[]'}
													}
												}
											});
									},
									_elm_lang$core$Dict$toList(_p185)))));
				}
			}();
			var featureProvenanceEIdsNotToSelect = _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(selectedFeatures),
				0) ? _elm_lang$core$Set$empty : _elm_lang$core$Set$empty;
			return A2(_elm_lang$core$Set$union, shapeProvenanceEIdsNotToSelect, featureProvenanceEIdsNotToSelect);
		}();
		var newExpFilter = function (exp) {
			return (!A2(_elm_lang$core$Set$member, exp.val.eid, eidsToNotSelect)) && expFilter(exp);
		};
		var _p184 = A7(_user$project$ShapeWidgets$selectionsProximalDistalEIdInterpretations_, program, _p178, widgets, selectedFeatures, selectedShapes, selectedBlobs, newExpFilter);
		var proximalInterps = _p184._0;
		return proximalInterps;
	});
var _user$project$ShapeWidgets$selectedFeaturesValTrees = F3(
	function (_p186, widgets, selectedFeatures) {
		var _p187 = _p186;
		return A2(
			_elm_lang$core$List$map,
			function (feature) {
				return _user$project$ShapeWidgets$featureEquationToValTree(
					A2(
						_user$project$Utils$fromJust_,
						'selectedFeaturesValTrees: can\'t make shape into val equation',
						A3(_user$project$ShapeWidgets$featureToEquation, feature, _p187._1, widgets)));
			},
			selectedFeatures);
	});
var _user$project$ShapeWidgets$selectedVals = F5(
	function (slate, widgets, selectedFeatures, selectedShapes, selectedBlobs) {
		return _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: A3(_user$project$ShapeWidgets$selectedFeaturesValTrees, slate, widgets, selectedFeatures),
				_1: {
					ctor: '::',
					_0: A3(_user$project$ShapeWidgets$selectedShapesValTrees, slate, widgets, selectedShapes),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$ShapeWidgets$selectedBlobsValTrees,
							slate,
							_elm_lang$core$Dict$toList(selectedBlobs)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$ShapeWidgets$selectionsEIdsTouched = F7(
	function (program, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter) {
		return _user$project$Utils$dedup(
			A2(
				_elm_lang$core$List$map,
				function (_p188) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(_p188));
				},
				A2(
					_elm_lang$core$List$filter,
					expFilter,
					A2(
						_elm_lang$core$List$map,
						_user$project$Lang$valExp,
						A2(
							_elm_lang$core$List$concatMap,
							_user$project$Provenance$flattenValBasedOnTree,
							A5(_user$project$ShapeWidgets$selectedVals, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs))))));
	});
var _user$project$ShapeWidgets$selectionsSingleEIdInterpretations = F7(
	function (program, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter) {
		var valExpIsInProgram = function (val) {
			return _user$project$FastParser$isProgramEId(
				_user$project$Lang$valEId(val));
		};
		var valTrees = A5(_user$project$ShapeWidgets$selectedVals, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs);
		var parentSingleEIdInterpretations = function () {
			var _p189 = valTrees;
			if (_p189.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var possibleParentVals = _user$project$Utils$dedup(
					A2(
						_elm_lang$core$List$filter,
						valExpIsInProgram,
						A2(
							_elm_lang$core$List$concatMap,
							_user$project$Lang$valParents,
							_user$project$Provenance$flattenValBasedOnTree(_p189._0))));
				var firstNonTrivialChildren = function (val) {
					firstNonTrivialChildren:
					while (true) {
						var _p190 = _user$project$Lang$childVals(val);
						if (_p190.ctor === '[]') {
							return {
								ctor: '::',
								_0: val,
								_1: {ctor: '[]'}
							};
						} else {
							if (_p190._1.ctor === '[]') {
								var _v88 = _p190._0;
								val = _v88;
								continue firstNonTrivialChildren;
							} else {
								return _p190;
							}
						}
					}
				};
				return A2(
					_elm_lang$core$List$map,
					function (_p191) {
						return function (_) {
							return _.eid;
						}(
							function (_) {
								return _.val;
							}(_p191));
					},
					A2(
						_elm_lang$core$List$filter,
						expFilter,
						A2(
							_elm_lang$core$List$map,
							_user$project$Lang$valExp,
							A2(
								_elm_lang$core$List$filter,
								function (parentVal) {
									var domain = _user$project$Lang$flattenValTree(parentVal);
									var coveringsStillNeeded = {
										ctor: '::',
										_0: firstNonTrivialChildren(parentVal),
										_1: {ctor: '[]'}
									};
									var maybeNeededAfterCovering = A3(
										_user$project$Utils$foldlMaybe,
										F2(
											function (valTree, coveringsStillNeeded) {
												var valInterpsSimplified = A2(_user$project$Provenance$proximalValInterpretationsAllInside, domain, valTree);
												var _p192 = valInterpsSimplified;
												if (_p192.ctor === '[]') {
													return _elm_lang$core$Maybe$Nothing;
												} else {
													return _elm_lang$core$Maybe$Just(
														_user$project$Utils$dedup(
															A2(
																_elm_lang$core$List$map,
																function (_p193) {
																	var _p194 = _p193;
																	return A2(
																		_user$project$Utils$diffAsSet,
																		_p194._0,
																		A2(_elm_lang$core$List$concatMap, _user$project$Lang$flattenValTree, _p194._1));
																},
																A2(_user$project$Utils$cartProd, coveringsStillNeeded, valInterpsSimplified))));
												}
											}),
										_elm_lang$core$Maybe$Just(coveringsStillNeeded),
										valTrees);
									var _p195 = maybeNeededAfterCovering;
									if (_p195.ctor === 'Nothing') {
										return false;
									} else {
										return A2(
											_elm_lang$core$List$any,
											F2(
												function (x, y) {
													return _elm_lang$core$Native_Utils.eq(x, y);
												})(
												{ctor: '[]'}),
											_p195._0);
									}
								},
								possibleParentVals))));
			}
		}();
		var possibleExps = A2(
			_elm_lang$core$List$filter,
			expFilter,
			_user$project$Lang$flattenExpTree(program));
		var directSingleEIdInterpretations = A2(
			_elm_lang$core$List$map,
			function (_p196) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p196));
			},
			A2(
				_elm_lang$core$List$filter,
				function (exp) {
					return A2(
						_elm_lang$core$List$all,
						_user$project$Provenance$isPossibleSingleEIdInterpretation(exp.val.eid),
						valTrees);
				},
				possibleExps));
		return A2(_elm_lang$core$Basics_ops['++'], directSingleEIdInterpretations, parentSingleEIdInterpretations);
	});
var _user$project$ShapeWidgets$uniqueNonVarSingleExpressionInterpretations = F7(
	function (program, slate, widgets, selectedFeatures, selectedShapes, selectedBlobs, expFilter) {
		var singleExpressionInterpretationEIds = _elm_lang$core$Set$fromList(
			A7(
				_user$project$ShapeWidgets$selectionsSingleEIdInterpretations,
				program,
				slate,
				widgets,
				selectedFeatures,
				selectedShapes,
				selectedBlobs,
				function (e) {
					return expFilter(e) && (!_user$project$Lang$isVar(
						_user$project$Lang$expEffectiveExp(e)));
				}));
		return A2(
			_elm_lang$core$List$filterMap,
			_user$project$Utils$maybeUnwrap1,
			A7(
				_user$project$ShapeWidgets$selectionsUniqueProximalEIdInterpretations,
				program,
				slate,
				widgets,
				selectedFeatures,
				selectedShapes,
				selectedBlobs,
				function (e) {
					return A2(_elm_lang$core$Set$member, e.val.eid, singleExpressionInterpretationEIds);
				}));
	});
var _user$project$ShapeWidgets$selectedFeaturesValTreesWithPoints = F3(
	function (slate, widgets, selectedFeatures) {
		return _user$project$Provenance$consolidatePointPartsIntoPoints(
			A3(_user$project$ShapeWidgets$selectedFeaturesValTrees, slate, widgets, selectedFeatures));
	});
var _user$project$ShapeWidgets$selectedValsInterpretingPoints = F5(
	function (slate, widgets, selectedFeatures, selectedShapes, selectedBlobs) {
		return _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: A3(_user$project$ShapeWidgets$selectedFeaturesValTreesWithPoints, slate, widgets, selectedFeatures),
				_1: {
					ctor: '::',
					_0: A3(_user$project$ShapeWidgets$selectedShapesValTrees, slate, widgets, selectedShapes),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$ShapeWidgets$selectedBlobsValTrees,
							slate,
							_elm_lang$core$Dict$toList(selectedBlobs)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$ShapeWidgets$selectedFeaturesToEIdInterpretationLists = F5(
	function (program, _p197, widgets, selectedFeatures, expFilter) {
		var _p198 = _p197;
		var _p211 = _p198._1;
		var recurse = function (remainingFeatures) {
			return A5(_user$project$ShapeWidgets$selectedFeaturesToEIdInterpretationLists, program, _p198, widgets, remainingFeatures, expFilter);
		};
		var _p199 = selectedFeatures;
		if (_p199.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p210 = _p199._0;
			var _p209 = _p199._1;
			var eidSets = A2(
				_user$project$ShapeWidgets$featureEquationToEIdSets,
				expFilter,
				A2(
					_user$project$Utils$fromJust_,
					'selectedFeaturesToEIdLists: can\'t make feature into val equation',
					A3(_user$project$ShapeWidgets$featureToEquation, _p210, _p211, widgets)));
			var _p200 = A2(
				_user$project$Utils$findFirst,
				function (otherSelectableFeature) {
					return A2(_user$project$ShapeWidgets$featuresAreXYPairs, _p210, otherSelectableFeature);
				},
				_p209);
			if (_p200.ctor === 'Just') {
				var _p208 = _p200._0;
				var otherEIdSets = A2(
					_user$project$ShapeWidgets$featureEquationToEIdSets,
					expFilter,
					A2(
						_user$project$Utils$fromJust_,
						'selectedFeaturesToEIdLists2: can\'t make feature into val equation',
						A3(_user$project$ShapeWidgets$featureToEquation, _p208, _p211, widgets)));
				var singletonEIdSets = A2(
					_elm_lang$core$List$filter,
					function (_p201) {
						return A2(
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								}),
							1,
							_elm_lang$core$Set$size(_p201));
					},
					eidSets);
				var singletonOtherEIdSets = A2(
					_elm_lang$core$List$filter,
					function (_p202) {
						return A2(
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								}),
							1,
							_elm_lang$core$Set$size(_p202));
					},
					otherEIdSets);
				var pointTuples = A2(
					_elm_lang$core$List$filterMap,
					function (_p203) {
						var _p204 = _p203;
						var _p205 = {
							ctor: '_Tuple2',
							_0: A2(
								_user$project$Lang$parentByEId,
								program,
								_user$project$Utils$unwrapSingletonSet(_p204._0)),
							_1: A2(
								_user$project$Lang$parentByEId,
								program,
								_user$project$Utils$unwrapSingletonSet(_p204._1))
						};
						if (((((_p205.ctor === '_Tuple2') && (_p205._0.ctor === 'Just')) && (_p205._0._0.ctor === 'Just')) && (_p205._1.ctor === 'Just')) && (_p205._1._0.ctor === 'Just')) {
							var _p206 = _p205._0._0._0;
							return (_user$project$Lang$isPair(_p206) && _elm_lang$core$Native_Utils.eq(_p206, _p205._1._0._0)) ? _elm_lang$core$Maybe$Just(_p206.val.eid) : _elm_lang$core$Maybe$Nothing;
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					},
					A2(_user$project$Utils$cartProd, singletonEIdSets, singletonOtherEIdSets));
				var _p207 = pointTuples;
				if (_p207.ctor === '[]') {
					return {
						ctor: '::',
						_0: eidSets,
						_1: recurse(_p209)
					};
				} else {
					return {
						ctor: '::',
						_0: A2(_elm_lang$core$List$map, _elm_lang$core$Set$singleton, pointTuples),
						_1: recurse(
							A2(_user$project$Utils$removeAsSet, _p208, _p209))
					};
				}
			} else {
				return {
					ctor: '::',
					_0: eidSets,
					_1: recurse(_p209)
				};
			}
		}
	});
var _user$project$ShapeWidgets$evaluateLineFeatures = function (attrs) {
	return _user$project$Utils$unwrap6(
		A2(
			_elm_lang$core$List$map,
			function (shapeFeature) {
				return _user$project$ShapeWidgets$evaluateFeatureEquation_(
					A3(_user$project$ShapeWidgets$shapeFeatureEquation, shapeFeature, 'line', attrs));
			},
			{
				ctor: '::',
				_0: _user$project$ShapeWidgets$XFeat(
					_user$project$ShapeWidgets$Point(1)),
				_1: {
					ctor: '::',
					_0: _user$project$ShapeWidgets$YFeat(
						_user$project$ShapeWidgets$Point(1)),
					_1: {
						ctor: '::',
						_0: _user$project$ShapeWidgets$XFeat(
							_user$project$ShapeWidgets$Point(2)),
						_1: {
							ctor: '::',
							_0: _user$project$ShapeWidgets$YFeat(
								_user$project$ShapeWidgets$Point(2)),
							_1: {
								ctor: '::',
								_0: _user$project$ShapeWidgets$XFeat(_user$project$ShapeWidgets$Center),
								_1: {
									ctor: '::',
									_0: _user$project$ShapeWidgets$YFeat(_user$project$ShapeWidgets$Center),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}));
};
var _user$project$ShapeWidgets$getPointEquations = F3(
	function (kind, attrs, pointFeature) {
		return {
			ctor: '_Tuple2',
			_0: A3(
				_user$project$ShapeWidgets$shapeFeatureEquation,
				_user$project$ShapeWidgets$XFeat(pointFeature),
				kind,
				attrs),
			_1: A3(
				_user$project$ShapeWidgets$shapeFeatureEquation,
				_user$project$ShapeWidgets$YFeat(pointFeature),
				kind,
				attrs)
		};
	});
var _user$project$ShapeWidgets$maybeEvaluateShapePointFeatureXYVals = F3(
	function (shapeKind, shapeAttrs, pointFeature) {
		var _p212 = A3(_user$project$ShapeWidgets$getPointEquations, shapeKind, shapeAttrs, pointFeature);
		var xEqn = _p212._0;
		var yEqn = _p212._1;
		var _p213 = {
			ctor: '_Tuple2',
			_0: _user$project$ShapeWidgets$evaluateFeatureEquation(xEqn),
			_1: _user$project$ShapeWidgets$evaluateFeatureEquation(yEqn)
		};
		if (((_p213.ctor === '_Tuple2') && (_p213._0.ctor === 'Just')) && (_p213._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: _p213._0._0, _1: _p213._1._0});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$ShapeWidgets$maybeEvaluateShapePointFeature = F3(
	function (shapeKind, shapeAttrs, pointFeature) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p214) {
				var _p215 = _p214;
				return {
					ctor: '_Tuple2',
					_0: _user$project$Lang$valToNum(_p215._0),
					_1: _user$project$Lang$valToNum(_p215._1)
				};
			},
			A3(_user$project$ShapeWidgets$maybeEvaluateShapePointFeatureXYVals, shapeKind, shapeAttrs, pointFeature));
	});
var _user$project$ShapeWidgets$selectablePointToMaybeXY = F3(
	function (_p216, slate, widgets) {
		var _p217 = _p216;
		var _p221 = _p217._1;
		var _p220 = _p217._0;
		if (_elm_lang$core$Native_Utils.cmp(_p220, -2) < 0) {
			var idAsShape = -2 - _p220;
			return A2(
				_elm_lang$core$Maybe$andThen,
				function (widget) {
					return A2(_user$project$ShapeWidgets$maybeEvaluateWidgetPointFeature, widget, _p221);
				},
				A2(_user$project$Utils$maybeGeti1, idAsShape, widgets));
		} else {
			return A2(
				_elm_lang$core$Maybe$andThen,
				function (_p218) {
					var _p219 = _p218;
					return A3(_user$project$ShapeWidgets$maybeEvaluateShapePointFeature, _p219._0, _p219._1, _p221);
				},
				A2(_user$project$LangSvg$maybeGetSvgNode, _p220, slate));
		}
	});
var _user$project$ShapeWidgets$maybeShapeBounds = function (svgNode) {
	var _p222 = svgNode.interpreted;
	if (_p222.ctor === 'TextNode') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p224 = _p222._0;
		var _p223 = _p222._1;
		return _user$project$ShapeWidgets$pointsToMaybeBounds(
			A2(
				_elm_lang$core$List$filterMap,
				A2(_user$project$ShapeWidgets$maybeEvaluateShapePointFeature, _p224, _p223),
				A2(_user$project$ShapeWidgets$pointFeaturesOfShape, _p224, _p223)));
	}
};
var _user$project$ShapeWidgets$valToMaybeBounds = function (val) {
	var _p225 = {
		ctor: '_Tuple2',
		_0: _user$project$ShapeWidgets$valToMaybeAnnotatedPoint(val),
		_1: _user$project$Lang$valToMaybePoint(val)
	};
	_v103_2:
	do {
		if (_p225.ctor === '_Tuple2') {
			if ((_p225._0.ctor === 'Just') && (_p225._0._0.ctor === '_Tuple2')) {
				var _p227 = _p225._0._0._1;
				var _p226 = _p225._0._0._0;
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple4', _0: _p226, _1: _p227, _2: _p226, _3: _p227});
			} else {
				if ((_p225._1.ctor === 'Just') && (_p225._1._0.ctor === '_Tuple2')) {
					var _p229 = _p225._1._0._1;
					var _p228 = _p225._1._0._0;
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple4', _0: _p228, _1: _p229, _2: _p228, _3: _p229});
				} else {
					break _v103_2;
				}
			}
		} else {
			break _v103_2;
		}
	} while(false);
	var _p230 = val.v_;
	if (_p230.ctor === 'VList') {
		var _p231 = _user$project$LangSvg$svgValToIndexedTree(val);
		if (_p231.ctor === 'Ok') {
			var shapeNodes = _elm_lang$core$Dict$values(_p231._0._1);
			return _user$project$ShapeWidgets$maybeEnclosureOfAllBounds(
				A2(_elm_lang$core$List$filterMap, _user$project$ShapeWidgets$maybeShapeBounds, shapeNodes));
		} else {
			return _user$project$ShapeWidgets$maybeEnclosureOfAllBounds(
				A2(_elm_lang$core$List$filterMap, _user$project$ShapeWidgets$valToMaybeBounds, _p230._0));
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$ShapeWidgets$maybeWidgetInitialBounds = function (widget) {
	var _p232 = widget;
	switch (_p232.ctor) {
		case 'WCall':
			return A2(
				_elm_lang$core$Maybe$map,
				A2(_user$project$ShapeWidgets$expandBounds, _user$project$ShapeWidgets$widgetBoundsPadding, _user$project$ShapeWidgets$heightForWCallFuncName),
				_user$project$ShapeWidgets$maybeEnclosureOfAllBounds(
					_user$project$Utils$filterJusts(
						A2(
							F2(
								function (x, y) {
									return A2(_elm_lang$core$Basics_ops['++'], x, y);
								}),
							A2(_elm_lang$core$List$map, _user$project$ShapeWidgets$maybeWidgetInitialBounds, _p232._4),
							A2(
								_elm_lang$core$List$map,
								_user$project$ShapeWidgets$valToMaybeBounds,
								{ctor: '::', _0: _p232._3, _1: _p232._2})))));
		case 'WList':
			return A2(
				_elm_lang$core$Maybe$map,
				A2(_user$project$ShapeWidgets$expandBounds, _user$project$ShapeWidgets$widgetBoundsPadding, _user$project$ShapeWidgets$heightForWListExp),
				_user$project$ShapeWidgets$valToMaybeBounds(_p232._0));
		default:
			return _user$project$ShapeWidgets$pointsToMaybeBounds(
				A2(
					_elm_lang$core$List$filterMap,
					_user$project$ShapeWidgets$maybeEvaluateWidgetPointFeature(widget),
					_user$project$ShapeWidgets$pointFeaturesOfWidget(widget)));
	}
};
var _user$project$ShapeWidgets$computeAndRejiggerWidgetBounds = function (widgets) {
	return A2(
		_user$project$ShapeWidgets$rejiggerWidgetBounds,
		widgets,
		A2(_elm_lang$core$List$map, _user$project$ShapeWidgets$maybeWidgetInitialBounds, widgets));
};
var _user$project$ShapeWidgets$evaluateBoxyNums = F2(
	function (kind, attrs) {
		var equations = A2(_user$project$ShapeWidgets$boxyFeatureEquations, kind, attrs);
		var _p233 = {
			ctor: '_Tuple6',
			_0: _user$project$ShapeWidgets$evaluateFeatureEquation_(equations.left),
			_1: _user$project$ShapeWidgets$evaluateFeatureEquation_(equations.top),
			_2: _user$project$ShapeWidgets$evaluateFeatureEquation_(equations.right),
			_3: _user$project$ShapeWidgets$evaluateFeatureEquation_(equations.bottom),
			_4: _user$project$ShapeWidgets$evaluateFeatureEquation_(equations.cx),
			_5: _user$project$ShapeWidgets$evaluateFeatureEquation_(equations.cy)
		};
		var left = _p233._0;
		var top = _p233._1;
		var right = _p233._2;
		var bot = _p233._3;
		var cx = _p233._4;
		var cy = _p233._5;
		var heightEqn = A2(
			_elm_lang$core$Maybe$withDefault,
			A2(_user$project$ShapeWidgets$minus, equations.bottom, equations.top),
			equations.mHeight);
		var ryEqn = A2(
			_elm_lang$core$Maybe$withDefault,
			A2(_user$project$ShapeWidgets$div, heightEqn, _user$project$ShapeWidgets$eqnNumTwo),
			equations.mRadiusY);
		var ry = _user$project$ShapeWidgets$evaluateFeatureEquation_(ryEqn);
		var height = _user$project$ShapeWidgets$evaluateFeatureEquation_(heightEqn);
		var widthEqn = A2(
			_elm_lang$core$Maybe$withDefault,
			A2(_user$project$ShapeWidgets$minus, equations.right, equations.left),
			equations.mWidth);
		var rxEqn = A2(
			_elm_lang$core$Maybe$withDefault,
			A2(_user$project$ShapeWidgets$div, widthEqn, _user$project$ShapeWidgets$eqnNumTwo),
			equations.mRadiusX);
		var rEqn = A2(_elm_lang$core$Maybe$withDefault, rxEqn, equations.mRadius);
		var r = _user$project$ShapeWidgets$evaluateFeatureEquation_(rEqn);
		var rx = _user$project$ShapeWidgets$evaluateFeatureEquation_(rxEqn);
		var width = _user$project$ShapeWidgets$evaluateFeatureEquation_(widthEqn);
		return {left: left, top: top, right: right, bot: bot, width: width, height: height, cx: cx, cy: cy, rx: rx, ry: ry, r: r};
	});
var _user$project$ShapeWidgets$ZOffset1D = {ctor: 'ZOffset1D'};
var _user$project$ShapeWidgets$ZSlider = {ctor: 'ZSlider'};
var _user$project$ShapeWidgets$ZOther = function (a) {
	return {ctor: 'ZOther', _0: a};
};
var _user$project$ShapeWidgets$ZPolyEdge = function (a) {
	return {ctor: 'ZPolyEdge', _0: a};
};
var _user$project$ShapeWidgets$ZLineEdge = {ctor: 'ZLineEdge'};
var _user$project$ShapeWidgets$ZPoint = function (a) {
	return {ctor: 'ZPoint', _0: a};
};
var _user$project$ShapeWidgets$ZInterior = {ctor: 'ZInterior'};

var _user$project$Native_REDUCE = {
  query: function (queryStr) { return window.queryReduce(queryStr) }
};

var _user$project$SolverTypes$mapSolutionsExps = F2(
	function (f, solutions) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$List$map(
				function (_p0) {
					var _p1 = _p0;
					return {
						ctor: '_Tuple2',
						_0: f(_p1._0),
						_1: _p1._1
					};
				}),
			solutions);
	});
var _user$project$SolverTypes$SolutionsCache = F2(
	function (a, b) {
		return {eqnSystemSolutions: a, simplifications: b};
	});

var _user$project$REDUCE$skipSpaces = A2(
	_elm_tools$parser$Parser$ignore,
	_elm_tools$parser$Parser$zeroOrMore,
	function ($char) {
		return _elm_lang$core$Native_Utils.eq(
			$char,
			_elm_lang$core$Native_Utils.chr(' ')) || _elm_lang$core$Native_Utils.eq(
			$char,
			_elm_lang$core$Native_Utils.chr('\t'));
	});
var _user$project$REDUCE$parseNumber = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p0, posFloat) {
					return 0 - posFloat;
				}),
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$symbol('-'),
				_user$project$REDUCE$skipSpaces),
			_elm_tools$parser$Parser$float),
		_1: {
			ctor: '::',
			_0: _elm_tools$parser$Parser$float,
			_1: {ctor: '[]'}
		}
	});
var _user$project$REDUCE$parseMathNum = A2(
	_elm_tools$parser$Parser$inContext,
	'parseMathNum',
	A2(_elm_tools$parser$Parser$map, _user$project$Lang$MathNum, _user$project$REDUCE$parseNumber));
var _user$project$REDUCE$eatChar = function ($char) {
	return A2(
		_elm_tools$parser$Parser$ignore,
		_elm_tools$parser$Parser$Exactly(1),
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})($char));
};
var _user$project$REDUCE_ops = _user$project$REDUCE_ops || {};
_user$project$REDUCE_ops['.|'] = _elm_tools$parser$Parser$delayedCommit;
var _user$project$REDUCE$wsSymbol = function (str) {
	return A2(
		_user$project$REDUCE_ops['.|'],
		_user$project$REDUCE$skipSpaces,
		_elm_tools$parser$Parser$symbol(str));
};
var _user$project$REDUCE$between = F3(
	function (openStr, closeStr, innerParser) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'between ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					openStr,
					A2(_elm_lang$core$Basics_ops['++'], ' ', closeStr))),
			A2(
				_user$project$REDUCE_ops['.|'],
				_user$project$REDUCE$wsSymbol(openStr),
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					innerParser,
					_user$project$REDUCE$wsSymbol(closeStr))));
	});
var _user$project$REDUCE$parseParens = function (innerParser) {
	return A3(_user$project$REDUCE$between, '(', ')', innerParser);
};
var _user$project$REDUCE$parseCommaSeparatedList = function (itemParser) {
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					_elm_tools$parser$Parser$succeed(
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})),
					itemParser),
				A2(
					_elm_tools$parser$Parser$repeat,
					_elm_tools$parser$Parser$zeroOrMore,
					A2(
						_user$project$REDUCE_ops['.|'],
						_user$project$REDUCE$wsSymbol(','),
						itemParser))),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$succeed(
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$REDUCE$parseVarToVarId = A2(
	_elm_tools$parser$Parser$inContext,
	'parseVarToVarId',
	A2(
		_user$project$REDUCE_ops['.|'],
		_user$project$REDUCE$eatChar(
			_elm_lang$core$Native_Utils.chr('x')),
		_elm_tools$parser$Parser$int));
var _user$project$REDUCE$parseMathVar = A2(
	_elm_tools$parser$Parser$inContext,
	'parseMathVar',
	A2(_elm_tools$parser$Parser$map, _user$project$Lang$MathVar, _user$project$REDUCE$parseVarToVarId));
var _user$project$REDUCE$parseEqnPi = A2(
	_elm_tools$parser$Parser$inContext,
	'parseEqnPi',
	A2(
		_user$project$REDUCE_ops['.|'],
		_user$project$REDUCE$wsSymbol('pi'),
		_elm_tools$parser$Parser$succeed(
			A2(
				_user$project$Lang$MathOp,
				_user$project$Lang$Pi,
				{ctor: '[]'}))));
var _user$project$REDUCE$binaryOperatorList = {
	ctor: '::',
	_0: {ctor: '_Tuple4', _0: '+', _1: _user$project$BinaryOperatorParser$Left, _2: 2, _3: _user$project$Lang$Plus},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple4', _0: '-', _1: _user$project$BinaryOperatorParser$Left, _2: 2, _3: _user$project$Lang$Minus},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple4', _0: '**', _1: _user$project$BinaryOperatorParser$Left, _2: 4, _3: _user$project$Lang$Pow},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple4', _0: '*', _1: _user$project$BinaryOperatorParser$Left, _2: 3, _3: _user$project$Lang$Mult},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple4', _0: '/', _1: _user$project$BinaryOperatorParser$Left, _2: 3, _3: _user$project$Lang$Div},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple4', _0: 'mod', _1: _user$project$BinaryOperatorParser$Left, _2: 1, _3: _user$project$Lang$Mod},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	}
};
var _user$project$REDUCE$precedenceTable = A3(
	_elm_lang$core$List$foldl,
	F2(
		function (_p1, pt) {
			var _p2 = _p1;
			return A2(
				_user$project$BinaryOperatorParser$addOperator,
				{ctor: '_Tuple3', _0: _p2._0, _1: _p2._1, _2: _p2._2},
				pt);
		}),
	_user$project$BinaryOperatorParser$emptyPrecedenceTable,
	_user$project$REDUCE$binaryOperatorList);
var _user$project$REDUCE$parseBinaryOperatorStr = A2(
	_elm_tools$parser$Parser$inContext,
	'parseBinaryOperatorStr',
	_elm_tools$parser$Parser$oneOf(
		A2(
			_elm_lang$core$List$map,
			function (_p3) {
				var _p4 = _p3;
				var _p5 = _p4._0;
				return A2(
					_elm_tools$parser$Parser$map,
					_elm_lang$core$Basics$always(_p5),
					_user$project$REDUCE$wsSymbol(_p5));
			},
			_user$project$REDUCE$binaryOperatorList)));
var _user$project$REDUCE$parseMathExp = _elm_tools$parser$Parser$lazy(
	function (_p6) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			'parseMathExp',
			_user$project$BinaryOperatorParser$binaryOperator(
				{
					precedenceTable: _user$project$REDUCE$precedenceTable,
					minimumPrecedence: 1,
					expression: _user$project$REDUCE$parseEqnAtom,
					operator: _user$project$REDUCE$parseBinaryOperatorStr,
					representation: _elm_lang$core$Basics$identity,
					combine: F3(
						function (left, opStr, right) {
							var _p9 = A2(
								_user$project$Utils$findFirst,
								function (_p7) {
									var _p8 = _p7;
									return _elm_lang$core$Native_Utils.eq(_p8._0, opStr);
								},
								_user$project$REDUCE$binaryOperatorList);
							if (_p9.ctor === 'Just') {
								return A2(
									_user$project$Lang$MathOp,
									_p9._0._3,
									{
										ctor: '::',
										_0: left,
										_1: {
											ctor: '::',
											_0: right,
											_1: {ctor: '[]'}
										}
									});
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'REDUCE',
									{
										start: {line: 289, column: 15},
										end: {line: 291, column: 126}
									},
									_p9)(
									A2(_elm_lang$core$Basics_ops['++'], 'REDUCE parsing: Should not happen: could not find binary op ', opStr));
							}
						})
				}));
	});
var _user$project$REDUCE$parseEqnAtom = _elm_tools$parser$Parser$lazy(
	function (_p11) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			'parseEqnAtom',
			A2(
				_user$project$REDUCE_ops['.|'],
				_user$project$REDUCE$skipSpaces,
				_elm_tools$parser$Parser$oneOf(
					{
						ctor: '::',
						_0: _user$project$REDUCE$parseMathNum,
						_1: {
							ctor: '::',
							_0: _user$project$REDUCE$parseMathVar,
							_1: {
								ctor: '::',
								_0: _user$project$REDUCE$parseEqnParens,
								_1: {
									ctor: '::',
									_0: _user$project$REDUCE$parseEqnFunction,
									_1: {
										ctor: '::',
										_0: _user$project$REDUCE$parseEqnPi,
										_1: {
											ctor: '::',
											_0: _user$project$REDUCE$parseNegation,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					})));
	});
var _user$project$REDUCE$parseEqnFunction = _elm_tools$parser$Parser$lazy(
	function (_p12) {
		return A2(
			_elm_tools$parser$Parser$inContext,
			'parseEqnFunction',
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(_user$project$REDUCE$parseBinaryFunction, 'atan2', _user$project$Lang$ArcTan2),
					_1: {
						ctor: '::',
						_0: A2(_user$project$REDUCE$parseUnaryFunction, 'cos', _user$project$Lang$Cos),
						_1: {
							ctor: '::',
							_0: A2(_user$project$REDUCE$parseUnaryFunction, 'sin', _user$project$Lang$Sin),
							_1: {
								ctor: '::',
								_0: A2(_user$project$REDUCE$parseUnaryFunction, 'acos', _user$project$Lang$ArcCos),
								_1: {
									ctor: '::',
									_0: A2(_user$project$REDUCE$parseUnaryFunction, 'asin', _user$project$Lang$ArcSin),
									_1: {
										ctor: '::',
										_0: A2(_user$project$REDUCE$parseUnaryFunction, 'abs', _user$project$Lang$Abs),
										_1: {
											ctor: '::',
											_0: A2(_user$project$REDUCE$parseUnaryFunction, 'floor', _user$project$Lang$Floor),
											_1: {
												ctor: '::',
												_0: A2(_user$project$REDUCE$parseUnaryFunction, 'ceiling', _user$project$Lang$Ceil),
												_1: {
													ctor: '::',
													_0: A2(_user$project$REDUCE$parseUnaryFunction, 'round', _user$project$Lang$Round),
													_1: {
														ctor: '::',
														_0: A2(_user$project$REDUCE$parseUnaryFunction, 'sqrt', _user$project$Lang$Sqrt),
														_1: {
															ctor: '::',
															_0: A2(_user$project$REDUCE$parseUnaryFunction, 'ln', _user$project$Lang$Ln),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _user$project$REDUCE$parseBinaryFunction = F2(
	function (funcName, op_) {
		return A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(
								F2(
									function (argTerm1, argTerm2) {
										return A2(
											_user$project$Lang$MathOp,
											op_,
											{
												ctor: '::',
												_0: argTerm1,
												_1: {
													ctor: '::',
													_0: argTerm2,
													_1: {ctor: '[]'}
												}
											});
									})),
							_user$project$REDUCE$wsSymbol(
								A2(_elm_lang$core$Basics_ops['++'], funcName, '('))),
						_user$project$REDUCE$parseMathExp),
					_user$project$REDUCE$wsSymbol(',')),
				_user$project$REDUCE$parseMathExp),
			_user$project$REDUCE$wsSymbol(')'));
	});
var _user$project$REDUCE$parseUnaryFunction = F2(
	function (funcName, op_) {
		return A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(
						function (argTerm) {
							return A2(
								_user$project$Lang$MathOp,
								op_,
								{
									ctor: '::',
									_0: argTerm,
									_1: {ctor: '[]'}
								});
						}),
					_user$project$REDUCE$wsSymbol(
						A2(_elm_lang$core$Basics_ops['++'], funcName, '('))),
				_user$project$REDUCE$parseMathExp),
			_user$project$REDUCE$wsSymbol(')'));
	});
var _user$project$REDUCE$parseEqnParens = _user$project$REDUCE$parseParens(_user$project$REDUCE$parseMathExp);
var _user$project$REDUCE$parseNegation = _elm_tools$parser$Parser$lazy(
	function (_p13) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p14, mathExp) {
					return _user$project$MathExp$neg(mathExp);
				}),
			_elm_tools$parser$Parser$symbol('-'),
			_user$project$REDUCE$parseEqnAtom);
	});
var _user$project$REDUCE$parseResultEqn = A2(
	_elm_tools$parser$Parser_ops['|='],
	A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(
					F2(
						function (varId, mathExp) {
							return {ctor: '_Tuple2', _0: mathExp, _1: varId};
						})),
				_user$project$REDUCE$skipSpaces),
			_user$project$REDUCE$parseVarToVarId),
		_user$project$REDUCE$wsSymbol('=')),
	_user$project$REDUCE$parseMathExp);
var _user$project$REDUCE$parseSolution = A2(
	_elm_tools$parser$Parser$inContext,
	'parseSolution',
	_user$project$REDUCE$parseCommaSeparatedList(_user$project$REDUCE$parseResultEqn));
var _user$project$REDUCE$parseReduceSolutionResponse = function (responseStr) {
	var solutionStrs = A2(
		_elm_lang$core$String$startsWith,
		'{{',
		_elm_lang$core$String$trimLeft(responseStr)) ? A2(_elm_lang$core$String$split, '},', responseStr) : A2(_elm_lang$core$String$split, ',', responseStr);
	return A2(
		_elm_lang$core$List$map,
		_elm_tools$parser$Parser$run(
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(_elm_tools$parser$Parser_ops['|.'], _user$project$REDUCE$parseSolution, _user$project$REDUCE$skipSpaces),
				_elm_tools$parser$Parser$end)),
		A2(
			_elm_lang$core$List$map,
			A2(_user$project$Utils$stringReplace, '}', ''),
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$Utils$stringReplace, '{', ''),
				solutionStrs)));
};
var _user$project$REDUCE$varIdToREDUCE = function (varId) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'x',
		_elm_lang$core$Basics$toString(varId));
};
var _user$project$REDUCE$mathExpToREDUCE = function (mathExp) {
	var _p15 = mathExp;
	switch (_p15.ctor) {
		case 'MathNum':
			return _elm_lang$core$Basics$toString(_p15._0);
		case 'MathVar':
			return _user$project$REDUCE$varIdToREDUCE(_p15._0);
		default:
			var childPerhapsParensToREDUCE = function (childTerm) {
				var _p16 = childTerm;
				_v5_2:
				do {
					if (_p16.ctor === 'MathOp') {
						if (_p16._0.ctor === 'ArcTan2') {
							return _user$project$REDUCE$mathExpToREDUCE(childTerm);
						} else {
							if (((_p16._1.ctor === '::') && (_p16._1._1.ctor === '::')) && (_p16._1._1._1.ctor === '[]')) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									'(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$REDUCE$mathExpToREDUCE(childTerm),
										')'));
							} else {
								break _v5_2;
							}
						}
					} else {
						break _v5_2;
					}
				} while(false);
				return _user$project$REDUCE$mathExpToREDUCE(childTerm);
			};
			var _p17 = {ctor: '_Tuple2', _0: _p15._0, _1: _p15._1};
			_v6_18:
			do {
				if (_p17.ctor === '_Tuple2') {
					if (_p17._1.ctor === '::') {
						if (_p17._1._1.ctor === '::') {
							if (_p17._1._1._1.ctor === '[]') {
								switch (_p17._0.ctor) {
									case 'Plus':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParensToREDUCE(_p17._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'+',
												childPerhapsParensToREDUCE(_p17._1._1._0)));
									case 'Minus':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParensToREDUCE(_p17._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'-',
												childPerhapsParensToREDUCE(_p17._1._1._0)));
									case 'Mult':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParensToREDUCE(_p17._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'*',
												childPerhapsParensToREDUCE(_p17._1._1._0)));
									case 'Div':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParensToREDUCE(_p17._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'/',
												childPerhapsParensToREDUCE(_p17._1._1._0)));
									case 'Pow':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											'(',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
												A2(
													_elm_lang$core$Basics_ops['++'],
													')**',
													childPerhapsParensToREDUCE(_p17._1._1._0))));
									case 'Mod':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											childPerhapsParensToREDUCE(_p17._1._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' mod ',
												childPerhapsParensToREDUCE(_p17._1._1._0)));
									case 'ArcTan2':
										return A2(
											_elm_lang$core$Basics_ops['++'],
											'atan2(',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
												A2(
													_elm_lang$core$Basics_ops['++'],
													',',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_user$project$REDUCE$mathExpToREDUCE(_p17._1._1._0),
														')'))));
									default:
										break _v6_18;
								}
							} else {
								break _v6_18;
							}
						} else {
							switch (_p17._0.ctor) {
								case 'Cos':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'cos(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'Sin':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'sin(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'ArcCos':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'acos(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'ArcSin':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'asin(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'Abs':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'abs(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'Floor':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'floor(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'Ceil':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'ceiling(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'Round':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'round(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'Sqrt':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'sqrt(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								case 'Ln':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'ln(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$REDUCE$mathExpToREDUCE(_p17._1._0),
											')'));
								default:
									break _v6_18;
							}
						}
					} else {
						if (_p17._0.ctor === 'Pi') {
							return 'pi';
						} else {
							break _v6_18;
						}
					}
				} else {
					break _v6_18;
				}
			} while(false);
			var _p18 = A2(_elm_lang$core$Debug$log, 'Didn\'t know how to convert this to REDUCE syntax', mathExp);
			return 'unknown';
	}
};
var _user$project$REDUCE$eqnToREDUCE = function (_p19) {
	var _p20 = _p19;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$REDUCE$mathExpToREDUCE(_p20._0),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'=',
			_user$project$REDUCE$mathExpToREDUCE(_p20._1)));
};
var _user$project$REDUCE$problemToREDUCE = function (_p21) {
	var _p22 = _p21;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'off nat; on combineexpt; on factor; trigsimp(solve({',
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$String$join,
				',',
				A2(_elm_lang$core$List$map, _user$project$REDUCE$eqnToREDUCE, _p22._0)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'},{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$join,
						',',
						A2(_elm_lang$core$List$map, _user$project$REDUCE$varIdToREDUCE, _p22._1)),
					'}),compact);'))));
};
var _user$project$REDUCE$simplificationToREDUCE = function (mathExp) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'off nat; on combineexpt; on factor; trigsimp(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$REDUCE$mathExpToREDUCE(mathExp),
			',compact);'));
};
var _user$project$REDUCE$solutionsCacheToString = function (solutionsCache) {
	var equationSolutionsStr = A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			function (_p23) {
				var _p24 = _p23;
				var solutionStrs = A2(
					_elm_lang$core$List$map,
					function (solution) {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							'{',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$String$join,
									',',
									A2(
										_elm_lang$core$List$map,
										function (_p25) {
											var _p26 = _p25;
											return A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$REDUCE$varIdToREDUCE(_p26._1),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'=',
													_user$project$REDUCE$mathExpToREDUCE(_p26._0)));
										},
										solution)),
								'}'));
					},
					_p24._1);
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$REDUCE$problemToREDUCE(_p24._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						';\t=> {',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_lang$core$String$join, ',', solutionStrs),
							'}')));
			},
			_elm_lang$core$Dict$toList(solutionsCache.eqnSystemSolutions)));
	var simplificationsStr = A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			function (_p27) {
				var _p28 = _p27;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$REDUCE$mathExpToREDUCE(_p28._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						';\t=> ',
						_user$project$REDUCE$mathExpToREDUCE(_p28._1)));
			},
			_elm_lang$core$Dict$toList(solutionsCache.simplifications)));
	return A2(
		_elm_lang$core$Basics_ops['++'],
		equationSolutionsStr,
		A2(_elm_lang$core$Basics_ops['++'], '\n', simplificationsStr));
};
var _user$project$REDUCE$distributeNegation = function (mathExp) {
	distributeNegation:
	while (true) {
		var _p29 = mathExp;
		switch (_p29.ctor) {
			case 'MathNum':
				return mathExp;
			case 'MathVar':
				return mathExp;
			default:
				if (((((((((((_p29._0.ctor === 'Minus') && (_p29._1.ctor === '::')) && (_p29._1._0.ctor === 'MathNum')) && (_p29._1._0._0 === 0)) && (_p29._1._1.ctor === '::')) && (_p29._1._1._0.ctor === 'MathOp')) && (_p29._1._1._0._0.ctor === 'Minus')) && (_p29._1._1._0._1.ctor === '::')) && (_p29._1._1._0._1._1.ctor === '::')) && (_p29._1._1._0._1._1._1.ctor === '[]')) && (_p29._1._1._1.ctor === '[]')) {
					var _v13 = A2(
						_user$project$Lang$MathOp,
						_user$project$Lang$Minus,
						{
							ctor: '::',
							_0: _p29._1._1._0._1._1._0,
							_1: {
								ctor: '::',
								_0: _p29._1._1._0._1._0,
								_1: {ctor: '[]'}
							}
						});
					mathExp = _v13;
					continue distributeNegation;
				} else {
					return A2(
						_user$project$Lang$MathOp,
						_p29._0,
						A2(_elm_lang$core$List$map, _user$project$REDUCE$distributeNegation, _p29._1));
				}
		}
	}
};
var _user$project$REDUCE$query = function (str) {
	var _p30 = _user$project$Utils$log(
		A2(_elm_lang$core$Basics_ops['++'], 'Reduce query: ', str));
	var responseStr = _user$project$Native_REDUCE.query(str);
	var _p31 = _user$project$Utils$log(
		A2(_elm_lang$core$Basics_ops['++'], 'Reduce response: ', responseStr));
	return responseStr;
};
var _user$project$REDUCE$solve = function (problem) {
	var responseStr = _user$project$REDUCE$query(
		_user$project$REDUCE$problemToREDUCE(problem));
	var perhapsParsedSolutions = _user$project$REDUCE$parseReduceSolutionResponse(responseStr);
	var parsedSolutions = _user$project$Utils$filterOks(perhapsParsedSolutions);
	var failedParses = _user$project$Utils$filterErrs(perhapsParsedSolutions);
	var _p32 = {ctor: '_Tuple2', _0: parsedSolutions, _1: failedParses};
	if (_p32._0.ctor === '::') {
		return A2(_user$project$SolverTypes$mapSolutionsExps, _user$project$REDUCE$distributeNegation, parsedSolutions);
	} else {
		if (_p32._1.ctor === '::') {
			var _p33 = _user$project$Utils$log(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Reduce solution response parse error: ',
					_elm_lang$core$Basics$toString(_p32._1._0)));
			return {ctor: '[]'};
		} else {
			return {ctor: '[]'};
		}
	}
};
var _user$project$REDUCE$simplify = function (unsimplifiedMathExp) {
	var _p34 = A2(
		_elm_tools$parser$Parser$run,
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(_elm_tools$parser$Parser_ops['|.'], _user$project$REDUCE$parseMathExp, _user$project$REDUCE$skipSpaces),
			_elm_tools$parser$Parser$end),
		_user$project$REDUCE$query(
			_user$project$REDUCE$simplificationToREDUCE(unsimplifiedMathExp)));
	if (_p34.ctor === 'Ok') {
		return _user$project$REDUCE$distributeNegation(_p34._0);
	} else {
		var _p35 = _user$project$Utils$log(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Reduce simplification response parse error: ',
				_elm_lang$core$Basics$toString(_p34._0)));
		return unsimplifiedMathExp;
	}
};

var _user$project$Solver$removeCommonSuperExps = function (eqn) {
	removeCommonSuperExps:
	while (true) {
		var _p0 = eqn;
		if (((((((_p0.ctor === '_Tuple2') && (_p0._0.ctor === 'MathOp')) && (_p0._0._1.ctor === '::')) && (_p0._0._1._1.ctor === '[]')) && (_p0._1.ctor === 'MathOp')) && (_p0._1._1.ctor === '::')) && (_p0._1._1._1.ctor === '[]')) {
			if (_elm_lang$core$Native_Utils.eq(_p0._0._0, _p0._1._0)) {
				var _v1 = {ctor: '_Tuple2', _0: _p0._0._1._0, _1: _p0._1._1._0};
				eqn = _v1;
				continue removeCommonSuperExps;
			} else {
				return eqn;
			}
		} else {
			return eqn;
		}
	}
};
var _user$project$Solver$remapVarIds = F2(
	function (oldToNew, mathExp) {
		var _p1 = mathExp;
		switch (_p1.ctor) {
			case 'MathNum':
				return _elm_lang$core$Maybe$Just(mathExp);
			case 'MathVar':
				return A2(
					_elm_lang$core$Maybe$map,
					_user$project$Lang$MathVar,
					A2(_elm_lang$core$Dict$get, _p1._0, oldToNew));
			default:
				return A2(
					_elm_lang$core$Maybe$map,
					_user$project$Lang$MathOp(_p1._0),
					_user$project$Utils$projJusts(
						A2(
							_elm_lang$core$List$map,
							_user$project$Solver$remapVarIds(oldToNew),
							_p1._1)));
		}
	});
var _user$project$Solver$remapSolutionVarIds = F2(
	function (oldToNew, solution) {
		return _user$project$Utils$projJusts(
			A2(
				_elm_lang$core$List$map,
				function (_p2) {
					var _p3 = _p2;
					return A3(
						_elm_lang$core$Maybe$map2,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						A2(_user$project$Solver$remapVarIds, oldToNew, _p3._0),
						A2(_elm_lang$core$Dict$get, _p3._1, oldToNew));
				},
				solution));
	});
var _user$project$Solver$normalizedVarIdMapping = function (mathExps) {
	var _p4 = A3(
		_elm_lang$core$List$foldl,
		F2(
			function (oldVarId, _p5) {
				var _p6 = _p5;
				var _p10 = _p6._1;
				var _p9 = _p6._2;
				var _p8 = _p6._0;
				var _p7 = A2(_elm_lang$core$Dict$get, oldVarId, _p10);
				if (_p7.ctor === 'Just') {
					return {ctor: '_Tuple3', _0: _p8, _1: _p10, _2: _p9};
				} else {
					return {
						ctor: '_Tuple3',
						_0: _p8 + 1,
						_1: A3(_elm_lang$core$Dict$insert, oldVarId, _p8, _p10),
						_2: A3(_elm_lang$core$Dict$insert, _p8, oldVarId, _p9)
					};
				}
			}),
		{ctor: '_Tuple3', _0: 1, _1: _elm_lang$core$Dict$empty, _2: _elm_lang$core$Dict$empty},
		A2(_elm_lang$core$List$concatMap, _user$project$MathExp$mathExpToVarIds, mathExps));
	var oldToNew = _p4._1;
	var newToOld = _p4._2;
	return {ctor: '_Tuple2', _0: oldToNew, _1: newToOld};
};
var _user$project$Solver$simplify = F2(
	function (solutionsCache, mathExp) {
		var _p11 = _user$project$Solver$normalizedVarIdMapping(
			{
				ctor: '::',
				_0: mathExp,
				_1: {ctor: '[]'}
			});
		var oldToNormalizedVarIds = _p11._0;
		var normalizedToOldVarIds = _p11._1;
		var normalizedMathExp = A2(
			_user$project$Utils$fromJust_,
			'Shouldn\'t happen: Bug in Solver.simplify/normalizedVarIdMapping',
			A2(_user$project$Solver$remapVarIds, oldToNormalizedVarIds, mathExp));
		var simplifiedMathExp = function () {
			var _p12 = A2(_elm_lang$core$Dict$get, normalizedMathExp, solutionsCache.simplifications);
			if (_p12.ctor === 'Just') {
				return _p12._0;
			} else {
				var simplifiedMathExp = _user$project$REDUCE$simplify(normalizedMathExp);
				var _p13 = A3(
					_user$project$ImpureGoodies$mutateRecordField,
					solutionsCache,
					'simplifications',
					A3(_elm_lang$core$Dict$insert, normalizedMathExp, simplifiedMathExp, solutionsCache.simplifications));
				return simplifiedMathExp;
			}
		}();
		return A2(
			_user$project$Utils$fromJust__,
			function (_p14) {
				var _p15 = _p14;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Shouldn\'t happen: Bug in Solver.simplify/normalizedVarIdMapping or some race condition, missing varId ',
					_elm_lang$core$Basics$toString(
						{ctor: '_Tuple4', _0: mathExp, _1: normalizedMathExp, _2: simplifiedMathExp, _3: normalizedToOldVarIds}));
			},
			A2(_user$project$Solver$remapVarIds, normalizedToOldVarIds, simplifiedMathExp));
	});
var _user$project$Solver$solve = F3(
	function (solutionsCache, eqns, targetVarIds) {
		var allMathExps = A2(_elm_lang$core$List$concatMap, _user$project$Utils$pairToList, eqns);
		var _p16 = _user$project$Solver$normalizedVarIdMapping(allMathExps);
		var oldToNormalizedVarIds = _p16._0;
		var normalizedToOldVarIds = _p16._1;
		var normalizedEquations = A2(
			_user$project$Utils$fromJust_,
			'Also shouldn\'t happen: Bug in Solver.solve',
			_user$project$Utils$projJusts(
				A2(
					_elm_lang$core$List$map,
					function (_p17) {
						var _p18 = _p17;
						var _p19 = {
							ctor: '_Tuple2',
							_0: A2(_user$project$Solver$remapVarIds, oldToNormalizedVarIds, _p18._0),
							_1: A2(_user$project$Solver$remapVarIds, oldToNormalizedVarIds, _p18._1)
						};
						if (((_p19.ctor === '_Tuple2') && (_p19._0.ctor === 'Just')) && (_p19._1.ctor === 'Just')) {
							return _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p19._0._0, _1: _p19._1._0});
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'Solver',
								{
									start: {line: 58, column: 11},
									end: {line: 60, column: 131}
								},
								_p19)('Shouldn\'t happen: Bug in Solver.solve/normalizedVarIdMapping');
						}
					},
					eqns)));
		var _p21 = _user$project$Utils$projJusts(
			A2(
				_elm_lang$core$List$map,
				function (targetVarId) {
					return A2(_elm_lang$core$Dict$get, targetVarId, oldToNormalizedVarIds);
				},
				targetVarIds));
		if (_p21.ctor === 'Just') {
			var problem = {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$List$map, _user$project$Solver$removeCommonSuperExps, normalizedEquations),
				_1: _p21._0
			};
			var solutions = function () {
				var _p22 = A2(_elm_lang$core$Dict$get, problem, solutionsCache.eqnSystemSolutions);
				if (_p22.ctor === 'Just') {
					return _p22._0;
				} else {
					var solutions = _user$project$REDUCE$solve(problem);
					var _p23 = A3(
						_user$project$ImpureGoodies$mutateRecordField,
						solutionsCache,
						'eqnSystemSolutions',
						A3(_elm_lang$core$Dict$insert, problem, solutions, solutionsCache.eqnSystemSolutions));
					return solutions;
				}
			}();
			return A2(
				_elm_lang$core$List$filterMap,
				_user$project$Solver$remapSolutionVarIds(normalizedToOldVarIds),
				solutions);
		} else {
			var _p24 = A2(
				_elm_lang$core$Debug$log,
				'WARNING: Asked to solve for variable(s) not in equation! No solutions.',
				{ctor: '_Tuple2', _0: eqns, _1: targetVarIds});
			return {ctor: '[]'};
		}
	});
var _user$project$Solver$solveOne = F3(
	function (solutionsCache, eqn, targetVarId) {
		return A2(
			_elm_lang$core$List$filterMap,
			function (solution) {
				var _p25 = solution;
				if (_p25.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if ((_p25._0.ctor === '_Tuple2') && (_p25._1.ctor === '[]')) {
						return _elm_lang$core$Maybe$Just(_p25._0._0);
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'Solver',
							{
								start: {line: 38, column: 9},
								end: {line: 41, column: 146}
							},
							_p25)(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Solver.solveOne why does a solution for one variable list multiple variables?? ',
								_elm_lang$core$Basics$toString(solution)));
					}
				}
			},
			A3(
				_user$project$Solver$solve,
				solutionsCache,
				{
					ctor: '::',
					_0: eqn,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: targetVarId,
					_1: {ctor: '[]'}
				}));
	});
var _user$project$Solver$solveTrace = F4(
	function (solutionsCache, subst, trace, targetVal) {
		var mathExp = trace;
		var targetVarId = A2(
			_user$project$Utils$head,
			'Solver.solveTrace: expected trace to have a locId remaining after applying subst',
			A2(
				_user$project$Utils$diffAsSet,
				_user$project$MathExp$mathExpToVarIds(mathExp),
				_elm_lang$core$Dict$keys(subst)));
		var targetValInsertedVarId = 1 + A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$maximum(
				_user$project$MathExp$mathExpToVarIds(mathExp)));
		var _p27 = A3(
			_user$project$Solver$solveOne,
			solutionsCache,
			{
				ctor: '_Tuple2',
				_0: mathExp,
				_1: _user$project$Lang$MathVar(targetValInsertedVarId)
			},
			targetVarId);
		if (_p27.ctor === '::') {
			return _user$project$MathExp$evalToMaybeNum(
				A2(
					_user$project$MathExp$applySubst,
					A3(_elm_lang$core$Dict$insert, targetValInsertedVarId, targetVal, subst),
					_p27._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

var _user$project$Sync$acePos = function (p) {
	return {row: p.line, column: p.col};
};
var _user$project$Sync$aceRange = function (x) {
	return {
		start: _user$project$Sync$acePos(x.start),
		end: _user$project$Sync$acePos(x.end)
	};
};
var _user$project$Sync$makeHighlight = F3(
	function (subst, color, locId) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (n) {
				return {
					color: color,
					range: _user$project$Sync$aceRange(n)
				};
			},
			A2(_elm_lang$core$Dict$get, locId, subst));
	});
var _user$project$Sync$red = 'salmon';
var _user$project$Sync$green = 'limegreen';
var _user$project$Sync$yellow = 'khaki';
var _user$project$Sync$highlightChanges = F3(
	function (initSubstPlus, locIds, changes) {
		var _p0 = function () {
			var f = F2(
				function (locId, _p1) {
					var _p2 = _p1;
					var _p8 = _p2._1;
					var _p7 = _p2._0;
					var highlight = function (c) {
						return A2(
							_user$project$Utils$fromJust_,
							'highlightChanges highlight: should not happen, function only called if locid in initSubstsPlus',
							A3(_user$project$Sync$makeHighlight, initSubstPlus, c, locId));
					};
					var _p3 = {
						ctor: '_Tuple2',
						_0: A2(_elm_lang$core$Dict$get, locId, initSubstPlus),
						_1: A2(_elm_lang$core$Dict$get, locId, changes)
					};
					if (_p3._0.ctor === 'Nothing') {
						return {ctor: '_Tuple2', _0: _p7, _1: _p8};
					} else {
						if (_p3._1.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: {
									ctor: '::',
									_0: highlight(_user$project$Sync$yellow),
									_1: _p7
								},
								_1: _p8
							};
						} else {
							if (_p3._1._0.ctor === 'Nothing') {
								return {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: highlight(_user$project$Sync$red),
										_1: _p7
									},
									_1: _p8
								};
							} else {
								var _p6 = _p3._1._0._0;
								var _p5 = _p3._0._0;
								if (_elm_lang$core$Native_Utils.eq(_p6, _p5.val)) {
									return {
										ctor: '_Tuple2',
										_0: {
											ctor: '::',
											_0: highlight(_user$project$Sync$yellow),
											_1: _p7
										},
										_1: _p8
									};
								} else {
									var _p4 = {
										ctor: '_Tuple2',
										_0: _user$project$ValUnparser$strNum(_p5.val),
										_1: _user$project$ValUnparser$strNum(_p6)
									};
									var s = _p4._0;
									var s_ = _p4._1;
									var x = {
										ctor: '_Tuple2',
										_0: _user$project$Sync$acePos(_p5.start),
										_1: _elm_lang$core$String$length(s_) - _elm_lang$core$String$length(s)
									};
									return {
										ctor: '_Tuple2',
										_0: {
											ctor: '::',
											_0: highlight(_user$project$Sync$green),
											_1: _p7
										},
										_1: {ctor: '::', _0: x, _1: _p8}
									};
								}
							}
						}
					}
				});
			return A3(
				_elm_lang$core$List$foldl,
				f,
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: {ctor: '[]'}
				},
				_elm_lang$core$Set$toList(locIds));
		}();
		var hi = _p0._0;
		var stringOffsets = _p0._1;
		var hi_ = function () {
			var g = F2(
				function (_p10, _p9) {
					var _p11 = _p10;
					var _p15 = _p11._0;
					var _p12 = _p9;
					var _p14 = _p12._0;
					var _p13 = _p12._1;
					var bump = function (pos) {
						return _elm_lang$core$Native_Utils.update(
							pos,
							{column: pos.column + _p11._1});
					};
					var ret = function (new_) {
						return {ctor: '_Tuple2', _0: _p14, _1: new_};
					};
					return ret(
						(!_elm_lang$core$Native_Utils.eq(_p15.row, _p14.start.row)) ? _p13 : ((_elm_lang$core$Native_Utils.cmp(_p15.column, _p14.start.column) > 0) ? _p13 : (_elm_lang$core$Native_Utils.eq(_p15.column, _p14.start.column) ? {
							start: _p13.start,
							end: bump(_p13.end)
						} : ((_elm_lang$core$Native_Utils.cmp(_p15.column, _p14.start.column) < 0) ? {
							start: bump(_p13.start),
							end: bump(_p13.end)
						} : _elm_lang$core$Native_Utils.crash(
							'Sync',
							{
								start: {line: 1312, column: 11},
								end: {line: 1312, column: 22}
							})('highlightChanges')))));
				});
			return A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$core$List$map,
				hi,
				function (_p16) {
					var _p17 = _p16;
					var _p19 = _p17.range;
					var _p18 = A3(
						_elm_lang$core$List$foldl,
						g,
						{ctor: '_Tuple2', _0: _p19, _1: _p19},
						stringOffsets);
					var range_ = _p18._1;
					return {color: _p17.color, range: range_};
				});
		}();
		return hi_;
	});
var _user$project$Sync$gray = 'lightgray';
var _user$project$Sync$opacityNumPlus = F2(
	function (n, dx) {
		var clamp = A2(_user$project$Utils$clamp, 0.0, 1.0);
		var scale = 1 / _user$project$ShapeWidgets$wOpacitySlider;
		return clamp(
			n + (scale * _elm_lang$core$Basics$toFloat(dx)));
	});
var _user$project$Sync$strokeWidthNumPlus = F2(
	function (n, dx) {
		var scale = 1 / (_user$project$ShapeWidgets$wStrokeWidthSlider / _user$project$LangSvg$maxStrokeWidthNum);
		var clamp = function (_p20) {
			return _elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$round(
					A3(_user$project$Utils$clamp, 0, _user$project$LangSvg$maxStrokeWidthNum, _p20)));
		};
		return clamp(
			n + (scale * _elm_lang$core$Basics$toFloat(dx)));
	});
var _user$project$Sync$colorNumPlus = F2(
	function (n, dx) {
		var scale = 1 / (_user$project$ShapeWidgets$wColorSlider / _user$project$ColorNum$maxColorNum);
		var clamp = A2(_user$project$Utils$clamp, 0, _user$project$ColorNum$maxColorNum - 1);
		return clamp(
			n + (scale * _elm_lang$core$Basics$toFloat(dx)));
	});
var _user$project$Sync$addInteriorZone_ = F5(
	function (finishTrigger, pointX, pointY, indexedPoints, result) {
		var xTraces = A2(
			_elm_lang$core$List$map,
			function (_p21) {
				return _elm_lang$core$Tuple$second(
					_elm_lang$core$Tuple$first(
						_elm_lang$core$Tuple$second(_p21)));
			},
			indexedPoints);
		var yTraces = A2(
			_elm_lang$core$List$map,
			function (_p22) {
				return _elm_lang$core$Tuple$second(
					_elm_lang$core$Tuple$second(
						_elm_lang$core$Tuple$second(_p22)));
			},
			indexedPoints);
		return A4(
			finishTrigger,
			_user$project$ShapeWidgets$ZInterior,
			A2(_elm_lang$core$Basics_ops['++'], xTraces, yTraces),
			function (assignedMaybeLocs) {
				var _p23 = _user$project$Utils$projJusts(assignedMaybeLocs);
				if (_p23.ctor === 'Nothing') {
					return {ctor: '[]'};
				} else {
					var _p27 = _p23._0;
					var n = _elm_lang$core$List$length(_p27);
					var xLocs = A2(_elm_lang$core$List$take, (n / 2) | 0, _p27);
					var yLocs = A2(_elm_lang$core$List$drop, (n / 2) | 0, _p27);
					var stuff = A2(
						_user$project$Utils$zip,
						A2(_user$project$Utils$zip, xLocs, yLocs),
						indexedPoints);
					return A3(
						_elm_lang$core$List$foldl,
						F2(
							function (_p24, acc) {
								var _p25 = _p24;
								var _p26 = _p25._1._0;
								return A2(
									_elm_lang$core$Basics_ops['++'],
									A4(
										pointX,
										_p26,
										_elm_lang$core$Maybe$Just(_p25._0._0),
										_p25._1._1._0._0,
										_p25._1._1._0._1),
									A2(
										_elm_lang$core$Basics_ops['++'],
										A4(
											pointY,
											_p26,
											_elm_lang$core$Maybe$Just(_p25._0._1),
											_p25._1._1._1._0,
											_p25._1._1._1._1),
										acc));
							}),
						{ctor: '[]'},
						stuff);
				}
			},
			result);
	});
var _user$project$Sync$addEdgeZones_ = F5(
	function (finishTrigger, pointX, pointY, edges, result) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p28, acc) {
					var _p29 = _p28;
					var _p38 = _p29._1._1._1._1;
					var _p37 = _p29._0._1._1._1;
					var _p36 = _p29._1._1._0._1;
					var _p35 = _p29._0._1._0._1;
					var _p34 = _p29._1._0;
					var _p33 = _p29._0._0;
					return A4(
						finishTrigger,
						_user$project$ShapeWidgets$ZPolyEdge(_p33),
						{
							ctor: '::',
							_0: _p35,
							_1: {
								ctor: '::',
								_0: _p37,
								_1: {
									ctor: '::',
									_0: _p36,
									_1: {
										ctor: '::',
										_0: _p38,
										_1: {ctor: '[]'}
									}
								}
							}
						},
						function (_p30) {
							return function (_p31) {
								var _p32 = _p31;
								return A2(
									_elm_lang$core$Basics_ops['++'],
									A4(pointX, _p33, _p32._0, _p29._0._1._0._0, _p35),
									A2(
										_elm_lang$core$Basics_ops['++'],
										A4(pointY, _p33, _p32._1, _p29._0._1._1._0, _p37),
										A2(
											_elm_lang$core$Basics_ops['++'],
											A4(pointX, _p34, _p32._2, _p29._1._1._0._0, _p36),
											A4(pointY, _p34, _p32._3, _p29._1._1._1._0, _p38))));
							}(
								_user$project$Utils$unwrap4(_p30));
						},
						acc);
				}),
			result,
			edges);
	});
var _user$project$Sync$addPointZones_ = F5(
	function (finishTrigger, pointX, pointY, indexedPoints, result) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p39, acc) {
					var _p40 = _p39;
					var _p46 = _p40._1._1._1;
					var _p45 = _p40._1._0._1;
					var _p44 = _p40._0;
					return A4(
						finishTrigger,
						_user$project$ShapeWidgets$ZPoint(
							_user$project$ShapeWidgets$Point(_p44)),
						{
							ctor: '::',
							_0: _p45,
							_1: {
								ctor: '::',
								_0: _p46,
								_1: {ctor: '[]'}
							}
						},
						function (_p41) {
							return function (_p42) {
								var _p43 = _p42;
								return A2(
									_elm_lang$core$Basics_ops['++'],
									A4(pointX, _p44, _p43._0, _p40._1._0._0, _p45),
									A4(pointY, _p44, _p43._1, _p40._1._1._0, _p46));
							}(
								_user$project$Utils$unwrap2(_p41));
						},
						acc);
				}),
			result,
			indexedPoints);
	});
var _user$project$Sync$mapMaybeToList = F2(
	function (mx, f) {
		var _p47 = mx;
		if (_p47.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: f(_p47._0),
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Sync$solveOne = F5(
	function (solutionsCache, subst, locId, n_, t) {
		var subst_ = A2(_elm_lang$core$Dict$remove, locId, subst);
		var maybeSolution = A4(_user$project$Solver$solveTrace, solutionsCache, subst_, t, n_);
		return A2(
			_user$project$Utils$filterMaybe,
			function (_p48) {
				return !_elm_lang$core$Basics$isInfinite(_p48);
			},
			A2(
				_user$project$Utils$filterMaybe,
				function (_p49) {
					return !_elm_lang$core$Basics$isNaN(_p49);
				},
				maybeSolution));
	});
var _user$project$Sync$pointX_ = F5(
	function (subst, i, xMaybeLoc, x, xTrace) {
		return A2(
			_user$project$Sync$mapMaybeToList,
			xMaybeLoc,
			function (xLoc) {
				return {
					ctor: '_Tuple5',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						'X',
						_elm_lang$core$Basics$toString(i)),
					_1: 'dx',
					_2: xLoc,
					_3: xTrace,
					_4: F3(
						function (solutionsCache, _p51, _p50) {
							var _p52 = _p50;
							return A5(
								_user$project$Sync$solveOne,
								solutionsCache,
								subst,
								xLoc,
								x + _elm_lang$core$Basics$toFloat(_p52._0),
								xTrace);
						})
				};
			});
	});
var _user$project$Sync$pointY_ = F5(
	function (subst, i, yMaybeLoc, y, yTrace) {
		return A2(
			_user$project$Sync$mapMaybeToList,
			yMaybeLoc,
			function (yLoc) {
				return {
					ctor: '_Tuple5',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						'Y',
						_elm_lang$core$Basics$toString(i)),
					_1: 'dy',
					_2: yLoc,
					_3: yTrace,
					_4: F3(
						function (solutionsCache, _p54, _p53) {
							var _p55 = _p53;
							return A5(
								_user$project$Sync$solveOne,
								solutionsCache,
								subst,
								yLoc,
								y + _elm_lang$core$Basics$toFloat(_p55._1),
								yTrace);
						})
				};
			});
	});
var _user$project$Sync$convertEmptyToNonEmpty = function (locList) {
	var _p56 = locList;
	if (_p56.ctor === '[]') {
		return {
			ctor: '::',
			_0: _elm_lang$core$Maybe$Nothing,
			_1: {ctor: '[]'}
		};
	} else {
		return A2(_elm_lang$core$List$map, _elm_lang$core$Maybe$Just, locList);
	}
};
var _user$project$Sync$getCount = F2(
	function (x, dict) {
		return A3(_user$project$Utils$getWithDefault, x, 0, dict);
	});
var _user$project$Sync$incrementCount = F2(
	function (x, dict) {
		return A3(
			_elm_lang$core$Dict$insert,
			x,
			1 + A2(_user$project$Sync$getCount, x, dict),
			dict);
	});
var _user$project$Sync$addCount = F3(
	function (k, x, dict) {
		return A3(
			_elm_lang$core$Dict$insert,
			x,
			k + A2(_user$project$Sync$getCount, x, dict),
			dict);
	});
var _user$project$Sync$chooseBiased = F2(
	function (biasCounts, locIdSet) {
		return _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$sortBy,
				function (locId) {
					return A2(_user$project$Sync$getCount, locId, biasCounts);
				},
				_elm_lang$core$Set$toList(locIdSet)));
	});
var _user$project$Sync$chooseFairLocationAssignment = F2(
	function (locSets, fairCounts) {
		var noAssignment = function (_p57) {
			var _p58 = _p57;
			var allNothings = A2(
				_elm_lang$core$List$repeat,
				_elm_lang$core$List$length(locSets),
				_elm_lang$core$Maybe$Nothing);
			return {ctor: '_Tuple2', _0: allNothings, _1: fairCounts};
		};
		var numCandidates = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, y) {
					return x * y;
				}),
			1,
			A2(_elm_lang$core$List$map, _elm_lang$core$Set$size, locSets));
		if (_elm_lang$core$Native_Utils.cmp(numCandidates, 100) > 0) {
			return noAssignment(
				{ctor: '_Tuple0'});
		} else {
			var sorted = A2(
				_elm_lang$core$List$sortBy,
				function (assignment) {
					return A2(_user$project$Sync$getCount, assignment, fairCounts);
				},
				_user$project$Utils$cartProdAll(
					A2(
						_elm_lang$core$List$map,
						_user$project$Sync$convertEmptyToNonEmpty,
						A2(_elm_lang$core$List$map, _elm_lang$core$Set$toList, locSets))));
			var _p59 = sorted;
			if (_p59.ctor === '[]') {
				return noAssignment(
					{ctor: '_Tuple0'});
			} else {
				var _p60 = _p59._0;
				var fairCounts_ = A2(_user$project$Sync$incrementCount, _p60, fairCounts);
				return {ctor: '_Tuple2', _0: _p60, _1: fairCounts_};
			}
		}
	});
var _user$project$Sync$unfrozenTraceLocIdSet = F2(
	function (unfrozenLocIdSet, trace) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$filter,
				function (locId) {
					return A2(_elm_lang$core$Set$member, locId, unfrozenLocIdSet);
				},
				_user$project$MathExp$mathExpToVarIds(trace)));
	});
var _user$project$Sync$unfrozenTracesLocIdSet = F2(
	function (unfrozenLocIdSet, traces) {
		return _user$project$Utils$unionAll(
			A2(
				_elm_lang$core$List$map,
				_user$project$Sync$unfrozenTraceLocIdSet(unfrozenLocIdSet),
				traces));
	});
var _user$project$Sync$pickLocs = F4(
	function (subst, unfrozenLocIdSet, maybeCounts, traces) {
		var possibleLocIdSets = A2(
			_elm_lang$core$List$map,
			function (trace) {
				var mathExp = trace;
				return A2(
					_elm_lang$core$Set$filter,
					function (locId) {
						var _p61 = A3(_user$project$MathExp$applySubstAndEvaluateWithDerivative, subst, locId, mathExp);
						var concreteDerivative = _p61._1;
						return !(_elm_lang$core$Basics$isNaN(concreteDerivative) || (_elm_lang$core$Basics$isInfinite(concreteDerivative) || _elm_lang$core$Native_Utils.eq(0.0, concreteDerivative)));
					},
					A2(_user$project$Sync$unfrozenTraceLocIdSet, unfrozenLocIdSet, trace));
			},
			traces);
		var allLocs = _user$project$Utils$unionAll(possibleLocIdSets);
		var _p62 = function () {
			var _p63 = maybeCounts;
			if (_p63.ctor === 'Nothing') {
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
						possibleLocIdSets),
					_1: _elm_lang$core$Maybe$Nothing
				};
			} else {
				if (_p63._0.ctor === 'Left') {
					var _p64 = _p63._0._0;
					return {
						ctor: '_Tuple2',
						_0: A2(
							_elm_lang$core$List$map,
							_user$project$Sync$chooseBiased(_p64),
							possibleLocIdSets),
						_1: _elm_lang$core$Maybe$Just(
							_user$project$Either$Left(_p64))
					};
				} else {
					return A2(
						_elm_lang$core$Tuple$mapSecond,
						function (_p65) {
							return _elm_lang$core$Maybe$Just(
								_user$project$Either$Right(_p65));
						},
						A2(_user$project$Sync$chooseFairLocationAssignment, possibleLocIdSets, _p63._0._0));
				}
			}
		}();
		var assignedMaybeLocs = _p62._0;
		var maybeCounts_ = _p62._1;
		return {ctor: '_Tuple3', _0: assignedMaybeLocs, _1: allLocs, _2: maybeCounts_};
	});
var _user$project$Sync$addTrigger = F7(
	function (subst, unfrozenLocIdSet, id, realZone, traces, makeTrigger, _p66) {
		var _p67 = _p66;
		var key = {ctor: '_Tuple2', _0: id, _1: realZone};
		var _p68 = A4(_user$project$Sync$pickLocs, subst, unfrozenLocIdSet, _p67._1, traces);
		var assignedMaybeLocs = _p68._0;
		var allLocs = _p68._1;
		var maybeCounts_ = _p68._2;
		var trigger = makeTrigger(assignedMaybeLocs);
		var yellowLocs = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (triggerElt, acc) {
					var _p69 = triggerElt;
					var loc = _p69._2;
					return A2(_elm_lang$core$Set$insert, loc, acc);
				}),
			_elm_lang$core$Set$empty,
			trigger);
		var grayLocs = A2(_elm_lang$core$Set$diff, allLocs, yellowLocs);
		var dict_ = A3(
			_elm_lang$core$Dict$insert,
			key,
			{ctor: '_Tuple3', _0: trigger, _1: yellowLocs, _2: grayLocs},
			_p67._0);
		return {ctor: '_Tuple2', _0: dict_, _1: maybeCounts_};
	});
var _user$project$Sync$computeWidgetTriggers = F3(
	function (_p70, widgets, initMaybeCounts) {
		var _p71 = _p70;
		var _p106 = _p71._0;
		var _p105 = _p71._1;
		var wSlider = _user$project$Config$params.mainSection.uiWidgets.wSlider;
		var processWidget = F2(
			function (_p72, accResult) {
				var _p73 = _p72;
				var idAsShape = -2 - _p73._0;
				var _p74 = _p73._1;
				switch (_p74.ctor) {
					case 'WNumSlider':
						var _p81 = _p74._0;
						var _p80 = _p74._1;
						var _p79 = _p74._5._0;
						var updateX = function (dx) {
							return A3(
								_elm_lang$core$Basics$clamp,
								_p81,
								_p80,
								_p74._3 + ((_elm_lang$core$Basics$toFloat(dx) / _elm_lang$core$Basics$toFloat(wSlider)) * (_p80 - _p81)));
						};
						var unfrozenLocIdSet_ = _elm_lang$core$Set$singleton(_p79);
						return A7(
							_user$project$Sync$addTrigger,
							_p105,
							unfrozenLocIdSet_,
							idAsShape,
							_user$project$ShapeWidgets$ZSlider,
							{
								ctor: '::',
								_0: _user$project$Lang$MathVar(_p79),
								_1: {ctor: '[]'}
							},
							function (_p75) {
								return function (maybeLoc) {
									return A2(
										_user$project$Sync$mapMaybeToList,
										maybeLoc,
										function (loc_) {
											return {
												ctor: '_Tuple5',
												_0: '',
												_1: 'dx',
												_2: loc_,
												_3: _user$project$Lang$MathVar(_p79),
												_4: F3(
													function (solutionsCache, _p77, _p76) {
														var _p78 = _p76;
														return A5(
															_user$project$Sync$solveOne,
															solutionsCache,
															_p105,
															loc_,
															updateX(_p78._0),
															_user$project$Lang$MathVar(_p79));
													})
											};
										});
								}(
									_user$project$Utils$unwrap1(_p75));
							},
							accResult);
					case 'WIntSlider':
						var _p87 = _p74._5._0;
						var _p82 = {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Basics$toFloat(_p74._0),
							_1: _elm_lang$core$Basics$toFloat(_p74._1),
							_2: _elm_lang$core$Basics$toFloat(_p74._3)
						};
						var minVal = _p82._0;
						var maxVal = _p82._1;
						var curVal = _p82._2;
						var updateX = function (dx) {
							return _elm_lang$core$Basics$toFloat(
								_elm_lang$core$Basics$round(
									A3(
										_elm_lang$core$Basics$clamp,
										minVal,
										maxVal,
										curVal + ((_elm_lang$core$Basics$toFloat(dx) / _elm_lang$core$Basics$toFloat(wSlider)) * (maxVal - minVal)))));
						};
						var unfrozenLocIdSet_ = _elm_lang$core$Set$singleton(_p87);
						return A7(
							_user$project$Sync$addTrigger,
							_p105,
							unfrozenLocIdSet_,
							idAsShape,
							_user$project$ShapeWidgets$ZSlider,
							{
								ctor: '::',
								_0: _user$project$Lang$MathVar(_p87),
								_1: {ctor: '[]'}
							},
							function (_p83) {
								return function (maybeLoc) {
									return A2(
										_user$project$Sync$mapMaybeToList,
										maybeLoc,
										function (loc_) {
											return {
												ctor: '_Tuple5',
												_0: '',
												_1: 'dx',
												_2: loc_,
												_3: _user$project$Lang$MathVar(_p87),
												_4: F3(
													function (solutionsCache, _p85, _p84) {
														var _p86 = _p84;
														return A5(
															_user$project$Sync$solveOne,
															solutionsCache,
															_p105,
															loc_,
															updateX(_p86._0),
															_user$project$Lang$MathVar(_p87));
													})
											};
										});
								}(
									_user$project$Utils$unwrap1(_p83));
							},
							accResult);
					case 'WPoint':
						var _p98 = _p74._2._1;
						var _p97 = _p74._0._1;
						return A7(
							_user$project$Sync$addTrigger,
							_p105,
							_p106,
							idAsShape,
							_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$LonePoint),
							{
								ctor: '::',
								_0: _p97,
								_1: {
									ctor: '::',
									_0: _p98,
									_1: {ctor: '[]'}
								}
							},
							function (_p88) {
								return function (_p89) {
									var _p90 = _p89;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										A2(
											_user$project$Sync$mapMaybeToList,
											_p90._0,
											function (xLoc) {
												return {
													ctor: '_Tuple5',
													_0: '',
													_1: 'dx',
													_2: xLoc,
													_3: _p97,
													_4: F3(
														function (solutionsCache, _p92, _p91) {
															var _p93 = _p91;
															return A5(
																_user$project$Sync$solveOne,
																solutionsCache,
																_p105,
																xLoc,
																_p74._0._0 + _elm_lang$core$Basics$toFloat(_p93._0),
																_p97);
														})
												};
											}),
										A2(
											_user$project$Sync$mapMaybeToList,
											_p90._1,
											function (yLoc) {
												return {
													ctor: '_Tuple5',
													_0: '',
													_1: 'dy',
													_2: yLoc,
													_3: _p98,
													_4: F3(
														function (solutionsCache, _p95, _p94) {
															var _p96 = _p94;
															return A5(
																_user$project$Sync$solveOne,
																solutionsCache,
																_p105,
																yLoc,
																_p74._2._0 + _elm_lang$core$Basics$toFloat(_p96._1),
																_p98);
														})
												};
											}));
								}(
									_user$project$Utils$unwrap2(_p88));
							},
							accResult);
					case 'WOffset1D':
						var _p104 = _p74._2;
						var _p103 = _p74._4._1;
						return A7(
							_user$project$Sync$addTrigger,
							_p105,
							_p106,
							idAsShape,
							_user$project$ShapeWidgets$ZOffset1D,
							{
								ctor: '::',
								_0: _p103,
								_1: {ctor: '[]'}
							},
							function (_p99) {
								return function (maybeLoc) {
									return A2(
										_user$project$Sync$mapMaybeToList,
										maybeLoc,
										function (loc_) {
											return {
												ctor: '_Tuple5',
												_0: '',
												_1: _elm_lang$core$Native_Utils.eq(_p104, _user$project$Lang$X) ? 'dx' : 'dy',
												_2: loc_,
												_3: _p103,
												_4: F3(
													function (solutionsCache, _p101, _p100) {
														var _p102 = _p100;
														return A5(
															_user$project$Sync$solveOne,
															solutionsCache,
															_p105,
															loc_,
															A2(
																_elm_lang$core$Native_Utils.eq(_p74._3, _user$project$Lang$Positive) ? F2(
																	function (x, y) {
																		return x + y;
																	}) : F2(
																	function (x, y) {
																		return x - y;
																	}),
																_p74._4._0,
																_elm_lang$core$Native_Utils.eq(_p104, _user$project$Lang$X) ? _elm_lang$core$Basics$toFloat(_p102._0) : _elm_lang$core$Basics$toFloat(_p102._1)),
															_p103);
													})
											};
										});
								}(
									_user$project$Utils$unwrap1(_p99));
							},
							accResult);
					case 'WCall':
						return accResult;
					default:
						return accResult;
				}
			});
		return A3(
			_user$project$Utils$foldli1,
			processWidget,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: initMaybeCounts},
			widgets);
	});
var _user$project$Sync$computeRectTriggers = F3(
	function (_p108, maybeCounts, _p107) {
		var _p109 = _p108;
		var _p144 = _p109._1;
		var _p110 = _p107;
		var finishTrigger = A3(_user$project$Sync$addTrigger, _p144, _p109._0, _p110._0);
		var _p111 = _user$project$Utils$unwrap4(
			A2(
				_elm_lang$core$List$map,
				function (_p112) {
					return _user$project$LangSvg$toNum(
						A2(_user$project$Utils$find_, _p110._2, _p112));
				},
				{
					ctor: '::',
					_0: 'x',
					_1: {
						ctor: '::',
						_0: 'y',
						_1: {
							ctor: '::',
							_0: 'width',
							_1: {
								ctor: '::',
								_0: 'height',
								_1: {ctor: '[]'}
							}
						}
					}
				}));
		var x = _p111._0._0;
		var xTrace = _p111._0._1;
		var y = _p111._1._0;
		var yTrace = _p111._1._1;
		var w = _p111._2._0;
		var wTrace = _p111._2._1;
		var h = _p111._3._0;
		var hTrace = _p111._3._1;
		var leftEdge = F2(
			function (xMaybeLoc, wMaybeLoc) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_user$project$Sync$mapMaybeToList,
						xMaybeLoc,
						function (xLoc) {
							return {
								ctor: '_Tuple5',
								_0: 'x',
								_1: 'dx',
								_2: xLoc,
								_3: xTrace,
								_4: F3(
									function (solutionsCache, _p114, _p113) {
										var _p115 = _p113;
										return A5(
											_user$project$Sync$solveOne,
											solutionsCache,
											_p144,
											xLoc,
											x + _elm_lang$core$Basics$toFloat(_p115._0),
											xTrace);
									})
							};
						}),
					A2(
						_user$project$Sync$mapMaybeToList,
						wMaybeLoc,
						function (wLoc) {
							return {
								ctor: '_Tuple5',
								_0: 'width',
								_1: 'dx',
								_2: wLoc,
								_3: wTrace,
								_4: F3(
									function (solutionsCache, _p117, _p116) {
										var _p118 = _p116;
										return A5(
											_user$project$Sync$solveOne,
											solutionsCache,
											_p144,
											wLoc,
											w - _elm_lang$core$Basics$toFloat(_p118._0),
											wTrace);
									})
							};
						}));
			});
		var rightEdge = function (wMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				wMaybeLoc,
				function (wLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'width',
						_1: 'dx',
						_2: wLoc,
						_3: wTrace,
						_4: F3(
							function (solutionsCache, _p120, _p119) {
								var _p121 = _p119;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p144,
									wLoc,
									w + _elm_lang$core$Basics$toFloat(_p121._0),
									wTrace);
							})
					};
				});
		};
		var topEdge = F2(
			function (yMaybeLoc, hMaybeLoc) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_user$project$Sync$mapMaybeToList,
						yMaybeLoc,
						function (yLoc) {
							return {
								ctor: '_Tuple5',
								_0: 'y',
								_1: 'dy',
								_2: yLoc,
								_3: yTrace,
								_4: F3(
									function (solutionsCache, _p123, _p122) {
										var _p124 = _p122;
										return A5(
											_user$project$Sync$solveOne,
											solutionsCache,
											_p144,
											yLoc,
											y + _elm_lang$core$Basics$toFloat(_p124._1),
											yTrace);
									})
							};
						}),
					A2(
						_user$project$Sync$mapMaybeToList,
						hMaybeLoc,
						function (hLoc) {
							return {
								ctor: '_Tuple5',
								_0: 'height',
								_1: 'dy',
								_2: hLoc,
								_3: hTrace,
								_4: F3(
									function (solutionsCache, _p126, _p125) {
										var _p127 = _p125;
										return A5(
											_user$project$Sync$solveOne,
											solutionsCache,
											_p144,
											hLoc,
											h - _elm_lang$core$Basics$toFloat(_p127._1),
											hTrace);
									})
							};
						}));
			});
		var botEdge = function (hMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				hMaybeLoc,
				function (hLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'height',
						_1: 'dy',
						_2: hLoc,
						_3: hTrace,
						_4: F3(
							function (solutionsCache, _p129, _p128) {
								var _p130 = _p128;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p144,
									hLoc,
									h + _elm_lang$core$Basics$toFloat(_p130._1),
									hTrace);
							})
					};
				});
		};
		return A4(
			finishTrigger,
			_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$LeftEdge),
			{
				ctor: '::',
				_0: xTrace,
				_1: {
					ctor: '::',
					_0: wTrace,
					_1: {ctor: '[]'}
				}
			},
			function (assignedMaybeLocs) {
				var _p131 = _user$project$Utils$unwrap2(assignedMaybeLocs);
				var xMaybeLoc = _p131._0;
				var wMaybeLoc = _p131._1;
				return A2(leftEdge, xMaybeLoc, wMaybeLoc);
			},
			A4(
				finishTrigger,
				_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotLeft),
				{
					ctor: '::',
					_0: xTrace,
					_1: {
						ctor: '::',
						_0: wTrace,
						_1: {
							ctor: '::',
							_0: hTrace,
							_1: {ctor: '[]'}
						}
					}
				},
				function (assignedMaybeLocs) {
					var _p132 = _user$project$Utils$unwrap3(assignedMaybeLocs);
					var xMaybeLoc = _p132._0;
					var wMaybeLoc = _p132._1;
					var hMaybeLoc = _p132._2;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A2(leftEdge, xMaybeLoc, wMaybeLoc),
						botEdge(hMaybeLoc));
				},
				A4(
					finishTrigger,
					_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotEdge),
					{
						ctor: '::',
						_0: hTrace,
						_1: {ctor: '[]'}
					},
					function (assignedMaybeLocs) {
						var hMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
						return botEdge(hMaybeLoc);
					},
					A4(
						finishTrigger,
						_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotRight),
						{
							ctor: '::',
							_0: wTrace,
							_1: {
								ctor: '::',
								_0: hTrace,
								_1: {ctor: '[]'}
							}
						},
						function (assignedMaybeLocs) {
							var _p133 = _user$project$Utils$unwrap2(assignedMaybeLocs);
							var wMaybeLoc = _p133._0;
							var hMaybeLoc = _p133._1;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								rightEdge(wMaybeLoc),
								botEdge(hMaybeLoc));
						},
						A4(
							finishTrigger,
							_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$RightEdge),
							{
								ctor: '::',
								_0: wTrace,
								_1: {ctor: '[]'}
							},
							function (assignedMaybeLocs) {
								var wMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
								return rightEdge(wMaybeLoc);
							},
							A4(
								finishTrigger,
								_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopRight),
								{
									ctor: '::',
									_0: yTrace,
									_1: {
										ctor: '::',
										_0: wTrace,
										_1: {
											ctor: '::',
											_0: hTrace,
											_1: {ctor: '[]'}
										}
									}
								},
								function (assignedMaybeLocs) {
									var _p134 = _user$project$Utils$unwrap3(assignedMaybeLocs);
									var yMaybeLoc = _p134._0;
									var wMaybeLoc = _p134._1;
									var hMaybeLoc = _p134._2;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										A2(topEdge, yMaybeLoc, hMaybeLoc),
										rightEdge(wMaybeLoc));
								},
								A4(
									finishTrigger,
									_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopEdge),
									{
										ctor: '::',
										_0: yTrace,
										_1: {
											ctor: '::',
											_0: hTrace,
											_1: {ctor: '[]'}
										}
									},
									function (assignedMaybeLocs) {
										var _p135 = _user$project$Utils$unwrap2(assignedMaybeLocs);
										var yMaybeLoc = _p135._0;
										var hMaybeLoc = _p135._1;
										return A2(topEdge, yMaybeLoc, hMaybeLoc);
									},
									A4(
										finishTrigger,
										_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopLeft),
										{
											ctor: '::',
											_0: xTrace,
											_1: {
												ctor: '::',
												_0: yTrace,
												_1: {
													ctor: '::',
													_0: wTrace,
													_1: {
														ctor: '::',
														_0: hTrace,
														_1: {ctor: '[]'}
													}
												}
											}
										},
										function (assignedMaybeLocs) {
											var _p136 = _user$project$Utils$unwrap4(assignedMaybeLocs);
											var xMaybeLoc = _p136._0;
											var yMaybeLoc = _p136._1;
											var wMaybeLoc = _p136._2;
											var hMaybeLoc = _p136._3;
											return A2(
												_elm_lang$core$Basics_ops['++'],
												A2(leftEdge, xMaybeLoc, wMaybeLoc),
												A2(topEdge, yMaybeLoc, hMaybeLoc));
										},
										A4(
											finishTrigger,
											_user$project$ShapeWidgets$ZInterior,
											{
												ctor: '::',
												_0: xTrace,
												_1: {
													ctor: '::',
													_0: yTrace,
													_1: {ctor: '[]'}
												}
											},
											function (assignedMaybeLocs) {
												var _p137 = _user$project$Utils$unwrap2(assignedMaybeLocs);
												var xMaybeLoc = _p137._0;
												var yMaybeLoc = _p137._1;
												return A2(
													_elm_lang$core$Basics_ops['++'],
													A2(
														_user$project$Sync$mapMaybeToList,
														xMaybeLoc,
														function (xLoc) {
															return {
																ctor: '_Tuple5',
																_0: 'x',
																_1: 'dx',
																_2: xLoc,
																_3: xTrace,
																_4: F3(
																	function (solutionsCache, _p139, _p138) {
																		var _p140 = _p138;
																		return A5(
																			_user$project$Sync$solveOne,
																			solutionsCache,
																			_p144,
																			xLoc,
																			x + _elm_lang$core$Basics$toFloat(_p140._0),
																			xTrace);
																	})
															};
														}),
													A2(
														_user$project$Sync$mapMaybeToList,
														yMaybeLoc,
														function (yLoc) {
															return {
																ctor: '_Tuple5',
																_0: 'y',
																_1: 'dy',
																_2: yLoc,
																_3: yTrace,
																_4: F3(
																	function (solutionsCache, _p142, _p141) {
																		var _p143 = _p141;
																		return A5(
																			_user$project$Sync$solveOne,
																			solutionsCache,
																			_p144,
																			yLoc,
																			y + _elm_lang$core$Basics$toFloat(_p143._1),
																			yTrace);
																	})
															};
														}));
											},
											{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts})))))))));
	});
var _user$project$Sync$computeLineTriggers = F3(
	function (_p146, maybeCounts, _p145) {
		var _p147 = _p146;
		var _p161 = _p147._1;
		var _p148 = _p145;
		var finishTrigger = A3(_user$project$Sync$addTrigger, _p161, _p147._0, _p148._0);
		var _p149 = _user$project$Utils$unwrap4(
			A2(
				_elm_lang$core$List$map,
				function (_p150) {
					return _user$project$LangSvg$toNum(
						A2(_user$project$Utils$find_, _p148._2, _p150));
				},
				{
					ctor: '::',
					_0: 'x1',
					_1: {
						ctor: '::',
						_0: 'y1',
						_1: {
							ctor: '::',
							_0: 'x2',
							_1: {
								ctor: '::',
								_0: 'y2',
								_1: {ctor: '[]'}
							}
						}
					}
				}));
		var x1 = _p149._0._0;
		var x1Trace = _p149._0._1;
		var y1 = _p149._1._0;
		var y1Trace = _p149._1._1;
		var x2 = _p149._2._0;
		var x2Trace = _p149._2._1;
		var y2 = _p149._3._0;
		var y2Trace = _p149._3._1;
		var point = F3(
			function (i, xMaybeLoc, yMaybeLoc) {
				var _p151 = _elm_lang$core$Native_Utils.eq(i, 1) ? {ctor: '_Tuple4', _0: x1, _1: x1Trace, _2: y1, _3: y1Trace} : {ctor: '_Tuple4', _0: x2, _1: x2Trace, _2: y2, _3: y2Trace};
				var x = _p151._0;
				var xTrace = _p151._1;
				var y = _p151._2;
				var yTrace = _p151._3;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_user$project$Sync$mapMaybeToList,
						xMaybeLoc,
						function (xLoc) {
							return {
								ctor: '_Tuple5',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'x',
									_elm_lang$core$Basics$toString(i)),
								_1: 'dx',
								_2: xLoc,
								_3: xTrace,
								_4: F3(
									function (solutionsCache, _p153, _p152) {
										var _p154 = _p152;
										return A5(
											_user$project$Sync$solveOne,
											solutionsCache,
											_p161,
											xLoc,
											x + _elm_lang$core$Basics$toFloat(_p154._0),
											xTrace);
									})
							};
						}),
					A2(
						_user$project$Sync$mapMaybeToList,
						yMaybeLoc,
						function (yLoc) {
							return {
								ctor: '_Tuple5',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'y',
									_elm_lang$core$Basics$toString(i)),
								_1: 'dy',
								_2: yLoc,
								_3: yTrace,
								_4: F3(
									function (solutionsCache, _p156, _p155) {
										var _p157 = _p155;
										return A5(
											_user$project$Sync$solveOne,
											solutionsCache,
											_p161,
											yLoc,
											y + _elm_lang$core$Basics$toFloat(_p157._1),
											yTrace);
									})
							};
						}));
			});
		return A4(
			finishTrigger,
			_user$project$ShapeWidgets$ZLineEdge,
			{
				ctor: '::',
				_0: x1Trace,
				_1: {
					ctor: '::',
					_0: y1Trace,
					_1: {
						ctor: '::',
						_0: x2Trace,
						_1: {
							ctor: '::',
							_0: y2Trace,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			function (assignedMaybeLocs) {
				var _p158 = _user$project$Utils$unwrap4(assignedMaybeLocs);
				var xMaybeLoc1 = _p158._0;
				var yMaybeLoc1 = _p158._1;
				var xMaybeLoc2 = _p158._2;
				var yMaybeLoc2 = _p158._3;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A3(point, 1, xMaybeLoc1, yMaybeLoc1),
					A3(point, 2, xMaybeLoc2, yMaybeLoc2));
			},
			A4(
				finishTrigger,
				_user$project$ShapeWidgets$ZPoint(
					_user$project$ShapeWidgets$Point(2)),
				{
					ctor: '::',
					_0: x2Trace,
					_1: {
						ctor: '::',
						_0: y2Trace,
						_1: {ctor: '[]'}
					}
				},
				function (assignedMaybeLocs) {
					var _p159 = _user$project$Utils$unwrap2(assignedMaybeLocs);
					var xMaybeLoc2 = _p159._0;
					var yMaybeLoc2 = _p159._1;
					return A3(point, 2, xMaybeLoc2, yMaybeLoc2);
				},
				A4(
					finishTrigger,
					_user$project$ShapeWidgets$ZPoint(
						_user$project$ShapeWidgets$Point(1)),
					{
						ctor: '::',
						_0: x1Trace,
						_1: {
							ctor: '::',
							_0: y1Trace,
							_1: {ctor: '[]'}
						}
					},
					function (assignedMaybeLocs) {
						var _p160 = _user$project$Utils$unwrap2(assignedMaybeLocs);
						var xMaybeLoc1 = _p160._0;
						var yMaybeLoc1 = _p160._1;
						return A3(point, 1, xMaybeLoc1, yMaybeLoc1);
					},
					{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts})));
	});
var _user$project$Sync$computeEllipseTriggers = F3(
	function (_p163, maybeCounts, _p162) {
		var _p164 = _p163;
		var _p191 = _p164._1;
		var _p165 = _p162;
		var finishTrigger = A3(_user$project$Sync$addTrigger, _p191, _p164._0, _p165._0);
		var _p166 = _user$project$Utils$unwrap4(
			A2(
				_elm_lang$core$List$map,
				function (_p167) {
					return _user$project$LangSvg$toNum(
						A2(_user$project$Utils$find_, _p165._2, _p167));
				},
				{
					ctor: '::',
					_0: 'cx',
					_1: {
						ctor: '::',
						_0: 'cy',
						_1: {
							ctor: '::',
							_0: 'rx',
							_1: {
								ctor: '::',
								_0: 'ry',
								_1: {ctor: '[]'}
							}
						}
					}
				}));
		var cx = _p166._0._0;
		var cxTrace = _p166._0._1;
		var cy = _p166._1._0;
		var cyTrace = _p166._1._1;
		var rx = _p166._2._0;
		var rxTrace = _p166._2._1;
		var ry = _p166._3._0;
		var ryTrace = _p166._3._1;
		var leftEdge = function (rxMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				rxMaybeLoc,
				function (rxLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'rx',
						_1: 'dx',
						_2: rxLoc,
						_3: rxTrace,
						_4: F3(
							function (solutionsCache, _p169, _p168) {
								var _p170 = _p168;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p191,
									rxLoc,
									rx - _elm_lang$core$Basics$toFloat(_p170._0),
									rxTrace);
							})
					};
				});
		};
		var rightEdge = function (rxMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				rxMaybeLoc,
				function (rxLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'rx',
						_1: 'dx',
						_2: rxLoc,
						_3: rxTrace,
						_4: F3(
							function (solutionsCache, _p172, _p171) {
								var _p173 = _p171;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p191,
									rxLoc,
									rx + _elm_lang$core$Basics$toFloat(_p173._0),
									rxTrace);
							})
					};
				});
		};
		var topEdge = function (ryMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				ryMaybeLoc,
				function (ryLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'ry',
						_1: 'dy',
						_2: ryLoc,
						_3: ryTrace,
						_4: F3(
							function (solutionsCache, _p175, _p174) {
								var _p176 = _p174;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p191,
									ryLoc,
									ry - _elm_lang$core$Basics$toFloat(_p176._1),
									ryTrace);
							})
					};
				});
		};
		var botEdge = function (ryMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				ryMaybeLoc,
				function (ryLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'ry',
						_1: 'dy',
						_2: ryLoc,
						_3: ryTrace,
						_4: F3(
							function (solutionsCache, _p178, _p177) {
								var _p179 = _p177;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p191,
									ryLoc,
									ry + _elm_lang$core$Basics$toFloat(_p179._1),
									ryTrace);
							})
					};
				});
		};
		return A4(
			finishTrigger,
			_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$LeftEdge),
			{
				ctor: '::',
				_0: rxTrace,
				_1: {ctor: '[]'}
			},
			function (assignedMaybeLocs) {
				var leftMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
				return leftEdge(leftMaybeLoc);
			},
			A4(
				finishTrigger,
				_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotLeft),
				{
					ctor: '::',
					_0: rxTrace,
					_1: {
						ctor: '::',
						_0: ryTrace,
						_1: {ctor: '[]'}
					}
				},
				function (assignedMaybeLocs) {
					var _p180 = _user$project$Utils$unwrap2(assignedMaybeLocs);
					var leftMaybeLoc = _p180._0;
					var botMaybeLoc = _p180._1;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						leftEdge(leftMaybeLoc),
						botEdge(botMaybeLoc));
				},
				A4(
					finishTrigger,
					_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotEdge),
					{
						ctor: '::',
						_0: ryTrace,
						_1: {ctor: '[]'}
					},
					function (assignedMaybeLocs) {
						var botMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
						return botEdge(botMaybeLoc);
					},
					A4(
						finishTrigger,
						_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotRight),
						{
							ctor: '::',
							_0: rxTrace,
							_1: {
								ctor: '::',
								_0: ryTrace,
								_1: {ctor: '[]'}
							}
						},
						function (assignedMaybeLocs) {
							var _p181 = _user$project$Utils$unwrap2(assignedMaybeLocs);
							var rightMaybeLoc = _p181._0;
							var botMaybeLoc = _p181._1;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								rightEdge(rightMaybeLoc),
								botEdge(botMaybeLoc));
						},
						A4(
							finishTrigger,
							_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$RightEdge),
							{
								ctor: '::',
								_0: rxTrace,
								_1: {ctor: '[]'}
							},
							function (assignedMaybeLocs) {
								var rightMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
								return rightEdge(rightMaybeLoc);
							},
							A4(
								finishTrigger,
								_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopRight),
								{
									ctor: '::',
									_0: rxTrace,
									_1: {
										ctor: '::',
										_0: ryTrace,
										_1: {ctor: '[]'}
									}
								},
								function (assignedMaybeLocs) {
									var _p182 = _user$project$Utils$unwrap2(assignedMaybeLocs);
									var rightMaybeLoc = _p182._0;
									var topMaybeLoc = _p182._1;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										rightEdge(rightMaybeLoc),
										topEdge(topMaybeLoc));
								},
								A4(
									finishTrigger,
									_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopEdge),
									{
										ctor: '::',
										_0: ryTrace,
										_1: {ctor: '[]'}
									},
									function (assignedMaybeLocs) {
										var topMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
										return topEdge(topMaybeLoc);
									},
									A4(
										finishTrigger,
										_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopLeft),
										{
											ctor: '::',
											_0: rxTrace,
											_1: {
												ctor: '::',
												_0: ryTrace,
												_1: {ctor: '[]'}
											}
										},
										function (assignedMaybeLocs) {
											var _p183 = _user$project$Utils$unwrap2(assignedMaybeLocs);
											var leftMaybeLoc = _p183._0;
											var topMaybeLoc = _p183._1;
											return A2(
												_elm_lang$core$Basics_ops['++'],
												leftEdge(leftMaybeLoc),
												topEdge(topMaybeLoc));
										},
										A4(
											finishTrigger,
											_user$project$ShapeWidgets$ZInterior,
											{
												ctor: '::',
												_0: cxTrace,
												_1: {
													ctor: '::',
													_0: cyTrace,
													_1: {ctor: '[]'}
												}
											},
											function (assignedMaybeLocs) {
												var _p184 = _user$project$Utils$unwrap2(assignedMaybeLocs);
												var cxMaybeLoc = _p184._0;
												var cyMaybeLoc = _p184._1;
												return A2(
													_elm_lang$core$Basics_ops['++'],
													A2(
														_user$project$Sync$mapMaybeToList,
														cxMaybeLoc,
														function (cxLoc) {
															return {
																ctor: '_Tuple5',
																_0: 'cx',
																_1: 'dx',
																_2: cxLoc,
																_3: cxTrace,
																_4: F3(
																	function (solutionsCache, _p186, _p185) {
																		var _p187 = _p185;
																		return A5(
																			_user$project$Sync$solveOne,
																			solutionsCache,
																			_p191,
																			cxLoc,
																			cx + _elm_lang$core$Basics$toFloat(_p187._0),
																			cxTrace);
																	})
															};
														}),
													A2(
														_user$project$Sync$mapMaybeToList,
														cyMaybeLoc,
														function (cyLoc) {
															return {
																ctor: '_Tuple5',
																_0: 'cy',
																_1: 'dy',
																_2: cyLoc,
																_3: cyTrace,
																_4: F3(
																	function (solutionsCache, _p189, _p188) {
																		var _p190 = _p188;
																		return A5(
																			_user$project$Sync$solveOne,
																			solutionsCache,
																			_p191,
																			cyLoc,
																			cy + _elm_lang$core$Basics$toFloat(_p190._1),
																			cyTrace);
																	})
															};
														}));
											},
											{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts})))))))));
	});
var _user$project$Sync$computeCircleTriggers = F3(
	function (_p193, maybeCounts, _p192) {
		var _p194 = _p193;
		var _p220 = _p194._1;
		var _p195 = _p192;
		var finishTrigger = A3(_user$project$Sync$addTrigger, _p220, _p194._0, _p195._0);
		var co = F2(
			function (x, y) {
				return x * y;
			})(1);
		var contra = F2(
			function (x, y) {
				return x * y;
			})(-1);
		var _p196 = _user$project$Utils$unwrap3(
			A2(
				_elm_lang$core$List$map,
				function (_p197) {
					return _user$project$LangSvg$toNum(
						A2(_user$project$Utils$find_, _p195._2, _p197));
				},
				{
					ctor: '::',
					_0: 'cx',
					_1: {
						ctor: '::',
						_0: 'cy',
						_1: {
							ctor: '::',
							_0: 'r',
							_1: {ctor: '[]'}
						}
					}
				}));
		var cx = _p196._0._0;
		var cxTrace = _p196._0._1;
		var cy = _p196._1._0;
		var cyTrace = _p196._1._1;
		var r = _p196._2._0;
		var rTrace = _p196._2._1;
		var leftEdge = function (rMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				rMaybeLoc,
				function (rLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'r',
						_1: 'dx',
						_2: rLoc,
						_3: rTrace,
						_4: F3(
							function (solutionsCache, _p199, _p198) {
								var _p200 = _p198;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p220,
									rLoc,
									r - _elm_lang$core$Basics$toFloat(_p200._0),
									rTrace);
							})
					};
				});
		};
		var rightEdge = function (rMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				rMaybeLoc,
				function (rLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'r',
						_1: 'dx',
						_2: rLoc,
						_3: rTrace,
						_4: F3(
							function (solutionsCache, _p202, _p201) {
								var _p203 = _p201;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p220,
									rLoc,
									r + _elm_lang$core$Basics$toFloat(_p203._0),
									rTrace);
							})
					};
				});
		};
		var topEdge = function (rMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				rMaybeLoc,
				function (rLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'r',
						_1: 'dy',
						_2: rLoc,
						_3: rTrace,
						_4: F3(
							function (solutionsCache, _p205, _p204) {
								var _p206 = _p204;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p220,
									rLoc,
									r - _elm_lang$core$Basics$toFloat(_p206._1),
									rTrace);
							})
					};
				});
		};
		var botEdge = function (rMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				rMaybeLoc,
				function (rLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'r',
						_1: 'dy',
						_2: rLoc,
						_3: rTrace,
						_4: F3(
							function (solutionsCache, _p208, _p207) {
								var _p209 = _p207;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p220,
									rLoc,
									r + _elm_lang$core$Basics$toFloat(_p209._1),
									rTrace);
							})
					};
				});
		};
		var corner = F3(
			function (rMaybeLoc, fx, fy) {
				return A2(
					_user$project$Sync$mapMaybeToList,
					rMaybeLoc,
					function (rLoc) {
						return {
							ctor: '_Tuple5',
							_0: 'r',
							_1: 'dxy',
							_2: rLoc,
							_3: rTrace,
							_4: F3(
								function (solutionsCache, _p211, _p210) {
									var _p212 = _p210;
									var d = A2(
										_elm_lang$core$Basics$max,
										fx(_p212._0),
										fy(_p212._1));
									return A5(
										_user$project$Sync$solveOne,
										solutionsCache,
										_p220,
										rLoc,
										r + _elm_lang$core$Basics$toFloat(d),
										rTrace);
								})
						};
					});
			});
		return A4(
			finishTrigger,
			_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$LeftEdge),
			{
				ctor: '::',
				_0: rTrace,
				_1: {ctor: '[]'}
			},
			function (assignedMaybeLocs) {
				var rMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
				return leftEdge(rMaybeLoc);
			},
			A4(
				finishTrigger,
				_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotLeft),
				{
					ctor: '::',
					_0: rTrace,
					_1: {ctor: '[]'}
				},
				function (assignedMaybeLocs) {
					var rMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
					return A3(corner, rMaybeLoc, contra, co);
				},
				A4(
					finishTrigger,
					_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotEdge),
					{
						ctor: '::',
						_0: rTrace,
						_1: {ctor: '[]'}
					},
					function (assignedMaybeLocs) {
						var rMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
						return botEdge(rMaybeLoc);
					},
					A4(
						finishTrigger,
						_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotRight),
						{
							ctor: '::',
							_0: rTrace,
							_1: {ctor: '[]'}
						},
						function (assignedMaybeLocs) {
							var rMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
							return A3(corner, rMaybeLoc, co, co);
						},
						A4(
							finishTrigger,
							_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$RightEdge),
							{
								ctor: '::',
								_0: rTrace,
								_1: {ctor: '[]'}
							},
							function (assignedMaybeLocs) {
								var rMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
								return rightEdge(rMaybeLoc);
							},
							A4(
								finishTrigger,
								_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopRight),
								{
									ctor: '::',
									_0: rTrace,
									_1: {ctor: '[]'}
								},
								function (assignedMaybeLocs) {
									var rMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
									return A3(corner, rMaybeLoc, co, contra);
								},
								A4(
									finishTrigger,
									_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopEdge),
									{
										ctor: '::',
										_0: rTrace,
										_1: {ctor: '[]'}
									},
									function (assignedMaybeLocs) {
										var rMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
										return topEdge(rMaybeLoc);
									},
									A4(
										finishTrigger,
										_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopLeft),
										{
											ctor: '::',
											_0: rTrace,
											_1: {ctor: '[]'}
										},
										function (assignedMaybeLocs) {
											var rMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
											return A3(corner, rMaybeLoc, contra, contra);
										},
										A4(
											finishTrigger,
											_user$project$ShapeWidgets$ZInterior,
											{
												ctor: '::',
												_0: cxTrace,
												_1: {
													ctor: '::',
													_0: cyTrace,
													_1: {ctor: '[]'}
												}
											},
											function (assignedMaybeLocs) {
												var _p213 = _user$project$Utils$unwrap2(assignedMaybeLocs);
												var cxMaybeLoc = _p213._0;
												var cyMaybeLoc = _p213._1;
												return A2(
													_elm_lang$core$Basics_ops['++'],
													A2(
														_user$project$Sync$mapMaybeToList,
														cxMaybeLoc,
														function (cxLoc) {
															return {
																ctor: '_Tuple5',
																_0: 'cx',
																_1: 'dx',
																_2: cxLoc,
																_3: cxTrace,
																_4: F3(
																	function (solutionsCache, _p215, _p214) {
																		var _p216 = _p214;
																		return A5(
																			_user$project$Sync$solveOne,
																			solutionsCache,
																			_p220,
																			cxLoc,
																			cx + _elm_lang$core$Basics$toFloat(_p216._0),
																			cxTrace);
																	})
															};
														}),
													A2(
														_user$project$Sync$mapMaybeToList,
														cyMaybeLoc,
														function (cyLoc) {
															return {
																ctor: '_Tuple5',
																_0: 'cy',
																_1: 'dy',
																_2: cyLoc,
																_3: cyTrace,
																_4: F3(
																	function (solutionsCache, _p218, _p217) {
																		var _p219 = _p217;
																		return A5(
																			_user$project$Sync$solveOne,
																			solutionsCache,
																			_p220,
																			cyLoc,
																			cy + _elm_lang$core$Basics$toFloat(_p219._1),
																			cyTrace);
																	})
															};
														}));
											},
											{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts})))))))));
	});
var _user$project$Sync$computeBoxOrOvalTriggers = F3(
	function (_p222, maybeCounts, _p221) {
		var _p223 = _p222;
		var _p244 = _p223._1;
		var _p224 = _p221;
		var finishTrigger = A3(_user$project$Sync$addTrigger, _p244, _p223._0, _p224._0);
		var _p225 = _user$project$Utils$unwrap4(
			A2(
				_elm_lang$core$List$map,
				function (_p226) {
					return _user$project$LangSvg$toNum(
						A2(_user$project$Utils$find_, _p224._2, _p226));
				},
				{
					ctor: '::',
					_0: 'LEFT',
					_1: {
						ctor: '::',
						_0: 'TOP',
						_1: {
							ctor: '::',
							_0: 'RIGHT',
							_1: {
								ctor: '::',
								_0: 'BOT',
								_1: {ctor: '[]'}
							}
						}
					}
				}));
		var left = _p225._0._0;
		var leftTrace = _p225._0._1;
		var top = _p225._1._0;
		var topTrace = _p225._1._1;
		var right = _p225._2._0;
		var rightTrace = _p225._2._1;
		var bot = _p225._3._0;
		var botTrace = _p225._3._1;
		var leftEdge = function (leftMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				leftMaybeLoc,
				function (leftLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'LEFT',
						_1: 'dx',
						_2: leftLoc,
						_3: leftTrace,
						_4: F3(
							function (solutionsCache, _p228, _p227) {
								var _p229 = _p227;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p244,
									leftLoc,
									left + _elm_lang$core$Basics$toFloat(_p229._0),
									leftTrace);
							})
					};
				});
		};
		var rightEdge = function (rightMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				rightMaybeLoc,
				function (rightLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'RIGHT',
						_1: 'dx',
						_2: rightLoc,
						_3: rightTrace,
						_4: F3(
							function (solutionsCache, _p231, _p230) {
								var _p232 = _p230;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p244,
									rightLoc,
									right + _elm_lang$core$Basics$toFloat(_p232._0),
									rightTrace);
							})
					};
				});
		};
		var topEdge = function (topMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				topMaybeLoc,
				function (topLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'TOP',
						_1: 'dy',
						_2: topLoc,
						_3: topTrace,
						_4: F3(
							function (solutionsCache, _p234, _p233) {
								var _p235 = _p233;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p244,
									topLoc,
									top + _elm_lang$core$Basics$toFloat(_p235._1),
									topTrace);
							})
					};
				});
		};
		var botEdge = function (botMaybeLoc) {
			return A2(
				_user$project$Sync$mapMaybeToList,
				botMaybeLoc,
				function (botLoc) {
					return {
						ctor: '_Tuple5',
						_0: 'BOT',
						_1: 'dy',
						_2: botLoc,
						_3: botTrace,
						_4: F3(
							function (solutionsCache, _p237, _p236) {
								var _p238 = _p236;
								return A5(
									_user$project$Sync$solveOne,
									solutionsCache,
									_p244,
									botLoc,
									bot + _elm_lang$core$Basics$toFloat(_p238._1),
									botTrace);
							})
					};
				});
		};
		return A4(
			finishTrigger,
			_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$LeftEdge),
			{
				ctor: '::',
				_0: leftTrace,
				_1: {ctor: '[]'}
			},
			function (assignedMaybeLocs) {
				var leftMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
				return leftEdge(leftMaybeLoc);
			},
			A4(
				finishTrigger,
				_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotLeft),
				{
					ctor: '::',
					_0: leftTrace,
					_1: {
						ctor: '::',
						_0: botTrace,
						_1: {ctor: '[]'}
					}
				},
				function (assignedMaybeLocs) {
					var _p239 = _user$project$Utils$unwrap2(assignedMaybeLocs);
					var leftMaybeLoc = _p239._0;
					var botMaybeLoc = _p239._1;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						leftEdge(leftMaybeLoc),
						botEdge(botMaybeLoc));
				},
				A4(
					finishTrigger,
					_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotEdge),
					{
						ctor: '::',
						_0: botTrace,
						_1: {ctor: '[]'}
					},
					function (assignedMaybeLocs) {
						var botMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
						return botEdge(botMaybeLoc);
					},
					A4(
						finishTrigger,
						_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotRight),
						{
							ctor: '::',
							_0: rightTrace,
							_1: {
								ctor: '::',
								_0: botTrace,
								_1: {ctor: '[]'}
							}
						},
						function (assignedMaybeLocs) {
							var _p240 = _user$project$Utils$unwrap2(assignedMaybeLocs);
							var rightMaybeLoc = _p240._0;
							var botMaybeLoc = _p240._1;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								rightEdge(rightMaybeLoc),
								botEdge(botMaybeLoc));
						},
						A4(
							finishTrigger,
							_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$RightEdge),
							{
								ctor: '::',
								_0: rightTrace,
								_1: {ctor: '[]'}
							},
							function (assignedMaybeLocs) {
								var rightMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
								return rightEdge(rightMaybeLoc);
							},
							A4(
								finishTrigger,
								_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopRight),
								{
									ctor: '::',
									_0: rightTrace,
									_1: {
										ctor: '::',
										_0: topTrace,
										_1: {ctor: '[]'}
									}
								},
								function (assignedMaybeLocs) {
									var _p241 = _user$project$Utils$unwrap2(assignedMaybeLocs);
									var rightMaybeLoc = _p241._0;
									var topMaybeLoc = _p241._1;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										rightEdge(rightMaybeLoc),
										topEdge(topMaybeLoc));
								},
								A4(
									finishTrigger,
									_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopEdge),
									{
										ctor: '::',
										_0: topTrace,
										_1: {ctor: '[]'}
									},
									function (assignedMaybeLocs) {
										var topMaybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
										return topEdge(topMaybeLoc);
									},
									A4(
										finishTrigger,
										_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopLeft),
										{
											ctor: '::',
											_0: leftTrace,
											_1: {
												ctor: '::',
												_0: topTrace,
												_1: {ctor: '[]'}
											}
										},
										function (assignedMaybeLocs) {
											var _p242 = _user$project$Utils$unwrap2(assignedMaybeLocs);
											var leftMaybeLoc = _p242._0;
											var topMaybeLoc = _p242._1;
											return A2(
												_elm_lang$core$Basics_ops['++'],
												leftEdge(leftMaybeLoc),
												topEdge(topMaybeLoc));
										},
										A4(
											finishTrigger,
											_user$project$ShapeWidgets$ZInterior,
											{
												ctor: '::',
												_0: leftTrace,
												_1: {
													ctor: '::',
													_0: topTrace,
													_1: {
														ctor: '::',
														_0: rightTrace,
														_1: {
															ctor: '::',
															_0: botTrace,
															_1: {ctor: '[]'}
														}
													}
												}
											},
											function (assignedMaybeLocs) {
												var _p243 = _user$project$Utils$unwrap4(assignedMaybeLocs);
												var leftMaybeLoc = _p243._0;
												var topMaybeLoc = _p243._1;
												var rightMaybeLoc = _p243._2;
												var botMaybeLoc = _p243._3;
												return A2(
													_elm_lang$core$Basics_ops['++'],
													leftEdge(leftMaybeLoc),
													A2(
														_elm_lang$core$Basics_ops['++'],
														topEdge(topMaybeLoc),
														A2(
															_elm_lang$core$Basics_ops['++'],
															rightEdge(rightMaybeLoc),
															botEdge(botMaybeLoc))));
											},
											{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts})))))))));
	});
var _user$project$Sync$computePolyTriggers = F3(
	function (_p246, maybeCounts, _p245) {
		var _p247 = _p246;
		var _p249 = _p247._1;
		var _p248 = _p245;
		var finishTrigger = A3(_user$project$Sync$addTrigger, _p249, _p247._0, _p248._0);
		var pointX = _user$project$Sync$pointX_(_p249);
		var pointY = _user$project$Sync$pointY_(_p249);
		var addInteriorZone = A3(_user$project$Sync$addInteriorZone_, finishTrigger, pointX, pointY);
		var indexedPoints = A2(
			_user$project$Utils$mapi1,
			_elm_lang$core$Basics$identity,
			_user$project$LangSvg$getPolyPoints(_p248._2));
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(indexedPoints),
			50) > 0) {
			return A2(
				addInteriorZone,
				indexedPoints,
				{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts});
		} else {
			var addPointZones = A3(_user$project$Sync$addPointZones_, finishTrigger, pointX, pointY);
			var addEdgeZones = A3(_user$project$Sync$addEdgeZones_, finishTrigger, pointX, pointY);
			var edges = function () {
				if (_elm_lang$core$Native_Utils.eq(_p248._1, 'polygon')) {
					return _user$project$Utils$circOverlappingAdjacentPairs(indexedPoints);
				} else {
					var n = _elm_lang$core$List$length(indexedPoints);
					return _user$project$Utils$circOverlappingAdjacentPairs(
						A2(_elm_lang$core$List$take, n - 1, indexedPoints));
				}
			}();
			return A2(
				addInteriorZone,
				indexedPoints,
				A2(
					addEdgeZones,
					edges,
					A2(
						addPointZones,
						indexedPoints,
						{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts})));
		}
	});
var _user$project$Sync$computePathTriggers = F3(
	function (_p251, maybeCounts, _p250) {
		var _p252 = _p251;
		var _p254 = _p252._1;
		var _p253 = _p250;
		var finishTrigger = A3(_user$project$Sync$addTrigger, _p254, _p252._0, _p253._0);
		var pointX = _user$project$Sync$pointX_(_p254);
		var pointY = _user$project$Sync$pointY_(_p254);
		var addPointZones = A3(_user$project$Sync$addPointZones_, finishTrigger, pointX, pointY);
		var addEdgeZones = A3(_user$project$Sync$addEdgeZones_, finishTrigger, pointX, pointY);
		var addInteriorZone = A3(_user$project$Sync$addInteriorZone_, finishTrigger, pointX, pointY);
		var indexedPoints = _user$project$LangSvg$pathIndexPoints(_p253._2);
		return A2(
			addInteriorZone,
			indexedPoints,
			A2(
				addPointZones,
				indexedPoints,
				{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts}));
	});
var _user$project$Sync$computeFillAndStrokeTriggers = F3(
	function (_p256, maybeCounts, _p255) {
		var _p257 = _p256;
		var _p302 = _p257._1;
		var _p258 = _p255;
		var _p301 = _p258._2;
		var finishTrigger = A3(_user$project$Sync$addTrigger, _p302, _p257._0, _p258._0);
		var maybeAddColorTrigger = F3(
			function (realZone, fillOrStroke, _p259) {
				var _p260 = _p259;
				var _p267 = _p260._1;
				var _p266 = _p260._0;
				var _p261 = A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.interpreted;
					},
					A2(_user$project$Utils$maybeFind, fillOrStroke, _p301));
				if ((((_p261.ctor === 'Just') && (_p261._0.ctor === 'AColorNum')) && (_p261._0._0.ctor === '_Tuple2')) && (_p261._0._0._0.ctor === '_Tuple2')) {
					var _p265 = _p261._0._0._0._1;
					return A4(
						finishTrigger,
						realZone,
						{
							ctor: '::',
							_0: _p265,
							_1: {ctor: '[]'}
						},
						function (assignedMaybeLocs) {
							var maybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
							return A2(
								_user$project$Sync$mapMaybeToList,
								maybeLoc,
								function (colorLoc) {
									return {
										ctor: '_Tuple5',
										_0: fillOrStroke,
										_1: 'dx',
										_2: colorLoc,
										_3: _p265,
										_4: F3(
											function (solutionsCache, _p263, _p262) {
												var _p264 = _p262;
												var color_ = A2(_user$project$Sync$colorNumPlus, _p261._0._0._0._0, _p264._0);
												return A5(_user$project$Sync$solveOne, solutionsCache, _p302, colorLoc, color_, _p265);
											})
									};
								});
						},
						{ctor: '_Tuple2', _0: _p266, _1: _p267});
				} else {
					return {ctor: '_Tuple2', _0: _p266, _1: _p267};
				}
			});
		var maybeAddOpacityTrigger = F3(
			function (realZone, fillOrStroke, _p268) {
				var _p269 = _p268;
				var _p276 = _p269._1;
				var _p275 = _p269._0;
				var _p270 = A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.interpreted;
					},
					A2(_user$project$Utils$maybeFind, fillOrStroke, _p301));
				if (((((_p270.ctor === 'Just') && (_p270._0.ctor === 'AColorNum')) && (_p270._0._0.ctor === '_Tuple2')) && (_p270._0._0._1.ctor === 'Just')) && (_p270._0._0._1._0.ctor === '_Tuple2')) {
					var _p274 = _p270._0._0._1._0._1;
					return A4(
						finishTrigger,
						realZone,
						{
							ctor: '::',
							_0: _p274,
							_1: {ctor: '[]'}
						},
						function (assignedMaybeLocs) {
							var maybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
							return A2(
								_user$project$Sync$mapMaybeToList,
								maybeLoc,
								function (opacityLoc) {
									return {
										ctor: '_Tuple5',
										_0: A2(_elm_lang$core$Basics_ops['++'], fillOrStroke, 'Opacity'),
										_1: 'dx',
										_2: opacityLoc,
										_3: _p274,
										_4: F3(
											function (solutionsCache, _p272, _p271) {
												var _p273 = _p271;
												var opacity_ = A2(_user$project$Sync$opacityNumPlus, _p270._0._0._1._0._0, _p273._0);
												return A5(_user$project$Sync$solveOne, solutionsCache, _p302, opacityLoc, opacity_, _p274);
											})
									};
								});
						},
						{ctor: '_Tuple2', _0: _p275, _1: _p276});
				} else {
					return {ctor: '_Tuple2', _0: _p275, _1: _p276};
				}
			});
		var maybeAddStrokeWidthTrigger = F2(
			function (realZone, _p277) {
				var _p278 = _p277;
				var _p285 = _p278._1;
				var _p284 = _p278._0;
				var _p279 = A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.interpreted;
					},
					A2(_user$project$Utils$maybeFind, 'stroke-width', _p301));
				if (((_p279.ctor === 'Just') && (_p279._0.ctor === 'ANum')) && (_p279._0._0.ctor === '_Tuple2')) {
					var _p283 = _p279._0._0._1;
					return A4(
						finishTrigger,
						realZone,
						{
							ctor: '::',
							_0: _p283,
							_1: {ctor: '[]'}
						},
						function (assignedMaybeLocs) {
							var maybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
							return A2(
								_user$project$Sync$mapMaybeToList,
								maybeLoc,
								function (widthLoc) {
									return {
										ctor: '_Tuple5',
										_0: 'stroke-width',
										_1: 'dx',
										_2: widthLoc,
										_3: _p283,
										_4: F3(
											function (solutionsCache, _p281, _p280) {
												var _p282 = _p280;
												var width_ = A2(_user$project$Sync$strokeWidthNumPlus, _p279._0._0._0, _p282._0);
												return A5(_user$project$Sync$solveOne, solutionsCache, _p302, widthLoc, width_, _p283);
											})
									};
								});
						},
						{ctor: '_Tuple2', _0: _p284, _1: _p285});
				} else {
					return {ctor: '_Tuple2', _0: _p284, _1: _p285};
				}
			});
		var maybeAddRotationTrigger = F2(
			function (realZone, _p286) {
				var _p287 = _p286;
				var _p300 = _p287._1;
				var _p299 = _p287._0;
				var _p288 = A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.interpreted;
					},
					A2(_user$project$Utils$maybeFind, 'transform', _p301));
				if ((((((((_p288.ctor === 'Just') && (_p288._0.ctor === 'ATransform')) && (_p288._0._0.ctor === '::')) && (_p288._0._0._0.ctor === 'Rot')) && (_p288._0._0._0._0.ctor === '_Tuple2')) && (_p288._0._0._0._1.ctor === '_Tuple2')) && (_p288._0._0._0._2.ctor === '_Tuple2')) && (_p288._0._0._1.ctor === '[]')) {
					var _p298 = _p288._0._0._0._0._1;
					var _p297 = _p288._0._0._0._2._0;
					var _p296 = _p288._0._0._0._1._0;
					return A4(
						finishTrigger,
						realZone,
						{
							ctor: '::',
							_0: _p298,
							_1: {ctor: '[]'}
						},
						function (assignedMaybeLocs) {
							var maybeLoc = _user$project$Utils$unwrap1(assignedMaybeLocs);
							return A2(
								_user$project$Sync$mapMaybeToList,
								maybeLoc,
								function (rotLoc) {
									return {
										ctor: '_Tuple5',
										_0: 'transformRot',
										_1: 'dxy',
										_2: rotLoc,
										_3: _p298,
										_4: F3(
											function (solutionsCache, _p290, _p289) {
												var _p291 = _p290;
												var _p295 = _p291._1;
												var _p294 = _p291._0;
												var _p292 = _p289;
												var _p293 = {ctor: '_Tuple2', _0: _p294 + _p292._0, _1: _p295 + _p292._1};
												var mx1 = _p293._0;
												var my1 = _p293._1;
												var radToDeg = _user$project$Utils$radiansToDegrees;
												var a0 = radToDeg(
													A2(
														_elm_lang$core$Basics$atan2,
														_p297 - _elm_lang$core$Basics$toFloat(_p295),
														_elm_lang$core$Basics$toFloat(_p294) - _p296));
												var a1 = radToDeg(
													A2(
														_elm_lang$core$Basics$atan2,
														_p297 - _elm_lang$core$Basics$toFloat(my1),
														_elm_lang$core$Basics$toFloat(mx1) - _p296));
												return A5(_user$project$Sync$solveOne, solutionsCache, _p302, rotLoc, _p288._0._0._0._0._0 + (a0 - a1), _p298);
											})
									};
								});
						},
						{ctor: '_Tuple2', _0: _p299, _1: _p300});
				} else {
					return {ctor: '_Tuple2', _0: _p299, _1: _p300};
				}
			});
		return A2(
			maybeAddRotationTrigger,
			_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$Rotation),
			A2(
				maybeAddStrokeWidthTrigger,
				_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$StrokeWidth),
				A3(
					maybeAddColorTrigger,
					_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$StrokeOpacity),
					'stroke',
					A3(
						maybeAddColorTrigger,
						_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$FillOpacity),
						'fill',
						A3(
							maybeAddColorTrigger,
							_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$StrokeColor),
							'stroke',
							A3(
								maybeAddColorTrigger,
								_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$FillColor),
								'fill',
								{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: maybeCounts}))))));
	});
var _user$project$Sync$computeShapeTriggers = F3(
	function (info, slate, initMaybeCounts) {
		var processNode = F2(
			function (nodeInfo, _p303) {
				var _p304 = _p303;
				var _p312 = _p304._1;
				var _p311 = _p304._0;
				var _p305 = nodeInfo;
				if (_p305.ctor === 'Left') {
					return {ctor: '_Tuple2', _0: _p311, _1: _p312};
				} else {
					var _p310 = _p305._0;
					var _p306 = function () {
						var _p307 = _p310;
						var kind = _p307._1;
						var _p308 = kind;
						switch (_p308) {
							case 'line':
								return A3(_user$project$Sync$computeLineTriggers, info, _p312, _p310);
							case 'rect':
								return A3(_user$project$Sync$computeRectTriggers, info, _p312, _p310);
							case 'ellipse':
								return A3(_user$project$Sync$computeEllipseTriggers, info, _p312, _p310);
							case 'circle':
								return A3(_user$project$Sync$computeCircleTriggers, info, _p312, _p310);
							case 'BOX':
								return A3(_user$project$Sync$computeBoxOrOvalTriggers, info, _p312, _p310);
							case 'OVAL':
								return A3(_user$project$Sync$computeBoxOrOvalTriggers, info, _p312, _p310);
							case 'polygon':
								return A3(_user$project$Sync$computePolyTriggers, info, _p312, _p310);
							case 'polyline':
								return A3(_user$project$Sync$computePolyTriggers, info, _p312, _p310);
							case 'path':
								return A3(_user$project$Sync$computePathTriggers, info, _p312, _p310);
							default:
								return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _p312};
						}
					}();
					var directZoneTriggers = _p306._0;
					var maybeCounts_ = _p306._1;
					var _p309 = A3(_user$project$Sync$computeFillAndStrokeTriggers, info, _p312, _p310);
					var sliderZoneTriggers = _p309._0;
					var maybeCounts__ = _p309._1;
					var dict_ = A2(
						_elm_lang$core$Dict$union,
						sliderZoneTriggers,
						A2(_elm_lang$core$Dict$union, directZoneTriggers, _p311));
					return {ctor: '_Tuple2', _0: dict_, _1: maybeCounts_};
				}
			});
		return A3(
			_user$project$LangSvg$foldSlateNodeInfo,
			slate,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: initMaybeCounts},
			processNode);
	});
var _user$project$Sync$locIsFrozen = F2(
	function (opts, _p313) {
		var _p314 = _p313;
		var _p315 = _p314._1;
		return _user$project$FastParser$isPreludeLoc(_p314) || (_elm_lang$core$Native_Utils.eq(_p315, _user$project$Lang$frozen) || (_elm_lang$core$Native_Utils.eq(_p315, _user$project$Lang$unann) && (!opts.thawedByDefault)));
	});
var _user$project$Sync$expToUnfrozenLocIdSet = F2(
	function (options, exp) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$filterMap,
				function (e) {
					var _p316 = e.val.e__;
					if ((_p316.ctor === 'EConst') && (_p316._2.ctor === '_Tuple3')) {
						return A2(_user$project$Sync$locIsFrozen, options, _p316._2) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(_p316._2._0);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				},
				_user$project$Lang$flattenExpTree(exp)));
	});
var _user$project$Sync$debugLog = _user$project$Config$debugLog(_user$project$Config$debugSync);
var _user$project$Sync$syncOptionsOf = F2(
	function (oldOptions, e) {
		var _p317 = A2(
			_user$project$Utils$maybeFind,
			'unannotated-numbers',
			_user$project$Lang$getOptions(e));
		if (_p317.ctor === 'Nothing') {
			return oldOptions;
		} else {
			var _p319 = _p317._0;
			if (_elm_lang$core$Native_Utils.eq(_p319, 'n?')) {
				return _elm_lang$core$Native_Utils.update(
					oldOptions,
					{thawedByDefault: true});
			} else {
				if (_elm_lang$core$Native_Utils.eq(_p319, 'n!')) {
					return _elm_lang$core$Native_Utils.update(
						oldOptions,
						{thawedByDefault: false});
				} else {
					var _p318 = A2(_user$project$Sync$debugLog, 'invalid sync option: ', _p319);
					return oldOptions;
				}
			}
		}
	});
var _user$project$Sync$tracesOfAVal = function (aval) {
	var _p320 = aval.interpreted;
	_v90_7:
	do {
		switch (_p320.ctor) {
			case 'ANum':
				if (_p320._0.ctor === '_Tuple2') {
					return {
						ctor: '::',
						_0: _p320._0._1,
						_1: {ctor: '[]'}
					};
				} else {
					break _v90_7;
				}
			case 'AColorNum':
				if ((_p320._0.ctor === '_Tuple2') && (_p320._0._0.ctor === '_Tuple2')) {
					if (_p320._0._1.ctor === 'Nothing') {
						return {
							ctor: '::',
							_0: _p320._0._0._1,
							_1: {ctor: '[]'}
						};
					} else {
						if (_p320._0._1._0.ctor === '_Tuple2') {
							return {
								ctor: '::',
								_0: _p320._0._0._1,
								_1: {
									ctor: '::',
									_0: _p320._0._1._0._1,
									_1: {ctor: '[]'}
								}
							};
						} else {
							break _v90_7;
						}
					}
				} else {
					break _v90_7;
				}
			case 'APoints':
				return A2(
					_elm_lang$core$List$concatMap,
					function (_p321) {
						var _p322 = _p321;
						return {
							ctor: '::',
							_0: _p322._0._1,
							_1: {
								ctor: '::',
								_0: _p322._1._1,
								_1: {ctor: '[]'}
							}
						};
					},
					_p320._0);
			case 'ATransform':
				if ((((((_p320._0.ctor === '::') && (_p320._0._0.ctor === 'Rot')) && (_p320._0._0._0.ctor === '_Tuple2')) && (_p320._0._0._1.ctor === '_Tuple2')) && (_p320._0._0._2.ctor === '_Tuple2')) && (_p320._0._1.ctor === '[]')) {
					return {
						ctor: '::',
						_0: _p320._0._0._0._1,
						_1: {
							ctor: '::',
							_0: _p320._0._0._1._1,
							_1: {
								ctor: '::',
								_0: _p320._0._0._2._1,
								_1: {ctor: '[]'}
							}
						}
					};
				} else {
					break _v90_7;
				}
			case 'AString':
				return {ctor: '[]'};
			case 'ARgba':
				return {ctor: '[]'};
			default:
				break _v90_7;
		}
	} while(false);
	var _p323 = A2(
		_user$project$Sync$debugLog,
		'tracesOfAVal?',
		_user$project$LangSvg$strAVal(aval));
	return {ctor: '[]'};
};
var _user$project$Sync$getLocationCounts = F2(
	function (unfrozenLocIdSet, _p324) {
		var _p325 = _p324;
		var weightedScore = F3(
			function (kind, _p326, acc) {
				var _p327 = _p326;
				var _p329 = _p327._1;
				var k = function () {
					var _p328 = {ctor: '_Tuple3', _0: kind, _1: _p327._0, _2: _p329.interpreted};
					_v94_4:
					do {
						if (((((_p328.ctor === '_Tuple3') && (_p328._0 === 'BOX')) && (_p328._2.ctor === 'ANum')) && (_p328._2._0.ctor === '_Tuple2')) && (_p328._2._0._1.ctor === 'MathVar')) {
							switch (_p328._1) {
								case 'LEFT':
									return 2;
								case 'RIGHT':
									return 2;
								case 'TOP':
									return 2;
								case 'BOT':
									return 2;
								default:
									break _v94_4;
							}
						} else {
							break _v94_4;
						}
					} while(false);
					return 1;
				}();
				return A3(
					_elm_lang$core$Set$foldl,
					_user$project$Sync$addCount(k),
					acc,
					A2(
						_user$project$Sync$unfrozenTracesLocIdSet,
						unfrozenLocIdSet,
						_user$project$Sync$tracesOfAVal(_p329)));
			});
		var addTriggerNode = F2(
			function (nodeInfo, acc) {
				var _p330 = nodeInfo;
				if (_p330.ctor === 'Left') {
					return acc;
				} else {
					return A3(
						_elm_lang$core$List$foldl,
						weightedScore(_p330._0._1),
						acc,
						_p330._0._2);
				}
			});
		var addTriggerWidget = F2(
			function (widget, acc) {
				var _p331 = widget;
				switch (_p331.ctor) {
					case 'WIntSlider':
						return A2(_user$project$Sync$incrementCount, _p331._5._0, acc);
					case 'WNumSlider':
						return A2(_user$project$Sync$incrementCount, _p331._5._0, acc);
					case 'WPoint':
						return A3(
							_elm_lang$core$Set$foldl,
							_user$project$Sync$incrementCount,
							acc,
							A2(
								_user$project$Sync$unfrozenTracesLocIdSet,
								unfrozenLocIdSet,
								{
									ctor: '::',
									_0: _p331._0._1,
									_1: {
										ctor: '::',
										_0: _p331._2._1,
										_1: {ctor: '[]'}
									}
								}));
					case 'WOffset1D':
						return A3(
							_elm_lang$core$Set$foldl,
							_user$project$Sync$incrementCount,
							acc,
							A2(_user$project$Sync$unfrozenTraceLocIdSet, unfrozenLocIdSet, _p331._4._1));
					case 'WCall':
						return acc;
					default:
						return acc;
				}
			});
		var d = A3(_user$project$LangSvg$foldSlateNodeInfo, _p325._0, _elm_lang$core$Dict$empty, addTriggerNode);
		var d_ = A3(_elm_lang$core$List$foldl, addTriggerWidget, d, _p325._1);
		return d_;
	});
var _user$project$Sync$tracesOfAVals = function (avals) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (av, acc) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Sync$tracesOfAVal(av),
					acc);
			}),
		{ctor: '[]'},
		avals);
};
var _user$project$Sync$lookupZoneKey = F2(
	function (zoneKey, info) {
		var errorString = A2(
			_elm_lang$core$Basics_ops['++'],
			'lookupZoneKey: ',
			_elm_lang$core$Basics$toString(zoneKey));
		var $default = function () {
			var _p332 = A2(_user$project$Sync$debugLog, errorString, 'able to avoid this?');
			return {
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Set$empty,
				_2: _elm_lang$core$Set$empty
			};
		}();
		var _p333 = zoneKey;
		var id = _p333._0;
		var zoneName = _p333._2;
		return A2(
			_elm_lang$core$Maybe$withDefault,
			$default,
			A2(
				_elm_lang$core$Dict$get,
				{ctor: '_Tuple2', _0: id, _1: zoneName},
				info.triggers));
	});
var _user$project$Sync$prepareLiveTrigger = F6(
	function (info, exp, zoneKey, solutionsCache, _p335, _p334) {
		var _p336 = _p335;
		var _p337 = _p334;
		var _p338 = A2(_user$project$Sync$lookupZoneKey, zoneKey, info);
		var trigger = _p338._0;
		var yellowLocs = _p338._1;
		var initSubst = A2(
			_elm_lang$core$Dict$map,
			_elm_lang$core$Basics$always(
				function (_) {
					return _.val;
				}),
			info.initSubstPlus);
		var updates = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (triggerElement, acc) {
					var _p339 = triggerElement;
					var locId = _p339._2;
					var updateFunction = _p339._4;
					var _p340 = {
						ctor: '_Tuple2',
						_0: A2(_elm_lang$core$Dict$get, locId, acc),
						_1: A3(
							updateFunction,
							solutionsCache,
							{ctor: '_Tuple2', _0: _p336._0, _1: _p336._1},
							{ctor: '_Tuple2', _0: _p337._0, _1: _p337._1})
					};
					if (_p340._0.ctor === 'Nothing') {
						return A3(_elm_lang$core$Dict$insert, locId, _p340._1, acc);
					} else {
						if (_p340._0._0.ctor === 'Nothing') {
							return A3(_elm_lang$core$Dict$insert, locId, _p340._1, acc);
						} else {
							if (_p340._1.ctor === 'Nothing') {
								return acc;
							} else {
								return acc;
							}
						}
					}
				}),
			_elm_lang$core$Dict$empty,
			trigger);
		var newSubst = A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (locId, maybeNum, acc) {
					var _p341 = maybeNum;
					if (_p341.ctor === 'Nothing') {
						return acc;
					} else {
						return A3(_elm_lang$core$Dict$insert, locId, _p341._0, acc);
					}
				}),
			initSubst,
			updates);
		var highlights = A3(_user$project$Sync$highlightChanges, info.initSubstPlus, yellowLocs, updates);
		var exp_ = A2(_user$project$Lang$applyLocSubst, newSubst, exp);
		return {ctor: '_Tuple2', _0: exp_, _1: highlights};
	});
var _user$project$Sync$yellowAndGrayHighlights = F2(
	function (zoneKey, info) {
		var subst = info.initSubstPlus;
		var _p342 = A2(_user$project$Sync$lookupZoneKey, zoneKey, info);
		var yellowLocs = _p342._1;
		var grayLocs = _p342._2;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$filterMap,
				A2(_user$project$Sync$makeHighlight, subst, _user$project$Sync$yellow),
				_elm_lang$core$Set$toList(yellowLocs)),
			A2(
				_elm_lang$core$List$filterMap,
				A2(_user$project$Sync$makeHighlight, subst, _user$project$Sync$gray),
				_elm_lang$core$Set$toList(grayLocs)));
	});
var _user$project$Sync$hoverInfo = F2(
	function (zoneKey, info) {
		var line1 = function () {
			var _p343 = zoneKey;
			var nodeId = _p343._0;
			var shapeKind = _p343._1;
			var realZone = _p343._2;
			var displayId = (_elm_lang$core$Native_Utils.cmp(nodeId, -2) < 0) ? ((0 - nodeId) - 2) : nodeId;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$Basics_ops['++'],
					shapeKind,
					_elm_lang$core$Basics$toString(displayId)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_user$project$ShapeWidgets$realZoneDesc(realZone)));
		}();
		var maybeLine2 = function () {
			var _p344 = A2(_user$project$Sync$lookupZoneKey, zoneKey, info);
			var triggerElements = _p344._0;
			if (_elm_lang$core$Native_Utils.eq(
				triggerElements,
				{ctor: '[]'})) {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p345 = A2(
					_elm_lang$core$List$partition,
					function (_p346) {
						var _p347 = _p346;
						return _elm_lang$core$Native_Utils.eq(_p347._1, 'dx');
					},
					triggerElements);
				var dxElements = _p345._0;
				var list2 = _p345._1;
				var _p348 = A2(
					_elm_lang$core$List$partition,
					function (_p349) {
						var _p350 = _p349;
						return _elm_lang$core$Native_Utils.eq(_p350._1, 'dy');
					},
					list2);
				var dyElements = _p348._0;
				var list3 = _p348._1;
				var _p351 = A2(
					_elm_lang$core$List$partition,
					function (_p352) {
						var _p353 = _p352;
						return _elm_lang$core$Native_Utils.eq(_p353._1, 'dxy');
					},
					list3);
				var dxyElements = _p351._0;
				var otherElements = _p351._1;
				var strElements = F2(
					function (caption, elements) {
						var foo = function (_p354) {
							var _p355 = _p354;
							var _p356 = _p355._2;
							var n = A3(
								_user$project$Utils$justGet_,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'hoverInfo: ',
									_elm_lang$core$Basics$toString(_p356)),
								_p356,
								info.initSubstPlus);
							var locName = A2(
								_elm_lang$core$Basics_ops['++'],
								'loc_',
								_elm_lang$core$Basics$toString(_p356));
							return A2(
								_elm_lang$core$Basics_ops['++'],
								locName,
								_user$project$Utils$parens(
									A2(
										_elm_lang$core$String$left,
										4,
										_elm_lang$core$Basics$toString(n.val))));
						};
						var _p357 = elements;
						if (_p357.ctor === '[]') {
							return {ctor: '[]'};
						} else {
							return {
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Utils$bracks(caption),
									A2(
										_elm_lang$core$Basics_ops['++'],
										' ',
										_user$project$Utils$spaces(
											A2(_elm_lang$core$List$map, foo, elements)))),
								_1: {ctor: '[]'}
							};
						}
					});
				return _elm_lang$core$Maybe$Just(
					_user$project$Utils$spaces(
						_elm_lang$core$List$concat(
							{
								ctor: '::',
								_0: A2(strElements, 'dx', dxElements),
								_1: {
									ctor: '::',
									_0: A2(strElements, 'dy', dyElements),
									_1: {
										ctor: '::',
										_0: A2(strElements, 'dxy', dxyElements),
										_1: {
											ctor: '::',
											_0: A2(strElements, '...', otherElements),
											_1: {ctor: '[]'}
										}
									}
								}
							})));
			}
		}();
		return {ctor: '_Tuple2', _0: line1, _1: maybeLine2};
	});
var _user$project$Sync$Options = F2(
	function (a, b) {
		return {thawedByDefault: a, heuristicsMode: b};
	});
var _user$project$Sync$LiveInfo = F2(
	function (a, b) {
		return {triggers: a, initSubstPlus: b};
	});
var _user$project$Sync$HeuristicsBiased = {ctor: 'HeuristicsBiased'};
var _user$project$Sync$defaultOptions = {thawedByDefault: true, heuristicsMode: _user$project$Sync$HeuristicsBiased};
var _user$project$Sync$HeuristicsFair = {ctor: 'HeuristicsFair'};
var _user$project$Sync$prepareLiveUpdates_ = F3(
	function (options, e, _p358) {
		var _p359 = _p358;
		var _p363 = _p359._1;
		var _p362 = _p359._0;
		var initSubstPlus = _user$project$FastParser$substPlusOf(e);
		var initSubst = A2(
			_elm_lang$core$Dict$map,
			_elm_lang$core$Basics$always(
				function (_) {
					return _.val;
				}),
			initSubstPlus);
		var unfrozenLocIdSet = A2(_user$project$Sync$expToUnfrozenLocIdSet, options, e);
		var maybeCounts = _elm_lang$core$Native_Utils.eq(options.heuristicsMode, _user$project$Sync$HeuristicsFair) ? _elm_lang$core$Maybe$Just(
			_user$project$Either$Right(_elm_lang$core$Dict$empty)) : (_elm_lang$core$Native_Utils.eq(options.heuristicsMode, _user$project$Sync$HeuristicsBiased) ? _elm_lang$core$Maybe$Just(
			_user$project$Either$Left(
				A2(
					_user$project$Sync$getLocationCounts,
					unfrozenLocIdSet,
					{ctor: '_Tuple2', _0: _p362, _1: _p363}))) : _elm_lang$core$Maybe$Nothing);
		var _p360 = A3(
			_user$project$Sync$computeShapeTriggers,
			{ctor: '_Tuple2', _0: unfrozenLocIdSet, _1: initSubst},
			_p362,
			maybeCounts);
		var shapeTriggers = _p360._0;
		var maybeCounts_ = _p360._1;
		var _p361 = A3(
			_user$project$Sync$computeWidgetTriggers,
			{ctor: '_Tuple2', _0: unfrozenLocIdSet, _1: initSubst},
			_p363,
			maybeCounts_);
		var widgetTriggers = _p361._0;
		var maybeCounts__ = _p361._1;
		return _elm_lang$core$Result$Ok(
			{
				initSubstPlus: initSubstPlus,
				triggers: A2(_elm_lang$core$Dict$union, shapeTriggers, widgetTriggers)
			});
	});
var _user$project$Sync$prepareLiveUpdates = F3(
	function (options, e, _p364) {
		var _p365 = _p364;
		return A3(
			_user$project$Sync$prepareLiveUpdates_,
			options,
			e,
			{ctor: '_Tuple2', _0: _p365._0, _1: _p365._1});
	});
var _user$project$Sync$HeuristicsNone = {ctor: 'HeuristicsNone'};

var _user$project$DefaultIconTheme$text = '\n; To customize, Save As: __ui__text.little\n\n(def [line2_num line2_x1] [156 41])\n(def line1_y1 36)\n(def line1\n  (let x1 (+ (/ line2_num 2!) (/ line2_x1 2!))\n  (let [x1 y2] [x1 165]\n  (let [color width] [379 15]\n    [ (line color width [x1 line1_y1] [x1 y2]) ]))))\n\n(def line2\n  (let [color width] [379 15]\n    [ (line color width [line2_x1 line1_y1] [line2_num line1_y1]) ]))\n\n(svgViewBox 200 200 (concat [\n  line1\n  line2\n]))\n';
var _user$project$DefaultIconTheme$lambda = '\n; To customize, Save As: __ui__lambda.little\n\n(let [x0 y0 w h delta] [10 10 180 180 10]\n(let [xw yh w2 h2] [(+ x0 w) (+ y0 h) (div w 2) (div h 2)]\n(let poly (\\pts (polygon \'black\' \'none\' 0 pts))\n(svgViewBox 200 200 [\n  (rect \'white\' [x0 y0] w h)\n  (poly\n    [[(+ x0 delta) y0]\n     [xw y0]\n     [xw (- yh delta)]])\n  (poly\n    [[x0 (+ y0 delta)]\n     [x0 (- yh delta)]\n     [(- (+ x0 w2) delta) (+ y0 h2)]])\n  (poly\n    [[(+ x0 delta) yh]\n     [(- xw delta) yh]\n     [(+ x0 w2) (+ (+ y0 h2) delta)]])\n]))))\n';
var _user$project$DefaultIconTheme$path = '\n; To customize, Save As: __ui__path.little\n\n(def svgViewBox2 (\\(xMin yMin xMax yMax shapes)\n  (let [smx smy sx sy] [(toString xMin) (toString yMin) (toString xMax) (toString yMax)]\n    [\'svg\'\n      [[\'x\' \'0\'] [\'y\' \'0\'] [\'viewBox\' (joinStrings \' \' [smx smy sx sy])]]\n      shapes])))\n\n(def [rect5_h rect4_y] [131 199])\n(def [rect5_w polygon1_pts_k4931] [12 139])\n(def polygon1_pts_k4924 209.5)\n(def rect3_w 91)\n(def rect2_w 105)\n(def rect1_w 129)\n(def polygon1\n  (let pts_k4930 283\n  (let pts_k4927 256\n  (let pts_k4925 (+ polygon1_pts_k4931 -35!)\n  (let pts_k4913 (+ polygon1_pts_k4931 70!)\n  (let pts_k4919 (+ pts_k4913 (- polygon1_pts_k4931 pts_k4925))\n  (let k4922 (* 0.5! (+ pts_k4913 polygon1_pts_k4931))\n  (let pts [[polygon1_pts_k4931 pts_k4930] [polygon1_pts_k4931 pts_k4927] [pts_k4925 polygon1_pts_k4924] [k4922 78] [pts_k4919 polygon1_pts_k4924] [pts_k4913 pts_k4927] [pts_k4913 pts_k4930]]\n  (let [color strokeColor strokeWidth] [499 365 7]\n    [ (rawPolygon color strokeColor strokeWidth pts 0) ])))))))))\n(def [rect1_h rect1_copy16_y rect1_copy16_h rect2_y] [77 279 17 281])\n(def rect2_h (- (+ (+ rect1_copy16_y rect1_copy16_h) rect1_h) rect2_y))\n\n(def rect2\n  (let x (- (* 0.5! (+ (+ polygon1_pts_k4931 70!) polygon1_pts_k4931)) (* 0.5! rect2_w))\n  (let [fill stroke strokeWidth] [365 216 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x rect2_y rect2_w rect2_h rot) ]))))\n\n(def rect3\n  (let x (- (* 0.5! (+ (+ polygon1_pts_k4931 70!) polygon1_pts_k4931)) (* 0.5! rect3_w))\n  (let [fill stroke strokeWidth] [408 418 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x rect2_y rect3_w rect2_h rot) ]))))\n\n(def rect1_copy16\n  (let x (- (* 0.5! (+ (+ polygon1_pts_k4931 70!) polygon1_pts_k4931)) (* 0.5! rect1_w))\n  (let [fill stroke strokeWidth] [365 0 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x rect1_copy16_y rect1_w rect1_copy16_h rot) ]))))\n\n(def rect1\n  (let [x y w] [138 (+ rect1_copy16_y rect1_copy16_h) 15]\n  (let [fill stroke strokeWidth] [499 410 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x y w rect1_h rot) ]))))\n\n(def rect4\n  (let h (* 2! (- polygon1_pts_k4924 rect4_y))\n  (let x (+ (* 0.5! (+ (+ polygon1_pts_k4931 70!) polygon1_pts_k4931)) (- rect4_y polygon1_pts_k4924))\n  (let [fill stroke strokeWidth] [365 38 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x rect4_y h h rot) ])))))\n\n(def rect5\n  (let [x y] [(- (* 0.5! (+ (+ polygon1_pts_k4931 70!) polygon1_pts_k4931)) (* 0.5! rect5_w)) (- rect4_y rect5_h)]\n  (let [fill stroke strokeWidth] [365 266 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x y rect5_w rect5_h rot) ]))))\n\n(svgViewBox2 60 50 250 350 (concat [\n  polygon1\n  rect2\n  rect3\n  rect1_copy16\n  rect1\n  rect4\n  rect5]))\n';
var _user$project$DefaultIconTheme$polygon = '\n; To customize, Save As: __ui__polygon.little\n\n(def star [(nStar 365 470 7 5 45 90 3.1415 [100 110])])\n\n(svgViewBox 200 200\n  star\n)\n';
var _user$project$DefaultIconTheme$ellipse = '\n; To customize, Save As: __ui__ellipse.little\n\n(def ellipse1\n  (let bounds @ [left top right bot] [25 25 175 175]\n  (let [color strokeColor strokeWidth] [365 470 7]\n    [ (oval color strokeColor strokeWidth bounds) ])))\n\n(svgViewBox 200 200 (concat [\n  ellipse1\n]))\n';
var _user$project$DefaultIconTheme$rect = '\n; To customize, Save As: __ui__rect.little\n\n(def rect1\n  (let [x y w h] [25 25 150 150]\n  (let [fill stroke strokeWidth] [365 470 7]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x y w h rot) ]))))\n\n(svgViewBox 200 200 (concat [\n  rect1\n]))\n';
var _user$project$DefaultIconTheme$line = '\n; To customize, Save As: __ui__line.little\n\n(def line1\n  (let [x1 y1 x2 y2] [25 25 175 175]\n  (let [color width] [379 7]\n    [ (line color width [x1 y1] [x2 y2]) ])))\n\n(svgViewBox 200 200 (concat [\n  line1\n]))\n';
var _user$project$DefaultIconTheme$pointOrOffset = '\n; To customize, Save As: __ui__pointOrOffset.little\n\n(def canvasSize 38)\n(def arrowHeadOffset 9)\n(def [x1 y1] [6 (- (- canvasSize arrowHeadOffset) 2)])\n(def x2 (- canvasSize 1))\n(def x11 (- x2 arrowHeadOffset))\n\n(def line1\n  (let [x1 y1 x2 y2] [x1 y1 x2 y1]\n  (let [color width] [\'black\' 1]\n    [ (addAttr (line color width [x1 y1] [x2 y2]) [\"stroke-dasharray\" \"1,1\"]) ])))\n\n(def line2\n  (let [x1 y1 x2 y2] [x11 (+ y1 arrowHeadOffset) x2 y1]\n  (let [color width] [\'black\' 1]\n    [ (addAttr (line color width [x1 y1] [x2 y2]) [\"stroke-dasharray\" \"1,1\"]) ])))\n\n(def line3\n  (let [x1 y1 x2 y2] [x11 (- y1 arrowHeadOffset) x2 y1]\n  (let [color width] [\'black\' 1]\n    [ (addAttr (line color width [x1 y1] [x2 y2]) [\"stroke-dasharray\" \"1,1\"]) ])))\n\n(def circle1\n  (let [cx cy r] [19 8 5]\n  (let fill \'white\'\n    [ (rawCircle fill 360 2 cx cy r) ])))\n\n(def circle2\n  (let [cx cy r] [x1 y1 5]\n  (let fill \'white\'\n    [ (rawCircle fill 360 2 cx cy r) ])))\n\n(svgViewBox canvasSize canvasSize (concat [\n  circle1\n  circle2\n  line1\n  line2\n  line3\n]))\n';
var _user$project$DefaultIconTheme$cursor = '\n; To customize, Save As: __ui__cursor.little\n\n(def polygon1\n  (let pts_k4913 191\n  (let [pts_k4917 pts_k4911] [114 73]\n  (let k4926 (* 0.5! (+ pts_k4917 pts_k4911))\n  (let pts_k4922 124\n  (let pts_k4910 113\n  (let pts [[30 pts_k4922] [k4926 8] [157 pts_k4922] [pts_k4917 pts_k4910] [pts_k4917 pts_k4913] [pts_k4911 pts_k4913] [pts_k4911 pts_k4910]]\n  (let [color strokeColor strokeWidth] [365 470 7]\n    [ (rawPolygon color strokeColor strokeWidth pts -28.996918547567233) ]))))))))\n\n(svgViewBox 200 200 (concat [\n  polygon1\n]))\n';
var _user$project$DefaultIconTheme$icons = _elm_lang$core$Dict$fromList(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'cursor', _1: _user$project$DefaultIconTheme$cursor},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'pointOrOffset', _1: _user$project$DefaultIconTheme$pointOrOffset},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'text', _1: _user$project$DefaultIconTheme$text},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'polygon', _1: _user$project$DefaultIconTheme$polygon},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'path', _1: _user$project$DefaultIconTheme$path},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'lambda', _1: _user$project$DefaultIconTheme$lambda},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});

var _user$project$ExamplesGenerated$uist19_Xs = '\n[x, y] as point = [198, 216]\n\nsquareW = 66\n\nhalfWidth =squareW / 2!\n\nn = 2{0-10}\n\nfill = 72\n\nsquareByCenter2Func center2 =\n  squareByCenter fill center2 halfWidth\n\nfill2 = 218\n\nsquareByCenter2Func2 center2 =\n  squareByCenter fill2 center2 halfWidth\n\nsquareByCenter2Func3 center2 =\n  squareByCenter fill center2 halfWidth\n\nsquareByCenter2Func4 center2 =\n  squareByCenter fill2 center2 halfWidth\n\nboxyXFunc ([x, y] as point) squareW n =\n  let xOffset = x + squareW in\n  let xOffset2 = x - squareW in\n  let yOffset = y - squareW in\n  let yOffset2 = y + squareW in\n  let squareByCenter1 = squareByCenter 426 point ( halfWidth) in\n  let ySep =0! - squareW in\n  let nPointsSepBy2 = nPointsSepBy n [xOffset, yOffset] squareW ( ySep) in\n  let repeatedSquareByCenter2Func =\n    map squareByCenter2Func nPointsSepBy2 in\n  let nPointsSepBy3 = nPointsSepBy n [xOffset, yOffset2] squareW squareW in\n  let repeatedSquareByCenter2Func21 =\n    map squareByCenter2Func2 nPointsSepBy3 in\n  let nPointsSepBy4 = nPointsSepBy n [xOffset2, yOffset2] ySep squareW in\n  let repeatedSquareByCenter2Func3 =\n    map squareByCenter2Func3 nPointsSepBy4 in\n  let nPointsSepBy5 = nPointsSepBy n [xOffset2, yOffset] ySep (0! - squareW) in\n  let repeatedSquareByCenter2Func4 =\n    map squareByCenter2Func4 nPointsSepBy5 in\n  let squareByCenterSingleton =\n    [squareByCenter1] in\n  concat [squareByCenterSingleton, repeatedSquareByCenter2Func, repeatedSquareByCenter2Func21, repeatedSquareByCenter2Func3, repeatedSquareByCenter2Func4]\n\nboxyX = boxyXFunc point squareW n\n\nboxyXFunc1 = boxyXFunc [506, 225] squareW 1{0-10}\n\nboxyXFunc2 = boxyXFunc [329, 666] squareW 3{0-10}\n\nsvg (concat [\n  boxyX,\n  boxyXFunc1,\n  boxyXFunc2\n])\n';
var _user$project$ExamplesGenerated$uist19_tree_branch = '\n[branchLeft, branchY] as branchAnchorPt = [53, 542]\n\nrhombusFunc [x, y] halfW halfH =\n  let xOffset = x + halfW in\n  let xOffset2 = x - halfW in\n  let yOffset = y - halfH in\n  let yOffset2 = y + halfH in\n  let pts = [[x, yOffset], [xOffset, y], [x, yOffset2], [xOffset2, y]] in\n  let [color, strokeColor, strokeWidth] = [121, 360, 2] in\n    polygon color strokeColor strokeWidth pts\n\nrhombusFunc2 ([x, y] as point) =\n  let halfW = 40 in\n  let halfH = 83 in\n  rhombusFunc point halfW halfH\n\nbranchHalfW = 48\n\nbranchTop = branchY - branchHalfW\n\nbranchBot = branchY + branchHalfW\n\nbranchRight = branchLeft + 405\n\nbranch =\n  let pts = [[branchLeft, branchTop], [branchRight, branchY], [branchLeft, branchBot]] in\n  let [color, strokeColor, strokeWidth] = [29, 360, 2] in\n    polygon color strokeColor strokeWidth pts\n\ndeadspace = 72\n\nleafAttachmentStartX = branchLeft + deadspace\n\nleafAttachmentEndX = branchRight - deadspace\n\nleafAttachmentPts = pointsBetweenSepBy [leafAttachmentStartX, branchY] [leafAttachmentEndX, branchY] 100\n\nleaves =\n  map rhombusFunc2 leafAttachmentPts\n\nsvg (concat [\n  [branch],\n  leaves\n])\n';
var _user$project$ExamplesGenerated$uist19_target = '\npoint = [236, 241]\n\ncircles =\n  map (\\i ->\n      circle (if mod i 2! == 0! then 0 else 466) point (22 + i * 46))\n    (reverse (zeroTo 5{0-15}))\n\nsvg (concat [\n  circles\n])\n';
var _user$project$ExamplesGenerated$uist19_rails = '\n[railsLeft, y]= [87, 375]\n\nrailsRight = railsLeft + 401\n\nhalfGauge = 71\n\ntopRailY = y - halfGauge\n\nbotRailY = y + halfGauge\n\nrailOverextension = 37\n\nfirstTieX = railsLeft + railOverextension\n\nendTiesX = railsRight - railOverextension\n\npointsBetweenSepBy2 = pointsBetweenSepBy [firstTieX, y] [endTiesX, y] 53\n\ntieOverExtension = 34\n\ntieFunc point =\n  rectByCenter 24 point 20 (halfGauge + tieOverExtension)\n\nrepeatedTieFunc =\n  map tieFunc pointsBetweenSepBy2\n\ncolor = 446\n\nstrokeWidth = 13\n\ntopRail = line color strokeWidth [railsLeft, topRailY] [railsRight, topRailY]\n\nbotRail = line color strokeWidth [railsLeft, botRailY] [railsRight, botRailY]\n\nsvg (concat [\n  repeatedTieFunc,\n  [topRail],\n  [botRail]\n])\n';
var _user$project$ExamplesGenerated$uist19_precision_floor_plan = '\npoint = [82, 136]\n\nh = 239\n\nw = 444\n\nfloorRect = rect 36 point w h\n\ntableRect = rect 188 point (w / 3!) h\n\nsvg (concat [\n  [floorRect],\n  [tableRect]\n])\n';
var _user$project$ExamplesGenerated$uist19_pencil_tip = '\n[taperStartX, y] as point = [253, 269]\n\nbodyHalfL = 118\n\npencilHalfW = 61\n\nratio = 0.62\n\npencilFunc [taperStartX, y] pencilHalfW bodyHalfL taperL ratio =\n  let bodyCenterX = taperStartX - bodyHalfL in\n  let top = y - pencilHalfW in\n  let bot = y + pencilHalfW in\n  let tipX = taperStartX + taperL in\n  let body = rectByCenter 42 [bodyCenterX, y] bodyHalfL pencilHalfW in\n  let tipPt = [tipX, y] in\n  let taperStartTopPt = [taperStartX, top] in\n  let leadStartTopPt = onLine taperStartTopPt tipPt ratio in\n  let taperStartBotPt = [taperStartX, bot] in\n  let leadStartBotPt = onLine taperStartBotPt tipPt ratio in\n  let shavedWood =\n    let pts = [taperStartBotPt, taperStartTopPt, leadStartTopPt, leadStartBotPt] in\n    let [color, strokeColor, strokeWidth] = [460, 360, 0] in\n      polygon color strokeColor strokeWidth pts in\n  let lead =\n    let pts = [leadStartBotPt, leadStartTopPt, tipPt] in\n    let [color, strokeColor, strokeWidth] = [397, 360, 0] in\n      polygon color strokeColor strokeWidth pts in\n  [body, shavedWood, lead]\n\npencil = pencilFunc point pencilHalfW bodyHalfL 205 ratio\n\nsvg (concat [\n  pencil\n])\n';
var _user$project$ExamplesGenerated$uist19_n_boxes = '\nboxes =\n  map (\\i ->\n      rect 200 [ 50 + i * 76, 110] 55 195)\n    (zeroTo 7{0-15})\n\nsvg (concat [\n  boxes\n])\n';
var _user$project$ExamplesGenerated$uist19_mondrian_arch = '\n[left, top] as topLeft = [95, 171]\n\nheight = 335\n\nstoneWidth = 73\n\nwidth = 325\n\narchFunc ([left, top] as topLeft) width height stoneWidth =\n  let lintel = rect 210 topLeft width stoneWidth in\n  let pillarHeight =height - stoneWidth in\n  let pillarTop = top + stoneWidth in\n  let leftPillar = rect 0 [left, pillarTop] stoneWidth ( pillarHeight) in\n  let rightPillar = rect 134 [ left + width- stoneWidth, pillarTop] stoneWidth pillarHeight in\n  [lintel, leftPillar, rightPillar]\n\narch = archFunc topLeft width height stoneWidth\n\nsvg (concat [\n  arch\n])\n';
var _user$project$ExamplesGenerated$uist19_logo_via_three_tris = '-- Need to draw the bot-right delta offsets before drawing the midpoint\n-- Because (ugh) getting the offsets to draw from the correct base points is hard.\n-- Abstracted (after grouping w/o gathering dependencies)\n\n[x, y] as point = [88, 104]\n\nw = 331\n\n∂ = 32\n\nlambdaFunc ([x, y] as point) w ∂ leftColor botColor bigColor =\n  let yOffset = y + w in\n  let xOffset = x + w in\n  let [x1, y1] as point1 = [x, yOffset] in\n  let x1Offset = x1 + ∂ in\n  let yOffsetOffset = yOffset - ∂ in\n  let [x2, y2] as point2 = [xOffset, y] in\n  let y2Offset = y2 + w in\n  let [x3, y3] as point3 = [xOffset, y2Offset] in\n  let x3Offset = x3 - ∂ in\n  let y2OffsetOffset = y2Offset - ∂ in\n  let xOffset2 = x + ∂ in\n  let yOffset2 = y + ∂ in\n  let midpoint2 = midpoint point point3 in\n  let [x4, _] = midpoint2 in\n  let fstOffset = x4 - ∂ in\n  let [_, y4] = midpoint2 in\n  let sndOffset = y4 + ∂ in\n  let leftTri =\n    let [_, y5] = midpoint2 in\n    let pts = [[x, yOffset2], [fstOffset, y5], [x, yOffsetOffset]] in\n    let [color, strokeColor, strokeWidth] = [leftColor, 360, 2] in\n      polygon color strokeColor strokeWidth pts in\n  let botTri =\n    let [x5, _] = midpoint2 in\n    let pts = [[x1Offset, yOffset], [x5, sndOffset], [x3Offset, y2Offset]] in\n    let [color, strokeColor, strokeWidth] = [botColor, 360, 2] in\n      polygon color strokeColor strokeWidth pts in\n  let bigTri =\n    let pts = [[xOffset2, y], point2, [xOffset, y2OffsetOffset]] in\n    let [color, strokeColor, strokeWidth] = [bigColor, 360, 2] in\n      polygon color strokeColor strokeWidth pts in\n  [leftTri, botTri, bigTri]\n\nlambda = lambdaFunc point w ∂ 27 245 148\n\nsvg (concat [\n  lambda\n])\n';
var _user$project$ExamplesGenerated$uist19_lambda_logo_overview = '\ny = 127\n\nx = 158\n\nw = 156\n\ncolor = 362\n\nstrokeWidth = 5\n\nlogoFunc x y w color strokeWidth =\n  let topLeft = [x, y] in\n  let square1 = square 140 topLeft w in\n  let y2 = y + w in\n  let xYPair = [ x+ w, y2] in\n  let line1 = line color strokeWidth topLeft xYPair in\n  let line2 = line color strokeWidth [x, y2] [ (2! * x + w)/ 2!, (2! * y + w) / 2!] in\n  let polygon1 =\n    let pts = [[x, y], [ x+ w, y], xYPair, [x, y2]] in\n    let [color, strokeColor, strokeWidth] = [529, 360, 5] in\n      polygon color strokeColor strokeWidth pts in\n  [square1, line1, line2, polygon1]\n\nlogo = logoFunc x y w color strokeWidth\n\nsvg (concat [\n  logo\n])\n\n';
var _user$project$ExamplesGenerated$uist19_ladder = '-- 2012 Quickdraw Fig. 1; cited as originally from a math text\n-- Trick is to draw offset first, then snap line to it exactly, then repeat the line.\n\nw = 126\n\ncolor = 366\n\nstrokeWidth = 8\n\nline1Func ([x, y] as point) =\n  let xOffset = x + w in\n  line color strokeWidth point [xOffset, y]\n\nleft = 104\n\ntop = 119\n\nrungs =\n  map line1Func (nVerticalPointsSepBy 4{0-10} [left, top] 50)\n\nbot = 346\n\nleftLine = line color strokeWidth [left, top] [left, bot]\n\nrightLine = line color strokeWidth [ left+ w, top] [ left+ w, bot]\n\nsvg (concat [\n  rungs,\n  [leftLine],\n  [rightLine]\n])\n';
var _user$project$ExamplesGenerated$uist19_koch = '-- Final as in paper, but depth 2\n\n\nequiTriPt [x3, y3] [x2, y2] =\n  [ (x2 + x3 + sqrt 3! * (y2 - y3))/ 2!, (y2 + y3 - sqrt 3! * (x2 - x3)) / 2!]\n\noneThirdPt [x3, y3] [x, y] =\n  [ x / 1.5!+ x3 / 3!, y / 1.5! + y3 / 3!]\n\npoint = [39, 314]\n\npoint2 = [490, 301]\n\nmakeKochPts depth point point2 =\n  let oneThirdPt2 = oneThirdPt point point2 in\n  let oneThirdPt3 = oneThirdPt point2 point in\n  let equiTriPt2 = equiTriPt oneThirdPt3 oneThirdPt2 in\n  if depth < 2 then\n    [point, oneThirdPt3, equiTriPt2, oneThirdPt2]\n  else\n    let makeKochPts2 = makeKochPts (depth - 1) point oneThirdPt3 in\n    let makeKochPts3 = makeKochPts (depth - 1) oneThirdPt3 equiTriPt2 in\n    let makeKochPts4 = makeKochPts (depth - 1) equiTriPt2 oneThirdPt2 in\n    let makeKochPts5 = makeKochPts (depth - 1) oneThirdPt2 point2 in\n      concat [makeKochPts2, makeKochPts3, makeKochPts4, makeKochPts5]\n\ndepth = 2{1-5}\n\ntopPts = makeKochPts depth point point2\n\nbotCorner = equiTriPt point2 point\n\nrightPts = makeKochPts depth point2 botCorner\n\nleftPts = makeKochPts depth botCorner point\n\nsnowflakePts = concat [topPts, rightPts, leftPts]\n\npolygon1 =\n  let pts = snowflakePts in\n  let [color, strokeColor, strokeWidth] = [124, 360, 2] in\n    polygon color strokeColor strokeWidth pts\n\nsvg (concat [\n  [polygon1]\n])\n';
var _user$project$ExamplesGenerated$uist19_ferris_wheel = '\npoint = [307, 334]\n\nr = 166\n\nattachmentPts = nPointsOnCircle 7{0-10} 0.06280000000000001{-3.14-3.14} point r\n\ncolor = 434\n\nspokeFunc point2 =\n  line color 5 point point2\n\nspokes =\n  map spokeFunc attachmentPts\n\ncarFunc center2 =\n  squareByCenter 48 center2 25\n\ncars =\n  map carFunc attachmentPts\n\ncapFunc point2 =\n  circle 364 point2 9\n\ncaps =\n  map capFunc attachmentPts\n\nring1 = ring color 7 point r\n\nhub = circle 362 point 44\n\nsvg (concat [\n  [hub],\n  cars,\n  spokes,\n  [ring1],\n  caps\n])\n';
var _user$project$ExamplesGenerated$uist19_box_volume = '[x9, y9] as point9 = [130, 562]\n\n[x, y] as point = [102, 109]\n\nbigW = 271\n\n[x1, y1] as point1 = [ x+ bigW, y]\n\nyOffset = y + bigW\n\nxOffset = x + bigW\n\ny1Offset = y1 + bigW\n\ncutW = 58\n\nyOffset2 = y + cutW\n\nxOffset2 = x + cutW\n\n[x2, y2] as point2 = [xOffset2, y]\n\ny2Offset = y2 + cutW\n\nyOffsetOffset = yOffset - cutW\n\n[x3, y3] as point3 = [x, yOffset]\n\nx3Offset = x3 + cutW\n\n[x4, y4] as point4 = [x3Offset, yOffset]\n\ny4Offset = y4 - cutW\n\nxOffsetOffset = xOffset - cutW\n\n[x5, y5] as point5 = [xOffset, y]\n\ny5Offset = y5 + cutW\n\n[x6, y6] as point6 = [xOffsetOffset, y]\n\ny6Offset = y6 + cutW\n\n[x7, y7] as point7 = [x1, y1Offset]\n\nx7Offset = x7 - cutW\n\ny1OffsetOffset = y1Offset - cutW\n\n[x8, y8] as point8 = [x7Offset, y1Offset]\n\ny8Offset = y8 - cutW\n\ncolor = 39\n\ntopDownTemplate =\n  let pts = [[xOffset2, y2Offset], point2, point6, [xOffsetOffset, y6Offset], [xOffset, y5Offset], [x1, y1OffsetOffset], [x7Offset, y8Offset], point8, point4, [x3Offset, y4Offset], [x, yOffsetOffset], [x, yOffset2]] in\n  let [strokeColor, strokeWidth] = [360, 2] in\n    polygon color strokeColor strokeWidth pts\n\nbaseW = bigW - 2! * cutW\n\nxOffset2Offset = xOffset2 + baseW\n\nx3OffsetOffset = x3Offset + baseW\n\nx9Offset = x9 + baseW\n\ny9Offset = y9 - cutW\n\n[x10, y10] as point10 = [x9Offset, y9]\n\ny10Offset = y10 - cutW\n\ny11 = 692\n\nnum = 367\n\nonLine2 = onLine point9 [num, y11] (baseW / sqrt (pow x9 2! - 2! * x9 * num + pow num 2! + pow y9 2! - 2! * y9 * y11 + pow y11 2!))\n\n[x11, _] = onLine2\n\nfstOffset = x11 + baseW\n\n[_, y12] = onLine2\n\n[_, y13] = onLine2\n\n[x13, y13] as point13 = [fstOffset, y13]\n\ny13Offset = y13 - cutW\n\nx9OffsetY10OffsetPair = [x9Offset, y10Offset]\n\nxY9OffsetPair = [x9, y9Offset]\n\nboxBack =\n  let pts = [point9, xY9OffsetPair, x9OffsetY10OffsetPair, point10] in\n  let [color, strokeColor, strokeWidth] = [color, 360, 2] in\n    polygon color strokeColor strokeWidth pts\n\nboxBot =\n  let pts = [point9, point10, point13, onLine2] in\n  let [color, strokeColor, strokeWidth] = [color, 360, 2] in\n    polygon color strokeColor strokeWidth pts\n\n[x14, y14] as point14 = [fstOffset, y13Offset]\n\nx14Offset = x14 - baseW\n\nboxRight =\n  let pts = [point10, x9OffsetY10OffsetPair, point14, point13] in\n  let [color, strokeColor, strokeWidth] = [color, 360, 2] in\n    polygon color strokeColor strokeWidth pts\n\nx14OffsetY13OffsetPair = [x14Offset, y13Offset]\n\nboxLeft =\n  let pts = [xY9OffsetPair, x14OffsetY13OffsetPair, onLine2, point9] in\n  let [color, strokeColor, strokeWidth] = [color, 360, 2] in\n    polygon color strokeColor strokeWidth pts\n\nboxFront =\n  let pts = [onLine2, x14OffsetY13OffsetPair, point14, point13] in\n  let [color, strokeColor, strokeWidth] = [color, 360, 2] in\n    polygon color strokeColor strokeWidth pts\n\nsvg (concat [\n  [topDownTemplate],\n  [boxBack],\n  [boxBot],\n  [boxRight],\n  [boxLeft],\n  [boxFront]\n])\n';
var _user$project$ExamplesGenerated$uist19_battery = '-- Simple Black Battery, abstracted b/c the point of the presentation in Lillicon is that you could make different versions for different icon sizes\n\n[x, y] as point = [66, 148]\n\nh4 = 141\n\nw = 274\n\nfill = 362\n\nh = 73\n\nbatteryFunc ([x, y] as point) h4 w fill h =\n  let body = rect fill point w h4 in\n  let head = rect fill [ x+ w, (h4 - h + 2! * y) / 2!] 40 h in\n  [body, head]\n\nbattery = batteryFunc point h4 w fill h\n\nsvg (concat [\n  battery\n])\n';
var _user$project$ExamplesGenerated$uist19_balance_scale = '\n[centerX, pillarTop] as point2 = [236, 147]\n\ny3 = 181\n\n[x, y] as point = [89, 231]\n\n[x3, y3] as point3 = [noWidgets (sqrt (pow centerX 2! - 2! * centerX * x + pow x 2! - 2! * pillarTop * y + 2! * pillarTop * y3 + pow y 2! - pow y3 2!) + centerX), y3]\n\ntrayWireWireFunc ([x, y] as topPoint) hangDistance =\n  let yOffset = y + hangDistance in\n  let [x1, y1] as point1 = [x, yOffset] in\n  let trayHalfW = 81 in\n  let left = x1 - trayHalfW in\n  let right = x + trayHalfW in\n  let tray = ellipse 40 point1 trayHalfW 30 in\n  let color = 434 in\n  let strokeWidth = 5 in\n  let wire1 = line color strokeWidth topPoint [left, yOffset] in\n  let wire2 = line color strokeWidth topPoint [right, yOffset] in\n  [tray, wire1, wire2]\n\nbaseCenter = [centerX, 496]\n\ncolor = 208\n\npillar = line color 20 point2 baseCenter\n\nbase = ellipse color baseCenter 109 33\n\nstrokeWidth = 15\n\nleftArm = line color strokeWidth point2 point\n\nrightArm = line color strokeWidth point2 point3\n\nhangDistance = 171\n\nhangingTray1 = trayWireWireFunc point hangDistance\n\nhangingTray2 = trayWireWireFunc point3 hangDistance\n\nsvg (concat [\n  [pillar],\n  [base],\n  [leftArm],\n  [rightArm],\n  hangingTray1,\n  hangingTray2\n])\n';
var _user$project$ExamplesGenerated$uist19_arrows = '\npt2 = [405, 134]\n\npt1 = [109, 238]\n\ncolor = 0\n\nstrokeWidth = 5\n\narrowFunc pt1 pt2 color strokeWidth =\n  let onLine2 = onLine pt1 pt2 0.7112162162162161 in\n  let onPerpendicularLine2 = onPerpendicularLine onLine2 pt2 1! in\n  let onPerpendicularLine3 = onPerpendicularLine onLine2 pt2 -1! in\n  let line1 = line color strokeWidth pt1 pt2 in\n  let line2 = line color strokeWidth onPerpendicularLine2 pt2 in\n  let line3 = line color strokeWidth onPerpendicularLine3 pt2 in\n  [line1, line2, line3]\n\narrow = arrowFunc pt1 pt2 color strokeWidth\n\narrowFunc1 = arrowFunc [286, 292] [476, 334] 0 5\n\narrowFunc2 = arrowFunc [297, 446] [179, 353] 0 5\n\nsvg (concat [\n  arrow,\n  arrowFunc1,\n  arrowFunc2\n])\n';
var _user$project$ExamplesGenerated$task_lambda = '\n(def rectangle\n  (rect \"black\" 20 30 100 120))\n(def line1\n  (line \"white\" 5 20 30 (+ 20 100) (+ 30 120)))\n(def line2\n  (line \"white\" 5 20 (+ 30 120) (+ 20 (/ 100 2)) (+ 30 (/ 120 2))))\n\n(def logo\n  [rectangle line1 line2])\n\n(def main\n  (draw logo))\n\n\n; The final program should look something like:\n;\n;   (def [x y w h] [20 30 100 120])\n;   (def [fill stroke strokeWidth] [\"black\" \"white\" 5])\n;\n;   (def rectangle\n;     (rect fill x y w h))\n;   (def line1\n;     (line stroke strokeWidth x y (+ x w) (+ y h)))\n;   (def line2\n;     (line stroke strokeWidth x (+ y h) (+ x (/ w 2)) (+ y (/ h 2))))\n;\n;   (def logo\n;     [rectangle line1 line2])\n;\n;   (def main\n;     (draw logo))\n; <!-- PROSE --> <p>The initial program draws a <code>100</code> x <code>120</code> pixel lambda icon at xy-position <code>(20, 30)</code>, but the use of duplicated constants requires many changes if we want to draw the icon at a different position or change the style of the lines.</p><p>PLACEHOLDER INSTRUCTIONS</p><p>Goals:</p><ul><li><p>Define and use four new variables called <code>x</code>, <code>y</code>, <code>w</code>, and <code>h</code> for the x-position, y-position, width, and height, respectively, of the logo. These variables should be defined in a single 4-tuple.</p></li><li><p>Define and use two new variables called <code>stroke</code> and <code>strokeWidth</code> for the color and width, respectively, of the lines. These variables should be defined in a single 2-tuple.</p></li><li><p>Define and use a new variable called <code>fill</code> for the color of the rectangle. This variable should be defined in the same tuple as <code>stroke</code> and <code>strokeWidth</code>.</p></li></ul>\n\n';
var _user$project$ExamplesGenerated$task_four_squares = '\n(def fourSquares\n  (let [x y w] [80 30 100]\n\n    [(rect \"yellowgreen\" (+ x (* 0 w)) (+ y (* 0 w)) w w)\n     (rect \"gold\"        (+ x (* 1 w)) (+ y (* 0 w)) w w)\n     (rect \"royalblue\"   (+ x (* 0 w)) (+ y (* 1 w)) w w)\n     (rect \"salmon\"      (+ x (* 1 w)) (+ y (* 1 w)) w w)\n    ]))\n\n(def main\n  (draw fourSquares))\n\n\n; The final program should look something like:\n;\n;   (def fourSquares (\\(x y w topLeft topRight botLeft botRight)\n;\n;     (let oneCorner (\\(fill num num2)\n;       (rect fill (+ x (* num w)) (+ y (* num2 w)) w w))\n;\n;       [(oneCorner topLeft 0 0)\n;        (oneCorner topRight 1 0)\n;        (oneCorner botLeft 0 1)\n;        (oneCorner botRight 1 1)\n;       ])))\n;\n;   (def main\n;     (draw (fourSquares 80 30 100 \"yellowgreen\" \"gold\" \"royalblue\" \"salmon\")))\n; <!-- PROSE --> <p>PLACEHOLDER INSTRUCTIONS</p><p>Goals:</p><ul><li><p>Introduce a helper function called <code>oneCorner</code> that factors the code that is common to the four calls to <code>rect</code>.</p></li><li><p>Turn <code>fourSquares</code> into a function takes <code>x</code>, <code>y</code>, and <code>w</code> arguments, as well as color arguments called <code>topLeft</code>, <code>topRight</code>, <code>botLeft</code>, and <code>botRight</code>.</p></li></ul>\n\n';
var _user$project$ExamplesGenerated$task_target = '\n(def ring (\\i\n  (let fill (if (= 0 (mod i 2)) \"firebrick\" \"lightgray\")\n  (circle fill 150 150 (* 30 i)))))\n\n(def target (\\(startIndex endIndex)\n  (map ring (reverse (range startIndex endIndex)))))\n\n(def main\n  (draw (target 1 4)))\n\n\n; The final program should look something like:\n;\n;   (def target (\\(numRings cx cy num)\n;     (let ring (\\i\n;       (let fill (if (= 0 (mod i 2)) \"firebrick\" \"lightgray\")\n;       (circle fill cx cy (* num i))))\n;       (map ring (reverse (range 1 numRings))))))\n;\n;   (def main\n;     (draw (target 4 150 150 30)))\n; <!-- PROSE --> <p>PLACEHOLDER INSTRUCTIONS</p><p>Goals:</p><ul><li><p>Remove the <code>startIndex</code> argument; its value should always be <code>1</code>.</p></li><li><p>Rename <code>endIndex</code> to <code>numRings</code>.</p></li><li><p>Move the <code>ring</code> function inside the <code>target</code> definition.</p></li><li><p>Add the center position and ring width as arguments to <code>target</code>.</p></li></ul>\n\n';
var _user$project$ExamplesGenerated$task_three_rectangles = '\n(def rect1\n  (let [fill x y w h] [\"red\" 30 30 50 70]\n    (rect fill x y w h)))\n\n(def rect2\n  (let [fill x y w h] [\"green\" 109 53 50 70]\n    (rect fill x y w h)))\n\n(def rect3\n  (let [fill x y w h] [\"blue\" 192 35 50 70]\n    (rect fill x y w h)))\n\n(def main\n  (draw [ rect1 rect2 rect3 ]))\n\n\n; The final program should look something like:\n;\n;   (def rect_50_70 (\\(fill x y)\n;     (let [w h] [50 70]\n;       (rect fill x y w h))))\n;\n;   (def rect1\n;     (rect_50_70 \"red\" 30 30))\n;\n;   (def rect2\n;     (rect_50_70 \"green\" 109 53))\n;\n;   (def rect3\n;     (rect_50_70 \"blue\" 192 35))\n;\n;   (def main\n;     (draw [ rect1 rect2 rect3 ]))\n; <!-- PROSE --> <p>PLACEHOLDER INSTRUCTIONS</p><p>Goals:</p><ul><li>The three rectangle definitions share a lot of identical code. Create a function <code>rect_50_70</code> that generates a <code>50</code> x <code>70</code> rectangle given color and position arguments, and define <code>rect1</code>, <code>rect2</code>, and <code>rect3</code> in terms of <code>rect_50_70</code>.</li></ul>\n\n';
var _user$project$ExamplesGenerated$task_two_circles = '\n(def connectedCircles\n  (let startX 50\n  (let endY 50\n  (let startY 70\n  (let endX 150\n  [(circle \"gray\" startX startY 30)\n   (circle \"gray\" endX endY 30)\n   (line \"gray\" 10 startX startY endX endY)\n  ])))))\n\n(def main\n  (draw connectedCircles))\n\n\n; The final program should look something like:\n;\n;   (def connectedCircles (\\(startX startY endX endY)\n;     [(circle \"gray\" startX startY 30)\n;      (circle \"gray\" endX endY 30)\n;      (line \"gray\" 10 startX startY endX endY)\n;     ]))\n;\n;   (def main\n;     (draw (connectedCircles 50 70 150 50)))\n; <!-- PROSE --> <p>PLACEHOLDER INSTRUCTIONS</p><p>Goals:</p><ul><li>Turn <code>connectedCirlces</code> into a function takes <code>startX</code>, <code>startY</code>, <code>endX</code>, and <code>endY</code> arguments, and draws two gray circles at <code>(startX, startY)</code> and <code>(endX, endY)</code> connected by a line.</li></ul>\n\n';
var _user$project$ExamplesGenerated$task_one_rectangle = '\n(def rect1\n  (let x 20\n  (let y 20\n  (let height 250\n  (let width 80\n  (let fill \"black\"\n    (rect fill x y height width)))))))\n\n(def main\n  (draw [ rect1 ]))\n\n\n; The final program should look something like:\n;\n;   (def rect1\n;     (let [fill x y width height] [\"black\" 20 20 80 250]\n;       (rect fill x y width height)))\n;\n;   (def main\n;     (draw [ rect1 ]))\n; <!-- PROSE --> <p>PLACEHOLDER INSTRUCTIONS</p><p>Goals:</p><ul><li><p>The programmer intended the rectangle to be <code>250</code> pixels tall and <code>80</code> pixels wide, but the <code>height</code> and <code>width</code> arguments to <code>rect</code> are in the wrong order. Swap them.</p></li><li><p>Rearrange the five variable definitions into a single tuple definition. The order of variables should match the order of arguments to <code>rect</code>.</p></li></ul>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_23 = '\n(def main\n  (draw []))\n; <!-- PROSE --> <p>As a final recap, there are two general mechanisms for invoking code transformation tools:</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p><strong>(Step 1)</strong> Text-select something in the code.</p><p><strong>(Step 2a)</strong> Right-click and select a tool from pop-up menu, or</p><p><strong>(Step 2b)</strong> Select a tool from the Code Tools menu.</p><p><strong>(Step 3)</strong> Follow any instructions and finish.</p><p>In Text-Select Mode, a SINGLE, primary argument is selected FIRST, then the desired code tool is selected, and then the rest of the arguments are selected AFTERWARD (as required by the configuration panel).</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p><strong>(Step 1)</strong> Hold down Shift, hover and click boxes for all items involved for the desired code tool (then release Shift key).</p><p><strong>(Step 2)</strong> Select a tool from pop-up menu.</p><p><strong>(Step 3)</strong> Follow any instructions and finish.</p><p>In Box-Select Mode, ALL arguments are selected first, BEFORE the desired code tool is selected.</p></li></ul><p>Note that regardless of the method of selection, the Escape key will always deselect all selected boxes and cancel any pop-up menus.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Try the Help menu at the top of the screen; you\'ll find these summary instructions there.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_22 = '\n(def square (\\fill (\\(w x y)\n  (rect fill x y w w))))\n\n(def redSquare (square \"salmon\"))\n\n(def yellowSquare (square \"gold\"))\n\n(def greenSquare (square \"yellowgreen\"))\n\n(def main\n  (draw\n    [(redSquare 50 80 50)\n     (yellowSquare 70 70 110)\n     (greenSquare 90 60 190)]))\n; <!-- PROSE --> <p>Lastly, because the three definitions <code>redSquare</code>, <code>yellowSquare</code>, and <code>greenSquare</code> are short, we\'d like to group them into a single tuple definition (on a single line) to save some space.</p><p>We can use the <em>Move Definition</em> tool again, this time to group definitions into a tuple. To do so, we will select only variable names (rather than entire <code>(def ...)</code> expressions) and whitespace next to variables (rather than above or below <code>(def ...)</code> expressions).</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select <code>redSquare</code> in the <code>(def redSquare ...)</code> expression. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Move Definition</em>. Click on <code>yellowSquare</code> in the <code>(def yellowSquare ...)</code> definition. Then, click the whitespace between the keyword <code>def</code> and the variable <code>greenSquare</code>. Click on the single option from the results list.</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down the Shift key and hover over <code>redSquare</code> in <code>(def redSquare   ...)</code>, then click. Next, hover over <code>yellowSquare</code> in <code>(def yellowSquare ...)</code>, then click. Then, click on the whitespace between the keyword <code>def</code> and the variable <code>greenSquare</code>. Under the <em>Move Definition</em> tool in the pop-up menu, select the single option from the results list.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Perform the transformation with each of the two interactions. Use Undo after each to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_21 = '\n(def square (\\fill (\\(w x y)\n  (rect fill x y w w))))\n\n(def redSquare (square \"salmon\"))\n\n(def greenSquare (square \"yellowgreen\"))\n\n(def yellowSquare (square \"gold\"))\n\n(def main\n  (draw\n    [(redSquare 50 80 50)\n     (yellowSquare 70 70 110)\n     (greenSquare 90 60 190)]))\n; <!-- PROSE --> <p>A couple more things before we\'re done! We\'d like to reorder the function definitions to match the order in which we use them, just for the sake of consistency (red, yellow, then green).</p><p>To do so, we can use the <em>Move Definition</em> tool.</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select the entire <code>(def greenSquare ...)</code> expression starting from its opening parenthesis until its closing parenthesis. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Move Definition</em>. Click on the whitespace below the <code>yellowSquare</code> definition (above the <code>main</code> definition). Click on the single option from the results list.</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down the Shift key and hover over the keyword <code>def</code> in <code>(def   greenSquare ...)</code>, then click. Then, click on the whitespace below the <code>yellowSquare</code> definition (above the <code>main</code> definition). Release the Shift key. Under the Move Definition tool in the pop-up menu, select the single option from the results list.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Perform the transformation with each of the two interactions. Use Undo after each to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_20 = '\n(def redSquare (\\(w x y)\n  (rect \"salmon\" x y w w)))\n\n(def greenSquare (\\(w x y)\n  (rect \"yellowgreen\" x y w w)))\n\n(def yellowSquare (\\(w x y)\n  (rect \"gold\" x y w w)))\n\n(def main\n  (draw\n    [(redSquare 50 80 50)\n     (yellowSquare 70 70 110)\n     (greenSquare 90 60 190)]))\n; <!-- PROSE --> <p>Here are some friends for our <code>redSquare</code> function. However, a lot of the code from <code>redSquare</code> has been duplicated in the two new functions; in fact, the only thing that has changed is the color.</p><p>Sketch-n-Sketch provides a <em>Create Function by Merging Definitions</em> code tool that we can use in this situation to abstract much of the repeated code into a helper function.</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select the entire <code>(def redSquare ...)</code> expression starting from its opening parenthesis until its closing parenthesis. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Create Function by Merging Definitions</em>. Hover over the keyword <code>def</code> in <code>(def greenSquare ...)</code>, then click. Hover over the keyword <code>def</code> in <code>(def yellowSquare ...)</code>, then click. Click on the single option from the results list.</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down the Shift key and hover over the keyword <code>def</code> in <code>(def   redSquare ...)</code>, then click. Hover over the keyword <code>def</code> in <code>(def   greenSquare ...)</code>, then click. Hover over the keyword <code>def</code> in <code>(def   yellowSquare ...)</code>, then click. Release the Shift key. Under the <em>Merge Expressions into Function</em> tool in the pop-up menu, select the single option from the results list.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Perform the transformation with each of the two interactions. Use Undo after each to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_19 = '\n(def redSquare (\\(w y)\n  (rect \"salmon\" 100 y w w)))\n\n(def main\n  (draw\n    [(redSquare 80 70)\n     (redSquare 30 160)\n     (redSquare 150 200)]))\n; <!-- PROSE --> <p>On second thought... we realize we\'d like to change the x-position of some of the boxes after all.</p><p>To do so, we can use the <em>Add Argument</em> tool.</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select the number <code>100</code> in the <code>rect</code> function call. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Add Argument</em>. Click on the single option from the results list.</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down the Shift key and click on the number <code>100</code> in the <code>rect</code> function call. Under the <em>Add Argument</em> tool in the pop-up menu, select the single option from the results list.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Perform the transformation with each of the two interactions. Use Undo after each to reset the program. Feel free to manually edit the x-position of the squares after you have performed the transformation!</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_18 = '\n(def redSquare (\\(w x y)\n  (rect \"salmon\" x y w w)))\n\n(def main\n  (draw\n    [(redSquare 80 100 70)\n     (redSquare 30 100 160)\n     (redSquare 150 100 200)]))\n; <!-- PROSE --> <p>While refactoring the function in the previous step, we notice something else we\'d like to change; every single time our function is called, we always set the x-position to <code>100</code>, so we decide to just remove the x-position argument.</p><p>To do so, we can use the <em>Remove Argument</em> tool.</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select the argument <code>x</code> in the list of arguments after the backslash in the <code>redSquare</code> function definition. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Remove Argument</em>. Click on the single option from the results list.</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down the Shift key and click on the argument <code>x</code> in the list of arguments after the backslash in the <code>redSquare</code> function definition. Release the Shift key. Under the <em>Remove Argument</em> tool in the pop-up menu, select the single option form the results listn.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Perform the transformation with each of the two interactions. Use Undo after each to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_17 = '\n(def redSquare (\\(x y w)\n  (rect \"salmon\" x y w w)))\n\n(def main\n  (draw\n    [(redSquare 100 70 80)\n     (redSquare 100 160 30)\n     (redSquare 100 200 150)]))\n; <!-- PROSE --> <p>Let\'s say we\'ve now coded up a nice piece of art using our newly-defined function. However, we now want to change how the <code>redSquare</code> function is called; instead of the size of the square being the last argument that we pass in, we\'d prefer if it were the first.</p><p>To do this, we can use the <em>Reorder Arguments</em> tool.</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select the argument <code>w</code> in the list of arguments after the backslash in the <code>redSquare</code> function definition. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Reorder Arguments</em>. Click on the target position that lies before the first argument (<code>x</code>) and after the opening parenthesis of the argument list. Click on the single option from the results list.</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down the Shift key and click on the argument <code>w</code> in the list of arguments after the backslash in the <code>redSquare</code> function definition. Then, click on the target position that lies before the first argument (<code>x</code>) and after the opening parenthesis of the argument list. Release the Shift key. Under the <em>Reorder Arguments</em> tool in the pop-up menu, select the single option from the results list.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Perform the transformation with each of the two interactions. Use Undo after each to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_16 = '\n(def redSquare\n  (let [x y] [100 70]\n  (let w 80\n    (rect \"salmon\" x y w w))))\n\n(def main\n  (draw [redSquare]))\n; <!-- PROSE --> <p>Next, we will use the <em>Create Function from Definition</em> tool to turn this definition into a function so that it can be called to create more red squares easily.</p><p>We can invoke <em>Create Function from Definition</em> in two main ways:</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select the entire <code>(def redSquare ...)</code> expression starting from its opening parenthesis until its closing parenthesis. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Create Function from Definition</em>.</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down the Shift key, hover over the keyword <code>def</code> in <code>(def redSquare   ...)</code>, then click. Release the Shift key. Select <em>Create Function from Definition</em> from the pop-up menu.</p></li></ul><p>No matter how the <em>Create Function from Definition</em> tool is invoked, there are two options in the results list that we can select from. Because the point of this function is to draw a <em>red</em> square, we\'ll pick the option that does not make color one of the resulting function arguments.</p><p>Notice how the reference to this expression in <code>main</code> has now turned into a function call.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Perform the transformation with each of the two interactions. Use Undo after each to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_15 = '\n(def redSquare\n  (let [x y] [100 70]\n    (rect \"salmon\" x y 120 80)))\n\n(def main\n  (draw [redSquare]))\n; <!-- PROSE --> <p>Thinking back on the previous example, we successfully turned the rectangle into a square by copying the width and height values. But now if we want to change the size of the square, we must remember to change <em>both</em> values in sync.</p><p>Instead, we may want a single variable to take the place of multiple expressions (in this case, the width and height). The <em>Make Equal with Single Variable</em> tool does just that.</p><p>We can invoke <em>Make Equal with Single Variable</em> in two main ways:</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select either <code>120</code> or <code>80</code>. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Make Equal with Single Variable</em>. Click on the remaining number (either <code>120</code> or <code>80</code>). Click on one of the results from the list that appears to apply the transformation.</p><p><strong>Reminder:</strong> in Text-Select Mode, a SINGLE, primary argument is selected FIRST, then the desired tool is selected, and then the rest of the arguments are selected AFTERWARD (as required by the configuration panel).</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down Shift, then click on <code>120</code> and <code>80</code>. Release the Shift key and select <em>Make Equal with Single Variable</em> from the pop-up menu. Click on one of the results from the list that appears to apply the transformation.</p><p><strong>Reminder:</strong> in Box-Select Mode, ALL arguments are selected first, BEFORE the desired code transformation is selected.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Fix the <code>redSquare</code> definition using each of the two interactions. Use Undo after each interaction to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_14 = '\n(def redSquare\n  (let [x y] [100 70]\n    (rect \"salmon\" x y 120 80)))\n\n(def main\n  (draw [redSquare]))\n; <!-- PROSE --> <p>In this code snippet, the rectangle should have sides of equal length, but the width and height (fourth and fifth) arguments of the <code>rect</code> function call are not equal. The <em>Make Equal by Copying</em> tool can be used to copy one expression to replace one or more other expressions.</p><p>As with all Sketch-n-Sketch code tools, there are two main ways that we can use the <em>Make Equal by Copying</em> tool:</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select either <code>120</code> or <code>80</code>. Then, either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Make Equal by Copying</em>. Click on the remaining number (either <code>120</code> or <code>80</code>). Click on one of the results from the list that appears to apply the transformation.</p><p><strong>Note:</strong> in Text-Select Mode, a SINGLE, primary argument is selected FIRST, then the desired tool is selected, and then the rest of the arguments are selected AFTERWARD (as required by the configuration panel).</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down Shift, then click on <code>120</code> and <code>80</code>. Release the Shift key and select <em>Make Equal by Copying</em> from the pop-up menu. Click on one of the results from the list that appears to apply the transformation.</p><p><strong>Note:</strong> in Box-Select Mode, ALL arguments are selected first, BEFORE the desired code transformation is selected.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Fix the <code>redSquare</code> definition using each of the two interactions. Use Undo after each interaction to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_13 = '\n(def redSquare\n  (let [x y] [100 70]\n    (rect \"salmon\" x y 80 80)))\n\n(def main\n  (draw [redSquare]))\n; <!-- PROSE --> <p>As introduced in the previous step, a <em>target position</em> is the whitespace between or above other items in the code. Before moving on to the next tool, let\'s get more practice selecting target positions.</p><h3 id=\"exercises\">Exercises</h3><p>In the interactions below, notice how target positions are sometimes zero characters wide and sometimes span multiple lines.</p><ol style=\"list-style-type: decimal\"><li><p>Hold down the Shift key, and select the target position above <code>redSquare</code> either by selecting the whitespace on line 1 or at the very beginning of line 2. Notice how there are no available tools when only a target position is selected.</p></li><li><p>Hold down the Shift key, and select the target position above <code>main</code>. Notice how selecting a second target position deselects the previous one — at most one target position can be selected at a time.</p></li><li><p>Hold down the Shift key, and hover and select each of the following target positions on line 3:</p></li></ol><ul><li>between the beginning of the line and <code>(let</code>, and</li><li>between <code>let</code> and <code>[x</code>,</li><li>between <code>[</code> and <code>x</code>,</li><li>between <code>x</code> and <code>y</code>,</li><li>between <code>y</code> and <code>]</code>,</li><li>between <code>y]</code> and <code>[100</code>,</li><li>between <code>[</code> and <code>100</code>,</li><li>between <code>100</code> and <code>70</code>,</li><li>between <code>70</code> and <code>]</code>, and</li><li>between <code>70]</code> and the end of the line.</li></ul>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_12 = '\n(def redSquare\n  (rect \"salmon\" 100 70 80 80))\n\n(def main\n  (draw [redSquare]))\n; <!-- PROSE --> <p>Many times, when using a function like <code>rect</code>, passing in multiple constants rather than named variables can lead to confusion as to the purpose of each constant.</p><p>To alleviate this, we can introduce variables using the <em>Introduce Variable</em> tool. This tool uses the notion of a <em>target position</em>, which is the whitespace between or above other items in the code. Target positions typically allow us to select where we want resultant transformations to appear in the code. In the case of the <em>Introduce Variable</em> tool, the target position indicates where we would like the variables to be introduced.</p><p>Let\'s try out the <em>Introduce Variable</em> tool on the x- and y- positions of the red square (the first two arguments of the <code>rect</code> function after the color, &quot;salmon&quot;).</p><p>We can use this code tool (and all others) in two main ways:</p><ul class=\"_12\"><li class=\"_1\"><h3>Text-Select Mode</h3><p>Text-select one of the <code>80</code>s, then either right-click the editor or click on the Code Tools menu at the top of the screen. From either of these menus, select <em>Introduce Variable</em>. The configuration panel asks for one or more expressions for which variables will be introduced, as well as an optional target position. Click the other <code>80</code>, then click the whitespace (on line 3) before the call to <code>rect</code> or the whitespace (on line 1) above the <code>def</code>. Apply the transformation from the results list.</p></li><li class=\"_2\"><h3>Box-Select Mode</h3><p>Hold down Shift, then click on both occurrences of the number <code>80</code>, as well as the whitespace (on line 3) before the call to <code>rect</code> or the whitespace (on line 1) above the <code>def</code>. Release the Shift key and select <em>Introduce Variables</em> from the pop-up menu. Apply the transformation from the results list.</p><p><strong>Note:</strong> Remember to hold down Shift while selecting multiple arguments.</p></li></ul><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Introduce <code>x</code> and <code>y</code> variables with each of the two interactions. Use Undo after each to reset the program.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_11 = '\n(def blueSquare\n  (rect \"salmon\" 100 70 80 80))\n\n(def main\n  (draw [blueSquare]))\n; <!-- PROSE --> <p>Here is the incorrectly-named red square again. Besides selecting <em>Rename Variable</em> directly from the Code Tools menu, there are a few ways additional ways to invoke the <em>Rename</em> tool:</p><ul class=\"_123\"><li class=\"_1\"><h3>Text-Select Mode (right-click menu)</h3><p>Select the text <code>blueSquare</code>, right-click the editor, and select the <em>Rename</em> tool from the pop-up menu. Then, enter a new name (like <code>redSquare</code>) in the results list and press Enter.</p><p><strong>Note:</strong> The Escape key will make the menu or panel go away. <em>⟲ Undo</em> will let you go back.</p></li><li class=\"_2\"><h3>Text-Select Mode (Code Tools menu)</h3><p>Select the text <code>blueSquare</code>, and select the <em>Rename</em> Variable tool from the Code Tools menu at the top-left of the screen. Then enter a new name (like <code>redSquare</code>) in the results list and press Enter.</p><p><strong>Note:</strong> The Escape key will make the panel go away. <em>⟲ Undo</em> will let you go back.</p></li><li class=\"_3\"><h3>Box-Select Mode</h3><p>Hold down the Shift key, hover over <code>blueSquare</code>, click the box that pops up over <code>blueSquare</code>, and then release the Shift key. Select the <em>Rename</em> tool from the pop-up menu. Enter a new name (like <code>redSquare</code>) in the results list and press Enter.</p><p><strong>Note:</strong> The Escape key will clear any selections and make the menu go away. <em>⟲ Undo</em> will let you go back.</p></li></ul><p>Unlike with text edits, you do <em>not</em> need to hit the Run button after invoking a code transformation.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li><p>Perform the renaming with each of the three interactions. Use Undo after each to reset the program.</p></li><li><p><strong>Tip:</strong> To save time in Text-Select Mode, a right-click can be performed without a text selection for <em>variables</em> and <em>constants</em> (but not for more complicated expressions). In this case, Sketch-n-Sketch will automatically select the variable or constant that contains the click that was performed. Try this out by redoing the instructions for <em>Text-Select Mode (right-click menu)</em>, this time by right-clicking <code>blueSquare</code> without text-selecting it.</p></li><li><p><strong>Tip:</strong> The pop-up panels can be re-positioned if they are covering up relevant parts of the code. Redo any one of the interactions and, when a pop-up panel appears, click and drag the top bar to move it somewhere else.</p></li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_10 = '\n(def blueSquare\n  (rect \"salmon\" 100 70 80 80))\n\n(def main\n  (draw [blueSquare]))\n; <!-- PROSE --> <p>Here is a red square. Unfortunately, the name of the function that generates this red square is incorrect. To fix this, we can use one of the <em>code tools</em> that are built in to Sketch-n-Sketch.</p><p>The Code Tools menu at the top-left of the screen lists all of the tools. In this case, we want the <em>Rename Variable</em> to rename the variable at its definition on line 2 and its use on line 6.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li>Choose the <em>Rename Variable</em> tool from the Code Tools menu. The configuration panel that appears asks for a variable to be selected. Hover over and click <code>blueSquare</code> either on line 2 or line 6. Notice that the Code Updates section of the configuration panel now displays a text box in which to enter a new name. Type a new name (like <code>redSquare</code>) in the text box and press Enter. Notice how the variable definition and use are changed. Unlike with text edits, you do <em>not</em> need to hit the Run button after invoking a code transformation.</li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_09 = '\n(def main\n  (draw []))\n; <!-- PROSE --> <p>So far, we\'ve seen how to write code using the text editor.</p><p>Next, we\'ll see some tools that Sketch-n-Sketch provides for automatically performing code transformations.</p>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_08 = '\n(def redLine\n  (let [w x1 y1 x2 y2] [4 100 100 300 300]\n    (line \"salmon\" w x1 y1 x2 y2)))\n\n(def greenRect\n  (let [x y w h] [100 100 150 80]\n    (rect \"lightgreen\" x y w h)))\n\n(def blueCircle\n  (let [cx cy r] [100 100 20]\n    (circle \"lightblue\" cx cy r)))\n\n(def main\n  (draw [redLine greenRect blueCircle]))\n; <!-- PROSE --> <p>Now we\'ll see how to draw three basic shapes: lines, rectangles, and circles. Notice how elements later in the <code>main</code> list appear on top of earlier ones.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li><p>Make the rectangle a square.</p></li><li><p>Reorder the elements in <code>main</code> so that the red line is on top of the green rectangle.</p></li><li><p>All three shapes share the xy-point <code>(100, 100)</code>. Define variables for these two values and use them in all three shapes.</p></li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_07 = '\n(def foo (\\(x y) [(+ x y) (- x y) (* x y) (/ x y)]))\n\n(def multiply3 (\\(x y z) (* x (* y z))))\n\n(def max (\\(x y)\n  (if (< x y) y x)))\n\n(def main\n  (draw [\n    (show (foo 3 4))\n  ]))\n; <!-- PROSE --> <p>The language has several binary operators, as well as if-then-else-expressions.</p><p>Don\'t worry about the syntax too much.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li><p>Replace the call to <code>foo</code> in the <code>main</code> expression with a call to <code>multiply3</code>.</p></li><li><p>Replace the call to <code>foo</code> in the <code>main</code> expression with a call to <code>max</code>.</p></li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_06 = '\n(def triplicate (\\x [x x x]))\n\n(def triplicate2 (\\(x y) [x y x y x y]))\n\n(def main\n  (draw [(show (triplicate 3))]))\n; <!-- PROSE --> <p>The syntax for a function expression is <code>(\\x e)</code>, which defines a function that takes an argument <code>x</code> and returns the expression <code>e</code>.</p><p>The syntax for a multi-argument function is <code>(\\(x1 x2 x3 ...) e)</code>. Notice the parentheses surrounding the list of arguments.</p><p>For example, the function <code>triplicate</code> takes a single argument <code>x</code> (and returns a list that repeats <code>x</code> three times), and <code>triplicate2</code> takes two arguments. To call any function, the function name and its argument are separated by a space, and the entire call is surrounded by parentheses.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li><p>Rename the argument of <code>triplicate</code> to something else and re-run.</p></li><li><p>Add the function call <code>(triplicate2 3 4)</code> in the <code>main</code> expression.</p></li><li><p>Call <code>triplicate2</code> with too many arguments. You\'ll see a run-time error.</p></li><li><p>Call <code>triplicate2</code> with too few arguments. You won\'t get a run-time error, but the result shown will be <code>&lt;fun&gt;</code> (a function that is waiting for the rest of its arguments).</p></li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_05 = '\n(def nums\n  (let one 1\n    [one \"two\" one \"two\"]))\n\n(def main\n  (draw [(show nums)]))\n; <!-- PROSE --> <p>In addition to top-level definitions, local variables can be created using a different keyword called <code>let</code>. For example, within the <code>nums</code> definition, we can define the local variable <code>one</code> to hold the value <code>1</code>, and then refer to that value with the name <code>one</code> in the rest of the let-expression.</p><p>The syntax for a let definition is <code>(let x e1 e2)</code>, which says &quot;let <code>x</code> refer to <code>e1</code> when evaluating <code>e2</code>&quot;. Notice how parentheses surround the entire let definition.</p><p>The binding of <code>x</code> is only in scope in the expression <code>e2</code>. For example, the <code>one</code> variable in this code is not in scope outside of the <code>nums</code> definition.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li><p>Try referencing the <code>one</code> variable outside the <code>nums</code> definition.</p></li><li><p>Tuple patterns can be used in let definitions. Define the tuple pattern <code>[one two]</code> to be <code>[1 2]</code> inside <code>nums</code>.</p></li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_04 = '\n(def [one two] [1 \"two\"])\n\n(def main\n  (draw [(show [one two one two])]))\n; <!-- PROSE --> <p>We use the term &quot;tuple&quot; to describe a list with a fixed number of elements. For example, the list expression <code>[1 &quot;two&quot;]</code> in this code is a 2-tuple, that is, a list with exactly two elements.</p><p>Notice how we access the components of tuple expressions with tuple patterns (instead of just plain variables) on the left-hand side of definitions. The tuple pattern <code>[one two]</code> above matches a list with exactly two elements, binding the name one to the first element and two to the second.</p><p>If the tuple pattern and tuple expression do not have the same number of elements, Sketch-n-Sketch throws a run-time error.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li><p>Add a third variable to the tuple pattern and a third value to the list expression, and re-run.</p></li><li><p>Remove one of the expressions from the list expression (so that the number of variables and expressions are unequal), and re-run.</p></li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_03 = '\n(def str \"hello world!\")\n\n(def num 3.14)\n\n(def bool true)\n\n(def list\n  [1 2 3 true [false \"abc\"] str num bool])\n\n(def main\n  (draw [(show list)]))\n; <!-- PROSE --> <p>The language has several kinds of data: strings, numbers, booleans, and lists.</p><p>Lists are written with square brackets and with spaces separating the elements.</p><p>The language does not have static types, so we can mix and match different types of elements within a list.</p>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_02 = '\n(def x 1)   ; var x = 1\n\n(def y 2)   ; var y = 2\n\n(def z 3)   ; var z = 3\n\n(def main\n  (draw []))\n; <!-- PROSE --> <p>The structure of a program is a series of top-level definitions. The last definition is called <code>main</code> and describes the image to draw in the canvas area on the right. The initial <code>main</code> expression has an empty list, so nothing is drawn.</p><p>Note that any text on the same line following a semicolon (<code>; like this</code>) is a <em>comment</em> and has no effect on the output of the program.</p><h3 id=\"exercises\">Exercises</h3><ol style=\"list-style-type: decimal\"><li><p>Add the expression <code>(show &quot;hello world!&quot;)</code> to the list of drawings. Notice how the border of the canvas turns red; this indicates that the code needs to be re-run. Hit the Run button.</p></li><li><p>Now define this expression in a new variable instead, and refer to it in the <code>main</code> expression.</p></li><li><p>Remove a comment from the program. Notice how this change has no effect on the output.</p></li><li><p>Add extra parentheses somewhere and re-run. You will get a syntax error. Many expressions start and end with parentheses; extra parentheses are not allowed.</p></li></ol>\n\n';
var _user$project$ExamplesGenerated$tutorial_step_01 = '\n(def main\n  (draw []))\n; <!-- PROSE --> <p>Sketch-n-Sketch programs are written in a small functional language with features commonly found in other functional languages and with syntax that resembles Lisp or Racket. Significant or recent experience with functional programming is not necessary to complete the tasks.</p><p>To start, we will introduce the basics of how the language works.</p><p><strong>Note:</strong> You will <em>not</em> need to memorize all the precise details of how the language works; a basic and general understanding will be sufficient for this user study.</p>\n\n';
var _user$project$ExamplesGenerated$study_end = '\n(def main\n  (draw [(show \"That\'s the end of the tasks!\")]))\n; <!-- PROSE --> <p>You\'re all done with the programming exercises!</p><p>One last thing: please fill out the <a href=\"/survey\">exit survey</a>.</p><p>Thanks!</p>\n\n';
var _user$project$ExamplesGenerated$study_transition_2 = '\n(def main\n  (draw []))\n; <!-- PROSE --> <p>In the final section, you will see two example programs, each with a list of editing tasks. As before, you will <em>not</em> be able to use text editing. But, this time, you will be able to use <em>either</em>:</p><ul><li>code tools with Text-Select Mode, or</li><li>code tools with Box-Select Mode.</li></ul><p>It\'s up to you. You can mix and match Text-Select and Box-Select Modes, like in the tutorial.</p><p>And this time, you will work with each program just once.</p><p>Click Next Step to proceed.</p>\n\n';
var _user$project$ExamplesGenerated$study_transition_1 = '\n(def main\n  (draw [(show \"That\'s the end of the tutorial! Let the facilitator know.\")]))\n; <!-- PROSE --> <p>Great job, you\'ve completed the tutorial! Now you\'re going to use Sketch-n-Sketch to perform some program editings tasks.</p><p>In the next section, you will see three example programs, each with a list of editing tasks. You will <em>not</em> be allowed to use text editing for any of the tasks. Instead, you will use the code transformation tools. You will work with each program twice:</p><ul><li>using code tools with Text-Select Mode, and</li><li>using code tools with Box-Select Mode.</li></ul><p>The order in which you are asked to perform tasks and use the different modes is random.</p><p>Before each task, you will have the opportunity to read the code to understand it. All editing features are disabled during this reading period.</p><p>Then, you will be given a list of editing tasks to perform. The top of the file will tell you to use either Text-Select Mode or Box-Select Mode. When you are done with each task, click Next Step to move on.</p><p>Let the facilitator know that you are ready to start. When given the okay, click Next Step to begin this sequence of tasks. Once you click Next Step, you will no longer be able to go the Previous Step of the tutorial.</p>\n\n';
var _user$project$ExamplesGenerated$study_start = '\n(def main\n  (draw []))\n; <!-- PROSE --> <p>In this study, we are going to show you some program editing features in Sketch-n-Sketch, a programming system for generating Scalable Vector Graphics images.</p><p><strong>Tutorial:</strong> In the first half, you will work through a tutorial that explains several features in Sketch-n-Sketch.</p><p><strong>Tasks:</strong> In the second half, you will work through several programming editing tasks using the features described in the tutorial.</p><p>See the Next Step button in the top-right corner of the screen? Every time you\'ve finished a section, press Next Step to move on.</p>\n\n';
var _user$project$ExamplesGenerated$mondrian_arch_deuce = ';\n; Mondrian Arch\n;\n; After Henry Lieberman p554 in \"Watch What I Do:\n; Programming by Demonstration\" Appendix B. MIT Press. 1993.\n;\n\n(def arch\n  (\\(archLeft archTop archWidth pillarHeight stoneWidth)\n  (let pillarTop (+ archTop stoneWidth)\n  (let rightPillarLeft (- (+ archLeft archWidth) stoneWidth)\n    [\n      (rect \'red\'   archLeft        archTop   archWidth  stoneWidth)\n      (rect \'green\' archLeft        pillarTop stoneWidth pillarHeight)\n      (rect \'blue\'  rightPillarLeft pillarTop stoneWidth pillarHeight)\n    ]))))\n\n(svg (concat [\n  (arch 73  44  378 280 55)\n  (arch 276 143 106 138 40)\n  (arch 131 159 118 26  54)\n]))\n\n';
var _user$project$ExamplesGenerated$coffee_deuce = '\n(def mug\n\n  (let fill 206\n  (let [x1 y1 w h] [41 181 155 182]\n  (let [handle_x handle_y] [(+ x1 w) (+ y1 63)]\n  (let [rx ry] [52.899480795897965 46.77512980102551]\n\n  (let [x02 y02] [(+ x1 43) (- y1 80)]\n\n  (let body\n    (rect fill x1 y1 w h)\n    \n  (let outer_handle\n    (ellipse fill handle_x handle_y rx ry)\n    \n  (let inner_handle\n    (let num 0.6201800000000001{0.001-1}\n    (ellipse \'white\' handle_x handle_y (* num rx) (* num ry)))\n  \n  (let steam (\\(x02 y02)\n    (let [strokeColor strokeWidth color] [440 5 499]\n    (let [x0 y0] [ x02 y02]\n    (let d [\'M\' x0 y0\n            \'C\' (- x0 21) (+ y0 26) (+ x0 19) (+ y0 34) (- x0 5) (+ y0 67)\n            \'C\' (+ x0 27) (+ y0 19) (- x0 8) (+ y0 17) x0 y0 \'Z\']\n    (rawPath color strokeColor strokeWidth d 0)))))\n\n  (let steam1\n    (steam x02 y02)\n    \n  (let steam2\n    (steam (+ x02 59) (- y02 3))\n    \n  (let steam3\n    (steam (+ x02 30) (- y02 8))\n    \n  [ outer_handle inner_handle body steam1 steam2 steam3 ])))))))))))))\n\n(svg mug)\n\n';
var _user$project$ExamplesGenerated$battery_deuce = '\n(def battery (\\(topLeft bodyWidth bodyHeight capWidth capHeight strokeWidth juicePct)\n  (let topRight (vec2DPlus topLeft [bodyWidth 0!])\n\n  (let body\n    (let pts [ topLeft\n               (vec2DPlus topLeft [0! bodyHeight])\n               (vec2DPlus topLeft [bodyWidth bodyHeight])\n               topRight ]\n    (addAttr\n      (polygon \'none\' \'black\' strokeWidth pts)\n      [\"stroke-linejoin\" \"round\"]))\n    \n  (let cap\n    (let [x1 y1] (vec2DPlus topRight [0! (/ (- bodyHeight capHeight) 2!)])\n    (rect \'black\' x1 y1 capWidth capHeight))\n  \n  (let juice\n    (let w (* juicePct bodyWidth)\n    (let fill (if (< juicePct 0.2) \'red\'\n              (if (< juicePct 0.4) \'orange\'\n              (if (ge juicePct 1)  \'green\'\n                                   \'black\')))\n    (rect fill (fst topLeft) (snd topLeft) w bodyHeight)))\n\n    [ juice body cap ]))))))\n  \n(svg (concat [\n  (battery [160 80] 198 107 30 41 14{0-40} 1{0.001-1})\n  (battery [101 253] 201 110 19 44 12{0-40} 0.8258406060606062{0.001-1})\n]))\n\n';
var _user$project$ExamplesGenerated$target_deuce = '(def target (\\(cx cy ringWidth ringCount)\n  (let ring (\\i\n    (let fill (if (= 0 (mod i 2)) \'firebrick\' \'lightgray\')\n    (circle fill cx cy (* ringWidth i))))\n    \n  (map ring (reverse (range 1 ringCount))))))\n\n(svg (target 200 200 50 4))\n\n';
var _user$project$ExamplesGenerated$sns_deuce = '\n(def logo (\\(x1 y1 w h fill stroke strokeWidth)\n  (let rectangle (rect fill x1 y1 w h)\n  (let line1 (line stroke strokeWidth x1 y1 (+ x1 w) (+ y1 h))\n  (let line2 (line stroke strokeWidth x1 (+ y1 h) (+ x1 (/ w 2)) (+ y1 (/ h 2)))\n  [rectangle line1 line2])))))\n\n(svg (concat [\n  (logo 33 21 135 120 \'purple\' \'orange\' 15)\n  (logo 180 99 72 31 \'darkgreen\' \'pink\' 3)\n  (logo 186 26 60 60 \'black\' \'white\' 5)\n]))\n\n';
var _user$project$ExamplesGenerated$calendarIcon = '; Calendar Icon\n;\n; After Bernstein and Li \"Lillicon\" 2015.\n;\n; Design Decisions:\n;   - rectangles x/y/w/h or let/top/right/bot (below)\n;   - day locations with margin calculated with start sep n or margin inserted per day based on point pairs from start end n (below)\n;   - cell margins constant or based on number of days in a month (below)\n;   - days in a month calculated inline (below) or a separate variable\n;\n\n\n(def daysInAWeek 4!{1-15})\n(def weeksInAMonth 3!{1-12})\n(def edgeMargin 10)\n(def dayMargin (/ (/ 196 daysInAWeek) weeksInAMonth))\n\n(def left 91)\n(def right 468)\n(def backgroundColor 325)\n\n(def topBar\n  (let bounds @ [left top right bot] [left 71 right 125]\n    [ (rectangle backgroundColor 360 0 0 bounds) ]))\n\n; end points included as part of n\n(def nPointsBetween (\\(start end n)\n  (let sep (/ (- end start) (- n 1!))\n  (map (\\i (+ start (* i sep))) (zeroTo n)))))\n\n(def [paperTop paperBot] [143 435])\n\n(def xs (nPointsBetween (+ left edgeMargin) (- right edgeMargin) (+ 1! daysInAWeek)))\n(def ys (nPointsBetween (+ paperTop edgeMargin) (- paperBot edgeMargin) (+ 1! weeksInAMonth)))\n(def consecutiveXs (zip xs (drop xs 1)))\n(def consecutiveYs (zip ys (drop ys 1)))\n; Drop some days from beginning/end of month\n;\n; cartProd argument order is so that we drop from the first row rather than first column\n(def dayBounds\n  (let dropFirstN (round (* daysInAWeek 0.3!))\n  (let dropLastN (round (* daysInAWeek 0.3!))\n  (map reverse (dropEnd (drop (cartProd consecutiveYs consecutiveXs) dropFirstN) dropLastN)))))\n\n(def paper\n  (let bounds @ [left top right bot] [left paperTop right paperBot]\n    [ (rectangle backgroundColor 360 0 0 bounds) ]))\n\n(def days\n  (map\n    (\\[[left right] [top bot]]\n      (rectangle 479 360 0 0 [(+ left dayMargin) (+ top dayMargin) (- right dayMargin) (- bot dayMargin)]))\n    dayBounds))\n\n(blobs [\n  topBar\n  paper\n  days\n])\n';
var _user$project$ExamplesGenerated$pencilTip = '; Pencil Tip\n;\n; Had to hand code:\n;   - renamings\n;   - initial eraser path arcs\n;   - eraser path arc relations\n;   - co-linearity of graphite tip with shaved wood wedge\n;\n; Design decisions:\n;   - Parts horizonal parameters absolute (below) or offset from each other or relative to entire pencil width\n;   - Pencil vertically paramererized as top/bottom (below) or top/width or centerY/width\n;   - Pencil constituent rects left/right/top/bot (below) or x/y/w/h\n;   - Eraser left x, corner bend start x, corner radius dependency: bend start x on radius and left (below), left on radius and bend start x, or radius on left and bend start x.\n;   - Pencil wood left, wood top right corner, and tip x: wood top right corner on wood left, tip x, and ratio (below); tip x and wood corner top on wood left, wood right, and ratio; tip x on wood left and wood top right corner; tip x on tip angle, wood top right corner on ratio\n;\n\n(def eraserRight 134)\n(def [pencilTop pencilBot] [130 266])\n(def pencilCenterY (* 0.5! (+ pencilBot pencilTop)))\n\n(def eraser\n  (let [strokeColor strokeWidth color] [254 0 4]\n  (let cornerRadius 13\n  (let left 107\n  (let bendStartX (+ left cornerRadius)\n  (let d [\'M\' eraserRight pencilTop\n          \'L\' eraserRight pencilBot\n          \'L\' bendStartX pencilBot\n          \'A\' cornerRadius cornerRadius 0 0 1 left (- pencilBot cornerRadius)\n          \'L\' left (+ pencilTop cornerRadius)\n          \'A\' cornerRadius cornerRadius 0 0 1 bendStartX pencilTop\n          \'Z\']\n    [ (rawPath color strokeColor strokeWidth d 0) ]))))))\n\n(def ferrule_right 194)\n\n(def ferrule\n  (let bounds @ [left top right bot] [eraserRight pencilTop ferrule_right pencilBot]\n  (let color 458\n    [ (rectangle color 360 0 0 bounds) ])))\n\n(def body_right 334)\n\n(def body\n  (let bounds @ [left top right bot] [ferrule_right pencilTop body_right pencilBot]\n  (let color 43\n    [ (rectangle color 360 0 0 bounds) ])))\n\n(def tipRatio 0.3)\n(def tipRight 437)\n\n(def [woodRight tipTopY] (onLine [tipRight pencilCenterY] [body_right pencilTop] tipRatio))\n(def tipBotY (- (+ pencilBot pencilTop) tipTopY))\n\n(def wood\n  (let pts [[body_right pencilBot] [body_right pencilTop] [woodRight tipTopY] [woodRight tipBotY]]\n  (let [color strokeColor strokeWidth] [470 360 0]\n    [ (rawPolygon color strokeColor strokeWidth pts 0) ])))\n\n(def tip\n  (let pts [[woodRight tipBotY] [woodRight tipTopY] [tipRight pencilCenterY]]\n  (let [color strokeColor strokeWidth] [402 360 0]\n    [ (rawPolygon color strokeColor strokeWidth pts 0) ])))\n\n(blobs [\n  eraser\n  ferrule\n  body\n  wood\n  tip\n])\n';
var _user$project$ExamplesGenerated$balanceScale = '; Balance Scale\n;\n; After David Kurlander p568 in \"Watch What I Do: Programming by Demonstration\" Appendix B. 1993.\n;\n; Had to hand-code the arc.\n;\n; It\'s a reasonable goal to support the ability to draw out the\n; particular constraints that determine the placement of the weights.\n;\n; The mathematics for balancing the scale should probably\n; not be a goal for direct manipulation (for the time being).\n;\n; Design decisions:\n;   - Use polyline (below) or two lines for balance arms\n;   - Arm pivot y absolute (below) or relative to top of pillar or pillar top relative to pivot\n;   - Arms angle in degrees (below) or radians or specified as a distance to drop\n;   - Tray arc radius absolute (below) or a ratio of width\n;   - Each tray hung by two lines or one polyline (below)\n;\n\n\n(def [pillar_x base_cx] [276.5 308])\n(def [pillar_y base_cy] [145 497])\n\n\n(def base\n  (let [ rx ry] [ 95 29]\n  (let [color rot] [420 0]\n    [ (rawEllipse color 360 0 base_cx base_cy rx ry rot) ])))\n\n(def pillar\n  (let [ w h] [ (* 2! (- base_cx pillar_x)) (- base_cy pillar_y)]\n  (let [fill stroke strokeWidth] [41 245 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth pillar_x pillar_y w h rot) ]))))\n\n(def pivot@[px py] [base_cx 181])\n(def armsInnerAngle 2.7!{0-3.14159})\n(def halfArmsInnerAngle (/ armsInnerAngle 2!))\n(def armLength 200)\n(def trayHangHeight 218.00000000000003)\n(def [leftWeightWidth  leftWeightHeight]  [65 65{0-120}])\n(def [rightWeightWidth rightWeightHeight] [65{0-120} 65])\n(def leftWeightMass  (* leftWeightWidth  leftWeightHeight))\n(def rightWeightMass (* rightWeightWidth rightWeightHeight))\n(def totalMass (+ leftWeightMass rightWeightMass))\n; Where does the center of mass fall on the invisible line between the trays?\n; (0 = all the way left, 1 = all the way right)\n(def centerOfMassLeftRightRatio (/ rightWeightMass totalMass))\n\n(def threePiOverTwo (* 1.5! (pi)))\n(def arctan (\\theta (arctan2 theta 1!)))\n(def tan (\\theta (/ (sin theta) (cos theta))))\n\n; Per my hand calculations\n(def thetaMethod1\n  (arctan (* (- 1! (* 2! centerOfMassLeftRightRatio)) (tan halfArmsInnerAngle))))\n; Per http://stackoverflow.com/a/4451915 arctan[tan(phi)*(m1+m2)/(m1-m2)]\n(def thetaMethod2\n  (let phi (- halfPi halfArmsInnerAngle)\n  (- halfPi (arctan (/ (* (tan phi) totalMass) (- leftWeightMass rightWeightMass))))))\n; They give the same results, though the S.O. answer chooses the opposite arctan for some angles.\n(def theta thetaMethod1)\n\n\n(def [leftHangPt rightHangPt]\n  (let [leftArmAngle rightArmAngle] [(+ theta (- threePiOverTwo halfArmsInnerAngle))\n                                     (+ theta (+ threePiOverTwo halfArmsInnerAngle))]\n  (map (compose (vec2DPlus pivot) (vec2DScalarMult armLength))\n    [[(cos leftArmAngle)  (neg (sin leftArmAngle))]\n     [(cos rightArmAngle) (neg (sin rightArmAngle))]])))\n\n(def arms\n  (let pts [leftHangPt [base_cx 181] rightHangPt]\n  (let [color strokeColor strokeWidth] [\"none\" 430 30]\n    [ (addAttr (polyline color strokeColor strokeWidth pts) [\"stroke-linecap\" \"round\"]) ])))\n\n(def weight (\\(cx bot w h)\n  (let halfWidth (/ w 2!)\n  (let [left top right] [(- cx halfWidth) (- bot h) (+ cx halfWidth)]\n  (let color 275\n    [ (rectangle color 360 0 0 [left top right bot]) ])))))\n\n(def hangingTray (\\(hangPoint@[hangX hangY] weightWidth weightHeight)\n  (let [strokeColor strokeWidth fill] [380 4 52]\n  (let w 100\n  (let y (+ hangY trayHangHeight)\n  (let arcRadius 300\n  (let [left right] [(- hangX w) (+ hangX w)]\n  (let d [\"M\" left y \"L\" right y \"A\" arcRadius arcRadius 0 0 1 left y \"Z\"]\n    (concat [\n      [ (path fill strokeColor strokeWidth d) ]\n      [ (polyline \'none\' strokeColor strokeWidth [[left y] hangPoint [right y]]) ]\n      (weight hangX y weightWidth weightHeight)\n    ])))))))))\n\n(blobs [\n  base\n  pillar\n  arms\n  (hangingTray leftHangPt  leftWeightWidth  leftWeightHeight)\n  (hangingTray rightHangPt rightWeightWidth rightWeightHeight)\n])\n';
var _user$project$ExamplesGenerated$replaceTerminalsWithWorkstations = '; Replace Terminals With Workstations\n;\n; A Demo of Kurlander\'s graphical search and replace.\n; David Kurlander p573,pp275-277 in \"Watch What I Do: Programming by Demonstration\" Appendix B. 1993.\n;\n; Design decisions:\n;   - x y w h or left top right bot (below) for workstation display and pillar\n;   - how to encode the equalization of the centerpoints of the keyboard, pillar, and display (used \"Make Equal\" version 1 below)\n;   - how to parameterize the design into a function: x y (below) or x y size or left top right bot\n;   - whether to parameterize any other details (e.g. screen color)\n;   - how to implement the x y offset: map and add in each location (below) or prelude SVG translate function (not implemented yet)\n;\n\n\n(def terminal (\\(x y)\n  (let origin [x y]\n  (let offset (vec2DPlus origin) ; second point unapplied\n  (let body\n    (let pts [[-9 154] [76 166] [150 136] [146 14] [54 6] [36 15] [38 117]]\n    (let [color strokeColor strokeWidth] [454 360 2]\n      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))\n\n  (let keyboard\n    (let pts [[15 147] [46 124] [102 131] [69 154]]\n    (let [color strokeColor strokeWidth] [462 360 2]\n      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))\n\n  (let screen\n    (let pts [[55 88] [54 32] [108 38] [109 94]]\n    (let [color strokeColor strokeWidth] [103 360 2]\n      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))\n\n  (concat [ body keyboard screen ]))))))))\n\n\n(def workstation (\\(x y)\n  (let origin [x y]\n  (let offset (vec2DPlus origin) ; second point unapplied\n  (let [polygon14_pts_k4862 rect11_bounds_left rect11_bounds_right] [71 104 148]\n  (let k4859 (- (+ rect11_bounds_left rect11_bounds_right) polygon14_pts_k4862)\n  (let rect12_bounds_left 46\n  (let right\' (- (+ rect11_bounds_left rect11_bounds_right) rect12_bounds_left)\n\n  (let displayPillar\n    (let bounds @ [left top right bot] [(+ x rect11_bounds_left) (+ y 115) (+ x rect11_bounds_right) (+ y 151)]\n    (let color 364\n      [ (rectangle color 360 0 0 bounds) ]))\n\n  (let display\n    (let bounds @ [left top right bot] [(+ x rect12_bounds_left) (+ y 14) (+ x right\') (+ y 110)]\n    (let color 110\n      [ (rectangle color 360 15 0 bounds) ]))\n\n  (let keyboard\n    (let pts_k4861 150\n    (let pts_k4855 178\n    (let pts [[polygon14_pts_k4862 pts_k4861] [k4859 pts_k4861] [201 pts_k4855] [53 pts_k4855]]\n    (let [color strokeColor strokeWidth] [460 360 5]\n      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))))\n\n  (let mouseCord\n    (let [strokeColor strokeWidth color] [369 1 \'none\']\n    (let [x0 y0] [21 159]\n    (let d [\'M\' (+ x x0) (+ y y0) \'L\' (+ x 36) (+ y 144) \'L\' (+ x 69) (+ y 137) \'L\' (+ x 100) (+ y 134) \'L\' (+ x 133) (+ y 136)]\n      [ (rawPath color strokeColor strokeWidth d 0) ])))\n\n  (let mouseBody\n    (let pts [[-5 176] [12 158] [28 158] [18 177]]\n    (let [color strokeColor strokeWidth] [462 360 2]\n      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))\n\n  (let mouseButton\n    (let pts [[10 165] [14 161] [23 161] [18 166]]\n    (let [color strokeColor strokeWidth] [364 360 2]\n      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))\n\n  (concat [ displayPillar display keyboard mouseCord mouseBody mouseButton ])))))))))))))))\n\n(def terminalsOrWorkstations 0!{0-1})\n(def terminalOrWorkstation\n  (if (< terminalsOrWorkstations 0.5!) terminal workstation))\n\n(blobs [\n  (terminalOrWorkstation 0 0)\n  (terminalOrWorkstation 300 200)\n  (terminalOrWorkstation 200 300)\n  (terminalOrWorkstation 400 400)\n])\n';
var _user$project$ExamplesGenerated$kochSnowflake = '; Koch Snowflake\n;\n; Can be accomplished by graphical search and replace per\n; David Kurlander p556 in \"Watch What I Do: Programming by Demonstration\" Appendix B. 1993.\n;\n; What would have helped the creation of the implementation below\n; was some local view of a functions computation (onLine, normPt).\n; Might be nice to augment with program synthesis.\n;\n; Design decisions:\n;   - as patterns (below) or reconstructing points\n;   - manual calculation of dx dy (below) or use of prelude vec2DMinus function\n;   - draw as many lines or polyline or polygon (below) or path\n;   - edge math calculates the three subdivistion points (below) or uses vector addition and rotation functions like turtle graphics\n;   - repeated edge calls (below) or concatMap over list of points\n;   - The equation for edge width: 1/3 for each successive iteration (below) or constant\n;\n\n(def iterations 3!{0-4})\n; Each iteration is 1/3 the scale of the prior, so\n; we divide the line width by 3 on each iteration.\n(def [fill stroke width] [150 386 (/ 45 (pow 3! iterations))])\n\n; Point on normal of line, at `ratio` distance from the line\n; relative to line length.\n(def normPt (\\(pt1@[x1 y1] pt2@[x2 y2] ratio)\n  (let vec@[dx dy] [(- x2 x1) (- y2 y1)]\n  (vec2DPlus (vec2DScalarMult ratio [(neg dy) dx]) (midpoint pt1 pt2)))))\n\n; Recursive fractal edge.\n;\n; Returns list of points (except the last point)\n(defrec edge (\\(pt1@[x1 y1] pt2@[x2 y2] iterationsLeft)\n  (if (= 0 iterationsLeft)\n    [ pt1 ]\n    (let [thirdPt twoThirdsPt] [(onLine pt1 pt2 (/ 1 3!)) (onLine pt1 pt2 (/ 2 3!))]\n    (let outPt (normPt pt1 pt2 (* (/ 1 3!) (/ (sqrt 3!) 2!)))\n    (concat [ (edge pt1         thirdPt     (- iterationsLeft 1))\n              (edge thirdPt     outPt       (- iterationsLeft 1))\n              (edge outPt       twoThirdsPt (- iterationsLeft 1))\n              (edge twoThirdsPt pt2         (- iterationsLeft 1))\n            ]))))))\n\n; Points of initial equilateral triangle.\n(def [triPt1 triPt2 triPt3] (nPointsOnCircle 3! 0 300 300 200))\n\n(def snowflakePts\n  (concat [ (edge triPt1 triPt2 iterations)\n            (edge triPt2 triPt3 iterations)\n            (edge triPt3 triPt1 iterations)\n          ]))\n\n(def snowflake\n  [ (polygon fill stroke width snowflakePts) ])\n\n(blobs [\n  snowflake\n])\n';
var _user$project$ExamplesGenerated$gear = '; Gear\n;\n; Need fancier path tools to create the\n; cut out via direct manipulation.\n;\n; Need better DM to manipulate the design (parameter\n; control and better handling of rotation)\n;\n; Design decisions:\n;   - tip diameter absolute or offset from root diameter\n;   - points defined clockwise (below) or counterclockwise\n;   - how to add the lettered path commands between the points (good opportunity for PBE)\n;   - scope of unshared gear parameters, either local (below, mostly) or global\n;\n\n(def [cx cy] [200 200])\n(def [rootRadius tipRadius] [120 170])\n(def teethCount 9!{1-50})\n(def [botLandRatio topLandRatio] [0.45 0.25])\n(def rot 0)\n\n; direction controls whether points are clockwise or counterclockwise\n(def circlePathCmds (\\(cx cy r direction)\n  (let sweepFlag (if (= 1 direction) 1 0)\n  [\'M\' (+ cx (* direction r)) cy\n   \'a\' (* direction r) r 0 0 sweepFlag (* direction (neg r)) r\n   \'a\' (* direction r) r 0 0 sweepFlag (* direction (neg r)) (neg r)\n   \'a\' (* direction r) r 0 0 sweepFlag (* direction r) (neg r)\n   \'a\' (* direction r) r 0 0 sweepFlag (* direction r) r\n   \'z\'])))\n\n(def gearPts (\\(rotAngularRatioOffset r)\n  (let angularPitch (/ twoPi teethCount)\n  (reverse (nPointsOnCircle teethCount (+ rot (* angularPitch rotAngularRatioOffset)) cx cy r)))))\n\n; 0 degrees is centered on a tip\n(def topLeftPts  (gearPts (/ topLandRatio -2!) tipRadius))\n(def topRightPts (gearPts (/ topLandRatio  2!) tipRadius))\n(def botLeftPts  (gearPts (+ 0.5! (/ botLandRatio -2!)) rootRadius))\n(def botRightPts (gearPts (+ 0.5! (/ botLandRatio  2!)) rootRadius))\n\n; Now interleave all the points\n(def pathPts (concat (map4 (\\(pt1 pt2 pt3 pt4) [pt1 pt2 pt3 pt4]) topLeftPts topRightPts botLeftPts botRightPts)))\n\n(def pathCmds\n   (concat (intermingle (cons [\'M\'] (snoc [\'Z\'] (repeat (- (* 4! teethCount) 1!) [\'L\']))) pathPts)))\n\n(def gear\n  (let [strokeColor strokeWidth color] [372 5 352]\n    [ (rawPath color strokeColor strokeWidth (append pathCmds (circlePathCmds cx cy 50 -1!)) 0) ]))\n\n\n(blobs [\n  gear\n])\n';
var _user$project$ExamplesGenerated$ferris3 = '; Ferris Wheel 3\n;\n; Design decisions:\n;   - Which variables to make global vs. local\n;   - Ordering of cars/rim/spokes/hub\n;\n\n(def cx 230)\n(def cy 245)\n(def [r n rot] [137 5{0-20} 0.11{-3.2-3.2}])\n(def ferrisPoints (nPointsOnCircle n rot cx cy r))\n(def spokeWidth 3)\n(def [spokeColor hubColor] [0 382])\n(def [carColor leadCarColor] [50 100])\n\n(def rim\n  [(ring spokeColor spokeWidth cx cy r)])\n\n(def car (\\([x y] color)\n  (let [x y w h] [x y 43 44]\n    [ (rectByCenter color x y w h) ])))\n\n(def spoke (\\[x y]\n    [ (line spokeColor spokeWidth cx cy x y) ]))\n\n(def cars\n  (concat (mapi (\\[i pt] (car pt (if (= 0 i) leadCarColor carColor))) ferrisPoints)))\n\n(def spokes\n  (concatMap spoke ferrisPoints))\n\n(def hub\n  (let r 24\n    [ (rawCircle hubColor 360 0 cx cy r) ]))\n\n(blobs [\n  cars\n  spokes\n  rim\n  hub\n])\n';
var _user$project$ExamplesGenerated$conifer = '; Conifer\n;\n; This design is surprisingly difficult to code.\n;\n; Some notable decisions:\n;   - tree parameters global (below) or passed in to each function\n;   - tree height computed or given (below)\n;   - leaf separation absolute (below) or relative to leaf size\n;   - leaf separation measured as between respective points on consectutive leaves (below) or as space between leaves\n;   - branch start/end height on trunk absolute (below) or offset from base or a ratio\n;   - branch repetition start end sep (below) or start end n or start sep n\n;\n\n\n(defrec spaced (\\(start stop sep)\n  (let direction (sgn sep)\n  (if (< (* direction start) (* direction stop))\n    [start|(spaced (+ start sep) stop sep)]\n    []))))\n\n(def treeX 232)\n(def treeBot 375)\n(def treeHeight 301{1-500})\n(def treeTop (- treeBot treeHeight))\n(def [branchBot branchTop] [(- treeBot 25) (+ (- treeBot treeHeight) 15)])\n\n(def trunk\n  (let [baseY baseW] [treeBot 12]\n  (let halfBaseW (/ baseW 2!)\n  (let pts [[(- treeX halfBaseW) baseY]\n            [(+ treeX halfBaseW) baseY]\n            [treeX treeTop]]\n  (let [color strokeColor strokeWidth] [31 0 0]\n    [ (rawPolygon color strokeColor strokeWidth pts 0) ])))))\n\n\n; Draw this to maniplate how high the branches start/stop\n(def branchingLine\n  (let [color width] [280 5]\n    [ (line color width treeX branchBot treeX branchTop) ]))\n\n(def leaf (\\(cx cy)\n  (let [w h] [14 52]\n  (let [halfW halfH] [(/ w 2!) (/ h 2!)]\n  (let [left top right bot] [(- cx halfW) (- cy halfH) (+ cx halfW) (+ cy halfH)]\n  (let pts [[left cy] [cx bot] [right cy] [cx top]]\n  (let [color strokeColor strokeWidth] [127 0 0]\n    [ (rawPolygon color strokeColor strokeWidth pts 0) ])))))))\n\n(def branch (\\(baseY baseW length)\n  (let halfBaseW (/ baseW 2!)\n  (let pts [[treeX (- baseY halfBaseW)]\n            [treeX (+ baseY halfBaseW)]\n            [(+ treeX length) baseY]]\n  (let [color strokeColor strokeWidth] [31 0 0]\n    [ (rawPolygon color strokeColor strokeWidth pts 0) ])))))\n\n(def leafyBranch (\\(baseY baseW length leafSep)\n  (let halfLeafSep (/ leafSep 2!)\n  (let leaves (concatMap (\\x (leaf x baseY)) (spaced (- (+ treeX length) halfLeafSep) (+ treeX halfLeafSep) (neg leafSep)))\n  (concat [(branch baseY baseW length) leaves])))))\n\n(def side (\\direction\n  (let branchSep 38.5\n  (let leafSep (* direction 18)\n  (let drawLeafyBranch (\\y\n    (let lengthRatio (- 1! (/ (- treeBot y) treeHeight))\n    (leafyBranch y (* lengthRatio 30) (* direction (* lengthRatio 190)) leafSep)))\n  (concatMap drawLeafyBranch (spaced branchBot branchTop (neg branchSep))))))))\n\n(blobs [\n  trunk\n  (side 1!)\n  (side -1!)\n])\n';
var _user$project$ExamplesGenerated$xs = '; Xs\n;\n; After David Maulsby p591 in \"Watch What I Do: Programming by Demonstration\" Appendix B. 1993.\n;\n; Design decisions:\n;   - top left n boxWidth or top left w boxWidth or top left w n or cx cy n boxWidth (below) or cx cy r boxWidth or cx cy r n or BB boxWidth or BB n\n;   - boxes square or rectangular (relevant to several of the above)\n;   - n ∈ {1,2,3,4,...} (below) or n ∈ {1,3,5,7,...}\n;   - colors global (below) or per function call\n;\n\n(def x (\\(cx cy n boxWidth)\n  (let [centerColor descendingColor ascendingColor] [438 32 240]\n  (let square (\\(cx cy color)\n    [ (squareByCenter color cx cy boxWidth) ])\n  (let drawLevel (\\i\n    (if (= i 0)\n      (square cx cy centerColor)\n      (let offset (* i boxWidth)\n        (concat [(square (- cx offset) (- cy offset) descendingColor)\n                 (square (+ cx offset) (+ cy offset) descendingColor)\n                 (square (- cx offset) (+ cy offset) ascendingColor)\n                 (square (+ cx offset) (- cy offset) ascendingColor)]))))\n    (concatMap drawLevel (zeroTo n)))))\n  ))\n\n(blobs [\n  (x 200 250 3{1-6} 50)\n])\n\n';
var _user$project$ExamplesGenerated$target = '; Target\n;\n; Design decisions:\n;   - BB n or BB ringWidth or cx cy r n or cx cy n ringWidth (below) or cx cy r ringWidth\n;   - Inner circle radius absolute or relative to ringWidth (below)\n;\n\n(def target\n  (let circleCount 4{1-10}\n  (let concentricCircle (\\i\n    (let ringWidth 35\n    (let [cx cy r] [182 244 (+ (* 0.7 ringWidth) (* i ringWidth))]\n    (let colors [470 0]\n    (let color (nth colors (mod i 2))\n      [ (rawCircle color 360 0 cx cy r) ])))))\n\n  (concatMap concentricCircle (reverse (zeroTo circleCount))))))\n\n(blobs [\n  target\n])\n';
var _user$project$ExamplesGenerated$rails = '; Rails\n;\n; Make Equal helped set up the rails. The rest is basically hand-rolled.\n;\n; Design decisions:\n;   - Ties/rails encoded relative to rails (below) or to BB or to centerline\n;   - If encoded relative to rails, botRail y absolute (below) or offset from topRail y\n;   - Tie sep measured between left edges or between facing edges (below)\n;   - Tie count absolute (below) or relative to rail length or rail length relative to tie count\n;   - Tie start position absolute or based on sep (below)\n;   - Tie hangout absolue (below) or relative to rail offset or BB\n;\n\n\n(def railLength 331)\n(def railWidth 10)\n(def railStart 36)\n(def railFill 460)\n(def topRail_y 151)\n(def botRail_y 204)\n\n(def topRail\n  (let [stroke strokeWidth] [78 0]\n  (let rot 0\n    [ (rawRect railFill stroke strokeWidth railStart topRail_y railLength railWidth rot) ])))\n\n(def botRail\n  (let [stroke strokeWidth] [78 0]\n  (let rot 0\n    [ (rawRect railFill stroke strokeWidth railStart botRail_y railLength railWidth rot) ])))\n\n(def ties\n  (let tie (\\i\n    (let w 12\n    (let sep 20.98947368421053\n    (let sepw (+ sep w)\n    (let x (+ (+ railStart (/ sep 2!)) (* i sepw))\n    (let hangout 12\n    (let y (- topRail_y hangout)\n    (let h (+ (+ (- botRail_y topRail_y) railWidth) (* 2! hangout))\n    (let [fill stroke strokeWidth] [39 85 0]\n    (let rot 0\n      [ (rawRect fill stroke strokeWidth x y w h rot) ]))))))))))\n  (concatMap tie (zeroTo 10))))\n\n(blobs [\n  ties\n  topRail\n  botRail\n])\n';
var _user$project$ExamplesGenerated$ladder = '; Ladder\n;\n; After Cheema, Gulwani, and LaViola \"QuickDraw: Improving Drawing Experience for Geometric Diagrams\" CHI 2012.\n; mentioned as originally from an math text\n;\n; Repetition and best implementation of vertical constraint done by hand.\n;\n; Design decisions:\n;   - Linear repetition specification (start sep n (below); start end n; start end sep)\n;   - Ladder bottom: absolute (below) or offset from last rung\n;   - If last rung endpoint specified: absolute or relative to ladder height or offset from ladder bottom\n;\n\n\n(def leftPost_y1 121)\n(def leftPost_y2 250)\n(def leftPost_x1 97)\n(def rightPost_x1 207)\n(def color 130)\n(def width 7)\n(def n 4{1-15})\n\n(def leftPost\n    [ (line color width leftPost_x1 leftPost_y1 leftPost_x1 leftPost_y2) ])\n\n(def rightPost\n    [ (line color width rightPost_x1 leftPost_y1 rightPost_x1 leftPost_y2) ])\n\n(def rungs\n    (def rung (\\i\n    (let y (+ leftPost_y1 (* i 27.666666666666668))\n        [(line color width leftPost_x1 y rightPost_x1 y) ])))\n    (concatMap rung (zeroTo n)))\n\n(blobs [\n  leftPost\n  rightPost\n  rungs\n])\n';
var _user$project$ExamplesGenerated$mondrianArch = '; Mondrian Arch\n;\n; After Henry Lieberman p554 in \"Watch What I Do: Programming by Demonstration\" Appendix B. 1993.\n;\n; Can be done with tools as of UIST 2016, but\n; parameterization is not anywhere near optimal.\n;\n; Below is hand-rolled (some digging).\n;\n; Design decisions:\n;   - Pillars relative to BB or relative to lintel (below: relative to lintel)\n;   - x/y/w/h or BB for lintel (below: x/y/w/h)\n;   - Pillar width: same as lintel or relative to BB width (below: same as lintel)\n;\n\n; Get the following with vanilla \"Make Equal\":\n;\n; (def [rect3_y rect2_x rect3_w rect4_x] [161 105 170 222])\n; (def rect2_y (+ (- (+ rect2_x rect3_w) rect4_x) rect3_y))\n; (def rect2_h 148)\n;\n; (def rect2\n;   (let w (- rect2_y rect3_y)\n;   (let [fill stroke strokeWidth] [211 381 0]\n;   (let rot 0\n;     [ (rawRect fill stroke strokeWidth rect2_x rect2_y w rect2_h rot) ]))))\n;\n; (def rect3\n;   (let h (- rect2_y rect3_y)\n;   (let [fill stroke strokeWidth] [344 444 0]\n;   (let rot 0\n;     [ (rawRect fill stroke strokeWidth rect2_x rect3_y rect3_w h rot) ]))))\n;\n; (def rect4\n;   (let w (- (+ rect2_x rect3_w) rect4_x)\n;   (let [fill stroke strokeWidth] [117 391 0]\n;   (let rot 0\n;     [ (rawRect fill stroke strokeWidth rect4_x rect2_y w rect2_h rot) ]))))\n;\n; (blobs [\n;   rect2\n;   rect3\n;   rect4\n; ])\n;\n\n(def [lintel_x lintel_y lintel_w lintel_h] [76 146 145 42])\n(def lintelBot (+ lintel_y lintel_h))\n(def pillarHeight 198)\n\n(def leftPillar\n  (let [x y w h] [lintel_x lintelBot lintel_h pillarHeight]\n  (let [fill stroke strokeWidth] [352 352 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x y w h rot) ]))))\n\n(def lintel\n  (let [fill stroke strokeWidth] [218 218 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth lintel_x lintel_y lintel_w lintel_h rot) ])))\n\n(def rightPillar\n  (let [x y w h] [(- (+ lintel_x lintel_w) lintel_h) lintelBot lintel_h pillarHeight]\n  (let [fill stroke strokeWidth] [146 146 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x y w h rot) ]))))\n\n(blobs [\n  leftPillar\n  lintel\n  rightPillar\n])\n\n';
var _user$project$ExamplesGenerated$batteryDynamic = '; Battery (Dynamic)\n;\n; Still need tools for reordering shapes.\n;\n; Design decisions:\n;   - battery body made from four rectangles or one path with a hole or one polyline (below)\n;   - body x/y/w/h or left/top/right/bot (below)\n;   - charge bar x/y/w/h or left/top/right/bot (below)\n;   - calculate inner bounds as a variable (below) or inline\n;   - calculate inner width as a variable (below) or inline\n;   - w/h of tip absolute (below) or relative to body\n;   - if abstracted, BB or x/y/w/h parameterization\n;\n\n\n(def chargePercentage 20{0-100})\n(def bodyTop 117)\n(def bodyBot 204)\n(def bodyRight 273)\n(def centerY (/ (+ bodyTop bodyBot) 2!))\n(def bodyLeft 90)\n(def bodyOutlineWidth 18{0-50})\n(def halfOutlineWidth (/ bodyOutlineWidth 2!))\n(def mainColor 360)\n\n(def bodyOutline\n  (let pts [[bodyLeft bodyTop] [bodyRight bodyTop] [bodyRight bodyBot] [bodyLeft bodyBot]]\n    [ (addAttr (polygon \'none\' mainColor bodyOutlineWidth pts) [\"stroke-linejoin\" \"round\"]) ]))\n\n(def tip\n  (let h 52\n  (let [y w] [ (- centerY (/ h 2!)) 38]\n  (let [stroke strokeWidth] [368 0]\n  (let rot 0\n    [ (rawRect mainColor stroke strokeWidth bodyRight y w h rot) ])))))\n\n(def [innerLeft innerTop innerRight innerBot]\n  [(+ bodyLeft halfOutlineWidth)\n   (+ bodyTop halfOutlineWidth)\n   (- bodyRight halfOutlineWidth)\n   (- bodyBot halfOutlineWidth)])\n(def innerWidth (- innerRight innerLeft))\n\n(def chargeBar\n  (let bounds @ [left top right bot] [innerLeft innerTop (+ innerLeft (/ (* innerWidth chargePercentage) 100!)) innerBot]\n  (let [drainedColor color fullColor] [0 mainColor 113]\n  (let color (if (le chargePercentage 20) drainedColor (if (ge chargePercentage 99) fullColor mainColor))\n    [ (rectangle color 360 0 0 bounds) ]))))\n\n(blobs [\n  bodyOutline\n  tip\n  chargeBar\n])\n';
var _user$project$ExamplesGenerated$battery = '; Battery\n;\n; After Bernstein and Li \"Lillicon\" 2015.\n;\n; Can be done with tools as of UIST 2016 (minus abstaction), but\n; parameterization is backward; want tip x and y to be dependent but\n; the Make Equal defaults to making x and h dependent (as below).\n;\n; Design decisions:\n;   - w/h of tip absolute or relative to body\n;   - if abstracted, BB or x/y/w/h parameterization\n;\n\n(def [body_w body_x] [147 103])\n(def [tip_y body_h body_y] [223 84 201])\n(def fill 362)\n\n(def body\n  (let [ stroke strokeWidth] [ 250 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth body_x body_y body_w body_h rot) ])))\n\n(def tip\n  (let [x w h] [(+ body_x body_w) 19 (* 2! (- (+ body_y (* 0.5! body_h)) tip_y))]\n  (let [ stroke strokeWidth] [ 182 0]\n  (let rot 0\n    [ (rawRect fill stroke strokeWidth x tip_y w h rot) ]))))\n\n(blobs [\n  body\n  tip\n])\n';
var _user$project$ExamplesGenerated$rectangleTrisection = '; Rectangle Trisection\n;\n; After Alan Turranksy p566 in \"Watch What I Do: Programming by Demonstration\" Appendix B. 1993.\n;\n; Straightforward with tools as of UIST 2016, but\n; does require a \"Dig Hole\" to type in \"(/ rect1_w 3)\"\n;\n; To further abstract (as below) requires manual labor (not a bounding box)\n;\n\n(def rectTrisection (\\(x y w h)\n  (def rect1\n    (let [fill stroke strokeWidth] [365 365 0]\n    (let rot 0\n      [ (rawRect fill stroke strokeWidth x y w h rot) ])))\n\n  (def rect2\n    (let [fill stroke strokeWidth] [175 175 0]\n    (let rot 0\n      [ (rawRect fill stroke strokeWidth x y (/ w 3) h rot) ])))\n\n  (concat [rect1 rect2])\n))\n\n\n(blobs [\n  (rectTrisection 91 181 347 177)\n])\n';
var _user$project$ExamplesGenerated$coffee_UIST = '\n(def mug (\\(outer_color strokeWidth3280 color strokeWidth3239 strokeColor strokeWidth3142 x0 y0 [left top right bot])\n  (def bounds [left top right bot])\n  (def rFrac 0.2!)\n  (def [outer_right outer_left] [ (scaleBetween left right 1)(scaleBetween left right 0.3575757575757576)])\n  (def outer_x_radius (/ (- outer_right outer_left) 2!))\n  (def [rect3_top outer_bot outer_top] [ (scaleBetween top bot 0.3620689655172414) (scaleBetween top bot 0.9224137931034483) (scaleBetween top bot 0.4396551724137931)])\n  (def outer_ellipseRY (/ (- outer_bot outer_top) 2!))\n\n  (def outer\n    (let bounds [outer_left outer_top outer_right outer_bot]\n    (let [ strokeColor strokeWidth] [ \'black\' strokeWidth3280]\n      [ (oval outer_color strokeColor strokeWidth bounds) ])))\n\n  (def inner\n    (let [left top right bot] [(+ outer_left (* rFrac outer_x_radius)) (+ outer_top (* rFrac outer_ellipseRY)) (- outer_right (* rFrac outer_x_radius)) (- outer_bot (* rFrac outer_ellipseRY))]\n    (let bounds [left top right bot]\n    (let [color strokeColor strokeWidth] [color \'black\' strokeWidth3239]\n      [ (oval color strokeColor strokeWidth bounds) ]))))\n\n  (def rect3\n    (let [left right bot] [(scaleBetween left right 0) (+ (+ outer_left (* 0.1! (- outer_right outer_left))) (* 0.5! (- (- outer_right (* 0.1! (- outer_right outer_left))) (+ outer_left (* 0.1! (- outer_right outer_left)))))) (* 2! (- (+ (+ outer_top (* 0.1! (- outer_bot outer_top))) (* 0.5! (- (- outer_bot (* 0.1! (- outer_bot outer_top))) (+ outer_top (* 0.1! (- outer_bot outer_top)))))) (* 0.5! rect3_top)))]\n    (let bounds [left rect3_top right bot]\n      [ (rectangle outer_color \'black\' 0 0 bounds) ])))\n\n  (def steam (\\(left top right bot)\n    (let bounds [left top right bot]\n    (let [strokeColor strokeWidth color] [strokeColor strokeWidth3142 \'white\']\n    (let dPcts [\'M\' x0 y0 \'C\' 0 0.4925373134328358? 0.8076923076923077? 0.6119402985074627? 0.4230769230769231? 1 \'C\' 1 0.7313432835820896? 0.4230769230769231? 0.6417910447761194? x0 y0]\n      [ (stretchyPath bounds color strokeColor strokeWidth dPcts) ])))))\n\n  [ (group bounds (concat [ outer inner rect3 (steam(scaleBetween left right 0.012121212121212121) (scaleBetween top bot 0.02586206896551724) (scaleBetween left right 0.1696969696969697) (scaleBetween top bot 0.3146551724137931)) (steam(scaleBetween left right 0.2606060606060606) (scaleBetween top bot 0) (scaleBetween left right 0.41818181818181815) (scaleBetween top bot 0.28879310344827586)) (steam(scaleBetween left right 0.5212121212121212) (scaleBetween top bot 0.02586206896551724) (scaleBetween left right 0.6787878787878788) (scaleBetween top bot 0.3146551724137931)) ])) ]))\n\n(blobs [\n  (withBounds [27 27 192 259] (mug 164 0 481 0 102 5 0.8846153846153846? 0))\n  (withBounds [299 214 406 322] (mug 164 0 481 0 102 5 0.8846153846153846? 0))\n  (withBounds [143 380 193 442] (mug 164 0 481 0 102 5 0.8846153846153846? 0))\n])\n\n';
var _user$project$ExamplesGenerated$botanic_UIST = '\n(def newGroup4 (\\(leftLeaf_strokeWidth leftLeaf_color leftLeaf_strokeColor leftLeaf_dPcts_k3164 leftLeaf_dPcts_k3166 centerLeftPct leftRightPct leftTopPct leftMidPct x03451 y03450 x03401 y03400 y03344 dPcts_k3058 [left top right bot])\n  (def bounds [left top right bot])\n  (def centerRightPct (- 1! centerLeftPct))\n  (def rightLeftPct (- 1! leftRightPct))\n  (def rightTopPct (- 1! leftTopPct))\n  (def rightMidPct (- 1! leftMidPct))\n\n  (def leftLeaf\n    (let k3186 0!\n    (let [left top right bot] [ left (scaleBetween top bot k3186) (scaleBetween left right leftRightPct) bot]\n    (let bounds [left top right bot]\n    (let [x0 y0] [x03451 y03450]\n    (let dPcts [\'M\' x0 y0 \'Q\' leftMidPct leftLeaf_dPcts_k3166 0 leftLeaf_dPcts_k3164 \'Q\' leftTopPct 0 x0 y0]\n      [ (stretchyPath bounds leftLeaf_color leftLeaf_strokeColor leftLeaf_strokeWidth dPcts) ]))))))\n\n  (def rightLeaf\n    (let k3132 1!\n    (let [left top right bot] [ (scaleBetween left right rightLeftPct) top right (scaleBetween top bot k3132)]\n    (let bounds [left top right bot]\n    (let [x0 y0] [x03401 y03400]\n    (let dPcts [\'M\' x0 y0 \'Q\' rightMidPct leftLeaf_dPcts_k3166 1 leftLeaf_dPcts_k3164 \'Q\' rightTopPct 0 x0 y0]\n      [ (stretchyPath bounds leftLeaf_color leftLeaf_strokeColor leftLeaf_strokeWidth dPcts) ]))))))\n\n  (def centerLeaf\n    (let [left top right bot] [ (scaleBetween left right centerLeftPct) (scaleBetween top bot 0.1166930482692767) (scaleBetween left right centerRightPct) (scaleBetween top bot 0.6433647887474833)]\n    (let bounds [left top right bot]\n    (let [x0 y0] [0.5! y03344]\n    (let dPcts [\'M\' x0 y0 \'L\' 0 dPcts_k3058 \'Q\' 0.5! 0 1 dPcts_k3058 \'Z\']\n      [ (stretchyPath bounds leftLeaf_color leftLeaf_strokeColor leftLeaf_strokeWidth dPcts) ])))))\n\n  [ (group bounds (concat [ leftLeaf rightLeaf centerLeaf ])) ]))\n\n(blobs [\n  (withBounds [56 45.523358950223596 512 495] (newGroup4 4 100 431 0.4693710270993644? 0.3959689822652434? 0.35053185358677735 0.47858611976259036 0.44362108479755546 0.5977244375980417 1 1 0 1 1 0.3407539747046014?))\n])\n\n';
var _user$project$ExamplesGenerated$sns_revisited_UIST = '\n; Try deleting the five helper circles from the main expression.\n\n(def [polygon6_top polygon5_left polygon6_right] [69 92 296])\n(def helper_r 27.5)\n(def polygon7_bot (+ (+ (* 0.5! (+ polygon6_top polygon6_top)) (* 0.5! (- (* 0.5! (+ polygon6_right polygon6_right)) (* 0.5! (+ polygon5_left polygon5_left))))) (* 0.5! (- (* 0.5! (+ polygon6_right polygon6_right)) (* 0.5! (+ polygon5_left polygon5_left))))))\n(def k3105 (/ (- (+ (- polygon6_right helper_r) (* 0.5! (+ (+ (- polygon6_right helper_r) (* 2! helper_r)) (- helper_r polygon6_right)))) (+ (+ (- polygon5_left helper_r) (* 0.5! (+ (+ (- polygon5_left helper_r) (* 2! helper_r)) (- helper_r polygon5_left)))) (* 0.5! (+ (+ (- polygon5_left helper_r) (* 2! helper_r)) (- helper_r polygon5_left))))) (- polygon6_right (+ (+ (- polygon5_left helper_r) (* 0.5! (+ (+ (- polygon5_left helper_r) (* 2! helper_r)) (- helper_r polygon5_left)))) (* 0.5! (+ (+ (- polygon5_left helper_r) (* 2! helper_r)) (- helper_r polygon5_left)))))))\n(def polygon7_top (- (* 0.5! (+ (- polygon7_bot helper_r) (- polygon6_top (+ (- 0! (+ helper_r helper_r)) (* 0.5! (+ (+ (- 0! (+ helper_r helper_r)) (* 2! helper_r)) (+ helper_r helper_r))))))) (+ (- 0! (+ helper_r helper_r)) (* 0.5! (+ (+ (- 0! (+ helper_r helper_r)) (* 2! helper_r)) (+ helper_r helper_r))))))\n(def [polygon5_right k3038] [(- (* 0.5! (+ (+ (+ (- polygon5_left helper_r) (* 0.5! (+ (+ (- polygon5_left helper_r) (* 2! helper_r)) (- helper_r polygon5_left)))) helper_r) (- polygon6_right helper_r))) helper_r) (- (+ (- polygon5_left helper_r) (* 0.5! (+ (+ (- polygon5_left helper_r) (* 2! helper_r)) (- helper_r polygon5_left)))) helper_r)])\n(def k3061 (/ (- (+ polygon5_right helper_r) (+ (+ k3038 helper_r) helper_r)) (- (- polygon6_right helper_r) (+ (+ k3038 helper_r) helper_r))))\n(def polygon6_bot (- (+ (- polygon7_bot helper_r) (* 0.5! (+ (+ (- polygon7_bot helper_r) (* 2! helper_r)) (- helper_r polygon7_bot)))) helper_r))\n(def k3063 (/ (- (+ polygon6_bot helper_r) polygon7_top) (- polygon7_bot polygon7_top)))\n(def k3034 (- polygon6_right helper_r))\n(def polygon5_top (- polygon6_top (+ (- 0! (+ helper_r helper_r)) (* 0.5! (+ (+ (- 0! (+ helper_r helper_r)) (* 2! helper_r)) (+ helper_r helper_r))))))\n(def k3103 (/ (- (+ (- polygon5_top (+ helper_r helper_r)) (* 0.5! (+ (+ (- polygon5_top (+ helper_r helper_r)) (* 2! helper_r)) (- (+ helper_r helper_r) polygon5_top)))) polygon6_top) (- polygon6_bot polygon6_top)))\n(def [k3041 polygon5_bot] [(- polygon7_top (+ helper_r helper_r)) (- polygon7_bot helper_r)])\n(def k3134 (/ (- (+ k3041 helper_r) polygon5_top) (- polygon5_bot polygon5_top)))\n(def k3045 (- polygon5_top (+ helper_r helper_r)))\n(def k3046 (- polygon5_left helper_r))\n(def k3141 (/ (- (+ k3038 helper_r) polygon5_left) (- polygon5_right polygon5_left)))\n\n(def helper (\\(left top)\n  (let [left top] [left top]\n  (let bounds [left top (+ left (* 2! helper_r)) (+ top (* 2! helper_r))]\n  (let [color strokeColor strokeWidth] [394 \'black\' 0]\n    [ (oval color strokeColor strokeWidth bounds) ])))))\n\n(def polygon5\n  (let bounds [polygon5_left polygon5_top polygon5_right polygon5_bot]\n  (let [color strokeColor strokeWidth] [261 \'black\' 2]\n  (let pcts [[k3141 1] [0 0] [1 k3134]]\n    [ (stretchyPolygon bounds color strokeColor strokeWidth pcts) ]))))\n\n(def polygon6\n  (let left (+ (+ (- polygon5_left helper_r) (* 0.5! (+ (+ (- polygon5_left helper_r) (* 2! helper_r)) (- helper_r polygon5_left)))) (* 0.5! (+ (+ (- polygon5_left helper_r) (* 2! helper_r)) (- helper_r polygon5_left))))\n  (let bounds [left polygon6_top polygon6_right polygon6_bot]\n  (let [color strokeColor strokeWidth] [132 \'black\' 2]\n  (let pcts [[0 k3103] [k3105 0] [1 1]]\n    [ (stretchyPolygon bounds color strokeColor strokeWidth pcts) ])))))\n\n(def polygon7\n  (let [left right] [(+ (+ k3038 helper_r) helper_r) (- polygon6_right helper_r)]\n  (let bounds [left polygon7_top right polygon7_bot]\n  (let [color strokeColor strokeWidth] [334 \'black\' 2]\n  (let pcts [[0 1] [1 k3063] [k3061 0]]\n    [ (stretchyPolygon bounds color strokeColor strokeWidth pcts) ])))))\n\n(def circle8\n  (let [left top r] [(* 0.5! (+ polygon5_left polygon5_left)) (* 0.5! (+ polygon6_top polygon6_top)) (* 0.5! (- (* 0.5! (+ polygon6_right polygon6_right)) (* 0.5! (+ polygon5_left polygon5_left))))]\n  (let bounds [left top (+ left (* 2! r)) (+ top (* 2! r))]\n  (let [color strokeColor strokeWidth] [405 \'black\' 0]\n    [ (oval color strokeColor strokeWidth bounds) ]))))\n\n(blobs [\n  (helper k3046 k3045)\n  (helper polygon5_right k3041)\n  (helper k3038 polygon5_bot)\n  (helper k3034 polygon6_bot)\n  polygon5\n  polygon6\n  polygon7\n  circle8\n])\n\n';
var _user$project$ExamplesGenerated$sns_UIST = '\n(def newGroup4 (\\(line2_width line2_color color [left top right bot])\n  (def bounds [left top right bot])\n\n  (def rect1\n    (let bounds [left top right bot]\n      [ (rectangle color \'black\' \'0\' 0 bounds) ]))\n\n  (def line2\n      [ (line line2_color line2_width left top right bot) ])\n\n  (def line3\n    (let [ x2 y2] [ (* 0.5! (+ left right)) (* 0.5! (+ top bot))]\n      [ (line line2_color line2_width left bot x2 y2) ]))\n\n  [ (group bounds (concat [ rect1 line2 line3 ])) ]))\n\n(blobs [\n  (withBounds [31 100 216 269] (newGroup4 5 202 60))\n])\n\n';
var _user$project$ExamplesGenerated$snsLogoWheel = '\n(def logo (\\(rectColor\n             lineColor lineWidth\n             width height\n             rot\n             topLeft@[left top])\n\n  (def botRight@[right bot] [(+ left width) (+ top height)])\n\n  (def rect1\n    (rawRect rectColor 360 0 left top width height rot))\n\n  (def line2\n    (line lineColor lineWidth left top right bot))\n\n  (def line3\n    (lineBetween lineColor lineWidth\n      [left bot]\n      (midpoint topLeft botRight)))\n\n  [ rect1 line2 line3 ]))\n\n(def wheel (\\(n\n              spokeLen spokeColor spokeWidth\n              logoSize logoColor1 logoColor2 logoLineWidth\n              hubRadius\n              rot center@[cx cy])\n\n  (def cars\n    (let car_i (\\[x y]\n      (let cx (- x (/ logoSize 2!))\n      (let cy (- y (/ logoSize 2!))\n        (logo logoColor1 logoColor2 logoLineWidth logoSize logoSize 0 [cx cy]))))\n    (radialArray n spokeLen rot car_i center)))\n\n  (def spokes\n    (let spoke_i (\\endpoint\n      [(lineBetween spokeColor spokeWidth center endpoint)])\n    (radialArray n spokeLen rot spoke_i center)))\n\n  (def hub\n    [(ring spokeColor spokeWidth cx cy hubRadius)])\n\n  (concat [ spokes cars hub ])\n))\n\n(blobs [\n  (wheel\n    (let n 16{1-30} n)\n    100 420 2\n    30 100 200 3\n    20\n    0\n    ([150 150] : Point)\n  )\n])\n\n';
var _user$project$ExamplesGenerated$cyclingAssociation0 = '\n; http://www.awwwards.com/gallery/4433/99-creative-logo-designs-for-inspiration/\n\n(def equiTriAt (\\(cx cy color sideLen rot)\n  (let len1 (* sideLen (/ 2! 3!))\n  (let len2 (* sideLen (/ 1! 3!))\n  (let point (circle color cx cy 15!)\n  (let tri (nStar \'none\' color 10! 3! len1 len2 rot [cx cy])\n  [tri (ghost point)]\n))))))\n\n\n(def logo (\\(cx0 cy0\n             wheelRadius wheelDistance\n             armPct\n             wheelCapSize\n             [logoColor logoStrokeWidth])\n\n  (def helper\n    (ghosts (equiTriAt cx0 cy0 60 wheelDistance 0!)))\n\n  (def [ snap1 _ snap2 _ snap3 | _ ]\n    (polygonPoints (hd helper)))\n\n  (def onePiece (\\([cx cy] rot)\n\n    (def wheel\n      (rawCircle \'none\' logoColor logoStrokeWidth cx cy wheelRadius))\n\n    (def arm\n      (let armLength (* armPct wheelDistance)\n      (let dx (* armLength (cos (/ (pi) 3!)))\n      (let dy (* armLength (sin (/ (pi) 3!)))\n      (let d [\'M\' cx cy \'L\' (+ cx dx) (- cy dy) \'L\' (+ cx 8) (- cy dy)]\n        (rawPath \'none\' logoColor logoStrokeWidth d 0))))))\n\n    (def cap\n      (rawCircle logoColor 360 0 cx cy wheelCapSize))\n\n    [wheel (rotateAround rot cx cy arm) cap]\n  ))\n\n  ; TODO use a triangle function that doesn\'t draw center\n  (def midTriangle\n    ; slightly less than 0.50 to keep room for width of stroke\n    (equiTriAt cx0 cy0 logoColor (* 0.42! wheelDistance) (pi)))\n\n  (concat [\n    (onePiece snap2 0)\n    (onePiece snap1 120)\n    (onePiece snap3 240)\n    midTriangle\n    helper\n  ])\n))\n\n(blobs [\n  (logo 167 182 49 156.42857142857147 0.7 9 [416 9])\n])\n\n';
var _user$project$ExamplesGenerated$horrorFilms0 = '\n; http://www.awwwards.com/gallery/4453/99-creative-logo-designs-for-inspiration/\n\n(def equiTriAt (\\([cx cy] color sideLen rot)\n  (let len1 (* sideLen (/ 2! 3!))\n  (let len2 (* sideLen (/ 1! 3!))\n  (let point (circle color [cx cy] 15!)\n  (let tri (nStar \'none\' color 10! 3! len1 len2 rot [cx cy])\n  [tri point]\n))))))\n\n(def horror (\\([cx0 cy0] bgColor fgColor rBig rSmall sep)\n\n  (def helper\n    (ghosts (equiTriAt [cx0 cy0] 60 sep (pi))))\n\n  (def [ snap3 _ snap2 _ snap1 | _ ]\n    (polygonPoints (hd helper)))\n\n  (def backgroundCircle\n    [ (rawCircle bgColor 360 0 [cx0 cy0] rBig) ])\n\n  (def foregroundCircle (\\[cx cy]\n    [ (rawCircle fgColor 360 0 [cx cy] rSmall) ]))\n\n  (concat [\n    backgroundCircle\n    (foregroundCircle snap1)\n    (foregroundCircle snap2)\n    (foregroundCircle snap3)\n    helper\n  ])\n))\n\n(blobs [\n  (horror [220 250] 390 499 172 47 139)\n])\n\n';
var _user$project$ExamplesGenerated$blank = 'svg (concat [\n])\n\n';
var _user$project$ExamplesGenerated$spiralSpiralGraph = '; Spiral Spiral-Graph\n; Somewhat like the Spirograph toy, but based on a circle\n; following a spiral rather than a circle in a circle.\n\n(def n 140{1-200})\n(def revs 4{0-20})\n(def innerRevsRatio 2{0-20})\n(def innerR 125{0-500})\n\n(def placeCircle (\\i\n  (let spiralRadius 200\n  (let radius (* spiralRadius (/ i (- n 1)))\n  (let theta (* (* (/ i (- n 1)) (* 2 (pi))) revs)\n  (let innerTheta (* (* (* (/ i (- n 1)) (* 2 (pi))) innerRevsRatio) revs)\n  (let x (+ (+ (+ spiralRadius 150) (* radius (cos theta))) (* innerR (cos innerTheta)))\n  (let y (+ (+ (+ spiralRadius 250) (* radius (sin theta))) (* innerR (sin innerTheta)))\n    (circle i x y 10)\n  ))))))\n))\n\n(def theCircles (map placeCircle (range 1 n)))\n\n(svg theCircles)\n';
var _user$project$ExamplesGenerated$roundedRect = '\n(def roundedRect (\\(fill x y w h rxSeed rySeed)\n  (let off 20!\n  (let [wHalf hHalf] [(/ w 2!) (/ h 2!)]\n  (let [rx rxSlider] (hSlider true x (+ x wHalf) (- y off) 0! wHalf \'\' rxSeed)\n  (let [ry rySlider] (vSlider true y (+ y hHalf) (- x off) 0! hHalf \'\' rySeed)\n  (concat [\n    [ (consAttr (consAttr (rect fill x y w h) [\'rx\' rx]) [\'ry\' ry]) ]\n    rxSlider\n    rySlider\n  ])))))))\n\n(svg (concat [\n  [(rect \'black\' 0 0 0 0)] ; TODO remove dummy\n  (roundedRect 150 100 100 80 200 10 20)\n]))\n\n';
var _user$project$ExamplesGenerated$zones = '(def ngon (\\(n cx cy len1 len2)\n  (let dangle (/ (* 3! (pi)) 2!)\n  (let anglei (\\i (+ dangle (/ (* i (* 2! (pi))) n)))\n  (let xi     (\\i (+ cx (* len1 (cos (anglei i)))))\n  (let yi     (\\i (+ cy (* len2 (sin (anglei i)))))\n  (let pti    (\\i [(xi i) (yi i)])\n  (let pts    (map pti (list0N (- n 1!)))\n    (polygon \'goldenrod\' \'none\' 4 pts)))))))))\n\n(svg [\n  (rect \'goldenrod\' 32 170 109 132)\n  (ellipse \'goldenrod\' 203 237 32 68)\n  (ngon 5 464{200-600} 240{100-300} 60 60)\n  (path_ [\'M\' 261 250 \'Q\' 316.5 306 307 231 \'C\' 317 179 341 256 366 188 \'T\' 380 274])\n])\n\n';
var _user$project$ExamplesGenerated$floralLogo2 = '(def ringParameters [\n  ; petalSize petalRotation ringRadius ringRotation\n  [ 76{0-300} -0.266{-3.2-3.2}  -12{-100-300}   0.128{-3.2-3.2}]\n  [ 52{0-300} -0.317{-3.2-3.2}   60{-100-300}  -0.320{-3.2-3.2}]\n  [ 38{0-300} -0.629{-3.2-3.2}  104{-100-300}  -0.570{-3.2-3.2}]\n])\n\n(def rotatePointAround (\\(relX relY aroundX aroundY theta orientation)\n  (let relY (* orientation relY)\n  (let [rotRelX rotRelY] [(- (* relX (cos theta)) (* relY (sin theta))) (+ (* relX (sin theta)) (* relY (cos theta)))]\n    [(+ rotRelX aroundX) (+ rotRelY aroundY)]\n  ))\n))\n\n;(x + yi)(cosθ + isinθ) = xcosθ + ixsinθ + iycosθ - ysinθ\n;= (xcosθ - ysinθ) + (xsinθ + ycosθ)i\n\n(def petal (\\(x y scale theta orientation)\n  (let [[x1 y1]     [x2 y2]    ] [(rotatePointAround (* 1 scale) 0              x y theta orientation) (rotatePointAround 0              0             x y theta orientation)]\n  (let [[cx1a cy1a] [cx1b cy1b]] [(rotatePointAround (* 0.58 scale) (* 0.305 scale)  x y theta orientation) (rotatePointAround (* 0.43 scale) (* 0.275 scale)  x y theta orientation)]\n  (let [[cx2a cy2a] [cx2b cy2b]] [(rotatePointAround (* 0.4573836036582167 scale) (* -0.24276959866973943 scale) x y theta orientation) (rotatePointAround (* 0.5760783946789573 scale) (* -0.2389275837043081 scale) x y theta orientation)]\n    (path \'orange\' \'none\' 0 [\n      \'M\' x1 y1\n      \'C\' cx1a cy1a cx1b cy1b x2 y2\n      \'C\' cx2a cy2a cx2b cy2b x1 y1\n      \'Z\'\n    ])\n  )))\n))\n\n(def [x y] [300 200])\n(def [theta0 deltaTheta] [0.314{-3.2-3.2} -0.5{-3.2-3.2}])\n(def flower\n  (concat\n    (map\n      (\\[petalSize petalRotation ringRadius ringRotation]\n        (concatMap\n          (\\theta\n            (let armTheta (+ ringRotation theta)\n            (let rightPetalX (+ x (* ringRadius (cos armTheta)))\n            (let leftPetalX  (- x (* ringRadius (cos armTheta)))\n            (let petalY (+ y (* ringRadius (sin armTheta)))\n              [\n                (petal rightPetalX petalY petalSize (+ armTheta petalRotation) 1!)\n                (petal leftPetalX petalY petalSize (- (pi) (+ armTheta petalRotation)) -1!)\n              ]\n            ))))\n          )\n          [theta0 (+ theta0 deltaTheta) (+ theta0 (* 2! deltaTheta))]\n        )\n      )\n      ringParameters\n    )\n  )\n)\n\n(svg flower)\n';
var _user$project$ExamplesGenerated$floralLogo = '(def spiralArmCount 5)\n(def ringParameters [\n  ; petalSize petalRotation ringRadius ringRotation\n  [ 118{0-300}  0.63{-3.2-3.2} -16{-100-300}      0{-3.2-3.2}]\n  [ 76{0-300} -0.957{-3.2-3.2}  48{-100-300} -0.384{-3.2-3.2}]\n  [ 59{0-300} -1.269{-3.2-3.2}  76{-100-300} -0.89{-3.2-3.2}]\n  [ 36{0-300} -1.136{-3.2-3.2} 88{-100-300} -1.394{-3.2-3.2}]\n])\n\n(def rotatePointAround (\\(relX relY aroundX aroundY theta)\n  (let [rotRelX rotRelY] [(- (* relX (cos theta)) (* relY (sin theta))) (+ (* relX (sin theta)) (* relY (cos theta)))]\n    [(+ rotRelX aroundX) (+ rotRelY aroundY)]\n  )\n))\n\n;(x + yi)(cosθ + isinθ) = xcosθ + ixsinθ + iycosθ - ysinθ\n;= (xcosθ - ysinθ) + (xsinθ + ycosθ)i\n\n(def petal (\\(x y scale theta)\n  (let [[x1 y1]     [x2 y2]    ] [(rotatePointAround (* 1.0 scale) 0              x y theta) (rotatePointAround 0              0             x y theta)]\n  (let [[cx1a cy1a] [cx1b cy1b]] [(rotatePointAround (* 0.7 scale) (* 0.3 scale)  x y theta) (rotatePointAround (* 0.3 scale) (* 0.3 scale)  x y theta)]\n  (let [[cx2a cy2a] [cx2b cy2b]] [(rotatePointAround (* 0.4573836036582167 scale) (* -0.24276959866973943 scale) x y theta) (rotatePointAround (* 0.4710783946789573 scale) (* 0.40107241629569196 scale) x y theta)]\n    (path \'orange\' \'none\' 0 [\n      \'M\' x1 y1\n      \'C\' cx1a cy1a cx1b cy1b x2 y2\n      \'C\' cx2a cy2a cx2b cy2b x1 y1\n      \'Z\'\n    ])\n  )))\n))\n\n(def [x y] [300 140])\n(def flower\n  (concat\n    (map\n      (\\[petalSize petalRotation ringRadius ringRotation]\n        (map\n          (\\i\n            (let armTheta (+ ringRotation (* i (/ twoPi spiralArmCount)))\n            (let petalX (+ x (* ringRadius (cos armTheta)))\n            (let petalY (+ y (* ringRadius (sin armTheta)))\n              (petal petalX petalY petalSize (+ armTheta petalRotation))\n            )))\n          )\n          (range 0! (- spiralArmCount 1!))\n        )\n      )\n      ringParameters\n    )\n  )\n)\n\n(svg flower)\n\n';
var _user$project$ExamplesGenerated$tessellation2 = '; I believe this is set up for group p6mm\n; https://en.wikipedia.org/wiki/Wallpaper_group#Group_p6mm_.28.2A632.29\n\n; SVG transforms to flip, rotate, and position.\n(def transformGroup (\\(transformCenterX transformCenterY flipVertical rotationAngle translateX translateY shapes)\n  [\n    \'g\'\n    [\n      [\'transform\' [[\'translate\' (+ translateX transformCenterX) (+ translateY transformCenterY)] [\'rotate\' rotationAngle 0 0] [\'scale\' (if flipVertical -1 1) 1] [\'translate\' (- 0 transformCenterX) (- 0 transformCenterY)]]]\n    ]\n    shapes\n  ]\n))\n\n\n(def sin30 0.5!)\n(def cos30 (* 0.5! (sqrt 3!)))\n\n(def [x y radius] [350 200 200])\n(def innerRadius (* radius cos30))\n(def [bottomY cornerX] [(+ y innerRadius) (- x (/ radius 2!))])\n\n(def smallInnerRadius 36.14359353944901)\n(def smallInnerRadius2 62.143593539449)\n(def largeInnerRadius 74.2487113059643)\n\n(def primitive [\n  (path \'lightblue\' \'none\' 0 [\n    \'M\' x y\n    \'L\' x bottomY\n    \'L\' cornerX bottomY\n    \'Z\'\n  ])\n  (path \'blue\' \'none\' 0 [\n    \'M\' x y\n    \'L\' x (+ y (/ (* largeInnerRadius 2!) (sqrt 3!)))\n    \'L\' (- x (* smallInnerRadius sin30)) (+ y (* smallInnerRadius cos30))\n    \'Z\'\n  ])\n  (path \'darkblue\' \'none\' 0 [\n    \'M\' cornerX bottomY\n    \'L\' (+ cornerX smallInnerRadius2) bottomY\n    \'L\' (+ cornerX largeInnerRadius) (- bottomY (/ largeInnerRadius (sqrt 3!)))\n    \'L\' (+ cornerX (* smallInnerRadius2 sin30)) (- bottomY (* smallInnerRadius2 cos30))\n    \'Z\'\n  ])\n  (path \'white\' \'none\' 0 [\n    \'M\' x (+ y (/ (* largeInnerRadius 2!) (sqrt 3!)))\n    \'L\' (+ cornerX largeInnerRadius) (- bottomY (/ largeInnerRadius (sqrt 3!)))\n    \'L\' x (- bottomY (/ largeInnerRadius (sqrt 3!)))\n    \'Z\'\n  ])\n])\n\n(def primitiveHexagon [\n  (transformGroup x y false 0 0 0 primitive)\n  (transformGroup x y true  0 0 0 primitive)\n  (transformGroup x y false 60 0 0 primitive)\n  (transformGroup x y true  60 0 0 primitive)\n  (transformGroup x y false 120 0 0 primitive)\n  (transformGroup x y true  120 0 0 primitive)\n  (transformGroup x y false 180 0 0 primitive)\n  (transformGroup x y true  180 0 0 primitive)\n  (transformGroup x y false 240 0 0 primitive)\n  (transformGroup x y true  240 0 0 primitive)\n  (transformGroup x y false 300 0 0 primitive)\n  (transformGroup x y true  300 0 0 primitive)\n])\n\n(def primitiveHexagonColumn [\n  (transformGroup x y false 0 0 (* -2 innerRadius) primitiveHexagon)\n  (transformGroup x y false 0 0 0 primitiveHexagon)\n  (transformGroup x y false 0 0 (* 2 innerRadius) primitiveHexagon)\n  (transformGroup x y false 0 0 (* 4 innerRadius) primitiveHexagon)\n])\n\n(def primitiveHexagonColumns [\n  (transformGroup x y false 0 (* -1 (* radius (+ 1 sin30))) innerRadius primitiveHexagonColumn)\n  (transformGroup x y false 0 0 0 primitiveHexagonColumn)\n  (transformGroup x y false 0 (* 1 (* radius (+ 1 sin30))) innerRadius primitiveHexagonColumn)\n  (transformGroup x y false 0 (* 3 radius) 0 primitiveHexagonColumn)\n])\n\n(svg primitiveHexagonColumns)\n';
var _user$project$ExamplesGenerated$tessellationTarget = '; I believe this is set up for group p6mm\n; https://en.wikipedia.org/wiki/Wallpaper_group#Group_p6mm_.28.2A632.29\n\n; SVG transforms to flip, rotate, and position.\n(def transformGroup (\\(transformCenterX transformCenterY flipVertical rotationAngle translateX translateY shapes)\n  [\n    \'g\'\n    [\n      [\'transform\' [[\'translate\' (+ translateX transformCenterX) (+ translateY transformCenterY)] [\'rotate\' rotationAngle 0 0] [\'scale\' (if flipVertical -1 1) 1] [\'translate\' (- 0 transformCenterX) (- 0 transformCenterY)]]]\n    ]\n    shapes\n  ]\n))\n\n\n(def sin30 0.5!)\n(def cos30 (* 0.5! (sqrt 3!)))\n\n(def [x y radius] [350 200 200])\n(def innerRadius (* radius cos30))\n(def [bottomY cornerX] [(+ y innerRadius) (- x (/ radius 2!))])\n(def primativeBottomWidth (/ radius 2!))\n\n(def smallInnerRadius 56)\n(def largeInnerRadius 69)\n(def bottomRectWidth (- primativeBottomWidth smallInnerRadius))\n(def bottomRectHeight (/ smallInnerRadius (sqrt 3!)))\n\n(def primitive [\n  (path \'lightblue\' \'none\' 0 [\n    \'M\' x y\n    \'L\' x bottomY\n    \'L\' cornerX bottomY\n    \'Z\'\n  ])\n  (path \'green\' \'none\' 0 [\n    \'M\' x y\n    \'L\' x (+ y (/ (* largeInnerRadius 2!) (sqrt 3!)))\n    \'L\' (- x (* smallInnerRadius sin30)) (+ y (* smallInnerRadius cos30))\n    \'Z\'\n  ])\n  (path \'green\' \'none\' 0 [\n    \'M\' cornerX bottomY\n    \'L\' (+ cornerX smallInnerRadius) bottomY\n    \'L\' (+ cornerX largeInnerRadius) (- bottomY (/ largeInnerRadius (sqrt 3!)))\n    \'L\' (+ cornerX (* smallInnerRadius sin30)) (- bottomY (* smallInnerRadius cos30))\n    \'Z\'\n  ])\n  (path \'red\' \'none\' 0 [\n    \'M\' x (+ y (/ (* largeInnerRadius 2!) (sqrt 3!)))\n    \'L\' (+ cornerX largeInnerRadius) (- bottomY (/ largeInnerRadius (sqrt 3!)))\n    \'L\' x (- bottomY (/ largeInnerRadius (sqrt 3!)))\n    \'Z\'\n  ])\n])\n\n(def primitiveHexagon [\n  (transformGroup x y false 0 0 0 primitive)\n  (transformGroup x y true  0 0 0 primitive)\n  (transformGroup x y false 60 0 0 primitive)\n  (transformGroup x y true  60 0 0 primitive)\n  (transformGroup x y false 120 0 0 primitive)\n  (transformGroup x y true  120 0 0 primitive)\n  (transformGroup x y false 180 0 0 primitive)\n  (transformGroup x y true  180 0 0 primitive)\n  (transformGroup x y false 240 0 0 primitive)\n  (transformGroup x y true  240 0 0 primitive)\n  (transformGroup x y false 300 0 0 primitive)\n  (transformGroup x y true  300 0 0 primitive)\n])\n\n(def primitiveHexagonColumn [\n  (transformGroup x y false 0 0 (* -2 innerRadius) primitiveHexagon)\n  (transformGroup x y false 0 0 0 primitiveHexagon)\n  (transformGroup x y false 0 0 (* 2 innerRadius) primitiveHexagon)\n  (transformGroup x y false 0 0 (* 4 innerRadius) primitiveHexagon)\n])\n\n(def primitiveHexagonColumns [\n  (transformGroup x y false 0 (* -1 (* radius (+ 1 sin30))) innerRadius primitiveHexagonColumn)\n  (transformGroup x y false 0 0 0 primitiveHexagonColumn)\n  (transformGroup x y false 0 (* 1 (* radius (+ 1 sin30))) innerRadius primitiveHexagonColumn)\n  (transformGroup x y false 0 (* 3 radius) 0 primitiveHexagonColumn)\n])\n\n(svg primitiveHexagonColumns)\n';
var _user$project$ExamplesGenerated$tessellation = '; I believe this is set up for group p6mm\n; https://en.wikipedia.org/wiki/Wallpaper_group#Group_p6mm_.28.2A632.29\n\n; SVG transforms to flip, rotate, and position.\n(def transformGroup (\\(transformCenterX transformCenterY flipVertical rotationAngle translateX translateY shapes)\n  [\n    \'g\'\n    [\n      [\'transform\' [[\'translate\' (+ translateX transformCenterX) (+ translateY transformCenterY)] [\'rotate\' rotationAngle 0 0] [\'scale\' (if flipVertical -1 1) 1] [\'translate\' (- 0 transformCenterX) (- 0 transformCenterY)]]]\n    ]\n    shapes\n  ]\n))\n\n\n(def sin30 0.5!)\n(def cos30 (* 0.5! (sqrt 3!)))\n\n(def [x y radius] [350 200 200])\n(def innerRadius (* radius cos30))\n(def [bottomY cornerX] [(+ y innerRadius) (- x (/ radius 2!))])\n(def primativeBottomWidth (/ radius 2!))\n\n(def smallInnerRadius 50)\n(def bottomRectWidth (- primativeBottomWidth smallInnerRadius))\n(def bottomRectHeight (/ smallInnerRadius (sqrt 3!)))\n\n(def primitive [\n  (path \'lightblue\' \'none\' 0 [\n    \'M\' x y\n    \'L\' x bottomY\n    \'L\' cornerX bottomY\n    \'Z\'\n  ])\n  (path \'green\' \'none\' 0 [\n    \'M\' x y\n    \'L\' x (+ y (/ (* smallInnerRadius 2!) (sqrt 3!)))\n    \'L\' (- x (* smallInnerRadius sin30)) (+ y (* smallInnerRadius cos30))\n    \'Z\'\n  ])\n  (path \'green\' \'none\' 0 [\n    \'M\' cornerX bottomY\n    \'L\' (+ cornerX smallInnerRadius) bottomY\n    \'L\' (+ cornerX smallInnerRadius) (- bottomY (/ smallInnerRadius (sqrt 3!)))\n    \'L\' (+ cornerX (* smallInnerRadius sin30)) (- bottomY (* smallInnerRadius cos30))\n    \'Z\'\n  ])\n  (rect \'pink\' (- x bottomRectWidth) (- bottomY bottomRectHeight) bottomRectWidth bottomRectHeight)\n  (path \'pink\' \'none\' 0 [\n    \'M\' x (+ y (/ (* smallInnerRadius 2!) (sqrt 3!)))\n    \'L\' (+ cornerX smallInnerRadius) (- bottomY (/ smallInnerRadius (sqrt 3!)))\n    \'L\' (+ cornerX (* smallInnerRadius sin30)) (- bottomY (* smallInnerRadius cos30))\n    \'L\' (- x (* smallInnerRadius sin30)) (+ y (* smallInnerRadius cos30))\n    \'Z\'\n  ])\n  (path \'red\' \'none\' 0 [\n    \'M\' x (- bottomY bottomRectHeight)\n    \'L\' x (- (- bottomY bottomRectHeight) (* bottomRectWidth cos30))\n    \'L\' (- x (/ bottomRectWidth 2)) (- (- bottomY bottomRectHeight) (* bottomRectWidth cos30))\n    \'Z\'\n  ])\n])\n\n(def primitiveHexagon [\n  (transformGroup x y false 0 0 0 primitive)\n  (transformGroup x y true  0 0 0 primitive)\n  (transformGroup x y false 60 0 0 primitive)\n  (transformGroup x y true  60 0 0 primitive)\n  (transformGroup x y false 120 0 0 primitive)\n  (transformGroup x y true  120 0 0 primitive)\n  (transformGroup x y false 180 0 0 primitive)\n  (transformGroup x y true  180 0 0 primitive)\n  (transformGroup x y false 240 0 0 primitive)\n  (transformGroup x y true  240 0 0 primitive)\n  (transformGroup x y false 300 0 0 primitive)\n  (transformGroup x y true  300 0 0 primitive)\n])\n\n(def primitiveHexagonColumn [\n  (transformGroup x y false 0 0 (* -2 innerRadius) primitiveHexagon)\n  (transformGroup x y false 0 0 0 primitiveHexagon)\n  (transformGroup x y false 0 0 (* 2 innerRadius) primitiveHexagon)\n  (transformGroup x y false 0 0 (* 4 innerRadius) primitiveHexagon)\n])\n\n(def primitiveHexagonColumns [\n  (transformGroup x y false 0 (* -1 (* radius (+ 1 sin30))) innerRadius primitiveHexagonColumn)\n  (transformGroup x y false 0 0 0 primitiveHexagonColumn)\n  (transformGroup x y false 0 (* 1 (* radius (+ 1 sin30))) innerRadius primitiveHexagonColumn)\n  (transformGroup x y false 0 (* 3 radius) 0 primitiveHexagonColumn)\n])\n\n(svg primitiveHexagonColumns)\n';
var _user$project$ExamplesGenerated$keyboard2target = '(def scale 40)\n(def keyBaseHeight scale)\n(def keyBaseWidth keyBaseHeight)\n(def relativeSpacing 0.3333333333333)\n\n(def [boardLeft boardTop] [54 50])\n\n(def key (\\(relativeLeft relativeTop relativeWidth relativeHeight)\n  (rect\n    \'lightgray\'\n    (+ boardLeft (* relativeLeft keyBaseWidth))\n    (+ boardTop (* relativeTop keyBaseWidth))\n    (* relativeWidth keyBaseWidth)\n    (* relativeHeight keyBaseHeight)\n  )\n))\n\n; Generate a row of keys with the given relativeKeyWidths, separated by relativeKeySpacing\n; Returns [keyRects relativeTotalWidth]\n(def row (\\(relativeLeft relativeTop relativeHeight relativeKeySpacing relativeKeyWidths)\n  (let [keys relativeWidthPlusSpacing]\n    (foldl\n      (\\(relativeKeyWidth [keys nextKeyRelativeLeft])\n        (let newKey (key nextKeyRelativeLeft relativeTop relativeKeyWidth relativeHeight)\n          [[newKey|keys] (+ nextKeyRelativeLeft (+ relativeKeySpacing relativeKeyWidth))]\n        )\n      )\n      [[] relativeLeft]\n      relativeKeyWidths\n    )\n  [keys (- (- relativeWidthPlusSpacing relativeKeySpacing) relativeLeft)]\n  )\n))\n\n(def row2EndKeysWidth 1.95)\n(def row3EndKeysWidth 2.625)\n(def row4CommandKeysWidth 1.5)\n\n(def row1RelativeKeyWidths [1.575 1 1 1 1 1 1 1 1 1])\n(def row2RelativeKeyWidths [row2EndKeysWidth 1 1 1 1 1 1 1 row2EndKeysWidth])\n(def row3RelativeKeyWidths [row3EndKeysWidth 1 1 1 1 1 1 row3EndKeysWidth])\n(def row4RelativeKeyWidths [1 row4CommandKeysWidth 7.2667 row4CommandKeysWidth 1])\n\n(def [row1 keysRelativeWidth] (row relativeSpacing relativeSpacing 1 relativeSpacing row1RelativeKeyWidths))\n(def [row2        _] (row relativeSpacing (+ 1 (* 2 relativeSpacing)) 1 relativeSpacing row2RelativeKeyWidths))\n(def [row3        _] (row relativeSpacing (+ 2 (* 3 relativeSpacing)) 1 relativeSpacing row3RelativeKeyWidths))\n(def [row4        _] (row relativeSpacing (+ 3 (* 4 relativeSpacing)) 1 relativeSpacing row4RelativeKeyWidths))\n\n(def boardRelativeWidth  (+ keysRelativeWidth (* 2 relativeSpacing)))\n(def boardRelativeHeight (+ 4 (* 5 relativeSpacing)))\n\n(def backBoard\n  (rect \'green\' boardLeft boardTop (* boardRelativeWidth scale) (* boardRelativeHeight scale))\n)\n\n(svg (concat [\n  [backBoard]\n  row1\n  row2\n  row3\n  row4\n]))\n';
var _user$project$ExamplesGenerated$keyboard2 = '(def scale 40)\n(def keyBaseHeight scale)\n(def keyBaseWidth keyBaseHeight)\n(def relativeSpacing 0.3333333333333)\n\n(def [boardLeft boardTop] [50 50])\n\n(def key (\\(relativeLeft relativeTop relativeWidth relativeHeight)\n  (rect\n    \'lightgray\'\n    (+ boardLeft (* relativeLeft keyBaseWidth))\n    (+ boardTop (* relativeTop keyBaseWidth))\n    (* relativeWidth keyBaseWidth)\n    (* relativeHeight keyBaseHeight)\n  )\n))\n\n; Generate a row of keys with the given relativeKeyWidths, separated by relativeKeySpacing\n; Returns [keyRects relativeTotalWidth]\n(def row (\\(relativeLeft relativeTop relativeHeight relativeKeySpacing relativeKeyWidths)\n  (let [keys relativeWidthPlusSpacing]\n    (foldl\n      (\\(relativeKeyWidth [keys nextKeyRelativeLeft])\n        (let newKey (key nextKeyRelativeLeft relativeTop relativeKeyWidth relativeHeight)\n          [[newKey|keys] (+ nextKeyRelativeLeft (+ relativeKeySpacing relativeKeyWidth))]\n        )\n      )\n      [[] relativeLeft]\n      relativeKeyWidths\n    )\n  [keys (- (- relativeWidthPlusSpacing relativeKeySpacing) relativeLeft)]\n  )\n))\n\n(def row1RelativeKeyWidths [1 1 1 1 1 1 1 1])\n(def row2RelativeKeyWidths [1 1 1 1 1 1 1 1])\n(def row3RelativeKeyWidths [1 1 1 1 1 1 1 1])\n(def row4RelativeKeyWidths [1 7.6667      1])\n\n(def [row1 keysRelativeWidth] (row relativeSpacing relativeSpacing 1 relativeSpacing row1RelativeKeyWidths))\n(def [row2 _] (row relativeSpacing (+ 1 (* 2 relativeSpacing)) 1 relativeSpacing row2RelativeKeyWidths))\n(def [row3 _] (row relativeSpacing (+ 2 (* 3 relativeSpacing)) 1 relativeSpacing row3RelativeKeyWidths))\n(def [row4 _] (row relativeSpacing (+ 3 (* 4 relativeSpacing)) 1 relativeSpacing row4RelativeKeyWidths))\n\n(def boardRelativeWidth  (+ keysRelativeWidth (* 2 relativeSpacing)))\n(def boardRelativeHeight (+ 4 (* 5 relativeSpacing)))\n\n(def backBoard\n  (rect \'green\' boardLeft boardTop (* boardRelativeWidth scale) (* boardRelativeHeight scale))\n)\n\n(svg (concat [\n  [backBoard]\n  row1\n  row2\n  row3\n  row4\n]))\n';
var _user$project$ExamplesGenerated$keyboard = '(def scale 25)\n(def keyBaseHeight scale)\n(def keyBaseWidth keyBaseHeight)\n(def relativeSpacing 0.3333333333333)\n\n(def [boardLeft boardTop] [50 50])\n\n(def key (\\(relativeLeft relativeTop relativeWidth relativeHeight)\n  (rect\n    \'orange\'\n    (+ boardLeft (* relativeLeft keyBaseWidth))\n    (+ boardTop (* relativeTop keyBaseWidth))\n    (* relativeWidth keyBaseWidth)\n    (* relativeHeight keyBaseHeight)\n  )\n))\n\n; Generate a row of keys with the given relativeKeyWidths, separated by relativeKeySpacing\n; Returns [keyRects relativeTotalWidth]\n(def row (\\(relativeLeft relativeTop relativeHeight relativeKeySpacing relativeKeyWidths)\n  (let [keys relativeWidthPlusSpacing]\n    (foldl\n      (\\(relativeKeyWidth [keys nextKeyRelativeLeft])\n        (let newKey (key nextKeyRelativeLeft relativeTop relativeKeyWidth relativeHeight)\n          [[newKey|keys] (+ nextKeyRelativeLeft (+ relativeKeySpacing relativeKeyWidth))]\n        )\n      )\n      [[] relativeLeft]\n      relativeKeyWidths\n    )\n  [keys (- (- relativeWidthPlusSpacing relativeKeySpacing) relativeLeft)]\n  )\n))\n\n(def row1SquareKeyCount 10)\n(def row2SquareKeyCount 8)\n(def row3SquareKeyCount 7)\n\n(def row2SquareKeysRelativeWidth (+ row2SquareKeyCount (* relativeSpacing (- row2SquareKeyCount 1))))\n(def row3SquareKeysRelativeWidth (+ row3SquareKeyCount (* relativeSpacing (- row3SquareKeyCount 1))))\n\n(def [row1 keysRelativeWidth] (row relativeSpacing relativeSpacing 1 relativeSpacing [1.5|(repeat row1SquareKeyCount 1)]))\n\n; Make the first and last keys of the row the appropriate width so the other keys are center.\n(def row2EdgeKeyRelativeWidth (- (* 0.5 (- keysRelativeWidth row2SquareKeysRelativeWidth)) relativeSpacing))\n(def row3EdgeKeyRelativeWidth (- (* 0.5 (- keysRelativeWidth row3SquareKeysRelativeWidth)) relativeSpacing))\n\n(def [row2 _] (row relativeSpacing (+ 1 (* 2 relativeSpacing)) 1 relativeSpacing (concat [[row2EdgeKeyRelativeWidth] (repeat row2SquareKeyCount 1) [row2EdgeKeyRelativeWidth]])))\n(def [row3 _] (row relativeSpacing (+ 2 (* 3 relativeSpacing)) 1 relativeSpacing (concat [[row3EdgeKeyRelativeWidth] (repeat row3SquareKeyCount 1) [row3EdgeKeyRelativeWidth]])))\n\n(def boardRelativeWidth  (+ keysRelativeWidth (* 2 relativeSpacing)))\n(def boardRelativeHeight (+ 4 (* 5 relativeSpacing)))\n\n(def arrowVerticalSpacing 0.1)\n(def arrowHeight (* 0.5 (- 1 arrowVerticalSpacing)))\n(def arrowsRelativeWidth (+ 3 (* 2 relativeSpacing)))\n(def [bottomArrows _] (row (- (- boardRelativeWidth arrowsRelativeWidth) relativeSpacing) (+ arrowVerticalSpacing (+ arrowHeight (+ 3 (* 4 relativeSpacing)))) arrowHeight relativeSpacing (repeat 3 1)))\n\n(def topArrow\n  (key\n    (- (- boardRelativeWidth (+ 2 relativeSpacing)) relativeSpacing)\n    (+ 3 (* 4 relativeSpacing))\n    1\n    arrowHeight\n  )\n)\n\n(def row4SquareKeyCount 2)\n(def row4NextToSpaceBarKeyRelativeWidth 1.25)\n(def row4NotArrowsRelativeWidth (- (- keysRelativeWidth arrowsRelativeWidth) relativeSpacing))\n(def row4SquareKeysRelativeWidth (+ row4SquareKeyCount (* relativeSpacing (- row4SquareKeyCount 1))))\n(def spaceBarRelativeWidth (- row4NotArrowsRelativeWidth (+ row4SquareKeysRelativeWidth (+ (* 2 row4NextToSpaceBarKeyRelativeWidth) (* 3 relativeSpacing)))))\n(def row4KeyRelativeWidths (concat [(repeat row4SquareKeyCount 1) [row4NextToSpaceBarKeyRelativeWidth spaceBarRelativeWidth row4NextToSpaceBarKeyRelativeWidth]]))\n(def [row4 _] (row relativeSpacing (+ 3 (* 4 relativeSpacing)) 1 relativeSpacing row4KeyRelativeWidths))\n\n(def backBoard\n  (rect \'lightblue\' boardLeft boardTop (* boardRelativeWidth scale) (* boardRelativeHeight scale))\n)\n\n(svg (concat [\n  [backBoard]\n  row1\n  row2\n  row3\n  bottomArrows\n  [topArrow]\n  row4\n]))\n';
var _user$project$ExamplesGenerated$lilliconP2 = '\n(def [x0 x1 x2 x3 x4] [20 80 150 240 380])\n(def [y0 y1 y2 y3]    [20 125 296 424])\n\n(def yRightmostPt (+ y0 (/ (- y2 y0) 2!)))\n(def arcR 1!) ; any non-zero, not-too-large number works\n\n(def theP\n  (path \'black\' \'none\' 0\n    [\'M\' x0 y3\n     \'C\' x1 376 x1 216 x1 y1\n     \'C\' 80 60 134 y0 x3 y0\n     \'A\' arcR arcR 0 0 1 x3 y2\n     \'L\' x2 y2\n     \'L\' x2 y3\n     \'L\' x0 y3\n    ]))\n\n(def highlights\n  (let r 10!\n  [ (circle \'goldenrod\' x3 y2 r)\n    (circle \'magenta\'   x2 y2 r) ]))\n\n(svg (cons theP (if true highlights [])))\n\n';
var _user$project$ExamplesGenerated$lilliconP = '\n(def [x0 x1 x2 x3 x4] [20 80 150 240 380])\n(def [y0 y1 y2 y3]    [20 125 296 424])\n\n(def yRightmostPt (+ y0 (/ (- y2 y0) 2!)))\n(def delta 50!) ; TODO\n\n(def theP\n  (path \'black\' \'none\' 0\n    [\'M\' x0 y3\n     \'C\' x1 376 x1 216 x1 y1\n     \'C\' 80 60 134 y0 x3 y0\n     \'C\' (- x4 delta) y0 x4 (+ y0 delta) x4 yRightmostPt\n     \'C\' x4 (- y2 delta) (- x4 delta) y2 x3 y2\n     \'L\' x2 y2\n     \'L\' x2 y3\n     \'L\' x0 y3\n    ]))\n\n(def highlights\n  (let r 10!\n  (cons\n    (circle \'goldenrod\' x3 y2 r)\n    (map (\\[x y] (circle \'magenta\' x y r))\n         [[(- x4 delta) y0]\n          [x4 (+ y0 delta)]\n          [x4 yRightmostPt]\n          [x4 (- y2 delta)]\n          [(- x4 delta) y2]\n          [x2 y2]\n         ]))))\n\n(svg (cons theP (if true highlights [])))\n\n';
var _user$project$ExamplesGenerated$gridTile = '\n(def grid (\\(x0 y0 w h n m)\n  (let [xw yh] [(+ x0 w) (+ y0 h)]\n  (let [rowH colW] [(/ h n) (/ w m)]\n  (let box (rect 460 x0 y0 w h)\n  (let rows\n    (map (\\i (let yi (+ y0 (mult i rowH))\n             (line \'black\' 2 x0 yi xw yi)))\n         (range 0! n))\n  (let cols\n    (map (\\i (let xi (+ x0 (mult i colW))\n             (line \'black\' 2 xi y0 xi yh)))\n         (range 0! n))\n  (concat [[box] rows cols]))))))))\n\n(def [x0 y0 w h n m] [100 100 325 285 10! 10!])\n\n(def blob\n  (ellipse 196 (+ x0 (/ w 2!))\n               (+ y0 (/ h 2!))\n               (- (/ w 2!) (/ w m))\n               (- (/ h 2!) (/ h n))))\n\n(svg (append\n  (grid x0 y0 w h n m)\n  [blob]\n))\n\n';
var _user$project$ExamplesGenerated$equiTri = '\n; Equilateral Triangles\n; (derived in terms of nStar, rather than nGon)\n\n(def tri (\\(c x y sideLen rot)\n  (let len1 (* sideLen (/ 2! 3!))\n  (let len2 (* sideLen (/ 1! 3!))\n  (nStar c \'none\' 0 3! len1 len2 rot [x y])))))\n\n(svg [\n  (tri \'darkblue\'\n    150 150\n    100\n    0)\n  (tri \'lightblue\'\n    200 300\n    50\n    10)\n])\n\n';
var _user$project$ExamplesGenerated$surveyResultsTriHist2 = '\n; Interactive charts that show results from user study:\n; http://ravichugh.github.io/sketch-n-sketch/blog/03-user-study-videos.html\n\n; counts: [ A/B C/A C/B CI-Intervals ]\n\n(def ferrisCounts [\n  [ 3 14  2  5  1 ]\n  [ 0  3  1 11 10 ]\n  [ 1  3  4  9  8 ]\n  [ [-0.92 0.01] [0.59 1.47] [0.25 1.23] ]\n])\n\n(def keyboardCounts [\n  [ 0  5  3 10  7 ]\n  [ 0  1  5 14  5 ]\n  [ 0  2  2  9 12 ]\n  [ [0.26 1.18] [0.59 1.21] [0.73 1.57] ]\n])\n\n(def tesselationCounts [\n  [ 0  7  9  6  3 ]\n  [ 1  0  8 11  5 ]\n  [ 1  0  4 13  7 ]\n  [ [-0.20 0.64] [0.34 1.10] [0.53 1.32] ]\n])\n\n(def maxDataPoint 14!)\n\n(def sum (\\ns\n  (foldr\n    (\\([weight n] acc) (+ (* n weight) acc))\n    0 (zip [0 1 2 3 4] ns))))\n\n(def [iRot jRot kRot]                   [0! -120! 120!])\n(def [iRevCounts jRevCounts kRevCounts] [id id reverse])\n(def [iRevAvg jRevAvg kRevAvg]          [id id (\\n (+ (neg (- n 2!)) 2!))])\n(def [iRevBound jRevBound kRevBound]    [(\\n (+ 2! n)) (\\n (+ 2! n)) (\\n (+ 2! (neg n)))])\n\n(def numUsers 25!)\n(def numBins 5!)\n(def slices (- numBins 0!))\n(def shift  (\\idx (+ idx 0.5!)))\n\n(def sideLen 90{20-200})\n(def sidePad 13!{0-50})\n(def tickLen 5!{1-10})\n(def edgeWidth 1!{0-4})\n(def levelWidth 1.0!{0.0-2.1})\n(def dotSize 5!{3-10})\n(def barSize 16!{1-20})\n(def intWidth 8!{1-30})\n(def intTicks 0!{-3-15})\n(def fontSize 20!{10-40})\n(def showAvgs (let showAvgs_ 0.7{0.1-1.0} (< showAvgs_ 0.5!)))\n(def showTicks (let showTicks_ 0.7{0.1-1.0} (< showTicks_ 0.5!)))\n\n(def [aUp   aLeft]  [-5!{-20-50}  25!{0-50}])\n(def [bUp   bRight] [aUp          98!{0-150}])\n(def [cDown cLeft]  [115!{50-200} 10!{0-30}])\n\n(def halfLen (/ sideLen 2!))\n\n(def tri (\\(cx cy [iCounts jCounts kCounts ciIntervals])\n  (let [iSum jSum kSum] (map sum [iCounts jCounts kCounts])\n  (let [iAvg jAvg kAvg] [(/ iSum numUsers) (/ jSum numUsers) (/ kSum numUsers)]\n  (let [iBounds jBounds kBounds] ciIntervals\n  (let x0    (- cx halfLen)\n  (let x1    (+ cx halfLen)\n  (let y     (- cy (* (+ sideLen (* 2! sidePad)) (/ (sqrt 3!) 6!)))\n  (let dx    (/ (- x1 x0) slices)\n  (let xi    (\\i (+ x0 (* (shift i) dx)))\n  (let yn    (\\n (- y (* n tickLen)))\n  (let edge  (line \'gray\' edgeWidth)\n  (let tick  (\\x (circle \'gray\' x y 3!))\n  (let bar   (line \'lightblue\' barSize)\n  (let dot   (\\x (circle \'goldenrod\' x y dotSize))\n  (let level (\\i (let yLevel (- y (* i tickLen))\n                 (line \'white\' levelWidth x0 yLevel x1 yLevel)))\n  (let label (\\(x y s)\n    (addAttr (text x y s) [\'font-size\' (+ (toString fontSize) \'pt\')]))\n  (let edges\n    [ (rotate (edge x0 y x1 y) iRot cx cy)\n      (rotate (edge x0 y x1 y) jRot cx cy)\n      (rotate (edge x0 y x1 y) kRot cx cy)\n    ]\n  (let tickmarks\n    (let foo (\\rot\n      (map (\\i (rotate (tick (+ (+ x0 (/ dx 2!)) (* i dx))) rot cx cy))\n           (zeroTo slices)))\n    (concatMap foo [iRot jRot kRot]))\n  (let levels\n    (let foo (\\rot\n      (map (\\i (rotate (level i) rot cx cy))\n           (range 1! maxDataPoint)))\n    (concatMap foo [iRot jRot kRot]))\n  (let averages\n    [ (rotate (dot (xi (iRevAvg iAvg))) iRot cx cy)\n      (rotate (dot (xi (jRevAvg jAvg))) jRot cx cy)\n      (rotate (dot (xi (kRevAvg kAvg))) kRot cx cy)\n    ]\n  (let intervals\n    (let draw (\\(revBound [ciMin ciMax] rot)\n      [ (rotate (line \'red\' intWidth\n           (xi (revBound ciMin)) (- y (* intTicks tickLen))\n           (xi (revBound ciMax)) (- y (* intTicks tickLen))) rot cx cy) ])\n    (concat [\n      (draw iRevBound iBounds iRot)\n      (draw jRevBound jBounds jRot)\n      (draw kRevBound kBounds kRot)\n    ]))\n  (let labels\n    [ (label (- x0 aLeft) (- y aUp) \'A\')\n      (label (+ x0 bRight) (- y bUp) \'B\')\n      (label (- (+ x0 (/ (- x1 x0) 2!)) cLeft) (+ y cDown) \'C\')\n    ]\n  (concat [\n    (flip mapi (iRevCounts iCounts) (\\[i n]\n      (rotate (bar (xi i) y (xi i) (yn n)) iRot cx cy)))\n    (flip mapi (jRevCounts jCounts) (\\[i n]\n      (rotate (bar (xi i) y (xi i) (yn n)) jRot cx cy)))\n    (flip mapi (kRevCounts kCounts) (\\[i n]\n      (rotate (bar (xi i) y (xi i) (yn n)) kRot cx cy)))\n    levels\n    edges\n    intervals\n    (if showTicks tickmarks [])\n    (if showAvgs averages [])\n    labels\n  ]\n))))))))))))))))))))))))\n\n(def [cx0 cy0] [180!{0-200} 130!{0-200}])\n(def sep 216!{100-300})\n\n(svg (concat\n  (mapi\n    (\\[i countsi] (tri cx0 (+ cy0 (* i sep)) countsi))\n    [ferrisCounts keyboardCounts tesselationCounts])))\n\n';
var _user$project$ExamplesGenerated$bezier = '; Animated Bezier Curves\n; Recreating https://www.jasondavies.com/animated-bezier/\n;\n; Bezier functions\n;\n(def linbez (\\(t p1 p2)\n  (+ p1 (* t (- p2 p1))) ) )\n(def quadbez (\\(t p1 p2 p3)\n  (+ (* (- 1 t) (linbez t p1 p2)) (* t (linbez t p2 p3))) ) )\n(def cubez (\\(t p1 p2 p3 p4)\n  (+ (* (- 1 t) (quadbez t p1 p2 p3)) (* t (quadbez t p2 p3 p4))) ) )\n(def quarbez (\\(t p1 p2 p3 p4 p5)\n  (+ (* (- 1 t) (cubez t p1 p2 p3 p4)) (* t (cubez t p2 p3 p4 p5))) ) )\n;\n; Point definitions\n;\n(def [t tslider] (hSlider false 50! 450! 300! 0! 1! \'t: \' 0.25))\n(def [linx1 liny1 linx2 liny2] [50 200 100 50])\n(def [quadx1 quady1 quadx2 quady2 quadx3 quady3] \n     [(+ linx1 150!) liny1 (+ linx2 150!) liny2 300 200])\n(def [cux1 cuy1 cux2 cuy2 cux3 cuy3 cux4 cuy4] \n     [(+ quadx1 150!) liny1 (+ quadx2 150!) liny2 (+ quadx3 150!) quady3 500 50])\n(def [qux1 quy1 qux2 quy2 qux3 quy3 qux4 quy4 qux5 quy5]\n     [(+ cux1 150!) liny1 (+ cux2 150!) liny2 (+ cux3 150!) quady3 (+ cux4 150!) cuy4 700 200])\n;\n; Style Definitions\n;\n(def [linwd col1 col2 col3 col4] [3 \'gray\' \'lightblue\' \'green\' \'lightgreen\'])\n(def ptcirc (\\(cx cy) (circle \'red\' cx cy 5!)))\n;\n; Curve Definitions\n;\n(def linCurve\n  (let [midx midy] [(linbez t linx1 linx2) (linbez t liny1 liny2)]\n  [ (path \'none\' col1 linwd\n      [ \'M\' linx1 liny1\n        \'L\' linx2 liny2 ] )\n    (path \'none\' \'red\' linwd\n      [ \'M\' linx1 liny1\n        \'L\' midx midy ] )\n    (ptcirc midx midy)  ] ) )\n(def quadCurve\n  (let [midx1 midy1 midx2 midy2] [(linbez t quadx1 quadx2) (linbez t quady1 quady2)\n                                  (linbez t quadx2 quadx3) (linbez t quady2 quady3)]\n  (let [px py] [(quadbez t quadx1 quadx2 quadx3) (quadbez t quady1 quady2 quady3)]\n  [ (path \'none\' col1 linwd\n      [ \'M\' quadx1 quady1\n        \'L\' quadx2 quady2 ] )\n    (path \'none\' col1 linwd\n      [ \'M\' quadx2 quady2\n        \'L\' quadx3 quady3 ] )\n    (path \'none\' col2 linwd\n      [ \'M\' midx1 midy1\n        \'L\' midx2 midy2 ] )\n    (path \'none\' \'red\' linwd\n      [ \'M\' quadx1 quady1\n        \'Q\' quadx2 quady2\n            quadx3 quady3 ] )\n    (ptcirc px py)    ] ) ) )\n(def cuCurve\n  (let [midx1 midy1 midx2 midy2 midx3 midy3]\n       [(linbez t cux1 cux2) (linbez t cuy1 cuy2)\n        (linbez t cux2 cux3) (linbez t cuy2 cuy3)\n        (linbez t cux3 cux4) (linbez t cuy3 cuy4)]\n  (let [dubmidx1 dubmidy1 dubmidx2 dubmidy2]\n       [(linbez t midx1 midx2) (linbez t midy1 midy2)\n        (linbez t midx2 midx3) (linbez t midy2 midy3)]\n  (let [px py] [(cubez t cux1 cux2 cux3 cux4) (cubez t cuy1 cuy2 cuy3 cuy4)]\n  [ (path \'none\' col1 linwd\n      [ \'M\' cux1 cuy1\n        \'L\' cux2 cuy2 ] )\n    (path \'none\' col1 linwd\n      [ \'M\' cux2 cuy2\n        \'L\' cux3 cuy3 ] )\n    (path \'none\' col1 linwd\n      [ \'M\' cux3 cuy3\n        \'L\' cux4 cuy4 ] )\n    (path \'none\' col2 linwd\n      [ \'M\' midx1 midy1\n        \'L\' midx2 midy2 ] )\n    (path \'none\' col2 linwd\n      [ \'M\' midx2 midy2\n        \'L\' midx3 midy3 ] )\n    (path \'none\' col3 linwd\n      [ \'M\' dubmidx1 dubmidy1\n        \'L\' dubmidx2 dubmidy2 ] )\n    (path \'none\' \'red\' linwd\n      [ \'M\' cux1 cuy1\n        \'C\' cux2 cuy2\n            cux3 cuy3\n            cux4 cuy4 ] )\n    (ptcirc px py)            ] ) ) ) )\n\n(def quCurve\n  (let [midx1 midy1 midx2 midy2 midx3 midy3 midx4 midy4]\n       [(linbez t qux1 qux2) (linbez t quy1 quy2)\n        (linbez t qux2 qux3) (linbez t quy2 quy3)\n        (linbez t qux3 qux4) (linbez t quy3 quy4)\n        (linbez t qux4 qux5) (linbez t quy4 quy5)]\n  (let [dubmidx1 dubmidy1 dubmidx2 dubmidy2 dubmidx3 dubmidy3]\n       [(linbez t midx1 midx2) (linbez t midy1 midy2)\n        (linbez t midx2 midx3) (linbez t midy2 midy3)\n        (linbez t midx3 midx4) (linbez t midy3 midy4)]\n  (let [trimidx1 trimidy1 trimidx2 trimidy2]\n       [(linbez t dubmidx1 dubmidx2) (linbez dubmidy1 dubmidy2)\n        (linbez t dubmidx2 dubmidx3) (linbez dubmidy2 dubmidy3)]\n  (let [px py] [(quarbez t qux1 qux2 qux3 qux4 qux5) (quarbez t quy1 quy2 quy3 quy4 quy5)]\n  [ (path \'none\' col1 linwd\n      [ \'M\' qux1 quy1\n        \'L\' qux2 quy2 ] )\n    (path \'none\' col1 linwd\n      [ \'M\' qux2 quy2\n        \'L\' qux3 quy3 ] )\n    (path \'none\' col1 linwd\n      [ \'M\' qux3 quy3\n        \'L\' qux4 quy4 ] )\n    (path \'none\' col1 linwd\n      [ \'M\' qux4 quy4\n        \'L\' qux5 quy5 ] )\n    (path \'none\' col2 linwd\n      [ \'M\' midx1 midy1\n        \'L\' midx2 midy2 ] )\n    (path \'none\' col2 linwd\n      [ \'M\' midx2 midy2\n        \'L\' midx3 midy3 ] )\n    (path \'none\' col2 linwd\n      [ \'M\' midx3 midy3\n        \'L\' midx4 midy4 ] )\n    (path \'none\' col3 linwd\n      [ \'M\' dubmidx1 dubmidy1\n        \'L\' dubmidx2 dubmidy2 ] )\n    (path \'none\' col3 linwd\n      [ \'M\' dubmidx2 dubmidy2\n        \'L\' dubmidx3 dubmidy3 ] )\n    (path \'none\' col4 linwd\n      [ \'M\' trimidx1 trimidy1\n        \'L\' trimidx2 trimidy2 ] )\n    (ptcirc px py)            ] ) ) ) ) )\n;\n; Putting it all together\n;\n(svg (concat [linCurve quadCurve cuCurve tslider]))\n';
var _user$project$ExamplesGenerated$poppl = '; Logo for POP-PL\n; see https://github.com/florence/pop-pl\n\n(def m \'M\')\n(def l \'L\')\n(def c \'C\')\n(def z \'Z\')\n\n(def ltopWidth 29!)\n(def ltopHeight 63!)\n(def xstart 131!)\n(def ystart 63!)\n(def stethx 31!)\n(def stethy 7!)\n(def cr2Control -0.1769993052254364)\n(def cr2x (* cr2Control ltopWidth))\n(def cr2y (* cr2Control ltopHeight))\n(def lpath\n  [m (- xstart stethx) (- ystart stethy)\n   c (+ xstart -12) (+ ystart -19)\n     (+ cr2x xstart) (+ cr2y ystart)\n     xstart ystart\n   l (+ xstart ltopWidth) (+ ystart ltopHeight)\n   ])\n\n(def axstart  (+ xstart ltopWidth))\n(def aystart (+ ystart ltopHeight))\n(def ascale 1.9534135150166867!)\n(def ax (* ascale ltopWidth))\n(def ay (* ascale ltopHeight))\n(def bx 18!)\n(def armpath\n  [m axstart aystart\n   c (+ xstart 71) (+ ystart 94)\n     (+ xstart 90) (+ ystart 142)\n     (+ axstart ax) (+ aystart ay)\n   c (+ xstart 63) (+ ystart 190)\n     (+ xstart 74) (+ ystart 188)\n     (- (+ axstart ax) bx) (+ aystart ay)])\n\n(def lwidth 5)\n\n\n(def nub\n  (circle \'black\' (- (+ axstart ax) bx) (+ aystart ay) (* lwidth 2!)))\n\n(def small (* lwidth 2.1))\n(def scope1\n  (circle \'black\' (- xstart stethx) (- ystart stethy) (+ small lwidth)))\n(def scope2\n  (circle \'white\' (- xstart stethx) (- ystart stethy) small))\n\n[\'svg\'\n [[\'viewBox\' \'0 0 300 300\']]\n [(square \'white\' 0! 0! 300!)\n      (path \'none\' \'black\' lwidth lpath)\n      (path \'none\' \'black\' lwidth armpath)\n      nub\n      (addAttr (path \'white\' \'black\' lwidth armpath)\n               [\'transform\' (+ (+ \'matrix(-1 0 0 1 \' (toString (* 2 axstart)))\n                               \' 0)\')])\n      (addAttr nub\n               [\'transform\' (+ (+ \'matrix(-1 0 0 1 \' (toString (* 2 axstart)))\n                               \' 0)\')])\n      scope1\n      scope2\n]]\n\n';
var _user$project$ExamplesGenerated$cover = '; Logo for Cover\n; see https://github.com/florence/cover\n\n(def size 300!)\n(def line 10!)\n(def h (/ size 2.6548672566371683))\n(def w (- (* 2! h) (* 2! line)))\n\n(def m (/ size 2!))\n\n(def x (- m (/ w 2!)))\n(def y (- m (+ (/ line 2!) (/ w 2!))))\n\n(def x2 (- x (+ w line)))\n(def y2 (- x (+ w (* 2.5! line))))\n\n(def x3 (+ x (+ w line)))\n(def y3 (+ x (+ w (* 1.5! line))))\n\n(def top (\\(x y)\n (rect \'red\' x y w (- h line))))\n\n(def sw (- h (* 1.5! line)))\n\n(def bottom (\\(x y)\n  (rect \'blue\' x (+ y h) sw (- h line))))\n\n(def bottoma (\\(x y) (bottom x y)))\n(def bottomb (\\(x y) (bottom (+ sw (+ x line)) y)))\n\n(def rot 45)\n\n[\'svg\'\n [[\'viewBox\' (+ (+ (+ \'0 0 \' (toString size)) \' \') (toString size))]]\n [\n  (square \'white\' 0! 0! size)\n\n  (rotate (top x y)   rot m m)\n  (rotate (bottoma x y) rot m m)\n  (rotate (bottomb x y) rot m m)\n\n  (rotate (top x2 y)   rot m m)\n  (rotate (bottoma x2 y) rot m m)\n  (rotate (bottomb x2 y) rot m m)\n\n  (rotate (top x y2)   rot m m)\n  (rotate (bottoma x y2) rot m m)\n  (rotate (bottomb x y2) rot m m)\n\n  (rotate (top x3 y)   rot m m)\n  (rotate (bottoma x3 y) rot m m)\n  (rotate (bottomb x3 y) rot m m)\n\n  (rotate (top x y3)   rot m m)\n  (rotate (bottoma x y3) rot m m)\n  (rotate (bottomb x y3) rot m m)\n]]\n\n';
var _user$project$ExamplesGenerated$dictionaries = '(def d (empty))\n(def d1 (insert \'a\' 3 d))\n(def d2 (insert \'b\' 4 d1))\n(def d3 (remove \'a\' d2))\n\n(def getWithDefault (\\(key default dict)\n  (let value (get key dict)\n  (typecase value\n    (Null default)\n    (_ value)))\n))\n\n(blobs [\n    [(text 50 30  (toString d2))]\n    [(text 50 50  (toString d3))]\n    [(text 50 70  (toString (get \'b\' d3)))]\n    [(text 50 90  (toString (get \'a\' d3)))]\n    [(text 50 110 (toString (getWithDefault \'a\' \'default\' d3)))]\n])\n\n';
var _user$project$ExamplesGenerated$thawFreeze = '\n# unannotated-numbers: n!\n\n; Set [unannotated-numbers] to [n?] or [n!] to declare that\n; unannotated literals be thawed or frozen, respectively.\n;\n; By default, this option is set to [n?].\n\n(svg [(rect \'maroon\' 100? 15 200! 50)])\n\n';
var _user$project$ExamplesGenerated$barGraph = '; A Bar Graph\n;\n; Try:\n;   - Manipulating the height of the bars\n;   - Manipulating the spacing between the bars\n;   - Changing the X Offset with the bottom slider\n;   - Adding and removing data points\n;   - Changing the captions\n;\n; When you\'re done editing, change the doneEditing variable to true to\n; get an SVG that\'s ready to be embedded in a web page!\n(def doneEditing false)\n\n; Each data point specifies a single bar as [XValue YValue]\n(def data [[1! 5!] [2! 1!] [3! 3!] [4! 2!] [5! 4!] [7! 3!]])\n\n; Relevant variables\n(def [title xcaption ycaption] [\'Bar Graph\' \'X Axis\' \'Y Axis\'])\n(def [totht totwd barspacing numy] [250! 450! 60 5])\n(def [barwd axiswd] [50 4])\n(def [barcol axiscol] [\'lightblue\' \'gray\'])\n\n(def [xbegin windowslider] (hSlider true 100! 500! 500! 0! 10! \'X Offset: \' 0))\n\n; If you would like to specify the X Offset without the slider, uncomment\n; the below line and set it appropriately.\n;(def xbegin 0)\n\n(def [lowerx upperx] [xbegin (+ xbegin (/ totwd barspacing))])\n(def [x0 y0] [100! 100!])\n\n(def [textht textwd] [18! 4!])\n\n(def bar (\\[val freq] (if (< val upperx) (if (< lowerx val)\n                [(rect barcol (+ x0 (- (* barspacing (- val xbegin)) (* 0.5! barwd)))\n                                    (+ y0 (- totht (* freq (/ totht numy))))\n                                    barwd\n                                    (* freq (/ totht numy)) )] []) []) ) )\n\n(def xaxis (line axiscol axiswd (- x0 (* 0.5! axiswd))\n                                (+ y0 totht)\n                                (+ x0 totwd)\n                                (+ y0 totht) ) )\n\n(def yaxis (line axiscol axiswd x0 (- y0 (* 0.5! (/ totht numy)))\n                                x0 (+ y0 totht) ) )\n\n(def labelx (\\val (text (+ x0 (- (* barspacing (- val xbegin)) textwd))\n                        (+ y0 (+ (* 1.5! textht) totht))\n                        (toString val) ) ) )\n\n(def labely (\\freq (text (- x0 20!)\n                         (+ y0 (+ (* 0.5! textht) (- totht (* freq (/ totht numy)))))\n                         (toString freq) ) ) )\n\n(def titlelabel (text (+ x0 (/ totwd 2!))\n                      (- y0 (/ totht numy))\n                      title) )\n\n(def xlabel (text (+ x0 (/ totwd 2!))\n                  (+ y0 (+ (* 3! textht) totht))\n                  xcaption) )\n(def ylabel (text (- x0 80!) (+ y0 (/ totht 2!)) ycaption) )\n\n(def xs (range lowerx (- upperx 1!)))\n(def ys (range 0! numy))\n\n(def bars (concat (map bar data)))\n(def axes [xaxis yaxis])\n(def xlabels (map labelx xs))\n(def ylabels (map labely ys))\n(def names [titlelabel xlabel ylabel])\n\n(if doneEditing (svgViewBox (+ (* 2! x0) totwd) (+ y0 (+ (* 3! textht) totht)) (concat [bars axes xlabels ylabels names]))\n                (svg (concat [bars axes xlabels ylabels names windowslider])) )\n';
var _user$project$ExamplesGenerated$interfaceButtons = '(def [w h depth shadow r] [120 22.5 4 0.5 2])\n(def shadowcol [180 180 180 1])\n\n(def draw (\\(topcolor botcolor offset)\n\n  (let tbbox  (rect topcolor r offset (- w (* 2! r)) h)\n  (let lrbox  (rect topcolor 0! (+ r offset) w (- h (* 2! r)))\n  (let tlcirc (circle topcolor r (+ r offset) r)\n  (let trcirc (circle topcolor (- w r) (+ r offset) r)\n  (let blcirc (circle topcolor r (+ (- h r) offset) r)\n  (let brcirc (circle topcolor (- w r) (+ (- h r) offset) r)\n\n  (let btbbox  (rect botcolor r (- h r) (- w (* 2! r)) depth)\n  (let blrbox  (rect botcolor 0! (- h r) w (- depth r))\n  (let belcirc (circle botcolor r (- (+ h depth) (* 2! r)) r)\n  (let bercirc (circle botcolor (- w r) (- (+ h depth) (* 2! r)) r)\n\n  (let stbbox  (rect shadowcol r (+ shadow (- h r)) (- w (* 2! r)) depth)\n  (let slrbox  (rect shadowcol 0! (+ shadow (- h r)) w (- depth r))\n  (let selcirc (circle shadowcol r (+ shadow (- (+ h depth) (* 2! r))) r)\n  (let sercirc (circle shadowcol (- w r) (+ shadow (- (+ h depth) (* 2! r))) r)\n\n  (let btop    [tbbox lrbox tlcirc trcirc blcirc brcirc]\n  (let bbot    [btbbox blrbox belcirc bercirc]\n  (let bshadow (if (= offset 0) [stbbox slrbox selcirc sercirc] [])\n\n    ; NOTE: not calling (addAttr ... [\'preserveAspectRatio\' \'none\'])\n    (svgViewBox 120\n      (+ depth (+ shadow (- h r)))\n      (concat [bshadow bbot btop]))\n\n)))))))))))))))))))\n\n(def hilitedBot [198 77 64 1])\n\n(def raisedButton      (draw [231 76 60 1] [192 57 43 1] 0))\n(def highlightedButton (draw [233 94 80 1] hilitedBot 0))\n(def depressedButton   (draw [233 94 80 1] hilitedBot 1.1))\n(def disabledButton    (draw [236 112 99 1] [205 97 85 1] 0))\n\n(def raisedButton2      raisedButton)\n(def highlightedButton2 highlightedButton)\n(def depressedButton2   depressedButton)\n(def disabledButton2    disabledButton)\n\n(def raisedButton3      (draw \'gray\' hilitedBot 0))\n(def highlightedButton3 (draw \'lightgray\' hilitedBot 0))\n(def depressedButton3   (draw \'lightgray\' hilitedBot 1.1))\n(def disabledButton3    (draw 470 360 0))\n\n(def kind 1{1-3})\n(def state 1{1-4})\n\n(if (= kind 1)\n  (if (= state 1) raisedButton\n  (if (= state 2) highlightedButton\n  (if (= state 3) depressedButton\n    disabledButton)))\n(if (= kind 2)\n  (if (= state 1) raisedButton2\n  (if (= state 2) highlightedButton2\n  (if (= state 3) depressedButton2\n    disabledButton2)))\n; else\n  (if (= state 1) raisedButton3\n  (if (= state 2) highlightedButton3\n  (if (= state 3) depressedButton3\n    disabledButton3)))\n))\n\n';
var _user$project$ExamplesGenerated$rotTest = '\n(def [x y w h] [257 54 152 261])\n(def rot 38.166250526006905)\n(def colorNum 100)\n\n(def [x_ y_] [(+ x (/ w 2)) (+ y (/ h 2))])\n\n; thin wrapper v1\n(def transform\n  (spaces\n     [\'translate\' (parens (spaces [(toString x_) (toString y_)]))\n      \'rotate\'    (parens (toString rot))\n      \'translate\' (parens (spaces [(toString (neg x_)) (toString (neg y_))]))\n   ]))\n\n; thin wrapper v2\n(def transform2\n  (+ \'rotate\' (parens (spaces [(toString rot) (toString x_) (toString y_)]))))\n\n; specific transform encoding\n(def transform3 [[\'rotate\' rot x_ y_]])\n\n(def r (rotate (rect colorNum x y w h) rot x_ y_))\n\n(def e (rotate (ellipse 240 x_ y_ 10 20) -10 x_ y_))\n\n(svg [r e])\n\n';
var _user$project$ExamplesGenerated$matrices = '; Definitions for 2D matrices and transform application\n;\n; Similar to the SVG transform operation\n; See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform\n;\n(def [theta tx ty m s] [(/ 3.14159! 4) 75 75 1.25 2])\n(defrec rmult_ (\\(r v) (case [r v]\n  ([ [] x ] 0)\n  ([ x [] ] 0)\n  ([ [a | aa] [b | bb] ] (+ (* a b) (rmult_ aa bb))))))\n(defrec mmult (\\(m v) (case m\n  ([] [])\n  ([r|rest] (if (= (len r) (len v)) (cons (rmult_ r v) (mmult rest v)) [])))))\n(defrec toPts (\\l (case l\n  ([] [])\n  ([ [x y k] | rest ] (cons [x y] (toPts rest))))))\n(defrec toPath_ (\\l (case l\n  ([] [])\n  ([ [x y] | rest ] (append [ \'L\' x y ] (toPath_ rest))))))\n(def toPath (\\l (case l\n  ([] [])\n  ([ [x1 y1] | rest ] (path \'lightblue\' \'gray\' 1 (append [ \'M\' x1 y1 | (toPath_ rest)] [\'Z\']))))))\n(def id [ [1! 0! 0!] [0! 1! 0!] [0! 0! 1!] ])\n(def translatert (map (mmult [ [1! 0! tx] [0! 1! 0!] [0! 0! 1!]])))\n(def translatedn (map (mmult [ [1! 0! 0!] [0! 1! ty] [0! 0! 1!]])))\n(def rotate (map (mmult [ [(cos theta) (* -1! (sin theta)) 0!] [(sin theta) (cos theta) 0!] [0! 0! 1!]])))\n(def shear (map (mmult [ [1! m 0!] [0! 1! 0!] [0! 0! 1!]])))\n(def scale (map (mmult [ [s 0! 0!] [0! s 0!] [0! 0! 1!] ])))\n(def ps [ [-25! -25! 1!] [-25! 25! 1!] [25! 25! 1!] [25! -25! 1!] ])\n(def square1 (toPath (toPts (translatedn (translatert ps)))))\n(def square2 (toPath (toPts (translatedn (translatert (translatert ps))))))\n(def rotsquare (toPath (toPts (translatert (translatert (translatert (translatedn (rotate ps))))))))\n(def shearsquare (toPath (toPts (translatert (translatert (translatert (translatert (translatedn (shear ps)))))))))\n(def scalesquare (toPath (toPts (translatert (translatert (translatert (translatert (translatert (translatert (translatedn (scale ps)))))))))))\n(svg [square1 square2 rotsquare shearsquare scalesquare])\n';
var _user$project$ExamplesGenerated$haskell = '; Haskell.org Logo\n; SVG version of https://www.haskell.org/static/img/logo.png?etag=rJR84DMh\n;\n; Try making a slider for the bend amount to adjust that parameter indirectly.\n;\n(def [wedgeWidth lambdaWidth equalsWidth] [120 120 90])\n(def [wedgePos lambdaPos equalsPos] [0! 170 440])\n(def [totalHeight totalWidth] [512! 752!])\n(def bend (/ 3.14159! 5.3))\n(def equalsSep 40)\n(def [wedgeColor lambdaColor equalsColor] \n        [[69 58 98 100]\n         [97 82 138 100]\n         [143 78 139 100]])\n(def tan (\\theta (/ (sin theta) (cos theta))))\n(def leftWedge (path wedgeColor \'black\' 0\n    [ \'M\' wedgePos 0!\n      \'L\' (+ wedgePos (* (/ totalHeight 2!) (tan bend))) (/ totalHeight 2!)\n      \'L\' wedgePos totalHeight\n      \'L\' (+ wedgePos wedgeWidth) totalHeight\n      \'L\' (+ wedgePos (+ wedgeWidth (* (/ totalHeight 2!) (tan bend))))\n          (/ totalHeight 2!)\n      \'L\' (+ wedgeWidth wedgePos) 0!\n      \'Z\']))\n(def lambda (path lambdaColor \'black\' 0\n    [ \'M\' lambdaPos \n          0!\n      \'L\' (+ lambdaPos (* (/ totalHeight 2!) (tan bend))) \n          (/ totalHeight 2!)\n      \'L\' lambdaPos \n          totalHeight\n      \'L\' (+ lambdaPos lambdaWidth) \n          totalHeight\n      \'L\' (+ (+ lambdaPos (* (/ totalHeight 2!) (tan bend))) (/ lambdaWidth 2!)) \n          (+ (/ totalHeight 2!) (/ lambdaWidth (* 2! (tan bend))))\n      \'L\' (+ lambdaPos (* totalHeight (tan bend)))\n          totalHeight\n      \'L\' (+ lambdaPos (+ lambdaWidth (* totalHeight (tan bend))))\n          totalHeight\n      \'L\' (+ lambdaPos lambdaWidth)\n          0!\n      \'Z\']))\n(def equals \n  [ (path equalsColor \'black\' 0\n      [ \'M\' equalsPos\n            (- (- (/ totalHeight 2!) (* equalsSep 0.25!)) (* equalsWidth (cos bend)))\n        \'L\' totalWidth\n            (- (- (/ totalHeight 2!) (* equalsSep 0.25!)) (* equalsWidth (cos bend)))\n        \'L\' totalWidth\n            (- (/ totalHeight 2!) (* equalsSep 0.25!))\n        \'L\' (+ equalsPos (* equalsWidth (sin bend)))\n            (- (/ totalHeight 2!) (* equalsSep 0.25!))\n        \'Z\'])\n    (path equalsColor \'black\' 0\n      [ \'M\' (+ equalsPos (+ (* equalsWidth (sin bend)) (* equalsSep (tan bend))))\n            (+ (/ totalHeight 2!) (* equalsSep 0.75!))\n        \'L\' totalWidth\n            (+ (/ totalHeight 2!) (* equalsSep 0.75!))\n        \'L\' totalWidth\n            (+ (+ (/ totalHeight 2!) (* equalsSep 0.75!)) (* equalsWidth (cos bend)))\n        \'L\' (+ equalsPos (+ (* 2! (* equalsWidth (sin bend))) (* equalsSep (tan bend))))\n            (+ (+ (/ totalHeight 2!) (* equalsSep 0.75!)) (* equalsWidth (cos bend)))\n        \'Z\'])])\n(svg (append [leftWedge lambda] equals))\n';
var _user$project$ExamplesGenerated$wikimedia = '; Wikimedia Logo\n; Recreation of https://upload.wikimedia.org/wikipedia/commons/8/81/Wikimedia-logo.svg\n \n; The white objects are an example of using masks as opposed to paths to create\n; more complicated forms, such as the green \'wings\' and broken ring of this logo.\n \n(def [greenr innerBluer outerBluer] [110! 134! 180!])\n(def [wedgeTheta barWidth barHeight] [(/ 3.14159! 4!) 32 150])\n(def [dotRed wingGreen ringBlue] [\'#900\' \'#396\' \'#069\'])\n(def [centerx centery] [256! 256!])\n(def greenCirc (circle wingGreen centerx centery greenr))\n(def whiteRing (circle \'white\' centerx centery innerBluer))\n(def blueCirc (circle ringBlue centerx centery outerBluer))\n(def rightPtx (+ centerx (* outerBluer (sin wedgeTheta))))\n(def leftPtx (- centery (* outerBluer (sin wedgeTheta))))\n(def pty (- (- centery 16) (* outerBluer (cos wedgeTheta))))\n(def whiteWedge \n    (path \'white\' \'black\' 0 \n        [ \'M\' centerx (- centery 16)\n          \'L\' rightPtx pty\n          \'A\' outerBluer outerBluer 0 0 0 leftPtx pty\n          \'Z\']))\n(def whiteBar (rect \'white\' (- centerx (/ barWidth 2!)) (- centery 32!) barWidth barHeight))\n(def redDot (circle \'#900\' centerx 128! 64!))\n\n(svg [blueCirc whiteRing greenCirc whiteWedge whiteBar redDot])\n\n';
var _user$project$ExamplesGenerated$eyeIcon = '; An eye icon\n; Recreation of https://commons.wikimedia.org/wiki/Category:SVG_eye_icons#/media/File:Eye_open_font_awesome.svg\n;\n; Try unfreezing:\n;   glintr, and manipulating the glint control points\n;   cornear, and manipulating the cornea radius\n;   glintWidth, and manipulating the glint control points\n;   Any of the outer/inner parameters, and seeing what happens!\n;\n(def [outerStartx outerStarty innerStartx innerStarty] [16! 240! 50 256!])\n(def [outerWidth innerWidth outerHeight innerHeight sharpness] [480 412 -60 0 16])\n(def [corneax corneay cornear glintr glintWidth] [256! 216! 120! 50! 24])\n(def midline 256!)\n(def outerBorder\n  (path\n    \'black\'\n    \'black\'\n    0\n    [\'M\' outerStartx outerStarty\n     \'Q\' midline outerHeight (+ outerStartx outerWidth) outerStarty\n     \'Q\' (+ (+ outerStartx outerWidth) sharpness) 256! (+ outerStartx outerWidth) (+ outerStarty 32!)\n     \'Q\' midline (- 512! outerHeight) outerStartx (+ outerStarty 32!)\n     \'Q\' (- outerStartx sharpness) 256! outerStartx outerStarty\n     \'Z\']))\n(def innerBorder\n  (path\n    \'white\'\n    \'black\'\n    0\n    [\'M\' innerStartx innerStarty\n     \'Q\' midline innerHeight (+ innerStartx innerWidth) innerStarty\n     \'Q\' midline (- 512! innerHeight) innerStartx innerStarty\n     \'Z\']))\n(def cornea (circle \'black\' corneax corneay cornear))\n(def glint\n  (path\n    \'white\'\n    \'black\'\n    0\n    [\'M\' corneax (- corneay (+ glintr glintWidth))\n     \'A\' (/ glintWidth 2!) (/ glintWidth 2!) 0 0 1 corneax (- corneay glintr)\n     \'A\' glintr glintr 0 0 0 (- corneax glintr) corneay\n     \'A\' (/ glintWidth 2!) (/ glintWidth 2!) 0 0 1 (- corneax (+ glintr glintWidth)) corneay\n     \'A\' (+ glintr glintWidth) (+ glintr glintWidth) 0 0 1 corneax (- corneay (+ glintr glintWidth))\n     \'Z\']))\n(svg  [outerBorder innerBorder cornea glint])\n\n';
var _user$project$ExamplesGenerated$sailBoat = '; A sail boat on the ocean\n;\n; Try mainupulating:\n;   - The position of the boat by dragging the sail\n;   - The height of the waves by moving the path control points with zones on\n;   - The frequency of the waves\n;   - The sea level\n\n(def [sealevel amplitude period boatpos] [300 40 200 400])\n(def [oceancolor backgroundcolor] [[28 107 160 50] [135 206 250 100]])\n\n(def wave (\\([sx sy] [ex ey] amplitude)\n            [ (path oceancolor \'black\' 0 \n                [ \'M\' sx sy \n                  \'Q\' (+ sx (/ period 4!)) (- sy amplitude) \n                  (+ sx (/ period 2!)) sy\n                  \'Z\'])\n              (path backgroundcolor \'black\' 0\n                  [ \'M\' (+ sx (/ period 2!)) sy\n                    \'Q\' (+ sx (* period 0.75!)) (+ sy amplitude)\n                    ex ey \n                    \'Z\' ])]))\n\n(def nodes\n  (map2 (\\(a b) [(* a period) b])\n        (range 0! (round (/ 3000 period)))\n        (repeat (round (/ 4000 period)) sealevel)))\n\n(defrec mkwaves \n  (\\l (case l \n    ([] [])\n    ([x] [])\n    ([a b | rest] (append (wave a b amplitude) (mkwaves [ b | rest ]))))))\n\n(def backdrop (rect backgroundcolor -400! -400! 2400! 2400!))\n(def sun (circle \'yellow\' 50 0 70))\n(def deepwater (rect oceancolor -400! sealevel 2400! 4000!))\n(def quadraticbezier (\\(s c e t) (+ (+ \n    (* (* (- 1 t) (- 1 t)) s) \n    (* (* (* 2 (- 1 t)) t) c)) \n    (* (* t t) e))))\n\n(def tphase (/ (mod boatpos (/ period 2)) (/ period 2)))\n(def pickdir (\\(sl amp) (if \n    (< (mod boatpos period) (/ period 2))\n      (- sl amp) \n      (+ sl amp))))\n\n(def boat\n  (let boaty (quadraticbezier sealevel (pickdir sealevel amplitude) sealevel tphase)\n  (let hull (path \'saddlebrown\' \'black\' 0\n    [ \'M\' (- boatpos 30) (- boaty 10)\n      \'C\' (- boatpos 30) (+ boaty 15)\n      (+ boatpos 30) (+ boaty 15)\n      (+ boatpos 30) (- boaty 10)\n      \'Z\'])\n  (let mast (rect \'saddlebrown\' (+ boatpos 10) (- boaty 60) 5 50)\n  (let sail (rect \'beige\' (- boatpos 15!) (- boaty 50!) 50 30)\n  [mast hull sail])))))\n\n(svg \n  (concat [\n    [ backdrop sun deepwater ]\n    (mkwaves nodes)\n    boat]))\n\n';
var _user$project$ExamplesGenerated$paths5 = '; Adapted from:\n; https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\n;\n(svg [\n  (path \'green\' \'black\' 2\n    [\'M\' 80 80 \'A\' 45 45 0 0 0 125 125 \'L\' 125 80 \'Z\'])\n  (path \'red\' \'black\' 2\n    [\'M\' 230 80 \'A\' 45 45 0 1 0 275 125 \'L\' 275 80 \'Z\'])\n  (path \'purple\' \'black\' 2\n    [\'M\' 80 230 \'A\' 45 45 0 0 1 125 275 \'L\' 125 230 \'Z\'])\n  (path \'blue\' \'black\' 2\n    [\'M\' 230 230 \'A\' 45 45 0 1 1 275 275 \'L\' 275 230 \'Z\'])\n])\n\n';
var _user$project$ExamplesGenerated$paths4 = '; Adapted from:\n; https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\n;\n(svg [\n  (addAttr\n    (path \'green\' \'black\' 2\n      [\'M\' 10 315\n       \'L\' 110 215\n       \'A\' 30 50 0 0 1 162.55 162.45\n       \'L\' 172.55 152.45\n       \'A\' 30 50 -45 0 1 215.1 109.9\n       \'L\' 315 10])\n    [\'opacity\' 0.5])\n])\n\n';
var _user$project$ExamplesGenerated$paths3 = '(svg [\n  (path_ [\'M\' 10 80 \'C\' 40 10 65 10 95 80 \'S\' 150 150 180 80])\n  (path_ [\'M\' 10 80 \'Q\' 95 10 180 80])\n  (path_ [\'M\' 10 80 \'Q\' 52.5 10 95 80 \'T\' 180 80])\n])\n\n';
var _user$project$ExamplesGenerated$paths2 = '; Adapted from:\n; https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\n;\n; Turn on the zones to see the Bezier control points.\n; Try replacing \"svg\" with \"svgViewBox 200 200\".\n;\n(svg [\n  (path_ [\'M\' 10 10   \'C\' 20 20 40 20 50 10])\n  (path_ [\'M\' 70 10   \'C\' 70 20 120 20 120 10])\n  (path_ [\'M\' 130 10  \'C\' 120 20 180 20 170 10])\n  (path_ [\'M\' 10 60   \'C\' 20 80 40 80 50 60])\n  (path_ [\'M\' 70 60   \'C\' 70 80 110 80 110 60])\n  (path_ [\'M\' 130 60  \'C\' 120 80 180 80 170 60])\n  (path_ [\'M\' 10 110  \'C\' 20 140 40 140 50 110])\n  (path_ [\'M\' 70 110  \'C\' 70 140 110 140 110 110])\n  (path_ [\'M\' 130 110 \'C\' 120 140 180 140 170 110])\n])\n\n';
var _user$project$ExamplesGenerated$paths1 = '(svg [\n  (path_ [\'M\' 10 10 \'H\' 90 \'V\' 90 \'H\' 10 \'L\' 10 10 \'Z\'])\n  (path_ [\'M\' 20 20 \'L\' 60 20 \'L\' 60 80 \'Z\'])\n  (path_ [\'M\' 150 0 \'L\' 75 200 \'L\' 225 200 \'Z\'])\n])\n\n';
var _user$project$ExamplesGenerated$miscShapes = '(let [x y] [200 150] (svg [\n  (rect \'#999999\'  50 10 80 130)\n  (circle \'lightblue\' 300 100 50)\n  (ellipse \'orange\' 40 280 30 50)\n  (polygon \'lightgreen\' \'black\' 5 [[110 110] [300 110] [x y]])\n  (polygon \'lightgreen\' \'black\' 5 [[110 210] [300 210] [x y]])\n  (line \'blue\' 4 10 20 300 40)\n]))\n\n';
var _user$project$ExamplesGenerated$clique = ';\n; A six node clique\n;\n(let node (\\[x y] (circle \'lightblue\' x y 20))\n(let edge (\\[[x y] [i j]] (line \'lightgreen\' 5 x y i j))\n(letrec genpairs\n   (\\xs\n     (case xs\n       ([x y | xx] [[x y] | (append (genpairs (cons x xx)) (genpairs (cons y xx)))])\n       ([x] [])\n       ([] [])))\n(let pts [[200 50] [400 50] [100 223] [200 389] [400 391] [500 223]]\n(let nodes (map node pts)\n(let pairs (genpairs  pts)\n(let edges (map edge pairs)\n  (svg (append edges nodes)))))))))\n\n';
var _user$project$ExamplesGenerated$stickFigures = ';\n; A diagram of a sketch-n-sketch demo w/ audience\n;\n(let [x0 y0 w h] [60 -22 417! 915!]\n(let wstripe (/ w 6!)\n(let xoff (+ x0 wstripe)\n(let yoff (+ y0 (/ h 4!))\n(let minrad (if (< (/ wstripe 7.5!) (/ h 30!)) (/ wstripe 7.5!) (/ h 15!))\n(let min (if (< w h) (* 0.6! w) (* 0.6! h))\n(let figure\n  (\\(x y)\n    (let [x1 x2 x3] (map (\\n (+ x (* wstripe n))) [1.2! 1.5! 1.8!])\n    (let [y1 yh y2 y3 y4] (map (\\n (+ y (/ (/ h 2!) n))) [4.3! 2.2! 2.8! 1.9! 1.4!])\n    (let figline (\\[[a b] [c d]] (line \'black\' (/ minrad 2!) a b c d))\n      (snoc\n        (circle \'black\' x2 y1 (/ wstripe 3.75!))\n        (map\n          figline\n          [[[x1 yh] [x1 y2]]\n           [[x1 y2] [x3 y2]]\n           [[x3 yh] [x3 y2]]\n           [[x1 y4] [x1 y3]]\n           [[x1 y3] [x3 y3]]\n           [[x3 y3] [x3 y4]]\n           [[x2 y1] [x2 y3]]]))))))\n(let logo\n  (\\(x y)\n    (let [xl yl wl hl delta] [x y 90 90 6.5]\n    (let [xw yh w2 h2] [(+ xl wl) (+ yl hl) (div wl 2) (div hl 2)]\n    (let poly (\\pts (polygon \'black\' \'none\' 0 pts))\n      [(rect \'white\' xl yl wl hl)\n       (poly  [[(+ xl delta) yl] [xw yl] [xw (- yh delta)]])\n       (poly  [[xl (+ yl delta)] [xl (- yh delta)] [(- (+ xl w2) delta) (+ yl h2)]])\n       (poly  [[(+ xl delta) yh] [(- xw delta) yh] [(+ xl w2) (+ (+ yl h2) delta)]])]))))\n  ;\n  (let textBoxes\n    [ (addAttr (text 160 160 \'Laptop on Table\') [\'font-size\' 40])\n      (addAttr (text 30 600 \'Demonstrators\') [\'font-size\' 40])\n      (addAttr (text 550 660 \'Audience\') [\'font-size\' 40])\n    ]\n  ;\n  (svg (append textBoxes\n    (append\n      [(polygon\n        \'#CD7F32\'\n        \'none\'\n        0\n        [[508 511]\n         [497 347]\n         [200 354]\n         [188 512]\n         [171 334]\n         [133 287]\n         [133 435]\n         [110 257]\n         [443 250]\n         [520 324]])\n       (polygon \'none\' \'black\' 4 [[106 256] [445 251] [524 325] [183 334]])\n       (rect \'gray\' 230! 184! 103 102)\n       (polygon \'gray\' \'black\' 2 [[250 295] [357 294] [393 312] [282 312]])]\n      (append\n        (logo 238 190)\n        (concatMap\n          (\\[x y] (figure (+ x0 x) (+ y0 y)))\n          [[-24 245] [-96 140] [325 321] [405 184] [474 298]]))))))))))))))\n\n';
var _user$project$ExamplesGenerated$hilbertCurveAnimation = '; How to draw a Hilbert curve.\n;\n; https://thoughtstreams.io/jtauber/on-drawing-owls-and-teaching-non-beginners/\n; 1. Draw a U.\n; 2. Draw the rest of the curve.\n;\n\n; What fraction of the final curve should we draw?\n; Time 0 to 0.5: none. Draw curve from time 0.5 to 1.\n(def curveFractionToDraw (\\time\n  (if (gt time 0.5)\n    (- (* time 2.0) 1.0)\n    0\n  )\n))\n\n; For when all the Hilbert levels but the most detailed fade out together.\n(def earlierLevelOpacity (\\time\n  (pow (- 1.0 (curveFractionToDraw time)) 2)\n))\n\n; The basic U.\n;\n; We can\'t center this around 0,0 because of some weird clipping with the view box.\n(def hilbertPart_ [\n  (path \'none\' \'green\' 0.4 [ \'M\' 10 10 \'L\' 10 20 \'L\' 20 20 \'L\' 20 10 ])\n  (circle \'red\' 10 10 1)\n])\n\n; We use SVG transforms to position, rotate, and size the U.\n(def hilbertPart (\\(centerX centerY width rotation orientation opacity)\n  [\n    \'g\'\n    [\n      [\'transform\' [[\'translate\' centerX centerY] [\'rotate\' rotation 0 0] [\'scale\' (/ width 20) (/ width 20)] [\'scale\' orientation 1] [\'translate\' -15 -15]]]\n      [\'opacity\' opacity]\n    ]\n    hilbertPart_\n  ]\n))\n\n; Add 90 degrees.\n(def rotateAngleRight (\\a\n  (if (= a 0)\n    90\n    (if (= a 90)\n      180\n      (if (= a 180)\n        -90\n        (if (= a -90)\n          0\n          \'error\'\n        )\n      )\n    )\n  )\n))\n\n; Angle 0 is straight up, so basically -angle.\n(def flipAngleVertical (\\a\n  (if (or (= a 0) (= a 180))\n    a\n    (- 0 a)\n  )\n))\n\n; Rotates by 90 degrees around 0,0\n(def rotatePointRight (\\[x y]\n  (if (and (lt 0 x) (lt 0 y))\n    [(- 0 x) y]\n    (if (and (gt 0 x) (lt 0 y))\n      [x (- 0 y)]\n      (if (and (gt 0 x) (gt 0 y))\n        [(- 0 x) y]\n        (if (and (lt 0 x) (gt 0 y))\n          [x (- 0 y)]\n          \'error\'\n        )\n      )\n    )\n  )\n))\n\n; Want to always rotate the short way around the circle.\n(defrec circularDisplacement (\\(a b)\n  (let diff (- b a)\n    (if (gt diff 180)\n      (circularDisplacement a (- b 360))\n      (if (le diff -180)\n        (circularDisplacement a (+ b 360))\n        diff\n      )\n    )\n  )\n))\n\n; Clamp angle to (-180, 180]\n(def normalizeRotation (\\angle\n  (circularDisplacement 0 angle)\n))\n\n(def rotateChildrenRight (\\[\n    [ x1 y1 rot1 or1 ]\n    [ x2 y2 rot2 or2 ]\n    [ x3 y3 rot3 or3 ]\n    [ x4 y4 rot4 or4 ]\n  ]\n  [\n    (append (rotatePointRight [x1 y1]) [(rotateAngleRight rot1) or1])\n    (append (rotatePointRight [x2 y2]) [(rotateAngleRight rot2) or2])\n    (append (rotatePointRight [x3 y3]) [(rotateAngleRight rot3) or3])\n    (append (rotatePointRight [x4 y4]) [(rotateAngleRight rot4) or4])\n  ]\n))\n\n(def flipChildrenVertical (\\[\n    [ x1 y1 rot1 or1 ]\n    [ x2 y2 rot2 or2 ]\n    [ x3 y3 rot3 or3 ]\n    [ x4 y4 rot4 or4 ]\n  ]\n  [\n    [ (- 0 x1) y1 (flipAngleVertical rot1) (- 0 or1) ]\n    [ (- 0 x2) y2 (flipAngleVertical rot2) (- 0 or2) ]\n    [ (- 0 x3) y3 (flipAngleVertical rot3) (- 0 or3) ]\n    [ (- 0 x4) y4 (flipAngleVertical rot4) (- 0 or4) ]\n  ]\n))\n\n; Returns [ [relX relY rotation orientation] ... ]\n(def hilbertChildParams (\\(rotation orientation)\n  (let initial [\n      [-1 -1  -90 -1]\n      [-1  1    0  1]\n      [1   1    0  1]\n      [1  -1   90 -1]\n    ]\n  (let oriented (if (= orientation 1) initial (flipChildrenVertical initial))\n    (if (= rotation 0)\n      oriented\n      (if (= rotation 90)\n        (rotateChildrenRight oriented)\n        (if (= rotation 180)\n          (rotateChildrenRight (rotateChildrenRight oriented))\n          (rotateChildrenRight (rotateChildrenRight (rotateChildrenRight oriented)))\n        )\n      )\n    )\n  ))\n))\n\n; Recursively draw the U\'s with the proper animation and opacity.\n(defrec hilbertParts (\\(time depth levelPartCount partNumber opacity centerX centerY width rotation orientation)\n  (let thisLevel (hilbertPart centerX centerY width rotation orientation (* (pow 0.5 depth) opacity))\n    (if (le depth 0)\n      (if (gt opacity 0.005)\n        [thisLevel]\n        []\n      )\n      (append\n        (concat (map2\n          (\\(i [relX relY rot or])\n            (let [targetX targetY targetWidth targetRot targetOr]\n              [\n                (+ centerX (* relX (/ width 4)))\n                (+ centerY (* relY (/ width 4)))\n                (/ width 2)\n                (+ rotation (circularDisplacement rotation rot))\n                or\n              ]\n            (let thisLevelPartCount (* levelPartCount 4)\n            (let thisPartNumber (+ (* partNumber 4) i)\n            (let animationFraction\n              (if (le depth 1)\n                (let partAndFraction (* (* time 2) thisLevelPartCount)\n                  (if (le partAndFraction thisPartNumber)\n                    0\n                    (if (ge partAndFraction (+ thisPartNumber 1))\n                      1\n                      (- partAndFraction thisPartNumber)\n                    )\n                  )\n                )\n                1\n              )\n            (let [movementFraction orientationFraction]\n              (if (= orientation targetOr)\n                [animationFraction 1]\n                (if (lt animationFraction 0.5)\n                  [(* animationFraction 2) 0]\n                  [1 (- (* animationFraction 2) 1)]\n                )\n              )\n            (let [aniX aniY aniWidth aniRot aniOr] [\n                (+ (* centerX     (- 1 movementFraction   )) (* targetX     movementFraction))\n                (+ (* centerY     (- 1 movementFraction   )) (* targetY     movementFraction))\n                (+ (* width       (- 1 movementFraction   )) (* targetWidth movementFraction))\n                (+ (* rotation    (- 1 movementFraction   )) (* targetRot   movementFraction))\n                (+ (* orientation (- 1 orientationFraction)) (* targetOr    orientationFraction))\n              ]\n            (let opacity\n              (if (gt (curveFractionToDraw time) 0.0)\n                (if (le depth 1)\n                  (let partAndFraction (* (curveFractionToDraw time) thisLevelPartCount)\n                    (if (le partAndFraction thisPartNumber)\n                      1\n                      (if (ge partAndFraction (+ thisPartNumber 1))\n                        0\n                        (- 1 (- partAndFraction thisPartNumber))\n                      )\n                    )\n                  )\n                  (earlierLevelOpacity time)\n                )\n                1\n              )\n              (if (gt animationFraction 0)\n                (hilbertParts time (- depth 1) thisLevelPartCount thisPartNumber opacity aniX aniY aniWidth aniRot aniOr)\n                []\n              )\n            )))))))\n          )\n          (range 0 3)\n          (hilbertChildParams (normalizeRotation rotation) orientation)\n        ))\n        [thisLevel]\n      )\n    )\n  )\n))\n\n; Four points in a block.\n(def hilbertPoints_ (\\(centerX centerY width rotation orientation)\n  (let quarterWidth (/ width 4)\n    (map\n      (\\[relX relY _ _]\n        [(+ centerX (* relX quarterWidth)) (+ centerY (* relY quarterWidth))]\n      )\n      (hilbertChildParams rotation orientation)\n    )\n  )\n))\n\n; List of points on the curve in order. [ [100 100] [150 100] ... ]\n(defrec hilbertPoints (\\(depth centerX centerY width rotation orientation)\n  (let thisLevel (hilbertPoints_ centerX centerY width rotation orientation)\n    (if (le depth 0)\n      thisLevel\n      (concatMap\n        (\\[relX relY childRot childOr]\n          (let [childX childY childWidth]\n            [\n              (+ centerX (* relX (/ width 4)))\n              (+ centerY (* relY (/ width 4)))\n              (/ width 2)\n            ]\n            (hilbertPoints (- depth 1) childX childY childWidth childRot childOr)\n          )\n        )\n        (hilbertChildParams (normalizeRotation rotation) orientation)\n      )\n    )\n  )\n))\n\n; Returns the first n elements of the list\n(def take (\\(n list)\n  (map2\n    always\n    list\n    (range 1 n)\n  )\n))\n\n; Returns element i (starting from 0) from a list\n(def fetch (\\(i list)\n  (fst (foldl\n    (\\(x [ret thisI])\n      (if (= 0 thisI)\n        [x (- thisI 1)]\n        [ret (- thisI 1)]\n      )\n    )\n    [nil i]\n    list\n  ))\n))\n\n; When drawing the final curve, which points should we draw?\n;\n; All the complexity here is for adding a point part-way between\n; the last point and the next point based on the time.\n(def hilbertPointsAnimated (\\(time depth centerX centerY width rotation orientation)\n  (if (gt (curveFractionToDraw time) 0)\n    (let allPoints (hilbertPoints depth centerX centerY width rotation orientation)\n    (let count (len allPoints)\n    (let countToDraw (floor (* (curveFractionToDraw time) count))\n    (let partialLineFraction (- (* (curveFractionToDraw time) count) countToDraw)\n    (let pointsToDraw (take countToDraw allPoints)\n      (if (and (gt partialLineFraction 0) (gt countToDraw 0))\n        (let [lastPointX lastPointY] (fetch (- countToDraw 1) allPoints)\n        (let [nextPointX nextPointY] (fetch countToDraw allPoints)\n        (let lastPointToDraw\n          [\n            (+ (* lastPointX (- 1 partialLineFraction)) (* nextPointX partialLineFraction))\n            (+ (* lastPointY (- 1 partialLineFraction)) (* nextPointY partialLineFraction))\n          ]\n          (snoc lastPointToDraw pointsToDraw)\n        )))\n        (if (gt countToDraw 1)\n          pointsToDraw\n          [[0 0]]\n        )\n      )\n    )))))\n    [[0 0]]\n  )\n))\n\n; Draw the curve as one long path at the end of the animation.\n(def hilbertCurve (\\(time depth centerX centerY width rotation orientation)\n  (let [[firstX firstY]|otherPoints] (hilbertPointsAnimated time depth centerX centerY width rotation orientation)\n    [(path \'none\' \'blue\' 5\n      [ \'M\' firstX firstY | (concatMap (\\[x y] [\'L\' x y]) otherPoints) ]\n    )]\n  )\n))\n\n(def crossfade (\\(a b t)\n  (+\n    (* a (- 1.0 t))\n    (* b t)\n  )\n))\n\n(def maxLevels 3)\n\n[\n  maxLevels\n  (\\slideNumber\n    (let level slideNumber\n    (let levelPartCount (pow 4 level)\n    (let drawingParts (lt level maxLevels)\n\n      [\n        (if drawingParts (+ 1 levelPartCount) 1)\n        (\\slideMovieNumber\n          (if (and drawingParts (= 1 slideMovieNumber))\n            [\n              \'Dynamic\'\n              0.5\n              (\\(slideNumber movieNumber t)\n                (let relT (* t 2.0)\n                  [\'svg\' [[\'opacity\' (crossfade 1.0 0.5 relT)]] (hilbertParts 0.5 (- level 1) 1 0 1.0 300 300 400 0 1)]\n                )\n              )\n              (not (= slideNumber 1))\n            ]\n            (if drawingParts\n              (let animationDuration (* 3 (pow 0.5 level))\n                [\n                  \'Dynamic\'\n                  animationDuration\n                  (\\(slideNumber movieNumber t)\n                    (let localT (/ (+ (/ (/ t animationDuration) levelPartCount) (* (/ 1.0 levelPartCount) (- movieNumber 2))) 2)\n                      (svg (hilbertParts localT level 1 0 1.0 300 300 400 0 1))\n                    )\n                  )\n                  (and (gt slideMovieNumber 5) (le slideMovieNumber levelPartCount))\n                ]\n              )\n              (let animationDuration 9\n                [\n                  \'Dynamic\'\n                  animationDuration\n                  (\\(slideNumber movieNumber t)\n                    (let localT (+ 0.5 (/ (/ t animationDuration) 2))\n                      (let elements [\n                        (hilbertParts localT (- maxLevels 1) 1 0 (earlierLevelOpacity localT) 300 300 400 0 1)\n                        (hilbertCurve localT (- maxLevels 1) 300 300 400 0 1)\n                      ]\n                      (svg (concat elements))\n                    ))\n                  )\n                  false\n                ]\n              )\n            )\n          )\n        )\n      ]\n    )))\n  )\n]\n';
var _user$project$ExamplesGenerated$fractalTree = '; A fractal tree\n;\n(def nsin (\\n (if (< n (/ 3.14159 2)) (sin n) (cos (mod n (/ 3.14159 2))))))\n(def ncos (\\n (if (< n (/ 3.14159 2)) (cos n) (sin (mod n (/ 3.14159 2))))))\n(def [initwd initlen] [10! 150!])\n(def [steps stepslider] (hSlider true 20! 420! 550! 3! 8! \'Steps \' 4))\n(def [bendn bendnslider] (hSlider false 20! 420! 580! 1! 8! \'Bend \' 1))\n(def initangle (/ 3.14159! 2!))\n(def bend (/ 3.14159! bendn))\n(defrec exp (\\(b p)\n  (if (< p 1) 1 (* b (exp b (- p 1))))))\n(def mkleftx (\\(stepnum theta px) \n  (- px (* (/ initlen stepnum) (ncos (+ theta (* (exp 0.5 stepnum) bend)))))))\n(def mkrightx (\\(stepnum theta px)\n  (+ px (* (/ initlen stepnum) (ncos (- theta (* (exp 0.5 stepnum) bend)))))))\n(def mklefty (\\(stepnum theta py)\n  (- py (* (/ initlen stepnum) (nsin (+ theta (* (exp 0.5 stepnum) bend)))))))\n(def mkrighty (\\(stepnum theta py)\n  (- py (* (/ initlen stepnum) (nsin (- theta (* (exp 0.5 stepnum) bend)))))))\n(defrec genchildren (\\(stepnum maxstep theta px2 py2) \n  (if (< maxstep stepnum) \n    [] \n    (append \n      [ (line \'black\' (/ initwd stepnum) px2 py2 \n          (mkleftx stepnum theta px2)\n          (mklefty stepnum theta py2))\n        (line \'black\' (/ initwd stepnum) px2 py2\n          (mkrightx stepnum theta px2)\n          (mkrighty stepnum theta py2))]\n      (append\n        (genchildren (+ stepnum 1) maxstep (+ theta (* (exp 0.5 stepnum) bend))\n          (mkleftx stepnum theta px2)\n          (mklefty stepnum theta py2))\n        (genchildren (+ stepnum 1) maxstep (- theta (* (exp 0.5 stepnum) bend))\n          (mkrightx stepnum theta px2)\n          (mkrighty stepnum theta py2)))))))\n(def trunk (line \'black\' initwd 210 400 210 250))\n(def branches (genchildren 2 steps initangle 210 250))\n(svg (concat [ [ trunk | branches ] bendnslider stepslider]))\n\n';
var _user$project$ExamplesGenerated$solarSystem = '; Visualization of the solar system \n;\n; The slider on top controls the \"animation.\"\n; Try changing the size of a planet in one frame,\n;   and see what happens in the others.\n \n(def aupx 12)\n(def [ox oy] [200 400])\n\n; Relative radii of the planet orbits, in au\n(def [ merorb venorb earorb marorb juporb satorb uraorb neporb ] \n     [ 0.387! 0.723! 1! 1.524! 5.203! 9.539! 19.18! 30.06! ]\n)\n\n; Relative orbital period to the Earth\n(def [ meryr venyr earyr maryr jupyr satyr urayr nepyr ]\n     [ 0.2409! 0.616! 1! 1.9! 12! 29.5! 84! 165! ]\n)\n\n; Function to place a body\n(def planet (\\(color orb yr radius)\n  (\\t (circle color  (+ ox (* aupx (* orb (cos (* t (/ 6.28318 yr))))))\n                       (+ oy (* aupx (* orb (sin (* t (/ -6.28318 yr))))))\n                       radius))))\n\n; Visual for each body\n; Each takes a time to be displayed at\n(def sun (circle \'yellow\' ox oy 10))\n(def mercury (planet \'lightred\'   merorb meryr 4))\n(def venus   (planet \'orange\'     venorb venyr 5))\n(def earth   (planet \'green\'      earorb earyr 5))\n(def mars    (planet \'red\'        marorb maryr 4))\n(def jupiter (planet \'brown\'      juporb jupyr 6))\n(def saturn  (planet \'sandybrown\' satorb satyr 6))\n(def uranus  (planet \'blue\'       uraorb urayr 6))\n(def neptune (planet \'darkblue\'   neporb nepyr 6))\n\n; Visual for the rings\n(def rings\n  (reverse\n    (map (\\orb (ring \'lightgrey\' 2! ox oy (* aupx orb)))\n         [ merorb venorb earorb marorb juporb satorb uraorb neporb ])))\n\n(def [time timeslider] (hSlider true 20! 600! 20! 1! 1000! \'Day \' 1))\n(def rev (\\(x f) (f x)))\n(def planets\n  (map (rev (/ time 365))\n       [mercury venus earth mars jupiter saturn uranus neptune]))\n\n(svg (concat [ rings [sun | planets] timeslider ]))\n\n';
var _user$project$ExamplesGenerated$pieChart1 = '; A Pie Chart\n;\n; Move the sliders to change the size of a particular slice\n;\n(let [count1_ count2_ count3_ count4_ count5_] [35 31 16 10 8]\n(let [color1 color2 color3 color4 color5] [\'#8DEEEE\' \'#66CCCC\' \'#49E9BD\' \'#5EDA9E\' \'#00FA9A\']\n(let [h1 h2 h3 h4 h5] [20! 50! 80! 110! 140!]\n(let [count1 s1] (hSlider true 20! 420! h1 0! 100! \'\' count1_)\n(let [count2 s2] (hSlider true 20! 420! h2 0! 100! \'\' count2_)\n(let [count3 s3] (hSlider true 20! 420! h3 0! 100! \'\' count3_)\n(let [count4 s4] (hSlider true 20! 420! h4 0! 100! \'\' count4_)\n(let [count5 s5] (hSlider true 20! 420! h5 0! 100! \'\' count5_)\n(let total (+ count1 (+ count2 (+ count3 (+ count4 count5))))\n(let p2 (+ count1 count2)\n(let p3 (+ p2 count3)\n(let p4 (+ p3 count4)\n(let p5 (+ p4 count5)\n;\n(let sliders (concat [s1 s2 s3 s4 s5])\n(let swatches (map (\\[h c] (square c 460! (- h 10!) 20!)) [[h1 color1] [h2 color2] [h3 color3] [h4 color4] [h5 color5]])\n(let [cx cy r t border] [280! 440! 180 4 \'grey\']\n;\n(let pie\n  (let pToDegrees (\\p (* 360! (/ p total)))\n  (let [d1 d2 d3 d4 d5] (map pToDegrees [count1 p2 p3 p4 p5])\n  (let flag (\\d (if (< 180 d) 1 0))\n  (let flagged (map (\\[d fr] [d (flag fr)]) [[d1 d1] [d2 (- d2 d1)] [d3 (- d3 d2)] [d4 (- d4 d3)] [d5 (- d5 d4)]])\n  (let toRadian (\\[d f] [(* (/ (pi) 180!) d) f])\n  (let polarcoords (map toRadian flagged)\n  (let slice (\\[ang flg] [flg (* r (cos ang)) (* r (sin ang))])\n  (let [[f1 x1 y1] [f2 x2 y2] [f3 x3 y3] [f4 x4 y4] [f5 x5 y5]] (map slice polarcoords)\n  (let wedge (\\[color f [sx sy] [ex ey]] (path color border t [\'M\' cx cy \'L\' sx sy \'A\' 180 180 0 f 1 ex ey \'Z\']))\n  (let wedges \n    (map\n      wedge\n        [[color1 f1 [(+ cx 180!) cy] [(+ cx x1) (+ cy y1)]]\n        [color2 f2 [(+ cx x1) (+ cy y1)] [(+ cx x2) (+ cy y2)]]\n        [color3 f3 [(+ cx x2) (+ cy y2)] [(+ cx x3) (+ cy y3)]]\n        [color4 f4 [(+ cx x3) (+ cy y3)] [(+ cx x4) (+ cy y4)]]\n        [color5 f5 [(+ cx x4) (+ cy y4)] [(+ cx x5) (+ cy y5)]]])\n  wedges))))))))))\n;\n(svg (cons (circle \'lightgray\' cx cy (* 1.1 r)) (append (append sliders swatches) pie))))))))))))))))))))\n';
var _user$project$ExamplesGenerated$ferrisWheelSlideshow = '(def [slideN slideSlider] (hSlider true 20! 400! 20! 1! 13! \'Slide \' 1))\n(def [timeInSlide timeInSlideSlider] (hSlider false 20! 400! 40! 0.0! 1.0! \'Time in Slide \' 0.0))\n\n(def rimColor [0 0 0 1])\n(def beamWidth 1)\n(def [centerX centerY] [300 300])\n(def [smallRadius largeRadius] [50 150])\n(def spokeEndSize 3)\n(def hubRadius 12)\n(def [carHighlightColor carColor] [[251 191 141 1] [191 191 191 1]])\n(def [carWidth carHeight] [20 20])\n(def spokeDuplicationOffset 12)\n(def carDuplicationOffset (+ carWidth 12))\n(def carDiagonalDuplicationOffset 14)\n(def rotationAngle (* twoPi 0.03))\n\n(def spoke (\\(centerX centerY rimX rimY)\n  [\n    (line \'black\' 1 centerX centerY rimX rimY)\n    (circle \'black\' rimX rimY spokeEndSize)\n  ]\n))\n\n(def diameterSpoke (\\(x1 y1 x2 y2)\n  [\n    (line \'black\' 1 x1 y1 x2 y2)\n    (circle \'black\' x1 y1 spokeEndSize)\n    (circle \'black\' x2 y2 spokeEndSize)\n  ]\n))\n\n(def car_ (\\(fill x y w h)\n  ; Manual, so we can add stroke.\n  [\n    \'rect\'\n    [ [\'x\' (- x (/ w 2))] [\'y\' (- y (/ h 2))] [\'width\' w] [\'height\' h] [\'fill\' fill] [\'stroke\' \'black\'] ]\n    []\n  ]\n))\n\n(def hub_ (\\(fill x y r)\n  ; Manual, so we can add stroke.\n  [\n    \'circle\'\n    [ [\'cx\' x] [\'cy\' y] [\'r\' r] [\'fill\' fill] [\'stroke\' \'black\'] ]\n    []\n  ]\n))\n\n(def rimAttachmentPoints (\\(spokeCount radius angle centerX centerY)\n  (let angles (map (\\i (- (+ (* (/ i spokeCount) twoPi) angle) halfPi)) (range 0 (- spokeCount 1)))\n    (map (\\angle [(+ centerX (* (cos angle) radius)) (+ centerY (* (sin angle) radius))]) angles)\n  )\n))\n\n(def carsAndHub (\\(spokeCount radius angle carWidth carHeight hubRadius centerX centerY)\n  (let hub [(hub_ carColor centerX centerY hubRadius)]\n  (let [[highlightedCarX highlightedCarY]|otherRimAttachmentPoints] (rimAttachmentPoints spokeCount radius angle centerX centerY)\n  (let highlightedCar [(car_ carHighlightColor highlightedCarX highlightedCarY carWidth carHeight)]\n  (let otherCars (map (\\[x y] (car_ carColor x y carWidth carHeight)) otherRimAttachmentPoints)\n    [hub highlightedCar otherCars]\n  ))))\n))\n\n(def rimAndSpokes (\\(spokeCount radius angle centerX centerY)\n  (let rim [(ring rimColor beamWidth centerX centerY radius)]\n  (let spokes (map (\\[x y] (spoke centerX centerY x y)) (rimAttachmentPoints spokeCount radius angle centerX centerY))\n    [rim (concat spokes)]\n  ))\n))\n\n(def ferrisWheel (\\(spokeCount radius angle carWidth carHeight hubRadius centerX centerY)\n  (concat [\n    (carsAndHub spokeCount radius angle carWidth carHeight hubRadius centerX centerY)\n    (rimAndSpokes spokeCount radius angle centerX centerY)\n  ])\n))\n\n(def hub [(hub_ carColor centerX centerY hubRadius)])\n(def smallRim [(ring rimColor beamWidth centerX centerY smallRadius)])\n(def spoke1 (diameterSpoke centerX (+ centerY smallRadius) centerX (- centerY smallRadius)))\n(def spoke1Duplicate1 (diameterSpoke (+ centerX spokeDuplicationOffset) (+ (+ centerY smallRadius) spokeDuplicationOffset) (+ centerX spokeDuplicationOffset) (+ (- centerY smallRadius) spokeDuplicationOffset)))\n(def spoke1Duplicate2 (diameterSpoke (+ centerX (mult 2 spokeDuplicationOffset)) (+ (+ centerY smallRadius) (mult 2 spokeDuplicationOffset)) (+ centerX (mult 2 spokeDuplicationOffset)) (+ (- centerY smallRadius) (mult 2 spokeDuplicationOffset))))\n(def spoke1Duplicate1HalfMoved (diameterSpoke (+ centerX spokeDuplicationOffset) (+ (+ centerY smallRadius) spokeDuplicationOffset) (- centerX smallRadius) centerY))\n(def spoke2 (diameterSpoke (+ centerX smallRadius) centerY (- centerX smallRadius) centerY))\n\n(def car (\\(x y)\n  [(car_ carColor x y carWidth carHeight)]\n))\n\n(def highlightedCar (\\(x y)\n  [(car_ carHighlightColor x y carWidth carHeight)]\n))\n\n(def car1 (highlightedCar centerX (- centerY smallRadius)))\n(def car1Duplicates (map (\\n (car (+ centerX (* n carDuplicationOffset)) (- centerY smallRadius))) (range 1 3)))\n\n(def ferrisSmall4\n  (ferrisWheel\n    4 ; number of spokes\n    smallRadius\n    0 ; angle\n    carWidth\n    carHeight\n    hubRadius\n    centerX\n    centerY\n  )\n)\n(def car2Duplicates (map (\\n (car (+ smallRadius (+ centerX (* n carDiagonalDuplicationOffset))) (+ centerY (* n carDiagonalDuplicationOffset)))) (range 1 3)))\n(def ferrisSmall4CarsAndHub\n  (carsAndHub\n    4 ; number of spokes\n    smallRadius\n    0 ; angle\n    carWidth\n    carHeight\n    hubRadius\n    centerX\n    centerY\n  )\n)\n(def ferrisSmall8CarsAndHub\n  (carsAndHub\n    8 ; number of spokes\n    smallRadius\n    0 ; angle\n    carWidth\n    carHeight\n    hubRadius\n    centerX\n    centerY\n  )\n)\n(def ferrisSmall8RimAndSpokes\n  (rimAndSpokes\n    8 ; number of spokes\n    smallRadius\n    0 ; angle\n    centerX\n    centerY\n  )\n)\n(def ferrisSmall8\n  (concat [ferrisSmall8CarsAndHub ferrisSmall8RimAndSpokes])\n)\n(def ferrisLarge8RimAndSpokesOffset\n  (rimAndSpokes\n    8 ; number of spokes\n    largeRadius\n    0 ; angle\n    (+ centerX (- largeRadius smallRadius))\n    (- centerY (- largeRadius smallRadius))\n  )\n)\n(def ferrisLarge8RimAndSpokes\n  (rimAndSpokes\n    8 ; number of spokes\n    largeRadius\n    0 ; angle\n    centerX\n    centerY\n  )\n)\n(def ferrisLarge8\n  (ferrisWheel\n    8 ; number of spokes\n    largeRadius\n    0 ; angle\n    carWidth\n    carHeight\n    hubRadius\n    centerX\n    centerY\n  )\n)\n(def ferrisLarge8BadlyRotated\n  [(rotate\n    [\'g\' [] (concat ferrisLarge8)]\n    (/ (* rotationAngle 360) twoPi)\n    centerX\n    centerY\n  )]\n)\n\n(def [car7X car7Y] (hd (reverse (rimAttachmentPoints 8 largeRadius rotationAngle centerX centerY))))\n(def car7 (car car7X car7Y))\n(def car7Duplicates (map (\\n (car (+ car7X (* n carDiagonalDuplicationOffset)) (+ car7Y (* n carDiagonalDuplicationOffset)))) (range 1 7)))\n\n(def ferrisLarge8RimAndSpokesRotated\n  (rimAndSpokes\n    8 ; number of spokes\n    largeRadius\n    rotationAngle\n    centerX\n    centerY\n  )\n)\n(def ferrisLarge8Rotated\n  (ferrisWheel\n    8 ; number of spokes\n    largeRadius\n    (+ rotationAngle (* twoPi timeInSlide))\n    carWidth\n    carHeight\n    hubRadius\n    centerX\n    centerY\n  )\n)\n\n(def appearInOrder (\\shapeGroups\n  (let appearanceTimeAndShapeGroups (map2 (\\(i shapeGroup) [(/ i (len shapeGroups)) shapeGroup]) (range 0 (- (len shapeGroups) 1)) shapeGroups)\n    (foldr\n      (\\([t shapeGroup] visible)\n        (if (ge timeInSlide t)\n          (let opacity (/ (- timeInSlide t) (/ 1 (len shapeGroups)))\n          (let faded [[\'g\' [[\'opacity\' opacity]] shapeGroup]]\n            [faded | visible]\n          ))\n          visible\n        )\n      )\n      []\n      appearanceTimeAndShapeGroups\n    )\n  )\n))\n\n(def elements\n  (if (= slideN 1)\n    (appearInOrder [smallRim spoke1 spoke1Duplicate1])\n    (if (= slideN 2)\n      [smallRim spoke1 spoke1Duplicate1HalfMoved]\n      (if (= slideN 3)\n        (concat [ [hub car1] (appearInOrder car1Duplicates) [smallRim spoke1 spoke2] ])\n        (if (= slideN 4)\n          ferrisSmall4\n          (if (= slideN 5)\n            (concat [ ferrisSmall4 (appearInOrder (concat [[spoke1Duplicate1 spoke1Duplicate2] car2Duplicates])) ])\n            (if (= slideN 6)\n              (concat [ ferrisSmall4CarsAndHub ferrisSmall8RimAndSpokes (appearInOrder car2Duplicates) ])\n              (if (= slideN 7)\n                ferrisSmall8\n                (if (= slideN 8)\n                  (concat [ ferrisSmall8CarsAndHub ferrisLarge8RimAndSpokesOffset ])\n                  (if (= slideN 9)\n                    (concat [ ferrisSmall8CarsAndHub ferrisLarge8RimAndSpokes ])\n                    (if (= slideN 10)\n                      ferrisLarge8\n                      (if (= slideN 11)\n                        [ferrisLarge8BadlyRotated]\n                        (if (= slideN 12)\n                          (concat [ [hub car7] ferrisLarge8RimAndSpokesRotated (appearInOrder car7Duplicates) ])\n                          (if (= slideN 13)\n                            ferrisLarge8Rotated\n                            []\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\n(svg (append (concat elements) (concat [slideSlider timeInSlideSlider])))\n';
var _user$project$ExamplesGenerated$ferris2target = '(def n 8)\n(def len 142)\n(def rot -0.13796015197333036)\n\n(def wheel\n  (let [cx cy] [280 200]\n  (let rim [(ring \'darkgray\' 3 [cx cy] len)]\n  (let center [(circle \'black\' [cx cy] 15)]\n  (let frame [(nStar \'goldenrod\' \'darkgray\' 3 n len 0 rot [cx cy])]\n  (let spokePts (nPointsOnCircle n rot [cx cy] len)\n  (let caps (map (\\[x y] (circle \'black\' [x y] 6)) spokePts)\n  (let cars\n    (let wCar 27\n    (let wHalfCar (/ wCar 2!)\n    (mapi (\\[i [x y]] (squareByCenter (if (= 0 i) \'pink\' \'lightgray\') [x y] wCar)) spokePts)))\n  (concat [rim cars center frame caps])))))))))\n\n(svg wheel)\n\n';
var _user$project$ExamplesGenerated$ferris2 = '(def n 5)\n(def len 80)\n(def rot 0)\n\n(def wheel\n  (let [cx cy] [280 200]\n  (let rim [(ring \'darkgray\' 8 [cx cy] len)]\n  (let center [(circle \'black\' [cx cy] 20)]\n  (let frame [(nStar \'goldenrod\' \'darkgray\' 3 n len 0 rot [cx cy])]\n  (let spokePts (nPointsOnCircle n rot [cx cy] len)\n  (let caps (map (\\[x y] (circle \'black\' [x y] 7)) spokePts)\n  (let cars\n    (let wCar 30\n    (let wHalfCar (/ wCar 2!)\n    (map (\\[x y] (squareByCenter \'lightgray\' [x y] wCar)) spokePts)))\n  (concat [rim cars center frame caps])))))))))\n\n(svg wheel)\n\n';
var _user$project$ExamplesGenerated$ferris = '\n; Take this ferris wheel for a spin!\n; Try:\n;  - Stretching the passenger cars\n;  - Stretching the central hub\n;  - Dragging the central hub\n;  - Setting showSliders to false\n\n(def wheel (\\([cx cy] rCenter wCar rCap numSpokes spokeLen rotAngle)\n  (let rim      [(ring \'darkgray\' 6 [cx cy] spokeLen)]\n  (let center   [(circle \'black\' [cx cy] rCenter)]\n  (let frame    [(nStar \'goldenrod\' \'darkgray\' 3 numSpokes spokeLen 0 rotAngle [cx cy])]\n  (let spokePts (nPointsOnCircle numSpokes rotAngle [cx cy] spokeLen)\n  (let cars     (mapi (\\[i [x y]] (squareByCenter (if (= i 0) \'pink\' \'lightgray\') [x y] wCar)) spokePts)\n  (let hubcaps  (map (\\[x y] (circle \'black\' [x y] rCap)) spokePts)\n    (concat [rim cars center frame hubcaps])\n))))))))\n\n(def [[cx cy] spokeLen rCenter wCar rCap] [[220 300] 80 20 30 7])\n(def [numSpokes rotAngle] [5!{3-15} 0!{-3.14-3.14}])\n\n(svg (wheel [cx cy] rCenter wCar rCap numSpokes spokeLen rotAngle))\n\n';
var _user$project$ExamplesGenerated$flw2 = ';\n; A Frank Lloyd Wright design based on:\n; http://www.glass-by-design.com/images3/skylight3.jpg\n;\n; This is a tiled version of that design\n;\n; Possible ways to manipulate:\n; - Grab edges of red polygons, yellow circles, or\n;     blue ellipses and pull in various directions\n; - Grab ends of lines and move in various directions\n;\n(let [x0 y0 w h max] [69 55 200 320 10!]\n(let wbox (/ w 10!)\n(let hbox (/ h 10!)\n(let xoff (\\(n x) (+ x0 (+ (* x w) (* wbox n))))\n(let yoff (\\(n y) (+ y0 (+ (* y h) (* hbox n))))\n(let blkline (\\[[a b] [c d]] (line \'black\' 3 a b c d))\n(let redpoly\n  (\\[a b x y]\n    (polygon\n      \'red\'\n      \'black\'\n      3\n      [[(xoff a x) (yoff a y)]\n       [(xoff a x) (yoff b y)]\n       [(xoff b x) (yoff b y)]\n       [(xoff b x) (yoff a y)]]))\n(let dimension [0! 4 5 6 7 10!]\n(let [p0 p1 p2 p3 p4] [0 1 2 2.9 5]\n(let singletile\n  (\\[x y] \n    (let verticals\n      (zip\n        (map (\\n [(xoff n x) (+ y0 (* y h))]) dimension)\n        (map (\\n [(xoff n x) (+ y0 (* (+ y 1) h))]) dimension))\n    (let horizontals\n      (zip\n        (map (\\n [(+ x0 (* x w)) (yoff n y)]) dimension)\n        (map (\\n [(+ x0 (* (+ 1 x) w)) (yoff n y)]) dimension))\n      (append\n        (append\n          (map blkline (append verticals horizontals))\n          (map (\\[xc yc r] (circle \'yellow\' xc yc r))\n            [[(xoff 6 x) (yoff 1.75 y) (+ wbox hbox)]\n             [(xoff 6 x) (yoff 7 y) (/ (+ wbox hbox) 4)]\n             [(xoff 6 x) (yoff 5 y) (/ (+ wbox hbox) 2)]]))\n        (cons\n          (ellipse \'blue\' (xoff 5 x) (yoff 9 y) (* wbox 4) hbox)\n          (map redpoly [[p0 p1 x y] [p1 p2 x y] [p2 p3 x y] [p3 p4 x y]])\n          )))))\n(let grid (cartProd [0! 1! 2!] [0! 1!])\n;\n  (svg \n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ (* 3 w) 20!) (+ (* 2 h) 20!))\n      (concatMap singletile grid))))))))))))))\n\n';
var _user$project$ExamplesGenerated$flw1 = ';\n; A Frank Lloyd Wright design inspired by:\n; http://www.glass-by-design.com/images3/skylight3.jpg\n;\n(let [x0 y0 w h max] [69 55 532 744 10!]\n(let wbox (/ w 10!)\n(let hbox (/ h 10!)\n(let xoff (\\n (+ x0 (* wbox n)))\n(let yoff (\\n (+ y0 (* hbox n)))\n(let blkline (\\[[a b] [c d]] (line \'black\' 3 a b c d))\n(let redpoly\n  (\\[a b]\n    (polygon\n      \'red\'\n      \'black\'\n      3\n      [[(xoff  a) (yoff  a)]\n       [(xoff  a) (yoff  b)]\n       [(xoff  b) (yoff  b)]\n       [(xoff  b) (yoff  a)]]))\n(let dimension\n  [0! 1 2 2.9 2.4 1.5 9.1 7.9 8.2 8.7 10!]\n(let verticals\n  (zip\n    (map (\\n [(xoff  n) y0]) dimension)\n    (map (\\n [(xoff  n) (+ y0 (* hbox max))]) dimension))\n(let horizontals\n  (zip\n    (map (\\n [x0 (yoff  n)]) dimension)\n    (map (\\n [(+ x0 (* wbox max)) (yoff  n)]) dimension))\n  (svg\n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!)) \n    (append\n      (map blkline (append verticals horizontals))\n      (append\n        (append\n          (let [p0 p1 p2 p3 p4] [0 1 2 2.9 5]\n            (map redpoly [[p0 p1] [p1 p2] [p2 p3] [p3 p4]]))\n          (map (\\[x y] (ellipse \'blue\' x y (* wbox 4) hbox)) [[(xoff  5) (yoff  9)]]))\n        (map\n          (\\[x y r] (circle \'yellow\' x y r))\n          [[(xoff  6) (yoff  1.75) (+ wbox hbox)]\n           [(xoff  6) (yoff  7) (/ (+ wbox hbox) 4)]\n           [(xoff  6) (yoff  5) (/ (+ wbox hbox) 2)]])))))))))))))))\n\n';
var _user$project$ExamplesGenerated$frenchSudan = ';\n; The Flag of French Sudan, based on:\n;\n; A few ways to manipulate:\n; - Grab any part of the stick figure and move it\n;     in various directions\n;\n(let [x0 y0 w h] [50 30 450 300]\n(let wstripe (/ w 3!)\n(let xoff (+ x0 wstripe)\n(let yoff (+ y0 (/ h 4!))\n(let stripe (\\[color x] (rect color x y0 wstripe h))\n(let minrad\n  (if (< (/ wstripe 7.5!) (/ h 15!))\n    (/ wstripe 7.5!)\n    (/ h 15!))\n(let figline (\\[[a b] [c d]] (line \'black\' (/ minrad 2!) a b c d))\n(let [x1 x2 x3] (map (\\n (+ x0 (* wstripe n))) [1.2! 1.5! 1.8!])\n(let [y1 y2 y3 y4] (map (\\n (+ y0 (/ h n))) [4.3! 2.8! 1.9! 1.4!])\n;\n  (svg\n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!)) \n    (append\n      (map stripe [[\'blue\' x0] [\'white\' (+ x0 wstripe)] [\'red\' (+ x0 (* 2! wstripe))]])\n      (snoc\n        (ellipse \'black\' x2 y1 (/ wstripe 7.5!) (/ h 15!))\n        (map\n          figline\n          [[[x1 y1] [x1 y2]]\n           [[x1 y2] [x3 y2]]\n           [[x3 y1] [x3 y2]]\n           [[x1 y4] [x1 y3]]\n           [[x1 y3] [x3 y3]]\n           [[x3 y3] [x3 y4]]\n           [[x2 y1] [x2 y3]]]))))))))))))))\n\n';
var _user$project$ExamplesGenerated$chicago = '\n; The flag of Chicago\n;\n; Possible ways to manipulate\n; - Pull stripes or stars in various directions\n; - Group box in background\n\n(def [x0 y0 ni nj pts w h] [40 40 0.5! 3.5! 6! 454 300])\n(def [outerLen innerLen] [30 12])\n\n(def background\n  (let [d1 d2] [10! 20!]\n  [ (rect \'white\' (- x0 d1) (- y0 d1) (+ w d2) (+ h d2)) ]))\n\n(def stripes\n  (map (\\i\n    (rect \'lightblue\' x0 (+ y0 (* i h)) w (/ h 6!)))\n  [(/ 1! 6!) (/ 2! 3!)]))\n\n(def stars\n  (map (\\i\n    (let off (* i (/ w 4!))\n    (nStar \'red\' \'none\' 0 pts outerLen innerLen 0\n      [(+ x0 off) (+ y0 (/ h 2!))])))\n  (range ni nj)))\n\n(svg (concat [background stripes stars]))\n\n';
var _user$project$ExamplesGenerated$usFlag50 = ';\n; Current Flag of the United States\n; (using circles for now, since 50 stars is slow)\n;\n; A few ways to manipulate:\n; - Grab various parts of the red stripes or\n;     blue block and pull in various directions\n; - Grab the edges of the circles and and\n;     increase or decrease the radius\n;\n(let [x0 y0 ni nj pts w h rad] [20 20 0! 12! 5! 510 272 6]\n(let hstripe (/ h 13!)\n(let block (rect \'#09096d\' x0 y0 (* w (/ 2! 5!)) (* 7! hstripe))\n(let stripes\n  (map\n    (\\i (rect \'red\' x0 (+ y0 (* i hstripe)) w hstripe))\n    [0! 2! 4! 6! 8! 10! 12!])\n(let base (append stripes [block])\n;\n  (svg\n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!)) \n    (append base\n      (map (\\[i j]\n        (let xsep (/ w 15!)\n        (let ysep (* hstripe 1.3!)\n          (circle \'white\' (+ x0 (* i xsep)) (+ y0 (* j ysep)) rad))))\n        (append (cartProd (range 0.5! 5.5!) (range 0.75! 4.75!))\n                (cartProd (range 1! 5!) (range 1.2! 4.2!))))))))))))\n\n';
var _user$project$ExamplesGenerated$usFlag13 = ';\n; Original flag of the United States\n;\n; A few ways to mainpulate this example:\n; - Grab bottom right corner to increase overall size\n; - Grab the edge of a red stripe to increase width\n; - Grab the points of one of the stars to change \n;     the size of its points\n;\n(let rotate (\\a (/ (* a (pi)) 6.5!))\n(let [x0 y0 ni nj pts w h] [20 20 0! 12! 5! 500 260]\n(let hstripe (/ h 13!)\n(let [blockw blockh] [(/ w 3!) (* 7! hstripe)]\n(let min\n  (if (< blockw blockh)\n    (* 0.4! blockw)\n    (* 0.4! blockh))\n(let [outerLen innerLen] [10 4]\n(let block (rect \'#09096d\' x0 y0 blockw blockh)\n(let stripes\n  (map\n    (\\i (rect \'red\' x0 (+ y0 (* i hstripe)) w hstripe))\n    [0! 2! 4! 6! 8! 10! 12!])\n(let base (append stripes [block])\n;\n  (svg\n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!))\n    (append base\n      (map (\\i\n         (nStar \'white\' \'none\' 0 pts innerLen outerLen\n           (rotate  i)\n           (+ (+ x0 (/ w 6!)) (* min (cos (rotate i))))\n           (+ (+ y0 (* hstripe 3.5!)) (* min (sin (rotate i))))))\n        (range ni nj))))))))))))))\n\n';
var _user$project$ExamplesGenerated$boxGridTokenFilter = '\n; Drag some \"filter tokens\" from the right over the grid.\n; Toggle between positive/negative filtering.\n\n(def [x0 y0 w h boxSize] [30! 100! 300! 300! 50!])\n(def allColors [0 100 200 300 450])\n(def seedRows 1.5)\n(def seedCols 2.5)\n(def seedNumColors 1.5)\n(def seedShapeKind 0.5)\n(def seedFilterKind 0.75)\n\n; derived values\n(def [xw yh] [(+ x0 w) (+ y0 h)])\n(def sep (+ boxSize 10!))\n(def halfBoxSize (/ boxSize 2!))\n\n(def [ [ cols rows ] boxSlider ]\n  (let pad 10!\n  (xySlider\n    (- x0 pad) (+ xw pad)\n    (- y0 pad) (+ yh pad)\n    0! (/ w sep)\n    0! (/ h sep)\n    \'\' \'\'\n    seedCols seedRows)))\n\n(def [numColors numColorsSlider]\n  (hSlider true 20! 100! 30! 1! 5! \'#Colors = \' seedNumColors))\n\n(def [shapeKind shapeKindSlider]\n  (enumSlider 220! 300! 30! [\'Box\' \'Dot\' \'Star\'] \'\' seedShapeKind))\n\n(def [posFilter filterKindSlider]\n  (button 360! 30! \'PosNeg = \' seedFilterKind))\n\n(def tokens\n  (let [x0 y0] [400! 50!]\n  (let shift (\\(dx dy) [(+ x0 dx) (+ y0 dy)])\n  (map (\\[x y] (ghost (circle (if posFilter \'blue\' \'red\') x y 10!)))\n       [(shift 0  30)\n        (shift 0  60)\n        (shift 0  90)\n        (shift 0 120)\n        (shift 0 150)\n        (shift 0 180)\n        (shift 0 210)\n        (shift 0 240)\n        (shift 0 270)\n        (shift 0 300)\n       ]))))\n\n(def isCovered (\\(cx cy)\n  (let checkX (between (- cx halfBoxSize) (+ cx halfBoxSize))\n  (let checkY (between (- cy halfBoxSize) (+ cy halfBoxSize))\n  (let centers (map (\\tok [(lookupAttr tok \'cx\') (lookupAttr tok \'cy\')]) tokens)\n  (some (\\[x y] (and (checkX x) (checkY y))) centers)\n )))))\n\n(def shapes\n  (let indices (cartProd (range 0! (- cols 1!)) (range 0! (- rows 1!)))\n  (let drawShape (\\[i j]\n    (let shape\n      (let c (nth allColors (mod (- i j) numColors))\n      (let x (+ x0 (mult i sep))\n      (let y (+ y0 (mult j sep))\n      (let [cx cy] [(+ x halfBoxSize) (+ y halfBoxSize)]\n      ; TODO boolean patterns?\n      (let covered (isCovered cx cy)\n      (if (or (and posFilter (not covered))\n              (and (not posFilter) covered)) (circle \'none\' 0! 0! 0!)\n      (case shapeKind\n        (\'Box\'  (square c x y boxSize))\n        (\'Dot\'  (circle c cx cy halfBoxSize))\n        (\'Star\' (nStar c \'none\' 0! 4! halfBoxSize 10! 0! [cx cy]))\n        ( else  (circle \'none\' 0! 0! 0!)))))))))\n    (if (and (= i (- cols 1!)) (< j numColors))\n        shape\n        (addAttr shape [\'ZONES\' \'none\']))))\n  (map drawShape indices))))\n\n(svg (concat [\n  shapes\n  boxSlider\n  numColorsSlider\n  shapeKindSlider\n  filterKindSlider\n  tokens\n]))\n\n';
var _user$project$ExamplesGenerated$rgba = ';\n; A Color Picker\n; \n; Move the sliders to change the rgba\n; value of the circle!\n;\n(let [r_ g_ b_ a_] [22 74 237 0.5]\n;\n(let [r s1] (hSlider true 20! 420! 20! 0! 255! \'\' r_)\n(let [g s2] (hSlider true 20! 420! 50! 0! 255! \'\' g_)\n(let [b s3] (hSlider true 20! 420! 80! 0! 255! \'\' b_)\n(let [a s4] (hSlider false 20! 420! 110! 0.0! 1.0! \'\' a_)\n;\n(let ball (circle [r g b a] 220! 300! 100!)\n(let sliders (concat [s1 s2 s3 s4])\n;\n  (svg (cons ball sliders)))))))))\n\n';
var _user$project$ExamplesGenerated$offsets = '(def pt@[x y] ([125 150] : Point))\n\n(def pt2x (+ x 150))\n(def pt3y (+ y 100))\n(def pt4x (+ pt2x 50))\n(def pt5y (- y 40))\n\n(blobs [\n])\n';
var _user$project$ExamplesGenerated$xySlider = '; A two dimensional slider in a similar style to the other sliders\n(def xySlider_\n  (\\(dropBall roundInt xStart xEnd yStart yEnd minx maxx miny maxy xcaption ycaption curx cury)\n    (let [rCorner wEdge rBall] [4! 3! 10!]\n    (let [xDiff yDiff xValDiff yValDiff] [(- xEnd xStart) (- yEnd yStart) (- maxx minx) (- maxy miny)]\n    (let ballx (+ xStart (* xDiff (/ (- curx minx) xValDiff)))\n    (let bally (+ yStart (* yDiff (/ (- cury miny) yValDiff)))\n    (let ballx_ (clamp xStart xEnd ballx)\n    (let bally_ (clamp yStart yEnd bally)\n    (let rball_ (if dropBall (if (< maxx curx) 0 rBall) rBall)\n    (let rball__ (if dropBall (if (< maxy cury) 0 rball_) rBall)\n    (let xval\n      (let xval_ (clamp minx maxx curx)\n      (if roundInt (round xval_) xval_))\n    (let yval\n      (let yval_ (clamp miny maxy cury)\n      (if roundInt (round yval_) yval_))\n    (let shapes\n      [ (line \'black\' wEdge xStart yStart xEnd yStart)\n        (line \'black\' wEdge xStart yStart xStart yEnd)\n        (line \'black\' wEdge xStart yEnd xEnd yEnd)\n        (line \'black\' wEdge xEnd yStart xEnd yEnd)\n        (circle \'black\' xStart yStart rCorner)\n        (circle \'black\' xStart yEnd rCorner)\n        (circle \'black\' xEnd yStart rCorner)\n        (circle \'black\' xEnd yEnd rCorner)\n        (circle \'black\' ballx_ bally_ rball__)\n        (text (- (+ xStart (/ xDiff 2)) 40) (+ yEnd 20) (+ xcaption (toString xval)))\n        (text (+ xEnd 10) (+ yStart (/ yDiff 2)) (+ ycaption (toString yval))) ]\n  [ [ xval yval ] shapes ])))))))))))))\n\n(def xySlider (xySlider_ false))\n\n(def [ [ a b ] slider ]\n  (xySlider false 20! 420! 20! 420! 0! 100! 0! 100! \'X Axis: \' \'Y Axis: \' 20 20))\n\n(svg slider)\n\n';
var _user$project$ExamplesGenerated$widgets = '; library widgets\n;\n(let [n  s1] (hSlider false 20! 90!  20! 0! 5! \'n = \' 3.1415)\n(let [i  s2] (hSlider true  20! 90!  50! 0! 5! \'i = \' 3.1415)\n(let [b1 s3] (button        20!      80!       \'b1 = \' 0.25)\n(let [b2 s4] (button        20!     110!       \'b2 = \' 0.75)\n  (svg (concat [s1 s2 s3 s4]))))))\n\n';
var _user$project$ExamplesGenerated$buttons = ';\n(let button_ (\\(dropBall xStart y caption xCur)\n  (let [rPoint wLine rBall wSlider] [4! 3! 10! 70!]\n  (let xEnd (+ xStart wSlider)\n  (let xBall (+ xStart (* xCur wSlider))\n  (let xBall_ (clamp xStart xEnd xBall)\n  (let rBall_ (if dropBall (if (= xBall_ xBall) rBall 0) rBall)\n  (let val (< xCur 0.5)\n  (let shapes\n    [ (circle \'black\' xStart y rPoint)\n      (circle \'black\' xEnd y rPoint)\n      (line \'black\' wLine xStart y xEnd y)\n      (circle (if val \'darkgreen\' \'darkred\') xBall y rBall_)\n      (text (+ xEnd 10) (+ y 5) (+ caption (toString val))) ]\n  [val shapes]))))))))\n;\n(let [b b1] (button_ true 20! 20! \'b = \' 0.25)\n  (svg b1)))\n\n';
var _user$project$ExamplesGenerated$sliders = ';\n; The ni constants get adjusted by the sliders,\n; and then clamped to fit within the [min, max] range.\n; Also try changing the min and max constants below.\n;\n(let [min max] [0! 10!]\n(let [n1 n2 n3 n4] [5 5 5 5]\n(let [m1 m2 m3 m4] (map (clamp min max) [n1 n2 n3 n4])\n;\n; Both the horizontal and vertical slider abstractions\n; below take a dropBall parameter:\n;  - if true, the ball can slide off the rail;\n;  - if false, the ball disappears when off the rail.\n;\n(let horizSlider (\\(dropBall xStart xEnd y minVal maxVal curVal)\n  (let [rPoint wLine rBall] [4! 3! 10!]\n  (let [xDiff valDiff] [(- xEnd xStart) (- maxVal minVal)]\n  (let xBall (+ xStart (* xDiff (/ (- curVal minVal) valDiff)))\n  (let xBall_ (clamp xStart xEnd xBall)\n  (let rBall_ (if dropBall (if (= xBall_ xBall) rBall 0) rBall)\n    [ (circle \'black\' xStart y rPoint)\n      (circle \'black\' xEnd y rPoint)\n      (line \'black\' wLine xStart y xEnd y)\n      (circle \'black\' xBall y rBall_)\n    ]))))))\n;\n(let vertSlider (\\(dropBall yStart yEnd x minVal maxVal curVal)\n  (let [rPoint wLine rBall] [4! 3! 10!]\n  (let [yDiff valDiff] [(- yEnd yStart) (- maxVal minVal)]\n  (let yBall (+ yStart (* yDiff (/ (- curVal minVal) valDiff)))\n  (let yBall_ (clamp yStart yEnd yBall)\n  (let rBall_ (if dropBall (if (= yBall_ yBall) rBall 0) rBall)\n    [ (circle \'black\' x yStart rPoint)\n      (circle \'black\' x yEnd rPoint)\n      (line \'black\' wLine x yStart x yEnd)\n      (circle \'black\' x yBall rBall_)\n    ]))))))\n;\n(let sliders\n  (let s1 (horizSlider false 30! 230! 30! min max n1)\n  (let s2 (horizSlider true 30! 230! 70! min max n2)\n  (let s3 (vertSlider false 110! 300! 110! min max n3)\n  (let s4 (vertSlider true 110! 300! 150! min max n4)\n    (foldl append nil [s1 s2 s3 s4])))))\n;\n(let displays\n  (let t1 (text 300 100 (+ \'m1 = \' (toString m1)))\n  (let t2 (text 300 120 (+ \'m2 = \' (toString m2)))\n  (let t3 (text 300 140 (+ \'m3 = \' (toString m3)))\n  (let t4 (text 300 160 (+ \'m4 = \' (toString m4)))\n    [t1 t2 t3 t4]))))\n;\n  (svg (append sliders displays)))))))))\n\n';
var _user$project$ExamplesGenerated$stars = ' \n(let nStar (\\(fill stroke w n len1 len2 rot cx cy)\n  (let pti (\\[i len]\n    (let anglei (+ (- (/ (* i (pi)) n) rot) halfPi)\n    (let xi (+ cx (* len (cos anglei)))\n    (let yi (+ cy (neg (* len (sin anglei))))\n      [xi yi]))))\n  (let lengths\n    (map (\\b (if b len1 len2))\n         (concat (repeat n [true false])))\n  (let indices (list0N (- (* 2! n) 1!))\n    (polygon fill stroke w (map pti (zip indices lengths)))))))\n \n(let [x0 y0 sep ni nj] [100 100 100 3! 7!]\n(let [outerLen innerLen] [50 20]\n(let iStar (\\i\n   (let off (mult (- i ni) sep)\n   (let [xi yi] [(+ x0 off) (+ y0 off)]\n   (nStar \'goldenrod\' \'black\' 3 i outerLen innerLen 0! xi yi))))\n \n(svg (map iStar (range ni nj)))))))\n\n';
var _user$project$ExamplesGenerated$polygons = '(let ngon (\\(n cx cy len1 len2)\n  (let dangle (/ (* 3! (pi)) 2!)\n  (let anglei (\\i (+ dangle (/ (* i (* 2! (pi))) n)))\n  (let xi     (\\i (+ cx (* len1 (cos (anglei i)))))\n  (let yi     (\\i (+ cy (* len2 (sin (anglei i)))))\n  (let pti    (\\i [(xi i) (yi i)])\n  (let pts    (map pti (list0N (- n 1!)))\n    (polygon \'yellow\' \'maroon\' 4 pts))))))))\n(svg [\n  (ngon 3 100 200 40 40)\n  (ngon 4 200 200 30 30)\n  (ngon 5 300 300 50 50)\n  (ngon 7 300 100 40 40)\n  (ngon 15 100 400 40 40)\n]))\n\n';
var _user$project$ExamplesGenerated$rings = '\n(let [x0 y0 w r dx dy] [30 30 7 20 32 20]\n(let dxHalf (div dx 2)\n \n(let row1\n  (map (\\[i c] (ring c w (+ x0 (mult i dx)) y0 r))\n       (zip [0 1 2] [\'blue\' \'black\' \'red\']))\n \n(let row2\n  (map (\\[i c]\n         (let x (+ (+ x0 dxHalf) (mult i dx))\n         (let y (+ y0 dy)\n           (ring c w x y r))))\n       (zip [0 1] [\'yellow\' \'green\']))\n \n(svg (append row1 row2))))))\n\n';
var _user$project$ExamplesGenerated$botanic = '\n; Logo: Chicago Botanic Garden\n\n; Click \'[Zones]\' to see the control points for\n; the various Bezier curves.\n\n(def [w h] [434! 622])\n(def midline (/ w 2!))\n\n(def [x0  y0  xc1 yc1 x1  y1  xc2 yc2]\n     [185 261 59  232 0   382 28  183])\n\n(def leaf (\\polarity\n  (let [mx0 mxc1 mx1 mxc2]\n       [(+ midline (* polarity x0))\n        (+ midline (* polarity xc1))\n        (+ midline (* polarity x1))\n        (+ midline (* polarity xc2))]\n    (path \'white\' \'none\' 0\n      [\'M\' mx0 y0\n       \'Q\' mxc1 yc1 mx1 y1\n       \'M\' mx1 y1\n       \'Q\' mxc2 yc2 mx0 y0]))))\n\n(def [budTipY budCornerX budCornerY]\n     [322     34         262       ])\n\n(def bud\n  (let [rx1 rx2]\n       [(- midline budCornerX)\n        (+ midline budCornerX)]\n    (path \'white\' \'none\' 0\n      [\'M\' midline budTipY\n       \'L\' rx1 budCornerY\n       \'A\' 31 31 0 0 1 rx2 budCornerY\n       \'L\' rx2 budCornerY \'Z\'])))\n\n(def background (zones \'none\' [(rect \'#83F52C\' 0! 0! w h)]))\n\n(svg (concat [background [(leaf 1!) (leaf -1!) bud]]))\n';
var _user$project$ExamplesGenerated$activeTrans2 = '\n; Logo based on Active Transportation Alliance\n; (http://activetrans.org/)\n \n(def base 0)\n(def grayPts\n  [[  97 546           ] [  33 414           ]\n   [  33 (+ base 153!) ] [  53 (+ base 128!) ]\n   [  82 (+ base 135!) ] [  83 (+ base 160!) ]\n   [ 114 (+ base 149!) ] [ 113 (+ base  98!) ]\n   [ 143 (+ base  82!) ] [ 158 (+ base 101!) ]\n   [ 160 (+ base  46!) ] [ 192 (+ base  27!) ]\n   [ 221 (+ base  56!) ] [ 227 (+ base 222!) ]\n   [ 245 (+ base 224!) ] [ 246 (+ base 181!) ]\n   [ 288 (+ base 156!) ] [ 286 (+ base 113!) ]\n   [ 312 (+ base  88!) ] [ 374 (+ base 106!) ]\n   [ 375 (+ base 155!) ] [ 397 (+ base 136!) ]\n   [ 424 (+ base 145!) ] [ 425 207           ]\n  ])\n\n(def greenPts\n  [[247 663] [461 419] [466 230] [439 230] [178 614]])\n\n(def [grayctrl greenctrl]\n  [[47 489] [451 542]])\n\n(def [cGreen cGray] [\'#66CC66\' \'#505050\'])\n(def [b buttonShapes] (button 20! 20! \'\' 0.25))\n(def groupBox (rect (if b \'transparent\' cGreen) 0! 0! 500! 700!))\n\n(def makePath (\\(color pts [xc yc])\n  (let [[x0 y0] [x1 y1] | rest] pts\n  (let commands\n    (append\n      (append [\'M\' x0 y0] [\'Q\' xc yc x1 y1])\n      (foldr (\\([xi yi] acc) (append [\'L\' xi yi] acc))\n             [\'Z\'] rest))\n  (path color \'black\' 0 commands)))))\n \n(def grayPath (makePath (if b cGray \'white\') grayPts grayctrl))\n(def greenPath (makePath (if b cGreen \'white\') greenPts greenctrl))\n\n(svg (append [groupBox grayPath greenPath] buttonShapes))\n\n';
var _user$project$ExamplesGenerated$elmLogo = '; Elm logo, based on:\n; https://github.com/evancz/elm-svg/blob/1.0.2/examples/Logo.elm\n;\n; Notice how the \'viewBox\' attribute puts the canvas in\n; \"full screen\" mode. Also, although we don\'t currently handle\n; rotations (i.e. \'transform\'s) specially, the resulting zone\n; is still useful; toggle the Zones option to see.\n;\n(let foo (\\(color pts) (polygon color \'black\' 0 pts))\n(svgViewBox 323.141 322.95 [\n  (foo \'#F0AD00\' [[161 152] [231 82] [91 82]])\n  (foo \'#7FD13B\' [[8 0] [79 70] [232 70] [161 0]])\n  (addAttr\n     (rect \'#7FD13B\' 192 107 107 108)\n     [\'transform\' \'matrix(0.7071 0.7071 -0.7071 0.7071 186.4727 -127.2386)\'])\n  (foo \'#60B5CC\' [[323 143] [323 0] [179 0]])\n  (foo \'#5A6378\' [[152 161] [0 8] [0 314]])\n  (foo \'#F0AD00\' [[255 246] [323 314] [323 178]])\n  (foo \'#60B5CC\' [[161 170] [8 323] [314 323]])\n]))\n\n';
var _user$project$ExamplesGenerated$logo2 = '; sketch-n-sketch logo, v2\n; better lines for non-square scaling\n\n(def logo (\\(x0 y0 w h delta1 delta2 fg bg)\n  (let [xw yh w2 h2] [(+ x0 w) (+ y0 h) (div w 2) (div h 2)]\n  (let poly (\\(c pts) (polygon c \'none\' 0 pts))\n  (let basic (\\shape (addAttr shape [\'ZONES\' \'basic\']))\n  (svg [\n\n    ; positive background\n    ; starting with (xw,yh) to place color slider\n    (poly fg [[xw yh] [xw y0] [x0 y0] [x0 yh]])\n\n    ; negative X, part 1\n    (poly bg\n      [[x0 y0] [(+ x0 delta1) y0] [xw (- yh delta2)]\n       [xw yh] [(- xw delta1) yh] [x0 (+ y0 delta2)]])\n\n    ; negative X, part 2\n    (basic (poly bg\n      [[xw y0] [xw (+ y0 delta2)] [(+ x0 delta1) yh]\n       [x0 yh] [x0 (- yh delta2)] [(- xw delta1) y0]]))\n\n    ; positive, hiding top-right quarter of X\n    (basic (poly fg\n      [[(+ x0 delta1) y0] [xw y0] [xw (- yh delta2)]]))\n\n  ]))))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def [x0 y0 w h delta1 delta2] [50! 50! 200 200 10 10])\n(def [fg bg] [360 499])\n\n(logo x0 y0 w h delta1 delta2 fg bg)\n\n';
var _user$project$ExamplesGenerated$logo = '; sketch-n-sketch logo\n;\n(let [x0 y0 w h delta] [50 50 200 200 10]\n(let [xw yh w2 h2] [(+ x0 w) (+ y0 h) (div w 2) (div h 2)]\n(let poly (\\pts (polygon \'black\' \'none\' 0 pts))\n(svg [\n  (rect \'white\' x0 y0 w h)\n  (poly\n    [[(+ x0 delta) y0]\n     [xw y0]\n     [xw (- yh delta)]])\n  (poly\n    [[x0 (+ y0 delta)]\n     [x0 (- yh delta)]\n     [(- (+ x0 w2) delta) (+ y0 h2)]])\n  (poly\n    [[(+ x0 delta) yh]\n     [(- xw delta) yh]\n     [(+ x0 w2) (+ (+ y0 h2) delta)]])\n]))))\n\n';
var _user$project$ExamplesGenerated$basicSlides = '(def slideCount 5)\n(def slideMovieCount 5)\n\n[\n  slideCount\n  (\\slideNumber\n    [\n      slideMovieCount\n      (\\slideMovieNumber\n        [\n          \'Dynamic\'\n          1\n          (\\(slideNumber movieNumber t)\n            (svg [\n              (rect\n                \'lightblue\'\n                (+ 100 (* 50 movieNumber))\n                (+ 100 (* 50 slideNumber))\n                (* t 50)\n                (* t 50)\n              )\n            ])\n          )\n          true\n        ]\n      )\n    ]\n  )\n]\n';
var _user$project$ExamplesGenerated$groupOfBoxes = '\n; Try:\n;  - replacing (basicZonesTail nBoxes) with nBoxes\n\n(def [x0 y0 w h sep] [50 200 60 130 110])\n(def colorNum 100)\n(def rotBox 0)\n(def rotGroup 0)\n\n(def [n slider] (hSlider true 50! 300! 30! 1! 10! \'n = \'\n                 3))\n\n(def xi (\\i (+ x0 (mult i sep))))\n\n(def nBoxes\n  (let boxi (\\i\n    (rotate\n      (rect colorNum (xi i) y0 w h)\n      rotBox (+ (xi i) (/ w 2)) (+ y0 (/ h 2))))\n  (map boxi (list0N (- n 1)))))\n\n(def groupBox\n  (let [dw dh] [50 50]\n  (let xg (- x0 (/ dw 2))\n  (let yg (- y0 (/ dh 2))\n  (let wg (+ (+ (- (xi (- n 1)) x0) w) dw)\n  (let hg (+ h dh)\n    (rotate\n      (rect \'lightyellow\' xg yg wg hg)\n      rotGroup (+ xg (/ wg 2)) (+ yg (/ hg 2)))))))))\n\n(svg (concat\n  [ slider [groupBox] (basicZonesTail nBoxes) ]))\n\n';
var _user$project$ExamplesGenerated$nBoxes = '\n(def nBoxes\n  (let [n x0 y0 w h sep] [3{1-10} 40 28 60 130 110{50-200}]\n  (let boxi (\\i\n    (let xi (+ x0 (mult i sep))\n    (rect \'lightblue\' xi y0 w h)))\n  (svg (map boxi (range 0! (- n 1!)))))))\n \nnBoxes\n\n';
var _user$project$ExamplesGenerated$sineWaveGrid = '; WORKAROUND: Switch to [Heuristics] None before using sliders.\n; (Better yet, toggle Heuristics before selecting this example.)\n; Both heuristics modes use a naive algorithm to compute triggers,\n; which runs very slowly with the number of shapes in this canvas.\n\n  ; fix case bug:\n  ; > import Eval exposing (parseAndRun)\n  ; > parseAndRun \"(case [2 false] ([2 true] \'A\') (_ \'B\'))\"\n  ; \"\'A\'\" : String\n\n  ; (let color (case [i shadow]\n  ;   ([2 false] \'crimson\')   ([2 true] \'gray\')\n  ;   ([_ false] \'lightblue\') ([_ true] \'transparent\'))\n\n(def sineWave (\\(x0 y0 w h sep amp n shadow)\n  (let boxi (\\i\n    (let xi (+ x0 (* i sep))\n    (let yi (- y0 (* amp (sin (* i (/ twoPi n)))))\n    (let colori\n      (if (= i 2) (if shadow \'lightgray\' \'crimson\')\n                  (if shadow \'transparent\' \'lightblue\'))\n    (rect colori xi yi w h)))))\n  (map boxi (zeroTo n)))))\n\n; Would be even cooler if wGrid and hGrid were computed\n; automatically from the sine waves in each grid box.\n; Leaving this step as an exercise for another day...\n\n(def [outerPad innerPad] [100{0-300} 20{0-50}])\n(def [wGrid hGrid]       [740{0-1500} 430{0-1000}])\n\n; Helper function (could be added to Prelude)\n\n(def outlined (\\(stroke strokeWidth shape)\n  (consAttr (consAttr shape\n    [\'stroke\' \'black\'])\n    [\'stroke-width\' strokeWidth])))\n\n; Call sineWave in grid box at row i, column j.\n\n(def place (\\(i j x0 y0 w h sep amp n shadow)\n  (let [iPad jPad] [(+ outerPad (* innerPad i)) (+ outerPad (* innerPad j))]\n  (let gridBox\n    (outlined \'black\' (let border 3{0-10} border)\n      (rect \'none\' (+ jPad (* j wGrid)) (+ iPad (* i hGrid)) wGrid hGrid))\n  (let waveBoxes\n    (let [x y] [(+ x0 (* j wGrid)) (+ y0 (* i hGrid))]\n    (sineWave (+ x jPad) (+ y iPad) w h sep amp n shadow))\n  (cons gridBox waveBoxes))))))\n\n; Parameters from the original sineWaveOfBoxes.little.\n; If want to add sliders, then symbolically compute\n; the possible solutions below. Could even add a slider\n; for the index of the box being dragged... another exercise.\n\n(def [x0 y0 w h sep0 amp0 n] [50 120 20 90 30 60 12])\n\n; Simulate dragging of third box by (dx,dy) pixels.\n; Two possible solutions for each mouse direction.\n\n(def [dx dy] [50!{0-300} 110!{0-300}])\n\n(def x1   (+ x0 dx))\n(def sep1 (+ sep0 (/ dx 2!)))\n\n(def y1   (+ y0 dy))\n(def amp1 (/ (- y0 (+ dy 68!)) 0.867!))\n\n; Now draw original and versions with different solutions.\n\n(def totalPad (+ (* 2 outerPad) (* 2 innerPad)))\n(def totalWidth (+ (* 3 wGrid) totalPad))\n(def totalHeight (+ (* 3 hGrid) totalPad))\n\n(svgViewBox totalWidth totalHeight\n  (concat [\n    (place 0 0 x0 y0 w h sep0 amp0 n false)\n    (place 0 0 x1 y1 w h sep0 amp0 n true)  ; shadow box\n\n    (place 1 1 x1 y1 w h sep0 amp0 n false) ; update  x0/y0\n    (place 1 2 x1 y0 w h sep0 amp1 n false) ; update  x0/amp\n    (place 2 1 x0 y1 w h sep1 amp0 n false) ; update sep/y0\n    (place 2 2 x0 y0 w h sep1 amp1 n false) ; update sep/amp\n\n    ; workaround parser design bug that the comment above\n    ; needs to be followed by an expression\n    []\n]))\n\n';
var _user$project$ExamplesGenerated$sineWaveOfBoxes = '(def [x0 y0 w h sep amp] [50 120 20 90 30 60])\n(def n 12!{3-30})\n(def boxi (\\i\n   (let xi (+ x0 (* i sep))\n   (let yi (- y0 (* amp (sin (* i (/ twoPi n)))))\n     (rect \'lightblue\' xi yi w h)))))\n\n(svg (map boxi (zeroTo n)))\n\n';
var _user$project$ExamplesGenerated$nBoxesH2 = '\n(def [a b c] [0 0 0])\n(def something (+ a (+ a (+ b (+ b (+ c c))))))\n\n(def nBoxes\n  (let [n x0 y0 w h sep] [3 40 28 60 130 110]\n  (let boxi (\\i\n    (let xi (+ (+ x0 something) (mult i sep))\n    (rect \'lightblue\' xi y0 w h)))\n  (svg (map boxi (zeroTo n))))))\n \nnBoxes\n\n';
var _user$project$ExamplesGenerated$threeBoxes = '\n(def threeBoxesInt\n  (let [x0 y0 w h sep] [40 28 60 130 110]\n  (let boxi (\\i\n    (let xi (+ x0 (mult i sep))\n    (rect \'lightblue\' xi y0 w h)))\n  (svg (map boxi [0 1 2])))))\n \nthreeBoxesInt\n\n';
var _user$project$ExamplesGenerated$makeExample = F2(
	function (name, s) {
		var thunk = function (_p0) {
			var _p1 = _p0;
			var e = function () {
				var _p2 = _user$project$ElmParser$parse(s);
				if (_p2.ctor === 'Ok') {
					return _p2._0;
				} else {
					var _p3 = _user$project$FastParser$parseE(s);
					if (_p3.ctor === 'Ok') {
						return _p3._0;
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'ExamplesGenerated',
							{
								start: {line: 20, column: 11},
								end: {line: 22, column: 96}
							},
							_p3)(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Error parsing example ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									name,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										_elm_lang$core$Basics$toString(_p2._0)))));
					}
				}
			}();
			var ati = {
				annotations: {ctor: '[]'},
				highlights: {ctor: '[]'},
				tooltips: {ctor: '[]'}
			};
			var _p5 = A2(
				_user$project$Utils$fromOk,
				A2(_elm_lang$core$Basics_ops['++'], 'Error executing example ', name),
				A3(_user$project$Eval$run, false, _user$project$Syntax$Little, e));
			var v = _p5._0;
			var ws = _p5._1;
			return {e: e, v: v, ws: ws, ati: ati};
		};
		return {
			ctor: '_Tuple2',
			_0: name,
			_1: {ctor: '_Tuple2', _0: s, _1: thunk}
		};
	});
var _user$project$ExamplesGenerated$generalCategory = {
	ctor: '_Tuple2',
	_0: 'General',
	_1: {
		ctor: '::',
		_0: A2(_user$project$ExamplesGenerated$makeExample, 'BLANK', _user$project$ExamplesGenerated$blank),
		_1: {ctor: '[]'}
	}
};
var _user$project$ExamplesGenerated$uist19Category = {
	ctor: '_Tuple2',
	_0: 'UIST\'19 Examples',
	_1: {
		ctor: '::',
		_0: A2(_user$project$ExamplesGenerated$makeExample, 'Overview: Lambda Logo', _user$project$ExamplesGenerated$uist19_lambda_logo_overview),
		_1: {
			ctor: '::',
			_0: A2(_user$project$ExamplesGenerated$makeExample, '(i) Koch Snowflake', _user$project$ExamplesGenerated$uist19_koch),
			_1: {
				ctor: '::',
				_0: A2(_user$project$ExamplesGenerated$makeExample, '(ii) Precision Floor Plan', _user$project$ExamplesGenerated$uist19_precision_floor_plan),
				_1: {
					ctor: '::',
					_0: A2(_user$project$ExamplesGenerated$makeExample, '(iii) Mondrian Arch', _user$project$ExamplesGenerated$uist19_mondrian_arch),
					_1: {
						ctor: '::',
						_0: A2(_user$project$ExamplesGenerated$makeExample, '(iv) Balance Scale', _user$project$ExamplesGenerated$uist19_balance_scale),
						_1: {
							ctor: '::',
							_0: A2(_user$project$ExamplesGenerated$makeExample, '(v) Box Volume', _user$project$ExamplesGenerated$uist19_box_volume),
							_1: {
								ctor: '::',
								_0: A2(_user$project$ExamplesGenerated$makeExample, '(vi) Xs', _user$project$ExamplesGenerated$uist19_Xs),
								_1: {
									ctor: '::',
									_0: A2(_user$project$ExamplesGenerated$makeExample, '(vii) Battery', _user$project$ExamplesGenerated$uist19_battery),
									_1: {
										ctor: '::',
										_0: A2(_user$project$ExamplesGenerated$makeExample, '(viii) Ladder', _user$project$ExamplesGenerated$uist19_ladder),
										_1: {
											ctor: '::',
											_0: A2(_user$project$ExamplesGenerated$makeExample, '(ix) Logo (via Three Tris)', _user$project$ExamplesGenerated$uist19_logo_via_three_tris),
											_1: {
												ctor: '::',
												_0: A2(_user$project$ExamplesGenerated$makeExample, '(x) N Boxes', _user$project$ExamplesGenerated$uist19_n_boxes),
												_1: {
													ctor: '::',
													_0: A2(_user$project$ExamplesGenerated$makeExample, '(xi) Ferris Wheel', _user$project$ExamplesGenerated$uist19_ferris_wheel),
													_1: {
														ctor: '::',
														_0: A2(_user$project$ExamplesGenerated$makeExample, '(xii) Tree Branch', _user$project$ExamplesGenerated$uist19_tree_branch),
														_1: {
															ctor: '::',
															_0: A2(_user$project$ExamplesGenerated$makeExample, '(xiii) Target', _user$project$ExamplesGenerated$uist19_target),
															_1: {
																ctor: '::',
																_0: A2(_user$project$ExamplesGenerated$makeExample, '(xiv) Pencil Tip', _user$project$ExamplesGenerated$uist19_pencil_tip),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$ExamplesGenerated$makeExample, '(xv) Arrows', _user$project$ExamplesGenerated$uist19_arrows),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$ExamplesGenerated$makeExample, '(xvi) Rails', _user$project$ExamplesGenerated$uist19_rails),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$ExamplesGenerated$templateCategories = {
	ctor: '::',
	_0: _user$project$ExamplesGenerated$generalCategory,
	_1: {
		ctor: '::',
		_0: _user$project$ExamplesGenerated$uist19Category,
		_1: {ctor: '[]'}
	}
};
var _user$project$ExamplesGenerated$list = _elm_lang$core$List$concat(
	A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _user$project$ExamplesGenerated$templateCategories));

var _user$project$DependenceGraph$strScopeId = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(_p1._0),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'-',
			_elm_lang$core$Basics$toString(_p1._1)));
};
var _user$project$DependenceGraph$clusterNode = function (scopeId) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'scope',
		_user$project$DependenceGraph$strScopeId(scopeId));
};
var _user$project$DependenceGraph$scopeEdges = F2(
	function (f, scopeGraph) {
		return A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$List$map,
			_elm_lang$core$Dict$toList(scopeGraph.parents),
			function (_p2) {
				var _p3 = _p2;
				return f(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$DependenceGraph$clusterNode(_p3._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' -> ',
							_user$project$DependenceGraph$clusterNode(_p3._1))));
			});
	});
var _user$project$DependenceGraph$defineNode = F3(
	function (color, name, label) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				' [label=\"',
				A2(
					_elm_lang$core$Basics_ops['++'],
					label,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\", style=filled, fillcolor=',
						A2(_elm_lang$core$Basics_ops['++'], color, ']')))));
	});
var _user$project$DependenceGraph$defineVarNode = _user$project$DependenceGraph$defineNode('lemonchiffon1');
var _user$project$DependenceGraph$defineClusterNode = function (letOrFun) {
	var _p4 = letOrFun;
	if (_p4 === true) {
		return _user$project$DependenceGraph$defineNode('white');
	} else {
		return _user$project$DependenceGraph$defineNode('lightblue1');
	}
};
var _user$project$DependenceGraph$patternTransitivelyDependsOnScope = F3(
	function (scopeGraph, sourcePat, targetScope) {
		var directDependency = A2(
			_elm_lang$core$Set$member,
			targetScope,
			A2(_user$project$Utils$dictGetSet, sourcePat, scopeGraph.dependenciesPS));
		var transitiveDependency = function (_p5) {
			var _p6 = _p5;
			return A2(
				_elm_lang$core$List$any,
				function (pat) {
					return A3(_user$project$DependenceGraph$patternTransitivelyDependsOnScope, scopeGraph, pat, targetScope);
				},
				_elm_lang$core$Set$toList(
					A2(_user$project$Utils$dictGetSet, sourcePat, scopeGraph.dependencies)));
		};
		return directDependency || transitiveDependency(
			{ctor: '_Tuple0'});
	});
var _user$project$DependenceGraph$rootId = {ctor: '_Tuple2', _0: 0, _1: 1};
var _user$project$DependenceGraph$rootPathedPatId = {
	ctor: '_Tuple2',
	_0: _user$project$DependenceGraph$rootId,
	_1: {ctor: '[]'}
};
var _user$project$DependenceGraph$initEnv = {currentScope: _user$project$DependenceGraph$rootId, currentScopes: _elm_lang$core$Set$empty, varBindings: _elm_lang$core$Dict$empty};
var _user$project$DependenceGraph$lookupIdent = F2(
	function (pathedPatId, scopeGraph) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'?',
			A2(_elm_lang$core$Dict$get, pathedPatId, scopeGraph.idents));
	});
var _user$project$DependenceGraph$resolve = F2(
	function (x, varBindings) {
		var _p7 = A2(_elm_lang$core$Dict$get, x, varBindings);
		if ((_p7.ctor === 'Just') && (_p7._0.ctor === '::')) {
			return _elm_lang$core$Maybe$Just(_p7._0._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$DependenceGraph$addVarBindingsAfter = F3(
	function (scopeId, varBindings, acc) {
		return _elm_lang$core$Native_Utils.update(
			acc,
			{
				varBindingsAfter: A3(_elm_lang$core$Dict$insert, scopeId, varBindings, acc.varBindingsAfter)
			});
	});
var _user$project$DependenceGraph$addVarBindingsBefore = F3(
	function (scopeId, varBindings, acc) {
		return _elm_lang$core$Native_Utils.update(
			acc,
			{
				varBindingsBefore: A3(_elm_lang$core$Dict$insert, scopeId, varBindings, acc.varBindingsBefore)
			});
	});
var _user$project$DependenceGraph$addScopeEdge = F3(
	function (newScopeId, currentScopeId, acc) {
		return _elm_lang$core$Native_Utils.update(
			acc,
			{
				parents: A3(_elm_lang$core$Dict$insert, newScopeId, currentScopeId, acc.parents),
				children: A3(_user$project$Utils$dictAddToSet, currentScopeId, newScopeId, acc.children)
			});
	});
var _user$project$DependenceGraph$addScopeNode = F3(
	function (newScopeId, letOrFun, acc) {
		return _elm_lang$core$Native_Utils.update(
			acc,
			{
				scopeNodes: A3(
					_elm_lang$core$Dict$insert,
					newScopeId,
					{ctor: '_Tuple2', _0: letOrFun, _1: _elm_lang$core$Set$empty},
					acc.scopeNodes)
			});
	});
var _user$project$DependenceGraph$addVarNode = F3(
	function (pathedPatId, x, acc) {
		var _p8 = pathedPatId;
		var scopeId = _p8._0;
		var _p9 = A3(_user$project$Utils$justGet_, 'addVarNode', scopeId, acc.scopeNodes);
		var letOrFun = _p9._0;
		var set = _p9._1;
		return _elm_lang$core$Native_Utils.update(
			acc,
			{
				scopeNodes: A3(
					_elm_lang$core$Dict$insert,
					scopeId,
					{
						ctor: '_Tuple2',
						_0: letOrFun,
						_1: A2(_elm_lang$core$Set$insert, pathedPatId, set)
					},
					acc.scopeNodes),
				idents: A3(_elm_lang$core$Dict$insert, pathedPatId, x, acc.idents)
			});
	});
var _user$project$DependenceGraph$addVarToEnv = F3(
	function (pathedPatId, x, env) {
		var xBindings = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(_elm_lang$core$Dict$get, x, env.varBindings));
		return _elm_lang$core$Native_Utils.update(
			env,
			{
				varBindings: A3(
					_elm_lang$core$Dict$insert,
					x,
					{ctor: '::', _0: pathedPatId, _1: xBindings},
					env.varBindings)
			});
	});
var _user$project$DependenceGraph$foldPatternsWithIds = F4(
	function (f, _p10, pats, init) {
		var _p11 = _p10;
		var _p19 = _p11._0;
		var _p18 = _p11._1;
		var doOne = F4(
			function (f, pathedPatId, pat, acc) {
				doOne:
				while (true) {
					var _p12 = pat.val.p__;
					switch (_p12.ctor) {
						case 'PConst':
							return acc;
						case 'PBase':
							return acc;
						case 'PWildcard':
							return acc;
						case 'PVar':
							return A3(f, pathedPatId, _p12._1, acc);
						case 'PAs':
							return A3(
								f,
								pathedPatId,
								_p12._1,
								A4(doOne, f, pathedPatId, _p12._3, acc));
						case 'PList':
							if (_p12._3.ctor === 'Nothing') {
								return A4(doMany, f, pathedPatId, _p12._1, acc);
							} else {
								return A4(
									doMany,
									f,
									pathedPatId,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p12._1,
										{
											ctor: '::',
											_0: _p12._3._0,
											_1: {ctor: '[]'}
										}),
									acc);
							}
						default:
							var _v7 = f,
								_v8 = pathedPatId,
								_v9 = _p12._1,
								_v10 = acc;
							f = _v7;
							pathedPatId = _v8;
							pat = _v9;
							acc = _v10;
							continue doOne;
					}
				}
			});
		var doMany = F4(
			function (f, _p13, pats, acc) {
				var _p14 = _p13;
				return A3(
					_user$project$Utils$foldli1,
					function (_p15) {
						var _p16 = _p15;
						return A3(
							doOne,
							f,
							{
								ctor: '_Tuple2',
								_0: _p14._0,
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									_p14._1,
									{
										ctor: '::',
										_0: _p16._0,
										_1: {ctor: '[]'}
									})
							},
							_p16._1);
					},
					acc,
					pats);
			});
		var _p17 = pats;
		if ((_p17.ctor === '::') && (_p17._1.ctor === '[]')) {
			return A4(
				doOne,
				f,
				{ctor: '_Tuple2', _0: _p19, _1: _p18},
				_p17._0,
				init);
		} else {
			return A4(
				doMany,
				f,
				{ctor: '_Tuple2', _0: _p19, _1: _p18},
				pats,
				init);
		}
	});
var _user$project$DependenceGraph$updateEnv = F3(
	function (newScopeId, pats, env) {
		return A4(
			_user$project$DependenceGraph$foldPatternsWithIds,
			_user$project$DependenceGraph$addVarToEnv,
			{
				ctor: '_Tuple2',
				_0: newScopeId,
				_1: {ctor: '[]'}
			},
			pats,
			_elm_lang$core$Native_Utils.update(
				env,
				{
					currentScope: newScopeId,
					currentScopes: A2(_elm_lang$core$Set$insert, newScopeId, env.currentScopes)
				}));
	});
var _user$project$DependenceGraph$traverseAndAddDependencies_ = F5(
	function (pathedPatId, env, pat, exp, acc) {
		traverseAndAddDependencies_:
		while (true) {
			var addDependencies = F2(
				function (somePathedPatId, acc) {
					var used = A2(
						_elm_lang$core$Set$filter,
						function (_p20) {
							var _p21 = _p20;
							return A2(_elm_lang$core$Set$member, _p21._0, env.currentScopes);
						},
						acc.usedVars);
					var update = F2(
						function (dict, foo) {
							return A3(_elm_lang$core$Set$foldl, foo, dict, used);
						});
					return _elm_lang$core$Native_Utils.update(
						acc,
						{
							dependencies: A2(
								update,
								acc.dependencies,
								function (usedPat) {
									return A2(_user$project$Utils$dictAddToSet, somePathedPatId, usedPat);
								}),
							dependenciesPS: A2(
								update,
								acc.dependenciesPS,
								function (usedPat) {
									return A2(
										_user$project$Utils$dictAddToSet,
										somePathedPatId,
										_elm_lang$core$Tuple$first(usedPat));
								}),
							dependenciesSP: A2(
								update,
								acc.dependenciesSP,
								function (usedPat) {
									return A2(
										_user$project$Utils$dictAddToSet,
										_elm_lang$core$Tuple$first(somePathedPatId),
										usedPat);
								}),
							dependenciesSS: A2(
								update,
								acc.dependenciesSS,
								function (usedPat) {
									return A2(
										_user$project$Utils$dictAddToSet,
										_elm_lang$core$Tuple$first(somePathedPatId),
										_elm_lang$core$Tuple$first(usedPat));
								})
						});
				});
			var addConservativeDependencies = function (acc) {
				return A4(
					_user$project$DependenceGraph$foldPatternsWithIds,
					F3(
						function (innerPathedPatId, _p22, acc) {
							return A2(addDependencies, innerPathedPatId, acc);
						}),
					pathedPatId,
					{
						ctor: '::',
						_0: pat,
						_1: {ctor: '[]'}
					},
					acc);
			};
			var clearUsed = function (acc) {
				return _elm_lang$core$Native_Utils.update(
					acc,
					{usedVars: _elm_lang$core$Set$empty});
			};
			var _p23 = {ctor: '_Tuple2', _0: pat.val.p__, _1: exp.val.e__};
			switch (_p23._0.ctor) {
				case 'PConst':
					return A3(_user$project$DependenceGraph$traverse, env, exp, acc);
				case 'PBase':
					return A3(_user$project$DependenceGraph$traverse, env, exp, acc);
				case 'PWildcard':
					return A3(_user$project$DependenceGraph$traverse, env, exp, acc);
				case 'PVar':
					return A2(
						addDependencies,
						pathedPatId,
						A3(
							_user$project$DependenceGraph$traverse,
							env,
							exp,
							clearUsed(acc)));
				case 'PAs':
					var _v16 = pathedPatId,
						_v17 = env,
						_v18 = _p23._0._3,
						_v19 = exp,
						_v20 = A2(
						addDependencies,
						pathedPatId,
						A3(
							_user$project$DependenceGraph$traverse,
							env,
							exp,
							clearUsed(acc)));
					pathedPatId = _v16;
					env = _v17;
					pat = _v18;
					exp = _v19;
					acc = _v20;
					continue traverseAndAddDependencies_;
				case 'PParens':
					var _v21 = pathedPatId,
						_v22 = env,
						_v23 = _p23._0._1,
						_v24 = exp,
						_v25 = A2(
						addDependencies,
						pathedPatId,
						A3(
							_user$project$DependenceGraph$traverse,
							env,
							exp,
							clearUsed(acc)));
					pathedPatId = _v21;
					env = _v22;
					pat = _v23;
					exp = _v24;
					acc = _v25;
					continue traverseAndAddDependencies_;
				default:
					if (_p23._1.ctor === 'EList') {
						var ps = A2(_user$project$Utils$snocMaybe, _p23._0._1, _p23._0._3);
						var es = A2(
							_user$project$Utils$snocMaybe,
							A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p23._1._1),
							_p23._1._3);
						if (_elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$length(ps),
							_elm_lang$core$List$length(es))) {
							var _p24 = pathedPatId;
							var scopeId = _p24._0;
							var basePath = _p24._1;
							return A3(
								_user$project$Utils$foldli1,
								F2(
									function (_p25, acc) {
										var _p26 = _p25;
										var pathedPatId = {
											ctor: '_Tuple2',
											_0: scopeId,
											_1: A2(
												_elm_lang$core$Basics_ops['++'],
												basePath,
												{
													ctor: '::',
													_0: _p26._0,
													_1: {ctor: '[]'}
												})
										};
										return A5(_user$project$DependenceGraph$traverseAndAddDependencies_, pathedPatId, env, _p26._1._0, _p26._1._1, acc);
									}),
								acc,
								A2(_user$project$Utils$zip, ps, es));
						} else {
							return addConservativeDependencies(
								A3(
									_user$project$DependenceGraph$traverse,
									env,
									exp,
									clearUsed(acc)));
						}
					} else {
						return addConservativeDependencies(
							A3(
								_user$project$DependenceGraph$traverse,
								env,
								exp,
								clearUsed(acc)));
					}
			}
		}
	});
var _user$project$DependenceGraph$traverse = F3(
	function (env, exp, acc) {
		traverse:
		while (true) {
			var recurse = function (es) {
				return A3(
					_elm_lang$core$List$foldl,
					_user$project$DependenceGraph$traverse(env),
					acc,
					es);
			};
			var newScopeId = {ctor: '_Tuple2', _0: exp.val.eid, _1: 1};
			var _p27 = exp.val.e__;
			switch (_p27.ctor) {
				case 'ELet':
					var _p28 = _p27._3;
					var env1 = A3(
						_user$project$DependenceGraph$updateEnv,
						newScopeId,
						{
							ctor: '::',
							_0: _p28,
							_1: {ctor: '[]'}
						},
						env);
					var _v28 = env1,
						_v29 = _p27._7,
						_v30 = A3(
						_user$project$DependenceGraph$addVarBindingsAfter,
						newScopeId,
						env1.varBindings,
						A3(
							_user$project$DependenceGraph$addVarBindingsBefore,
							newScopeId,
							env.varBindings,
							A5(
								_user$project$DependenceGraph$traverseAndAddDependencies,
								newScopeId,
								env,
								_p28,
								_p27._5,
								A4(
									_user$project$DependenceGraph$foldPatternsWithIds,
									_user$project$DependenceGraph$addVarNode,
									{
										ctor: '_Tuple2',
										_0: newScopeId,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _p28,
										_1: {ctor: '[]'}
									},
									A3(
										_user$project$DependenceGraph$addScopeEdge,
										newScopeId,
										env.currentScope,
										A3(_user$project$DependenceGraph$addScopeNode, newScopeId, true, acc))))));
					env = _v28;
					exp = _v29;
					acc = _v30;
					continue traverse;
				case 'EFun':
					var _p29 = _p27._1;
					var env1 = A3(_user$project$DependenceGraph$updateEnv, newScopeId, _p29, env);
					var _v31 = env1,
						_v32 = _p27._2,
						_v33 = A3(
						_user$project$DependenceGraph$addVarBindingsAfter,
						newScopeId,
						env1.varBindings,
						A3(
							_user$project$DependenceGraph$addVarBindingsBefore,
							newScopeId,
							env.varBindings,
							A4(
								_user$project$DependenceGraph$foldPatternsWithIds,
								_user$project$DependenceGraph$addVarNode,
								{
									ctor: '_Tuple2',
									_0: newScopeId,
									_1: {ctor: '[]'}
								},
								_p29,
								A3(
									_user$project$DependenceGraph$addScopeEdge,
									newScopeId,
									env.currentScope,
									A3(_user$project$DependenceGraph$addScopeNode, newScopeId, false, acc)))));
					env = _v31;
					exp = _v32;
					acc = _v33;
					continue traverse;
				case 'EVar':
					var _p30 = A2(_user$project$DependenceGraph$resolve, _p27._1, env.varBindings);
					if (_p30.ctor === 'Nothing') {
						return acc;
					} else {
						return _elm_lang$core$Native_Utils.update(
							acc,
							{
								usedVars: A2(_elm_lang$core$Set$insert, _p30._0, acc.usedVars)
							});
					}
				case 'EConst':
					return acc;
				case 'EBase':
					return acc;
				case 'EApp':
					return recurse(
						{ctor: '::', _0: _p27._1, _1: _p27._2});
				case 'EOp':
					return recurse(_p27._2);
				case 'EIf':
					return recurse(
						{
							ctor: '::',
							_0: _p27._1,
							_1: {
								ctor: '::',
								_0: _p27._3,
								_1: {
									ctor: '::',
									_0: _p27._5,
									_1: {ctor: '[]'}
								}
							}
						});
				case 'EList':
					if (_p27._3.ctor === 'Just') {
						return recurse(
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p27._1),
								{
									ctor: '::',
									_0: _p27._3._0,
									_1: {ctor: '[]'}
								}));
					} else {
						return recurse(
							A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p27._1));
					}
				case 'ECase':
					var _p31 = A2(
						_elm_lang$core$Debug$log,
						'TODO: scope tree ECase',
						{ctor: '_Tuple0'});
					return acc;
				case 'ETypeCase':
					var _p32 = A2(
						_elm_lang$core$Debug$log,
						'TODO: scope tree ETypeCase',
						{ctor: '_Tuple0'});
					return acc;
				case 'EComment':
					return recurse(
						{
							ctor: '::',
							_0: _p27._2,
							_1: {ctor: '[]'}
						});
				case 'EOption':
					return recurse(
						{
							ctor: '::',
							_0: _p27._4,
							_1: {ctor: '[]'}
						});
				case 'ETyp':
					return recurse(
						{
							ctor: '::',
							_0: _p27._3,
							_1: {ctor: '[]'}
						});
				case 'EColonType':
					return recurse(
						{
							ctor: '::',
							_0: _p27._1,
							_1: {ctor: '[]'}
						});
				case 'ETypeAlias':
					return recurse(
						{
							ctor: '::',
							_0: _p27._3,
							_1: {ctor: '[]'}
						});
				case 'EParens':
					return recurse(
						{
							ctor: '::',
							_0: _p27._1,
							_1: {ctor: '[]'}
						});
				default:
					var _p33 = _user$project$Utils$log('DependenceGraph.traverse: EHole in exp!!');
					return acc;
			}
		}
	});
var _user$project$DependenceGraph$traverseAndAddDependencies = function (newScopeId) {
	return _user$project$DependenceGraph$traverseAndAddDependencies_(
		{
			ctor: '_Tuple2',
			_0: newScopeId,
			_1: {ctor: '[]'}
		});
};
var _user$project$DependenceGraph$compute = function (e) {
	return A3(
		_user$project$DependenceGraph$traverse,
		_user$project$DependenceGraph$initEnv,
		e,
		{
			scopeNodes: A2(
				_elm_lang$core$Dict$singleton,
				_user$project$DependenceGraph$rootId,
				{ctor: '_Tuple2', _0: true, _1: _elm_lang$core$Set$empty}),
			idents: _elm_lang$core$Dict$empty,
			parents: _elm_lang$core$Dict$empty,
			children: _elm_lang$core$Dict$empty,
			dependencies: _elm_lang$core$Dict$empty,
			dependenciesPS: _elm_lang$core$Dict$empty,
			dependenciesSP: _elm_lang$core$Dict$empty,
			dependenciesSS: _elm_lang$core$Dict$empty,
			varBindingsBefore: _elm_lang$core$Dict$empty,
			varBindingsAfter: _elm_lang$core$Dict$empty,
			usedVars: _elm_lang$core$Set$empty
		});
};
var _user$project$DependenceGraph$strPathedPatId = function (_p34) {
	var _p35 = _p34;
	return A2(
		_elm_lang$core$String$join,
		'_',
		{
			ctor: '::',
			_0: _user$project$DependenceGraph$strScopeId(_p35._0),
			_1: A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, _p35._1)
		});
};
var _user$project$DependenceGraph$varNode = function (pathedPatId) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'var',
		_user$project$DependenceGraph$strPathedPatId(pathedPatId));
};
var _user$project$DependenceGraph$clusters = F2(
	function (f, scopeGraph) {
		return A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$List$concatMap,
			_elm_lang$core$Dict$toList(scopeGraph.scopeNodes),
			function (_p36) {
				var _p37 = _p36;
				var _p38 = _p37._0;
				var s = _elm_lang$core$Basics$toString(_p38);
				return _elm_lang$core$List$concat(
					{
						ctor: '::',
						_0: {
							ctor: '::',
							_0: f(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'subgraph cluster',
									A2(_elm_lang$core$Basics_ops['++'], s, ' {'))),
							_1: {ctor: '[]'}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '::',
								_0: f(
									A3(
										_user$project$DependenceGraph$defineClusterNode,
										_p37._1._0,
										_user$project$DependenceGraph$clusterNode(_p38),
										s)),
								_1: {ctor: '[]'}
							},
							_1: {
								ctor: '::',
								_0: A3(
									_elm_lang$core$Basics$flip,
									_elm_lang$core$List$map,
									_elm_lang$core$Set$toList(_p37._1._1),
									function (pathedPatId) {
										var x = A2(
											_elm_lang$core$Maybe$withDefault,
											'???',
											A2(_elm_lang$core$Dict$get, pathedPatId, scopeGraph.idents));
										return f(
											A2(
												_user$project$DependenceGraph$defineVarNode,
												_user$project$DependenceGraph$varNode(pathedPatId),
												x));
									}),
								_1: {
									ctor: '::',
									_0: {
										ctor: '::',
										_0: f('}'),
										_1: {ctor: '[]'}
									},
									_1: {ctor: '[]'}
								}
							}
						}
					});
			});
	});
var _user$project$DependenceGraph$dependencyEdges = F2(
	function (f, scopeGraph) {
		return A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$List$concatMap,
			_elm_lang$core$Dict$toList(scopeGraph.dependencies),
			function (_p39) {
				var _p40 = _p39;
				return A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$List$map,
					_elm_lang$core$Set$toList(_p40._1),
					function (pTarget) {
						return f(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$DependenceGraph$varNode(_p40._0),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' -> ',
									_user$project$DependenceGraph$varNode(pTarget))));
					});
			});
	});
var _user$project$DependenceGraph$print = F4(
	function (overall, combine, f, scopeGraph) {
		var nodes = A2(_user$project$DependenceGraph$clusters, f, scopeGraph);
		var edges1 = A2(_user$project$DependenceGraph$scopeEdges, f, scopeGraph);
		var edges2 = A2(_user$project$DependenceGraph$dependencyEdges, f, scopeGraph);
		return overall(
			combine(
				_elm_lang$core$List$concat(
					{
						ctor: '::',
						_0: {
							ctor: '::',
							_0: f('digraph scopeGraph {'),
							_1: {ctor: '[]'}
						},
						_1: {
							ctor: '::',
							_0: nodes,
							_1: {
								ctor: '::',
								_0: edges1,
								_1: {
									ctor: '::',
									_0: edges2,
									_1: {
										ctor: '::',
										_0: {
											ctor: '::',
											_0: f('}'),
											_1: {ctor: '[]'}
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					})));
	});
var _user$project$DependenceGraph$printHtml = A3(
	_user$project$DependenceGraph$print,
	_elm_lang$html$Html$div(
		{ctor: '[]'}),
	_elm_lang$core$List$intersperse(
		A2(
			_elm_lang$html$Html$br,
			{ctor: '[]'},
			{ctor: '[]'})),
	_elm_lang$html$Html$text);
var _user$project$DependenceGraph$printString = A3(_user$project$DependenceGraph$print, _elm_lang$core$Basics$identity, _user$project$Utils$lines, _elm_lang$core$Basics$identity);
var _user$project$DependenceGraph$childScopesOf = F2(
	function (i, sg) {
		return A2(_user$project$Utils$dictGetSet, i, sg.children);
	});
var _user$project$DependenceGraph$usedOnTheWayDownTo = F4(
	function (scopeGraph, sourcePat, targetScope, includingTarget) {
		var traverseDown = function (currentScope) {
			var usedHere = function (_p41) {
				var _p42 = _p41;
				return A2(
					_elm_lang$core$Set$member,
					sourcePat,
					A2(_user$project$Utils$dictGetSet, currentScope, scopeGraph.dependenciesSP));
			};
			if (_elm_lang$core$Native_Utils.eq(currentScope, targetScope) && (!includingTarget)) {
				return false;
			} else {
				if (_elm_lang$core$Native_Utils.eq(currentScope, targetScope)) {
					return usedHere(
						{ctor: '_Tuple0'});
				} else {
					if (usedHere(
						{ctor: '_Tuple0'})) {
						return true;
					} else {
						var children = _elm_lang$core$Set$toList(
							A2(_user$project$DependenceGraph$childScopesOf, currentScope, scopeGraph));
						return A2(_elm_lang$core$List$any, traverseDown, children);
					}
				}
			}
		};
		var sourceScope = _elm_lang$core$Tuple$first(sourcePat);
		return traverseDown(sourceScope);
	});
var _user$project$DependenceGraph$parentScopeOf = F2(
	function (i, sg) {
		return A3(
			_user$project$Utils$justGet_,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'parentScopeOf ',
				_elm_lang$core$Basics$toString(i)),
			i,
			sg.parents);
	});
var _user$project$DependenceGraph$pathToRoot = F2(
	function (sg, scopeId) {
		return _elm_lang$core$Native_Utils.eq(scopeId, _user$project$DependenceGraph$rootId) ? {
			ctor: '::',
			_0: _user$project$DependenceGraph$rootId,
			_1: {ctor: '[]'}
		} : {
			ctor: '::',
			_0: scopeId,
			_1: A2(
				_user$project$DependenceGraph$pathToRoot,
				sg,
				A2(_user$project$DependenceGraph$parentScopeOf, scopeId, sg))
		};
	});
var _user$project$DependenceGraph$pathFromRoot = F2(
	function (sg, scopeId) {
		return _elm_lang$core$List$reverse(
			A2(_user$project$DependenceGraph$pathToRoot, sg, scopeId));
	});
var _user$project$DependenceGraph$renderDotGraph = _elm_lang$core$Native_Platform.outgoingPort(
	'renderDotGraph',
	function (v) {
		return v;
	});
var _user$project$DependenceGraph$render = function (_p43) {
	return _user$project$DependenceGraph$renderDotGraph(
		_user$project$DependenceGraph$printString(_p43));
};
var _user$project$DependenceGraph$receiveImage = _elm_lang$core$Native_Platform.incomingPort('receiveImage', _elm_lang$core$Json_Decode$string);
var _user$project$DependenceGraph$ScopeGraph = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {scopeNodes: a, idents: b, parents: c, children: d, dependencies: e, dependenciesPS: f, dependenciesSP: g, dependenciesSS: h, varBindingsBefore: i, varBindingsAfter: j, usedVars: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$DependenceGraph$Env = F3(
	function (a, b, c) {
		return {currentScope: a, currentScopes: b, varBindings: c};
	});
var _user$project$DependenceGraph$NearestCommonAncestor = function (a) {
	return {ctor: 'NearestCommonAncestor', _0: a};
};
var _user$project$DependenceGraph$ChildScope = {ctor: 'ChildScope'};
var _user$project$DependenceGraph$ParentScope = {ctor: 'ParentScope'};
var _user$project$DependenceGraph$SameScope = {ctor: 'SameScope'};
var _user$project$DependenceGraph$scopeOrder = F3(
	function (sg, i, j) {
		var walk = F3(
			function (lastCommonAncestor, path1, path2) {
				walk:
				while (true) {
					var _p44 = {ctor: '_Tuple2', _0: path1, _1: path2};
					if (_p44._0.ctor === '::') {
						if (_p44._1.ctor === '::') {
							var _p45 = _p44._0._0;
							if (_elm_lang$core$Native_Utils.eq(_p45, _p44._1._0)) {
								var _v40 = _p45,
									_v41 = _p44._0._1,
									_v42 = _p44._1._1;
								lastCommonAncestor = _v40;
								path1 = _v41;
								path2 = _v42;
								continue walk;
							} else {
								if (_elm_lang$core$Native_Utils.eq(lastCommonAncestor, i)) {
									return _user$project$DependenceGraph$ParentScope;
								} else {
									if (_elm_lang$core$Native_Utils.eq(lastCommonAncestor, j)) {
										return _user$project$DependenceGraph$ChildScope;
									} else {
										return _user$project$DependenceGraph$NearestCommonAncestor(lastCommonAncestor);
									}
								}
							}
						} else {
							return _elm_lang$core$Native_Utils.eq(lastCommonAncestor, j) ? _user$project$DependenceGraph$ChildScope : _user$project$DependenceGraph$NearestCommonAncestor(lastCommonAncestor);
						}
					} else {
						if (_p44._1.ctor === '::') {
							return _elm_lang$core$Native_Utils.eq(lastCommonAncestor, i) ? _user$project$DependenceGraph$ParentScope : _user$project$DependenceGraph$NearestCommonAncestor(lastCommonAncestor);
						} else {
							return A2(_elm_lang$core$Debug$log, 'WARN: SameScope should\'ve been detected already', _user$project$DependenceGraph$SameScope);
						}
					}
				}
			});
		if (_elm_lang$core$Native_Utils.eq(i, j)) {
			return _user$project$DependenceGraph$SameScope;
		} else {
			var jPath = A2(
				_elm_lang$core$List$drop,
				1,
				A2(_user$project$DependenceGraph$pathFromRoot, sg, j));
			var iPath = A2(
				_elm_lang$core$List$drop,
				1,
				A2(_user$project$DependenceGraph$pathFromRoot, sg, i));
			return A3(walk, _user$project$DependenceGraph$rootId, iPath, jPath);
		}
	});
var _user$project$DependenceGraph$checkVisible = F4(
	function (scopeGraph, x, sourcePat, targetId) {
		var nothing = {ctor: '[]'};
		var just = function (x) {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		};
		var _p46 = sourcePat;
		var sourceId = _p46._0;
		var xBindingsAfterSource = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Dict$get,
				x,
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Dict$empty,
					A2(_elm_lang$core$Dict$get, sourceId, scopeGraph.varBindingsAfter))));
		var xBindingsBeforeTarget = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Dict$get,
				x,
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Dict$empty,
					A2(_elm_lang$core$Dict$get, targetId, scopeGraph.varBindingsBefore))));
		var capturedBy1 = function () {
			var _p47 = xBindingsAfterSource;
			if (_p47.ctor === '[]') {
				return _elm_lang$core$Native_Utils.crashCase(
					'DependenceGraph',
					{
						start: {line: 434, column: 5},
						end: {line: 453, column: 24}
					},
					_p47)('blah');
			} else {
				if (!_elm_lang$core$Native_Utils.eq(_p47._0, sourcePat)) {
					return nothing;
				} else {
					var _p49 = _p47._1;
					if (_p49.ctor === '[]') {
						return nothing;
					} else {
						var _p51 = _p49._0;
						var _p50 = A3(
							_user$project$DependenceGraph$scopeOrder,
							scopeGraph,
							targetId,
							_elm_lang$core$Tuple$first(_p51));
						switch (_p50.ctor) {
							case 'ChildScope':
								return nothing;
							case 'ParentScope':
								return just(
									{ctor: '_Tuple2', _0: sourcePat, _1: _p51});
							case 'SameScope':
								return just(
									{ctor: '_Tuple2', _0: sourcePat, _1: _p51});
							default:
								return nothing;
						}
					}
				}
			}
		}();
		var capturedBy2 = function () {
			var _p52 = xBindingsBeforeTarget;
			if (_p52.ctor === '[]') {
				return nothing;
			} else {
				var _p53 = _p52._0;
				return _elm_lang$core$Native_Utils.eq(sourcePat, _p53) ? nothing : just(
					{ctor: '_Tuple2', _0: _p53, _1: sourcePat});
			}
		}();
		var scopeIssues = A2(_elm_lang$core$Basics_ops['++'], capturedBy1, capturedBy2);
		return _elm_lang$core$Native_Utils.eq(
			scopeIssues,
			{ctor: '[]'}) ? '' : '[WARN shadowing] ';
	});

var _user$project$Keys$keyPlusEqual = 187;
var _user$project$Keys$keyZ = 90;
var _user$project$Keys$keyG = 71;
var _user$project$Keys$keyE = 69;
var _user$project$Keys$keyD = 68;
var _user$project$Keys$keyC = 67;
var _user$project$Keys$keyB = 66;
var _user$project$Keys$keyA = 65;
var _user$project$Keys$keyDelete = 46;
var _user$project$Keys$keyBackspace = 8;
var _user$project$Keys$keyDown = 40;
var _user$project$Keys$keyRight = 39;
var _user$project$Keys$keyUp = 38;
var _user$project$Keys$keyLeft = 37;
var _user$project$Keys$keyShift = 16;
var _user$project$Keys$keyCtrl = 17;
var _user$project$Keys$keyEsc = 27;
var _user$project$Keys$keyEnter = 13;
var _user$project$Keys$isCommandKey = function (code) {
	return A2(
		_elm_lang$core$List$member,
		code,
		{
			ctor: '::',
			_0: 17,
			_1: {
				ctor: '::',
				_0: 91,
				_1: {
					ctor: '::',
					_0: 93,
					_1: {
						ctor: '::',
						_0: 224,
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Keys$delete = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyDelete,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$backspace = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyBackspace,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$shiftDown = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyShift,
		_1: {
			ctor: '::',
			_0: _user$project$Keys$keyDown,
			_1: {ctor: '[]'}
		}
	});
var _user$project$Keys$shiftUp = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyShift,
		_1: {
			ctor: '::',
			_0: _user$project$Keys$keyUp,
			_1: {ctor: '[]'}
		}
	});
var _user$project$Keys$shiftRight = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyShift,
		_1: {
			ctor: '::',
			_0: _user$project$Keys$keyRight,
			_1: {ctor: '[]'}
		}
	});
var _user$project$Keys$shiftLeft = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyShift,
		_1: {
			ctor: '::',
			_0: _user$project$Keys$keyLeft,
			_1: {ctor: '[]'}
		}
	});
var _user$project$Keys$down = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyDown,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$up = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyUp,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$right = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyRight,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$left = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyLeft,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$s = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('S')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$t = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('T')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$q = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('Q')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$p = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('P')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$o = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('O')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$h = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('H')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$g = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('G')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$y = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('Y')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$x = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('X')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$z = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('Z')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$e = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('E')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$d = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('D')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$c = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('C')),
		_1: {ctor: '[]'}
	});
var _user$project$Keys$a = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyA,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$enter = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyEnter,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$escape = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyEsc,
		_1: {ctor: '[]'}
	});
var _user$project$Keys$escShift = _elm_lang$core$List$sort(
	{
		ctor: '::',
		_0: _user$project$Keys$keyEsc,
		_1: {
			ctor: '::',
			_0: _user$project$Keys$keyShift,
			_1: {ctor: '[]'}
		}
	});

var _user$project$DeuceWidgets$setHoveredMenuPath = F2(
	function (path, m) {
		var deuceState = m.deuceState;
		return _elm_lang$core$Native_Utils.update(
			m,
			{
				deuceState: _elm_lang$core$Native_Utils.update(
					deuceState,
					{hoveredMenuPath: path})
			});
	});
var _user$project$DeuceWidgets$clearHoveredMenuPath = _user$project$DeuceWidgets$setHoveredMenuPath(
	{ctor: '[]'});
var _user$project$DeuceWidgets$emptyDeuceState = {
	selectedWidgets: {ctor: '[]'},
	hoveredWidgets: {ctor: '[]'},
	hoveredMenuPath: {ctor: '[]'},
	renameVarTextBox: ''
};
var _user$project$DeuceWidgets$isSubWidget = F3(
	function (program, widget, superWidget) {
		var isSubEId = F2(
			function (subEId, superEId) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					false,
					A2(
						_elm_lang$core$Maybe$map,
						function (superExp) {
							return A2(
								_elm_lang$core$List$member,
								subEId,
								_user$project$Lang$allEIds(superExp));
						},
						A2(_user$project$Lang$findExpByEId, program, superEId)));
			});
		var boundExpContains = F2(
			function (subEId, superLetEId) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					false,
					A2(
						_elm_lang$core$Maybe$map,
						function (superBoundExp) {
							return A2(
								_elm_lang$core$List$member,
								subEId,
								_user$project$Lang$allEIds(superBoundExp));
						},
						A2(
							_elm_lang$core$Maybe$andThen,
							_user$project$LangTools$expToMaybeLetBoundExp,
							A2(_user$project$Lang$findExpByEId, program, superLetEId))));
			});
		var isSubPPId = F2(
			function (_p1, _p0) {
				var _p2 = _p1;
				var _p3 = _p0;
				return _elm_lang$core$Native_Utils.eq(_p2._0, _p3._0) && A2(_user$project$Utils$isPrefix, _p3._1, _p2._1);
			});
		var _p4 = {ctor: '_Tuple2', _0: widget, _1: superWidget};
		switch (_p4._1.ctor) {
			case 'DeuceExpTarget':
				if (_p4._0.ctor === 'DeuceExpTarget') {
					return _elm_lang$core$Native_Utils.eq(_p4._0._0, _p4._1._0);
				} else {
					return false;
				}
			case 'DeucePatTarget':
				if (_p4._0.ctor === 'DeucePatTarget') {
					return _elm_lang$core$Native_Utils.eq(_p4._0._0, _p4._1._0);
				} else {
					return false;
				}
			case 'DeuceExp':
				switch (_p4._0.ctor) {
					case 'DeuceExp':
						return A2(isSubEId, _p4._0._0, _p4._1._0);
					case 'DeucePat':
						return A2(
							isSubEId,
							_user$project$Lang$pathedPatIdToScopeEId(_p4._0._0),
							_p4._1._0);
					case 'DeuceLetBindingEquation':
						return A2(isSubEId, _p4._0._0, _p4._1._0);
					case 'DeuceExpTarget':
						var _p10 = _p4._1._0;
						var _p9 = _p4._0._0._1;
						return (!_elm_lang$core$Native_Utils.eq(_p9, _p10)) && A2(isSubEId, _p9, _p10);
					default:
						return A2(
							isSubEId,
							_user$project$Lang$pathedPatIdToScopeEId(_p4._0._0._1),
							_p4._1._0);
				}
			case 'DeucePat':
				switch (_p4._0.ctor) {
					case 'DeuceExp':
						return false;
					case 'DeucePat':
						return A2(isSubPPId, _p4._0._0, _p4._1._0);
					case 'DeuceLetBindingEquation':
						return false;
					case 'DeuceExpTarget':
						return false;
					default:
						var _p12 = _p4._1._0;
						var _p11 = _p4._0._0._1;
						return (!_elm_lang$core$Native_Utils.eq(_p11, _p12)) && A2(isSubPPId, _p11, _p12);
				}
			default:
				switch (_p4._0.ctor) {
					case 'DeuceExp':
						return A2(boundExpContains, _p4._0._0, _p4._1._0);
					case 'DeucePat':
						var _p6 = _p4._1._0;
						var _p5 = _p4._0._0;
						return _elm_lang$core$Native_Utils.eq(
							_user$project$Lang$pathedPatIdToScopeEId(_p5),
							_p6) || A2(
							boundExpContains,
							_user$project$Lang$pathedPatIdToScopeEId(_p5),
							_p6);
					case 'DeuceLetBindingEquation':
						var _p8 = _p4._1._0;
						var _p7 = _p4._0._0;
						return _elm_lang$core$Native_Utils.eq(_p7, _p8) || A2(boundExpContains, _p7, _p8);
					case 'DeuceExpTarget':
						return A2(boundExpContains, _p4._0._0._1, _p4._1._0);
					default:
						var _p14 = _p4._1._0;
						var _p13 = _p4._0._0._1;
						return _elm_lang$core$Native_Utils.eq(
							_user$project$Lang$pathedPatIdToScopeEId(_p13),
							_p14) || A2(
							boundExpContains,
							_user$project$Lang$pathedPatIdToScopeEId(_p13),
							_p14);
				}
		}
	});
var _user$project$DeuceWidgets$isTargetPosition = function (widget) {
	var _p15 = widget;
	switch (_p15.ctor) {
		case 'DeuceExp':
			return false;
		case 'DeucePat':
			return false;
		case 'DeuceLetBindingEquation':
			return false;
		case 'DeuceExpTarget':
			return true;
		default:
			return true;
	}
};
var _user$project$DeuceWidgets$DeuceState = F4(
	function (a, b, c, d) {
		return {selectedWidgets: a, hoveredWidgets: b, hoveredMenuPath: c, renameVarTextBox: d};
	});
var _user$project$DeuceWidgets$DeucePatTarget = function (a) {
	return {ctor: 'DeucePatTarget', _0: a};
};
var _user$project$DeuceWidgets$DeuceExpTarget = function (a) {
	return {ctor: 'DeuceExpTarget', _0: a};
};
var _user$project$DeuceWidgets$DeuceLetBindingEquation = function (a) {
	return {ctor: 'DeuceLetBindingEquation', _0: a};
};
var _user$project$DeuceWidgets$DeucePat = function (a) {
	return {ctor: 'DeucePat', _0: a};
};
var _user$project$DeuceWidgets$DeuceExp = function (a) {
	return {ctor: 'DeuceExp', _0: a};
};
var _user$project$DeuceWidgets$toDeuceWidget = F2(
	function (patMap, codeObject) {
		var _p16 = codeObject;
		switch (_p16.ctor) {
			case 'E':
				return _elm_lang$core$Maybe$Just(
					_user$project$DeuceWidgets$DeuceExp(_p16._0.val.eid));
			case 'P':
				return A2(
					_elm_lang$core$Maybe$map,
					_user$project$DeuceWidgets$DeucePat,
					A2(_elm_lang$core$Dict$get, _p16._1.val.pid, patMap));
			case 'T':
				return _elm_lang$core$Maybe$Nothing;
			case 'LBE':
				return _elm_lang$core$Maybe$Just(
					_user$project$DeuceWidgets$DeuceLetBindingEquation(_p16._0.val));
			case 'ET':
				return _elm_lang$core$Maybe$Just(
					_user$project$DeuceWidgets$DeuceExpTarget(
						{ctor: '_Tuple2', _0: _p16._0, _1: _p16._2.val.eid}));
			case 'PT':
				return A2(
					_elm_lang$core$Maybe$map,
					function (ppid) {
						return _user$project$DeuceWidgets$DeucePatTarget(
							{ctor: '_Tuple2', _0: _p16._0, _1: ppid});
					},
					A2(_elm_lang$core$Dict$get, _p16._3.val.pid, patMap));
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	});

var _user$project$History$next = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$List$head(_p1._0._1);
};
var _user$project$History$mostRecent = function (_p2) {
	var _p3 = _p2;
	return _elm_lang$core$List$head(_p3._0._0);
};
var _user$project$History$hasFuture = function (_p4) {
	var _p5 = _p4;
	return !_elm_lang$core$List$isEmpty(_p5._0._1);
};
var _user$project$History$hasExtendedPast = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(_p7._0._0),
		1) > 0;
};
var _user$project$History$hasPast = function (_p8) {
	var _p9 = _p8;
	return !_elm_lang$core$List$isEmpty(_p9._0._0);
};
var _user$project$History$H = function (a) {
	return {ctor: 'H', _0: a};
};
var _user$project$History$blank = _user$project$History$H(
	{
		ctor: '_Tuple2',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _user$project$History$commit = F3(
	function (updateCondition, snapshot, history) {
		var _p10 = history;
		var past = _p10._0._0;
		var updatedHistory = _user$project$History$H(
			{
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: snapshot, _1: past},
				_1: {ctor: '[]'}
			});
		var _p11 = _user$project$History$mostRecent(history);
		if (_p11.ctor === 'Just') {
			return A2(updateCondition, _p11._0, snapshot) ? updatedHistory : history;
		} else {
			return updatedHistory;
		}
	});
var _user$project$History$alwaysCommit = _user$project$History$commit(
	F2(
		function (_p13, _p12) {
			return true;
		}));
var _user$project$History$begin = function (snapshot) {
	return A2(_user$project$History$alwaysCommit, snapshot, _user$project$History$blank);
};
var _user$project$History$backward = function (_p14) {
	var _p15 = _p14;
	var _p16 = _p15._0._0;
	if (_p16.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_user$project$History$H(
				{
					ctor: '_Tuple2',
					_0: _p16._1,
					_1: {ctor: '::', _0: _p16._0, _1: _p15._0._1}
				}));
	}
};
var _user$project$History$modify = F2(
	function (snapshot, history) {
		return A2(
			_elm_lang$core$Maybe$map,
			_user$project$History$alwaysCommit(snapshot),
			_user$project$History$backward(history));
	});
var _user$project$History$previousN = F2(
	function (n, history) {
		return (_elm_lang$core$Native_Utils.cmp(n, 1) < 0) ? _elm_lang$core$Maybe$Nothing : (_elm_lang$core$Native_Utils.eq(n, 1) ? _user$project$History$mostRecent(history) : A2(
			_elm_lang$core$Maybe$andThen,
			_user$project$History$previousN(n - 1),
			_user$project$History$backward(history)));
	});
var _user$project$History$prior = _user$project$History$previousN(2);
var _user$project$History$forward = function (_p17) {
	var _p18 = _p17;
	var _p19 = _p18._0._1;
	if (_p19.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_user$project$History$H(
				{
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: _p19._0, _1: _p18._0._0},
					_1: _p19._1
				}));
	}
};

var _user$project$AlgorithmJish$becomes = function (role) {
	return _elm_lang$core$Set$singleton(role);
};
var _user$project$AlgorithmJish$unchanged = _elm_lang$core$Set$empty;
var _user$project$AlgorithmJish$isntAnyOf = function (roles) {
	return function (_p0) {
		return !A2(_user$project$Utils$anyOverlapListSet, roles, _p0);
	};
};
var _user$project$AlgorithmJish$is = function (role) {
	return _elm_lang$core$Set$member(role);
};
var _user$project$AlgorithmJish$whatever = _elm_lang$core$Basics$always(true);
var _user$project$AlgorithmJish$additionRules = {
	ctor: '::',
	_0: {
		ctor: '_Tuple2',
		_0: {
			ctor: '_Tuple3',
			_0: _user$project$AlgorithmJish$whatever,
			_1: _user$project$AlgorithmJish$is('X'),
			_2: _user$project$AlgorithmJish$isntAnyOf(
				{
					ctor: '::',
					_0: 'X',
					_1: {
						ctor: '::',
						_0: 'HorizontalDistance',
						_1: {ctor: '[]'}
					}
				})
		},
		_1: {
			ctor: '_Tuple3',
			_0: _user$project$AlgorithmJish$becomes('X'),
			_1: _user$project$AlgorithmJish$unchanged,
			_2: _user$project$AlgorithmJish$becomes('HorizontalDistance')
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: {
				ctor: '_Tuple3',
				_0: _user$project$AlgorithmJish$whatever,
				_1: _user$project$AlgorithmJish$isntAnyOf(
					{
						ctor: '::',
						_0: 'X',
						_1: {
							ctor: '::',
							_0: 'HorizontalDistance',
							_1: {ctor: '[]'}
						}
					}),
				_2: _user$project$AlgorithmJish$is('X')
			},
			_1: {
				ctor: '_Tuple3',
				_0: _user$project$AlgorithmJish$becomes('X'),
				_1: _user$project$AlgorithmJish$becomes('HorizontalDistance'),
				_2: _user$project$AlgorithmJish$unchanged
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: {
					ctor: '_Tuple3',
					_0: _user$project$AlgorithmJish$whatever,
					_1: _user$project$AlgorithmJish$is('HorizontalDistance'),
					_2: _user$project$AlgorithmJish$is('HorizontalDistance')
				},
				_1: {
					ctor: '_Tuple3',
					_0: _user$project$AlgorithmJish$becomes('HorizontalDistance'),
					_1: _user$project$AlgorithmJish$unchanged,
					_2: _user$project$AlgorithmJish$unchanged
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple3',
						_0: _user$project$AlgorithmJish$is('HorizontalDistance'),
						_1: _user$project$AlgorithmJish$isntAnyOf(
							{
								ctor: '::',
								_0: 'X',
								_1: {
									ctor: '::',
									_0: 'HorizontalDistance',
									_1: {ctor: '[]'}
								}
							}),
						_2: _user$project$AlgorithmJish$is('HorizontalDistance')
					},
					_1: {
						ctor: '_Tuple3',
						_0: _user$project$AlgorithmJish$unchanged,
						_1: _user$project$AlgorithmJish$becomes('HorizontalDistance'),
						_2: _user$project$AlgorithmJish$unchanged
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '_Tuple3',
							_0: _user$project$AlgorithmJish$is('HorizontalDistance'),
							_1: _user$project$AlgorithmJish$is('HorizontalDistance'),
							_2: _user$project$AlgorithmJish$isntAnyOf(
								{
									ctor: '::',
									_0: 'X',
									_1: {
										ctor: '::',
										_0: 'HorizontalDistance',
										_1: {ctor: '[]'}
									}
								})
						},
						_1: {
							ctor: '_Tuple3',
							_0: _user$project$AlgorithmJish$unchanged,
							_1: _user$project$AlgorithmJish$unchanged,
							_2: _user$project$AlgorithmJish$becomes('HorizontalDistance')
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {
								ctor: '_Tuple3',
								_0: _user$project$AlgorithmJish$whatever,
								_1: _user$project$AlgorithmJish$is('Y'),
								_2: _user$project$AlgorithmJish$isntAnyOf(
									{
										ctor: '::',
										_0: 'Y',
										_1: {
											ctor: '::',
											_0: 'VerticalDistance',
											_1: {ctor: '[]'}
										}
									})
							},
							_1: {
								ctor: '_Tuple3',
								_0: _user$project$AlgorithmJish$becomes('Y'),
								_1: _user$project$AlgorithmJish$unchanged,
								_2: _user$project$AlgorithmJish$becomes('VerticalDistance')
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: {
									ctor: '_Tuple3',
									_0: _user$project$AlgorithmJish$whatever,
									_1: _user$project$AlgorithmJish$isntAnyOf(
										{
											ctor: '::',
											_0: 'Y',
											_1: {
												ctor: '::',
												_0: 'VerticalDistance',
												_1: {ctor: '[]'}
											}
										}),
									_2: _user$project$AlgorithmJish$is('Y')
								},
								_1: {
									ctor: '_Tuple3',
									_0: _user$project$AlgorithmJish$becomes('Y'),
									_1: _user$project$AlgorithmJish$becomes('VerticalDistance'),
									_2: _user$project$AlgorithmJish$unchanged
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: {
										ctor: '_Tuple3',
										_0: _user$project$AlgorithmJish$whatever,
										_1: _user$project$AlgorithmJish$is('VerticalDistance'),
										_2: _user$project$AlgorithmJish$is('VerticalDistance')
									},
									_1: {
										ctor: '_Tuple3',
										_0: _user$project$AlgorithmJish$becomes('VerticalDistance'),
										_1: _user$project$AlgorithmJish$unchanged,
										_2: _user$project$AlgorithmJish$unchanged
									}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: {
											ctor: '_Tuple3',
											_0: _user$project$AlgorithmJish$is('VerticalDistance'),
											_1: _user$project$AlgorithmJish$isntAnyOf(
												{
													ctor: '::',
													_0: 'Y',
													_1: {
														ctor: '::',
														_0: 'VerticalDistance',
														_1: {ctor: '[]'}
													}
												}),
											_2: _user$project$AlgorithmJish$is('VerticalDistance')
										},
										_1: {
											ctor: '_Tuple3',
											_0: _user$project$AlgorithmJish$unchanged,
											_1: _user$project$AlgorithmJish$becomes('VerticalDistance'),
											_2: _user$project$AlgorithmJish$unchanged
										}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: {
												ctor: '_Tuple3',
												_0: _user$project$AlgorithmJish$is('VerticalDistance'),
												_1: _user$project$AlgorithmJish$is('VerticalDistance'),
												_2: _user$project$AlgorithmJish$isntAnyOf(
													{
														ctor: '::',
														_0: 'Y',
														_1: {
															ctor: '::',
															_0: 'VerticalDistance',
															_1: {ctor: '[]'}
														}
													})
											},
											_1: {
												ctor: '_Tuple3',
												_0: _user$project$AlgorithmJish$unchanged,
												_1: _user$project$AlgorithmJish$unchanged,
												_2: _user$project$AlgorithmJish$becomes('VerticalDistance')
											}
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$AlgorithmJish$subtractionRules = {
	ctor: '::',
	_0: {
		ctor: '_Tuple2',
		_0: {
			ctor: '_Tuple3',
			_0: _user$project$AlgorithmJish$whatever,
			_1: _user$project$AlgorithmJish$is('X'),
			_2: _user$project$AlgorithmJish$is('HorizontalDistance')
		},
		_1: {
			ctor: '_Tuple3',
			_0: _user$project$AlgorithmJish$becomes('X'),
			_1: _user$project$AlgorithmJish$unchanged,
			_2: _user$project$AlgorithmJish$unchanged
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: {
				ctor: '_Tuple3',
				_0: _user$project$AlgorithmJish$whatever,
				_1: _user$project$AlgorithmJish$is('Y'),
				_2: _user$project$AlgorithmJish$is('VerticalDistance')
			},
			_1: {
				ctor: '_Tuple3',
				_0: _user$project$AlgorithmJish$becomes('Y'),
				_1: _user$project$AlgorithmJish$unchanged,
				_2: _user$project$AlgorithmJish$unchanged
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: {
					ctor: '_Tuple3',
					_0: _user$project$AlgorithmJish$whatever,
					_1: _user$project$AlgorithmJish$is('HorizontalDistance'),
					_2: _user$project$AlgorithmJish$is('HorizontalDistance')
				},
				_1: {
					ctor: '_Tuple3',
					_0: _user$project$AlgorithmJish$becomes('HorizontalDistance'),
					_1: _user$project$AlgorithmJish$unchanged,
					_2: _user$project$AlgorithmJish$unchanged
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple3',
						_0: _user$project$AlgorithmJish$is('HorizontalDistance'),
						_1: _user$project$AlgorithmJish$isntAnyOf(
							{
								ctor: '::',
								_0: 'X',
								_1: {
									ctor: '::',
									_0: 'HorizontalDistance',
									_1: {ctor: '[]'}
								}
							}),
						_2: _user$project$AlgorithmJish$is('HorizontalDistance')
					},
					_1: {
						ctor: '_Tuple3',
						_0: _user$project$AlgorithmJish$unchanged,
						_1: _user$project$AlgorithmJish$becomes('HorizontalDistance'),
						_2: _user$project$AlgorithmJish$unchanged
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '_Tuple3',
							_0: _user$project$AlgorithmJish$is('HorizontalDistance'),
							_1: _user$project$AlgorithmJish$is('HorizontalDistance'),
							_2: _user$project$AlgorithmJish$isntAnyOf(
								{
									ctor: '::',
									_0: 'X',
									_1: {
										ctor: '::',
										_0: 'HorizontalDistance',
										_1: {ctor: '[]'}
									}
								})
						},
						_1: {
							ctor: '_Tuple3',
							_0: _user$project$AlgorithmJish$unchanged,
							_1: _user$project$AlgorithmJish$unchanged,
							_2: _user$project$AlgorithmJish$becomes('HorizontalDistance')
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {
								ctor: '_Tuple3',
								_0: _user$project$AlgorithmJish$is('VerticalDistance'),
								_1: _user$project$AlgorithmJish$isntAnyOf(
									{
										ctor: '::',
										_0: 'Y',
										_1: {
											ctor: '::',
											_0: 'VerticalDistance',
											_1: {ctor: '[]'}
										}
									}),
								_2: _user$project$AlgorithmJish$is('VerticalDistance')
							},
							_1: {
								ctor: '_Tuple3',
								_0: _user$project$AlgorithmJish$unchanged,
								_1: _user$project$AlgorithmJish$becomes('VerticalDistance'),
								_2: _user$project$AlgorithmJish$unchanged
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: {
									ctor: '_Tuple3',
									_0: _user$project$AlgorithmJish$is('VerticalDistance'),
									_1: _user$project$AlgorithmJish$is('VerticalDistance'),
									_2: _user$project$AlgorithmJish$isntAnyOf(
										{
											ctor: '::',
											_0: 'Y',
											_1: {
												ctor: '::',
												_0: 'VerticalDistance',
												_1: {ctor: '[]'}
											}
										})
								},
								_1: {
									ctor: '_Tuple3',
									_0: _user$project$AlgorithmJish$unchanged,
									_1: _user$project$AlgorithmJish$unchanged,
									_2: _user$project$AlgorithmJish$becomes('VerticalDistance')
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: {
										ctor: '_Tuple3',
										_0: _user$project$AlgorithmJish$whatever,
										_1: _user$project$AlgorithmJish$is('VerticalDistance'),
										_2: _user$project$AlgorithmJish$is('VerticalDistance')
									},
									_1: {
										ctor: '_Tuple3',
										_0: _user$project$AlgorithmJish$becomes('VerticalDistance'),
										_1: _user$project$AlgorithmJish$unchanged,
										_2: _user$project$AlgorithmJish$unchanged
									}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: {
											ctor: '_Tuple3',
											_0: _user$project$AlgorithmJish$whatever,
											_1: _user$project$AlgorithmJish$is('X'),
											_2: _user$project$AlgorithmJish$is('X')
										},
										_1: {
											ctor: '_Tuple3',
											_0: _user$project$AlgorithmJish$becomes('HorizontalDistance'),
											_1: _user$project$AlgorithmJish$unchanged,
											_2: _user$project$AlgorithmJish$unchanged
										}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: {
												ctor: '_Tuple3',
												_0: _user$project$AlgorithmJish$whatever,
												_1: _user$project$AlgorithmJish$is('Y'),
												_2: _user$project$AlgorithmJish$is('Y')
											},
											_1: {
												ctor: '_Tuple3',
												_0: _user$project$AlgorithmJish$becomes('VerticalDistance'),
												_1: _user$project$AlgorithmJish$unchanged,
												_2: _user$project$AlgorithmJish$unchanged
											}
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$AlgorithmJish$lessThanRules = {
	ctor: '::',
	_0: {
		ctor: '_Tuple2',
		_0: {
			ctor: '_Tuple3',
			_0: _user$project$AlgorithmJish$whatever,
			_1: _user$project$AlgorithmJish$is('Two'),
			_2: _user$project$AlgorithmJish$whatever
		},
		_1: {
			ctor: '_Tuple3',
			_0: _user$project$AlgorithmJish$unchanged,
			_1: _user$project$AlgorithmJish$unchanged,
			_2: _user$project$AlgorithmJish$becomes('PivotsOnTwo')
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: {
				ctor: '_Tuple3',
				_0: _user$project$AlgorithmJish$whatever,
				_1: _user$project$AlgorithmJish$whatever,
				_2: _user$project$AlgorithmJish$is('Two')
			},
			_1: {
				ctor: '_Tuple3',
				_0: _user$project$AlgorithmJish$unchanged,
				_1: _user$project$AlgorithmJish$becomes('PivotsOnTwo'),
				_2: _user$project$AlgorithmJish$unchanged
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: {
					ctor: '_Tuple3',
					_0: _user$project$AlgorithmJish$whatever,
					_1: _user$project$AlgorithmJish$is('One'),
					_2: _user$project$AlgorithmJish$whatever
				},
				_1: {
					ctor: '_Tuple3',
					_0: _user$project$AlgorithmJish$unchanged,
					_1: _user$project$AlgorithmJish$unchanged,
					_2: _user$project$AlgorithmJish$becomes('PivotsOnOne')
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple3',
						_0: _user$project$AlgorithmJish$whatever,
						_1: _user$project$AlgorithmJish$whatever,
						_2: _user$project$AlgorithmJish$is('One')
					},
					_1: {
						ctor: '_Tuple3',
						_0: _user$project$AlgorithmJish$unchanged,
						_1: _user$project$AlgorithmJish$becomes('PivotsOnOne'),
						_2: _user$project$AlgorithmJish$unchanged
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '_Tuple3',
							_0: _user$project$AlgorithmJish$whatever,
							_1: _user$project$AlgorithmJish$is('Zero'),
							_2: _user$project$AlgorithmJish$whatever
						},
						_1: {
							ctor: '_Tuple3',
							_0: _user$project$AlgorithmJish$unchanged,
							_1: _user$project$AlgorithmJish$unchanged,
							_2: _user$project$AlgorithmJish$becomes('PivotsOnZero')
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {
								ctor: '_Tuple3',
								_0: _user$project$AlgorithmJish$whatever,
								_1: _user$project$AlgorithmJish$whatever,
								_2: _user$project$AlgorithmJish$is('Zero')
							},
							_1: {
								ctor: '_Tuple3',
								_0: _user$project$AlgorithmJish$unchanged,
								_1: _user$project$AlgorithmJish$becomes('PivotsOnZero'),
								_2: _user$project$AlgorithmJish$unchanged
							}
						},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	}
};
var _user$project$AlgorithmJish$resolveTypeAliases = F2(
	function (typeAliasToType, tipe) {
		var recurse = _user$project$AlgorithmJish$resolveTypeAliases(typeAliasToType);
		return A2(
			_user$project$Lang$mapType,
			function (t) {
				var _p1 = t.val.t__;
				if (_p1.ctor === 'TNamed') {
					var _p4 = _p1._1;
					var _p2 = A2(_elm_lang$core$Dict$get, _p4, typeAliasToType);
					if (_p2.ctor === 'Just') {
						return A2(
							_user$project$Lang$addRoles,
							A2(_elm_lang$core$Set$insert, _p4, t.val.roles),
							recurse(_p2._0));
					} else {
						var _p3 = _user$project$Utils$log(
							A2(_elm_lang$core$Basics_ops['++'], 'resolveTypeAliases: Type alias not found! ', _p4));
						return A2(
							_user$project$Types$tForall,
							{
								ctor: '::',
								_0: 'a',
								_1: {ctor: '[]'}
							},
							A2(
								_user$project$Lang$addRoles,
								A2(_elm_lang$core$Set$insert, _p4, t.val.roles),
								_user$project$Types$tVar('a')));
					}
				} else {
					return t;
				}
			},
			tipe);
	});
var _user$project$AlgorithmJish$typeCompare = F2(
	function (ta, tb) {
		typeCompare:
		while (true) {
			var andThenCompare = F2(
				function (order2Thunk, order1) {
					return _elm_lang$core$Native_Utils.eq(order1, _elm_lang$core$Basics$EQ) ? order2Thunk(
						{ctor: '_Tuple0'}) : order1;
				});
			var _p5 = {ctor: '_Tuple2', _0: ta.val.t__, _1: tb.val.t__};
			_v2_19:
			do {
				_v2_18:
				do {
					_v2_17:
					do {
						_v2_14:
						do {
							_v2_7:
							do {
								_v2_6:
								do {
									_v2_4:
									do {
										_v2_3:
										do {
											_v2_2:
											do {
												_v2_1:
												do {
													if (_p5.ctor === '_Tuple2') {
														switch (_p5._0.ctor) {
															case 'TVar':
																switch (_p5._1.ctor) {
																	case 'TVar':
																		return A2(_elm_lang$core$Basics$compare, _p5._0._1, _p5._1._1);
																	case 'TForall':
																		break _v2_2;
																	case 'TNamed':
																		break _v2_2;
																	case 'TArrow':
																		break _v2_2;
																	default:
																		break _v2_2;
																}
															case 'TForall':
																switch (_p5._1.ctor) {
																	case 'TVar':
																		break _v2_1;
																	case 'TForall':
																		break _v2_3;
																	case 'TNamed':
																		break _v2_3;
																	case 'TArrow':
																		break _v2_3;
																	default:
																		break _v2_3;
																}
															case 'TNamed':
																switch (_p5._1.ctor) {
																	case 'TVar':
																		break _v2_1;
																	case 'TForall':
																		break _v2_4;
																	case 'TNamed':
																		var _p8 = _user$project$Utils$log('Warning: TNamed in typeCompare');
																		return A2(_elm_lang$core$Basics$compare, _p5._0._1, _p5._1._1);
																	case 'TArrow':
																		break _v2_7;
																	default:
																		break _v2_7;
																}
															case 'TList':
																switch (_p5._1.ctor) {
																	case 'TVar':
																		break _v2_1;
																	case 'TForall':
																		break _v2_4;
																	case 'TNamed':
																		break _v2_6;
																	case 'TList':
																		var _v3 = _p5._0._1,
																			_v4 = _p5._1._1;
																		ta = _v3;
																		tb = _v4;
																		continue typeCompare;
																	case 'TTuple':
																		return _elm_lang$core$Basics$GT;
																	case 'TArrow':
																		if (((_p5._1._1.ctor === '::') && (_p5._1._1._1.ctor === '::')) && (_p5._1._1._1._1.ctor === '::')) {
																			break _v2_18;
																		} else {
																			break _v2_19;
																		}
																	default:
																		break _v2_19;
																}
															case 'TTuple':
																switch (_p5._1.ctor) {
																	case 'TVar':
																		break _v2_1;
																	case 'TForall':
																		break _v2_4;
																	case 'TNamed':
																		break _v2_6;
																	case 'TList':
																		return _elm_lang$core$Basics$LT;
																	case 'TTuple':
																		if (_p5._0._3.ctor === 'Nothing') {
																			if (_p5._1._3.ctor === 'Just') {
																				return _elm_lang$core$Basics$LT;
																			} else {
																				if ((_p5._0._1.ctor === '::') && (_p5._1._1.ctor === '::')) {
																					break _v2_14;
																				} else {
																					break _v2_19;
																				}
																			}
																		} else {
																			if (_p5._1._3.ctor === 'Nothing') {
																				return _elm_lang$core$Basics$GT;
																			} else {
																				if (_p5._0._1.ctor === '[]') {
																					if (_p5._1._1.ctor === '[]') {
																						var _v5 = _p5._0._3._0,
																							_v6 = _p5._1._3._0;
																						ta = _v5;
																						tb = _v6;
																						continue typeCompare;
																					} else {
																						break _v2_19;
																					}
																				} else {
																					if (_p5._1._1.ctor === '::') {
																						break _v2_14;
																					} else {
																						break _v2_19;
																					}
																				}
																			}
																		}
																	case 'TArrow':
																		if (((_p5._1._1.ctor === '::') && (_p5._1._1._1.ctor === '::')) && (_p5._1._1._1._1.ctor === '::')) {
																			break _v2_18;
																		} else {
																			break _v2_19;
																		}
																	default:
																		break _v2_19;
																}
															case 'TDict':
																switch (_p5._1.ctor) {
																	case 'TVar':
																		break _v2_1;
																	case 'TForall':
																		break _v2_4;
																	case 'TNamed':
																		break _v2_6;
																	case 'TDict':
																		return A2(
																			andThenCompare,
																			function (_p12) {
																				var _p13 = _p12;
																				return A2(_user$project$AlgorithmJish$typeCompare, _p5._0._1, _p5._1._1);
																			},
																			A2(_user$project$AlgorithmJish$typeCompare, _p5._0._2, _p5._1._2));
																	case 'TArrow':
																		if (((_p5._1._1.ctor === '::') && (_p5._1._1._1.ctor === '::')) && (_p5._1._1._1._1.ctor === '::')) {
																			break _v2_18;
																		} else {
																			break _v2_19;
																		}
																	default:
																		break _v2_19;
																}
															case 'TArrow':
																switch (_p5._1.ctor) {
																	case 'TVar':
																		break _v2_1;
																	case 'TForall':
																		break _v2_4;
																	case 'TNamed':
																		break _v2_6;
																	case 'TArrow':
																		if ((_p5._0._1.ctor === '::') && (_p5._0._1._1.ctor === '::')) {
																			if (_p5._0._1._1._1.ctor === '[]') {
																				if ((_p5._1._1.ctor === '::') && (_p5._1._1._1.ctor === '::')) {
																					if (_p5._1._1._1._1.ctor === '[]') {
																						return A2(
																							andThenCompare,
																							function (_p14) {
																								var _p15 = _p14;
																								return A2(_user$project$AlgorithmJish$typeCompare, _p5._0._1._0, _p5._1._1._0);
																							},
																							A2(_user$project$AlgorithmJish$typeCompare, _p5._0._1._1._0, _p5._1._1._1._0));
																					} else {
																						break _v2_18;
																					}
																				} else {
																					break _v2_19;
																				}
																			} else {
																				break _v2_17;
																			}
																		} else {
																			if (((_p5._1._1.ctor === '::') && (_p5._1._1._1.ctor === '::')) && (_p5._1._1._1._1.ctor === '::')) {
																				break _v2_18;
																			} else {
																				break _v2_19;
																			}
																		}
																	default:
																		if (((_p5._0._1.ctor === '::') && (_p5._0._1._1.ctor === '::')) && (_p5._0._1._1._1.ctor === '::')) {
																			break _v2_17;
																		} else {
																			break _v2_19;
																		}
																}
															default:
																switch (_p5._1.ctor) {
																	case 'TVar':
																		break _v2_1;
																	case 'TForall':
																		break _v2_4;
																	case 'TNamed':
																		break _v2_6;
																	case 'TArrow':
																		if (((_p5._1._1.ctor === '::') && (_p5._1._1._1.ctor === '::')) && (_p5._1._1._1._1.ctor === '::')) {
																			break _v2_18;
																		} else {
																			break _v2_19;
																		}
																	default:
																		break _v2_19;
																}
														}
													} else {
														break _v2_19;
													}
												} while(false);
												return _elm_lang$core$Basics$LT;
											} while(false);
											return _elm_lang$core$Basics$GT;
										} while(false);
										var _p6 = _user$project$Utils$log('Warning: TForall in typeCompare');
										var _v9 = _p5._0._2,
											_v10 = tb;
										ta = _v9;
										tb = _v10;
										continue typeCompare;
									} while(false);
									var _p7 = _user$project$Utils$log('Warning: TForall in typeCompare');
									var _v11 = ta,
										_v12 = _p5._1._2;
									ta = _v11;
									tb = _v12;
									continue typeCompare;
								} while(false);
								var _p9 = _user$project$Utils$log('Warning: TNamed in typeCompare');
								return _elm_lang$core$Basics$LT;
							} while(false);
							var _p10 = _user$project$Utils$log('Warning: TNamed in typeCompare');
							return _elm_lang$core$Basics$GT;
						} while(false);
						var _p11 = A2(_user$project$AlgorithmJish$typeCompare, _p5._0._1._0, _p5._1._1._0);
						switch (_p11.ctor) {
							case 'LT':
								return _elm_lang$core$Basics$LT;
							case 'EQ':
								var _v14 = A2(_user$project$Types$tTupleRest, _p5._0._1._1, _p5._0._3),
									_v15 = A2(_user$project$Types$tTupleRest, _p5._1._1._1, _p5._1._3);
								ta = _v14;
								tb = _v15;
								continue typeCompare;
							default:
								return _elm_lang$core$Basics$GT;
						}
					} while(false);
					var _v16 = A2(
						_user$project$Types$tArrow,
						_p5._0._1._0,
						_user$project$Types$tArrows(
							{
								ctor: '::',
								_0: _p5._0._1._1._0,
								_1: {ctor: '::', _0: _p5._0._1._1._1._0, _1: _p5._0._1._1._1._1}
							})),
						_v17 = tb;
					ta = _v16;
					tb = _v17;
					continue typeCompare;
				} while(false);
				var _v18 = ta,
					_v19 = A2(
					_user$project$Types$tArrow,
					_p5._1._1._0,
					_user$project$Types$tArrows(
						{
							ctor: '::',
							_0: _p5._1._1._1._0,
							_1: {ctor: '::', _0: _p5._1._1._1._1._0, _1: _p5._1._1._1._1._1}
						}));
				ta = _v18;
				tb = _v19;
				continue typeCompare;
			} while(false);
			return _elm_lang$core$Basics$EQ;
		}
	});
var _user$project$AlgorithmJish$compareOrder = F2(
	function (a, b) {
		var orderToInt = function (order) {
			var _p16 = order;
			switch (_p16.ctor) {
				case 'LT':
					return -1;
				case 'EQ':
					return 0;
				default:
					return 1;
			}
		};
		return A2(
			_elm_lang$core$Basics$compare,
			orderToInt(a),
			orderToInt(b));
	});
var _user$project$AlgorithmJish$quantifyUnboundVars = F2(
	function (context, t) {
		var unboundIdentifiers = A2(
			_elm_lang$core$List$filter,
			function (ident) {
				return _elm_lang$core$Native_Utils.eq(
					A2(_user$project$Utils$maybeFind, ident, context),
					_elm_lang$core$Maybe$Nothing);
			},
			_user$project$Utils$dedup(
				_user$project$Types$freeIdentifiersList(t)));
		return _elm_lang$core$Native_Utils.eq(
			unboundIdentifiers,
			{ctor: '[]'}) ? t : A2(_user$project$Types$tForall, unboundIdentifiers, t);
	});
var _user$project$AlgorithmJish$topLevelTypeContextAnnotationsOnly = F3(
	function (typeAliasToType, context, e) {
		topLevelTypeContextAnnotationsOnly:
		while (true) {
			var recurse = A2(_user$project$AlgorithmJish$topLevelTypeContextAnnotationsOnly, typeAliasToType, context);
			var _p17 = e.val.e__;
			switch (_p17.ctor) {
				case 'ETyp':
					var _p23 = _p17._2;
					var _p22 = _p17._1;
					var _p21 = _p17._3;
					var _p18 = A2(_user$project$Types$matchPatToType, _p22, _p23);
					if (_p18.ctor === 'Just') {
						var moreContext = A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Tuple$mapSecond(
								function (_p19) {
									return A2(
										_user$project$AlgorithmJish$quantifyUnboundVars,
										{ctor: '[]'},
										A2(_user$project$AlgorithmJish$resolveTypeAliases, typeAliasToType, _p19));
								}),
							_p18._0);
						var _v23 = typeAliasToType,
							_v24 = A2(_elm_lang$core$Basics_ops['++'], moreContext, context),
							_v25 = _p21;
						typeAliasToType = _v23;
						context = _v24;
						e = _v25;
						continue topLevelTypeContextAnnotationsOnly;
					} else {
						var _p20 = A2(
							_elm_lang$core$Debug$log,
							'Could not match type annotation',
							{ctor: '_Tuple2', _0: _p22, _1: _p23});
						return recurse(_p21);
					}
				case 'ETypeAlias':
					var _p28 = _p17._2;
					var _p27 = _p17._1;
					var _p26 = _p17._3;
					var _p24 = A2(_user$project$Types$matchPatToType, _p27, _p28);
					if (_p24.ctor === 'Just') {
						var newTypeAliasToType = A2(
							_elm_lang$core$Dict$union,
							_elm_lang$core$Dict$fromList(_p24._0),
							typeAliasToType);
						var _v27 = newTypeAliasToType,
							_v28 = context,
							_v29 = _p26;
						typeAliasToType = _v27;
						context = _v28;
						e = _v29;
						continue topLevelTypeContextAnnotationsOnly;
					} else {
						var _p25 = A2(
							_elm_lang$core$Debug$log,
							'Could not match type alias',
							{ctor: '_Tuple2', _0: _p27, _1: _p28});
						return recurse(_p26);
					}
				case 'EColonType':
					return recurse(_p17._1);
				case 'ELet':
					return recurse(_p17._7);
				case 'EComment':
					return recurse(_p17._2);
				case 'EOption':
					return recurse(_p17._4);
				default:
					return context;
			}
		}
	});
var _user$project$AlgorithmJish$preludeTypeContext = A3(
	_user$project$AlgorithmJish$topLevelTypeContextAnnotationsOnly,
	_elm_lang$core$Dict$empty,
	{ctor: '[]'},
	_user$project$FastParser$prelude);
var _user$project$AlgorithmJish$newVar = function (typesHeap) {
	var varId = typesHeap.nextVarId;
	var _p29 = A3(_user$project$ImpureGoodies$mutateRecordField, typesHeap, 'nextVarId', varId + 1);
	return _user$project$Types$tVar(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'a',
			_elm_lang$core$Basics$toString(varId)));
};
var _user$project$AlgorithmJish$unparseExp = function (e) {
	return A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, e);
};
var _user$project$AlgorithmJish$unparse = function (t) {
	return A2(_user$project$Syntax$typeWithRolesUnparser, _user$project$Syntax$Elm, t);
};
var _user$project$AlgorithmJish$tVarToIdent = function (t) {
	var _p30 = t.val.t__;
	if (_p30.ctor === 'TVar') {
		return _p30._1;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'AlgorithmJish',
			{
				start: {line: 251, column: 3},
				end: {line: 253, column: 86}
			},
			_p30)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'tVarToIdent was not given a TVar!! ',
				_user$project$AlgorithmJish$unparse(t)));
	}
};
var _user$project$AlgorithmJish$newVarEquivalenceClass = function (tVar) {
	return {
		representative: tVar,
		members: _elm_lang$core$Set$singleton(
			_user$project$AlgorithmJish$tVarToIdent(tVar))
	};
};
var _user$project$AlgorithmJish$find = F2(
	function (typesHeap, t) {
		var _p32 = t.val.t__;
		switch (_p32.ctor) {
			case 'TForall':
				var _p33 = _user$project$Utils$log(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Internal error: Should never try to find or union a polytype! ',
						_user$project$AlgorithmJish$unparse(t)));
				return _user$project$AlgorithmJish$newVarEquivalenceClass(
					_user$project$AlgorithmJish$newVar(typesHeap));
			case 'TVar':
				return A2(
					_elm_lang$core$Maybe$withDefault,
					_user$project$AlgorithmJish$newVarEquivalenceClass(t),
					A2(_elm_lang$core$Dict$get, _p32._1, typesHeap.equivalenceClasses));
			default:
				return {representative: t, members: _elm_lang$core$Set$empty};
		}
	});
var _user$project$AlgorithmJish$addRolesToClass = F3(
	function (typesHeap, roles, t) {
		var $class = A2(_user$project$AlgorithmJish$find, typesHeap, t);
		var tWithRoles = A2(_user$project$Lang$addRoles, roles, $class.representative);
		var newClass = _elm_lang$core$Native_Utils.update(
			$class,
			{representative: tWithRoles});
		var newEquivalenceClasses = A3(
			_user$project$Utils$foldl,
			typesHeap.equivalenceClasses,
			F2(
				function (memberIdent, newEquivalenceClasses) {
					return A3(_elm_lang$core$Dict$insert, memberIdent, newClass, newEquivalenceClasses);
				}),
			_elm_lang$core$Set$toList(newClass.members));
		var _p34 = A3(_user$project$ImpureGoodies$mutateRecordField, typesHeap, 'equivalenceClasses', newEquivalenceClasses);
		return {ctor: '_Tuple0'};
	});
var _user$project$AlgorithmJish$findRepresentativesAndShareRoles = F3(
	function (typesHeap, t0, t1) {
		var bClass = A2(_user$project$AlgorithmJish$find, typesHeap, t1);
		var aClass = A2(_user$project$AlgorithmJish$find, typesHeap, t0);
		var roles = A2(_elm_lang$core$Set$union, aClass.representative.val.roles, bClass.representative.val.roles);
		var _p35 = A3(_user$project$AlgorithmJish$addRolesToClass, typesHeap, roles, t0);
		var _p36 = A3(_user$project$AlgorithmJish$addRolesToClass, typesHeap, roles, t1);
		return {
			ctor: '_Tuple2',
			_0: A2(_user$project$AlgorithmJish$find, typesHeap, t0).representative,
			_1: A2(_user$project$AlgorithmJish$find, typesHeap, t1).representative
		};
	});
var _user$project$AlgorithmJish$tagWithRolesBasedOnNumber = F3(
	function (typesHeap, n, tipe) {
		var roles = function () {
			var _p37 = n;
			switch (_p37) {
				case 0:
					return _elm_lang$core$Set$singleton('Zero');
				case 1:
					return _elm_lang$core$Set$singleton('One');
				case 2:
					return _elm_lang$core$Set$singleton('Two');
				default:
					return _elm_lang$core$Set$empty;
			}
		}();
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Set$size(roles),
			0) > 0) {
			var _p38 = A3(_user$project$AlgorithmJish$addRolesToClass, typesHeap, roles, tipe);
			return tipe;
		} else {
			return tipe;
		}
	});
var _user$project$AlgorithmJish$union = F3(
	function (typesHeap, t1, t2) {
		var class2 = A2(_user$project$AlgorithmJish$find, typesHeap, t2);
		var class1 = A2(_user$project$AlgorithmJish$find, typesHeap, t1);
		var newRepresentative = A2(
			_user$project$Lang$addRoles,
			class2.representative.val.roles,
			A2(
				_user$project$Lang$addRoles,
				class1.representative.val.roles,
				A2(
					_user$project$Utils$fromJust_,
					'AlgorithmJish.union should never hit here',
					A2(
						_user$project$Utils$minimumByComparator,
						_user$project$AlgorithmJish$typeCompare,
						{
							ctor: '::',
							_0: class1.representative,
							_1: {
								ctor: '::',
								_0: class2.representative,
								_1: {ctor: '[]'}
							}
						}))));
		var newClass = {
			representative: newRepresentative,
			members: A2(_elm_lang$core$Set$union, class1.members, class2.members)
		};
		var newEquivalenceClasses = A3(
			_user$project$Utils$foldl,
			typesHeap.equivalenceClasses,
			F2(
				function (memberIdent, newEquivalenceClasses) {
					return A3(_elm_lang$core$Dict$insert, memberIdent, newClass, newEquivalenceClasses);
				}),
			_elm_lang$core$Set$toList(newClass.members));
		var _p39 = A3(_user$project$ImpureGoodies$mutateRecordField, typesHeap, 'equivalenceClasses', newEquivalenceClasses);
		return {ctor: '_Tuple0'};
	});
var _user$project$AlgorithmJish$tagWithRolesBasedOnStructure = F2(
	function (typesHeap, tipe) {
		var typeClass = A2(_user$project$AlgorithmJish$find, typesHeap, tipe);
		var _p40 = typeClass.representative.val.t__;
		if ((((_p40.ctor === 'TTuple') && (_p40._1.ctor === '::')) && (_p40._1._1.ctor === '::')) && (_p40._1._1._1.ctor === '[]')) {
			var _p46 = _p40._1._1._0;
			var _p45 = _p40._1._0;
			var tupleISPoint = A2(_elm_lang$core$Set$member, 'Point', typeClass.representative.val.roles);
			var bRep = A2(_user$project$AlgorithmJish$find, typesHeap, _p46).representative;
			var bIsY = A2(_elm_lang$core$Set$member, 'Y', bRep.val.roles);
			var aRep = A2(_user$project$AlgorithmJish$find, typesHeap, _p45).representative;
			var aIsX = A2(_elm_lang$core$Set$member, 'X', aRep.val.roles);
			if (tupleISPoint && (aIsX && bIsY)) {
				return tipe;
			} else {
				var _p41 = {ctor: '_Tuple2', _0: aRep.val.t__, _1: bRep.val.t__};
				if (((_p41.ctor === '_Tuple2') && (_p41._0.ctor === 'TNum')) && (_p41._1.ctor === 'TNum')) {
					var _p42 = A3(
						_user$project$AlgorithmJish$addRolesToClass,
						typesHeap,
						_elm_lang$core$Set$singleton('Y'),
						_p46);
					var _p43 = A3(
						_user$project$AlgorithmJish$addRolesToClass,
						typesHeap,
						_elm_lang$core$Set$singleton('X'),
						_p45);
					var _p44 = A3(
						_user$project$AlgorithmJish$addRolesToClass,
						typesHeap,
						_elm_lang$core$Set$singleton('Point'),
						tipe);
					return tipe;
				} else {
					return tipe;
				}
			}
		} else {
			return tipe;
		}
	});
var _user$project$AlgorithmJish$tagWithRolesBasedOnOperation = F4(
	function (typesHeap, op_, ts, returnType) {
		var _p47 = ts;
		if (((_p47.ctor === '::') && (_p47._1.ctor === '::')) && (_p47._1._1.ctor === '[]')) {
			var _p59 = _p47._1._0;
			var _p58 = _p47._0;
			var opRules = function () {
				var _p48 = op_;
				switch (_p48.ctor) {
					case 'Plus':
						return _user$project$AlgorithmJish$additionRules;
					case 'Minus':
						return _user$project$AlgorithmJish$subtractionRules;
					case 'Lt':
						return _user$project$AlgorithmJish$lessThanRules;
					default:
						return {ctor: '[]'};
				}
			}();
			if (!_elm_lang$core$Native_Utils.eq(
				opRules,
				{ctor: '[]'})) {
				var retRep = A2(_user$project$AlgorithmJish$find, typesHeap, returnType).representative;
				var bRep = A2(_user$project$AlgorithmJish$find, typesHeap, _p59).representative;
				var aRep = A2(_user$project$AlgorithmJish$find, typesHeap, _p58).representative;
				var _p49 = A2(
					_elm_lang$core$List$map,
					function (_p50) {
						var _p51 = _p50;
						var _p57 = _p51._1._0;
						var _p56 = _p51._1._2;
						var _p55 = _p51._1._1;
						if (_p51._0._0(retRep.val.roles) && (_p51._0._1(aRep.val.roles) && _p51._0._2(bRep.val.roles))) {
							var _p52 = (!_elm_lang$core$Native_Utils.eq(_p56, _user$project$AlgorithmJish$unchanged)) ? A3(_user$project$AlgorithmJish$addRolesToClass, typesHeap, _p56, _p59) : {ctor: '_Tuple0'};
							var _p53 = (!_elm_lang$core$Native_Utils.eq(_p55, _user$project$AlgorithmJish$unchanged)) ? A3(_user$project$AlgorithmJish$addRolesToClass, typesHeap, _p55, _p58) : {ctor: '_Tuple0'};
							var _p54 = (!_elm_lang$core$Native_Utils.eq(_p57, _user$project$AlgorithmJish$unchanged)) ? A3(_user$project$AlgorithmJish$addRolesToClass, typesHeap, _p57, returnType) : {ctor: '_Tuple0'};
							return {ctor: '_Tuple0'};
						} else {
							return {ctor: '_Tuple0'};
						}
					},
					opRules);
				return returnType;
			} else {
				return returnType;
			}
		} else {
			return returnType;
		}
	});
var _user$project$AlgorithmJish$tForallIdents = function (t) {
	var _p60 = t.val.t__;
	_v38_2:
	do {
		if (_p60.ctor === 'TForall') {
			if (_p60._1.ctor === 'One') {
				if (_p60._1._0.ctor === '_Tuple2') {
					return {
						ctor: '::',
						_0: _p60._1._0._1,
						_1: {ctor: '[]'}
					};
				} else {
					break _v38_2;
				}
			} else {
				return A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p60._1._1);
			}
		} else {
			break _v38_2;
		}
	} while(false);
	return _elm_lang$core$Native_Utils.crashCase(
		'AlgorithmJish',
		{
			start: {line: 258, column: 3},
			end: {line: 261, column: 112}
		},
		_p60)(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'tForallIdents was not given a TForall!! ',
			_user$project$AlgorithmJish$unparse(t)));
};
var _user$project$AlgorithmJish$inst_ = F3(
	function (typesHeap, subst, t) {
		var recurse = A2(_user$project$AlgorithmJish$inst_, typesHeap, subst);
		var wrap = function (t__) {
			return A2(_user$project$Lang$replaceT__, t, t__);
		};
		return A2(
			_user$project$Lang$addRoles,
			t.val.roles,
			function () {
				var _p62 = t.val.t__;
				switch (_p62.ctor) {
					case 'TForall':
						var boundIdents = _user$project$AlgorithmJish$tForallIdents(t);
						var newSubst = A3(
							_user$project$Utils$foldl,
							subst,
							F2(
								function (boundIdent, newSubst) {
									return A3(
										_elm_lang$core$Dict$insert,
										boundIdent,
										_user$project$AlgorithmJish$newVar(typesHeap),
										newSubst);
								}),
							boundIdents);
						return A3(_user$project$AlgorithmJish$inst_, typesHeap, newSubst, _p62._2);
					case 'TVar':
						return A3(_user$project$Utils$getWithDefault, _p62._1, t, subst);
					case 'TList':
						return wrap(
							A3(
								_user$project$Lang$TList,
								_p62._0,
								recurse(_p62._1),
								_p62._2));
					case 'TDict':
						return wrap(
							A4(
								_user$project$Lang$TDict,
								_p62._0,
								recurse(_p62._1),
								recurse(_p62._2),
								_p62._3));
					case 'TArrow':
						return wrap(
							A3(
								_user$project$Lang$TArrow,
								_p62._0,
								A2(_elm_lang$core$List$map, recurse, _p62._1),
								_p62._2));
					case 'TUnion':
						return _user$project$AlgorithmJish$newVar(typesHeap);
					case 'TTuple':
						return wrap(
							A5(
								_user$project$Lang$TTuple,
								_p62._0,
								A2(_elm_lang$core$List$map, recurse, _p62._1),
								_p62._2,
								A2(_elm_lang$core$Maybe$map, recurse, _p62._3),
								_p62._4));
					case 'TNum':
						return t;
					case 'TBool':
						return t;
					case 'TString':
						return t;
					case 'TNull':
						return t;
					case 'TNamed':
						return t;
					default:
						return t;
				}
			}());
	});
var _user$project$AlgorithmJish$inst = F2(
	function (typesHeap, t) {
		return A3(_user$project$AlgorithmJish$inst_, typesHeap, _elm_lang$core$Dict$empty, t);
	});
var _user$project$AlgorithmJish$finalizeType_ = F3(
	function (referencesFollowed, equivalenceClasses, dumbType) {
		var recurse = _user$project$AlgorithmJish$finalizeType(equivalenceClasses);
		var wrap = function (t__) {
			return A2(_user$project$Lang$replaceT__, dumbType, t__);
		};
		var _p63 = dumbType.val.t__;
		switch (_p63.ctor) {
			case 'TForall':
				var moreEquivalenceClasses = _elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$map,
						function (ident) {
							return {
								ctor: '_Tuple2',
								_0: ident,
								_1: {
									representative: _user$project$Types$tVar(ident),
									members: _elm_lang$core$Set$singleton(ident)
								}
							};
						},
						_user$project$AlgorithmJish$tForallIdents(dumbType)));
				return wrap(
					A4(
						_user$project$Lang$TForall,
						_p63._0,
						_p63._1,
						A2(
							_user$project$AlgorithmJish$finalizeType,
							A2(_elm_lang$core$Dict$union, moreEquivalenceClasses, equivalenceClasses),
							_p63._2),
						_p63._3));
			case 'TVar':
				var _p66 = _p63._1;
				var _p64 = A2(_elm_lang$core$Dict$get, _p66, equivalenceClasses);
				if (_p64.ctor === 'Just') {
					var _p65 = _p64._0.representative;
					return A2(
						_user$project$Lang$addRoles,
						dumbType.val.roles,
						A2(_elm_lang$core$List$member, _p66, referencesFollowed) ? _p65 : A3(
							_user$project$AlgorithmJish$finalizeType_,
							{ctor: '::', _0: _p66, _1: referencesFollowed},
							equivalenceClasses,
							_p65));
				} else {
					return dumbType;
				}
			case 'TNum':
				return dumbType;
			case 'TBool':
				return dumbType;
			case 'TString':
				return dumbType;
			case 'TNull':
				return dumbType;
			case 'TNamed':
				var _p67 = _user$project$Utils$log(
					A2(_elm_lang$core$Basics_ops['++'], 'Encountered a type alias in finalizeType, but should not have!! ', _p63._1));
				return dumbType;
			case 'TWildcard':
				return dumbType;
			case 'TList':
				return wrap(
					A3(
						_user$project$Lang$TList,
						_p63._0,
						recurse(_p63._1),
						_p63._2));
			case 'TDict':
				return wrap(
					A4(
						_user$project$Lang$TDict,
						_p63._0,
						recurse(_p63._1),
						recurse(_p63._2),
						_p63._3));
			case 'TArrow':
				return wrap(
					A3(
						_user$project$Lang$TArrow,
						_p63._0,
						A2(_elm_lang$core$List$map, recurse, _p63._1),
						_p63._2));
			case 'TUnion':
				return wrap(
					A3(
						_user$project$Lang$TUnion,
						_p63._0,
						A2(_elm_lang$core$List$map, recurse, _p63._1),
						_p63._2));
			default:
				return _user$project$Types$simplifyTailedTuple(
					wrap(
						A5(
							_user$project$Lang$TTuple,
							_p63._0,
							A2(_elm_lang$core$List$map, recurse, _p63._1),
							_p63._2,
							A2(_elm_lang$core$Maybe$map, recurse, _p63._3),
							_p63._4)));
		}
	});
var _user$project$AlgorithmJish$finalizeType = F2(
	function (equivalenceClasses, dumbType) {
		return A3(
			_user$project$AlgorithmJish$finalizeType_,
			{ctor: '[]'},
			equivalenceClasses,
			dumbType);
	});
var _user$project$AlgorithmJish$unify = F3(
	function (typesHeap, t0, t1) {
		unify:
		while (true) {
			var fail = function (errMsg) {
				var fullMsg = A2(
					_elm_lang$core$Basics_ops['++'],
					'Could not unify ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$AlgorithmJish$unparse(t0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' with ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$AlgorithmJish$unparse(t1),
								A2(_elm_lang$core$Basics_ops['++'], ' — ', errMsg)))));
				var _p68 = _user$project$Utils$log(fullMsg);
				var _p69 = A3(
					_user$project$ImpureGoodies$mutateRecordField,
					typesHeap,
					'errors',
					{ctor: '::', _0: fullMsg, _1: typesHeap.errors});
				return {ctor: '_Tuple0'};
			};
			var doesOccurIn = F2(
				function (ident, t) {
					return A2(
						_elm_lang$core$List$any,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							})(ident),
						_user$project$Types$freeIdentifiersList(
							A2(_user$project$AlgorithmJish$finalizeType, typesHeap.equivalenceClasses, t)));
				});
			var _p70 = A3(_user$project$AlgorithmJish$findRepresentativesAndShareRoles, typesHeap, t0, t1);
			var ta = _p70._0;
			var tb = _p70._1;
			var _p71 = {ctor: '_Tuple2', _0: ta.val.t__, _1: tb.val.t__};
			_v42_17:
			do {
				_v42_12:
				do {
					_v42_11:
					do {
						_v42_4:
						do {
							_v42_3:
							do {
								_v42_1:
								do {
									if (_p71.ctor === '_Tuple2') {
										switch (_p71._0.ctor) {
											case 'TForall':
												return fail('Internal error: should never be unifying a polytype');
											case 'TVar':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														return A3(_user$project$AlgorithmJish$union, typesHeap, ta, tb);
													case 'TArrow':
														break _v42_4;
													default:
														break _v42_4;
												}
											case 'TList':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TList':
														var _v43 = typesHeap,
															_v44 = _p71._0._1,
															_v45 = _p71._1._1;
														typesHeap = _v43;
														t0 = _v44;
														t1 = _v45;
														continue unify;
													case 'TTuple':
														var _p73 = A2(
															_elm_lang$core$List$map,
															A2(_user$project$AlgorithmJish$unify, typesHeap, _p71._0._1),
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p71._1._1,
																_user$project$Utils$maybeToList(_p71._1._3)));
														return {ctor: '_Tuple0'};
													case 'TArrow':
														if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
															break _v42_12;
														} else {
															break _v42_17;
														}
													default:
														break _v42_17;
												}
											case 'TTuple':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TList':
														var _p72 = A2(
															_elm_lang$core$List$map,
															A2(_user$project$AlgorithmJish$unify, typesHeap, _p71._1._1),
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p71._0._1,
																_user$project$Utils$maybeToList(_p71._0._3)));
														return {ctor: '_Tuple0'};
													case 'TTuple':
														var _p82 = _p71._1._3;
														var _p81 = _p71._0._3;
														var _p74 = A2(_user$project$Utils$zipAndLeftovers, _p71._0._1, _p71._1._1);
														var headPairs = _p74._0;
														var aLeftovers = _p74._1;
														var bLeftovers = _p74._2;
														var _p75 = A2(
															_elm_lang$core$List$map,
															_elm_lang$core$Basics$uncurry(
																_user$project$AlgorithmJish$unify(typesHeap)),
															headPairs);
														var _p76 = function () {
															var _p77 = {ctor: '_Tuple2', _0: _p81, _1: _p82};
															if (((_p77.ctor === '_Tuple2') && (_p77._0.ctor === 'Just')) && (_p77._1.ctor === 'Just')) {
																return A3(_user$project$AlgorithmJish$unify, typesHeap, _p77._0._0, _p77._1._0);
															} else {
																return {ctor: '_Tuple0'};
															}
														}();
														var _p78 = {ctor: '_Tuple4', _0: aLeftovers, _1: _p81, _2: bLeftovers, _3: _p82};
														_v47_3:
														do {
															if (_p78.ctor === '_Tuple4') {
																if (_p78._0.ctor === '[]') {
																	if (_p78._2.ctor === '[]') {
																		return {ctor: '_Tuple0'};
																	} else {
																		if (_p78._1.ctor === 'Just') {
																			var _p79 = A2(
																				_elm_lang$core$List$map,
																				A2(_user$project$AlgorithmJish$unify, typesHeap, _p78._1._0),
																				bLeftovers);
																			return {ctor: '_Tuple0'};
																		} else {
																			break _v47_3;
																		}
																	}
																} else {
																	if ((_p78._2.ctor === '[]') && (_p78._3.ctor === 'Just')) {
																		var _p80 = A2(
																			_elm_lang$core$List$map,
																			A2(_user$project$AlgorithmJish$unify, typesHeap, _p78._3._0),
																			aLeftovers);
																		return {ctor: '_Tuple0'};
																	} else {
																		break _v47_3;
																	}
																}
															} else {
																break _v47_3;
															}
														} while(false);
														return fail('Tuple shapes don\'t match');
													case 'TArrow':
														if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
															break _v42_12;
														} else {
															break _v42_17;
														}
													default:
														break _v42_17;
												}
											case 'TDict':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TDict':
														var _p83 = A3(_user$project$AlgorithmJish$unify, typesHeap, _p71._0._1, _p71._1._1);
														var _v48 = typesHeap,
															_v49 = _p71._0._2,
															_v50 = _p71._1._2;
														typesHeap = _v48;
														t0 = _v49;
														t1 = _v50;
														continue unify;
													case 'TArrow':
														if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
															break _v42_12;
														} else {
															break _v42_17;
														}
													default:
														break _v42_17;
												}
											case 'TArrow':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TArrow':
														if ((_p71._0._1.ctor === '::') && (_p71._0._1._1.ctor === '::')) {
															if (_p71._0._1._1._1.ctor === '[]') {
																if ((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) {
																	if (_p71._1._1._1._1.ctor === '[]') {
																		var _p84 = A3(_user$project$AlgorithmJish$unify, typesHeap, _p71._0._1._0, _p71._1._1._0);
																		var _v51 = typesHeap,
																			_v52 = _p71._0._1._1._0,
																			_v53 = _p71._1._1._1._0;
																		typesHeap = _v51;
																		t0 = _v52;
																		t1 = _v53;
																		continue unify;
																	} else {
																		break _v42_12;
																	}
																} else {
																	break _v42_17;
																}
															} else {
																break _v42_11;
															}
														} else {
															if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
																break _v42_12;
															} else {
																break _v42_17;
															}
														}
													default:
														if (((_p71._0._1.ctor === '::') && (_p71._0._1._1.ctor === '::')) && (_p71._0._1._1._1.ctor === '::')) {
															break _v42_11;
														} else {
															break _v42_17;
														}
												}
											case 'TNum':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TArrow':
														if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
															break _v42_12;
														} else {
															break _v42_17;
														}
													case 'TNum':
														return {ctor: '_Tuple0'};
													default:
														break _v42_17;
												}
											case 'TBool':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TArrow':
														if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
															break _v42_12;
														} else {
															break _v42_17;
														}
													case 'TBool':
														return {ctor: '_Tuple0'};
													default:
														break _v42_17;
												}
											case 'TString':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TArrow':
														if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
															break _v42_12;
														} else {
															break _v42_17;
														}
													case 'TString':
														return {ctor: '_Tuple0'};
													default:
														break _v42_17;
												}
											case 'TNull':
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TArrow':
														if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
															break _v42_12;
														} else {
															break _v42_17;
														}
													case 'TNull':
														return {ctor: '_Tuple0'};
													default:
														break _v42_17;
												}
											default:
												switch (_p71._1.ctor) {
													case 'TForall':
														break _v42_1;
													case 'TVar':
														break _v42_3;
													case 'TArrow':
														if (((_p71._1._1.ctor === '::') && (_p71._1._1._1.ctor === '::')) && (_p71._1._1._1._1.ctor === '::')) {
															break _v42_12;
														} else {
															break _v42_17;
														}
													default:
														break _v42_17;
												}
										}
									} else {
										break _v42_17;
									}
								} while(false);
								return fail('Internal error: should never be unifying a polytype');
							} while(false);
							return A2(doesOccurIn, _p71._1._1, ta) ? fail('occurs check failed') : A3(_user$project$AlgorithmJish$union, typesHeap, t0, t1);
						} while(false);
						return A2(doesOccurIn, _p71._0._1, tb) ? fail('occurs check failed') : A3(_user$project$AlgorithmJish$union, typesHeap, t0, t1);
					} while(false);
					var _v54 = typesHeap,
						_v55 = A2(
						_user$project$Types$tArrow,
						_p71._0._1._0,
						_user$project$Types$tArrows(
							{
								ctor: '::',
								_0: _p71._0._1._1._0,
								_1: {ctor: '::', _0: _p71._0._1._1._1._0, _1: _p71._0._1._1._1._1}
							})),
						_v56 = t1;
					typesHeap = _v54;
					t0 = _v55;
					t1 = _v56;
					continue unify;
				} while(false);
				var _v57 = typesHeap,
					_v58 = t0,
					_v59 = A2(
					_user$project$Types$tArrow,
					_p71._1._1._0,
					_user$project$Types$tArrows(
						{
							ctor: '::',
							_0: _p71._1._1._1._0,
							_1: {ctor: '::', _0: _p71._1._1._1._1._0, _1: _p71._1._1._1._1._1}
						}));
				typesHeap = _v57;
				t0 = _v58;
				t1 = _v59;
				continue unify;
			} while(false);
			return _elm_lang$core$Native_Utils.eq(ta.val.t__, tb.val.t__) ? {ctor: '_Tuple0'} : fail('mismatched');
		}
	});
var _user$project$AlgorithmJish$doesUnify = F2(
	function (t1, t2) {
		var typesHeap = {
			nextVarId: 1,
			equivalenceClasses: _elm_lang$core$Dict$empty,
			idToTypeAndContext: _elm_lang$core$Dict$empty,
			errors: {ctor: '[]'}
		};
		var t1Reinstantiated = A2(
			_user$project$AlgorithmJish$inst,
			typesHeap,
			A2(
				_user$project$AlgorithmJish$quantifyUnboundVars,
				{ctor: '[]'},
				t1));
		var t2Reinstantiated = A2(
			_user$project$AlgorithmJish$inst,
			typesHeap,
			A2(
				_user$project$AlgorithmJish$quantifyUnboundVars,
				{ctor: '[]'},
				t2));
		var _p85 = A3(_user$project$AlgorithmJish$unify, typesHeap, t1Reinstantiated, t2Reinstantiated);
		return _elm_lang$core$Native_Utils.eq(
			typesHeap.errors,
			{ctor: '[]'});
	});
var _user$project$AlgorithmJish$EquivalenceClass = F2(
	function (a, b) {
		return {representative: a, members: b};
	});
var _user$project$AlgorithmJish$TypesHeap = F4(
	function (a, b, c, d) {
		return {nextVarId: a, equivalenceClasses: b, idToTypeAndContext: c, errors: d};
	});
var _user$project$AlgorithmJish$PreferLists = {ctor: 'PreferLists'};
var _user$project$AlgorithmJish$PreferTuples = {ctor: 'PreferTuples'};
var _user$project$AlgorithmJish$infer = F3(
	function (typesHeap, context, e) {
		var addRolesFromPreviousPass = F3(
			function (typesHeap, e, inferredBottomUpThisPass) {
				if (_elm_lang$core$Native_Utils.cmp(e.val.eid, 0) > 0) {
					var _p86 = A2(_elm_lang$core$Dict$get, e.val.eid, typesHeap.idToTypeAndContext);
					if (_p86.ctor === 'Just') {
						var rolesOnPriorPass = A2(_user$project$AlgorithmJish$find, typesHeap, _p86._0._0).representative.val.roles;
						var _p87 = A3(_user$project$AlgorithmJish$addRolesToClass, typesHeap, rolesOnPriorPass, inferredBottomUpThisPass);
						return inferredBottomUpThisPass;
					} else {
						return inferredBottomUpThisPass;
					}
				} else {
					return inferredBottomUpThisPass;
				}
			});
		var newVarAs = F2(
			function (typesHeap, tipe) {
				var t = _user$project$AlgorithmJish$newVar(typesHeap);
				var _p88 = A3(_user$project$AlgorithmJish$unify, typesHeap, t, tipe);
				return t;
			});
		var recordType = F4(
			function (typesHeap, id, tipe, context) {
				if (_elm_lang$core$Native_Utils.cmp(id, 0) > 0) {
					var newIdToType = A3(
						_elm_lang$core$Dict$insert,
						id,
						{ctor: '_Tuple2', _0: tipe, _1: context},
						typesHeap.idToTypeAndContext);
					var _p89 = A3(_user$project$ImpureGoodies$mutateRecordField, typesHeap, 'idToTypeAndContext', newIdToType);
					return {ctor: '_Tuple0'};
				} else {
					return {ctor: '_Tuple0'};
				}
			});
		var patToTypeAndContext = F3(
			function (tupleTypingPreference, typesHeap, p) {
				var recurse = A2(patToTypeAndContext, tupleTypingPreference, typesHeap);
				return function (_p90) {
					var _p91 = _p90;
					var _p93 = _p91._0;
					var _p92 = A4(recordType, typesHeap, p.val.pid, _p93, context);
					return {ctor: '_Tuple2', _0: _p93, _1: _p91._1};
				}(
					function () {
						var _p94 = p.val.p__;
						switch (_p94.ctor) {
							case 'PVar':
								var t = _user$project$AlgorithmJish$newVar(typesHeap);
								return {
									ctor: '_Tuple2',
									_0: t,
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p94._1, _1: t},
										_1: {ctor: '[]'}
									}
								};
							case 'PConst':
								return {
									ctor: '_Tuple2',
									_0: A2(newVarAs, typesHeap, _user$project$Types$tNum),
									_1: {ctor: '[]'}
								};
							case 'PBase':
								switch (_p94._1.ctor) {
									case 'EBool':
										return {
											ctor: '_Tuple2',
											_0: _user$project$Types$tBool,
											_1: {ctor: '[]'}
										};
									case 'EString':
										return {
											ctor: '_Tuple2',
											_0: _user$project$Types$tString,
											_1: {ctor: '[]'}
										};
									default:
										return {
											ctor: '_Tuple2',
											_0: _user$project$Types$tNull,
											_1: {ctor: '[]'}
										};
								}
							case 'PWildcard':
								return {
									ctor: '_Tuple2',
									_0: _user$project$AlgorithmJish$newVar(typesHeap),
									_1: {ctor: '[]'}
								};
							case 'PList':
								if (_p94._3.ctor === 'Nothing') {
									var _p95 = _elm_lang$core$List$unzip(
										A2(_elm_lang$core$List$map, recurse, _p94._1));
									var ts = _p95._0;
									var contexts = _p95._1;
									var _p96 = tupleTypingPreference;
									if (_p96.ctor === 'PreferTuples') {
										return {
											ctor: '_Tuple2',
											_0: A2(
												newVarAs,
												typesHeap,
												_user$project$Types$tTuple(ts)),
											_1: _elm_lang$core$List$concat(contexts)
										};
									} else {
										var tTail = _user$project$AlgorithmJish$newVar(typesHeap);
										return {
											ctor: '_Tuple2',
											_0: A2(
												newVarAs,
												typesHeap,
												A2(
													_user$project$Types$tTupleRest,
													ts,
													_elm_lang$core$Maybe$Just(tTail))),
											_1: _elm_lang$core$List$concat(contexts)
										};
									}
								} else {
									var _p97 = _elm_lang$core$List$unzip(
										A2(_elm_lang$core$List$map, recurse, _p94._1));
									var ts = _p97._0;
									var contexts = _p97._1;
									var _p98 = recurse(_p94._3._0);
									var tTail = _p98._0;
									var contextTail = _p98._1;
									return {
										ctor: '_Tuple2',
										_0: A2(
											_user$project$Types$tTupleRest,
											ts,
											_elm_lang$core$Maybe$Just(tTail)),
										_1: A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$List$concat(contexts),
											contextTail)
									};
								}
							case 'PAs':
								var _p99 = recurse(_p94._3);
								var tChild = _p99._0;
								var contextChild = _p99._1;
								return {
									ctor: '_Tuple2',
									_0: tChild,
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p94._1, _1: tChild},
										_1: contextChild
									}
								};
							default:
								return recurse(_p94._1);
						}
					}());
			});
		var fail = F2(
			function (typesHeap, errMsg) {
				var _p100 = A3(
					_user$project$ImpureGoodies$mutateRecordField,
					typesHeap,
					'errors',
					{ctor: '::', _0: errMsg, _1: typesHeap.errors});
				var _p101 = _user$project$Utils$log(errMsg);
				return _user$project$AlgorithmJish$newVar(typesHeap);
			});
		return function (inferred) {
			var _p102 = A4(recordType, typesHeap, e.val.eid, inferred, context);
			return inferred;
		}(
			A2(
				_user$project$AlgorithmJish$tagWithRolesBasedOnStructure,
				typesHeap,
				function () {
					var _p103 = e.val.e__;
					switch (_p103.ctor) {
						case 'EVar':
							var _p105 = _p103._1;
							var _p104 = A2(_user$project$Utils$maybeFind, _p105, context);
							if (_p104.ctor === 'Just') {
								var t = A2(_user$project$AlgorithmJish$inst, typesHeap, _p104._0);
								return t;
							} else {
								return A2(
									fail,
									typesHeap,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'Could not find ',
										A2(_elm_lang$core$Basics_ops['++'], _p105, ' in type context! (Undefined var? Unannotated prelude item?)')));
							}
						case 'EApp':
							if (_p103._2.ctor === '[]') {
								return A2(
									fail,
									typesHeap,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'Empty EApp! ',
										_user$project$AlgorithmJish$unparseExp(e)));
							} else {
								if (_p103._2._1.ctor === '[]') {
									var t0 = A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._1);
									var t1 = A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._2._0);
									var t2 = _user$project$AlgorithmJish$newVar(typesHeap);
									var _p106 = A3(
										_user$project$AlgorithmJish$unify,
										typesHeap,
										t0,
										A2(_user$project$Types$tArrow, t1, t2));
									return t2;
								} else {
									return A3(
										_user$project$AlgorithmJish$infer,
										typesHeap,
										context,
										A2(
											_user$project$Lang$eApp,
											A2(
												_user$project$Lang$eApp,
												_p103._1,
												{
													ctor: '::',
													_0: _p103._2._0,
													_1: {ctor: '[]'}
												}),
											_p103._2._1));
								}
							}
						case 'EFun':
							var _p109 = _p103._2;
							var _p107 = _elm_lang$core$List$unzip(
								A2(
									_elm_lang$core$List$map,
									A2(patToTypeAndContext, _user$project$AlgorithmJish$PreferTuples, typesHeap),
									_p103._1));
							var argTypes = _p107._0;
							var contexts = _p107._1;
							var bodyContext = A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$List$concat(contexts),
								context);
							var returnType = A3(_user$project$AlgorithmJish$infer, typesHeap, bodyContext, _p109);
							var _p108 = A3(_user$project$AlgorithmJish$infer, typesHeap, bodyContext, _p109);
							var returnType = A3(_user$project$AlgorithmJish$infer, typesHeap, bodyContext, _p109);
							var returnType = A3(_user$project$AlgorithmJish$infer, typesHeap, bodyContext, _p109);
							return _user$project$Types$tArrows(
								A2(
									_elm_lang$core$Basics_ops['++'],
									argTypes,
									{
										ctor: '::',
										_0: returnType,
										_1: {ctor: '[]'}
									}));
						case 'ELet':
							var _p121 = _p103._3;
							var _p120 = _p103._7;
							var _p119 = _p103._5;
							var _p110 = A3(patToTypeAndContext, _user$project$AlgorithmJish$PreferTuples, typesHeap, _p121);
							var pType = _p110._0;
							var pContext = _p110._1;
							var boundExpContext = _p103._2 ? A2(_elm_lang$core$Basics_ops['++'], pContext, context) : context;
							var t1Pre = A3(_user$project$AlgorithmJish$infer, typesHeap, boundExpContext, _p119);
							var _p111 = A3(_user$project$AlgorithmJish$unify, typesHeap, pType, t1Pre);
							var t1 = t1Pre;
							var handleRegular = function (_p112) {
								var _p113 = _p112;
								var t2 = A3(
									_user$project$AlgorithmJish$infer,
									typesHeap,
									A2(_elm_lang$core$Basics_ops['++'], pContext, context),
									_p120);
								return t2;
							};
							var handlePolymorphic = function (ident) {
								var t1_ = function () {
									if (false) {
										var t1_ = A3(_user$project$AlgorithmJish$infer, typesHeap, boundExpContext, _p119);
										var _p114 = A3(_user$project$AlgorithmJish$unify, typesHeap, pType, t1_);
										var t1__ = A3(_user$project$AlgorithmJish$infer, typesHeap, boundExpContext, _p119);
										var _p115 = A3(_user$project$AlgorithmJish$unify, typesHeap, pType, t1__);
										return t1__;
									} else {
										return t1;
									}
								}();
								var quantifiedT1 = A2(
									_user$project$AlgorithmJish$quantifyUnboundVars,
									context,
									A2(_user$project$AlgorithmJish$finalizeType, typesHeap.equivalenceClasses, t1_));
								var _p116 = A4(recordType, typesHeap, _p121.val.pid, quantifiedT1, context);
								var t2 = A3(
									_user$project$AlgorithmJish$infer,
									typesHeap,
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: ident, _1: quantifiedT1},
										_1: context
									},
									_p120);
								return t2;
							};
							var _p117 = _p121.val.p__;
							if (_p117.ctor === 'PVar') {
								var _p118 = A2(_user$project$AlgorithmJish$find, typesHeap, t1).representative.val.t__;
								if (_p118.ctor === 'TArrow') {
									return handlePolymorphic(_p117._1);
								} else {
									return handleRegular(
										{ctor: '_Tuple0'});
								}
							} else {
								return handleRegular(
									{ctor: '_Tuple0'});
							}
						case 'EConst':
							return A3(
								_user$project$AlgorithmJish$tagWithRolesBasedOnNumber,
								typesHeap,
								_p103._1,
								A2(newVarAs, typesHeap, _user$project$Types$tNum));
						case 'EBase':
							switch (_p103._1.ctor) {
								case 'EBool':
									return _user$project$Types$tBool;
								case 'EString':
									return _user$project$Types$tString;
								default:
									return _user$project$Types$tNull;
							}
						case 'EOp':
							var _p133 = _p103._1;
							var tOperands = A2(
								_elm_lang$core$List$map,
								A2(_user$project$AlgorithmJish$infer, typesHeap, context),
								_p103._2);
							return A4(
								_user$project$AlgorithmJish$tagWithRolesBasedOnOperation,
								typesHeap,
								_p133.val,
								tOperands,
								A3(
									addRolesFromPreviousPass,
									typesHeap,
									e,
									A2(
										newVarAs,
										typesHeap,
										function () {
											var passthrough = function (typesHeap) {
												return A2(
													_elm_lang$core$Maybe$withDefault,
													_user$project$AlgorithmJish$newVar(typesHeap),
													_elm_lang$core$List$head(tOperands));
											};
											var allOperandsShouldBe = F2(
												function (typesHeap, t) {
													return A2(
														_elm_lang$core$List$map,
														A2(_user$project$AlgorithmJish$unify, typesHeap, t),
														tOperands);
												});
											var mathOp = function (typesHeap) {
												var _p122 = A2(allOperandsShouldBe, typesHeap, _user$project$Types$tNum);
												return _user$project$Types$tNum;
											};
											var operandsShouldBe = F2(
												function (typesHeap, ts) {
													return A2(
														_elm_lang$core$List$map,
														_elm_lang$core$Basics$uncurry(
															_user$project$AlgorithmJish$unify(typesHeap)),
														A2(_user$project$Utils$zip, tOperands, ts));
												});
											var _p123 = _p133.val;
											switch (_p123.ctor) {
												case 'Pi':
													return _user$project$Types$tNum;
												case 'DictEmpty':
													return A2(
														_user$project$Types$tDict,
														_user$project$AlgorithmJish$newVar(typesHeap),
														_user$project$AlgorithmJish$newVar(typesHeap));
												case 'Cos':
													return mathOp(typesHeap);
												case 'Sin':
													return mathOp(typesHeap);
												case 'ArcCos':
													return mathOp(typesHeap);
												case 'ArcSin':
													return mathOp(typesHeap);
												case 'Abs':
													return mathOp(typesHeap);
												case 'Floor':
													return mathOp(typesHeap);
												case 'Ceil':
													return mathOp(typesHeap);
												case 'Round':
													return mathOp(typesHeap);
												case 'ToStr':
													return _user$project$Types$tString;
												case 'OptNumToString':
													return _user$project$Types$tString;
												case 'Sqrt':
													return mathOp(typesHeap);
												case 'Explode':
													var _p124 = A2(allOperandsShouldBe, typesHeap, _user$project$Types$tString);
													return _user$project$Types$tList(_user$project$Types$tString);
												case 'DebugLog':
													return passthrough(typesHeap);
												case 'NoWidgets':
													return passthrough(typesHeap);
												case 'Plus':
													return mathOp(typesHeap);
												case 'Minus':
													return mathOp(typesHeap);
												case 'Mult':
													return mathOp(typesHeap);
												case 'Div':
													return mathOp(typesHeap);
												case 'Lt':
													var _p125 = A2(allOperandsShouldBe, typesHeap, _user$project$Types$tNum);
													return _user$project$Types$tBool;
												case 'Eq':
													var _p126 = A2(
														allOperandsShouldBe,
														typesHeap,
														_user$project$AlgorithmJish$newVar(typesHeap));
													return _user$project$Types$tBool;
												case 'Mod':
													return mathOp(typesHeap);
												case 'Pow':
													return mathOp(typesHeap);
												case 'Ln':
													return mathOp(typesHeap);
												case 'ArcTan2':
													return mathOp(typesHeap);
												case 'DictGet':
													var _p127 = {
														ctor: '_Tuple3',
														_0: _user$project$AlgorithmJish$newVar(typesHeap),
														_1: _user$project$AlgorithmJish$newVar(typesHeap),
														_2: _user$project$AlgorithmJish$newVar(typesHeap)
													};
													var k = _p127._0;
													var v = _p127._1;
													var a = _p127._2;
													var _p128 = A2(
														operandsShouldBe,
														typesHeap,
														{
															ctor: '::',
															_0: k,
															_1: {
																ctor: '::',
																_0: A2(_user$project$Types$tDict, k, v),
																_1: {ctor: '[]'}
															}
														});
													return a;
												case 'DictRemove':
													var _p129 = {
														ctor: '_Tuple2',
														_0: _user$project$AlgorithmJish$newVar(typesHeap),
														_1: _user$project$AlgorithmJish$newVar(typesHeap)
													};
													var k = _p129._0;
													var v = _p129._1;
													var _p130 = A2(
														operandsShouldBe,
														typesHeap,
														{
															ctor: '::',
															_0: k,
															_1: {
																ctor: '::',
																_0: A2(_user$project$Types$tDict, k, v),
																_1: {ctor: '[]'}
															}
														});
													return A2(_user$project$Types$tDict, k, v);
												default:
													var _p131 = {
														ctor: '_Tuple2',
														_0: _user$project$AlgorithmJish$newVar(typesHeap),
														_1: _user$project$AlgorithmJish$newVar(typesHeap)
													};
													var k = _p131._0;
													var v = _p131._1;
													var _p132 = A2(
														operandsShouldBe,
														typesHeap,
														{
															ctor: '::',
															_0: k,
															_1: {
																ctor: '::',
																_0: v,
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Types$tDict, k, v),
																	_1: {ctor: '[]'}
																}
															}
														});
													return A2(_user$project$Types$tDict, k, v);
											}
										}())));
						case 'EList':
							var tInTail = _user$project$AlgorithmJish$newVar(typesHeap);
							var maybeTTail = A2(
								_elm_lang$core$Maybe$map,
								A2(_user$project$AlgorithmJish$infer, typesHeap, context),
								_p103._3);
							var _p134 = A2(
								_elm_lang$core$Maybe$map,
								A2(
									_user$project$AlgorithmJish$unify,
									typesHeap,
									_user$project$Types$tList(tInTail)),
								maybeTTail);
							var tHeads = A2(
								_elm_lang$core$List$map,
								function (_p135) {
									return A3(
										_user$project$AlgorithmJish$infer,
										typesHeap,
										context,
										_elm_lang$core$Tuple$second(_p135));
								},
								_p103._1);
							return A2(
								newVarAs,
								typesHeap,
								A2(
									_user$project$Types$tTupleRest,
									tHeads,
									_elm_lang$core$Maybe$Just(tInTail)));
						case 'EIf':
							var t1 = A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._1);
							var _p136 = A3(_user$project$AlgorithmJish$unify, typesHeap, t1, _user$project$Types$tBool);
							var t3 = A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._5);
							var t2 = A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._3);
							var _p137 = A3(_user$project$AlgorithmJish$unify, typesHeap, t2, t3);
							return t3;
						case 'ECase':
							var _p138 = _elm_lang$core$List$unzip(
								A2(
									_elm_lang$core$List$map,
									function (_p139) {
										var _p140 = _p139;
										var _p141 = A3(patToTypeAndContext, _user$project$AlgorithmJish$PreferLists, typesHeap, _p140._1);
										var pType = _p141._0;
										var pContext = _p141._1;
										var eType = A3(
											_user$project$AlgorithmJish$infer,
											typesHeap,
											A2(_elm_lang$core$Basics_ops['++'], pContext, context),
											_p140._2);
										return {ctor: '_Tuple2', _0: pType, _1: eType};
									},
									A2(
										_elm_lang$core$List$map,
										function (_) {
											return _.val;
										},
										_p103._2)));
							var patTypes = _p138._0;
							var branchTypes = _p138._1;
							var t1 = A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._1);
							var t2 = _user$project$AlgorithmJish$newVar(typesHeap);
							var _p142 = A2(
								_elm_lang$core$List$map,
								A2(_user$project$AlgorithmJish$unify, typesHeap, t2),
								branchTypes);
							var _p143 = A2(
								_elm_lang$core$List$map,
								A2(_user$project$AlgorithmJish$unify, typesHeap, t1),
								patTypes);
							return t2;
						case 'ETypeCase':
							var branchTypes = A2(
								_elm_lang$core$List$map,
								A2(_user$project$AlgorithmJish$infer, typesHeap, context),
								_user$project$Lang$tbranchExps(_p103._2));
							var t1 = A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._1);
							var t2 = _user$project$AlgorithmJish$newVar(typesHeap);
							var _p144 = A2(
								_elm_lang$core$List$map,
								A2(_user$project$AlgorithmJish$unify, typesHeap, t2),
								branchTypes);
							return t2;
						case 'EComment':
							return A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._2);
						case 'EOption':
							return A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._4);
						case 'ETyp':
							return A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._3);
						case 'EColonType':
							return A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._1);
						case 'ETypeAlias':
							return A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._3);
						case 'EParens':
							return A3(_user$project$AlgorithmJish$infer, typesHeap, context, _p103._1);
						default:
							switch (_p103._1.ctor) {
								case 'HolePBE':
									var t = _user$project$AlgorithmJish$newVar(typesHeap);
									var exampleExps = A2(
										_elm_lang$core$List$map,
										function (_p145) {
											var _p146 = _p145;
											return _p146._3;
										},
										_p103._1._0);
									var exampleTypes = A2(
										_elm_lang$core$List$map,
										A2(_user$project$AlgorithmJish$infer, typesHeap, context),
										exampleExps);
									var _p147 = A2(
										_elm_lang$core$List$map,
										A2(_user$project$AlgorithmJish$unify, typesHeap, t),
										exampleTypes);
									return t;
								case 'HoleVal':
									var valToType = function (val) {
										var _p148 = val.v_;
										switch (_p148.ctor) {
											case 'VConst':
												return _user$project$Types$tNum;
											case 'VBase':
												switch (_p148._0.ctor) {
													case 'VBool':
														return _user$project$Types$tBool;
													case 'VString':
														return _user$project$Types$tString;
													default:
														return _user$project$Types$tNull;
												}
											case 'VList':
												return A2(
													_user$project$Types$tTupleRest,
													A2(_elm_lang$core$List$map, valToType, _p148._0),
													_elm_lang$core$Maybe$Just(
														_user$project$AlgorithmJish$newVar(typesHeap)));
											case 'VDict':
												return A2(
													_user$project$Types$tDict,
													_user$project$AlgorithmJish$newVar(typesHeap),
													_user$project$AlgorithmJish$newVar(typesHeap));
											default:
												return A2(
													_user$project$Types$tArrow,
													_user$project$AlgorithmJish$newVar(typesHeap),
													_user$project$AlgorithmJish$newVar(typesHeap));
										}
									};
									return valToType(_p103._1._0);
								default:
									return _user$project$AlgorithmJish$newVar(typesHeap);
							}
					}
				}()));
	});
var _user$project$AlgorithmJish$inferTypes = function (program) {
	var typesHeap = {
		nextVarId: 1,
		equivalenceClasses: _elm_lang$core$Dict$empty,
		idToTypeAndContext: _elm_lang$core$Dict$empty,
		errors: {ctor: '[]'}
	};
	var _p149 = A3(_user$project$AlgorithmJish$infer, typesHeap, _user$project$AlgorithmJish$preludeTypeContext, program);
	return A2(
		_elm_lang$core$Dict$map,
		F2(
			function (_p151, _p150) {
				var _p152 = _p150;
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$AlgorithmJish$finalizeType, typesHeap.equivalenceClasses, _p152._0),
					_1: function (_p153) {
						var _p154 = _p153;
						return A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Tuple$mapSecond(
								_user$project$AlgorithmJish$finalizeType(typesHeap.equivalenceClasses)),
							_p152._1);
					}
				};
			}),
		typesHeap.idToTypeAndContext);
};
var _user$project$AlgorithmJish$inferOne = F2(
	function (context, e) {
		var maxId = A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$maximum(
				A2(
					_elm_lang$core$List$map,
					function (ident) {
						var _p155 = _elm_lang$core$String$uncons(ident);
						if (((_p155.ctor === 'Just') && (_p155._0.ctor === '_Tuple2')) && (_p155._0._0.valueOf() === 'a')) {
							return A2(
								_user$project$Utils$fromOkWithDefault,
								0,
								_elm_lang$core$String$toInt(_p155._0._1));
						} else {
							return 0;
						}
					},
					_user$project$Utils$dedup(
						A2(
							_elm_lang$core$List$concatMap,
							function (_p156) {
								return _user$project$Types$freeIdentifiersList(
									_elm_lang$core$Tuple$second(_p156));
							},
							context)))));
		var typesHeap = {
			nextVarId: maxId + 1,
			equivalenceClasses: _elm_lang$core$Dict$empty,
			idToTypeAndContext: _elm_lang$core$Dict$empty,
			errors: {ctor: '[]'}
		};
		var dumbType = A3(_user$project$AlgorithmJish$infer, typesHeap, context, e);
		return A2(_user$project$AlgorithmJish$finalizeType, typesHeap.equivalenceClasses, dumbType);
	});

var _user$project$WidgetsFromEnv$widgetsFromEnv = function (env) {
	return A2(
		_elm_lang$core$List$filterMap,
		function (_p0) {
			var _p1 = _p0;
			return _user$project$ValWidgets$valToMaybeWidget(_p1._1);
		},
		env);
};

var _user$project$FocusedEditingContext$clearEditingContextMarkers = function (exp) {
	return A2(
		_user$project$Lang$mapExp,
		function (exp) {
			var _p0 = exp.val.e__;
			_v0_3:
			do {
				if (_p0.ctor === 'EComment') {
					switch (_p0._1) {
						case ' *** Focused Definition ***':
							return A2(_user$project$Lang$copyPrecedingWhitespace, exp, _p0._2);
						case ' *** Focused Expression ***':
							return A2(_user$project$Lang$copyPrecedingWhitespace, exp, _p0._2);
						case ' *** Example Call ***':
							return A2(_user$project$Lang$copyPrecedingWhitespace, exp, _p0._2);
						default:
							break _v0_3;
					}
				} else {
					break _v0_3;
				}
			} while(false);
			return exp;
		},
		exp);
};
var _user$project$FocusedEditingContext$setEditingContextMarkers = F3(
	function (focusedEId, maybeExampleCallEId, program) {
		return function () {
			var _p1 = maybeExampleCallEId;
			if (_p1.ctor === 'Nothing') {
				return _elm_lang$core$Basics$identity;
			} else {
				return _user$project$Lang$mapExp(
					function (exp) {
						return _elm_lang$core$Native_Utils.eq(exp.val.eid, _p1._0) ? A2(
							_user$project$Lang$copyPrecedingWhitespace,
							exp,
							A2(
								_user$project$Lang$eComment,
								' *** Example Call ***',
								A2(
									_user$project$Lang$replacePrecedingWhitespace,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'  ',
										A2(_user$project$Lang$indentationAt, exp.val.eid, program)),
									exp))) : exp;
					});
			}
		}()(
			A2(
				_user$project$Lang$mapExp,
				function (exp) {
					var _p2 = {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.eq(exp.val.eid, focusedEId),
						_1: _user$project$LangTools$expToMaybeLetBoundExp(exp)
					};
					_v2_2:
					do {
						if (_p2.ctor === '_Tuple2') {
							if (_p2._0 === true) {
								return A2(
									_user$project$Lang$copyPrecedingWhitespace,
									exp,
									A2(
										_user$project$Lang$eComment,
										' *** Focused Expression ***',
										A2(
											_user$project$Lang$replacePrecedingWhitespace,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'  ',
												A2(_user$project$Lang$indentationAt, exp.val.eid, program)),
											exp)));
							} else {
								if (_p2._1.ctor === 'Just') {
									return A2(
										_elm_lang$core$List$member,
										focusedEId,
										_user$project$Lang$expEffectiveEIds(_p2._1._0)) ? A2(
										_user$project$Lang$copyPrecedingWhitespace,
										exp,
										A2(
											_user$project$Lang$eComment,
											' *** Focused Definition ***',
											A2(
												_user$project$Lang$replacePrecedingWhitespace,
												A2(_user$project$Lang$indentationAt, exp.val.eid, program),
												_user$project$FocusedEditingContext$clearEditingContextMarkers(exp)))) : exp;
								} else {
									break _v2_2;
								}
							}
						} else {
							break _v2_2;
						}
					} while(false);
					return exp;
				},
				program));
	});
var _user$project$FocusedEditingContext$editingContextFromMarkers = function (program) {
	var expToMaybeFocusedExp = function (exp) {
		var _p3 = exp.val.e__;
		_v3_2:
		do {
			if (_p3.ctor === 'EComment') {
				switch (_p3._1) {
					case ' *** Focused Definition ***':
						return _user$project$LangTools$expToMaybeLetBoundExp(
							_user$project$LangTools$firstNonComment(_p3._2));
					case ' *** Focused Expression ***':
						return _elm_lang$core$Maybe$Just(
							_user$project$LangTools$firstNonComment(_p3._2));
					default:
						break _v3_2;
				}
			} else {
				break _v3_2;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	};
	var expToMaybeExampleCall = function (exp) {
		var _p4 = exp.val.e__;
		if ((_p4.ctor === 'EComment') && (_p4._1 === ' *** Example Call ***')) {
			return A2(_user$project$Lang$findFirstNode, _user$project$Lang$isApp, _p4._2);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	};
	return A2(
		_elm_lang$core$Maybe$map,
		function (focusedExp) {
			if (_user$project$Lang$isFunc(focusedExp)) {
				var maybeExampleCallEId = A2(
					_elm_lang$core$Maybe$map,
					function (_p5) {
						return function (_) {
							return _.eid;
						}(
							function (_) {
								return _.val;
							}(_p5));
					},
					A2(_user$project$Lang$mapFirstSuccessNode, expToMaybeExampleCall, program));
				return {ctor: '_Tuple2', _0: focusedExp.val.eid, _1: maybeExampleCallEId};
			} else {
				return {ctor: '_Tuple2', _0: focusedExp.val.eid, _1: _elm_lang$core$Maybe$Nothing};
			}
		},
		A2(_user$project$Lang$mapFirstSuccessNode, expToMaybeFocusedExp, program));
};
var _user$project$FocusedEditingContext$evalAtContext = F4(
	function (showPreludeOffsets, syntax, editingContext, program) {
		var _p6 = editingContext;
		if (_p6.ctor === 'Just') {
			var _p16 = _p6._0._0;
			var contextExp = A2(_user$project$LangTools$justFindExpByEId, program, _p16);
			var envEId = function (_p7) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p7));
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					contextExp,
					_user$project$LangTools$expToMaybeFuncBody(contextExp)));
			var abortEId = A2(_elm_lang$core$Maybe$withDefault, _p16, _p6._0._1);
			var abortPred = function (_p8) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					abortEId,
					function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(_p8)));
			};
			return A2(
				_elm_lang$core$Result$map,
				function (_p9) {
					var _p10 = _p9;
					var _p15 = _p10._0._1;
					var _p14 = _p10._0._0;
					var _p13 = _p10._2;
					var _p12 = _p10._1;
					var _p11 = _p12;
					if (_p11.ctor === 'Just') {
						var withWidgetsFromEnv = A3(
							_user$project$Utils$foldr,
							_p15,
							_user$project$Eval$addSubsumingPriorWidgets,
							_user$project$WidgetsFromEnv$widgetsFromEnv(_p11._0));
						return {
							ctor: '_Tuple3',
							_0: {ctor: '_Tuple2', _0: _p14, _1: withWidgetsFromEnv},
							_1: _p12,
							_2: _p13
						};
					} else {
						return {
							ctor: '_Tuple3',
							_0: {ctor: '_Tuple2', _0: _p14, _1: _p15},
							_1: _p12,
							_2: _p13
						};
					}
				},
				A6(
					_user$project$Eval$doEvalEarlyAbort,
					showPreludeOffsets,
					_elm_lang$core$Maybe$Just(envEId),
					abortPred,
					syntax,
					_user$project$Eval$initEnv,
					program));
		} else {
			var envEId = program.val.eid;
			return A6(
				_user$project$Eval$doEvalEarlyAbort,
				showPreludeOffsets,
				_elm_lang$core$Maybe$Just(envEId),
				_user$project$Eval$runUntilTheEnd,
				syntax,
				_user$project$Eval$initEnv,
				program);
		}
	});
var _user$project$FocusedEditingContext$maybeFocusedExp = F2(
	function (editingContext, program) {
		var _p17 = editingContext;
		if ((_p17.ctor === 'Just') && (_p17._0.ctor === '_Tuple2')) {
			return A2(_user$project$Lang$findExpByEId, program, _p17._0._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$FocusedEditingContext$drawingContextExp = F2(
	function (editingContext, program) {
		var _p18 = A2(_user$project$FocusedEditingContext$maybeFocusedExp, editingContext, program);
		if (_p18.ctor === 'Just') {
			var _p19 = _p18._0;
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_p19,
				_user$project$LangTools$expToMaybeFuncBody(_p19));
		} else {
			return program;
		}
	});
var _user$project$FocusedEditingContext$eidAtEndOfDrawingContext = F2(
	function (editingContext, program) {
		return function (_p20) {
			return function (_) {
				return _.eid;
			}(
				function (_) {
					return _.val;
				}(_p20));
		}(
			_user$project$LangTools$lastSameLevelExp(
				A2(_user$project$FocusedEditingContext$drawingContextExp, editingContext, program)));
	});
var _user$project$FocusedEditingContext$insertionLocationEIdsForContext = F2(
	function (editingContext, program) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				function (_p21) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(_p21));
				},
				A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(
						_user$project$Lang$findWithAncestorsByEId,
						program,
						A2(_user$project$FocusedEditingContext$eidAtEndOfDrawingContext, editingContext, program)))));
	});
var _user$project$FocusedEditingContext$contextExpAndEndOfDrawingContextExp = F2(
	function (editingContext, program) {
		var contextExp = A2(_user$project$FocusedEditingContext$drawingContextExp, editingContext, program);
		var endOfDrawingContextExp = function () {
			var _p22 = A2(
				_elm_lang$core$Maybe$map,
				_user$project$LangTools$findRecursiveBranch(program),
				A2(_user$project$FocusedEditingContext$maybeFocusedExp, editingContext, program));
			if ((_p22.ctor === 'Just') && (_p22._0.ctor === 'Just')) {
				return _user$project$LangTools$lastSameLevelExp(_p22._0._0);
			} else {
				return _user$project$LangTools$lastSameLevelExp(contextExp);
			}
		}();
		return {ctor: '_Tuple2', _0: contextExp, _1: endOfDrawingContextExp};
	});
var _user$project$FocusedEditingContext$contextInputVals = F3(
	function (editingContext, maybeEnv, program) {
		var _p23 = {
			ctor: '_Tuple2',
			_0: maybeEnv,
			_1: A2(_user$project$FocusedEditingContext$maybeFocusedExp, editingContext, program)
		};
		if (((_p23.ctor === '_Tuple2') && (_p23._0.ctor === 'Just')) && (_p23._1.ctor === 'Just')) {
			var _p24 = _user$project$LangTools$expToMaybeFuncPats(_p23._1._0);
			if (_p24.ctor === 'Just') {
				var inputIdentPats = A2(_elm_lang$core$List$concatMap, _user$project$LangTools$indentPatsInPat, _p24._0);
				var contextExp = A2(_user$project$FocusedEditingContext$drawingContextExp, editingContext, program);
				var patEnv = A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Dict$empty,
					A2(
						_user$project$LangTools$expPatEnvAt_,
						program,
						_user$project$Lang$expEffectiveExp(contextExp).val.eid));
				return A2(
					_elm_lang$core$List$filterMap,
					function (_p25) {
						var _p26 = _p25;
						var _p28 = _p26._0;
						var _p27 = A2(_elm_lang$core$Dict$get, _p28, patEnv);
						if ((_p27.ctor === 'Just') && (_p27._0.ctor === '_Tuple2')) {
							return _elm_lang$core$Native_Utils.eq(_p27._0._0.val.pid, _p26._1.val.pid) ? A2(_user$project$Utils$maybeFind, _p28, _p23._0._0) : _elm_lang$core$Maybe$Nothing;
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					},
					inputIdentPats);
			} else {
				return {ctor: '[]'};
			}
		} else {
			return {ctor: '[]'};
		}
	});

var _user$project$InterfaceModel$initTemplate = 'BLANK';
var _user$project$InterfaceModel$modelModify = F2(
	function (code, dws) {
		return _user$project$History$modify(
			{code: code, selectedDeuceWidgets: dws});
	});
var _user$project$InterfaceModel$historyUpdateCondition = F2(
	function (previousValues, currentValues) {
		return _user$project$Utils$or(
			{
				ctor: '::',
				_0: !_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$String$trimRight(previousValues.code),
					_elm_lang$core$String$trimRight(currentValues.code)),
				_1: {
					ctor: '::',
					_0: !_elm_lang$core$Native_Utils.eq(previousValues.selectedDeuceWidgets, currentValues.selectedDeuceWidgets),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$InterfaceModel$modelCommit = F2(
	function (code, dws) {
		return A2(
			_user$project$History$commit,
			_user$project$InterfaceModel$historyUpdateCondition,
			{code: code, selectedDeuceWidgets: dws});
	});
var _user$project$InterfaceModel$autoOutputToolsPopupPanelShown = function (model) {
	return _user$project$Utils$or(
		{
			ctor: '::',
			_0: !_elm_lang$core$List$isEmpty(model.selectedFeatures),
			_1: {
				ctor: '::',
				_0: !_elm_lang$core$List$isEmpty(model.selectedShapes),
				_1: {
					ctor: '::',
					_0: !_elm_lang$core$Dict$isEmpty(model.selectedBlobs),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Dict$member, 'Termination Condition Options', model.synthesisResultsDict),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Lang$containsNode, _user$project$Lang$isPBEHole, model.inputExp),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$InterfaceModel$nothingSelectedInOutput = function (model) {
	return _elm_lang$core$List$isEmpty(model.selectedFeatures) && (_elm_lang$core$List$isEmpty(model.selectedShapes) && _elm_lang$core$Dict$isEmpty(model.selectedBlobs));
};
var _user$project$InterfaceModel$noCodeWidgetsSelected = function (model) {
	return _elm_lang$core$List$isEmpty(model.deuceState.selectedWidgets);
};
var _user$project$InterfaceModel$rangeFromInfo = function (info) {
	return {
		start: {row: info.start.line - 1, column: info.start.col - 1},
		end: {row: info.end.line - 1, column: info.end.col - 1}
	};
};
var _user$project$InterfaceModel$isSubsetRange = F2(
	function (innerRange, outerRange) {
		var endGood = (_elm_lang$core$Native_Utils.cmp(innerRange.end.row, outerRange.end.row) < 0) || (_elm_lang$core$Native_Utils.eq(innerRange.end.row, outerRange.end.row) && (_elm_lang$core$Native_Utils.cmp(innerRange.end.column, outerRange.end.column) < 1));
		var startGood = (_elm_lang$core$Native_Utils.cmp(outerRange.start.row, innerRange.start.row) < 0) || (_elm_lang$core$Native_Utils.eq(outerRange.start.row, innerRange.start.row) && (_elm_lang$core$Native_Utils.cmp(outerRange.start.column, innerRange.start.column) < 1));
		return startGood && endGood;
	});
var _user$project$InterfaceModel$isRangeEqual = F2(
	function (x, y) {
		return _elm_lang$core$Native_Utils.eq(x, y);
	});
var _user$project$InterfaceModel$snippet = function (range) {
	return function (_p0) {
		return _elm_lang$core$String$concat(
			A2(
				_user$project$Utils$mapHead,
				_elm_lang$core$String$dropLeft(range.start.column),
				A2(
					_user$project$Utils$mapLast,
					_elm_lang$core$String$left(range.end.column),
					A3(
						_user$project$Utils$slice,
						range.start.row,
						range.end.row + 1,
						_elm_lang$core$String$lines(_p0)))));
	};
};
var _user$project$InterfaceModel$matchingRange = F3(
	function (textSelectMode, code, selectedRange) {
		var _p1 = function () {
			var _p2 = textSelectMode;
			switch (_p2.ctor) {
				case 'Strict':
					return {ctor: '_Tuple2', _0: _elm_lang$core$List$foldl, _1: _user$project$InterfaceModel$isRangeEqual};
				case 'Superset':
					return {ctor: '_Tuple2', _0: _elm_lang$core$List$foldl, _1: _user$project$InterfaceModel$isSubsetRange};
				case 'Subset':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$List$foldr,
						_1: _elm_lang$core$Basics$flip(_user$project$InterfaceModel$isSubsetRange)
					};
				case 'SubsetExtra':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$List$foldr,
						_1: F2(
							function (sr, r) {
								if (A2(_user$project$InterfaceModel$isSubsetRange, r, sr)) {
									var validAdditionalSelectedCharacter = function (c) {
										return _elm_lang$core$Native_Utils.eq(
											c,
											_elm_lang$core$Native_Utils.chr(' ')) || _elm_lang$core$Native_Utils.eq(
											c,
											_elm_lang$core$Native_Utils.chr('\n'));
									};
									var snippetValid = _elm_lang$core$String$all(validAdditionalSelectedCharacter);
									var beginValid = function (_p3) {
										return snippetValid(
											A3(_elm_lang$core$Basics$flip, _user$project$InterfaceModel$snippet, code, _p3));
									}(
										{start: sr.start, end: r.start});
									var endValid = function (_p4) {
										return snippetValid(
											A3(_elm_lang$core$Basics$flip, _user$project$InterfaceModel$snippet, code, _p4));
									}(
										{start: r.end, end: sr.end});
									return beginValid && endValid;
								} else {
									return false;
								}
							})
					};
				default:
					return {ctor: '_Tuple2', _0: _elm_lang$core$List$foldl, _1: _user$project$InterfaceModel$isSubsetRange};
			}
		}();
		var fold = _p1._0;
		var matcher = _p1._1;
		return A2(
			fold,
			F2(
				function (_p5, previousVal) {
					var _p6 = _p5;
					return A2(matcher, selectedRange, _p6._0) ? _elm_lang$core$Maybe$Just(_p6._1) : previousVal;
				}),
			_elm_lang$core$Maybe$Nothing);
	});
var _user$project$InterfaceModel$needsRun = function (m) {
	return !_elm_lang$core$Native_Utils.eq(m.code, m.lastRunCode);
};
var _user$project$InterfaceModel$iconNames = _elm_lang$core$Dict$keys(_user$project$DefaultIconTheme$icons);
var _user$project$InterfaceModel$blankTemplate = 'BLANK';
var _user$project$InterfaceModel$bufferName = '';
var _user$project$InterfaceModel$bufferFilename = function (model) {
	return {
		name: _user$project$InterfaceModel$bufferName,
		extension: _user$project$Syntax$sourceExtension(model.syntax)
	};
};
var _user$project$InterfaceModel$prettyFilename = F2(
	function (includeExtension, model) {
		if (_elm_lang$core$Native_Utils.eq(model.filename.name, _user$project$InterfaceModel$bufferName)) {
			var prettyTemplate = function () {
				var _p7 = model.lastSelectedTemplate;
				if (_p7.ctor === 'Just') {
					var _p8 = _p7._0;
					return (!_elm_lang$core$Native_Utils.eq(_p8, _user$project$InterfaceModel$blankTemplate)) ? A2(
						_elm_lang$core$Basics_ops['++'],
						' (',
						A2(_elm_lang$core$Basics_ops['++'], _p8, ')')) : '';
				} else {
					return '';
				}
			}();
			return A2(_elm_lang$core$Basics_ops['++'], 'Untitled', prettyTemplate);
		} else {
			var suffix = function () {
				var _p9 = includeExtension;
				if (_p9.ctor === 'WithExtension') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'.',
						_user$project$File$fileExtensionToString(model.filename.extension));
				} else {
					return '';
				}
			}();
			return A2(_elm_lang$core$Basics_ops['++'], model.filename.name, suffix);
		}
	});
var _user$project$InterfaceModel$maybeRenamingPId = function (modelRenamingInOutput) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (_p10) {
			var _p11 = _p10;
			return _p11._0;
		},
		modelRenamingInOutput);
};
var _user$project$InterfaceModel$prependDescription = F2(
	function (newPrefix, synthesisResult) {
		return _elm_lang$core$Native_Utils.update(
			synthesisResult,
			{
				description: A2(_elm_lang$core$Basics_ops['++'], newPrefix, synthesisResult.description)
			});
	});
var _user$project$InterfaceModel$codeToShow = function (model) {
	var _p12 = model.preview;
	if (_p12.ctor === 'Just') {
		return _p12._0._0;
	} else {
		return model.code;
	}
};
var _user$project$InterfaceModel$liveInfoToHighlights = F2(
	function (zoneKey, model) {
		var _p13 = model.outputMode;
		if (_p13.ctor === 'Live') {
			return A2(_user$project$Sync$yellowAndGrayHighlights, zoneKey, model.liveSyncInfo);
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$InterfaceModel$mkLive = F7(
	function (syntax, opts, slideNumber, movieNumber, movieTime, e, _p14) {
		var _p15 = _p14;
		return A2(
			_elm_lang$core$Result$andThen,
			function (slate) {
				return A2(
					_elm_lang$core$Result$andThen,
					function (liveInfo) {
						return _elm_lang$core$Result$Ok(liveInfo);
					},
					A3(
						_user$project$Sync$prepareLiveUpdates,
						opts,
						e,
						{ctor: '_Tuple2', _0: slate, _1: _p15._1}));
			},
			A6(_user$project$LangSvg$resolveToRootedIndexedTree, false, syntax, slideNumber, movieNumber, movieTime, _p15._0));
	});
var _user$project$InterfaceModel$slateAndCode = F2(
	function (old, _p16) {
		var _p17 = _p16;
		return A2(
			_elm_lang$core$Result$map,
			function (slate) {
				return {
					ctor: '_Tuple2',
					_0: slate,
					_1: A2(_user$project$Syntax$unparser, old.syntax, _p17._0)
				};
			},
			A6(_user$project$LangSvg$resolveToRootedIndexedTree, false, old.syntax, old.slideNumber, old.movieNumber, old.movieTime, _p17._1));
	});
var _user$project$InterfaceModel$runAndResolve_ = F2(
	function (model, exp) {
		var thunk = function (_p18) {
			var _p19 = _p18;
			return A2(
				_elm_lang$core$Result$andThen,
				function (_p20) {
					var _p21 = _p20;
					var _p24 = _p21._0;
					return A2(
						_elm_lang$core$Result$map,
						function (_p22) {
							var _p23 = _p22;
							return {ctor: '_Tuple4', _0: _p24, _1: _p21._1, _2: _p23._0, _3: _p23._1};
						},
						A2(
							_user$project$InterfaceModel$slateAndCode,
							model,
							{ctor: '_Tuple2', _0: exp, _1: _p24}));
				},
				A3(_user$project$Eval$run, model.showPreludeOffsets, model.syntax, exp));
		};
		return _user$project$Utils$unwrapNestedResult(
			_user$project$ImpureGoodies$crashToError(thunk));
	});
var _user$project$InterfaceModel$runAndResolveAtContext = F2(
	function (model, program) {
		var thunk = function (_p25) {
			var _p26 = _p25;
			var editingContext = _user$project$FocusedEditingContext$editingContextFromMarkers(program);
			return A2(
				_elm_lang$core$Result$andThen,
				function (_p27) {
					var _p28 = _p27;
					var _p31 = _p28._0._0;
					return A2(
						_elm_lang$core$Result$map,
						function (_p29) {
							var _p30 = _p29;
							return {ctor: '_Tuple5', _0: _p31, _1: _p28._0._1, _2: _p30._0, _3: _p30._1, _4: _p28._2};
						},
						A2(
							_user$project$InterfaceModel$slateAndCode,
							model,
							{ctor: '_Tuple2', _0: program, _1: _p31}));
				},
				A4(_user$project$FocusedEditingContext$evalAtContext, model.showPreludeOffsets, model.syntax, editingContext, program));
		};
		return _user$project$Utils$unwrapNestedResult(
			_user$project$ImpureGoodies$crashToError(thunk));
	});
var _user$project$InterfaceModel$runAndResolve = F2(
	function (model, exp) {
		return A2(
			_user$project$InterfaceModel$runAndResolve_,
			{showPreludeOffsets: model.showPreludeOffsets, movieNumber: model.movieNumber, movieTime: model.movieTime, slideNumber: model.slideNumber, syntax: model.syntax},
			exp);
	});
var _user$project$InterfaceModel$predicateImpossible = function (pred) {
	var _p32 = pred.value;
	switch (_p32.ctor) {
		case 'FullySatisfied':
			return false;
		case 'Satisfied':
			return false;
		case 'Possible':
			return false;
		default:
			return true;
	}
};
var _user$project$InterfaceModel$predicatePossible = function (pred) {
	var _p33 = pred.value;
	switch (_p33.ctor) {
		case 'FullySatisfied':
			return true;
		case 'Satisfied':
			return true;
		case 'Possible':
			return true;
		default:
			return false;
	}
};
var _user$project$InterfaceModel$predicateSatisfied = function (pred) {
	var _p34 = pred.value;
	switch (_p34.ctor) {
		case 'FullySatisfied':
			return true;
		case 'Satisfied':
			return true;
		case 'Possible':
			return false;
		default:
			return false;
	}
};
var _user$project$InterfaceModel$predicateFullySatisfied = function (pred) {
	var _p35 = pred.value;
	switch (_p35.ctor) {
		case 'FullySatisfied':
			return true;
		case 'Satisfied':
			return false;
		case 'Possible':
			return false;
		default:
			return false;
	}
};
var _user$project$InterfaceModel$importCodeFileInputId = 'import-code-file-input';
var _user$project$InterfaceModel$configurationPanelShown = function (model) {
	return !_elm_lang$core$Native_Utils.eq(model.selectedDeuceTool, _elm_lang$core$Maybe$Nothing);
};
var _user$project$InterfaceModel$deuceRightClickMenuShown = function (model) {
	return !_elm_lang$core$Native_Utils.eq(model.deuceRightClickMenuMode, _elm_lang$core$Maybe$Nothing);
};
var _user$project$InterfaceModel$deuceActive = function (model) {
	var shiftDown = A2(_elm_lang$core$List$member, _user$project$Keys$keyShift, model.keysDown);
	return model.codeClean && _user$project$Utils$or(
		{
			ctor: '::',
			_0: _user$project$Utils$and(
				{
					ctor: '::',
					_0: model.enableDeuceBoxSelection,
					_1: {
						ctor: '::',
						_0: !_user$project$InterfaceModel$deuceRightClickMenuShown(model),
						_1: {
							ctor: '::',
							_0: shiftDown,
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$InterfaceModel$configurationPanelShown(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$InterfaceModel$deucePopupPanelShown = function (model) {
	return _user$project$Utils$and(
		{
			ctor: '::',
			_0: model.enableDeuceBoxSelection,
			_1: {
				ctor: '::',
				_0: !_user$project$InterfaceModel$noCodeWidgetsSelected(model),
				_1: {
					ctor: '::',
					_0: !_user$project$InterfaceModel$deuceRightClickMenuShown(model),
					_1: {
						ctor: '::',
						_0: !_user$project$InterfaceModel$configurationPanelShown(model),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$InterfaceModel$hideDeuceRightClickMenu = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{deuceRightClickMenuMode: _elm_lang$core$Maybe$Nothing});
};
var _user$project$InterfaceModel$anyDialogShown = function (_p36) {
	return !_elm_lang$core$Set$isEmpty(
		function (_) {
			return _.dialogBoxes;
		}(_p36));
};
var _user$project$InterfaceModel$setAllUpdated = function (model) {
	var old = model;
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			enableTextEdits: _user$project$Updatable$setUpdated(old.enableTextEdits)
		});
};
var _user$project$InterfaceModel$initialLayoutOffsets = function () {
	var init = {dx: 0, dy: 0};
	return {
		codeBox: init,
		canvas: init,
		fileToolBox: init,
		codeToolBox: init,
		drawToolBox: init,
		attributeToolBox: init,
		blobToolBox: init,
		moreBlobToolBox: init,
		outputToolBox: init,
		animationToolBox: init,
		textToolBox: init,
		deuceToolBox: {pinned: false, offsets: init},
		synthesisResultsSelectBox: init
	};
}();
var _user$project$InterfaceModel$resultExp = function (_p37) {
	var _p38 = _p37;
	return _p38._0.exp;
};
var _user$project$InterfaceModel$resultDescription = function (_p39) {
	var _p40 = _p39;
	return _p40._0.description;
};
var _user$project$InterfaceModel$isResultSafe = function (_p41) {
	var _p42 = _p41;
	return _p42._0.isSafe;
};
var _user$project$InterfaceModel$synthesisResultsNotEmpty = F2(
	function (model, resultsKey) {
		return function (_p43) {
			return !_elm_lang$core$List$isEmpty(_p43);
		}(
			A3(
				_user$project$Utils$getWithDefault,
				resultsKey,
				{ctor: '[]'},
				model.synthesisResultsDict));
	});
var _user$project$InterfaceModel$filterSnapVals = function (snaps) {
	filterSnapVals:
	while (true) {
		var _p44 = snaps;
		if (_p44.ctor === '::') {
			if (_p44._0.ctor === 'SnapVal') {
				return {
					ctor: '::',
					_0: _p44._0._0,
					_1: _user$project$InterfaceModel$filterSnapVals(_p44._1)
				};
			} else {
				var _v23 = _p44._1;
				snaps = _v23;
				continue filterSnapVals;
			}
		} else {
			return {ctor: '[]'};
		}
	}
};
var _user$project$InterfaceModel$snapValsOfShapeBeingDrawn = function (shapeBeingDrawn) {
	var _p45 = shapeBeingDrawn;
	switch (_p45.ctor) {
		case 'DrawJustStarted':
			return {ctor: '[]'};
		case 'TwoPoints':
			return _user$project$InterfaceModel$filterSnapVals(
				{
					ctor: '::',
					_0: _p45._0._0._1,
					_1: {
						ctor: '::',
						_0: _p45._0._1._1,
						_1: {
							ctor: '::',
							_0: _p45._1._0._1,
							_1: {
								ctor: '::',
								_0: _p45._1._1._1,
								_1: {ctor: '[]'}
							}
						}
					}
				});
		case 'PolyPoints':
			return {ctor: '[]'};
		case 'PathPoints':
			return {ctor: '[]'};
		default:
			return _user$project$InterfaceModel$filterSnapVals(
				{
					ctor: '::',
					_0: _p45._0._0._1,
					_1: {
						ctor: '::',
						_0: _p45._0._1._1,
						_1: {
							ctor: '::',
							_0: _p45._1,
							_1: {ctor: '[]'}
						}
					}
				});
	}
};
var _user$project$InterfaceModel$isShapeBeingDrawnSnappingToVal = F2(
	function (model, val) {
		var _p46 = model.mouseMode;
		if (_p46.ctor === 'MouseDrawNew') {
			return A2(
				_elm_lang$core$List$any,
				function (valOfShapeBeingDraw) {
					return _elm_lang$core$Native_Utils.eq(
						_user$project$Lang$valToNum(val),
						_user$project$Lang$valToNum(valOfShapeBeingDraw)) && _elm_lang$core$Native_Utils.eq(
						_user$project$Lang$valEId(val),
						_user$project$Lang$valEId(valOfShapeBeingDraw));
				},
				_user$project$InterfaceModel$snapValsOfShapeBeingDrawn(_p46._0));
		} else {
			return false;
		}
	});
var _user$project$InterfaceModel$isShapeBeingDrawnSnappingToPoint = F3(
	function (model, xVal, yVal) {
		return A2(_user$project$InterfaceModel$isShapeBeingDrawnSnappingToVal, model, xVal) && A2(_user$project$InterfaceModel$isShapeBeingDrawnSnappingToVal, model, yVal);
	});
var _user$project$InterfaceModel$isMouseDown = function (model) {
	var _p47 = model.mouseState;
	if ((_p47.ctor === '_Tuple3') && (_p47._0.ctor === 'Just')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$InterfaceModel$mousePosition = function (model) {
	return _user$project$Utils$snd3(model.mouseState);
};
var _user$project$InterfaceModel$showDeuceRightClickMenu = F4(
	function (offsetX, offsetY, menuMode, model) {
		var oldPopupPanelPositions = model.popupPanelPositions;
		var mousePos = _user$project$InterfaceModel$mousePosition(model);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				deuceRightClickMenuMode: _elm_lang$core$Maybe$Just(menuMode),
				popupPanelPositions: _elm_lang$core$Native_Utils.update(
					oldPopupPanelPositions,
					{
						deuceRightClickMenu: {ctor: '_Tuple2', _0: mousePos.x + offsetX, _1: mousePos.y + offsetY}
					})
			});
	});
var _user$project$InterfaceModel$TrackedValues = F2(
	function (a, b) {
		return {code: a, selectedDeuceWidgets: b};
	});
var _user$project$InterfaceModel$ViewState = function (a) {
	return {menuActive: a};
};
var _user$project$InterfaceModel$PopupPanelPositions = F4(
	function (a, b, c, d) {
		return {deuce: a, editCode: b, deuceRightClickMenu: c, autoOutputTools: d};
	});
var _user$project$InterfaceModel$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (_1) {
																											return function (_2) {
																												return function (_3) {
																													return function (_4) {
																														return function (_5) {
																															return function (_6) {
																																return function (_7) {
																																	return function (_8) {
																																		return function (_9) {
																																			return function (_10) {
																																				return function (_11) {
																																					return function (_12) {
																																						return function (_13) {
																																							return function (_14) {
																																								return function (_15) {
																																									return function (_16) {
																																										return function (_17) {
																																											return function (_18) {
																																												return function (_19) {
																																													return function (_20) {
																																														return function (_21) {
																																															return function (_22) {
																																																return function (_23) {
																																																	return function (_24) {
																																																		return function (_25) {
																																																			return function (_26) {
																																																				return function (_27) {
																																																					return function (_28) {
																																																						return function (_29) {
																																																							return function (_30) {
																																																								return function (_31) {
																																																									return function (_32) {
																																																										return function (_33) {
																																																											return function (_34) {
																																																												return function (_35) {
																																																													return function (_36) {
																																																														return function (_37) {
																																																															return function (_38) {
																																																																return function (_39) {
																																																																	return function (_40) {
																																																																		return function (_41) {
																																																																			return function (_42) {
																																																																				return function (_43) {
																																																																					return function (_44) {
																																																																						return function (_45) {
																																																																							return function (_46) {
																																																																								return function (_47) {
																																																																									return function (_48) {
																																																																										return function (_49) {
																																																																											return function (_50) {
																																																																												return function (_51) {
																																																																													return function (_52) {
																																																																														return function (_53) {
																																																																															return function (_54) {
																																																																																return function (_55) {
																																																																																	return function (_56) {
																																																																																		return function (_57) {
																																																																																			return function (_58) {
																																																																																				return function (_59) {
																																																																																					return function (_60) {
																																																																																						return function (_61) {
																																																																																							return function (_62) {
																																																																																								return function (_63) {
																																																																																									return function (_64) {
																																																																																										return function (_65) {
																																																																																											return function (_66) {
																																																																																												return function (_67) {
																																																																																													return {code: a, lastRunCode: b, runFailuresInARowCount: c, codeClean: d, preview: e, history: f, inputExp: g, inputVal: h, maybeEnv: i, contextInputVals: j, slideNumber: k, slideCount: l, movieNumber: m, movieCount: n, movieTime: o, movieDuration: p, movieContinue: q, runAnimation: r, slate: s, widgets: t, widgetBounds: u, idToTypeAndContextThunk: v, editingContext: w, liveSyncInfo: x, liveSyncDelay: y, outputMode: z, mouseMode: _1, dimensions: _2, mouseState: _3, syncOptions: _4, caption: _5, showGhosts: _6, showPreludeOffsets: _7, localSaves: _8, startup: _9, codeBoxInfo: _10, outputCanvasInfo: _11, basicCodeBox: _12, errorBox: _13, genSymCount: _14, tool: _15, hoveredShapes: _16, hoveredCrosshairs: _17, hoveredBoundsWidgets: _18, selectedShapes: _19, selectedFeatures: _20, selectedBlobs: _21, keysDown: _22, autoSynthesis: _23, solutionsCache: _24, synthesisResultsDict: _25, hoveredSynthesisResultPathByIndices: _26, renamingInOutput: _27, randomColor: _28, drawableFunctions: _29, layoutOffsets: _30, needsSave: _31, lastSaveState: _32, autosave: _33, filename: _34, fileIndex: _35, dialogBoxes: _36, filenameInput: _37, fileToDelete: _38, pendingFileOperation: _39, fileOperationConfirmed: _40, icons: _41, showAllDeuceWidgets: _42, hoveringCodeBox: _43, deuceState: _44, deuceToolsAndResults: _45, deuceToolResultPreviews: _46, selectedDeuceTool: _47, showOnlyBasicTools: _48, viewState: _49, popupPanelPositions: _50, deuceRightClickMenuMode: _51, enableDeuceBoxSelection: _52, enableDeuceTextSelection: _53, codeToolsMenuMode: _54, textSelectMode: _55, enableTextEdits: _56, allowMultipleTargetPositions: _57, mainResizerX: _58, savedSelections: _59, deucePopupPanelAbove: _60, colorScheme: _61, pendingGiveUpMsg: _62, giveUpConfirmed: _63, lastSelectedTemplate: _64, valueEditorString: _65, syntax: _66, extraMenuAmount: _67};
																																																																																												};
																																																																																											};
																																																																																										};
																																																																																									};
																																																																																								};
																																																																																							};
																																																																																						};
																																																																																					};
																																																																																				};
																																																																																			};
																																																																																		};
																																																																																	};
																																																																																};
																																																																															};
																																																																														};
																																																																													};
																																																																												};
																																																																											};
																																																																										};
																																																																									};
																																																																								};
																																																																							};
																																																																						};
																																																																					};
																																																																				};
																																																																			};
																																																																		};
																																																																	};
																																																																};
																																																															};
																																																														};
																																																													};
																																																												};
																																																											};
																																																										};
																																																									};
																																																								};
																																																							};
																																																						};
																																																					};
																																																				};
																																																			};
																																																		};
																																																	};
																																																};
																																															};
																																														};
																																													};
																																												};
																																											};
																																										};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$InterfaceModel$CodeBoxInfo = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return {cursorPos: a, selections: b, highlights: c, annotations: d, tooltips: e, fontSize: f, lineHeight: g, characterWidth: h, offsetLeft: i, offsetHeight: j, gutterWidth: k, firstVisibleRow: l, lastVisibleRow: m, marginTopOffset: n, marginLeftOffset: o, scrollerTop: p, scrollerLeft: q, scrollerWidth: r, scrollerHeight: s, contentLeft: t, scrollTop: u, scrollLeft: v};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$InterfaceModel$OutputCanvasInfo = F2(
	function (a, b) {
		return {scrollTop: a, scrollLeft: b};
	});
var _user$project$InterfaceModel$AceCodeBoxInfo = F3(
	function (a, b, c) {
		return {oldCode: a, code: b, codeBoxInfo: c};
	});
var _user$project$InterfaceModel$Offsets = F2(
	function (a, b) {
		return {dx: a, dy: b};
	});
var _user$project$InterfaceModel$LayoutOffsets = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {codeBox: a, canvas: b, fileToolBox: c, codeToolBox: d, drawToolBox: e, attributeToolBox: f, blobToolBox: g, moreBlobToolBox: h, outputToolBox: i, animationToolBox: j, textToolBox: k, deuceToolBox: l, synthesisResultsSelectBox: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$InterfaceModel$Predicate = F2(
	function (a, b) {
		return {description: a, value: b};
	});
var _user$project$InterfaceModel$DeuceTool = F4(
	function (a, b, c, d) {
		return {name: a, func: b, reqs: c, id: d};
	});
var _user$project$InterfaceModel$Word = {ctor: 'Word'};
var _user$project$InterfaceModel$codeObjectFromSelection = F2(
	function (allowSingleSelection, model) {
		var _p48 = model.codeBoxInfo.selections;
		if ((_p48.ctor === '::') && (_p48._1.ctor === '[]')) {
			var _p52 = _p48._0;
			var textSelectMode = (allowSingleSelection && _elm_lang$core$Native_Utils.eq(_p52.start, _p52.end)) ? _user$project$InterfaceModel$Word : model.textSelectMode;
			var theFilter = function (codeObject) {
				var word = _user$project$Lang$isWord(codeObject);
				var textSelectable = _user$project$Lang$isTextSelectable(codeObject);
				var notDef = function () {
					var _p49 = codeObject;
					if (_p49.ctor === 'E') {
						var _p50 = _p49._0.val.e__;
						if ((_p50.ctor === 'ELet') && (_p50._1.ctor === 'Def')) {
							return false;
						} else {
							return true;
						}
					} else {
						return true;
					}
				}();
				var activeFilters = A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: notDef,
						_1: {
							ctor: '::',
							_0: textSelectable,
							_1: {ctor: '[]'}
						}
					},
					_elm_lang$core$Native_Utils.eq(textSelectMode, _user$project$InterfaceModel$Word) ? {
						ctor: '::',
						_0: word,
						_1: {ctor: '[]'}
					} : {ctor: '[]'});
				return _user$project$Utils$and(activeFilters);
			};
			return A4(
				_user$project$InterfaceModel$matchingRange,
				textSelectMode,
				model.code,
				_p52,
				A2(
					_elm_lang$core$List$map,
					function (codeObject) {
						return {
							ctor: '_Tuple2',
							_0: function (_p51) {
								return _user$project$InterfaceModel$rangeFromInfo(
									_user$project$Lang$extractInfoFromCodeObject(_p51));
							}(codeObject),
							_1: codeObject
						};
					},
					A2(
						_elm_lang$core$List$filter,
						theFilter,
						_user$project$Lang$flattenToCodeObjects(
							_user$project$Lang$E(model.inputExp)))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$InterfaceModel$SubsetExtra = {ctor: 'SubsetExtra'};
var _user$project$InterfaceModel$Subset = {ctor: 'Subset'};
var _user$project$InterfaceModel$Superset = {ctor: 'Superset'};
var _user$project$InterfaceModel$Strict = {ctor: 'Strict'};
var _user$project$InterfaceModel$ShowPossible = {ctor: 'ShowPossible'};
var _user$project$InterfaceModel$Dark = {ctor: 'Dark'};
var _user$project$InterfaceModel$Light = {ctor: 'Light'};
var _user$project$InterfaceModel$initColorScheme = _user$project$InterfaceModel$Light;
var _user$project$InterfaceModel$CTDisabled = {ctor: 'CTDisabled'};
var _user$project$InterfaceModel$CTActive = {ctor: 'CTActive'};
var _user$project$InterfaceModel$CTAll = {ctor: 'CTAll'};
var _user$project$InterfaceModel$PrintScopeGraph = function (a) {
	return {ctor: 'PrintScopeGraph', _0: a};
};
var _user$project$InterfaceModel$ShowValue = {ctor: 'ShowValue'};
var _user$project$InterfaceModel$Print = function (a) {
	return {ctor: 'Print', _0: a};
};
var _user$project$InterfaceModel$Live = {ctor: 'Live'};
var _user$project$InterfaceModel$MouseDownInCodebox = function (a) {
	return {ctor: 'MouseDownInCodebox', _0: a};
};
var _user$project$InterfaceModel$MouseDrawNew = function (a) {
	return {ctor: 'MouseDrawNew', _0: a};
};
var _user$project$InterfaceModel$MouseDragSelect = F4(
	function (a, b, c, d) {
		return {ctor: 'MouseDragSelect', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$InterfaceModel$MouseDragZone = F2(
	function (a, b) {
		return {ctor: 'MouseDragZone', _0: a, _1: b};
	});
var _user$project$InterfaceModel$MouseDragLayoutWidget = function (a) {
	return {ctor: 'MouseDragLayoutWidget', _0: a};
};
var _user$project$InterfaceModel$MouseDrag = function (a) {
	return {ctor: 'MouseDrag', _0: a};
};
var _user$project$InterfaceModel$MouseNothing = {ctor: 'MouseNothing'};
var _user$project$InterfaceModel$PointWithProvenance = F2(
	function (a, b) {
		return {ctor: 'PointWithProvenance', _0: a, _1: b};
	});
var _user$project$InterfaceModel$SnapVal = function (a) {
	return {ctor: 'SnapVal', _0: a};
};
var _user$project$InterfaceModel$NoSnap = {ctor: 'NoSnap'};
var _user$project$InterfaceModel$Offset1D = F3(
	function (a, b, c) {
		return {ctor: 'Offset1D', _0: a, _1: b, _2: c};
	});
var _user$project$InterfaceModel$PathPoints = function (a) {
	return {ctor: 'PathPoints', _0: a};
};
var _user$project$InterfaceModel$PolyPoints = function (a) {
	return {ctor: 'PolyPoints', _0: a};
};
var _user$project$InterfaceModel$TwoPoints = F2(
	function (a, b) {
		return {ctor: 'TwoPoints', _0: a, _1: b};
	});
var _user$project$InterfaceModel$DrawJustStarted = function (a) {
	return {ctor: 'DrawJustStarted', _0: a};
};
var _user$project$InterfaceModel$Function = function (a) {
	return {ctor: 'Function', _0: a};
};
var _user$project$InterfaceModel$HelperLine = {ctor: 'HelperLine'};
var _user$project$InterfaceModel$Path = {ctor: 'Path'};
var _user$project$InterfaceModel$Poly = {ctor: 'Poly'};
var _user$project$InterfaceModel$Text = {ctor: 'Text'};
var _user$project$InterfaceModel$PointOrOffset = {ctor: 'PointOrOffset'};
var _user$project$InterfaceModel$Cursor = {ctor: 'Cursor'};
var _user$project$InterfaceModel$initModel = function () {
	var _p53 = A2(_user$project$Utils$find_, _user$project$ExamplesGenerated$list, _user$project$InterfaceModel$initTemplate);
	var f = _p53._1;
	var _p54 = f(
		{ctor: '_Tuple0'});
	var e = _p54.e;
	var v = _p54.v;
	var ws = _p54.ws;
	var unwrap = _user$project$Utils$fromOk('generating initModel');
	var _p55 = unwrap(
		A6(_user$project$LangSvg$fetchEverything, false, _user$project$Syntax$Little, 1, 1, 0.0, v));
	var slideCount = _p55._0;
	var movieCount = _p55._1;
	var movieDuration = _p55._2;
	var movieContinue = _p55._3;
	var slate = _p55._4;
	var liveSyncInfo = unwrap(
		A7(
			_user$project$InterfaceModel$mkLive,
			_user$project$Syntax$Little,
			_user$project$Sync$defaultOptions,
			1,
			1,
			0.0,
			e,
			{ctor: '_Tuple2', _0: v, _1: ws}));
	var code = _user$project$LangUnparser$unparse(e);
	return {
		code: code,
		lastRunCode: code,
		runFailuresInARowCount: 0,
		codeClean: true,
		preview: _elm_lang$core$Maybe$Nothing,
		history: _user$project$History$begin(
			{
				code: code,
				selectedDeuceWidgets: {ctor: '[]'}
			}),
		inputExp: e,
		inputVal: v,
		maybeEnv: _elm_lang$core$Maybe$Nothing,
		contextInputVals: {ctor: '[]'},
		slideNumber: 1,
		slideCount: slideCount,
		movieNumber: 1,
		movieCount: movieCount,
		movieTime: 0.0,
		movieDuration: movieDuration,
		movieContinue: movieContinue,
		runAnimation: true,
		slate: slate,
		widgets: ws,
		widgetBounds: A2(_elm_lang$core$List$map, _user$project$ShapeWidgets$maybeWidgetInitialBounds, ws),
		idToTypeAndContextThunk: _elm_lang$core$Dict$empty,
		editingContext: _elm_lang$core$Maybe$Nothing,
		liveSyncInfo: liveSyncInfo,
		liveSyncDelay: false,
		outputMode: _user$project$InterfaceModel$Live,
		mouseMode: _user$project$InterfaceModel$MouseNothing,
		dimensions: {width: 1000, height: 800},
		mouseState: {
			ctor: '_Tuple3',
			_0: _elm_lang$core$Maybe$Nothing,
			_1: {x: 0, y: 0},
			_2: _elm_lang$core$Maybe$Nothing
		},
		syncOptions: _user$project$Sync$defaultOptions,
		caption: _elm_lang$core$Maybe$Nothing,
		showGhosts: true,
		showPreludeOffsets: false,
		localSaves: {ctor: '[]'},
		startup: true,
		codeBoxInfo: {
			cursorPos: {
				row: _elm_lang$core$Basics$round(0),
				column: _elm_lang$core$Basics$round(0)
			},
			selections: {ctor: '[]'},
			highlights: {ctor: '[]'},
			annotations: {ctor: '[]'},
			tooltips: {ctor: '[]'},
			fontSize: 16,
			characterWidth: 10.0,
			lineHeight: 20.0,
			offsetLeft: 10.0,
			offsetHeight: 10.0,
			gutterWidth: 50.0,
			firstVisibleRow: 0,
			lastVisibleRow: 10,
			marginTopOffset: 0.0,
			marginLeftOffset: 0.0,
			scrollerTop: 0.0,
			scrollerLeft: 0.0,
			scrollerWidth: 0.0,
			scrollerHeight: 0.0,
			contentLeft: 0.0,
			scrollLeft: 0.0,
			scrollTop: 0.0
		},
		outputCanvasInfo: {scrollLeft: 0.0, scrollTop: 0.0},
		basicCodeBox: false,
		errorBox: _elm_lang$core$Maybe$Nothing,
		genSymCount: 1,
		tool: _user$project$InterfaceModel$Cursor,
		hoveredShapes: _elm_lang$core$Set$empty,
		hoveredCrosshairs: _elm_lang$core$Set$empty,
		hoveredBoundsWidgets: {ctor: '[]'},
		selectedShapes: {ctor: '[]'},
		selectedFeatures: {ctor: '[]'},
		selectedBlobs: _elm_lang$core$Dict$empty,
		keysDown: {ctor: '[]'},
		autoSynthesis: false,
		solutionsCache: {eqnSystemSolutions: _elm_lang$core$Dict$empty, simplifications: _elm_lang$core$Dict$empty},
		synthesisResultsDict: _elm_lang$core$Dict$empty,
		hoveredSynthesisResultPathByIndices: {ctor: '[]'},
		renamingInOutput: _elm_lang$core$Maybe$Nothing,
		randomColor: 100,
		drawableFunctions: {ctor: '[]'},
		layoutOffsets: _user$project$InterfaceModel$initialLayoutOffsets,
		needsSave: false,
		lastSaveState: _elm_lang$core$Maybe$Nothing,
		autosave: false,
		filename: {name: '', extension: _user$project$File$ElmFile},
		fileIndex: {ctor: '[]'},
		dialogBoxes: _elm_lang$core$Set$empty,
		filenameInput: '',
		fileToDelete: {name: '', extension: _user$project$File$ElmFile},
		pendingFileOperation: _elm_lang$core$Maybe$Nothing,
		fileOperationConfirmed: false,
		icons: _elm_lang$core$Dict$empty,
		showAllDeuceWidgets: false,
		hoveringCodeBox: false,
		deuceState: _user$project$DeuceWidgets$emptyDeuceState,
		deuceToolsAndResults: {ctor: '[]'},
		deuceToolResultPreviews: _elm_lang$core$Dict$empty,
		selectedDeuceTool: _elm_lang$core$Maybe$Nothing,
		showOnlyBasicTools: true,
		viewState: {menuActive: false},
		popupPanelPositions: {
			deuce: {ctor: '_Tuple2', _0: 200, _1: 200},
			editCode: {ctor: '_Tuple2', _0: 400, _1: 400},
			deuceRightClickMenu: {ctor: '_Tuple2', _0: 400, _1: 400},
			autoOutputTools: {ctor: '_Tuple2', _0: 400, _1: 100}
		},
		deuceRightClickMenuMode: _elm_lang$core$Maybe$Nothing,
		enableDeuceBoxSelection: true,
		enableDeuceTextSelection: true,
		codeToolsMenuMode: _user$project$InterfaceModel$CTAll,
		textSelectMode: _user$project$InterfaceModel$SubsetExtra,
		enableTextEdits: function (_p56) {
			return _user$project$Updatable$setUpdated(
				_user$project$Updatable$create(_p56));
		}(true),
		allowMultipleTargetPositions: false,
		mainResizerX: _elm_lang$core$Maybe$Nothing,
		savedSelections: _elm_lang$core$Maybe$Nothing,
		deucePopupPanelAbove: true,
		colorScheme: _user$project$InterfaceModel$initColorScheme,
		pendingGiveUpMsg: _elm_lang$core$Maybe$Nothing,
		giveUpConfirmed: false,
		lastSelectedTemplate: _elm_lang$core$Maybe$Nothing,
		valueEditorString: _user$project$ValUnparser$strVal(v),
		syntax: _user$project$Syntax$Elm,
		extraMenuAmount: 0
	};
}();
var _user$project$InterfaceModel$LangError = function (a) {
	return {ctor: 'LangError', _0: a};
};
var _user$project$InterfaceModel$Hovering = function (a) {
	return {ctor: 'Hovering', _0: a};
};
var _user$project$InterfaceModel$RadialRepeat = {ctor: 'RadialRepeat'};
var _user$project$InterfaceModel$LinearRepeat = {ctor: 'LinearRepeat'};
var _user$project$InterfaceModel$HorizontalRepeat = {ctor: 'HorizontalRepeat'};
var _user$project$InterfaceModel$SynthesisResult = function (a) {
	return {ctor: 'SynthesisResult', _0: a};
};
var _user$project$InterfaceModel$synthesisResult = F2(
	function (description, exp) {
		return _user$project$InterfaceModel$SynthesisResult(
			{
				description: description,
				exp: exp,
				isSafe: true,
				sortKey: {ctor: '[]'},
				children: _elm_lang$core$Maybe$Nothing
			});
	});
var _user$project$InterfaceModel$oneSafeResult = function (newExp) {
	return _elm_lang$core$List$singleton(
		A2(_user$project$InterfaceModel$synthesisResult, 'NO DESCRIPTION B/C SELECTED AUTOMATICALLY', newExp));
};
var _user$project$InterfaceModel$mapResultSafe = F2(
	function (f, _p57) {
		var _p58 = _p57;
		var _p59 = _p58._0;
		return _user$project$InterfaceModel$SynthesisResult(
			_elm_lang$core$Native_Utils.update(
				_p59,
				{
					isSafe: f(_p59.isSafe)
				}));
	});
var _user$project$InterfaceModel$setResultSafe = F2(
	function (isSafe, synthesisResult) {
		return A2(
			_user$project$InterfaceModel$mapResultSafe,
			function (_p60) {
				return isSafe;
			},
			synthesisResult);
	});
var _user$project$InterfaceModel$mapResultDescription = F2(
	function (f, _p61) {
		var _p62 = _p61;
		var _p63 = _p62._0;
		return _user$project$InterfaceModel$SynthesisResult(
			_elm_lang$core$Native_Utils.update(
				_p63,
				{
					description: f(_p63.description)
				}));
	});
var _user$project$InterfaceModel$setResultDescription = F2(
	function (description, synthesisResult) {
		return A2(
			_user$project$InterfaceModel$mapResultDescription,
			_elm_lang$core$Basics$always(description),
			synthesisResult);
	});
var _user$project$InterfaceModel$setResultSortKey = F2(
	function (sortKey, _p64) {
		var _p65 = _p64;
		return _user$project$InterfaceModel$SynthesisResult(
			_elm_lang$core$Native_Utils.update(
				_p65._0,
				{sortKey: sortKey}));
	});
var _user$project$InterfaceModel$setResultExp = F2(
	function (exp, _p66) {
		var _p67 = _p66;
		return _user$project$InterfaceModel$SynthesisResult(
			_elm_lang$core$Native_Utils.update(
				_p67._0,
				{exp: exp}));
	});
var _user$project$InterfaceModel$Msg = F2(
	function (a, b) {
		return {ctor: 'Msg', _0: a, _1: b};
	});
var _user$project$InterfaceModel$WindowOnLoad = {ctor: 'WindowOnLoad'};
var _user$project$InterfaceModel$ImportCode = {ctor: 'ImportCode'};
var _user$project$InterfaceModel$AlertSave = {ctor: 'AlertSave'};
var _user$project$InterfaceModel$Open = {ctor: 'Open'};
var _user$project$InterfaceModel$SaveAs = {ctor: 'SaveAs'};
var _user$project$InterfaceModel$New = {ctor: 'New'};
var _user$project$InterfaceModel$dialogBoxes = A2(
	_user$project$Utils$mapi0,
	_elm_lang$core$Basics$identity,
	{
		ctor: '::',
		_0: _user$project$InterfaceModel$New,
		_1: {
			ctor: '::',
			_0: _user$project$InterfaceModel$SaveAs,
			_1: {
				ctor: '::',
				_0: _user$project$InterfaceModel$Open,
				_1: {
					ctor: '::',
					_0: _user$project$InterfaceModel$AlertSave,
					_1: {
						ctor: '::',
						_0: _user$project$InterfaceModel$ImportCode,
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$InterfaceModel$dbToInt = function (db) {
	var _p69 = A2(
		_user$project$Utils$findFirst,
		function (_p68) {
			return A2(
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					}),
				db,
				_elm_lang$core$Tuple$second(_p68));
		},
		_user$project$InterfaceModel$dialogBoxes);
	if (_p69.ctor === 'Just') {
		return _p69._0._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'InterfaceModel',
			{
				start: {line: 486, column: 3},
				end: {line: 488, column: 79}
			},
			_p69)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Undefined Dialog Box Type: ',
				_elm_lang$core$Basics$toString(db)));
	}
};
var _user$project$InterfaceModel$openDialogBox = F2(
	function (db, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				dialogBoxes: A2(
					_elm_lang$core$Set$insert,
					_user$project$InterfaceModel$dbToInt(db),
					model.dialogBoxes)
			});
	});
var _user$project$InterfaceModel$closeDialogBox = F2(
	function (db, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				dialogBoxes: A2(
					_elm_lang$core$Set$remove,
					_user$project$InterfaceModel$dbToInt(db),
					model.dialogBoxes)
			});
	});
var _user$project$InterfaceModel$cancelFileOperation = function (model) {
	return A2(
		_user$project$InterfaceModel$closeDialogBox,
		_user$project$InterfaceModel$AlertSave,
		_elm_lang$core$Native_Utils.update(
			model,
			{pendingFileOperation: _elm_lang$core$Maybe$Nothing, fileOperationConfirmed: false}));
};
var _user$project$InterfaceModel$closeAllDialogBoxes = function (model) {
	var noFileOpsModel = _user$project$InterfaceModel$cancelFileOperation(model);
	return _elm_lang$core$Native_Utils.update(
		noFileOpsModel,
		{dialogBoxes: _elm_lang$core$Set$empty});
};
var _user$project$InterfaceModel$isDialogBoxShowing = F2(
	function (db, model) {
		return A2(
			_elm_lang$core$Set$member,
			_user$project$InterfaceModel$dbToInt(db),
			model.dialogBoxes);
	});
var _user$project$InterfaceModel$intToDb = function (n) {
	var _p71 = A2(_user$project$Utils$maybeFind, n, _user$project$InterfaceModel$dialogBoxes);
	if (_p71.ctor === 'Just') {
		return _p71._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'InterfaceModel',
			{
				start: {line: 492, column: 3},
				end: {line: 494, column: 72}
			},
			_p71)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Undefined Dialog Box Id: ',
				_elm_lang$core$Basics$toString(n)));
	}
};
var _user$project$InterfaceModel$Impossible = {ctor: 'Impossible'};
var _user$project$InterfaceModel$Possible = {ctor: 'Possible'};
var _user$project$InterfaceModel$Satisfied = {ctor: 'Satisfied'};
var _user$project$InterfaceModel$FullySatisfied = {ctor: 'FullySatisfied'};
var _user$project$InterfaceModel$WithoutExtension = {ctor: 'WithoutExtension'};
var _user$project$InterfaceModel$WithExtension = {ctor: 'WithExtension'};

var _user$project$AceCodeBox$aceCodeBoxCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'aceCodeBoxCmd',
	function (v) {
		return {
			message: v.message,
			info: {
				oldCode: v.info.oldCode,
				code: v.info.code,
				codeBoxInfo: {
					cursorPos: {row: v.info.codeBoxInfo.cursorPos.row, column: v.info.codeBoxInfo.cursorPos.column},
					selections: _elm_lang$core$Native_List.toArray(v.info.codeBoxInfo.selections).map(
						function (v) {
							return {
								start: {row: v.start.row, column: v.start.column},
								end: {row: v.end.row, column: v.end.column}
							};
						}),
					highlights: _elm_lang$core$Native_List.toArray(v.info.codeBoxInfo.highlights).map(
						function (v) {
							return {
								range: {
									start: {row: v.range.start.row, column: v.range.start.column},
									end: {row: v.range.end.row, column: v.range.end.column}
								},
								color: v.color
							};
						}),
					annotations: _elm_lang$core$Native_List.toArray(v.info.codeBoxInfo.annotations).map(
						function (v) {
							return {row: v.row, type_: v.type_, text: v.text};
						}),
					tooltips: _elm_lang$core$Native_List.toArray(v.info.codeBoxInfo.tooltips).map(
						function (v) {
							return {row: v.row, col: v.col, text: v.text};
						}),
					fontSize: v.info.codeBoxInfo.fontSize,
					lineHeight: v.info.codeBoxInfo.lineHeight,
					characterWidth: v.info.codeBoxInfo.characterWidth,
					offsetLeft: v.info.codeBoxInfo.offsetLeft,
					offsetHeight: v.info.codeBoxInfo.offsetHeight,
					gutterWidth: v.info.codeBoxInfo.gutterWidth,
					firstVisibleRow: v.info.codeBoxInfo.firstVisibleRow,
					lastVisibleRow: v.info.codeBoxInfo.lastVisibleRow,
					marginTopOffset: v.info.codeBoxInfo.marginTopOffset,
					marginLeftOffset: v.info.codeBoxInfo.marginLeftOffset,
					scrollerTop: v.info.codeBoxInfo.scrollerTop,
					scrollerLeft: v.info.codeBoxInfo.scrollerLeft,
					scrollerWidth: v.info.codeBoxInfo.scrollerWidth,
					scrollerHeight: v.info.codeBoxInfo.scrollerHeight,
					contentLeft: v.info.codeBoxInfo.contentLeft,
					scrollTop: v.info.codeBoxInfo.scrollTop,
					scrollLeft: v.info.codeBoxInfo.scrollLeft
				}
			}
		};
	});
var _user$project$AceCodeBox$sendCmd = F2(
	function (message, model) {
		return _user$project$AceCodeBox$aceCodeBoxCmd(
			{
				message: message,
				info: {
					oldCode: model.code,
					code: _user$project$InterfaceModel$codeToShow(model),
					codeBoxInfo: model.codeBoxInfo
				}
			});
	});
var _user$project$AceCodeBox$initializeAndDisplay = _user$project$AceCodeBox$sendCmd('initializeAndDisplay');
var _user$project$AceCodeBox$display = _user$project$AceCodeBox$sendCmd('display');
var _user$project$AceCodeBox$resize = _user$project$AceCodeBox$sendCmd('resize');
var _user$project$AceCodeBox$updateFontSize = _user$project$AceCodeBox$sendCmd('updateFontSize');
var _user$project$AceCodeBox$resetScroll = _user$project$AceCodeBox$sendCmd('resetScroll');
var _user$project$AceCodeBox$setReadOnly = _elm_lang$core$Native_Platform.outgoingPort(
	'setReadOnly',
	function (v) {
		return v;
	});
var _user$project$AceCodeBox$setSelections = _elm_lang$core$Native_Platform.outgoingPort(
	'setSelections',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return {
					start: {row: v.start.row, column: v.start.column},
					end: {row: v.end.row, column: v.end.column}
				};
			});
	});
var _user$project$AceCodeBox$receiveEditorState = _elm_lang$core$Native_Platform.incomingPort(
	'receiveEditorState',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (oldCode) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (code) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (codeBoxInfo) {
							return _elm_lang$core$Json_Decode$succeed(
								{oldCode: oldCode, code: code, codeBoxInfo: codeBoxInfo});
						},
						A2(
							_elm_lang$core$Json_Decode$field,
							'codeBoxInfo',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								function (cursorPos) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (selections) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (highlights) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (annotations) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (tooltips) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (fontSize) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				function (lineHeight) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						function (characterWidth) {
																							return A2(
																								_elm_lang$core$Json_Decode$andThen,
																								function (offsetLeft) {
																									return A2(
																										_elm_lang$core$Json_Decode$andThen,
																										function (offsetHeight) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												function (gutterWidth) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														function (firstVisibleRow) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (lastVisibleRow) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (marginTopOffset) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (marginLeftOffset) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						function (scrollerTop) {
																																							return A2(
																																								_elm_lang$core$Json_Decode$andThen,
																																								function (scrollerLeft) {
																																									return A2(
																																										_elm_lang$core$Json_Decode$andThen,
																																										function (scrollerWidth) {
																																											return A2(
																																												_elm_lang$core$Json_Decode$andThen,
																																												function (scrollerHeight) {
																																													return A2(
																																														_elm_lang$core$Json_Decode$andThen,
																																														function (contentLeft) {
																																															return A2(
																																																_elm_lang$core$Json_Decode$andThen,
																																																function (scrollTop) {
																																																	return A2(
																																																		_elm_lang$core$Json_Decode$andThen,
																																																		function (scrollLeft) {
																																																			return _elm_lang$core$Json_Decode$succeed(
																																																				{cursorPos: cursorPos, selections: selections, highlights: highlights, annotations: annotations, tooltips: tooltips, fontSize: fontSize, lineHeight: lineHeight, characterWidth: characterWidth, offsetLeft: offsetLeft, offsetHeight: offsetHeight, gutterWidth: gutterWidth, firstVisibleRow: firstVisibleRow, lastVisibleRow: lastVisibleRow, marginTopOffset: marginTopOffset, marginLeftOffset: marginLeftOffset, scrollerTop: scrollerTop, scrollerLeft: scrollerLeft, scrollerWidth: scrollerWidth, scrollerHeight: scrollerHeight, contentLeft: contentLeft, scrollTop: scrollTop, scrollLeft: scrollLeft});
																																																		},
																																																		A2(_elm_lang$core$Json_Decode$field, 'scrollLeft', _elm_lang$core$Json_Decode$float));
																																																},
																																																A2(_elm_lang$core$Json_Decode$field, 'scrollTop', _elm_lang$core$Json_Decode$float));
																																														},
																																														A2(_elm_lang$core$Json_Decode$field, 'contentLeft', _elm_lang$core$Json_Decode$float));
																																												},
																																												A2(_elm_lang$core$Json_Decode$field, 'scrollerHeight', _elm_lang$core$Json_Decode$float));
																																										},
																																										A2(_elm_lang$core$Json_Decode$field, 'scrollerWidth', _elm_lang$core$Json_Decode$float));
																																								},
																																								A2(_elm_lang$core$Json_Decode$field, 'scrollerLeft', _elm_lang$core$Json_Decode$float));
																																						},
																																						A2(_elm_lang$core$Json_Decode$field, 'scrollerTop', _elm_lang$core$Json_Decode$float));
																																				},
																																				A2(_elm_lang$core$Json_Decode$field, 'marginLeftOffset', _elm_lang$core$Json_Decode$float));
																																		},
																																		A2(_elm_lang$core$Json_Decode$field, 'marginTopOffset', _elm_lang$core$Json_Decode$float));
																																},
																																A2(_elm_lang$core$Json_Decode$field, 'lastVisibleRow', _elm_lang$core$Json_Decode$int));
																														},
																														A2(_elm_lang$core$Json_Decode$field, 'firstVisibleRow', _elm_lang$core$Json_Decode$int));
																												},
																												A2(_elm_lang$core$Json_Decode$field, 'gutterWidth', _elm_lang$core$Json_Decode$float));
																										},
																										A2(_elm_lang$core$Json_Decode$field, 'offsetHeight', _elm_lang$core$Json_Decode$float));
																								},
																								A2(_elm_lang$core$Json_Decode$field, 'offsetLeft', _elm_lang$core$Json_Decode$float));
																						},
																						A2(_elm_lang$core$Json_Decode$field, 'characterWidth', _elm_lang$core$Json_Decode$float));
																				},
																				A2(_elm_lang$core$Json_Decode$field, 'lineHeight', _elm_lang$core$Json_Decode$float));
																		},
																		A2(_elm_lang$core$Json_Decode$field, 'fontSize', _elm_lang$core$Json_Decode$int));
																},
																A2(
																	_elm_lang$core$Json_Decode$field,
																	'tooltips',
																	_elm_lang$core$Json_Decode$list(
																		A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (row) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (col) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (text) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{row: row, col: col, text: text});
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'text', _elm_lang$core$Json_Decode$string));
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'col', _elm_lang$core$Json_Decode$int));
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'row', _elm_lang$core$Json_Decode$int)))));
														},
														A2(
															_elm_lang$core$Json_Decode$field,
															'annotations',
															_elm_lang$core$Json_Decode$list(
																A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (row) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (type_) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (text) {
																						return _elm_lang$core$Json_Decode$succeed(
																							{row: row, type_: type_, text: text});
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'text', _elm_lang$core$Json_Decode$string));
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'type_', _elm_lang$core$Json_Decode$string));
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'row', _elm_lang$core$Json_Decode$int)))));
												},
												A2(
													_elm_lang$core$Json_Decode$field,
													'highlights',
													_elm_lang$core$Json_Decode$list(
														A2(
															_elm_lang$core$Json_Decode$andThen,
															function (range) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (color) {
																		return _elm_lang$core$Json_Decode$succeed(
																			{range: range, color: color});
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'color', _elm_lang$core$Json_Decode$string));
															},
															A2(
																_elm_lang$core$Json_Decode$field,
																'range',
																A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (start) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (end) {
																				return _elm_lang$core$Json_Decode$succeed(
																					{start: start, end: end});
																			},
																			A2(
																				_elm_lang$core$Json_Decode$field,
																				'end',
																				A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (row) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (column) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{row: row, column: column});
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'column', _elm_lang$core$Json_Decode$int));
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'row', _elm_lang$core$Json_Decode$int))));
																	},
																	A2(
																		_elm_lang$core$Json_Decode$field,
																		'start',
																		A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (row) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (column) {
																						return _elm_lang$core$Json_Decode$succeed(
																							{row: row, column: column});
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'column', _elm_lang$core$Json_Decode$int));
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'row', _elm_lang$core$Json_Decode$int)))))))));
										},
										A2(
											_elm_lang$core$Json_Decode$field,
											'selections',
											_elm_lang$core$Json_Decode$list(
												A2(
													_elm_lang$core$Json_Decode$andThen,
													function (start) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															function (end) {
																return _elm_lang$core$Json_Decode$succeed(
																	{start: start, end: end});
															},
															A2(
																_elm_lang$core$Json_Decode$field,
																'end',
																A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (row) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (column) {
																				return _elm_lang$core$Json_Decode$succeed(
																					{row: row, column: column});
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'column', _elm_lang$core$Json_Decode$int));
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'row', _elm_lang$core$Json_Decode$int))));
													},
													A2(
														_elm_lang$core$Json_Decode$field,
														'start',
														A2(
															_elm_lang$core$Json_Decode$andThen,
															function (row) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (column) {
																		return _elm_lang$core$Json_Decode$succeed(
																			{row: row, column: column});
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'column', _elm_lang$core$Json_Decode$int));
															},
															A2(_elm_lang$core$Json_Decode$field, 'row', _elm_lang$core$Json_Decode$int)))))));
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'cursorPos',
									A2(
										_elm_lang$core$Json_Decode$andThen,
										function (row) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (column) {
													return _elm_lang$core$Json_Decode$succeed(
														{row: row, column: column});
												},
												A2(_elm_lang$core$Json_Decode$field, 'column', _elm_lang$core$Json_Decode$int));
										},
										A2(_elm_lang$core$Json_Decode$field, 'row', _elm_lang$core$Json_Decode$int))))));
				},
				A2(_elm_lang$core$Json_Decode$field, 'code', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'oldCode', _elm_lang$core$Json_Decode$string)));
var _user$project$AceCodeBox$userHasTyped = _elm_lang$core$Native_Platform.incomingPort(
	'userHasTyped',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));
var _user$project$AceCodeBox$AceCodeBoxCmd = F2(
	function (a, b) {
		return {message: a, info: b};
	});

var _user$project$AnimationLoop$requestFrame = _elm_lang$core$Native_Platform.outgoingPort(
	'requestFrame',
	function (v) {
		return null;
	});
var _user$project$AnimationLoop$receiveFrame = _elm_lang$core$Native_Platform.incomingPort('receiveFrame', _elm_lang$core$Json_Decode$float);

var _user$project$Blobs$fromBlobExp = function (be) {
	var _p0 = be;
	if (_p0.ctor === 'OtherBlob') {
		return _p0._0;
	} else {
		return _p0._0;
	}
};
var _user$project$Blobs$fromMainExp = function (me) {
	var _p1 = me;
	switch (_p1.ctor) {
		case 'SvgConcat':
			return _p1._1(_p1._0);
		case 'Blobs':
			return _p1._1(_p1._0);
		default:
			return _p1._0;
	}
};
var _user$project$Blobs$fuseExp = function (_p2) {
	var _p3 = _p2;
	var recurse = function (defs) {
		var _p4 = defs;
		if (_p4.ctor === '[]') {
			return _user$project$Blobs$fromMainExp(_p3._1);
		} else {
			return _user$project$Lang$withDummyExpInfo(
				A9(
					_user$project$Lang$ELet,
					_p4._0._0,
					_user$project$Lang$Def,
					false,
					_p4._0._1,
					_user$project$Lang$space1,
					_p4._0._2,
					_user$project$Lang$space1,
					recurse(_p4._1),
					_p4._0._3));
		}
	};
	return recurse(_p3._0);
};
var _user$project$Blobs$OtherExp = function (a) {
	return {ctor: 'OtherExp', _0: a};
};
var _user$project$Blobs$Blobs = F2(
	function (a, b) {
		return {ctor: 'Blobs', _0: a, _1: b};
	});
var _user$project$Blobs$SvgConcat = F2(
	function (a, b) {
		return {ctor: 'SvgConcat', _0: a, _1: b};
	});
var _user$project$Blobs$maybeSvgConcat = function (main) {
	var _p5 = main.val.e__;
	if (((_p5.ctor === 'EApp') && (_p5._2.ctor === '::')) && (_p5._2._1.ctor === '[]')) {
		var _p13 = _p5._0;
		var _p12 = _p5._2._0;
		var _p11 = _p5._1;
		var _p6 = {ctor: '_Tuple2', _0: _p11.val.e__, _1: _p12.val.e__};
		if ((((((_p6.ctor === '_Tuple2') && (_p6._0.ctor === 'EVar')) && (_p6._0._1 === 'svg')) && (_p6._1.ctor === 'EApp')) && (_p6._1._2.ctor === '::')) && (_p6._1._2._1.ctor === '[]')) {
			var _p10 = _p6._1._1;
			var _p9 = _p6._1._2._0;
			var _p7 = {ctor: '_Tuple2', _0: _p10.val.e__, _1: _p9.val.e__};
			if (((((_p7.ctor === '_Tuple2') && (_p7._0.ctor === 'EVar')) && (_p7._0._1 === 'concat')) && (_p7._1.ctor === 'EList')) && (_p7._1._3.ctor === 'Nothing')) {
				var _p8 = _p7._1._1;
				var updateExpressionList = function (newList) {
					var e2New = A2(
						_user$project$Lang$replaceE__,
						_p9,
						A5(
							_user$project$Lang$EList,
							_p7._1._0,
							A2(
								_user$project$Utils$zip,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p8),
								newList),
							_p7._1._2,
							_elm_lang$core$Maybe$Nothing,
							_p7._1._4));
					var eAppConcatNew = A2(
						_user$project$Lang$replaceE__,
						_p12,
						A5(
							_user$project$Lang$EApp,
							_p6._1._0,
							_p10,
							{
								ctor: '::',
								_0: e2New,
								_1: {ctor: '[]'}
							},
							_p6._1._3,
							_p6._1._4));
					var mainNew = A2(
						_user$project$Lang$replaceE__,
						main,
						A5(
							_user$project$Lang$EApp,
							_p13,
							_p11,
							{
								ctor: '::',
								_0: eAppConcatNew,
								_1: {ctor: '[]'}
							},
							_p5._3,
							_p5._4));
					return _elm_lang$core$Native_Utils.eq(_p13.val, '') ? A2(_user$project$Lang$addPrecedingWhitespace, '\n\n', mainNew) : (_elm_lang$core$Native_Utils.eq(_p13.val, '\n') ? A2(_user$project$Lang$addPrecedingWhitespace, '\n', mainNew) : mainNew);
				};
				return _elm_lang$core$Maybe$Just(
					A2(
						_user$project$Blobs$SvgConcat,
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p8),
						updateExpressionList));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Blobs$NiceBlob = F2(
	function (a, b) {
		return {ctor: 'NiceBlob', _0: a, _1: b};
	});
var _user$project$Blobs$OtherBlob = function (a) {
	return {ctor: 'OtherBlob', _0: a};
};
var _user$project$Blobs$WithAnchorBlob = function (a) {
	return {ctor: 'WithAnchorBlob', _0: a};
};
var _user$project$Blobs$withAnchorBlob = F2(
	function (e, tuple) {
		return A2(
			_user$project$Blobs$NiceBlob,
			e,
			_user$project$Blobs$WithAnchorBlob(tuple));
	});
var _user$project$Blobs$WithBoundsBlob = function (a) {
	return {ctor: 'WithBoundsBlob', _0: a};
};
var _user$project$Blobs$withBoundsBlob = F2(
	function (e, tuple) {
		return A2(
			_user$project$Blobs$NiceBlob,
			e,
			_user$project$Blobs$WithBoundsBlob(tuple));
	});
var _user$project$Blobs$CallBlob = function (a) {
	return {ctor: 'CallBlob', _0: a};
};
var _user$project$Blobs$callBlob = F2(
	function (e, tuple) {
		return A2(
			_user$project$Blobs$NiceBlob,
			e,
			_user$project$Blobs$CallBlob(tuple));
	});
var _user$project$Blobs$VarBlob = function (a) {
	return {ctor: 'VarBlob', _0: a};
};
var _user$project$Blobs$varBlob = F2(
	function (e, x) {
		return A2(
			_user$project$Blobs$NiceBlob,
			e,
			_user$project$Blobs$VarBlob(x));
	});
var _user$project$Blobs$toBlobExp = function (e) {
	var _p14 = e.val.e__;
	switch (_p14.ctor) {
		case 'EVar':
			return A2(_user$project$Blobs$varBlob, e, _p14._1);
		case 'EApp':
			if (((_p14._2.ctor === '::') && (_p14._2._1.ctor === '::')) && (_p14._2._1._1.ctor === '[]')) {
				var _p24 = _p14._2._0;
				var _p15 = _p14._1.val.e__;
				if (_p15.ctor === 'EVar') {
					var _p23 = _p15._1;
					var _p16 = _p14._2._1._0.val.e__;
					switch (_p16.ctor) {
						case 'EVar':
							var _p18 = _p16._1;
							var _p17 = _p23;
							switch (_p17) {
								case 'withBounds':
									return A2(
										_user$project$Blobs$NiceBlob,
										e,
										_user$project$Blobs$WithBoundsBlob(
											{
												ctor: '_Tuple3',
												_0: _p24,
												_1: _p18,
												_2: {ctor: '[]'}
											}));
								case 'withAnchor':
									return A2(
										_user$project$Blobs$NiceBlob,
										e,
										_user$project$Blobs$WithAnchorBlob(
											{
												ctor: '_Tuple3',
												_0: _p24,
												_1: _p18,
												_2: {ctor: '[]'}
											}));
								default:
									return _user$project$Blobs$OtherBlob(e);
							}
						case 'EApp':
							var _p22 = _p16._2;
							var _p19 = _p16._1.val.e__;
							if (_p19.ctor === 'EVar') {
								var _p21 = _p19._1;
								var _p20 = _p23;
								switch (_p20) {
									case 'withBounds':
										return A2(
											_user$project$Blobs$NiceBlob,
											e,
											_user$project$Blobs$WithBoundsBlob(
												{ctor: '_Tuple3', _0: _p24, _1: _p21, _2: _p22}));
									case 'withAnchor':
										return A2(
											_user$project$Blobs$NiceBlob,
											e,
											_user$project$Blobs$WithAnchorBlob(
												{ctor: '_Tuple3', _0: _p24, _1: _p21, _2: _p22}));
									default:
										return _user$project$Blobs$OtherBlob(e);
								}
							} else {
								return _user$project$Blobs$OtherBlob(e);
							}
						default:
							return _user$project$Blobs$OtherBlob(e);
					}
				} else {
					return _user$project$Blobs$OtherBlob(e);
				}
			} else {
				var _p25 = _p14._1.val.e__;
				if (_p25.ctor === 'EVar') {
					return A2(
						_user$project$Blobs$NiceBlob,
						e,
						_user$project$Blobs$CallBlob(
							{ctor: '_Tuple2', _0: _p25._1, _1: _p14._2}));
				} else {
					return _user$project$Blobs$OtherBlob(e);
				}
			}
		default:
			return _user$project$Blobs$OtherBlob(e);
	}
};
var _user$project$Blobs$maybeBlobs = function (main) {
	var _p26 = main.val.e__;
	if (((_p26.ctor === 'EApp') && (_p26._2.ctor === '::')) && (_p26._2._1.ctor === '[]')) {
		var _p31 = _p26._0;
		var _p30 = _p26._1;
		var _p29 = _p26._2._0;
		var _p27 = {ctor: '_Tuple2', _0: _p30.val.e__, _1: _p29.val.e__};
		if (((((_p27.ctor === '_Tuple2') && (_p27._0.ctor === 'EVar')) && (_p27._0._1 === 'blobs')) && (_p27._1.ctor === 'EList')) && (_p27._1._3.ctor === 'Nothing')) {
			var _p28 = _p27._1._1;
			var rebuildExp = function (newBlobExpList) {
				var newExpList = A2(_elm_lang$core$List$map, _user$project$Blobs$fromBlobExp, newBlobExpList);
				var eArgsNew = A2(
					_user$project$Lang$replaceE__,
					_p29,
					A5(
						_user$project$Lang$EList,
						_p27._1._0,
						A2(
							_user$project$Utils$zip,
							A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p28),
							newExpList),
						_p27._1._2,
						_elm_lang$core$Maybe$Nothing,
						_p27._1._4));
				var mainNew = A2(
					_user$project$Lang$replaceE__,
					main,
					A5(
						_user$project$Lang$EApp,
						_p31,
						_p30,
						{
							ctor: '::',
							_0: eArgsNew,
							_1: {ctor: '[]'}
						},
						_p26._3,
						_p26._4));
				return _elm_lang$core$Native_Utils.eq(_p31.val, '') ? A2(_user$project$Lang$addPrecedingWhitespace, '\n\n', mainNew) : (_elm_lang$core$Native_Utils.eq(_p31.val, '\n') ? A2(_user$project$Lang$addPrecedingWhitespace, '\n', mainNew) : mainNew);
			};
			var blobs = A2(
				_elm_lang$core$List$map,
				_user$project$Blobs$toBlobExp,
				A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p28));
			return _elm_lang$core$Maybe$Just(
				A2(_user$project$Blobs$Blobs, blobs, rebuildExp));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Blobs$toMainExp = function (e) {
	return A2(
		_user$project$Utils$elseMaybe,
		A2(
			_user$project$Utils$orMaybe,
			_user$project$Blobs$maybeSvgConcat(e),
			_user$project$Blobs$maybeBlobs(e)),
		_user$project$Blobs$OtherExp(e));
};
var _user$project$Blobs$splitExp = function (e) {
	var _p32 = e.val.e__;
	if (((_p32.ctor === 'ELet') && (_p32._1.ctor === 'Def')) && (_p32._2 === false)) {
		var _p33 = _user$project$Blobs$splitExp(_p32._7);
		var defs = _p33._0;
		var main = _p33._1;
		return {
			ctor: '_Tuple2',
			_0: {
				ctor: '::',
				_0: {ctor: '_Tuple4', _0: _p32._0, _1: _p32._3, _2: _p32._5, _3: _p32._8},
				_1: defs
			},
			_1: main
		};
	} else {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: _user$project$Blobs$toMainExp(e)
		};
	}
};
var _user$project$Blobs$maybeSimpleProgram = function (e) {
	var _p34 = _user$project$Blobs$splitExp(e);
	var defs = _p34._0;
	var mainExp = _p34._1;
	var _p35 = mainExp;
	switch (_p35.ctor) {
		case 'SvgConcat':
			return _elm_lang$core$Maybe$Nothing;
		case 'OtherExp':
			return _elm_lang$core$Maybe$Nothing;
		default:
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple3', _0: defs, _1: _p35._0, _2: _p35._1});
	}
};

var _user$project$HtmlUtils$styleListToString = function () {
	var stylePairToString = function (_p0) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_p1._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				': ',
				A2(_elm_lang$core$Basics_ops['++'], _p1._1, '; ')));
	};
	return function (_p2) {
		return _elm_lang$core$String$concat(
			A2(_elm_lang$core$List$map, stylePairToString, _p2));
	};
}();
var _user$project$HtmlUtils$enterKeyCode = 13;
var _user$project$HtmlUtils$onKeyDown = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$keyCode));
};
var _user$project$HtmlUtils$onRightClick = function (handler) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'contextmenu',
		{stopPropagation: true, preventDefault: true},
		_elm_lang$core$Json_Decode$succeed(handler));
};
var _user$project$HtmlUtils$onClickWithoutPropagation = function (handler) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'click',
		{stopPropagation: true, preventDefault: false},
		_elm_lang$core$Json_Decode$succeed(handler));
};
var _user$project$HtmlUtils$handleEventAndStop = F2(
	function (eventName, eventHandler) {
		return A3(
			_elm_lang$html$Html_Events$onWithOptions,
			eventName,
			_elm_lang$core$Native_Utils.update(
				_elm_lang$html$Html_Events$defaultOptions,
				{stopPropagation: true}),
			A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Basics$always(eventHandler),
				_elm_lang$core$Json_Decode$value));
	});

var _user$project$SleekLayout$contextBarHeight = 35;
var _user$project$SleekLayout$mainResizerBoundMargin = 100;
var _user$project$SleekLayout$mainResizerWidth = 20;
var _user$project$SleekLayout$deuceRightClickMenuMouseOffset = {x: 16, y: 16};
var _user$project$SleekLayout$deucePopupPanelMouseOffset = {x: -16, y: -16};
var _user$project$SleekLayout$toolButton = {width: 230};
var _user$project$SleekLayout$iconButton = {iconWidth: 43, iconHeight: 43};
var _user$project$SleekLayout$menuBar = {height: 30, borderWidth: 1};
var _user$project$SleekLayout$menuBarTotalHeight = _user$project$SleekLayout$menuBar.height + _user$project$SleekLayout$menuBar.borderWidth;
var _user$project$SleekLayout$deuceOverlayBleed = 10;
var _user$project$SleekLayout$spacing = {width: 10, height: 10};
var _user$project$SleekLayout$toolPanel = {width: _user$project$SleekLayout$toolButton.width, right: _user$project$SleekLayout$spacing.width, marginLeft: _user$project$SleekLayout$spacing.width};
var _user$project$SleekLayout$synthesisPanel = function (model) {
	return {
		bottom: _user$project$SleekLayout$spacing.height,
		height: (A2(_user$project$InterfaceModel$synthesisResultsNotEmpty, model, 'Auto-Synthesis') && (!model.viewState.menuActive)) ? 250 : 0
	};
};
var _user$project$SleekLayout$staticContentWidth = ((2 * _user$project$SleekLayout$spacing.width) + _user$project$SleekLayout$toolPanel.width) + _user$project$SleekLayout$toolPanel.marginLeft;
var _user$project$SleekLayout$dynamicContentWidth = function (model) {
	return model.dimensions.width - _user$project$SleekLayout$staticContentWidth;
};
var _user$project$SleekLayout$staticContentHeight = function (model) {
	return (_user$project$SleekLayout$menuBarTotalHeight + (2 * _user$project$SleekLayout$spacing.height)) + _user$project$SleekLayout$synthesisPanel(model).height;
};
var _user$project$SleekLayout$dynamicContentHeight = function (model) {
	return model.dimensions.height - _user$project$SleekLayout$staticContentHeight(model);
};
var _user$project$SleekLayout$mainPanelY = _user$project$SleekLayout$menuBarTotalHeight + _user$project$SleekLayout$spacing.height;
var _user$project$SleekLayout$defaultMainResizerX = function (model) {
	var left = _user$project$SleekLayout$spacing.width;
	var spaceToDivide = _elm_lang$core$Basics$toFloat(
		_user$project$SleekLayout$dynamicContentWidth(model) - _user$project$SleekLayout$mainResizerWidth);
	var ratio = 0.5;
	return left + _elm_lang$core$Basics$round(ratio * spaceToDivide);
};
var _user$project$SleekLayout$half = function (x) {
	return (x / 2) | 0;
};
var _user$project$SleekLayout$px = function (n) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(n),
		'px');
};
var _user$project$SleekLayout$panelBorderWidth = 1;
var _user$project$SleekLayout$box = F4(
	function (x, y, width, height) {
		return {x: x, y: y, width: width, height: height};
	});
var _user$project$SleekLayout$mainResizer = function (model) {
	var y = _user$project$SleekLayout$mainPanelY;
	var x = A2(
		_elm_lang$core$Maybe$withDefault,
		_user$project$SleekLayout$defaultMainResizerX(model),
		model.mainResizerX);
	var height = _user$project$SleekLayout$dynamicContentHeight(model);
	var width = _user$project$SleekLayout$mainResizerWidth;
	return A4(_user$project$SleekLayout$box, x, y, width, height);
};
var _user$project$SleekLayout$codePanel = function (model) {
	var height = _user$project$SleekLayout$dynamicContentHeight(model);
	var y = _user$project$SleekLayout$mainPanelY;
	var x = _user$project$SleekLayout$spacing.width;
	var mainResizerBB = _user$project$SleekLayout$mainResizer(model);
	var width = mainResizerBB.x - x;
	return A4(_user$project$SleekLayout$box, x, y, width, height);
};
var _user$project$SleekLayout$mainResizerLeftBound = function (model) {
	var codePanelBB = _user$project$SleekLayout$codePanel(model);
	return codePanelBB.x + _user$project$SleekLayout$mainResizerBoundMargin;
};
var _user$project$SleekLayout$outputPanel = function (model) {
	var height = _user$project$SleekLayout$dynamicContentHeight(model);
	var y = _user$project$SleekLayout$mainPanelY;
	var mainResizerBB = _user$project$SleekLayout$mainResizer(model);
	var x = mainResizerBB.x + mainResizerBB.width;
	var width = (((model.dimensions.width - _user$project$SleekLayout$toolPanel.right) - _user$project$SleekLayout$toolPanel.width) - _user$project$SleekLayout$toolPanel.marginLeft) - x;
	return A4(_user$project$SleekLayout$box, x, y, width, height);
};
var _user$project$SleekLayout$mainResizerRightBound = function (model) {
	var outputPanelBB = _user$project$SleekLayout$outputPanel(model);
	return (outputPanelBB.x + outputPanelBB.width) - _user$project$SleekLayout$mainResizerBoundMargin;
};
var _user$project$SleekLayout$outputCanvas = function (model) {
	var op = _user$project$SleekLayout$outputPanel(model);
	return {x: op.x + _user$project$SleekLayout$panelBorderWidth, y: (op.y + _user$project$SleekLayout$panelBorderWidth) + _user$project$SleekLayout$contextBarHeight, width: op.width - (2 * _user$project$SleekLayout$panelBorderWidth), height: (op.height - (2 * _user$project$SleekLayout$panelBorderWidth)) - _user$project$SleekLayout$contextBarHeight};
};
var _user$project$SleekLayout$canvasPosition = F2(
	function (model, _p0) {
		var _p1 = _p0;
		var box = _user$project$SleekLayout$outputCanvas(model);
		return {
			x: (_p1.x - box.x) + _elm_lang$core$Basics$round(model.outputCanvasInfo.scrollLeft),
			y: (_p1.y - box.y) + _elm_lang$core$Basics$round(model.outputCanvasInfo.scrollTop)
		};
	});
var _user$project$SleekLayout$clickToCanvasPoint = F2(
	function (model, _p2) {
		var _p3 = _p2;
		var box = _user$project$SleekLayout$outputCanvas(model);
		var canvasX = (_p3.x - box.x) + _elm_lang$core$Basics$round(model.outputCanvasInfo.scrollLeft);
		var canvasY = (_p3.y - box.y) + _elm_lang$core$Basics$round(model.outputCanvasInfo.scrollTop);
		var isOnCanvas = (_elm_lang$core$Native_Utils.cmp(0, canvasX) < 1) && ((_elm_lang$core$Native_Utils.cmp(canvasX, box.width) < 1) && ((_elm_lang$core$Native_Utils.cmp(0, canvasY) < 1) && (_elm_lang$core$Native_Utils.cmp(canvasY, box.height) < 1)));
		return {
			ctor: '_Tuple2',
			_0: isOnCanvas,
			_1: {ctor: '_Tuple2', _0: canvasX, _1: canvasY}
		};
	});
var _user$project$SleekLayout$BoundingBox = F4(
	function (a, b, c, d) {
		return {x: a, y: b, width: c, height: d};
	});

var _user$project$LangSimplify$removeEmptyListsFromConcats = function (program) {
	var freeVars = _user$project$LangTools$freeVars(program);
	return A2(
		_user$project$Lang$mapExpViaExp__,
		function (e__) {
			var _p0 = e__;
			if (_p0.ctor === 'EApp') {
				var _p6 = _p0._1;
				if (_elm_lang$core$Native_Utils.eq(
					_user$project$LangTools$expToMaybeIdent(_p6),
					_elm_lang$core$Maybe$Just('concat')) && A2(_elm_lang$core$List$member, _p6, freeVars)) {
					var _p1 = _p0._2;
					if ((_p1.ctor === '::') && (_p1._1.ctor === '[]')) {
						var _p5 = _p1._0;
						var _p2 = _p5.val.e__;
						if (_p2.ctor === 'EList') {
							var newHeads = A2(
								_elm_lang$core$List$filter,
								function (_p3) {
									var _p4 = _p3;
									return !_user$project$Lang$isEmptyList(_p4._1);
								},
								_p2._1);
							var newArgExp = A2(
								_user$project$LangTools$copyListWhitespace,
								_p5,
								A2(
									_user$project$Lang$replaceE__,
									_p5,
									A5(_user$project$Lang$EList, _p2._0, newHeads, _p2._2, _p2._3, _p2._4)));
							return A5(
								_user$project$Lang$EApp,
								_p0._0,
								_p6,
								{
									ctor: '::',
									_0: newArgExp,
									_1: {ctor: '[]'}
								},
								_p0._3,
								_p0._4);
						} else {
							return e__;
						}
					} else {
						return e__;
					}
				} else {
					return e__;
				}
			} else {
				return e__;
			}
		},
		program);
};
var _user$project$LangSimplify$simpleIdentsAndAssigns = F2(
	function (letPat, letAssign) {
		var _p7 = {ctor: '_Tuple2', _0: letPat.val.p__, _1: letAssign.val.e__};
		_v4_2:
		do {
			if (_p7.ctor === '_Tuple2') {
				switch (_p7._0.ctor) {
					case 'PVar':
						return {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _p7._0._1, _1: letAssign},
							_1: {ctor: '[]'}
						};
					case 'PList':
						if (((_p7._0._3.ctor === 'Nothing') && (_p7._1.ctor === 'EList')) && (_p7._1._3.ctor === 'Nothing')) {
							var patsAssigns = A2(
								_user$project$Utils$zip,
								_p7._0._1,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p7._1._1));
							var simplePatsAssigns = A2(
								_elm_lang$core$List$filterMap,
								function (_p8) {
									var _p9 = _p8;
									var _p10 = _p9._0.val.p__;
									if (_p10.ctor === 'PVar') {
										return _elm_lang$core$Maybe$Just(
											{ctor: '_Tuple2', _0: _p10._1, _1: _p9._1});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								},
								patsAssigns);
							return simplePatsAssigns;
						} else {
							break _v4_2;
						}
					default:
						break _v4_2;
				}
			} else {
				break _v4_2;
			}
		} while(false);
		return {ctor: '[]'};
	});
var _user$project$LangSimplify$inlineTrivialRenamings = function (exp) {
	var inlineReplaceIfTrivialRename = F3(
		function (targetIdent, newExp, e__) {
			var _p11 = e__;
			if ((_p11.ctor === 'ELet') && (_p11._2 === false)) {
				var _p21 = _p11._8;
				var _p20 = _p11._6;
				var _p19 = _p11._4;
				var _p18 = _p11._0;
				var _p17 = _p11._3;
				var _p16 = _p11._1;
				var _p15 = _p11._7;
				var _p12 = {ctor: '_Tuple2', _0: _p17.val.p__, _1: _p11._5.val.e__};
				_v8_2:
				do {
					if (_p12.ctor === '_Tuple2') {
						switch (_p12._0.ctor) {
							case 'PVar':
								if (_p12._1.ctor === 'EVar') {
									if (_elm_lang$core$Native_Utils.eq(_p12._1._1, targetIdent)) {
										var newExpAdjustedWs = A2(_user$project$Lang$replacePrecedingWhitespace, _p12._1._0.val, newExp);
										return A9(_user$project$Lang$ELet, _p18, _p16, false, _p17, _p19, newExpAdjustedWs, _p20, _p15, _p21);
									} else {
										return e__;
									}
								} else {
									break _v8_2;
								}
							case 'PList':
								if (((_p12._0._3.ctor === 'Nothing') && (_p12._1.ctor === 'EList')) && (_p12._1._3.ctor === 'Nothing')) {
									var _p14 = _p12._1._1;
									var newAssigns = A2(
										_elm_lang$core$List$map,
										function (assignExp) {
											var _p13 = assignExp.val.e__;
											if (_p13.ctor === 'EVar') {
												if (_elm_lang$core$Native_Utils.eq(_p13._1, targetIdent)) {
													var oldPrecedingWs = _user$project$Lang$precedingWhitespace(assignExp);
													return A2(_user$project$Lang$replacePrecedingWhitespace, oldPrecedingWs, newExp);
												} else {
													return assignExp;
												}
											} else {
												return assignExp;
											}
										},
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p14));
									var newAssignsListExp = _user$project$Lang$withDummyExpInfo(
										A5(
											_user$project$Lang$EList,
											_p12._1._0,
											A2(
												_user$project$Utils$zip,
												A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p14),
												newAssigns),
											_p12._1._2,
											_elm_lang$core$Maybe$Nothing,
											_p12._1._4));
									return A9(_user$project$Lang$ELet, _p18, _p16, false, _p17, _p19, newAssignsListExp, _p20, _p15, _p21);
								} else {
									break _v8_2;
								}
							default:
								break _v8_2;
						}
					} else {
						break _v8_2;
					}
				} while(false);
				return e__;
			} else {
				return e__;
			}
		});
	var inliner = function (e__) {
		var _p22 = e__;
		if ((_p22.ctor === 'ELet') && (_p22._2 === false)) {
			var _p29 = _p22._3;
			var _p28 = _p22._7;
			var _p27 = _p22._5;
			var nameCounts = _user$project$LangTools$identifierCounts(_p28);
			var letRemoved = function (newBody) {
				var oldPrecedingWs = _user$project$Lang$precedingWhitespaceExp__(e__);
				return A2(_user$project$Lang$replacePrecedingWhitespace, oldPrecedingWs, newBody).val.e__;
			};
			var identsAndAssignsInliningCandidates = A2(
				_elm_lang$core$List$filter,
				function (_p23) {
					var _p24 = _p23;
					return _elm_lang$core$Native_Utils.eq(
						1,
						A3(_user$project$Utils$getWithDefault, _p24._0, 0, nameCounts));
				},
				A2(_user$project$LangSimplify$simpleIdentsAndAssigns, _p29, _p27));
			var newBody = A3(
				_elm_lang$core$List$foldl,
				F2(
					function (_p25, resultExp) {
						var _p26 = _p25;
						return A2(
							_user$project$Lang$mapExpViaExp__,
							A2(inlineReplaceIfTrivialRename, _p26._0, _p26._1),
							resultExp);
					}),
				_p28,
				identsAndAssignsInliningCandidates);
			return A9(_user$project$Lang$ELet, _p22._0, _p22._1, false, _p29, _p22._4, _p27, _p22._6, newBody, _p22._8);
		} else {
			return e__;
		}
	};
	return A2(_user$project$Lang$mapExpViaExp__, inliner, exp);
};
var _user$project$LangSimplify$changeRenamedVarsToOuter_ = F2(
	function (renamings, exp) {
		var recurse = _user$project$LangSimplify$changeRenamedVarsToOuter_(renamings);
		var e__New = function () {
			var e__ = exp.val.e__;
			var removeIdentsFromRenaming = F2(
				function (identsToRemove, renamings) {
					return A2(
						_elm_lang$core$Dict$filter,
						F2(
							function (oldName, newName) {
								return (!A2(_elm_lang$core$Set$member, oldName, identsToRemove)) && (!A2(_elm_lang$core$Set$member, newName, identsToRemove));
							}),
						renamings);
				});
			var _p30 = e__;
			switch (_p30.ctor) {
				case 'EConst':
					return e__;
				case 'EBase':
					return e__;
				case 'EVar':
					var _p31 = A2(_elm_lang$core$Dict$get, _p30._1, renamings);
					if (_p31.ctor === 'Just') {
						return A2(_user$project$Lang$EVar, _p30._0, _p31._0);
					} else {
						return e__;
					}
				case 'ELet':
					var _p37 = _p30._2;
					var _p36 = _p30._3;
					var _p35 = _p30._5;
					var newlyAssignedIdents = _user$project$LangTools$identifiersSetInPat(_p36);
					var renamingsShadowsRemoved = A2(removeIdentsFromRenaming, newlyAssignedIdents, renamings);
					var assign_ = _p37 ? A2(_user$project$LangSimplify$changeRenamedVarsToOuter_, renamingsShadowsRemoved, _p35) : recurse(_p35);
					var identsAndAssigns = A2(_user$project$LangSimplify$simpleIdentsAndAssigns, _p36, assign_);
					var simpleRenamings = A2(
						_elm_lang$core$List$filterMap,
						function (_p32) {
							var _p33 = _p32;
							var _p34 = _p33._1.val.e__;
							if (_p34.ctor === 'EVar') {
								return _elm_lang$core$Maybe$Just(
									{ctor: '_Tuple2', _0: _p33._0, _1: _p34._1});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						},
						identsAndAssigns);
					var renamings_ = A2(
						_elm_lang$core$Dict$union,
						_elm_lang$core$Dict$fromList(simpleRenamings),
						renamingsShadowsRemoved);
					var body_ = A2(_user$project$LangSimplify$changeRenamedVarsToOuter_, renamings_, _p30._7);
					return A9(_user$project$Lang$ELet, _p30._0, _p30._1, _p37, _p36, _p30._4, assign_, _p30._6, body_, _p30._8);
				case 'EFun':
					var _p38 = _p30._1;
					var newlyAssignedIdents = A3(
						_elm_lang$core$List$foldl,
						_elm_lang$core$Set$union,
						_elm_lang$core$Set$empty,
						A2(_elm_lang$core$List$map, _user$project$LangTools$identifiersSetInPat, _p38));
					var renamingsShadowsRemoved = A2(removeIdentsFromRenaming, newlyAssignedIdents, renamings);
					return A4(
						_user$project$Lang$EFun,
						_p30._0,
						_p38,
						A2(_user$project$LangSimplify$changeRenamedVarsToOuter_, renamingsShadowsRemoved, _p30._2),
						_p30._3);
				case 'EApp':
					return A5(
						_user$project$Lang$EApp,
						_p30._0,
						recurse(_p30._1),
						A2(_elm_lang$core$List$map, recurse, _p30._2),
						_p30._3,
						_p30._4);
				case 'EOp':
					return A4(
						_user$project$Lang$EOp,
						_p30._0,
						_p30._1,
						A2(_elm_lang$core$List$map, recurse, _p30._2),
						_p30._3);
				case 'EList':
					var _p39 = _p30._1;
					return A5(
						_user$project$Lang$EList,
						_p30._0,
						A2(
							_user$project$Utils$zip,
							A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p39),
							A2(
								_elm_lang$core$List$map,
								recurse,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p39))),
						_p30._2,
						A2(_user$project$Utils$mapMaybe, recurse, _p30._3),
						_p30._4);
				case 'EIf':
					return A7(
						_user$project$Lang$EIf,
						_p30._0,
						recurse(_p30._1),
						_p30._2,
						recurse(_p30._3),
						_p30._4,
						recurse(_p30._5),
						_p30._6);
				case 'ECase':
					var newBranches = A2(
						_elm_lang$core$List$map,
						_user$project$Lang$mapValField(
							function (_p40) {
								var _p41 = _p40;
								var _p42 = _p41._1;
								var newlyAssignedIdents = _user$project$LangTools$identifiersSetInPat(_p42);
								var renamingsShadowsRemoved = A2(removeIdentsFromRenaming, newlyAssignedIdents, renamings);
								return A4(
									_user$project$Lang$Branch_,
									_p41._0,
									_p42,
									A2(_user$project$LangSimplify$changeRenamedVarsToOuter_, renamingsShadowsRemoved, _p41._2),
									_p41._3);
							}),
						_p30._2);
					return A4(
						_user$project$Lang$ECase,
						_p30._0,
						recurse(_p30._1),
						newBranches,
						_p30._3);
				case 'ETypeCase':
					var newBranches = A2(
						_elm_lang$core$List$map,
						_user$project$Lang$mapValField(
							function (_p43) {
								var _p44 = _p43;
								return A4(
									_user$project$Lang$TBranch_,
									_p44._0,
									_p44._1,
									recurse(_p44._2),
									_p44._3);
							}),
						_p30._2);
					return A4(_user$project$Lang$ETypeCase, _p30._0, _p30._1, newBranches, _p30._3);
				case 'EComment':
					return A3(
						_user$project$Lang$EComment,
						_p30._0,
						_p30._1,
						recurse(_p30._2));
				case 'EOption':
					return A5(
						_user$project$Lang$EOption,
						_p30._0,
						_p30._1,
						_p30._2,
						_p30._3,
						recurse(_p30._4));
				case 'ETyp':
					return A5(
						_user$project$Lang$ETyp,
						_p30._0,
						_p30._1,
						_p30._2,
						recurse(_p30._3),
						_p30._4);
				case 'EColonType':
					return A5(
						_user$project$Lang$EColonType,
						_p30._0,
						recurse(_p30._1),
						_p30._2,
						_p30._3,
						_p30._4);
				case 'ETypeAlias':
					return A5(
						_user$project$Lang$ETypeAlias,
						_p30._0,
						_p30._1,
						_p30._2,
						recurse(_p30._3),
						_p30._4);
				case 'EParens':
					return A4(
						_user$project$Lang$EParens,
						_p30._0,
						recurse(_p30._1),
						_p30._2,
						_p30._3);
				default:
					if (_p30._1.ctor === 'HolePBE') {
						return A2(
							_user$project$Lang$EHole,
							_p30._0,
							A2(
								_user$project$Lang$HolePBE,
								A2(
									_elm_lang$core$List$map,
									function (_p45) {
										var _p46 = _p45;
										return {
											ctor: '_Tuple4',
											_0: _p46._0,
											_1: _p46._1,
											_2: _p46._2,
											_3: recurse(_p46._3)
										};
									},
									_p30._1._0),
								_p30._1._1));
					} else {
						return e__;
					}
			}
		}();
		return A2(_user$project$Lang$replaceE__, exp, e__New);
	});
var _user$project$LangSimplify$changeRenamedVarsToOuter = function (exp) {
	return A2(_user$project$LangSimplify$changeRenamedVarsToOuter_, _elm_lang$core$Dict$empty, exp);
};
var _user$project$LangSimplify$simplifyPatBoundExp = F2(
	function (pat, boundExp) {
		var _p47 = {ctor: '_Tuple2', _0: pat.val.p__, _1: boundExp.val.e__};
		_v20_3:
		do {
			if (_p47.ctor === '_Tuple2') {
				switch (_p47._0.ctor) {
					case 'PVar':
						if (_p47._0._1 === '*RemoveMe*') {
							return _elm_lang$core$Maybe$Nothing;
						} else {
							break _v20_3;
						}
					case 'PAs':
						var _p48 = A2(_user$project$LangSimplify$simplifyPatBoundExp, _p47._0._3, boundExp);
						if (_p48.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: A2(
										_user$project$Lang$replaceP__,
										pat,
										A4(_user$project$Lang$PAs, _p47._0._0, _p47._0._1, _p47._0._2, _p48._0._0)),
									_1: _p48._0._1
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					case 'PList':
						if (_p47._1.ctor === 'EList') {
							var _p57 = _p47._0._1;
							var _p56 = _p47._0._3;
							var _p55 = _p47._1._3;
							var _p54 = _p47._1._1;
							var _p49 = A3(
								_user$project$Utils$filterMapTogetherPreservingLeftovers,
								_user$project$LangSimplify$simplifyPatBoundExp,
								_p57,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p54));
							var newPs = _p49._0;
							var newEs = _p49._1;
							var _p50 = function () {
								var _p51 = {ctor: '_Tuple2', _0: _p56, _1: _p55};
								if (((_p51.ctor === '_Tuple2') && (_p51._0.ctor === 'Just')) && (_p51._1.ctor === 'Just')) {
									var _p52 = A2(_user$project$LangSimplify$simplifyPatBoundExp, _p51._0._0, _p51._1._0);
									if (_p52.ctor === 'Just') {
										return {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Maybe$Just(_p52._0._0),
											_1: _elm_lang$core$Maybe$Just(_p52._0._1)
										};
									} else {
										return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Maybe$Nothing};
									}
								} else {
									return {ctor: '_Tuple2', _0: _p56, _1: _p55};
								}
							}();
							var newMaybePTail = _p50._0;
							var newMaybeETail = _p50._1;
							var _p53 = {ctor: '_Tuple4', _0: newPs, _1: newEs, _2: newMaybePTail, _3: newMaybeETail};
							_v24_2:
							do {
								if (_p53.ctor === '_Tuple4') {
									if (_p53._0.ctor === '[]') {
										if (((_p53._1.ctor === '[]') && (_p53._2.ctor === 'Nothing')) && (_p53._3.ctor === 'Nothing')) {
											return _elm_lang$core$Maybe$Nothing;
										} else {
											break _v24_2;
										}
									} else {
										if (((((_p53._0._1.ctor === '[]') && (_p53._1.ctor === '::')) && (_p53._1._1.ctor === '[]')) && (_p53._2.ctor === 'Nothing')) && (_p53._3.ctor === 'Nothing')) {
											return _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p53._0._0, _1: _p53._1._0});
										} else {
											break _v24_2;
										}
									}
								} else {
									break _v24_2;
								}
							} while(false);
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: A2(
										_user$project$Lang$replaceP__,
										pat,
										A5(
											_user$project$Lang$PList,
											_p47._0._0,
											A2(_user$project$Lang$imitatePatListWhitespace, _p57, newPs),
											_p47._0._2,
											newMaybePTail,
											_p47._0._4)),
									_1: A2(
										_user$project$Lang$replaceE__,
										boundExp,
										A5(
											_user$project$Lang$EList,
											_p47._1._0,
											A2(
												_user$project$Utils$zip,
												A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p54),
												A2(
													_user$project$Lang$imitateExpListWhitespace,
													A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p54),
													newEs)),
											_p47._1._2,
											newMaybeETail,
											_p47._1._4))
								});
						} else {
							break _v20_3;
						}
					default:
						break _v20_3;
				}
			} else {
				break _v20_3;
			}
		} while(false);
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: pat, _1: boundExp});
	});
var _user$project$LangSimplify$simplifyAssignments = function (program) {
	return A2(
		_user$project$Lang$mapExp,
		function (exp) {
			var _p58 = exp.val.e__;
			if (_p58.ctor === 'ELet') {
				var _p60 = _p58._7;
				var _p59 = A2(_user$project$LangSimplify$simplifyPatBoundExp, _p58._3, _p58._5);
				if (_p59.ctor === 'Just') {
					return A2(
						_user$project$Lang$replaceE__,
						exp,
						A9(
							_user$project$Lang$ELet,
							_p58._0,
							_p58._1,
							_p58._2,
							_user$project$Lang$ensureWhitespacePat(_p59._0._0),
							_p58._4,
							_p59._0._1,
							_p58._6,
							_p60,
							_p58._8));
				} else {
					return _p60;
				}
			} else {
				return exp;
			}
		},
		program);
};
var _user$project$LangSimplify$removeUnusedLetPatsMatching = F2(
	function (predicate, exp) {
		var remover = function (e__) {
			var _p61 = e__;
			if ((_p61.ctor === 'ELet') && (_p61._2 === false)) {
				var _p81 = _p61._8;
				var _p80 = _p61._6;
				var _p79 = _p61._4;
				var _p78 = _p61._0;
				var _p77 = _p61._3;
				var _p76 = _p61._1;
				var _p75 = _p61._7;
				var _p74 = _p61._5;
				var usedNames = _user$project$LangTools$freeIdentifiers(_p75);
				var letRemoved = _p75.val.e__;
				var _p62 = {ctor: '_Tuple2', _0: _p77.val.p__, _1: _p74.val.e__};
				_v28_3:
				do {
					if (_p62.ctor === '_Tuple2') {
						switch (_p62._0.ctor) {
							case 'PVar':
								return (A2(_elm_lang$core$Set$member, _p62._0._1, usedNames) || (!predicate(_p77))) ? e__ : letRemoved;
							case 'PAs':
								return (A2(_elm_lang$core$Set$member, _p62._0._1, usedNames) || (!predicate(_p77))) ? e__ : A9(
									_user$project$Lang$ELet,
									_p78,
									_p76,
									false,
									A2(_user$project$Lang$replacePrecedingWhitespacePat, _p62._0._0.val, _p62._0._3),
									_p80,
									_p74,
									_p81,
									_p75,
									_p81);
							case 'PList':
								if (((_p62._0._3.ctor === 'Nothing') && (_p62._1.ctor === 'EList')) && (_p62._1._3.ctor === 'Nothing')) {
									var _p73 = _p62._0._0;
									var _p72 = _p62._0._1;
									var _p71 = _p62._1._0;
									var _p70 = _p62._1._1;
									if (!_elm_lang$core$Native_Utils.eq(
										_elm_lang$core$List$length(_p72),
										_elm_lang$core$List$length(_p70))) {
										return e__;
									} else {
										var patsAssigns = A2(
											_user$project$Utils$zip,
											_p72,
											A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p70));
										var usedPatsAssigns = A2(
											_elm_lang$core$List$filter,
											function (_p63) {
												var _p64 = _p63;
												var _p66 = _p64._0;
												var _p65 = _p66.val.p__;
												if (_p65.ctor === 'PVar') {
													return A2(_elm_lang$core$Set$member, _p65._1, usedNames) || (!predicate(_p66));
												} else {
													return true;
												}
											},
											patsAssigns);
										var _p67 = _elm_lang$core$List$length(usedPatsAssigns);
										switch (_p67) {
											case 0:
												return letRemoved;
											case 1:
												var _p68 = _user$project$Utils$head_(usedPatsAssigns);
												var thePat = _p68._0;
												var theAssign = _p68._1;
												var newPat = A2(_user$project$Lang$replacePrecedingWhitespacePat, _p73.val, thePat);
												var newAssign = A2(_user$project$Lang$replacePrecedingWhitespace, _p71.val, theAssign);
												return A9(_user$project$Lang$ELet, _p78, _p76, false, newPat, _p79, newAssign, _p80, _p75, _p81);
											default:
												if (_elm_lang$core$Native_Utils.eq(
													_elm_lang$core$List$length(usedPatsAssigns),
													_elm_lang$core$List$length(_p72))) {
													return e__;
												} else {
													var _p69 = _elm_lang$core$List$unzip(usedPatsAssigns);
													var usedPats = _p69._0;
													var usedAssigns = _p69._1;
													var newPat = A2(
														_user$project$Lang$replaceP__,
														_p77,
														A5(
															_user$project$Lang$PList,
															_p73,
															A2(_user$project$Lang$imitatePatListWhitespace, _p72, usedPats),
															_p62._0._2,
															_elm_lang$core$Maybe$Nothing,
															_p62._0._4));
													var newAssign = A2(
														_user$project$Lang$replaceE__,
														_p74,
														A5(
															_user$project$Lang$EList,
															_p71,
															A2(
																_user$project$Utils$zip,
																A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p70),
																A2(
																	_user$project$Lang$imitateExpListWhitespace,
																	A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p70),
																	usedAssigns)),
															_p62._1._2,
															_elm_lang$core$Maybe$Nothing,
															_p62._1._4));
													return A9(_user$project$Lang$ELet, _p78, _p76, false, newPat, _p79, newAssign, _p80, _p75, _p81);
												}
										}
									}
								} else {
									break _v28_3;
								}
							default:
								break _v28_3;
						}
					} else {
						break _v28_3;
					}
				} while(false);
				return e__;
			} else {
				return e__;
			}
		};
		return A2(_user$project$Lang$mapExpViaExp__, remover, exp);
	});
var _user$project$LangSimplify$removeUnusedLetPats = function (exp) {
	return A2(
		_user$project$LangSimplify$removeUnusedLetPatsMatching,
		_elm_lang$core$Basics$always(true),
		exp);
};
var _user$project$LangSimplify$simplify = function (exp) {
	simplify:
	while (true) {
		var repeatedlyApplyFirstTwo = function (e) {
			repeatedlyApplyFirstTwo:
			while (true) {
				var firstTwoSimplified = _user$project$LangSimplify$removeUnusedLetPats(
					_user$project$LangSimplify$inlineTrivialRenamings(e));
				if (_elm_lang$core$Native_Utils.eq(firstTwoSimplified, e)) {
					return e;
				} else {
					var _v32 = firstTwoSimplified;
					e = _v32;
					continue repeatedlyApplyFirstTwo;
				}
			}
		};
		var simplified = _user$project$LangSimplify$changeRenamedVarsToOuter(
			repeatedlyApplyFirstTwo(exp));
		if (_elm_lang$core$Native_Utils.eq(simplified, exp)) {
			return exp;
		} else {
			var _v33 = simplified;
			exp = _v33;
			continue simplify;
		}
	}
};
var _user$project$LangSimplify$removeExtraPostfixes = F2(
	function (postfixes, program) {
		removeExtraPostfixes:
		while (true) {
			var maybeNewName = function (oldName) {
				return A2(
					_elm_lang$core$Maybe$map,
					function (postfix) {
						return A2(
							_elm_lang$core$String$dropRight,
							_elm_lang$core$String$length(postfix),
							oldName);
					},
					A2(
						_user$project$Utils$findFirst,
						function (postfix) {
							return A2(_elm_lang$core$String$endsWith, postfix, oldName);
						},
						postfixes));
			};
			var newProgram = A2(
				_user$project$Lang$mapExpViaExp__,
				function (e__) {
					var _p82 = e__;
					if ((_p82.ctor === 'ELet') && (_p82._2 === false)) {
						var _p90 = _p82._3;
						var _p83 = A3(
							_elm_lang$core$List$foldl,
							F2(
								function (oldName, _p84) {
									var _p85 = _p84;
									var _p89 = _p85._0;
									var _p88 = _p85._1;
									var _p86 = maybeNewName(oldName);
									if (_p86.ctor === 'Nothing') {
										return {ctor: '_Tuple2', _0: _p89, _1: _p88};
									} else {
										var _p87 = _p86._0;
										return ((!A2(
											_elm_lang$core$List$member,
											_p87,
											_user$project$LangTools$identifiersListInPat(_p89))) && (!A2(
											_elm_lang$core$Set$member,
											_p87,
											A2(
												_user$project$LangTools$visibleIdentifiersAtPredicateNoPrelude,
												_p88,
												function (e) {
													return _elm_lang$core$Native_Utils.eq(
														_user$project$LangTools$expToMaybeIdent(e),
														_elm_lang$core$Maybe$Just(oldName));
												})))) ? {
											ctor: '_Tuple2',
											_0: A3(_user$project$LangTools$renameIdentifierInPat, oldName, _p87, _p89),
											_1: A3(_user$project$LangTools$renameVarUntilBound, oldName, _p87, _p88)
										} : {ctor: '_Tuple2', _0: _p89, _1: _p88};
									}
								}),
							{ctor: '_Tuple2', _0: _p90, _1: _p82._7},
							_user$project$LangTools$identifiersListInPat(_p90));
						var newPat = _p83._0;
						var newBody = _p83._1;
						return (!_elm_lang$core$Native_Utils.eq(_p90, newPat)) ? A9(_user$project$Lang$ELet, _p82._0, _p82._1, false, newPat, _p82._4, _p82._5, _p82._6, newBody, _p82._8) : e__;
					} else {
						return e__;
					}
				},
				program);
			if (_elm_lang$core$Native_Utils.eq(
				_user$project$LangTools$identifiersList(newProgram),
				_user$project$LangTools$identifiersList(program))) {
				return program;
			} else {
				var _v37 = postfixes,
					_v38 = newProgram;
				postfixes = _v37;
				program = _v38;
				continue removeExtraPostfixes;
			}
		}
	});
var _user$project$LangSimplify$cleanCode = function (program) {
	return _user$project$FastParser$freshen(
		A2(
			_user$project$Lang$mapExpTopDown,
			function (e) {
				return _user$project$Lang$isLet(e) ? A2(_user$project$LangTools$reflowLetWhitespace, program, e) : e;
			},
			A2(
				_user$project$LangSimplify$removeExtraPostfixes,
				{
					ctor: '::',
					_0: '_orig',
					_1: {
						ctor: '::',
						_0: '\'',
						_1: {ctor: '[]'}
					}
				},
				_user$project$LangSimplify$removeEmptyListsFromConcats(
					_user$project$LangSimplify$simplify(program)))));
};

var _user$project$LocEqn$mathExpToExp = F4(
	function (constantAnnotation, locIdToFrozenNum, locIdToIdent, mathExp) {
		return A3(
			_user$project$MathExp$mathExpToExp,
			function (n) {
				return A2(
					_user$project$Lang$eConst,
					n,
					_user$project$Lang$dummyLoc_(constantAnnotation));
			},
			function (locId) {
				var _p0 = A2(_elm_lang$core$Dict$get, locId, locIdToIdent);
				if (_p0.ctor === 'Just') {
					return _user$project$Lang$eVar(_p0._0);
				} else {
					var _p1 = A2(_elm_lang$core$Dict$get, locId, locIdToFrozenNum);
					if (_p1.ctor === 'Just') {
						return _user$project$Lang$eConstFrozen(_p1._0);
					} else {
						return _user$project$Lang$eVar(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'couldNotFindLocId',
								_elm_lang$core$Basics$toString(locId)));
					}
				}
			},
			mathExp);
	});
var _user$project$LocEqn$mathExpToString = function (mathExp) {
	var _p2 = mathExp;
	switch (_p2.ctor) {
		case 'MathNum':
			return _elm_lang$core$Basics$toString(_p2._0);
		case 'MathVar':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'k',
				_elm_lang$core$Basics$toString(_p2._0));
		default:
			if (((_p2._1.ctor === '::') && (_p2._1._1.ctor === '::')) && (_p2._1._1._1.ctor === '[]')) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$LocEqn$mathExpToString(_p2._1._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$ValUnparser$strOp(_p2._0),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$LocEqn$mathExpToString(_p2._1._1._0),
										')'))))));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$ValUnparser$strOp(_p2._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$String$join,
									' ',
									A2(_elm_lang$core$List$map, _user$project$LocEqn$mathExpToString, _p2._1)),
								')'))));
			}
	}
};
var _user$project$LocEqn$constantifyLocs = F2(
	function (locIdToNum, mathExp) {
		var _p3 = mathExp;
		switch (_p3.ctor) {
			case 'MathNum':
				return mathExp;
			case 'MathVar':
				var _p4 = A2(_elm_lang$core$Dict$get, _p3._0, locIdToNum);
				if (_p4.ctor === 'Just') {
					return _user$project$Lang$MathNum(_p4._0);
				} else {
					return mathExp;
				}
			default:
				return A2(
					_user$project$Lang$MathOp,
					_p3._0,
					A2(
						_elm_lang$core$List$map,
						_user$project$LocEqn$constantifyLocs(locIdToNum),
						_p3._1));
		}
	});
var _user$project$LocEqn$mathExpEval = F2(
	function (locIdToNum, mathExp) {
		return A2(
			_user$project$Utils$fromJust__,
			function (_p5) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'LocEqn.mathExpEval incomplete subst ',
					_elm_lang$core$Basics$toString(
						{ctor: '_Tuple2', _0: locIdToNum, _1: mathExp}));
			},
			_user$project$MathExp$evalToMaybeNum(
				A2(_user$project$MathExp$applySubst, locIdToNum, mathExp)));
	});
var _user$project$LocEqn$mathExpLocIds = function (mathExp) {
	var _p6 = mathExp;
	switch (_p6.ctor) {
		case 'MathNum':
			return {ctor: '[]'};
		case 'MathVar':
			return {
				ctor: '::',
				_0: _p6._0,
				_1: {ctor: '[]'}
			};
		default:
			return A2(_elm_lang$core$List$concatMap, _user$project$LocEqn$mathExpLocIds, _p6._1);
	}
};
var _user$project$LocEqn$locMathNums = function (mathExp) {
	var _p7 = mathExp;
	switch (_p7.ctor) {
		case 'MathNum':
			return {
				ctor: '::',
				_0: _p7._0,
				_1: {ctor: '[]'}
			};
		case 'MathVar':
			return {ctor: '[]'};
		default:
			return A2(_elm_lang$core$List$concatMap, _user$project$LocEqn$locMathNums, _p7._1);
	}
};
var _user$project$LocEqn$mathExpLocIdSet = function (mathExp) {
	return _elm_lang$core$Set$fromList(
		_user$project$LocEqn$mathExpLocIds(mathExp));
};
var _user$project$LocEqn$mathExpSize = function (mathExp) {
	var _p8 = mathExp;
	switch (_p8.ctor) {
		case 'MathNum':
			return 1;
		case 'MathVar':
			return 1;
		default:
			return 1 + _elm_lang$core$List$sum(
				A2(_elm_lang$core$List$map, _user$project$LocEqn$mathExpSize, _p8._1));
	}
};
var _user$project$LocEqn$mathExpsTemplatesOfSize_ = function (astSize) {
	return (_elm_lang$core$Native_Utils.cmp(astSize, 1) < 0) ? {ctor: '[]'} : (_elm_lang$core$Native_Utils.eq(astSize, 1) ? {
		ctor: '::',
		_0: _user$project$Lang$MathNum(-1),
		_1: {
			ctor: '::',
			_0: _user$project$Lang$MathVar(-1),
			_1: {ctor: '[]'}
		}
	} : (_elm_lang$core$Native_Utils.eq(astSize, 2) ? {ctor: '[]'} : A2(
		_elm_lang$core$List$concatMap,
		function (op) {
			return A2(
				_elm_lang$core$List$concatMap,
				function (leftSize) {
					return A2(
						_elm_lang$core$List$concatMap,
						function (leftMathExp) {
							var rightSize = (astSize - leftSize) - 1;
							return A2(
								_elm_lang$core$List$map,
								function (rightMathExp) {
									return A2(
										_user$project$Lang$MathOp,
										op,
										{
											ctor: '::',
											_0: leftMathExp,
											_1: {
												ctor: '::',
												_0: rightMathExp,
												_1: {ctor: '[]'}
											}
										});
								},
								_user$project$LocEqn$mathExpsTemplatesOfSize_(rightSize));
						},
						_user$project$LocEqn$mathExpsTemplatesOfSize_(leftSize));
				},
				A2(_elm_lang$core$List$range, 1, astSize - 2));
		},
		{
			ctor: '::',
			_0: _user$project$Lang$Plus,
			_1: {
				ctor: '::',
				_0: _user$project$Lang$Minus,
				_1: {
					ctor: '::',
					_0: _user$project$Lang$Mult,
					_1: {
						ctor: '::',
						_0: _user$project$Lang$Div,
						_1: {ctor: '[]'}
					}
				}
			}
		})));
};
var _user$project$LocEqn$atMostNConstants = F2(
	function (n, template) {
		return _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(
				_user$project$LocEqn$locMathNums(template)),
			n) < 1;
	});
var _user$project$LocEqn$atLeastNLocs = F2(
	function (n, template) {
		return _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(
				_user$project$LocEqn$mathExpLocIds(template)),
			n) > -1;
	});
var _user$project$LocEqn$mathExpsTemplatesOfSize = F3(
	function (minLocs, maxConsts, astSize) {
		return A2(
			_elm_lang$core$List$filter,
			_user$project$LocEqn$atMostNConstants(maxConsts),
			A2(
				_elm_lang$core$List$filter,
				_user$project$LocEqn$atLeastNLocs(minLocs),
				_user$project$LocEqn$mathExpsTemplatesOfSize_(astSize)));
	});
var _user$project$LocEqn$mathExpTemplateConstantFillings = F2(
	function (constants, mathExp) {
		var _p9 = mathExp;
		switch (_p9.ctor) {
			case 'MathNum':
				return A2(_elm_lang$core$List$map, _user$project$Lang$MathNum, constants);
			case 'MathVar':
				return {
					ctor: '::',
					_0: mathExp,
					_1: {ctor: '[]'}
				};
			default:
				return A2(
					_elm_lang$core$List$map,
					_user$project$Lang$MathOp(_p9._0),
					A3(
						_elm_lang$core$List$foldl,
						F2(
							function (child, priorCombos) {
								var thisChildFillings = A2(_user$project$LocEqn$mathExpTemplateConstantFillings, constants, child);
								return A2(
									_elm_lang$core$List$concatMap,
									function (childFilling) {
										return A2(
											_elm_lang$core$List$map,
											function (priorArgs) {
												return A2(
													_elm_lang$core$Basics_ops['++'],
													priorArgs,
													{
														ctor: '::',
														_0: childFilling,
														_1: {ctor: '[]'}
													});
											},
											priorCombos);
									},
									thisChildFillings);
							}),
						{
							ctor: '::',
							_0: {ctor: '[]'},
							_1: {ctor: '[]'}
						},
						_p9._1));
		}
	});
var _user$project$LocEqn$mathExpTemplateLocFillings = F2(
	function (locIds, mathExp) {
		var _p10 = mathExp;
		switch (_p10.ctor) {
			case 'MathNum':
				return {
					ctor: '::',
					_0: mathExp,
					_1: {ctor: '[]'}
				};
			case 'MathVar':
				return A2(_elm_lang$core$List$map, _user$project$Lang$MathVar, locIds);
			default:
				return A2(
					_elm_lang$core$List$map,
					_user$project$Lang$MathOp(_p10._0),
					A3(
						_elm_lang$core$List$foldl,
						F2(
							function (child, priorCombos) {
								var thisChildFillings = A2(_user$project$LocEqn$mathExpTemplateLocFillings, locIds, child);
								return A2(
									_elm_lang$core$List$concatMap,
									function (childFilling) {
										return A2(
											_elm_lang$core$List$map,
											function (priorArgs) {
												return A2(
													_elm_lang$core$Basics_ops['++'],
													priorArgs,
													{
														ctor: '::',
														_0: childFilling,
														_1: {ctor: '[]'}
													});
											},
											priorCombos);
									},
									thisChildFillings);
							}),
						{
							ctor: '::',
							_0: {ctor: '[]'},
							_1: {ctor: '[]'}
						},
						_p10._1));
		}
	});
var _user$project$LocEqn$littleConstants = {
	ctor: '::',
	_0: 0,
	_1: {
		ctor: '::',
		_0: 1,
		_1: {
			ctor: '::',
			_0: 2,
			_1: {
				ctor: '::',
				_0: 10,
				_1: {
					ctor: '::',
					_0: 3,
					_1: {
						ctor: '::',
						_0: 20,
						_1: {
							ctor: '::',
							_0: 50,
							_1: {
								ctor: '::',
								_0: 4,
								_1: {
									ctor: '::',
									_0: 300,
									_1: {
										ctor: '::',
										_0: 5,
										_1: {
											ctor: '::',
											_0: 0.5,
											_1: {
												ctor: '::',
												_0: 100,
												_1: {
													ctor: '::',
													_0: 200,
													_1: {
														ctor: '::',
														_0: 30,
														_1: {
															ctor: '::',
															_0: 60,
															_1: {
																ctor: '::',
																_0: 80,
																_1: {
																	ctor: '::',
																	_0: 15,
																	_1: {
																		ctor: '::',
																		_0: 360,
																		_1: {
																			ctor: '::',
																			_0: 180,
																			_1: {
																				ctor: '::',
																				_0: 120,
																				_1: {
																					ctor: '::',
																					_0: 6,
																					_1: {
																						ctor: '::',
																						_0: 150,
																						_1: {
																							ctor: '::',
																							_0: 40,
																							_1: {
																								ctor: '::',
																								_0: 8,
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$LocEqn$maybeExtractUnsharedExpression = F2(
	function (lhs, rhs) {
		var _p11 = {ctor: '_Tuple2', _0: lhs, _1: rhs};
		_v10_3:
		do {
			if (_p11.ctor === '_Tuple2') {
				switch (_p11._0.ctor) {
					case 'MathNum':
						if (_p11._1.ctor === 'MathNum') {
							return _elm_lang$core$Native_Utils.eq(_p11._0._0, _p11._1._0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: lhs, _1: rhs});
						} else {
							break _v10_3;
						}
					case 'MathVar':
						if (_p11._1.ctor === 'MathVar') {
							return _elm_lang$core$Native_Utils.eq(_p11._0._0, _p11._1._0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: lhs, _1: rhs});
						} else {
							break _v10_3;
						}
					default:
						if (_p11._1.ctor === 'MathOp') {
							var _p15 = _p11._1._1;
							var _p14 = _p11._0._1;
							if (!_elm_lang$core$Native_Utils.eq(_p11._0._0, _p11._1._0)) {
								return _elm_lang$core$Maybe$Just(
									{ctor: '_Tuple2', _0: lhs, _1: rhs});
							} else {
								if (_elm_lang$core$Native_Utils.eq(_p14, _p15)) {
									return _elm_lang$core$Maybe$Nothing;
								} else {
									if (!_elm_lang$core$Native_Utils.eq(
										_elm_lang$core$List$length(_p14),
										_elm_lang$core$List$length(_p15))) {
										return _elm_lang$core$Maybe$Just(
											{ctor: '_Tuple2', _0: lhs, _1: rhs});
									} else {
										var unsharedSubexpressions = A2(
											_elm_lang$core$List$map,
											function (_p12) {
												var _p13 = _p12;
												return A2(_user$project$LocEqn$maybeExtractUnsharedExpression, _p13._0, _p13._1);
											},
											A2(_user$project$Utils$zip, _p14, _p15));
										if (A2(
											_elm_lang$core$List$all,
											F2(
												function (x, y) {
													return _elm_lang$core$Native_Utils.eq(x, y);
												})(_elm_lang$core$Maybe$Nothing),
											unsharedSubexpressions)) {
											return _elm_lang$core$Maybe$Nothing;
										} else {
											if (_elm_lang$core$Native_Utils.cmp(
												A2(
													_user$project$Utils$count,
													F2(
														function (x, y) {
															return !_elm_lang$core$Native_Utils.eq(x, y);
														})(_elm_lang$core$Maybe$Nothing),
													unsharedSubexpressions),
												1) > 0) {
												return _elm_lang$core$Maybe$Just(
													{ctor: '_Tuple2', _0: lhs, _1: rhs});
											} else {
												var justUnsharedSubexpressionPair = A2(
													_user$project$Utils$fromJust_,
													'extractUnsharedExpression this is logically impossible',
													A2(
														_user$project$Utils$findFirst,
														F2(
															function (x, y) {
																return !_elm_lang$core$Native_Utils.eq(x, y);
															})(_elm_lang$core$Maybe$Nothing),
														unsharedSubexpressions));
												return justUnsharedSubexpressionPair;
											}
										}
									}
								}
							}
						} else {
							break _v10_3;
						}
				}
			} else {
				break _v10_3;
			}
		} while(false);
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: lhs, _1: rhs});
	});
var _user$project$LocEqn$correctFloatErrors = function (mathExp) {
	var _p16 = mathExp;
	switch (_p16.ctor) {
		case 'MathNum':
			return _user$project$Lang$MathNum(
				_user$project$Utils$correctFloatError(_p16._0));
		case 'MathVar':
			return mathExp;
		default:
			return A2(
				_user$project$Lang$MathOp,
				_p16._0,
				A2(_elm_lang$core$List$map, _user$project$LocEqn$correctFloatErrors, _p16._1));
	}
};
var _user$project$LocEqn$normPolyPowSortKey = function (_p17) {
	var _p18 = _p17;
	var _p19 = _p18._0;
	if (_p19.ctor === 'NormPolyLoc') {
		return _elm_lang$core$Basics$toFloat(_p19._0);
	} else {
		return 0 - _user$project$Utils$infinity;
	}
};
var _user$project$LocEqn$normPolyPowLocIds = function (_p20) {
	var _p21 = _p20;
	var _p22 = _p21._0;
	if (_p22.ctor === 'NormPolyLoc') {
		return {
			ctor: '::',
			_0: _p22._0,
			_1: {ctor: '[]'}
		};
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$LocEqn$normPolyPowExponentSortNum = function (_p23) {
	var _p24 = _p23;
	var _p25 = _p24._1;
	_v18_2:
	do {
		if (_p25.ctor === 'NormPolyAdd') {
			if (_p25._0.ctor === '[]') {
				return 0;
			} else {
				if ((_p25._0._0._1.ctor === '[]') && (_p25._0._1.ctor === '[]')) {
					return _p25._0._0._0;
				} else {
					break _v18_2;
				}
			}
		} else {
			break _v18_2;
		}
	} while(false);
	return 0 - _user$project$Utils$infinity;
};
var _user$project$LocEqn$normPolyMultTermSortKey = function (_p26) {
	var _p27 = _p26;
	var _p28 = _p27._1;
	var powTermPowers = A2(_elm_lang$core$List$map, _user$project$LocEqn$normPolyPowExponentSortNum, _p28);
	var locIds = A2(_elm_lang$core$List$concatMap, _user$project$LocEqn$normPolyPowLocIds, _p28);
	return {
		ctor: '_Tuple6',
		_0: _elm_lang$core$Basics$negate(
			A2(
				_elm_lang$core$Maybe$withDefault,
				0 - _user$project$Utils$infinity,
				_elm_lang$core$List$maximum(powTermPowers))),
		_1: _elm_lang$core$List$length(_p28),
		_2: A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$negate,
			_elm_lang$core$List$reverse(
				_elm_lang$core$List$sort(powTermPowers))),
		_3: locIds,
		_4: A2(_elm_lang$core$List$map, _elm_lang$core$Basics$negate, powTermPowers),
		_5: _p27._0
	};
};
var _user$project$LocEqn$normPolyPowTermsCompatible = F2(
	function (aPowTerms, bPowTerms) {
		normPolyPowTermsCompatible:
		while (true) {
			var _p29 = {ctor: '_Tuple2', _0: aPowTerms, _1: bPowTerms};
			_v20_2:
			do {
				if (_p29.ctor === '_Tuple2') {
					if (_p29._0.ctor === '[]') {
						if (_p29._1.ctor === '[]') {
							return true;
						} else {
							break _v20_2;
						}
					} else {
						if (_p29._1.ctor === '::') {
							var maybeMatchingTermRemoved = A2(
								_user$project$Utils$maybeFindAndRemoveFirst,
								function (bPowTerm) {
									return _elm_lang$core$Native_Utils.eq(_p29._0._0, bPowTerm);
								},
								bPowTerms);
							var _p30 = maybeMatchingTermRemoved;
							if (_p30.ctor === 'Just') {
								var _v22 = _p29._0._1,
									_v23 = _p30._0._1;
								aPowTerms = _v22;
								bPowTerms = _v23;
								continue normPolyPowTermsCompatible;
							} else {
								return false;
							}
						} else {
							break _v20_2;
						}
					}
				} else {
					break _v20_2;
				}
			} while(false);
			return false;
		}
	});
var _user$project$LocEqn$topLevelMultTerms = function (_p31) {
	var _p32 = _p31;
	return _p32._0;
};
var _user$project$LocEqn$debugLog = _user$project$Config$debugLog(_user$project$Config$debugSync);
var _user$project$LocEqn$mathExpSimplify = function (mathExp) {
	var simplified = function () {
		var _p33 = mathExp;
		switch (_p33.ctor) {
			case 'MathNum':
				return mathExp;
			case 'MathVar':
				return mathExp;
			default:
				var _p51 = _p33._0;
				var children_ = A2(_elm_lang$core$List$map, _user$project$LocEqn$mathExpSimplify, _p33._1);
				var mathExp_ = A2(_user$project$Lang$MathOp, _p51, children_);
				var _p34 = children_;
				if (((_p34.ctor === '::') && (_p34._1.ctor === '::')) && (_p34._1._1.ctor === '[]')) {
					var _p49 = _p34._1._0;
					var _p48 = _p34._0;
					var _p35 = _p51;
					switch (_p35.ctor) {
						case 'Plus':
							var _p36 = {ctor: '_Tuple2', _0: _p48, _1: _p49};
							_v28_5:
							do {
								_v28_3:
								do {
									_v28_2:
									do {
										_v28_1:
										do {
											_v28_0:
											do {
												if (_p36.ctor === '_Tuple2') {
													switch (_p36._0.ctor) {
														case 'MathOp':
															switch (_p36._1.ctor) {
																case 'MathNum':
																	if (_p36._1._0 === 0) {
																		break _v28_1;
																	} else {
																		if ((((_p36._0._0.ctor === 'Minus') && (_p36._0._1.ctor === '::')) && (_p36._0._1._1.ctor === '::')) && (_p36._0._1._1._1.ctor === '[]')) {
																			break _v28_2;
																		} else {
																			break _v28_5;
																		}
																	}
																case 'MathOp':
																	if ((((_p36._0._0.ctor === 'Minus') && (_p36._0._1.ctor === '::')) && (_p36._0._1._1.ctor === '::')) && (_p36._0._1._1._1.ctor === '[]')) {
																		break _v28_2;
																	} else {
																		if ((((_p36._1._0.ctor === 'Minus') && (_p36._1._1.ctor === '::')) && (_p36._1._1._1.ctor === '::')) && (_p36._1._1._1._1.ctor === '[]')) {
																			break _v28_3;
																		} else {
																			break _v28_5;
																		}
																	}
																default:
																	if ((((_p36._0._0.ctor === 'Minus') && (_p36._0._1.ctor === '::')) && (_p36._0._1._1.ctor === '::')) && (_p36._0._1._1._1.ctor === '[]')) {
																		break _v28_2;
																	} else {
																		break _v28_5;
																	}
															}
														case 'MathNum':
															switch (_p36._1.ctor) {
																case 'MathOp':
																	if (_p36._0._0 === 0) {
																		break _v28_0;
																	} else {
																		if ((((_p36._1._0.ctor === 'Minus') && (_p36._1._1.ctor === '::')) && (_p36._1._1._1.ctor === '::')) && (_p36._1._1._1._1.ctor === '[]')) {
																			break _v28_3;
																		} else {
																			break _v28_5;
																		}
																	}
																case 'MathNum':
																	if (_p36._0._0 === 0) {
																		break _v28_0;
																	} else {
																		if (_p36._1._0 === 0) {
																			break _v28_1;
																		} else {
																			return _user$project$Lang$MathNum(_p36._0._0 + _p36._1._0);
																		}
																	}
																default:
																	if (_p36._0._0 === 0) {
																		break _v28_0;
																	} else {
																		break _v28_5;
																	}
															}
														default:
															switch (_p36._1.ctor) {
																case 'MathNum':
																	if (_p36._1._0 === 0) {
																		break _v28_1;
																	} else {
																		break _v28_5;
																	}
																case 'MathOp':
																	if ((((_p36._1._0.ctor === 'Minus') && (_p36._1._1.ctor === '::')) && (_p36._1._1._1.ctor === '::')) && (_p36._1._1._1._1.ctor === '[]')) {
																		break _v28_3;
																	} else {
																		break _v28_5;
																	}
																default:
																	break _v28_5;
															}
													}
												} else {
													break _v28_5;
												}
											} while(false);
											return _p49;
										} while(false);
										return _p48;
									} while(false);
									return _elm_lang$core$Native_Utils.eq(_p36._0._1._1._0, _p36._1) ? _p36._0._1._0 : mathExp_;
								} while(false);
								return _elm_lang$core$Native_Utils.eq(_p36._1._1._1._0, _p36._0) ? _p36._1._1._0 : mathExp_;
							} while(false);
							return mathExp_;
						case 'Minus':
							var _p37 = {ctor: '_Tuple2', _0: _p48, _1: _p49};
							_v29_10:
							do {
								_v29_7:
								do {
									_v29_6:
									do {
										_v29_0:
										do {
											if (_p37.ctor === '_Tuple2') {
												switch (_p37._1.ctor) {
													case 'MathOp':
														if (((_p37._1._1.ctor === '::') && (_p37._1._1._1.ctor === '::')) && (_p37._1._1._1._1.ctor === '[]')) {
															switch (_p37._1._0.ctor) {
																case 'Mult':
																	switch (_p37._0.ctor) {
																		case 'MathNum':
																			if (_p37._0._0 === 0) {
																				if (_p37._1._1._0.ctor === 'MathNum') {
																					return A2(
																						_user$project$Lang$MathOp,
																						_user$project$Lang$Mult,
																						{
																							ctor: '::',
																							_0: _user$project$Lang$MathNum(0 - _p37._1._1._0._0),
																							_1: {
																								ctor: '::',
																								_0: _p37._1._1._1._0,
																								_1: {ctor: '[]'}
																							}
																						});
																				} else {
																					if (_p37._1._1._1._0.ctor === 'MathNum') {
																						return A2(
																							_user$project$Lang$MathOp,
																							_user$project$Lang$Mult,
																							{
																								ctor: '::',
																								_0: _user$project$Lang$MathNum(0 - _p37._1._1._1._0._0),
																								_1: {
																									ctor: '::',
																									_0: _p37._1._1._0,
																									_1: {ctor: '[]'}
																								}
																							});
																					} else {
																						break _v29_10;
																					}
																				}
																			} else {
																				break _v29_10;
																			}
																		case 'MathOp':
																			if ((((_p37._0._0.ctor === 'Plus') && (_p37._0._1.ctor === '::')) && (_p37._0._1._1.ctor === '::')) && (_p37._0._1._1._1.ctor === '[]')) {
																				break _v29_7;
																			} else {
																				break _v29_10;
																			}
																		default:
																			break _v29_10;
																	}
																case 'Div':
																	switch (_p37._0.ctor) {
																		case 'MathNum':
																			if ((_p37._0._0 === 0) && (_p37._1._1._0.ctor === 'MathNum')) {
																				return A2(
																					_user$project$Lang$MathOp,
																					_user$project$Lang$Div,
																					{
																						ctor: '::',
																						_0: _user$project$Lang$MathNum(0 - _p37._1._1._0._0),
																						_1: {
																							ctor: '::',
																							_0: _p37._1._1._1._0,
																							_1: {ctor: '[]'}
																						}
																					});
																			} else {
																				break _v29_10;
																			}
																		case 'MathOp':
																			if ((((_p37._0._0.ctor === 'Plus') && (_p37._0._1.ctor === '::')) && (_p37._0._1._1.ctor === '::')) && (_p37._0._1._1._1.ctor === '[]')) {
																				break _v29_7;
																			} else {
																				break _v29_10;
																			}
																		default:
																			break _v29_10;
																	}
																case 'Minus':
																	switch (_p37._0.ctor) {
																		case 'MathNum':
																			if (_p37._0._0 === 0) {
																				if ((_p37._1._1._0.ctor === 'MathNum') && (_p37._1._1._0._0 === 0)) {
																					return _p37._1._1._1._0;
																				} else {
																					return A2(
																						_user$project$Lang$MathOp,
																						_user$project$Lang$Minus,
																						{
																							ctor: '::',
																							_0: _p37._1._1._1._0,
																							_1: {
																								ctor: '::',
																								_0: _p37._1._1._0,
																								_1: {ctor: '[]'}
																							}
																						});
																				}
																			} else {
																				break _v29_6;
																			}
																		case 'MathOp':
																			break _v29_6;
																		default:
																			break _v29_6;
																	}
																case 'Plus':
																	if (((((_p37._0.ctor === 'MathOp') && (_p37._0._0.ctor === 'Plus')) && (_p37._0._1.ctor === '::')) && (_p37._0._1._1.ctor === '::')) && (_p37._0._1._1._1.ctor === '[]')) {
																		break _v29_7;
																	} else {
																		var _p43 = _p37._0;
																		var _p42 = _p37._1._1._1._0;
																		var _p41 = _p37._1._1._0;
																		return _elm_lang$core$Native_Utils.eq(_p42, _p43) ? _user$project$MathExp$neg(_p41) : (_elm_lang$core$Native_Utils.eq(_p41, _p43) ? _user$project$MathExp$neg(_p42) : mathExp_);
																	}
																default:
																	if (((((_p37._0.ctor === 'MathOp') && (_p37._0._0.ctor === 'Plus')) && (_p37._0._1.ctor === '::')) && (_p37._0._1._1.ctor === '::')) && (_p37._0._1._1._1.ctor === '[]')) {
																		break _v29_7;
																	} else {
																		break _v29_10;
																	}
															}
														} else {
															if (((((_p37._0.ctor === 'MathOp') && (_p37._0._0.ctor === 'Plus')) && (_p37._0._1.ctor === '::')) && (_p37._0._1._1.ctor === '::')) && (_p37._0._1._1._1.ctor === '[]')) {
																break _v29_7;
															} else {
																break _v29_10;
															}
														}
													case 'MathNum':
														switch (_p37._0.ctor) {
															case 'MathOp':
																if (_p37._1._0 === 0) {
																	break _v29_0;
																} else {
																	if ((((_p37._0._0.ctor === 'Plus') && (_p37._0._1.ctor === '::')) && (_p37._0._1._1.ctor === '::')) && (_p37._0._1._1._1.ctor === '[]')) {
																		break _v29_7;
																	} else {
																		break _v29_10;
																	}
																}
															case 'MathNum':
																if (_p37._1._0 === 0) {
																	break _v29_0;
																} else {
																	return _user$project$Lang$MathNum(_p37._0._0 - _p37._1._0);
																}
															default:
																if (_p37._1._0 === 0) {
																	break _v29_0;
																} else {
																	break _v29_10;
																}
														}
													default:
														if (((((_p37._0.ctor === 'MathOp') && (_p37._0._0.ctor === 'Plus')) && (_p37._0._1.ctor === '::')) && (_p37._0._1._1.ctor === '::')) && (_p37._0._1._1._1.ctor === '[]')) {
															break _v29_7;
														} else {
															break _v29_10;
														}
												}
											} else {
												break _v29_10;
											}
										} while(false);
										return _p48;
									} while(false);
									return A2(
										_user$project$Lang$MathOp,
										_user$project$Lang$Plus,
										{
											ctor: '::',
											_0: _p37._0,
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$Lang$MathOp,
													_user$project$Lang$Minus,
													{
														ctor: '::',
														_0: _p37._1._1._1._0,
														_1: {
															ctor: '::',
															_0: _p37._1._1._0,
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										});
								} while(false);
								var _p40 = _p37._1;
								var _p39 = _p37._0._1._1._0;
								var _p38 = _p37._0._1._0;
								return _elm_lang$core$Native_Utils.eq(_p39, _p40) ? _p38 : (_elm_lang$core$Native_Utils.eq(_p38, _p40) ? _p39 : mathExp_);
							} while(false);
							return _elm_lang$core$Native_Utils.eq(_p48, _p49) ? _user$project$Lang$MathNum(0) : mathExp_;
						case 'Mult':
							var _p44 = {ctor: '_Tuple2', _0: _p48, _1: _p49};
							_v30_11:
							do {
								_v30_3:
								do {
									_v30_2:
									do {
										_v30_1:
										do {
											_v30_0:
											do {
												if (_p44.ctor === '_Tuple2') {
													switch (_p44._0.ctor) {
														case 'MathNum':
															switch (_p44._1.ctor) {
																case 'MathNum':
																	switch (_p44._0._0) {
																		case 1:
																			break _v30_0;
																		case 0:
																			switch (_p44._1._0) {
																				case 1:
																					break _v30_1;
																				case 0:
																					break _v30_2;
																				default:
																					break _v30_2;
																			}
																		default:
																			switch (_p44._1._0) {
																				case 1:
																					break _v30_1;
																				case 0:
																					break _v30_3;
																				default:
																					return _user$project$Lang$MathNum(_p44._0._0 * _p44._1._0);
																			}
																	}
																case 'MathOp':
																	if (((_p44._1._1.ctor === '::') && (_p44._1._1._1.ctor === '::')) && (_p44._1._1._1._1.ctor === '[]')) {
																		switch (_p44._1._0.ctor) {
																			case 'Minus':
																				switch (_p44._0._0) {
																					case 1:
																						break _v30_0;
																					case 0:
																						break _v30_2;
																					case -1:
																						return A2(
																							_user$project$Lang$MathOp,
																							_user$project$Lang$Minus,
																							{
																								ctor: '::',
																								_0: _p44._1._1._1._0,
																								_1: {
																									ctor: '::',
																									_0: _p44._1._1._0,
																									_1: {ctor: '[]'}
																								}
																							});
																					default:
																						break _v30_11;
																				}
																			case 'Mult':
																				switch (_p44._0._0) {
																					case 1:
																						break _v30_0;
																					case 0:
																						break _v30_2;
																					default:
																						if (_p44._1._1._0.ctor === 'MathNum') {
																							return A2(
																								_user$project$Lang$MathOp,
																								_user$project$Lang$Mult,
																								{
																									ctor: '::',
																									_0: _user$project$Lang$MathNum(_p44._0._0 * _p44._1._1._0._0),
																									_1: {
																										ctor: '::',
																										_0: _p44._1._1._1._0,
																										_1: {ctor: '[]'}
																									}
																								});
																						} else {
																							if (_p44._1._1._1._0.ctor === 'MathNum') {
																								return A2(
																									_user$project$Lang$MathOp,
																									_user$project$Lang$Mult,
																									{
																										ctor: '::',
																										_0: _user$project$Lang$MathNum(_p44._0._0 * _p44._1._1._1._0._0),
																										_1: {
																											ctor: '::',
																											_0: _p44._1._1._0,
																											_1: {ctor: '[]'}
																										}
																									});
																							} else {
																								break _v30_11;
																							}
																						}
																				}
																			default:
																				switch (_p44._0._0) {
																					case 1:
																						break _v30_0;
																					case 0:
																						break _v30_2;
																					default:
																						break _v30_11;
																				}
																		}
																	} else {
																		switch (_p44._0._0) {
																			case 1:
																				break _v30_0;
																			case 0:
																				break _v30_2;
																			default:
																				break _v30_11;
																		}
																	}
																default:
																	switch (_p44._0._0) {
																		case 1:
																			break _v30_0;
																		case 0:
																			break _v30_2;
																		default:
																			break _v30_11;
																	}
															}
														case 'MathOp':
															if (_p44._1.ctor === 'MathNum') {
																if (((_p44._0._1.ctor === '::') && (_p44._0._1._1.ctor === '::')) && (_p44._0._1._1._1.ctor === '[]')) {
																	switch (_p44._0._0.ctor) {
																		case 'Minus':
																			switch (_p44._1._0) {
																				case 1:
																					break _v30_1;
																				case 0:
																					break _v30_3;
																				case -1:
																					return A2(
																						_user$project$Lang$MathOp,
																						_user$project$Lang$Minus,
																						{
																							ctor: '::',
																							_0: _p44._0._1._1._0,
																							_1: {
																								ctor: '::',
																								_0: _p44._0._1._0,
																								_1: {ctor: '[]'}
																							}
																						});
																				default:
																					break _v30_11;
																			}
																		case 'Mult':
																			switch (_p44._1._0) {
																				case 1:
																					break _v30_1;
																				case 0:
																					break _v30_3;
																				default:
																					if (_p44._0._1._0.ctor === 'MathNum') {
																						return A2(
																							_user$project$Lang$MathOp,
																							_user$project$Lang$Mult,
																							{
																								ctor: '::',
																								_0: _user$project$Lang$MathNum(_p44._1._0 * _p44._0._1._0._0),
																								_1: {
																									ctor: '::',
																									_0: _p44._0._1._1._0,
																									_1: {ctor: '[]'}
																								}
																							});
																					} else {
																						if (_p44._0._1._1._0.ctor === 'MathNum') {
																							return A2(
																								_user$project$Lang$MathOp,
																								_user$project$Lang$Mult,
																								{
																									ctor: '::',
																									_0: _user$project$Lang$MathNum(_p44._1._0 * _p44._0._1._1._0._0),
																									_1: {
																										ctor: '::',
																										_0: _p44._0._1._0,
																										_1: {ctor: '[]'}
																									}
																								});
																						} else {
																							break _v30_11;
																						}
																					}
																			}
																		default:
																			switch (_p44._1._0) {
																				case 1:
																					break _v30_1;
																				case 0:
																					break _v30_3;
																				default:
																					break _v30_11;
																			}
																	}
																} else {
																	switch (_p44._1._0) {
																		case 1:
																			break _v30_1;
																		case 0:
																			break _v30_3;
																		default:
																			break _v30_11;
																	}
																}
															} else {
																break _v30_11;
															}
														default:
															if (_p44._1.ctor === 'MathNum') {
																switch (_p44._1._0) {
																	case 1:
																		break _v30_1;
																	case 0:
																		break _v30_3;
																	default:
																		break _v30_11;
																}
															} else {
																break _v30_11;
															}
													}
												} else {
													break _v30_11;
												}
											} while(false);
											return _p49;
										} while(false);
										return _p48;
									} while(false);
									return _user$project$Lang$MathNum(0);
								} while(false);
								return _user$project$Lang$MathNum(0);
							} while(false);
							return mathExp_;
						case 'Div':
							var _p45 = {ctor: '_Tuple2', _0: _p48, _1: _p49};
							_v31_5:
							do {
								_v31_1:
								do {
									_v31_0:
									do {
										if (_p45.ctor === '_Tuple2') {
											if (_p45._1.ctor === 'MathNum') {
												if (_p45._0.ctor === 'MathNum') {
													switch (_p45._1._0) {
														case 1:
															break _v31_0;
														case -1:
															break _v31_1;
														default:
															var _p46 = _p45._1._0;
															return (!_elm_lang$core$Native_Utils.eq(_p46, 0)) ? _user$project$Lang$MathNum(_p45._0._0 / _p46) : mathExp_;
													}
												} else {
													switch (_p45._1._0) {
														case 1:
															break _v31_0;
														case -1:
															break _v31_1;
														default:
															var _p47 = _p45._1._0;
															return (!_elm_lang$core$Native_Utils.eq(_p47, 0)) ? A2(
																_user$project$Lang$MathOp,
																_user$project$Lang$Mult,
																{
																	ctor: '::',
																	_0: _user$project$Lang$MathNum(1 / _p47),
																	_1: {
																		ctor: '::',
																		_0: _p48,
																		_1: {ctor: '[]'}
																	}
																}) : mathExp_;
													}
												}
											} else {
												if ((_p45._0.ctor === 'MathNum') && (_p45._0._0 === 0)) {
													return _user$project$Lang$MathNum(0);
												} else {
													break _v31_5;
												}
											}
										} else {
											break _v31_5;
										}
									} while(false);
									return _p48;
								} while(false);
								return A2(
									_user$project$Lang$MathOp,
									_user$project$Lang$Mult,
									{
										ctor: '::',
										_0: _user$project$Lang$MathNum(-1),
										_1: {
											ctor: '::',
											_0: _p48,
											_1: {ctor: '[]'}
										}
									});
							} while(false);
							return (_elm_lang$core$Native_Utils.eq(_p48, _p49) && (!_elm_lang$core$Native_Utils.eq(
								_p49,
								_user$project$Lang$MathNum(0)))) ? _user$project$Lang$MathNum(1) : mathExp_;
						default:
							return mathExp_;
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'LocEqn',
						{
							start: {line: 62, column: 9},
							end: {line: 155, column: 91}
						},
						_p34)(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'mathExpSimplify: op without 2 children ',
							_elm_lang$core$Basics$toString(mathExp)));
				}
		}
	}();
	return _elm_lang$core$Native_Utils.eq(simplified, mathExp) ? mathExp : A2(
		_user$project$LocEqn$debugLog,
		'double simplification',
		_user$project$LocEqn$mathExpSimplify(simplified));
};
var _user$project$LocEqn$PolyLoc = function (a) {
	return {ctor: 'PolyLoc', _0: a};
};
var _user$project$LocEqn$PolyPow = F2(
	function (a, b) {
		return {ctor: 'PolyPow', _0: a, _1: b};
	});
var _user$project$LocEqn$PolyMult = F2(
	function (a, b) {
		return {ctor: 'PolyMult', _0: a, _1: b};
	});
var _user$project$LocEqn$polyToString = function (poly) {
	var _p52 = poly;
	switch (_p52.ctor) {
		case 'PolyAdd':
			if (_p52._0.ctor === '[]') {
				return '0';
			} else {
				if (((_p52._0._0.ctor === 'PolyMult') && (_p52._0._0._1.ctor === '[]')) && (_p52._0._1.ctor === '[]')) {
					return _elm_lang$core$Basics$toString(_p52._0._0._0);
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$String$join,
								' + ',
								A2(_elm_lang$core$List$map, _user$project$LocEqn$polyToString, _p52._0)),
							')'));
				}
			}
		case 'PolyMult':
			if (_p52._1.ctor === '[]') {
				return _elm_lang$core$Basics$toString(_p52._0);
			} else {
				if (_p52._0 === 1) {
					return A2(
						_elm_lang$core$String$join,
						'*',
						A2(_elm_lang$core$List$map, _user$project$LocEqn$polyToString, _p52._1));
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p52._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'*',
							_user$project$LocEqn$polyToString(
								A2(_user$project$LocEqn$PolyMult, 1, _p52._1))));
				}
			}
		case 'PolyPow':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$LocEqn$polyToString(_p52._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'^',
					_user$project$LocEqn$polyToString(_p52._1)));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'k',
				_elm_lang$core$Basics$toString(_p52._0));
	}
};
var _user$project$LocEqn$PolyAdd = function (a) {
	return {ctor: 'PolyAdd', _0: a};
};
var _user$project$LocEqn$normPolyAddToPoly = function (normPolyAdd) {
	var _p53 = normPolyAdd;
	if (_p53.ctor === 'NormPolyAdd') {
		return _user$project$LocEqn$PolyAdd(
			A2(_elm_lang$core$List$map, _user$project$LocEqn$normPolyMultToPoly, _p53._0));
	} else {
		return _user$project$LocEqn$PolyLoc(_p53._0);
	}
};
var _user$project$LocEqn$normPolyMultToPoly = function (_p54) {
	var _p55 = _p54;
	return A2(
		_user$project$LocEqn$PolyMult,
		_p55._0,
		A2(_elm_lang$core$List$map, _user$project$LocEqn$normPolyPowToPoly, _p55._1));
};
var _user$project$LocEqn$normPolyPowToPoly = function (_p56) {
	var _p57 = _p56;
	return A2(
		_user$project$LocEqn$PolyPow,
		_user$project$LocEqn$normPolyAddToPoly(_p57._0),
		_user$project$LocEqn$normPolyAddToPoly(_p57._1));
};
var _user$project$LocEqn$normPolyMultToString = function (_p58) {
	return _user$project$LocEqn$polyToString(
		_user$project$LocEqn$normPolyMultToPoly(_p58));
};
var _user$project$LocEqn$normPolyPowToString = function (_p59) {
	return _user$project$LocEqn$polyToString(
		_user$project$LocEqn$normPolyPowToPoly(_p59));
};
var _user$project$LocEqn$normPolyAddToString = function (_p60) {
	return _user$project$LocEqn$polyToString(
		_user$project$LocEqn$normPolyAddToPoly(_p60));
};
var _user$project$LocEqn$mathExpToPoly = function (mathExp) {
	var _p61 = mathExp;
	_v36_6:
	do {
		switch (_p61.ctor) {
			case 'MathNum':
				return A2(
					_user$project$LocEqn$PolyMult,
					_p61._0,
					{ctor: '[]'});
			case 'MathVar':
				return _user$project$LocEqn$PolyLoc(_p61._0);
			default:
				switch (_p61._0.ctor) {
					case 'Plus':
						return _user$project$LocEqn$PolyAdd(
							A2(_elm_lang$core$List$map, _user$project$LocEqn$mathExpToPoly, _p61._1));
					case 'Minus':
						if (_p61._1.ctor === '::') {
							return _user$project$LocEqn$PolyAdd(
								{
									ctor: '::',
									_0: _user$project$LocEqn$mathExpToPoly(_p61._1._0),
									_1: A2(
										_elm_lang$core$List$map,
										function (child) {
											return A2(
												_user$project$LocEqn$PolyMult,
												-1,
												{
													ctor: '::',
													_0: _user$project$LocEqn$mathExpToPoly(child),
													_1: {ctor: '[]'}
												});
										},
										_p61._1._1)
								});
						} else {
							break _v36_6;
						}
					case 'Mult':
						return A2(
							_user$project$LocEqn$PolyMult,
							1,
							A2(_elm_lang$core$List$map, _user$project$LocEqn$mathExpToPoly, _p61._1));
					case 'Div':
						if (_p61._1.ctor === '::') {
							return A2(
								_user$project$LocEqn$PolyMult,
								1,
								{
									ctor: '::',
									_0: _user$project$LocEqn$mathExpToPoly(_p61._1._0),
									_1: A2(
										_elm_lang$core$List$map,
										function (child) {
											return A2(
												_user$project$LocEqn$PolyPow,
												_user$project$LocEqn$mathExpToPoly(child),
												A2(
													_user$project$LocEqn$PolyMult,
													-1,
													{ctor: '[]'}));
										},
										_p61._1._1)
								});
						} else {
							break _v36_6;
						}
					default:
						break _v36_6;
				}
		}
	} while(false);
	return _elm_lang$core$Native_Utils.crashCase(
		'LocEqn',
		{
			start: {line: 668, column: 3},
			end: {line: 688, column: 108}
		},
		_p61)(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'LocEqn.mathExpToPoly can only handle Plus/Minus/Mult/Div, got ',
			_elm_lang$core$Basics$toString(mathExp)));
};
var _user$project$LocEqn$NormPolyTopLevelAdd = function (a) {
	return {ctor: 'NormPolyTopLevelAdd', _0: a};
};
var _user$project$LocEqn$NormPolyMult = F2(
	function (a, b) {
		return {ctor: 'NormPolyMult', _0: a, _1: b};
	});
var _user$project$LocEqn$normPolyAddTerm = F2(
	function (normPolyMultTerm, normPolyMultTerms) {
		var _p63 = normPolyMultTerm;
		var aCoeff = _p63._0;
		var aPowTerms = _p63._1;
		var maybeMatchingTermRemoved = A2(
			_user$project$Utils$maybeFindAndRemoveFirst,
			function (_p64) {
				var _p65 = _p64;
				return A2(_user$project$LocEqn$normPolyPowTermsCompatible, aPowTerms, _p65._1);
			},
			normPolyMultTerms);
		var results = function () {
			var _p66 = maybeMatchingTermRemoved;
			if (_p66.ctor === 'Just') {
				var _p68 = _p66._0._1;
				var _p67 = _p66._0._0._0;
				return _elm_lang$core$Native_Utils.eq(aCoeff + _p67, 0) ? _p68 : {
					ctor: '::',
					_0: A2(_user$project$LocEqn$NormPolyMult, aCoeff + _p67, _p66._0._0._1),
					_1: _p68
				};
			} else {
				return {ctor: '::', _0: normPolyMultTerm, _1: normPolyMultTerms};
			}
		}();
		return results;
	});
var _user$project$LocEqn$normPolyMultScalarMult = F2(
	function (coeff, _p69) {
		var _p70 = _p69;
		return A2(_user$project$LocEqn$NormPolyMult, coeff * _p70._0, _p70._1);
	});
var _user$project$LocEqn$NormPolyPow = F2(
	function (a, b) {
		return {ctor: 'NormPolyPow', _0: a, _1: b};
	});
var _user$project$LocEqn$NormPolyLoc = function (a) {
	return {ctor: 'NormPolyLoc', _0: a};
};
var _user$project$LocEqn$NormPolyAdd = function (a) {
	return {ctor: 'NormPolyAdd', _0: a};
};
var _user$project$LocEqn$polyZero = _user$project$LocEqn$NormPolyAdd(
	{
		ctor: '::',
		_0: A2(
			_user$project$LocEqn$NormPolyMult,
			0,
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$LocEqn$polyOne = _user$project$LocEqn$NormPolyAdd(
	{
		ctor: '::',
		_0: A2(
			_user$project$LocEqn$NormPolyMult,
			1,
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$LocEqn$multTerms = function (normPolyAdd) {
	var _p71 = normPolyAdd;
	if (_p71.ctor === 'NormPolyAdd') {
		return _p71._0;
	} else {
		return {
			ctor: '::',
			_0: A2(
				_user$project$LocEqn$NormPolyMult,
				1,
				{
					ctor: '::',
					_0: A2(
						_user$project$LocEqn$NormPolyPow,
						_user$project$LocEqn$NormPolyLoc(_p71._0),
						_user$project$LocEqn$polyOne),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$LocEqn$polyConst = function (n) {
	return _user$project$LocEqn$NormPolyAdd(
		{
			ctor: '::',
			_0: A2(
				_user$project$LocEqn$NormPolyMult,
				n,
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$LocEqn$polyLoc = function (locId) {
	return _user$project$LocEqn$NormPolyAdd(
		{
			ctor: '::',
			_0: A2(
				_user$project$LocEqn$NormPolyMult,
				1,
				{
					ctor: '::',
					_0: A2(
						_user$project$LocEqn$NormPolyPow,
						_user$project$LocEqn$NormPolyLoc(locId),
						_user$project$LocEqn$polyOne),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$LocEqn$normPolyAddToNormPoly = function (normPolyAdd) {
	normPolyAddToNormPoly:
	while (true) {
		var _p72 = normPolyAdd;
		if (_p72.ctor === 'NormPolyLoc') {
			var _v42 = _user$project$LocEqn$polyLoc(_p72._0);
			normPolyAdd = _v42;
			continue normPolyAddToNormPoly;
		} else {
			return _user$project$LocEqn$NormPolyTopLevelAdd(_p72._0);
		}
	}
};
var _user$project$LocEqn$normPolyAdd = F2(
	function (aNormPolyAdd, bNormPolyAdd) {
		normPolyAdd:
		while (true) {
			var _p73 = {ctor: '_Tuple2', _0: aNormPolyAdd, _1: bNormPolyAdd};
			if (_p73._0.ctor === 'NormPolyLoc') {
				var _v44 = _user$project$LocEqn$polyLoc(_p73._0._0),
					_v45 = bNormPolyAdd;
				aNormPolyAdd = _v44;
				bNormPolyAdd = _v45;
				continue normPolyAdd;
			} else {
				if (_p73._1.ctor === 'NormPolyLoc') {
					var _v46 = aNormPolyAdd,
						_v47 = _user$project$LocEqn$polyLoc(_p73._1._0);
					aNormPolyAdd = _v46;
					bNormPolyAdd = _v47;
					continue normPolyAdd;
				} else {
					return _user$project$LocEqn$NormPolyAdd(
						A3(
							_elm_lang$core$List$foldl,
							_user$project$LocEqn$normPolyAddTerm,
							{ctor: '[]'},
							A2(_elm_lang$core$Basics_ops['++'], _p73._0._0, _p73._1._0)));
				}
			}
		}
	});
var _user$project$LocEqn$normPolyMultPowTermWithPowTerms = F2(
	function (normPolyPowTerm, normPolyPowTerms) {
		var _p74 = normPolyPowTerm;
		_v48_5:
		do {
			_v48_3:
			do {
				_v48_2:
				do {
					_v48_1:
					do {
						if (_p74._1.ctor === 'NormPolyAdd') {
							if (_p74._1._0.ctor === '[]') {
								return normPolyPowTerms;
							} else {
								if (_p74._0.ctor === 'NormPolyAdd') {
									if (_p74._0._0.ctor === '[]') {
										if (((_p74._1._0._0._0 === 0) && (_p74._1._0._0._1.ctor === '[]')) && (_p74._1._0._1.ctor === '[]')) {
											break _v48_1;
										} else {
											break _v48_2;
										}
									} else {
										if ((_p74._1._0._0._1.ctor === '[]') && (_p74._1._0._1.ctor === '[]')) {
											if ((_p74._0._0._0._1.ctor === '[]') && (_p74._0._0._1.ctor === '[]')) {
												if (_p74._1._0._0._0 === 0) {
													break _v48_1;
												} else {
													if (_p74._0._0._0._0 === 0) {
														break _v48_3;
													} else {
														var _p75 = A2(
															_elm_lang$core$List$partition,
															function (powTerm) {
																var _p76 = powTerm;
																if ((((((((_p76._0.ctor === 'NormPolyAdd') && (_p76._0._0.ctor === '::')) && (_p76._0._0._0._1.ctor === '[]')) && (_p76._0._0._1.ctor === '[]')) && (_p76._1.ctor === 'NormPolyAdd')) && (_p76._1._0.ctor === '::')) && (_p76._1._0._0._1.ctor === '[]')) && (_p76._1._0._1.ctor === '[]')) {
																	return true;
																} else {
																	return false;
																}
															},
															normPolyPowTerms);
														var constantPowTerms = _p75._0;
														var otherPowTerms = _p75._1;
														var constant = _elm_lang$core$List$product(
															A2(
																_elm_lang$core$List$map,
																function (powTerm) {
																	var _p77 = powTerm;
																	if ((((((((_p77._0.ctor === 'NormPolyAdd') && (_p77._0._0.ctor === '::')) && (_p77._0._0._0._1.ctor === '[]')) && (_p77._0._0._1.ctor === '[]')) && (_p77._1.ctor === 'NormPolyAdd')) && (_p77._1._0.ctor === '::')) && (_p77._1._0._0._1.ctor === '[]')) && (_p77._1._0._1.ctor === '[]')) {
																		return Math.pow(_p77._0._0._0._0, _p77._1._0._0._0);
																	} else {
																		return _elm_lang$core$Native_Utils.crashCase(
																			'LocEqn',
																			{
																				start: {line: 411, column: 15},
																				end: {line: 413, column: 124}
																			},
																			_p77)(
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'LocEqn.normPolyMultPowTermWithPowTerms shouldn\'t get here, got ',
																				_elm_lang$core$Basics$toString(powTerm)));
																	}
																},
																{ctor: '::', _0: normPolyPowTerm, _1: constantPowTerms}));
														return _elm_lang$core$Native_Utils.eq(constant, 0) ? {
															ctor: '::',
															_0: A2(_user$project$LocEqn$NormPolyPow, _user$project$LocEqn$polyZero, _user$project$LocEqn$polyOne),
															_1: {ctor: '[]'}
														} : {
															ctor: '::',
															_0: A2(
																_user$project$LocEqn$NormPolyPow,
																_user$project$LocEqn$polyConst(constant),
																_user$project$LocEqn$polyOne),
															_1: otherPowTerms
														};
													}
												}
											} else {
												if (_p74._1._0._0._0 === 0) {
													break _v48_1;
												} else {
													break _v48_5;
												}
											}
										} else {
											if (((_p74._0._0._0._0 === 0) && (_p74._0._0._0._1.ctor === '[]')) && (_p74._0._0._1.ctor === '[]')) {
												break _v48_3;
											} else {
												break _v48_5;
											}
										}
									}
								} else {
									if (((_p74._1._0._0._0 === 0) && (_p74._1._0._0._1.ctor === '[]')) && (_p74._1._0._1.ctor === '[]')) {
										break _v48_1;
									} else {
										break _v48_5;
									}
								}
							}
						} else {
							if (_p74._0.ctor === 'NormPolyAdd') {
								if (_p74._0._0.ctor === '[]') {
									break _v48_2;
								} else {
									if (((_p74._0._0._0._0 === 0) && (_p74._0._0._0._1.ctor === '[]')) && (_p74._0._0._1.ctor === '[]')) {
										break _v48_3;
									} else {
										break _v48_5;
									}
								}
							} else {
								break _v48_5;
							}
						}
					} while(false);
					return normPolyPowTerms;
				} while(false);
				return {
					ctor: '::',
					_0: A2(_user$project$LocEqn$NormPolyPow, _user$project$LocEqn$polyZero, _user$project$LocEqn$polyOne),
					_1: {ctor: '[]'}
				};
			} while(false);
			return {
				ctor: '::',
				_0: A2(_user$project$LocEqn$NormPolyPow, _user$project$LocEqn$polyZero, _user$project$LocEqn$polyOne),
				_1: {ctor: '[]'}
			};
		} while(false);
		var _p79 = normPolyPowTerm;
		var termBase = _p79._0;
		var termExponent = _p79._1;
		var maybeMatchingTermRemoved = A2(
			_user$project$Utils$maybeFindAndRemoveFirst,
			function (_p80) {
				var _p81 = _p80;
				return _elm_lang$core$Native_Utils.eq(termBase, _p81._0);
			},
			normPolyPowTerms);
		var _p82 = maybeMatchingTermRemoved;
		if (_p82.ctor === 'Just') {
			var _p84 = _p82._0._1;
			var newExponent = A2(_user$project$LocEqn$normPolyAdd, termExponent, _p82._0._0._1);
			var _p83 = newExponent;
			_v53_2:
			do {
				if (_p83.ctor === 'NormPolyAdd') {
					if (_p83._0.ctor === '[]') {
						return _p84;
					} else {
						if (((_p83._0._0._0 === 0) && (_p83._0._0._1.ctor === '[]')) && (_p83._0._1.ctor === '[]')) {
							return _p84;
						} else {
							break _v53_2;
						}
					}
				} else {
					break _v53_2;
				}
			} while(false);
			return {
				ctor: '::',
				_0: A2(_user$project$LocEqn$NormPolyPow, _p82._0._0._0, newExponent),
				_1: _p84
			};
		} else {
			return {ctor: '::', _0: normPolyPowTerm, _1: normPolyPowTerms};
		}
	});
var _user$project$LocEqn$normPolyMultPowTermWithMultTerm = F2(
	function (normPolyPowTerm, _p85) {
		var _p86 = _p85;
		var _p87 = _p86._0;
		return _elm_lang$core$Native_Utils.eq(_p87, 0) ? A2(
			_user$project$LocEqn$NormPolyMult,
			0,
			{ctor: '[]'}) : A2(
			_user$project$LocEqn$NormPolyMult,
			_p87,
			A3(
				_elm_lang$core$List$foldl,
				_user$project$LocEqn$normPolyMultPowTermWithPowTerms,
				{
					ctor: '::',
					_0: normPolyPowTerm,
					_1: {ctor: '[]'}
				},
				_p86._1));
	});
var _user$project$LocEqn$normPolyMultPowTerm = F2(
	function (normPolyPowTerm, normPolyMultTerms) {
		return A2(
			_elm_lang$core$List$map,
			_user$project$LocEqn$normPolyMultPowTermWithMultTerm(normPolyPowTerm),
			normPolyMultTerms);
	});
var _user$project$LocEqn$normPolyMultTerm = F2(
	function (normPolyMultTerm, normPolyMultTerms) {
		var _p88 = normPolyMultTerm;
		var aCoeff = _p88._0;
		var aPowTerms = _p88._1;
		return _elm_lang$core$Native_Utils.eq(aCoeff, 0) ? {ctor: '[]'} : A2(
			_elm_lang$core$List$map,
			_user$project$LocEqn$normPolyMultScalarMult(aCoeff),
			A3(_elm_lang$core$List$foldl, _user$project$LocEqn$normPolyMultPowTerm, normPolyMultTerms, aPowTerms));
	});
var _user$project$LocEqn$topLevelPolyDistribute = F2(
	function (_p90, _p89) {
		var _p91 = _p90;
		var _p92 = _p89;
		var result = _user$project$LocEqn$NormPolyTopLevelAdd(
			A3(
				_elm_lang$core$List$foldl,
				_user$project$LocEqn$normPolyAddTerm,
				{ctor: '[]'},
				A2(
					_elm_lang$core$List$concatMap,
					function (aMultTerm) {
						return A2(_user$project$LocEqn$normPolyMultTerm, aMultTerm, _p92._0);
					},
					_p91._0)));
		return result;
	});
var _user$project$LocEqn$normPolyToNormPolyAdd = function (_p93) {
	var _p94 = _p93;
	return _user$project$LocEqn$NormPolyAdd(_p94._0);
};
var _user$project$LocEqn$polyScalarMult = F2(
	function (coeff, normPolyAdd) {
		var result = function () {
			var _p95 = normPolyAdd;
			if (_p95.ctor === 'NormPolyAdd') {
				return _elm_lang$core$Native_Utils.eq(coeff, 0) ? _user$project$LocEqn$polyZero : _user$project$LocEqn$NormPolyAdd(
					A2(
						_elm_lang$core$List$map,
						_user$project$LocEqn$normPolyMultScalarMult(coeff),
						_p95._0));
			} else {
				return _user$project$LocEqn$NormPolyAdd(
					{
						ctor: '::',
						_0: A2(
							_user$project$LocEqn$NormPolyMult,
							coeff,
							{
								ctor: '::',
								_0: A2(
									_user$project$LocEqn$NormPolyPow,
									_user$project$LocEqn$NormPolyLoc(_p95._0),
									_user$project$LocEqn$polyOne),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		}();
		return result;
	});
var _user$project$LocEqn$topLevelPolyScalarMult = F2(
	function (coeff, _p96) {
		var _p97 = _p96;
		return _user$project$LocEqn$normPolyAddToNormPoly(
			A2(
				_user$project$LocEqn$polyScalarMult,
				coeff,
				_user$project$LocEqn$NormPolyAdd(_p97._0)));
	});
var _user$project$LocEqn$normPolyToPoly = function (_p98) {
	var _p99 = _p98;
	return _user$project$LocEqn$normPolyAddToPoly(
		_user$project$LocEqn$NormPolyAdd(_p99._0));
};
var _user$project$LocEqn$normPolyToString = function (_p100) {
	return _user$project$LocEqn$polyToString(
		_user$project$LocEqn$normPolyToPoly(_p100));
};
var _user$project$LocEqn$normPolyAddSort = function (normPolyAdd) {
	var _p101 = normPolyAdd;
	if (_p101.ctor === 'NormPolyLoc') {
		return normPolyAdd;
	} else {
		return _user$project$LocEqn$NormPolyAdd(
			A2(
				_elm_lang$core$List$sortBy,
				_user$project$LocEqn$normPolyMultTermSortKey,
				A2(_elm_lang$core$List$map, _user$project$LocEqn$normPolyMultSort, _p101._0)));
	}
};
var _user$project$LocEqn$normPolyMultSort = function (_p102) {
	var _p103 = _p102;
	return A2(
		_user$project$LocEqn$NormPolyMult,
		_p103._0,
		A2(
			_elm_lang$core$List$sortBy,
			_user$project$LocEqn$normPolyPowSortKey,
			A2(_elm_lang$core$List$map, _user$project$LocEqn$normPolyPowSort, _p103._1)));
};
var _user$project$LocEqn$normPolyPowSort = function (_p104) {
	var _p105 = _p104;
	return A2(
		_user$project$LocEqn$NormPolyPow,
		_user$project$LocEqn$normPolyAddSort(_p105._0),
		_user$project$LocEqn$normPolyAddSort(_p105._1));
};
var _user$project$LocEqn$normPolySort = function (_p106) {
	var _p107 = _p106;
	return _user$project$LocEqn$NormPolyTopLevelAdd(
		A2(
			_elm_lang$core$List$sortBy,
			_user$project$LocEqn$normPolyMultTermSortKey,
			A2(_elm_lang$core$List$map, _user$project$LocEqn$normPolyMultSort, _p107._0)));
};
var _user$project$LocEqn$polyNorm = function (poly) {
	var result = function () {
		var _p108 = poly;
		switch (_p108.ctor) {
			case 'PolyAdd':
				if (_p108._0.ctor === '[]') {
					return _user$project$LocEqn$normPolyAddToNormPoly(_user$project$LocEqn$polyZero);
				} else {
					return _user$project$LocEqn$NormPolyTopLevelAdd(
						A3(
							_elm_lang$core$List$foldl,
							_user$project$LocEqn$normPolyAddTerm,
							{ctor: '[]'},
							A2(
								_elm_lang$core$List$concatMap,
								_user$project$LocEqn$topLevelMultTerms,
								A2(_elm_lang$core$List$map, _user$project$LocEqn$polyNorm, _p108._0))));
				}
			case 'PolyMult':
				if (_p108._1.ctor === '[]') {
					return _user$project$LocEqn$NormPolyTopLevelAdd(
						{
							ctor: '::',
							_0: A2(
								_user$project$LocEqn$NormPolyMult,
								_p108._0,
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						});
				} else {
					return A3(
						_elm_lang$core$List$foldl,
						_user$project$LocEqn$topLevelPolyDistribute,
						_user$project$LocEqn$normPolyAddToNormPoly(_user$project$LocEqn$polyOne),
						A2(
							_elm_lang$core$List$map,
							_user$project$LocEqn$topLevelPolyScalarMult(_p108._0),
							A2(_elm_lang$core$List$map, _user$project$LocEqn$polyNorm, _p108._1)));
				}
			case 'PolyPow':
				var _p109 = {
					ctor: '_Tuple2',
					_0: _user$project$LocEqn$polyNorm(_p108._0),
					_1: _user$project$LocEqn$polyNorm(_p108._1)
				};
				var normBase = _p109._0;
				var normExpon = _p109._1;
				var _p110 = {ctor: '_Tuple2', _0: normBase, _1: normExpon};
				_v66_12:
				do {
					_v66_4:
					do {
						_v66_3:
						do {
							_v66_2:
							do {
								_v66_1:
								do {
									if (_p110.ctor === '_Tuple2') {
										if (_p110._1._0.ctor === '[]') {
											return _user$project$LocEqn$normPolyAddToNormPoly(_user$project$LocEqn$polyOne);
										} else {
											if ((_p110._1._0._0._1.ctor === '[]') && (_p110._1._0._1.ctor === '[]')) {
												if (_p110._0._0.ctor === '[]') {
													switch (_p110._1._0._0._0) {
														case 0:
															break _v66_1;
														case 1:
															break _v66_2;
														default:
															break _v66_3;
													}
												} else {
													if (_p110._0._0._1.ctor === '[]') {
														if (_p110._0._0._0._1.ctor === '[]') {
															switch (_p110._1._0._0._0) {
																case 0:
																	break _v66_1;
																case 1:
																	break _v66_2;
																default:
																	if (_p110._0._0._0._0 === 0) {
																		break _v66_4;
																	} else {
																		return _user$project$LocEqn$normPolyAddToNormPoly(
																			_user$project$LocEqn$polyConst(
																				Math.pow(_p110._0._0._0._0, _p110._1._0._0._0)));
																	}
															}
														} else {
															if (_p110._0._0._0._1._1.ctor === '[]') {
																switch (_p110._1._0._0._0) {
																	case 0:
																		break _v66_1;
																	case 1:
																		break _v66_2;
																	default:
																		var _p111 = _p110._1._0._0._0;
																		return _user$project$LocEqn$NormPolyTopLevelAdd(
																			{
																				ctor: '::',
																				_0: A2(
																					_user$project$LocEqn$NormPolyMult,
																					Math.pow(_p110._0._0._0._0, _p111),
																					{
																						ctor: '::',
																						_0: A2(
																							_user$project$LocEqn$NormPolyPow,
																							_p110._0._0._0._1._0._0,
																							A2(_user$project$LocEqn$polyScalarMult, _p111, _p110._0._0._0._1._0._1)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			});
																}
															} else {
																if (_p110._0._0._0._1._1._1.ctor === '[]') {
																	switch (_p110._1._0._0._0) {
																		case 0:
																			break _v66_1;
																		case 1:
																			break _v66_2;
																		default:
																			var _p112 = _p110._1._0._0._0;
																			return _user$project$LocEqn$NormPolyTopLevelAdd(
																				{
																					ctor: '::',
																					_0: A2(
																						_user$project$LocEqn$NormPolyMult,
																						Math.pow(_p110._0._0._0._0, _p112),
																						{
																							ctor: '::',
																							_0: A2(
																								_user$project$LocEqn$NormPolyPow,
																								_p110._0._0._0._1._0._0,
																								A2(_user$project$LocEqn$polyScalarMult, _p112, _p110._0._0._0._1._0._1)),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_user$project$LocEqn$NormPolyPow,
																									_p110._0._0._0._1._1._0._0,
																									A2(_user$project$LocEqn$polyScalarMult, _p112, _p110._0._0._0._1._1._0._1)),
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				});
																	}
																} else {
																	if (_p110._0._0._0._1._1._1._1.ctor === '[]') {
																		switch (_p110._1._0._0._0) {
																			case 0:
																				break _v66_1;
																			case 1:
																				break _v66_2;
																			default:
																				var _p113 = _p110._1._0._0._0;
																				return _user$project$LocEqn$NormPolyTopLevelAdd(
																					{
																						ctor: '::',
																						_0: A2(
																							_user$project$LocEqn$NormPolyMult,
																							Math.pow(_p110._0._0._0._0, _p113),
																							{
																								ctor: '::',
																								_0: A2(
																									_user$project$LocEqn$NormPolyPow,
																									_p110._0._0._0._1._0._0,
																									A2(_user$project$LocEqn$polyScalarMult, _p113, _p110._0._0._0._1._0._1)),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_user$project$LocEqn$NormPolyPow,
																										_p110._0._0._0._1._1._0._0,
																										A2(_user$project$LocEqn$polyScalarMult, _p113, _p110._0._0._0._1._1._0._1)),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_user$project$LocEqn$NormPolyPow,
																											_p110._0._0._0._1._1._1._0._0,
																											A2(_user$project$LocEqn$polyScalarMult, _p113, _p110._0._0._0._1._1._1._0._1)),
																										_1: {ctor: '[]'}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					});
																		}
																	} else {
																		if (_p110._0._0._0._1._1._1._1._1.ctor === '[]') {
																			switch (_p110._1._0._0._0) {
																				case 0:
																					break _v66_1;
																				case 1:
																					break _v66_2;
																				default:
																					var _p114 = _p110._1._0._0._0;
																					return _user$project$LocEqn$NormPolyTopLevelAdd(
																						{
																							ctor: '::',
																							_0: A2(
																								_user$project$LocEqn$NormPolyMult,
																								Math.pow(_p110._0._0._0._0, _p114),
																								{
																									ctor: '::',
																									_0: A2(
																										_user$project$LocEqn$NormPolyPow,
																										_p110._0._0._0._1._0._0,
																										A2(_user$project$LocEqn$polyScalarMult, _p114, _p110._0._0._0._1._0._1)),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_user$project$LocEqn$NormPolyPow,
																											_p110._0._0._0._1._1._0._0,
																											A2(_user$project$LocEqn$polyScalarMult, _p114, _p110._0._0._0._1._1._0._1)),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_user$project$LocEqn$NormPolyPow,
																												_p110._0._0._0._1._1._1._0._0,
																												A2(_user$project$LocEqn$polyScalarMult, _p114, _p110._0._0._0._1._1._1._0._1)),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_user$project$LocEqn$NormPolyPow,
																													_p110._0._0._0._1._1._1._1._0._0,
																													A2(_user$project$LocEqn$polyScalarMult, _p114, _p110._0._0._0._1._1._1._1._0._1)),
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						});
																			}
																		} else {
																			switch (_p110._1._0._0._0) {
																				case 0:
																					break _v66_1;
																				case 1:
																					break _v66_2;
																				default:
																					if (_p110._0._0._0._1._1._1._1._1._1.ctor === '[]') {
																						var _p115 = _p110._1._0._0._0;
																						return _user$project$LocEqn$NormPolyTopLevelAdd(
																							{
																								ctor: '::',
																								_0: A2(
																									_user$project$LocEqn$NormPolyMult,
																									Math.pow(_p110._0._0._0._0, _p115),
																									{
																										ctor: '::',
																										_0: A2(
																											_user$project$LocEqn$NormPolyPow,
																											_p110._0._0._0._1._0._0,
																											A2(_user$project$LocEqn$polyScalarMult, _p115, _p110._0._0._0._1._0._1)),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_user$project$LocEqn$NormPolyPow,
																												_p110._0._0._0._1._1._0._0,
																												A2(_user$project$LocEqn$polyScalarMult, _p115, _p110._0._0._0._1._1._0._1)),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_user$project$LocEqn$NormPolyPow,
																													_p110._0._0._0._1._1._1._0._0,
																													A2(_user$project$LocEqn$polyScalarMult, _p115, _p110._0._0._0._1._1._1._0._1)),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_user$project$LocEqn$NormPolyPow,
																														_p110._0._0._0._1._1._1._1._0._0,
																														A2(_user$project$LocEqn$polyScalarMult, _p115, _p110._0._0._0._1._1._1._1._0._1)),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_user$project$LocEqn$NormPolyPow,
																															_p110._0._0._0._1._1._1._1._1._0._0,
																															A2(_user$project$LocEqn$polyScalarMult, _p115, _p110._0._0._0._1._1._1._1._1._0._1)),
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							});
																					} else {
																						break _v66_12;
																					}
																			}
																		}
																	}
																}
															}
														}
													} else {
														switch (_p110._1._0._0._0) {
															case 0:
																break _v66_1;
															case 1:
																break _v66_2;
															default:
																var _p116 = _p110._1._0._0._0;
																if ((_elm_lang$core$Native_Utils.cmp(_p116, 0) > 0) && _elm_lang$core$Native_Utils.eq(
																	_p116,
																	_elm_lang$core$Basics$toFloat(
																		_elm_lang$core$Basics$round(_p116)))) {
																	return _user$project$LocEqn$polyNorm(
																		A2(
																			_user$project$LocEqn$PolyMult,
																			1,
																			A2(
																				_elm_lang$core$List$repeat,
																				_elm_lang$core$Basics$round(_p116),
																				_user$project$LocEqn$normPolyToPoly(normBase))));
																} else {
																	if ((_elm_lang$core$Native_Utils.cmp(_p116, 0) < 0) && _elm_lang$core$Native_Utils.eq(
																		_p116,
																		_elm_lang$core$Basics$toFloat(
																			_elm_lang$core$Basics$round(_p116)))) {
																		var denominator = _user$project$LocEqn$polyNorm(
																			A2(
																				_user$project$LocEqn$PolyMult,
																				1,
																				A2(
																					_elm_lang$core$List$repeat,
																					_elm_lang$core$Basics$abs(
																						_elm_lang$core$Basics$round(_p116)),
																					_user$project$LocEqn$normPolyToPoly(normBase))));
																		return _user$project$LocEqn$NormPolyTopLevelAdd(
																			{
																				ctor: '::',
																				_0: A2(
																					_user$project$LocEqn$NormPolyMult,
																					1,
																					{
																						ctor: '::',
																						_0: A2(
																							_user$project$LocEqn$NormPolyPow,
																							_user$project$LocEqn$normPolyToNormPolyAdd(denominator),
																							_user$project$LocEqn$polyConst(-1)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			});
																	} else {
																		return _user$project$LocEqn$NormPolyTopLevelAdd(
																			{
																				ctor: '::',
																				_0: A2(
																					_user$project$LocEqn$NormPolyMult,
																					1,
																					{
																						ctor: '::',
																						_0: A2(
																							_user$project$LocEqn$NormPolyPow,
																							_user$project$LocEqn$normPolyToNormPolyAdd(normBase),
																							_user$project$LocEqn$normPolyToNormPolyAdd(normExpon)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			});
																	}
																}
														}
													}
												}
											} else {
												if (_p110._0._0.ctor === '[]') {
													break _v66_3;
												} else {
													if (((_p110._0._0._0._0 === 0) && (_p110._0._0._0._1.ctor === '[]')) && (_p110._0._0._1.ctor === '[]')) {
														break _v66_4;
													} else {
														break _v66_12;
													}
												}
											}
										}
									} else {
										break _v66_12;
									}
								} while(false);
								return _user$project$LocEqn$normPolyAddToNormPoly(_user$project$LocEqn$polyOne);
							} while(false);
							return normBase;
						} while(false);
						return _user$project$LocEqn$normPolyAddToNormPoly(_user$project$LocEqn$polyZero);
					} while(false);
					return _user$project$LocEqn$normPolyAddToNormPoly(_user$project$LocEqn$polyZero);
				} while(false);
				return _user$project$LocEqn$NormPolyTopLevelAdd(
					{
						ctor: '::',
						_0: A2(
							_user$project$LocEqn$NormPolyMult,
							1,
							{
								ctor: '::',
								_0: A2(
									_user$project$LocEqn$NormPolyPow,
									_user$project$LocEqn$normPolyToNormPolyAdd(normBase),
									_user$project$LocEqn$normPolyToNormPolyAdd(normExpon)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			default:
				return _user$project$LocEqn$NormPolyTopLevelAdd(
					{
						ctor: '::',
						_0: A2(
							_user$project$LocEqn$NormPolyMult,
							1,
							{
								ctor: '::',
								_0: A2(
									_user$project$LocEqn$NormPolyPow,
									_user$project$LocEqn$NormPolyLoc(_p108._0),
									_user$project$LocEqn$polyOne),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
		}
	}();
	return _user$project$LocEqn$normPolySort(result);
};
var _user$project$LocEqn$normPolyPowToMathExp = function (_p117) {
	var _p118 = _p117;
	var _p123 = _p118._1;
	var _p122 = _p118._0;
	var _p119 = _p123;
	_v68_4:
	do {
		if (_p119.ctor === 'NormPolyAdd') {
			if (_p119._0.ctor === '[]') {
				return _user$project$Lang$MathNum(1);
			} else {
				if ((_p119._0._0._1.ctor === '[]') && (_p119._0._1.ctor === '[]')) {
					switch (_p119._0._0._0) {
						case 0:
							return _user$project$Lang$MathNum(1);
						case 1:
							return _user$project$LocEqn$normPolyAddToMathExp(_p122);
						default:
							var _p120 = _p119._0._0._0;
							return ((_elm_lang$core$Native_Utils.cmp(_p120, 1) > 0) && _elm_lang$core$Native_Utils.eq(
								_p120,
								_elm_lang$core$Basics$toFloat(
									_elm_lang$core$Basics$round(_p120)))) ? A2(
								_user$project$Lang$MathOp,
								_user$project$Lang$Mult,
								{
									ctor: '::',
									_0: _user$project$LocEqn$normPolyAddToMathExp(_p122),
									_1: {
										ctor: '::',
										_0: _user$project$LocEqn$normPolyPowToMathExp(
											A2(
												_user$project$LocEqn$NormPolyPow,
												_p122,
												_user$project$LocEqn$NormPolyAdd(
													{
														ctor: '::',
														_0: A2(
															_user$project$LocEqn$NormPolyMult,
															_elm_lang$core$Basics$toFloat(
																_elm_lang$core$Basics$round(_p120)) - 1,
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}))),
										_1: {ctor: '[]'}
									}
								}) : _elm_lang$core$Native_Utils.crash(
								'LocEqn',
								{
									start: {line: 844, column: 9},
									end: {line: 844, column: 20}
								})(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'LocEqn.normPolyPowToMathExp unexpected exponent: should only be positive integers >1 by now: got ',
									_elm_lang$core$Basics$toString(
										A2(_user$project$LocEqn$NormPolyPow, _p122, _p123))));
					}
				} else {
					break _v68_4;
				}
			}
		} else {
			break _v68_4;
		}
	} while(false);
	return _elm_lang$core$Native_Utils.crashCase(
		'LocEqn',
		{
			start: {line: 827, column: 3},
			end: {line: 847, column: 165}
		},
		_p119)(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'LocEqn.normPolyPowToMathExp can\'t handle non-integer, non-constant powers yet: got ',
			_elm_lang$core$Basics$toString(
				A2(_user$project$LocEqn$NormPolyPow, _p122, _p123))));
};
var _user$project$LocEqn$normPolyAddToMathExp = function (normPolyAdd) {
	var _p124 = normPolyAdd;
	if (_p124.ctor === 'NormPolyLoc') {
		return _user$project$Lang$MathVar(_p124._0);
	} else {
		var _p137 = _p124._0;
		var _p125 = _p137;
		if (_p125.ctor === '[]') {
			return _user$project$Lang$MathNum(0);
		} else {
			if (_p125._1.ctor === '[]') {
				return _user$project$LocEqn$normPolyMultToMathExp(_p125._0);
			} else {
				var coeffs = A2(
					_elm_lang$core$List$map,
					function (_p126) {
						var _p127 = _p126;
						return _p127._0;
					},
					_p137);
				var possibleCoeffFactor = _user$project$Utils$last_(
					_elm_lang$core$List$sort(coeffs));
				if (_user$project$Utils$allSame(
					A2(_elm_lang$core$List$map, _elm_lang$core$Basics$abs, coeffs)) && (!_elm_lang$core$Native_Utils.eq(possibleCoeffFactor, 1))) {
					var coeffFactor = possibleCoeffFactor;
					var factoredTerms = A2(
						_elm_lang$core$List$map,
						function (_p128) {
							var _p129 = _p128;
							var _p130 = _p129._1;
							return _elm_lang$core$Native_Utils.eq(_p129._0, coeffFactor) ? A2(_user$project$LocEqn$NormPolyMult, 1, _p130) : A2(_user$project$LocEqn$NormPolyMult, -1, _p130);
						},
						_p137);
					return _user$project$LocEqn$normPolyMultToMathExp(
						A2(
							_user$project$LocEqn$NormPolyMult,
							coeffFactor,
							{
								ctor: '::',
								_0: A2(
									_user$project$LocEqn$NormPolyPow,
									_user$project$LocEqn$NormPolyAdd(factoredTerms),
									_user$project$LocEqn$NormPolyAdd(
										{
											ctor: '::',
											_0: A2(
												_user$project$LocEqn$NormPolyMult,
												1,
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										})),
								_1: {ctor: '[]'}
							}));
				} else {
					var _p131 = A2(
						_elm_lang$core$List$partition,
						function (_p132) {
							var _p133 = _p132;
							return _elm_lang$core$Native_Utils.cmp(_p133._0, 0) < 0;
						},
						_p137);
					var negativeTerms = _p131._0;
					var nonNegativeTerms = _p131._1;
					var _p134 = {ctor: '_Tuple2', _0: negativeTerms, _1: nonNegativeTerms};
					if (_p134._1.ctor === '::') {
						if (_p134._1._1.ctor === '::') {
							var remainingTerms = {
								ctor: '::',
								_0: _p134._1._1._0,
								_1: A2(_elm_lang$core$Basics_ops['++'], _p134._1._1._1, negativeTerms)
							};
							return A2(
								_user$project$Lang$MathOp,
								_user$project$Lang$Plus,
								{
									ctor: '::',
									_0: _user$project$LocEqn$normPolyMultToMathExp(_p134._1._0),
									_1: {
										ctor: '::',
										_0: _user$project$LocEqn$normPolyAddToMathExp(
											_user$project$LocEqn$NormPolyAdd(remainingTerms)),
										_1: {ctor: '[]'}
									}
								});
						} else {
							if (_p134._0.ctor === '::') {
								var negNegativeTerms = A2(
									_elm_lang$core$List$map,
									_user$project$LocEqn$normPolyMultScalarMult(-1),
									negativeTerms);
								return A2(
									_user$project$Lang$MathOp,
									_user$project$Lang$Minus,
									{
										ctor: '::',
										_0: _user$project$LocEqn$normPolyMultToMathExp(_p134._1._0),
										_1: {
											ctor: '::',
											_0: _user$project$LocEqn$normPolyAddToMathExp(
												_user$project$LocEqn$NormPolyAdd(negNegativeTerms)),
											_1: {ctor: '[]'}
										}
									});
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'LocEqn',
									{
										start: {line: 737, column: 13},
										end: {line: 756, column: 120}
									},
									_p134)('LocEqn.normPolyAddToMathExp shouldn\'t get here; single term handled in earlier case statement');
							}
						}
					} else {
						if (_p134._0.ctor === '::') {
							return A2(
								_user$project$Lang$MathOp,
								_user$project$Lang$Plus,
								{
									ctor: '::',
									_0: _user$project$LocEqn$normPolyMultToMathExp(_p125._0),
									_1: {
										ctor: '::',
										_0: _user$project$LocEqn$normPolyAddToMathExp(
											_user$project$LocEqn$NormPolyAdd(_p125._1)),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'LocEqn',
								{
									start: {line: 737, column: 13},
									end: {line: 756, column: 120}
								},
								_p134)('LocEqn.normPolyAddToMathExp shouldn\'t get here; empty term list in earlier case statement');
						}
					}
				}
			}
		}
	}
};
var _user$project$LocEqn$normPolyMultToMathExp = function (_p138) {
	var _p139 = _p138;
	var _p157 = _p139._0;
	var isNegativeExponent = function (_p140) {
		var _p141 = _p140;
		var _p142 = _p141._1;
		if ((((_p142.ctor === 'NormPolyAdd') && (_p142._0.ctor === '::')) && (_p142._0._0._1.ctor === '[]')) && (_p142._0._1.ctor === '[]')) {
			return _elm_lang$core$Native_Utils.cmp(_p142._0._0._0, 0) < 0;
		} else {
			return false;
		}
	};
	var isZeroExponent = function (_p143) {
		var _p144 = _p143;
		var _p145 = _p144._1;
		_v79_2:
		do {
			if (_p145.ctor === 'NormPolyAdd') {
				if (_p145._0.ctor === '[]') {
					return true;
				} else {
					if ((_p145._0._0._1.ctor === '[]') && (_p145._0._1.ctor === '[]')) {
						return _elm_lang$core$Native_Utils.eq(_p145._0._0._0, 0);
					} else {
						break _v79_2;
					}
				}
			} else {
				break _v79_2;
			}
		} while(false);
		return false;
	};
	var _p146 = A2(_elm_lang$core$List$partition, isZeroExponent, _p139._1);
	var zeroPowers = _p146._0;
	var remainingTerms = _p146._1;
	var _p147 = A2(_elm_lang$core$List$partition, isNegativeExponent, remainingTerms);
	var negativePowers = _p147._0;
	var otherPowers = _p147._1;
	var flipExponentSign = function (_p148) {
		var _p149 = _p148;
		var _p153 = _p149._1;
		var _p152 = _p149._0;
		var _p150 = _p153;
		if ((((_p150.ctor === 'NormPolyAdd') && (_p150._0.ctor === '::')) && (_p150._0._0._1.ctor === '[]')) && (_p150._0._1.ctor === '[]')) {
			return A2(
				_user$project$LocEqn$NormPolyPow,
				_p152,
				_user$project$LocEqn$polyConst(0 - _p150._0._0._0));
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'LocEqn',
				{
					start: {line: 781, column: 5},
					end: {line: 783, column: 162}
				},
				_p150)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'LocEqn.normPolyMultToMathExp shouldn\'t reach here; got ',
					_elm_lang$core$Basics$toString(
						A2(_user$project$LocEqn$NormPolyPow, _p152, _p153))));
		}
	};
	var _p154 = {ctor: '_Tuple3', _0: negativePowers, _1: otherPowers, _2: _p157};
	_v82_1:
	do {
		_v82_0:
		do {
			if (_p154._0.ctor === '::') {
				if (_p154._2 === 0) {
					break _v82_0;
				} else {
					return A2(
						_user$project$Lang$MathOp,
						_user$project$Lang$Div,
						{
							ctor: '::',
							_0: _user$project$LocEqn$normPolyMultToMathExp(
								A2(_user$project$LocEqn$NormPolyMult, _p157, otherPowers)),
							_1: {
								ctor: '::',
								_0: _user$project$LocEqn$normPolyMultToMathExp(
									A2(
										_user$project$LocEqn$NormPolyMult,
										1,
										A2(_elm_lang$core$List$map, flipExponentSign, negativePowers))),
								_1: {ctor: '[]'}
							}
						});
				}
			} else {
				switch (_p154._2) {
					case 0:
						break _v82_0;
					case 1:
						if (_p154._1.ctor === '[]') {
							break _v82_1;
						} else {
							var _p155 = otherPowers;
							if (_p155.ctor === '::') {
								if (_p155._1.ctor === '[]') {
									return _user$project$LocEqn$normPolyPowToMathExp(_p155._0);
								} else {
									return A2(
										_user$project$Lang$MathOp,
										_user$project$Lang$Mult,
										{
											ctor: '::',
											_0: _user$project$LocEqn$normPolyPowToMathExp(_p155._0),
											_1: {
												ctor: '::',
												_0: _user$project$LocEqn$normPolyMultToMathExp(
													A2(_user$project$LocEqn$NormPolyMult, 1, _p155._1)),
												_1: {ctor: '[]'}
											}
										});
								}
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'LocEqn',
									{
										start: {line: 800, column: 7},
										end: {line: 811, column: 108}
									},
									_p155)('LocEqn.normPolyMultToMathExp shouldn\'t get here; should have at least some terms');
							}
						}
					default:
						if (_p154._1.ctor === '[]') {
							break _v82_1;
						} else {
							return (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$Basics$abs(_p157),
								1) > -1) ? A2(
								_user$project$Lang$MathOp,
								_user$project$Lang$Mult,
								{
									ctor: '::',
									_0: _user$project$LocEqn$normPolyMultToMathExp(
										A2(_user$project$LocEqn$NormPolyMult, 1, otherPowers)),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$MathNum(_p157),
										_1: {ctor: '[]'}
									}
								}) : A2(
								_user$project$Lang$MathOp,
								_user$project$Lang$Div,
								{
									ctor: '::',
									_0: _user$project$LocEqn$normPolyMultToMathExp(
										A2(_user$project$LocEqn$NormPolyMult, 1, otherPowers)),
									_1: {
										ctor: '::',
										_0: _user$project$Lang$MathNum(1 / _p157),
										_1: {ctor: '[]'}
									}
								});
						}
				}
			}
		} while(false);
		return _user$project$Lang$MathNum(0);
	} while(false);
	return _user$project$Lang$MathNum(_p157);
};
var _user$project$LocEqn$normPolyToMathExp = function (_p158) {
	var _p159 = _p158;
	return _user$project$LocEqn$normPolyAddToMathExp(
		_user$project$LocEqn$NormPolyAdd(_p159._0));
};
var _user$project$LocEqn$normalizeSimplify = function (mathExp) {
	var polyEqn = _user$project$LocEqn$mathExpToPoly(mathExp);
	var normPolyResult = _user$project$LocEqn$polyNorm(polyEqn);
	var mathExpResult = _user$project$LocEqn$correctFloatErrors(
		_user$project$LocEqn$normPolyToMathExp(normPolyResult));
	return mathExpResult;
};
var _user$project$LocEqn$mathExpTerms = F2(
	function (targetLocId, mathExp) {
		var _p160 = mathExp;
		switch (_p160.ctor) {
			case 'MathNum':
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '_Tuple3',
						_0: 1,
						_1: _user$project$Lang$MathNum(0),
						_2: mathExp
					});
			case 'MathVar':
				return _elm_lang$core$Native_Utils.eq(_p160._0, targetLocId) ? _elm_lang$core$Maybe$Just(
					{
						ctor: '_Tuple3',
						_0: 1,
						_1: _user$project$Lang$MathNum(1),
						_2: _user$project$Lang$MathNum(0)
					}) : _elm_lang$core$Maybe$Just(
					{
						ctor: '_Tuple3',
						_0: 1,
						_1: _user$project$Lang$MathNum(0),
						_2: mathExp
					});
			default:
				var children_ = A2(
					_elm_lang$core$List$map,
					_user$project$LocEqn$mathExpTerms(targetLocId),
					_p160._1);
				var result = function () {
					var _p161 = children_;
					if (((((((_p161.ctor === '::') && (_p161._0.ctor === 'Just')) && (_p161._0._0.ctor === '_Tuple3')) && (_p161._1.ctor === '::')) && (_p161._1._0.ctor === 'Just')) && (_p161._1._0._0.ctor === '_Tuple3')) && (_p161._1._1.ctor === '[]')) {
						var _p170 = _p161._1._0._0._2;
						var _p169 = _p161._1._0._0._0;
						var _p168 = _p161._1._0._0._1;
						var _p167 = _p161._0._0._2;
						var _p166 = _p161._0._0._0;
						var _p165 = _p161._0._0._1;
						var _p162 = _p160._0;
						switch (_p162.ctor) {
							case 'Plus':
								return _elm_lang$core$Native_Utils.eq(_p166, _p169) ? _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple3',
										_0: _p166,
										_1: A2(
											_user$project$Lang$MathOp,
											_user$project$Lang$Plus,
											{
												ctor: '::',
												_0: _p165,
												_1: {
													ctor: '::',
													_0: _p168,
													_1: {ctor: '[]'}
												}
											}),
										_2: A2(
											_user$project$Lang$MathOp,
											_user$project$Lang$Plus,
											{
												ctor: '::',
												_0: _p167,
												_1: {
													ctor: '::',
													_0: _p170,
													_1: {ctor: '[]'}
												}
											})
									}) : _elm_lang$core$Maybe$Nothing;
							case 'Minus':
								return _elm_lang$core$Native_Utils.eq(_p166, _p169) ? _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple3',
										_0: _p166,
										_1: A2(
											_user$project$Lang$MathOp,
											_user$project$Lang$Minus,
											{
												ctor: '::',
												_0: _p165,
												_1: {
													ctor: '::',
													_0: _p168,
													_1: {ctor: '[]'}
												}
											}),
										_2: A2(
											_user$project$Lang$MathOp,
											_user$project$Lang$Minus,
											{
												ctor: '::',
												_0: _p167,
												_1: {
													ctor: '::',
													_0: _p170,
													_1: {ctor: '[]'}
												}
											})
									}) : _elm_lang$core$Maybe$Nothing;
							case 'Mult':
								var _p163 = {ctor: '_Tuple4', _0: _p165, _1: _p167, _2: _p168, _3: _p170};
								_v88_3:
								do {
									if (_p163.ctor === '_Tuple4') {
										if ((_p163._0.ctor === 'MathNum') && (_p163._0._0 === 0)) {
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '_Tuple3',
													_0: _p169,
													_1: A2(
														_user$project$Lang$MathOp,
														_user$project$Lang$Mult,
														{
															ctor: '::',
															_0: _p167,
															_1: {
																ctor: '::',
																_0: _p168,
																_1: {ctor: '[]'}
															}
														}),
													_2: A2(
														_user$project$Lang$MathOp,
														_user$project$Lang$Mult,
														{
															ctor: '::',
															_0: _p167,
															_1: {
																ctor: '::',
																_0: _p170,
																_1: {ctor: '[]'}
															}
														})
												});
										} else {
											if ((_p163._2.ctor === 'MathNum') && (_p163._2._0 === 0)) {
												return _elm_lang$core$Maybe$Just(
													{
														ctor: '_Tuple3',
														_0: _p166,
														_1: A2(
															_user$project$Lang$MathOp,
															_user$project$Lang$Mult,
															{
																ctor: '::',
																_0: _p165,
																_1: {
																	ctor: '::',
																	_0: _p170,
																	_1: {ctor: '[]'}
																}
															}),
														_2: A2(
															_user$project$Lang$MathOp,
															_user$project$Lang$Mult,
															{
																ctor: '::',
																_0: _p167,
																_1: {
																	ctor: '::',
																	_0: _p170,
																	_1: {ctor: '[]'}
																}
															})
													});
											} else {
												if ((((_p163._1.ctor === 'MathNum') && (_p163._1._0 === 0)) && (_p163._3.ctor === 'MathNum')) && (_p163._3._0 === 0)) {
													var newPow = _p166 + _p169;
													return _elm_lang$core$Native_Utils.eq(newPow, 0) ? _elm_lang$core$Maybe$Just(
														{
															ctor: '_Tuple3',
															_0: 1,
															_1: _user$project$Lang$MathNum(0),
															_2: _user$project$Lang$MathNum(1)
														}) : _elm_lang$core$Maybe$Just(
														{
															ctor: '_Tuple3',
															_0: newPow,
															_1: A2(
																_user$project$Lang$MathOp,
																_user$project$Lang$Mult,
																{
																	ctor: '::',
																	_0: _p165,
																	_1: {
																		ctor: '::',
																		_0: _p168,
																		_1: {ctor: '[]'}
																	}
																}),
															_2: _user$project$Lang$MathNum(0)
														});
												} else {
													break _v88_3;
												}
											}
										}
									} else {
										break _v88_3;
									}
								} while(false);
								return _elm_lang$core$Maybe$Nothing;
							case 'Div':
								var _p164 = {ctor: '_Tuple4', _0: _p165, _1: _p167, _2: _p168, _3: _p170};
								_v89_4:
								do {
									_v89_3:
									do {
										if (_p164.ctor === '_Tuple4') {
											if (_p164._2.ctor === 'MathNum') {
												if ((_p164._3.ctor === 'MathNum') && (_p164._3._0 === 0)) {
													switch (_p164._2._0) {
														case 0:
															return _elm_lang$core$Maybe$Nothing;
														case 1:
															if ((_p164._0.ctor === 'MathNum') && (_p164._0._0 === 0)) {
																return _elm_lang$core$Maybe$Just(
																	{
																		ctor: '_Tuple3',
																		_0: 0 - _p169,
																		_1: A2(
																			_user$project$Lang$MathOp,
																			_user$project$Lang$Div,
																			{
																				ctor: '::',
																				_0: _p167,
																				_1: {
																					ctor: '::',
																					_0: _p168,
																					_1: {ctor: '[]'}
																				}
																			}),
																		_2: _user$project$Lang$MathNum(0)
																	});
															} else {
																if ((_p164._1.ctor === 'MathNum') && (_p164._1._0 === 0)) {
																	break _v89_3;
																} else {
																	break _v89_4;
																}
															}
														default:
															if ((_p164._1.ctor === 'MathNum') && (_p164._1._0 === 0)) {
																break _v89_3;
															} else {
																break _v89_4;
															}
													}
												} else {
													if (_p164._2._0 === 0) {
														return _elm_lang$core$Maybe$Just(
															{
																ctor: '_Tuple3',
																_0: _p166,
																_1: A2(
																	_user$project$Lang$MathOp,
																	_user$project$Lang$Div,
																	{
																		ctor: '::',
																		_0: _p165,
																		_1: {
																			ctor: '::',
																			_0: _p170,
																			_1: {ctor: '[]'}
																		}
																	}),
																_2: A2(
																	_user$project$Lang$MathOp,
																	_user$project$Lang$Div,
																	{
																		ctor: '::',
																		_0: _p167,
																		_1: {
																			ctor: '::',
																			_0: _p170,
																			_1: {ctor: '[]'}
																		}
																	})
															});
													} else {
														break _v89_4;
													}
												}
											} else {
												if ((((_p164._1.ctor === 'MathNum') && (_p164._1._0 === 0)) && (_p164._3.ctor === 'MathNum')) && (_p164._3._0 === 0)) {
													break _v89_3;
												} else {
													break _v89_4;
												}
											}
										} else {
											break _v89_4;
										}
									} while(false);
									return _elm_lang$core$Native_Utils.eq(_p166, _p169) ? _elm_lang$core$Maybe$Just(
										{
											ctor: '_Tuple3',
											_0: 1,
											_1: _user$project$Lang$MathNum(0),
											_2: A2(
												_user$project$Lang$MathOp,
												_user$project$Lang$Div,
												{
													ctor: '::',
													_0: _p165,
													_1: {
														ctor: '::',
														_0: _p168,
														_1: {ctor: '[]'}
													}
												})
										}) : _elm_lang$core$Maybe$Just(
										{
											ctor: '_Tuple3',
											_0: _p169 - _p166,
											_1: A2(
												_user$project$Lang$MathOp,
												_user$project$Lang$Div,
												{
													ctor: '::',
													_0: _p165,
													_1: {
														ctor: '::',
														_0: _p168,
														_1: {ctor: '[]'}
													}
												}),
											_2: _user$project$Lang$MathNum(0)
										});
								} while(false);
								return (_elm_lang$core$Native_Utils.eq(_p166, _p169) && (_elm_lang$core$Native_Utils.eq(_p165, _p168) && _elm_lang$core$Native_Utils.eq(_p167, _p170))) ? _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple3',
										_0: 1,
										_1: _user$project$Lang$MathNum(0),
										_2: _user$project$Lang$MathNum(1)
									}) : _elm_lang$core$Maybe$Nothing;
							default:
								return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}();
				var _p171 = result;
				if (_p171.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '_Tuple3',
							_0: _p171._0._0,
							_1: _user$project$LocEqn$normalizeSimplify(_p171._0._1),
							_2: _user$project$LocEqn$normalizeSimplify(_p171._0._2)
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
		}
	});
var _user$project$LocEqn$solveForLocValue = F4(
	function (targetLocId, subst, mathExp, mathExpTargetValue) {
		var mathExpEqualToZero = A2(
			_user$project$LocEqn$constantifyLocs,
			A2(_elm_lang$core$Dict$remove, targetLocId, subst),
			A2(
				_user$project$Lang$MathOp,
				_user$project$Lang$Minus,
				{
					ctor: '::',
					_0: mathExp,
					_1: {
						ctor: '::',
						_0: _user$project$Lang$MathNum(mathExpTargetValue),
						_1: {ctor: '[]'}
					}
				}));
		var _p172 = A2(_user$project$LocEqn$mathExpTerms, targetLocId, mathExpEqualToZero);
		if (_p172.ctor === 'Just') {
			var coeffEvaled = A2(_user$project$LocEqn$mathExpEval, _elm_lang$core$Dict$empty, _p172._0._1);
			var restEvaled = A2(_user$project$LocEqn$mathExpEval, _elm_lang$core$Dict$empty, _p172._0._2);
			var x = Math.pow((0 - restEvaled) / coeffEvaled, 1 / _p172._0._0);
			return (_elm_lang$core$Basics$isNaN(x) || _elm_lang$core$Basics$isInfinite(x)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(x);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$LocEqn$solveForConst = F3(
	function (subst, mathExp, mathExpTargetValue) {
		var locifyConstant = function (mathExp) {
			var _p173 = mathExp;
			switch (_p173.ctor) {
				case 'MathNum':
					return _user$project$Lang$MathVar(-2);
				case 'MathVar':
					return mathExp;
				default:
					return A2(
						_user$project$Lang$MathOp,
						_p173._0,
						A2(_elm_lang$core$List$map, locifyConstant, _p173._1));
			}
		};
		return A4(
			_user$project$LocEqn$solveForLocValue,
			-2,
			subst,
			locifyConstant(mathExp),
			mathExpTargetValue);
	});
var _user$project$LocEqn$mathExpTemplateFillingsLocsFilled = F4(
	function (targetValue, subst, constants, locFillings) {
		var filledWithNiceNumber = A2(
			_elm_lang$core$List$map,
			function (locFilledMathExp) {
				return A2(
					_user$project$Utils$head,
					'LocEqn.mathExpTemplateFillings ranking',
					A2(
						_elm_lang$core$List$sortBy,
						function (mathExp) {
							return _elm_lang$core$Basics$abs(
								A2(_user$project$LocEqn$mathExpEval, subst, mathExp) - targetValue);
						},
						A2(_user$project$LocEqn$mathExpTemplateConstantFillings, constants, locFilledMathExp)));
			},
			locFillings);
		var filledWithExactNumber = function () {
			var fillInConstant = F2(
				function ($const, mathExp) {
					var _p174 = mathExp;
					switch (_p174.ctor) {
						case 'MathNum':
							return _user$project$Lang$MathNum($const);
						case 'MathVar':
							return mathExp;
						default:
							return A2(
								_user$project$Lang$MathOp,
								_p174._0,
								A2(
									_elm_lang$core$List$map,
									fillInConstant($const),
									_p174._1));
					}
				});
			return A2(
				_elm_lang$core$List$filterMap,
				function (locFilledMathExp) {
					return (_elm_lang$core$Native_Utils.cmp(
						_elm_lang$core$List$length(
							_user$project$LocEqn$mathExpLocIds(locFilledMathExp)),
						1) < 1) ? A2(
						_elm_lang$core$Maybe$map,
						function ($const) {
							return A2(fillInConstant, $const, locFilledMathExp);
						},
						A3(_user$project$LocEqn$solveForConst, subst, locFilledMathExp, targetValue)) : _elm_lang$core$Maybe$Nothing;
				},
				locFillings);
		}();
		return A2(_elm_lang$core$Basics_ops['++'], filledWithNiceNumber, filledWithExactNumber);
	});
var _user$project$LocEqn$mathExpTemplateFillings = F4(
	function (targetValue, subst, locIdSet, template) {
		var allLocFillings = A2(
			_user$project$LocEqn$mathExpTemplateLocFillings,
			_elm_lang$core$Set$toList(locIdSet),
			template);
		return A4(_user$project$LocEqn$mathExpTemplateFillingsLocsFilled, targetValue, subst, _user$project$LocEqn$littleConstants, allLocFillings);
	});
var _user$project$LocEqn$solveForLocUnchecked = F4(
	function (locId, locIdToNum, lhs, rhs) {
		var maybeMathExp = function () {
			var _p175 = A2(_user$project$LocEqn$maybeExtractUnsharedExpression, rhs, lhs);
			if (_p175.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var rhs__ = A2(_user$project$LocEqn$constantifyLocs, locIdToNum, _p175._0._1);
				var lhs__ = A2(_user$project$LocEqn$constantifyLocs, locIdToNum, _p175._0._0);
				var _p176 = A2(
					_user$project$LocEqn$mathExpTerms,
					locId,
					A2(
						_user$project$Lang$MathOp,
						_user$project$Lang$Minus,
						{
							ctor: '::',
							_0: lhs__,
							_1: {
								ctor: '::',
								_0: rhs__,
								_1: {ctor: '[]'}
							}
						}));
				if (_p176.ctor === 'Just') {
					var _p179 = _p176._0._2;
					var _p178 = _p176._0._0;
					var _p177 = _p176._0._1;
					return (_elm_lang$core$Native_Utils.eq(_p178, 0) || _elm_lang$core$Native_Utils.eq(
						_p177,
						_user$project$Lang$MathNum(0))) ? _elm_lang$core$Maybe$Nothing : (_elm_lang$core$Native_Utils.eq(_p178, 1) ? _elm_lang$core$Maybe$Just(
						_user$project$LocEqn$normalizeSimplify(
							A2(
								_user$project$Lang$MathOp,
								_user$project$Lang$Div,
								{
									ctor: '::',
									_0: _user$project$MathExp$neg(_p179),
									_1: {
										ctor: '::',
										_0: _p177,
										_1: {ctor: '[]'}
									}
								}))) : (_elm_lang$core$Native_Utils.eq(_p178, -1) ? _elm_lang$core$Maybe$Just(
						_user$project$LocEqn$normalizeSimplify(
							A2(
								_user$project$Lang$MathOp,
								_user$project$Lang$Div,
								{
									ctor: '::',
									_0: _p177,
									_1: {
										ctor: '::',
										_0: _user$project$MathExp$neg(_p179),
										_1: {ctor: '[]'}
									}
								}))) : _elm_lang$core$Maybe$Nothing));
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		}();
		return maybeMathExp;
	});

var _user$project$CodeMotion$gatherUniqueDependencies_ = F3(
	function (returnExp, originalProgramUniqueNames, slurpedBindingsFilter) {
		var programUsedPIdsToVarEIds = _user$project$LangTools$usedPIdsToVarEIds(originalProgramUniqueNames);
		var _p0 = A3(
			_user$project$Utils$foldr,
			{
				ctor: '_Tuple2',
				_0: A2(_user$project$Lang$replaceIndentation, '', returnExp),
				_1: {ctor: '[]'}
			},
			F2(
				function (exp, _p1) {
					var _p2 = _p1;
					var _p8 = _p2._1;
					var _p7 = _p2._0;
					var _p3 = exp.val.e__;
					if (_p3.ctor === 'ELet') {
						var _p6 = _p3._3;
						var _p5 = _p3._5;
						if (A2(
							_user$project$Lang$containsNode,
							function (e) {
								return _user$project$Lang$isFunc(e) || _elm_lang$core$Native_Utils.eq(e.val.eid, returnExp.val.eid);
							},
							_p5)) {
							return {ctor: '_Tuple2', _0: _p7, _1: _p8};
						} else {
							if (!A2(slurpedBindingsFilter, _p6, _p5)) {
								return {ctor: '_Tuple2', _0: _p7, _1: _p8};
							} else {
								var usageEIds = _elm_lang$core$List$concat(
									A2(
										_elm_lang$core$List$filterMap,
										function (_p4) {
											return A3(
												_elm_lang$core$Basics$flip,
												_elm_lang$core$Dict$get,
												programUsedPIdsToVarEIds,
												function (_) {
													return _.pid;
												}(
													function (_) {
														return _.val;
													}(_p4)));
										},
										_user$project$Lang$flattenPatTree(_p6)));
								return ((!_elm_lang$core$Native_Utils.eq(
									usageEIds,
									{ctor: '[]'})) && A2(
									_elm_lang$core$List$all,
									function (varEId) {
										return A2(
											_user$project$Lang$containsNode,
											function (e) {
												return _elm_lang$core$Native_Utils.eq(e.val.eid, varEId);
											},
											_p7);
									},
									usageEIds)) ? {
									ctor: '_Tuple2',
									_0: A2(
										_user$project$Lang$replaceE__,
										exp,
										A9(
											_user$project$Lang$ELet,
											_user$project$Lang$newline1,
											_user$project$Lang$Let,
											_p3._2,
											A2(_user$project$Lang$replacePrecedingWhitespacePat, ' ', _p6),
											_user$project$Lang$space1,
											A2(_user$project$Lang$replaceIndentation, '  ', _p5),
											_user$project$Lang$space1,
											A2(_user$project$Lang$replacePrecedingWhitespace, '\n', _p7),
											_user$project$Lang$space0)),
									_1: {ctor: '::', _0: exp.val.eid, _1: _p8}
								} : {ctor: '_Tuple2', _0: _p7, _1: _p8};
							}
						}
					} else {
						return {ctor: '_Tuple2', _0: _p7, _1: _p8};
					}
				}),
			A2(
				_user$project$Utils$dropLast,
				1,
				A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(_user$project$Lang$findWithAncestorsByEId, originalProgramUniqueNames, returnExp.val.eid))));
		var gatheredGroup = _p0._0;
		var letEIdsToRemove = _p0._1;
		var programUniqueNamesBindingsRemoved = A2(
			_user$project$Lang$mapExp,
			function (exp) {
				var _p9 = exp.val.e__;
				if (_p9.ctor === 'ELet') {
					return A2(_elm_lang$core$List$member, exp.val.eid, letEIdsToRemove) ? _p9._7 : exp;
				} else {
					return exp;
				}
			},
			originalProgramUniqueNames);
		var programBindingPatToVarEIds = _user$project$Utils$pairsToDictOfLists(
			A2(
				_elm_lang$core$List$filterMap,
				function (_p10) {
					var _p11 = _p10;
					return A2(
						_elm_lang$core$Maybe$map,
						function (programPat) {
							return {ctor: '_Tuple2', _0: programPat, _1: _p11._0};
						},
						_p11._1);
				},
				_user$project$LangTools$allVarEIdsToBindingPatList(originalProgramUniqueNames)));
		var allPatExpProgramBindings = _user$project$LangTools$allSimplyResolvableLetPatBindings(originalProgramUniqueNames);
		return {ctor: '_Tuple2', _0: gatheredGroup, _1: programUniqueNamesBindingsRemoved};
	});
var _user$project$CodeMotion$maybePathAfterPathsRemoved = F2(
	function (pathsRemoved, path) {
		return A3(
			_user$project$Utils$foldrMaybe,
			_user$project$Lang$pathAfterElementRemoved,
			_elm_lang$core$Maybe$Just(path),
			_elm_lang$core$List$sort(pathsRemoved));
	});
var _user$project$CodeMotion$shouldBeParameterIsNamedUnfrozenConstant = F2(
	function (exp, originalProgram) {
		var _p12 = exp.val.e__;
		_v4_2:
		do {
			switch (_p12.ctor) {
				case 'EConst':
					if (_p12._2.ctor === '_Tuple3') {
						return (!_elm_lang$core$Native_Utils.eq(_p12._2._2, '')) && (!_elm_lang$core$Native_Utils.eq(_p12._2._1, _user$project$Lang$frozen));
					} else {
						break _v4_2;
					}
				case 'EBase':
					if (_p12._1.ctor === 'EString') {
						var bindings = A2(
							_elm_lang$core$List$concatMap,
							function (_p13) {
								var _p14 = _p13;
								return A2(_user$project$LangTools$tryMatchExpReturningList, _p14._0, _p14._1);
							},
							A2(
								_elm_lang$core$List$filterMap,
								_user$project$LangTools$expToMaybeLetPatAndBoundExp,
								A2(_user$project$LangTools$justFindExpWithAncestorsByEId, originalProgram, exp.val.eid)));
						return _user$project$Utils$maybeToBool(
							A2(
								_user$project$Utils$findFirst,
								function (_p15) {
									var _p16 = _p15;
									return _elm_lang$core$Native_Utils.eq(_p16._1.val.eid, exp.val.eid);
								},
								bindings));
					} else {
						break _v4_2;
					}
				default:
					break _v4_2;
			}
		} while(false);
		return false;
	});
var _user$project$CodeMotion$shouldBeParameterIsConstant = F2(
	function (exp, originalProgram) {
		var _p17 = exp.val.e__;
		_v7_2:
		do {
			switch (_p17.ctor) {
				case 'EConst':
					return true;
				case 'EBase':
					if (_p17._1.ctor === 'EString') {
						return true;
					} else {
						break _v7_2;
					}
				default:
					break _v7_2;
			}
		} while(false);
		return false;
	});
var _user$project$CodeMotion$abstract = F3(
	function (eid, shouldBeParameter, originalProgram) {
		var expToAbstact = A2(_user$project$LangTools$justFindExpByEId, originalProgram, eid);
		var eidsToParameterize = _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				function (_p18) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(_p18));
				},
				A2(
					_elm_lang$core$List$filter,
					function (_p19) {
						return A2(
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								}),
							_elm_lang$core$Maybe$Just('INSERT_ARGUMENT_HERE'),
							_user$project$LangTools$expToMaybeIdent(_p19));
					},
					_user$project$Lang$flattenExpTree(
						A2(
							_user$project$Lang$mapExp,
							function (e) {
								return A2(shouldBeParameter, e, originalProgram) ? A2(
									_user$project$Lang$replaceE__,
									e,
									A2(_user$project$Lang$EVar, _user$project$Lang$space1, 'INSERT_ARGUMENT_HERE')) : e;
							},
							expToAbstact)))));
		var _p20 = A3(
			_user$project$Lang$mapFoldExp,
			F2(
				function (e, _p21) {
					var _p22 = _p21;
					var _p25 = _p22._1;
					var _p24 = _p22._2;
					var _p23 = _p22._0;
					if (A2(_elm_lang$core$Set$member, e.val.eid, eidsToParameterize)) {
						var naiveName = A2(
							_elm_lang$core$Basics_ops['++'],
							A3(_user$project$LangTools$expNameForEIdWithDefault, 'arg', originalProgram, e.val.eid),
							'_ARRRG!!!');
						var name = A3(_user$project$LangTools$nonCollidingName, naiveName, 2, _p23);
						var namesToAvoid_ = A2(_elm_lang$core$Set$insert, name, _p23);
						return {
							ctor: '_Tuple2',
							_0: A2(
								_user$project$Lang$copyPrecedingWhitespace,
								e,
								_user$project$Lang$eVar(name)),
							_1: {
								ctor: '_Tuple3',
								_0: namesToAvoid_,
								_1: {ctor: '::', _0: name, _1: _p25},
								_2: {
									ctor: '::',
									_0: _user$project$FastParser$clearAllIds(e),
									_1: _p24
								}
							}
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: e,
							_1: {ctor: '_Tuple3', _0: _p23, _1: _p25, _2: _p24}
						};
					}
				}),
			{
				ctor: '_Tuple3',
				_0: _user$project$LangTools$identifiersSet(expToAbstact),
				_1: {ctor: '[]'},
				_2: {ctor: '[]'}
			},
			expToAbstact);
		var abstractionBody = _p20._0;
		var paramNamesARRRGTagged = _p20._1._1;
		var paramExps = _p20._1._2;
		var _p26 = function () {
			var abstractionBodySimplifiedARRRGTags = _user$project$Lang$ensureWhitespaceExp(
				_user$project$LangSimplify$removeUnusedLetPats(
					_user$project$LangSimplify$changeRenamedVarsToOuter(abstractionBody)));
			var arrrgTagRegex = _elm_lang$core$Regex$regex('_ARRRG!!!\\d*$');
			var removeARRRGTag = function (name) {
				return A4(
					_elm_lang$core$Regex$replace,
					_elm_lang$core$Regex$AtMost(1),
					arrrgTagRegex,
					function (_p27) {
						return '';
					},
					name);
			};
			return A3(
				_elm_lang$core$List$foldl,
				F2(
					function (nameARRRGTagged, _p28) {
						var _p29 = _p28;
						var _p30 = _p29._1;
						var noARRRGTag = removeARRRGTag(nameARRRGTagged);
						var name = A3(_user$project$LangTools$nonCollidingName, noARRRGTag, 2, _p30);
						return {
							ctor: '_Tuple3',
							_0: A3(_user$project$LangTools$renameIdentifier, nameARRRGTagged, name, _p29._0),
							_1: A2(_elm_lang$core$Set$insert, name, _p30),
							_2: A2(
								_elm_lang$core$Basics_ops['++'],
								_p29._2,
								{
									ctor: '::',
									_0: name,
									_1: {ctor: '[]'}
								})
						};
					}),
				{
					ctor: '_Tuple3',
					_0: abstractionBodySimplifiedARRRGTags,
					_1: _user$project$LangTools$identifiersSet(abstractionBodySimplifiedARRRGTags),
					_2: {ctor: '[]'}
				},
				paramNamesARRRGTagged);
		}();
		var abstractionBodySimplified = _p26._0;
		var paramNames = _p26._2;
		var _p31 = paramExps;
		if (_p31.ctor === '[]') {
			var funcExp = A2(
				_user$project$Lang$eFun,
				{
					ctor: '::',
					_0: _user$project$Lang$pList0(
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				},
				abstractionBodySimplified);
			return {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _user$project$Lang$eTuple(
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				},
				_1: funcExp
			};
		} else {
			var funcExp = A2(
				_user$project$Lang$eFun,
				_user$project$Lang$listOfPVars(paramNames),
				abstractionBodySimplified);
			return {ctor: '_Tuple2', _0: paramExps, _1: funcExp};
		}
	});
var _user$project$CodeMotion$abstractExp = F3(
	function (syntax, eidToAbstract, originalProgram) {
		var expToAbstract = A2(_user$project$LangTools$justFindExpByEId, originalProgram, eidToAbstract);
		var doAbstract = function (shouldBeParameter) {
			var _p32 = A3(_user$project$CodeMotion$abstract, eidToAbstract, shouldBeParameter, originalProgram);
			var argumentsForCallSite = _p32._0;
			var abstractedFuncExp = _p32._1;
			var funcName = function () {
				var naiveName = A3(_user$project$LangTools$expNameForEIdWithDefault, 'func', originalProgram, eidToAbstract);
				var namesToAvoid = A2(
					_user$project$LangTools$visibleIdentifiersAtEIds,
					originalProgram,
					_elm_lang$core$Set$singleton(eidToAbstract));
				return A3(_user$project$LangTools$nonCollidingName, naiveName, 2, namesToAvoid);
			}();
			var expToWrap = A2(_user$project$LangTools$deepestAncestorWithNewline, originalProgram, eidToAbstract);
			var expToWrapWithTargetReplaced = A3(
				_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
				eidToAbstract,
				A2(
					_user$project$Lang$eApp,
					_user$project$Lang$eVar0(funcName),
					A3(_user$project$Lang$setExpListWhitespace, ' ', ' ', argumentsForCallSite)),
				expToWrap);
			var wrapped = A6(
				_user$project$LangTools$newLetFancyWhitespace,
				-1,
				false,
				_user$project$Lang$pVar(funcName),
				abstractedFuncExp,
				expToWrapWithTargetReplaced,
				originalProgram);
			var newProgram = A3(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, expToWrap.val.eid, wrapped, originalProgram);
			return newProgram;
		};
		var abstractedOverAllConstantsResult = function () {
			var newProgram = doAbstract(_user$project$CodeMotion$shouldBeParameterIsConstant);
			return A2(
				_user$project$InterfaceModel$synthesisResult,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Abstract ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						A3(
							_user$project$Utils$niceTruncateString,
							20,
							'...',
							_user$project$Utils$squish(
								A2(_user$project$Syntax$unparser, syntax, expToAbstract))),
						' over its constants')),
				newProgram);
		}();
		var abstractedOverNamedUnfrozenConstantsResult = function () {
			var newProgram = doAbstract(_user$project$CodeMotion$shouldBeParameterIsNamedUnfrozenConstant);
			return A2(
				_user$project$InterfaceModel$synthesisResult,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Abstract ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						A3(
							_user$project$Utils$niceTruncateString,
							20,
							'...',
							_user$project$Utils$squish(
								A2(_user$project$Syntax$unparser, syntax, expToAbstract))),
						' over its named constants')),
				newProgram);
		}();
		return {
			ctor: '::',
			_0: abstractedOverAllConstantsResult,
			_1: {
				ctor: '::',
				_0: abstractedOverNamedUnfrozenConstantsResult,
				_1: {ctor: '[]'}
			}
		};
	});
var _user$project$CodeMotion$addExpToExpsByPath = F3(
	function (expToInsert, path, exps) {
		var _p33 = path;
		if (_p33.ctor === '::') {
			if (_p33._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(
					A2(
						_user$project$Lang$imitateExpListWhitespace,
						exps,
						A3(_user$project$Utils$inserti, _p33._0, expToInsert, exps)));
			} else {
				var _p34 = _p33._0;
				return A2(
					_elm_lang$core$Maybe$map,
					function (newExp) {
						return A3(_user$project$Utils$replacei, _p34, newExp, exps);
					},
					A2(
						_elm_lang$core$Maybe$andThen,
						A2(_user$project$CodeMotion$addExpToExpByPath, expToInsert, _p33._1),
						A2(_user$project$Utils$maybeGeti1, _p34, exps)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$CodeMotion$addExpToExpByPath = F3(
	function (expToInsert, path, exp) {
		var _p35 = {ctor: '_Tuple2', _0: exp.val.e__, _1: path};
		_v12_2:
		do {
			if (_p35.ctor === '_Tuple2') {
				if (_p35._1.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p35._0.ctor === 'EList') {
						var _p42 = _p35._0._4;
						var _p41 = _p35._0._2;
						var _p40 = _p35._0._0;
						var _p39 = _p35._0._3;
						var _p38 = _p35._1._1;
						var _p37 = _p35._1._0;
						var _p36 = _p35._0._1;
						return (_elm_lang$core$Native_Utils.eq(
							_p37,
							_elm_lang$core$List$length(_p36) + 1) && (!_elm_lang$core$Native_Utils.eq(
							_p38,
							{ctor: '[]'}))) ? A2(
							_elm_lang$core$Maybe$map,
							function (newTail) {
								return A2(
									_user$project$Lang$replaceE__,
									exp,
									A5(
										_user$project$Lang$EList,
										_p40,
										_p36,
										_p41,
										_elm_lang$core$Maybe$Just(newTail),
										_p42));
							},
							A2(
								_elm_lang$core$Maybe$andThen,
								A2(_user$project$CodeMotion$addExpToExpByPath, expToInsert, _p38),
								_p39)) : ((_elm_lang$core$Native_Utils.cmp(
							_p37,
							_elm_lang$core$List$length(_p36) + 1) < 1) ? A2(
							_elm_lang$core$Maybe$map,
							function (newEs) {
								return A2(
									_user$project$Lang$replaceE__,
									exp,
									A5(
										_user$project$Lang$EList,
										_p40,
										A2(
											_elm_lang$core$List$map,
											F2(
												function (v0, v1) {
													return {ctor: '_Tuple2', _0: v0, _1: v1};
												})(_user$project$Lang$space0),
											newEs),
										_p41,
										_p39,
										_p42));
							},
							A3(
								_user$project$CodeMotion$addExpToExpsByPath,
								expToInsert,
								{ctor: '::', _0: _p37, _1: _p38},
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p36))) : _elm_lang$core$Maybe$Nothing);
					} else {
						break _v12_2;
					}
				}
			} else {
				break _v12_2;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$CodeMotion$addPatToPats = F3(
	function (patToInsert, path, pats) {
		var _p43 = path;
		if (_p43.ctor === '::') {
			if (_p43._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(
					A2(
						_user$project$Lang$imitatePatListWhitespace,
						pats,
						A3(_user$project$Utils$inserti, _p43._0, patToInsert, pats)));
			} else {
				var _p44 = _p43._0;
				return A2(
					_elm_lang$core$Maybe$map,
					function (newPat) {
						return A3(_user$project$Utils$replacei, _p44, newPat, pats);
					},
					A2(
						_elm_lang$core$Maybe$andThen,
						A2(_user$project$CodeMotion$addPatToPat, patToInsert, _p43._1),
						A2(_user$project$Utils$maybeGeti1, _p44, pats)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$CodeMotion$addPatToPat = F3(
	function (patToInsert, path, pat) {
		var _p45 = {ctor: '_Tuple2', _0: pat.val.p__, _1: path};
		_v14_3:
		do {
			if (_p45.ctor === '_Tuple2') {
				if (_p45._1.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					switch (_p45._0.ctor) {
						case 'PAs':
							if (_p45._1._0 === 1) {
								var _p46 = A2(
									_elm_lang$core$Debug$log,
									'adding to as pattern not allowed yet because when adding argument, pattern path will not be the same as the path for adding arguments to call sites',
									{ctor: '_Tuple0'});
								return _elm_lang$core$Maybe$Nothing;
							} else {
								break _v14_3;
							}
						case 'PList':
							var _p53 = _p45._0._4;
							var _p52 = _p45._0._2;
							var _p51 = _p45._0._0;
							var _p50 = _p45._0._1;
							var _p49 = _p45._0._3;
							var _p48 = _p45._1._1;
							var _p47 = _p45._1._0;
							return (_elm_lang$core$Native_Utils.eq(
								_p47,
								_elm_lang$core$List$length(_p50) + 1) && (!_elm_lang$core$Native_Utils.eq(
								_p48,
								{ctor: '[]'}))) ? A2(
								_elm_lang$core$Maybe$map,
								function (newTail) {
									return A2(
										_user$project$Lang$replaceP__,
										pat,
										A5(
											_user$project$Lang$PList,
											_p51,
											_p50,
											_p52,
											_elm_lang$core$Maybe$Just(newTail),
											_p53));
								},
								A2(
									_elm_lang$core$Maybe$andThen,
									A2(_user$project$CodeMotion$addPatToPat, patToInsert, _p48),
									_p49)) : ((_elm_lang$core$Native_Utils.cmp(
								_p47,
								_elm_lang$core$List$length(_p50) + 1) < 1) ? A2(
								_elm_lang$core$Maybe$map,
								function (newPs) {
									return A2(
										_user$project$Lang$replaceP__,
										pat,
										A5(_user$project$Lang$PList, _p51, newPs, _p52, _p49, _p53));
								},
								A3(
									_user$project$CodeMotion$addPatToPats,
									patToInsert,
									{ctor: '::', _0: _p47, _1: _p48},
									_p50)) : _elm_lang$core$Maybe$Nothing);
						default:
							break _v14_3;
					}
				}
			} else {
				break _v14_3;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$CodeMotion$addArg_ = F4(
	function (syntax, pathedPatId, funcToIsSafePatToInsertArgValExpAndNewFuncBody, originalProgram) {
		var _p54 = pathedPatId;
		var funcEId = _p54._0._0;
		var path = _p54._1;
		var _p55 = A2(_user$project$LangTools$findLetAndIdentBindingExp, funcEId, originalProgram);
		if (_p55.ctor === 'Just') {
			var _p75 = _p55._0._1;
			var _p56 = _p55._0._0.val.e__;
			if (_p56.ctor === 'ELet') {
				var _p73 = _p56._7;
				var _p72 = _p56._5;
				var funcVarUsageEIds = _p56._2 ? _elm_lang$core$Set$fromList(
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_user$project$LangTools$identifierUsageEIds, _p75, _p72),
						A2(_user$project$LangTools$identifierUsageEIds, _p75, _p73))) : _elm_lang$core$Set$fromList(
					A2(_user$project$LangTools$identifierUsageEIds, _p75, _p73));
				var _p57 = _p72.val.e__;
				if (_p57.ctor === 'EFun') {
					var _p70 = _p57._1;
					var _p58 = A2(funcToIsSafePatToInsertArgValExpAndNewFuncBody, _p72, _p57._2);
					if (_p58.ctor === 'Nothing') {
						return {ctor: '[]'};
					} else {
						var _p69 = _p58._0._1;
						var _p68 = _p58._0._2;
						var _p59 = A3(_user$project$CodeMotion$addPatToPats, _p69, path, _p70);
						if (_p59.ctor === 'Nothing') {
							var _p60 = A2(
								_elm_lang$core$Debug$log,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Could not insert pattern into ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(
											_elm_lang$core$String$join,
											' ',
											A2(
												_elm_lang$core$List$map,
												_user$project$Syntax$patternUnparser(syntax),
												_p70)),
										' at path')),
								path);
							return {ctor: '[]'};
						} else {
							var _p67 = _p59._0;
							var _p61 = A3(
								_user$project$Lang$mapFoldExp,
								F2(
									function (exp, funcVarUsagesTransformed) {
										var _p62 = exp.val.e__;
										if (_p62.ctor === 'EApp') {
											var _p64 = _p62._1;
											if (A2(_elm_lang$core$Set$member, _p64.val.eid, funcVarUsageEIds)) {
												var _p63 = A3(
													_user$project$CodeMotion$addExpToExpsByPath,
													_user$project$FastParser$clearAllIds(_p68),
													path,
													_p62._2);
												if (_p63.ctor === 'Nothing') {
													return {ctor: '_Tuple2', _0: exp, _1: funcVarUsagesTransformed};
												} else {
													return {
														ctor: '_Tuple2',
														_0: A2(
															_user$project$Lang$replaceE__,
															exp,
															A5(_user$project$Lang$EApp, _p62._0, _p64, _p63._0, _p62._3, _p62._4)),
														_1: A2(_elm_lang$core$Set$insert, _p64.val.eid, funcVarUsagesTransformed)
													};
												}
											} else {
												return {ctor: '_Tuple2', _0: exp, _1: funcVarUsagesTransformed};
											}
										} else {
											return {ctor: '_Tuple2', _0: exp, _1: funcVarUsagesTransformed};
										}
									}),
								_elm_lang$core$Set$empty,
								A3(
									_user$project$Lang$replaceExpNodeE__ByEId,
									_p72.val.eid,
									A4(_user$project$Lang$EFun, _p57._0, _p67, _p58._0._3, _p57._3),
									originalProgram));
							var newProgram = _p61._0;
							var funcVarUsagesTransformed = _p61._1;
							var isSafe = function () {
								var argAdditionsSafe = A2(
									_elm_lang$core$List$all,
									function (freeVarInArgSource) {
										var originalBindingScopeId = A2(_user$project$LangTools$bindingScopeIdFor, freeVarInArgSource, originalProgram);
										var freeIdentInArgSource = _user$project$LangTools$expToIdent(freeVarInArgSource);
										return A2(
											_elm_lang$core$List$all,
											function (funcVarUsageEId) {
												return _elm_lang$core$Native_Utils.eq(
													originalBindingScopeId,
													A3(_user$project$LangTools$bindingScopeIdForIdentAtEId, freeIdentInArgSource, funcVarUsageEId, newProgram));
											},
											_elm_lang$core$Set$toList(funcVarUsagesTransformed));
									},
									_user$project$LangTools$freeVars(_p68));
								var noDuplicateNamesInPat = function () {
									var newArgList = _user$project$LangTools$identifiersListInPats(_p67);
									return _elm_lang$core$Native_Utils.eq(
										newArgList,
										_user$project$Utils$dedup(newArgList));
								}();
								return _p58._0._0 && (_elm_lang$core$Native_Utils.eq(funcVarUsagesTransformed, funcVarUsageEIds) && (argAdditionsSafe && noDuplicateNamesInPat));
							}();
							var caption = function () {
								var baseCaption = A2(
									_elm_lang$core$Basics_ops['++'],
									'Insert Argument ',
									_user$project$Utils$squish(
										A2(_user$project$Syntax$patternUnparser, syntax, _p69)));
								var intoFuncString = A2(
									_elm_lang$core$Maybe$withDefault,
									'',
									A2(
										_elm_lang$core$Maybe$map,
										function (_p65) {
											var _p66 = _p65;
											return A2(_elm_lang$core$Basics_ops['++'], ' into ', _p66._1);
										},
										A2(_user$project$LangTools$findLetAndIdentBindingExp, _p72.val.eid, originalProgram)));
								return A2(_elm_lang$core$Basics_ops['++'], baseCaption, intoFuncString);
							}();
							return {
								ctor: '::',
								_0: A2(
									_user$project$InterfaceModel$setResultSafe,
									isSafe,
									A2(_user$project$InterfaceModel$synthesisResult, caption, newProgram)),
								_1: {ctor: '[]'}
							};
						}
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'CodeMotion',
						{
							start: {line: 1886, column: 11},
							end: {line: 1961, column: 77}
						},
						_p57)('CodeMotion.addArg_ should\'ve had an EFun here');
				}
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'CodeMotion',
					{
						start: {line: 1878, column: 7},
						end: {line: 1964, column: 96}
					},
					_p56)('CodeMotion.addArg_ expected findLetAndIdentBindingExp to return ELet');
			}
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$addArg = F4(
	function (syntax, argSourceEId, pathedPatId, originalProgram) {
		var funcToIsSafePatToInsertArgValExpAndNewFuncBody = F2(
			function (func, fbody) {
				var _p76 = A2(_user$project$Lang$findExpByEId, fbody, argSourceEId);
				if (_p76.ctor === 'Nothing') {
					var _p77 = A2(
						_elm_lang$core$Debug$log,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'couldn\'t find argument source ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(argSourceEId),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' in function ',
									_user$project$LangUnparser$unparseWithIds(func)))),
						{ctor: '_Tuple0'});
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var argName = function () {
						var namesToAvoid = _user$project$LangTools$identifiersSet(
							A3(
								_user$project$Lang$replaceExpNode,
								argSourceEId,
								_user$project$Lang$eVar('DUMMY VAR'),
								func));
						return A3(
							_user$project$LangTools$nonCollidingName,
							A2(_user$project$LangTools$expNameForEId, originalProgram, argSourceEId),
							2,
							namesToAvoid);
					}();
					var patToInsert = _user$project$Lang$pVar(argName);
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '_Tuple4',
							_0: true,
							_1: patToInsert,
							_2: _p76._0,
							_3: A3(
								_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
								argSourceEId,
								_user$project$Lang$eVar(argName),
								fbody)
						});
				}
			});
		return A4(_user$project$CodeMotion$addArg_, syntax, pathedPatId, funcToIsSafePatToInsertArgValExpAndNewFuncBody, originalProgram);
	});
var _user$project$CodeMotion$addArgs = F4(
	function (syntax, argSourceEIds, pathedPatId, originalProgram) {
		var _p78 = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (argSourceEId, _p79) {
					var _p80 = _p79;
					var _p83 = _p80._1;
					var _p81 = A2(
						_elm_lang$core$Maybe$map,
						A3(_user$project$CodeMotion$addArg, syntax, argSourceEId, pathedPatId),
						_p80._0);
					if ((_p81.ctor === 'Just') && (_p81._0.ctor === '::')) {
						var _p82 = _p81._0._0._0;
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Maybe$Just(_p82.exp),
							_1: {ctor: '::', _0: _p82.description, _1: _p83},
							_2: _p80._2 && _p82.isSafe
						};
					} else {
						return {ctor: '_Tuple3', _0: _elm_lang$core$Maybe$Nothing, _1: _p83, _2: false};
					}
				}),
			{
				ctor: '_Tuple3',
				_0: _elm_lang$core$Maybe$Just(originalProgram),
				_1: {ctor: '[]'},
				_2: true
			},
			A2(
				_elm_lang$core$List$sortBy,
				_user$project$LangTools$locationInProgram(originalProgram),
				argSourceEIds));
		var maybeNewProgram = _p78._0;
		var resultDescs = _p78._1;
		var isSafe = _p78._2;
		var _p84 = maybeNewProgram;
		if (_p84.ctor === 'Just') {
			var caption = A3(
				_user$project$Utils$stringReplace,
				'Argument ',
				'Arguments ',
				_user$project$Utils$mergeStrings(resultDescs));
			return {
				ctor: '::',
				_0: A2(
					_user$project$InterfaceModel$setResultSafe,
					isSafe,
					A2(_user$project$InterfaceModel$synthesisResult, caption, _p84._0)),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$insertPat__ = F4(
	function (_p85, p, e1, path) {
		var _p86 = _p85;
		var _p117 = _p86._0;
		var _p116 = _p86._1;
		var maybeNewP_E__Pair = function () {
			var _p87 = {ctor: '_Tuple3', _0: p.val.p__, _1: e1.val.e__, _2: path};
			_v28_5:
			do {
				if ((_p87.ctor === '_Tuple3') && (_p87._2.ctor === '::')) {
					switch (_p87._0.ctor) {
						case 'PVar':
							if (_p87._2._1.ctor === '[]') {
								var _p88 = _p87._2._0;
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple2',
										_0: A5(
											_user$project$Lang$PList,
											_p87._0._0,
											A3(
												_user$project$Lang$setPatListWhitespace,
												'',
												' ',
												A3(
													_user$project$Utils$inserti,
													_p88,
													_p117,
													{
														ctor: '::',
														_0: p,
														_1: {ctor: '[]'}
													})),
											_user$project$Lang$space0,
											_elm_lang$core$Maybe$Nothing,
											_user$project$Lang$space0),
										_1: A5(
											_user$project$Lang$EList,
											_user$project$Lang$ws(
												_user$project$Lang$precedingWhitespace(e1)),
											A2(
												_elm_lang$core$List$map,
												F2(
													function (v0, v1) {
														return {ctor: '_Tuple2', _0: v0, _1: v1};
													})(_user$project$Lang$space0),
												A3(
													_user$project$Lang$setExpListWhitespace,
													'',
													' ',
													A3(
														_user$project$Utils$inserti,
														_p88,
														_p116,
														{
															ctor: '::',
															_0: e1,
															_1: {ctor: '[]'}
														}))),
											_user$project$Lang$space0,
											_elm_lang$core$Maybe$Nothing,
											_user$project$Lang$space0)
									});
							} else {
								break _v28_5;
							}
						case 'PAs':
							if (_p87._2._1.ctor === '[]') {
								var _p89 = _p87._2._0;
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple2',
										_0: A5(
											_user$project$Lang$PList,
											_p87._0._0,
											A3(
												_user$project$Lang$setPatListWhitespace,
												'',
												' ',
												A3(
													_user$project$Utils$inserti,
													_p89,
													_p117,
													{
														ctor: '::',
														_0: p,
														_1: {ctor: '[]'}
													})),
											_user$project$Lang$space0,
											_elm_lang$core$Maybe$Nothing,
											_user$project$Lang$space0),
										_1: A5(
											_user$project$Lang$EList,
											_user$project$Lang$ws(
												_user$project$Lang$precedingWhitespace(e1)),
											A2(
												_elm_lang$core$List$map,
												F2(
													function (v0, v1) {
														return {ctor: '_Tuple2', _0: v0, _1: v1};
													})(_user$project$Lang$space0),
												A3(
													_user$project$Lang$setExpListWhitespace,
													'',
													' ',
													A3(
														_user$project$Utils$inserti,
														_p89,
														_p116,
														{
															ctor: '::',
															_0: e1,
															_1: {ctor: '[]'}
														}))),
											_user$project$Lang$space0,
											_elm_lang$core$Maybe$Nothing,
											_user$project$Lang$space0)
									});
							} else {
								var _p90 = A2(
									_elm_lang$core$Debug$log,
									'can\'t insert into as-pattern yet (unsafe)',
									{ctor: '_Tuple0'});
								return _elm_lang$core$Maybe$Nothing;
							}
						case 'PList':
							if (_p87._1.ctor === 'EList') {
								if (_p87._2._1.ctor === '[]') {
									var _p94 = _p87._0._1;
									var _p93 = _p87._2._0;
									var _p92 = _p87._1._1;
									if ((_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$List$length(_p94) + 1,
										_p93) > -1) && (_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$List$length(_p92) + 1,
										_p93) > -1)) {
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '_Tuple2',
												_0: A5(
													_user$project$Lang$PList,
													_p87._0._0,
													A2(
														_user$project$Lang$imitatePatListWhitespace,
														_p94,
														A3(_user$project$Utils$inserti, _p93, _p117, _p94)),
													_p87._0._2,
													_elm_lang$core$Maybe$Nothing,
													_p87._0._4),
												_1: A5(
													_user$project$Lang$EList,
													_p87._1._0,
													A2(
														_elm_lang$core$List$map,
														F2(
															function (v0, v1) {
																return {ctor: '_Tuple2', _0: v0, _1: v1};
															})(_user$project$Lang$space0),
														A2(
															_user$project$Lang$imitateExpListWhitespace,
															A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p92),
															A3(
																_user$project$Utils$inserti,
																_p93,
																_p116,
																A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p92)))),
													_p87._1._2,
													_elm_lang$core$Maybe$Nothing,
													_p87._1._4)
											});
									} else {
										var _p91 = A2(
											_elm_lang$core$Debug$log,
											'can\'t insert into this list (note: cannot insert on list tail)',
											{
												ctor: '_Tuple3',
												_0: A2(_user$project$Syntax$patternUnparser, _user$project$Syntax$Elm, p),
												_1: A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, e1),
												_2: path
											});
										return _elm_lang$core$Maybe$Nothing;
									}
								} else {
									var _p113 = _p87._0._4;
									var _p112 = _p87._0._2;
									var _p111 = _p87._0._0;
									var _p110 = _p87._0._1;
									var _p109 = _p87._0._3;
									var _p108 = _p87._1._3;
									var _p107 = _p87._2._1;
									var _p106 = _p87._2._0;
									var _p105 = _p87._1._4;
									var _p104 = _p87._1._2;
									var _p103 = _p87._1._0;
									var _p102 = _p87._1._1;
									if ((_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$List$length(_p110),
										_p106) > -1) && (_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$List$length(_p102),
										_p106) > -1)) {
										var _p95 = {
											ctor: '_Tuple2',
											_0: A2(_user$project$Utils$geti, _p106, _p110),
											_1: A2(
												_user$project$Utils$geti,
												_p106,
												A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p102))
										};
										var pi = _p95._0;
										var ei = _p95._1;
										return A2(
											_elm_lang$core$Maybe$map,
											function (_p96) {
												var _p97 = _p96;
												var _p98 = {
													ctor: '_Tuple2',
													_0: A2(
														_user$project$Lang$imitatePatListWhitespace,
														_p110,
														A3(_user$project$Utils$replacei, _p106, _p97._0, _p110)),
													_1: A2(
														_user$project$Lang$imitateExpListWhitespace,
														A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p102),
														A3(
															_user$project$Utils$replacei,
															_p106,
															_p97._1,
															A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p102)))
												};
												var newPs = _p98._0;
												var newEs = _p98._1;
												return {
													ctor: '_Tuple2',
													_0: A5(_user$project$Lang$PList, _p111, newPs, _p112, _p109, _p113),
													_1: A5(
														_user$project$Lang$EList,
														_p103,
														A2(
															_elm_lang$core$List$map,
															F2(
																function (v0, v1) {
																	return {ctor: '_Tuple2', _0: v0, _1: v1};
																})(_user$project$Lang$space0),
															newEs),
														_p104,
														_p108,
														_p105)
												};
											},
											A4(
												_user$project$CodeMotion$insertPat__,
												{ctor: '_Tuple2', _0: _p117, _1: _p116},
												pi,
												ei,
												_p107));
									} else {
										if (_elm_lang$core$Native_Utils.eq(
											_elm_lang$core$List$length(_p110),
											_elm_lang$core$List$length(_p102)) && (_elm_lang$core$Native_Utils.eq(
											_p106,
											1 + _elm_lang$core$List$length(_p110)) && (_user$project$Utils$maybeToBool(_p109) && _user$project$Utils$maybeToBool(_p108)))) {
											var pi = _user$project$Utils$fromJust(_p109);
											var ei = _user$project$Utils$fromJust(_p108);
											return A2(
												_elm_lang$core$Maybe$map,
												function (_p99) {
													var _p100 = _p99;
													return {
														ctor: '_Tuple2',
														_0: A5(
															_user$project$Lang$PList,
															_p111,
															_p110,
															_p112,
															_elm_lang$core$Maybe$Just(_p100._0),
															_p113),
														_1: A5(
															_user$project$Lang$EList,
															_p103,
															_p102,
															_p104,
															_elm_lang$core$Maybe$Just(_p100._1),
															_p105)
													};
												},
												A4(
													_user$project$CodeMotion$insertPat__,
													{ctor: '_Tuple2', _0: _p117, _1: _p116},
													pi,
													ei,
													_p107));
										} else {
											var _p101 = A2(
												_elm_lang$core$Debug$log,
												'can\'t insert into this list (note: cannot insert on list tail)',
												{
													ctor: '_Tuple3',
													_0: A2(_user$project$Syntax$patternUnparser, _user$project$Syntax$Elm, p),
													_1: A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, e1),
													_2: path
												});
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								}
							} else {
								break _v28_5;
							}
						default:
							break _v28_5;
					}
				} else {
					break _v28_5;
				}
			} while(false);
			var _p114 = A2(
				_elm_lang$core$Debug$log,
				'insertPat__: pattern, path ',
				{ctor: '_Tuple2', _0: p.val.p__, _1: path});
			return _elm_lang$core$Maybe$Nothing;
		}();
		var _p115 = maybeNewP_E__Pair;
		if (_p115.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: A2(_user$project$Lang$replaceP__, p, _p115._0._0),
					_1: A2(_user$project$Lang$replaceE__, e1, _p115._0._1)
				});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$CodeMotion$insertPat_ = F3(
	function (_p118, targetPath, exp) {
		var _p119 = _p118;
		var _p120 = exp.val.e__;
		if (_p120.ctor === 'ELet') {
			var _p123 = _p120._3;
			var _p121 = A4(
				_user$project$CodeMotion$insertPat__,
				{ctor: '_Tuple2', _0: _p119._0, _1: _p119._1},
				_p123,
				_p120._5,
				targetPath);
			if (_p121.ctor === 'Just') {
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A9(_user$project$Lang$ELet, _p120._0, _p120._1, _p120._2, _p121._0._0, _p120._4, _p121._0._1, _p120._6, _p120._7, _p120._8));
			} else {
				var _p122 = A2(
					_elm_lang$core$Debug$log,
					'insertPat_: pattern, path ',
					{ctor: '_Tuple2', _0: _p123.val.p__, _1: targetPath});
				return exp;
			}
		} else {
			var _p124 = A2(_elm_lang$core$Debug$log, 'insertPat_: not ELet', exp.val.e__);
			return exp;
		}
	});
var _user$project$CodeMotion$makeDuplicateResults_ = F5(
	function (syntax, newScopeEId, pluckedPatAndBoundExpAndIsRecs, newProgram, originalProgram) {
		var _p125 = _user$project$Utils$unzip3(pluckedPatAndBoundExpAndIsRecs);
		var pluckedPats = _p125._0;
		var pluckedBoundExps = _p125._1;
		var isRecs = _p125._2;
		var newScopeExp = A2(_user$project$LangTools$justFindExpByEId, newProgram, newScopeEId);
		var newScopePat = _user$project$LangTools$expToLetPat(newScopeExp);
		var newScopeBoundExp = _user$project$LangTools$expToLetBoundExp(newScopeExp);
		var newScopeBody = _user$project$LangTools$expToLetBody(newScopeExp);
		var isSafe = function () {
			var identUsesSafe = _elm_lang$core$Native_Utils.eq(
				0,
				_elm_lang$core$Set$size(
					A2(
						_elm_lang$core$Set$intersect,
						_user$project$LangTools$identifiersSetInPats(pluckedPats),
						_user$project$LangTools$freeIdentifiers(newScopeBody))));
			var boundExpVarsSafe = function () {
				var oldBoundExpFreeIdentBindingScopeIds = _elm_lang$core$Set$fromList(
					A2(
						_elm_lang$core$List$map,
						function ($var) {
							return {
								ctor: '_Tuple2',
								_0: _user$project$LangTools$expToIdent($var),
								_1: A2(
									_elm_lang$core$Maybe$withDefault,
									{ctor: '_Tuple2', _0: -1, _1: -1},
									A2(_user$project$LangTools$bindingScopeIdFor, $var, originalProgram))
							};
						},
						A2(_elm_lang$core$List$concatMap, _user$project$LangTools$freeVars, pluckedBoundExps)));
				var newBoundExpFreeIdentBindingScopeIds = _elm_lang$core$Set$fromList(
					A2(
						_elm_lang$core$List$map,
						function ($var) {
							return {
								ctor: '_Tuple2',
								_0: _user$project$LangTools$expToIdent($var),
								_1: A2(
									_elm_lang$core$Maybe$withDefault,
									{ctor: '_Tuple2', _0: -1, _1: -1},
									A2(_user$project$LangTools$bindingScopeIdFor, $var, newProgram))
							};
						},
						_user$project$LangTools$freeVars(newScopeBoundExp)));
				return A2(_user$project$Utils$isSubset, oldBoundExpFreeIdentBindingScopeIds, newBoundExpFreeIdentBindingScopeIds);
			}();
			var noDuplicateNamesInPat = function () {
				var namesDefinedAtNewScope = _user$project$LangTools$identifiersListInPat(newScopePat);
				return _elm_lang$core$Native_Utils.eq(
					namesDefinedAtNewScope,
					_user$project$Utils$dedup(namesDefinedAtNewScope));
			}();
			return identUsesSafe && (boundExpVarsSafe && noDuplicateNamesInPat);
		}();
		var caption = function () {
			var patStrs = A2(
				_elm_lang$core$List$map,
				function (_p126) {
					return _user$project$Utils$squish(
						A2(_user$project$Syntax$patternUnparser, syntax, _p126));
				},
				pluckedPats);
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Duplicate ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Native_Utils.eq(
						_elm_lang$core$List$length(patStrs),
						1) ? 'Definition' : 'Definitions',
					A2(
						_elm_lang$core$Basics_ops['++'],
						' of ',
						_user$project$Utils$toSentence(patStrs))));
		}();
		var result = A2(
			_user$project$InterfaceModel$setResultSafe,
			isSafe,
			A2(_user$project$InterfaceModel$synthesisResult, caption, newProgram));
		return {
			ctor: '::',
			_0: result,
			_1: {ctor: '[]'}
		};
	});
var _user$project$CodeMotion$insertPluckedIntoPat = F3(
	function (targetPathedPatId, pluckedPatAndBoundExpAndIsRecs, program) {
		var _p127 = targetPathedPatId;
		var targetLetEId = _p127._0._0;
		var targetPath = _p127._1;
		var newProgram = A3(
			_user$project$Lang$mapExpNode,
			targetLetEId,
			function (newScopeExp) {
				return A3(
					_elm_lang$core$List$foldr,
					F2(
						function (_p128, newScopeExp) {
							var _p129 = _p128;
							return A3(
								_user$project$CodeMotion$insertPat_,
								{ctor: '_Tuple2', _0: _p129._0, _1: _p129._1},
								targetPath,
								newScopeExp);
						}),
					newScopeExp,
					pluckedPatAndBoundExpAndIsRecs);
			},
			program);
		return {ctor: '_Tuple2', _0: newProgram, _1: targetLetEId};
	});
var _user$project$CodeMotion$insertNewLetFromPlucked = F4(
	function (eidToWrap, pluckedPatAndBoundExpAndIsRecs, programToModify, originalProgram) {
		var _p130 = _user$project$Utils$unzip3(pluckedPatAndBoundExpAndIsRecs);
		var pluckedPats = _p130._0;
		var pluckedBoundExps = _p130._1;
		var isRecs = _p130._2;
		var _p131 = function () {
			var _p132 = {
				ctor: '_Tuple3',
				_0: pluckedPats,
				_1: pluckedBoundExps,
				_2: _user$project$Utils$maybeConsensus(isRecs)
			};
			if (((((_p132._0.ctor === '::') && (_p132._0._1.ctor === '[]')) && (_p132._1.ctor === '::')) && (_p132._1._1.ctor === '[]')) && (_p132._2.ctor === 'Just')) {
				return {ctor: '_Tuple3', _0: _p132._0._0, _1: _p132._1._0, _2: _p132._2._0};
			} else {
				var isRec = function () {
					var _p133 = _p132._2;
					if (_p133.ctor === 'Just') {
						return _p133._0;
					} else {
						return true;
					}
				}();
				return {
					ctor: '_Tuple3',
					_0: _user$project$Lang$withDummyPatInfo(
						A5(
							_user$project$Lang$PList,
							_user$project$Lang$space1,
							A3(_user$project$Lang$setPatListWhitespace, '', ' ', pluckedPats),
							_user$project$Lang$space0,
							_elm_lang$core$Maybe$Nothing,
							_user$project$Lang$space0)),
					_1: _user$project$Lang$withDummyExpInfo(
						A5(
							_user$project$Lang$EList,
							_user$project$Lang$space1,
							A2(
								_elm_lang$core$List$map,
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})(_user$project$Lang$space0),
								A3(_user$project$Lang$setExpListWhitespace, '', ' ', pluckedBoundExps)),
							_user$project$Lang$space0,
							_elm_lang$core$Maybe$Nothing,
							_user$project$Lang$space0)),
					_2: isRec
				};
			}
		}();
		var newPat = _p131._0;
		var newBoundExp = _p131._1;
		var isRec = _p131._2;
		var insertedLetEId = _user$project$FastParser$maxId(originalProgram) + 1;
		var newProgram = A3(
			_user$project$Lang$mapExpNode,
			eidToWrap,
			function (expToWrap) {
				return A6(_user$project$LangTools$newLetFancyWhitespace, insertedLetEId, isRec, newPat, newBoundExp, expToWrap, programToModify);
			},
			programToModify);
		return {ctor: '_Tuple2', _0: newProgram, _1: insertedLetEId};
	});
var _user$project$CodeMotion$makeResult = function (baseDescription) {
	return function (uniqueNameToOldName) {
		return function (renamings) {
			return function (liftedUniqueIdents) {
				return function (identsInvalidlyFreeRewritten) {
					return function (identsWithInvalidlyFreeVarsHandled) {
						return function (varEIdsDeliberatelyRemoved) {
							return function (insertedVarEIdToBindingPId) {
								return function (originalProgramUniqueNames) {
									return function (newProgram) {
										var uniqueNameToOldNameUsed = A2(
											_elm_lang$core$Dict$diff,
											uniqueNameToOldName,
											_elm_lang$core$Dict$fromList(
												A2(
													_elm_lang$core$List$map,
													function (_p134) {
														var _p135 = _p134;
														return {ctor: '_Tuple2', _0: _p135._2, _1: _p135._1};
													},
													renamings)));
										var isSafe = function () {
											var originalVarRefs = _user$project$LangTools$allVarEIdsToBindingPIdList(originalProgramUniqueNames);
											var newVarRefs = _user$project$LangTools$allVarEIdsToBindingPIdList(newProgram);
											var allOldReferencesSame = A2(
												_elm_lang$core$List$all,
												function (_p136) {
													var _p137 = _p136;
													var _p139 = _p137._0;
													return A2(_elm_lang$core$List$member, _p139, varEIdsDeliberatelyRemoved) || A2(
														_user$project$Utils$equalAsSets,
														A2(
															_elm_lang$core$List$filter,
															function (_p138) {
																return A2(
																	F2(
																		function (x, y) {
																			return _elm_lang$core$Native_Utils.eq(x, y);
																		}),
																	_p139,
																	_elm_lang$core$Tuple$first(_p138));
															},
															newVarRefs),
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: _p139, _1: _p137._1},
															_1: {ctor: '[]'}
														});
												},
												originalVarRefs);
											var allNewReferencesGood = function () {
												var apparentlyInsertedVarRefs = A2(_user$project$Utils$diffAsSet, newVarRefs, originalVarRefs);
												return A2(
													_user$project$Utils$equalAsSets,
													apparentlyInsertedVarRefs,
													_elm_lang$core$Dict$toList(insertedVarEIdToBindingPId));
											}();
											var noDuplicateNamesInPats = A2(
												_elm_lang$core$List$all,
												function (pat) {
													var namesDefinedAtPat = _user$project$LangTools$identifiersListInPat(pat);
													return _elm_lang$core$Native_Utils.eq(
														namesDefinedAtPat,
														_user$project$Utils$dedup(namesDefinedAtPat));
												},
												_user$project$LangTools$allRootPats(newProgram));
											return allOldReferencesSame && (allNewReferencesGood && noDuplicateNamesInPats);
										}();
										var caption = function () {
											var liftingsStr = function () {
												if (_elm_lang$core$Native_Utils.cmp(
													_elm_lang$core$List$length(liftedUniqueIdents),
													0) > 0) {
													var liftedNames = A2(
														_elm_lang$core$List$map,
														function (uniqueIdent) {
															return A3(_user$project$Utils$getWithDefault, uniqueIdent, uniqueIdent, uniqueNameToOldName);
														},
														liftedUniqueIdents);
													return A2(
														_elm_lang$core$Basics_ops['++'],
														' lifting ',
														_user$project$Utils$toSentence(liftedNames));
												} else {
													return '';
												}
											}();
											var rewrittingsStr = function () {
												var rewrittenThings = A2(
													_elm_lang$core$List$map,
													function (ident) {
														return A3(_user$project$Utils$getWithDefault, ident, ident, uniqueNameToOldNameUsed);
													},
													A2(_elm_lang$core$Basics_ops['++'], identsInvalidlyFreeRewritten, identsWithInvalidlyFreeVarsHandled));
												return (!_elm_lang$core$List$isEmpty(rewrittenThings)) ? A2(
													_elm_lang$core$Basics_ops['++'],
													' rewriting ',
													_user$project$Utils$toSentence(rewrittenThings)) : '';
											}();
											var renamingsStr = (!_elm_lang$core$List$isEmpty(renamings)) ? A2(
												_elm_lang$core$Basics_ops['++'],
												' renaming ',
												_user$project$Utils$toSentence(
													A2(
														_elm_lang$core$List$map,
														function (_p140) {
															var _p141 = _p140;
															return A2(
																_elm_lang$core$Basics_ops['++'],
																_p141._0,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	' ',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_p141._1,
																		A2(_elm_lang$core$Basics_ops['++'], ' to ', _p141._2))));
														},
														renamings))) : '';
											return A2(
												_elm_lang$core$Basics_ops['++'],
												baseDescription,
												_user$project$Utils$toSentence(
													A2(
														_elm_lang$core$List$filter,
														F2(
															function (x, y) {
																return !_elm_lang$core$Native_Utils.eq(x, y);
															})(''),
														{
															ctor: '::',
															_0: liftingsStr,
															_1: {
																ctor: '::',
																_0: rewrittingsStr,
																_1: {
																	ctor: '::',
																	_0: renamingsStr,
																	_1: {ctor: '[]'}
																}
															}
														})));
										}();
										var result = A2(
											_user$project$InterfaceModel$setResultSafe,
											isSafe,
											A2(_user$project$InterfaceModel$synthesisResult, caption, newProgram));
										return result;
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$CodeMotion$maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic = function (programUniqueNames) {
	var numericIdents = _user$project$LangTools$numericLetBoundIdentifiers(programUniqueNames);
	var allFreeVars = _user$project$LangTools$freeVars(programUniqueNames);
	var simpleLetBindings = _elm_lang$core$Dict$fromList(
		_user$project$LangTools$allSimplyResolvableLetBindings(programUniqueNames));
	var defsWithInvalidFreeNumericVars = A2(
		_elm_lang$core$Dict$filter,
		F2(
			function (ident, boundExp) {
				return A2(
					_elm_lang$core$List$any,
					function (varExp) {
						return A2(
							_elm_lang$core$Set$member,
							_user$project$LangTools$expToIdent(varExp),
							numericIdents) && A2(_elm_lang$core$List$member, varExp, allFreeVars);
					},
					_user$project$LangTools$freeVars(boundExp));
			}),
		simpleLetBindings);
	var identsOriginallySomewhereInvalidlyFreeWithDefWhereUsedInvalidly = A2(
		_elm_lang$core$List$concatMap,
		function (_p142) {
			var _p143 = _p142;
			var _p144 = _p143._1;
			return A2(
				_elm_lang$core$List$map,
				function (invalidlyUsedVarExp) {
					return {
						ctor: '_Tuple3',
						_0: _user$project$LangTools$expToIdent(invalidlyUsedVarExp),
						_1: _p143._0,
						_2: _p144
					};
				},
				A2(
					_elm_lang$core$List$filter,
					function (varExp) {
						return A2(
							_elm_lang$core$Set$member,
							_user$project$LangTools$expToIdent(varExp),
							numericIdents) && A2(_elm_lang$core$List$member, varExp, allFreeVars);
					},
					_user$project$LangTools$freeVars(_p144)));
		},
		_elm_lang$core$Dict$toList(defsWithInvalidFreeNumericVars));
	var inlineInvalidFreeNumericIdentsUntilConvergence = function (program) {
		inlineInvalidFreeNumericIdentsUntilConvergence:
		while (true) {
			var freshened = _user$project$FastParser$freshen(program);
			var allFreeVars = _user$project$LangTools$freeVars(freshened);
			var _p145 = A3(
				_user$project$Lang$mapFoldExp,
				F2(
					function (exp, somethingHappened) {
						var _p146 = _user$project$LangTools$expToMaybeIdent(exp);
						if (_p146.ctor === 'Nothing') {
							return {ctor: '_Tuple2', _0: exp, _1: somethingHappened};
						} else {
							var _p147 = _p146._0;
							return (A2(_elm_lang$core$Set$member, _p147, numericIdents) && A2(_elm_lang$core$List$member, exp, allFreeVars)) ? {
								ctor: '_Tuple2',
								_0: A2(
									_user$project$Lang$copyPrecedingWhitespace,
									exp,
									_user$project$FastParser$clearAllIds(
										A3(_user$project$Utils$justGet_, 'maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic', _p147, simpleLetBindings))),
								_1: true
							} : {ctor: '_Tuple2', _0: exp, _1: somethingHappened};
						}
					}),
				false,
				freshened);
			var programInlinedOnce = _p145._0;
			var somethingHappened = _p145._1;
			if (somethingHappened) {
				var _v43 = programInlinedOnce;
				program = _v43;
				continue inlineInvalidFreeNumericIdentsUntilConvergence;
			} else {
				return freshened;
			}
		}
	};
	var identToVarId = _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			_user$project$Utils$flip,
			_user$project$Utils$zipi1(
				_elm_lang$core$Set$toList(
					_user$project$LangTools$identifiersSetPlusPrelude(programUniqueNames)))));
	var expToMaybeMathExp = function (exp) {
		expToMaybeMathExp:
		while (true) {
			var _p148 = exp.val.e__;
			switch (_p148.ctor) {
				case 'EConst':
					return _elm_lang$core$Maybe$Just(
						_user$project$Lang$MathNum(_p148._1));
				case 'EVar':
					return A2(
						_elm_lang$core$Maybe$map,
						_user$project$Lang$MathVar,
						A2(_elm_lang$core$Dict$get, _p148._1, identToVarId));
				case 'EOp':
					var _p150 = _p148._2;
					var _p149 = _p148._1.val;
					switch (_p149.ctor) {
						case 'Plus':
							return A2(
								_elm_lang$core$Maybe$map,
								_user$project$Lang$MathOp(_user$project$Lang$Plus),
								_user$project$Utils$projJusts(
									A2(_elm_lang$core$List$map, expToMaybeMathExp, _p150)));
						case 'Minus':
							return A2(
								_elm_lang$core$Maybe$map,
								_user$project$Lang$MathOp(_user$project$Lang$Minus),
								_user$project$Utils$projJusts(
									A2(_elm_lang$core$List$map, expToMaybeMathExp, _p150)));
						case 'Mult':
							return A2(
								_elm_lang$core$Maybe$map,
								_user$project$Lang$MathOp(_user$project$Lang$Mult),
								_user$project$Utils$projJusts(
									A2(_elm_lang$core$List$map, expToMaybeMathExp, _p150)));
						case 'Div':
							return A2(
								_elm_lang$core$Maybe$map,
								_user$project$Lang$MathOp(_user$project$Lang$Div),
								_user$project$Utils$projJusts(
									A2(_elm_lang$core$List$map, expToMaybeMathExp, _p150)));
						default:
							return _elm_lang$core$Maybe$Nothing;
					}
				case 'EComment':
					var _v46 = _p148._2;
					exp = _v46;
					continue expToMaybeMathExp;
				case 'EOption':
					var _v47 = _p148._4;
					exp = _v47;
					continue expToMaybeMathExp;
				case 'ELet':
					var _v48 = _p148._7;
					exp = _v48;
					continue expToMaybeMathExp;
				case 'ETyp':
					var _v49 = _p148._3;
					exp = _v49;
					continue expToMaybeMathExp;
				case 'EColonType':
					var _v50 = _p148._1;
					exp = _v50;
					continue expToMaybeMathExp;
				case 'ETypeAlias':
					var _v51 = _p148._3;
					exp = _v51;
					continue expToMaybeMathExp;
				default:
					return _elm_lang$core$Maybe$Nothing;
			}
		}
	};
	var mathExpToExp = function (mathExp) {
		return A4(
			_user$project$LocEqn$mathExpToExp,
			_user$project$Lang$unann,
			_elm_lang$core$Dict$empty,
			_user$project$Utils$flipDict(identToVarId),
			mathExp);
	};
	var inlinedSimplifiedProgram = function () {
		var inlinedProgram = inlineInvalidFreeNumericIdentsUntilConvergence(programUniqueNames);
		var boundEIdsToSimplify = _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$filterMap,
				function (_p151) {
					var _p152 = _p151;
					return A2(
						_elm_lang$core$Maybe$map,
						function (_p153) {
							return _p152._1.val.eid;
						},
						A2(_elm_lang$core$Dict$get, _p152._0, defsWithInvalidFreeNumericVars));
				},
				_user$project$LangTools$allSimplyResolvableLetBindings(inlinedProgram)));
		return _user$project$FastParser$freshen(
			A2(
				_user$project$Lang$mapExp,
				function (exp) {
					if (A2(_elm_lang$core$Set$member, exp.val.eid, boundEIdsToSimplify)) {
						var _p154 = expToMaybeMathExp(exp);
						if (_p154.ctor === 'Just') {
							return A2(
								_user$project$Lang$copyPrecedingWhitespace,
								exp,
								mathExpToExp(
									_user$project$LocEqn$normalizeSimplify(_p154._0)));
						} else {
							return exp;
						}
					} else {
						return exp;
					}
				},
				inlinedProgram));
	}();
	var _p155 = A3(
		_elm_lang$core$List$foldr,
		F2(
			function (_p157, _p156) {
				var _p158 = _p157;
				var _p171 = _p158._1;
				var _p170 = _p158._0;
				var _p159 = _p156;
				var _p169 = _p159._0;
				var _p168 = _p159._2;
				var _p167 = _p159._1;
				var noChange = {ctor: '_Tuple3', _0: _p169, _1: _p167, _2: _p168};
				if (A2(_elm_lang$core$Set$member, _p170, _p167) || A2(_elm_lang$core$Set$member, _p171, _p168)) {
					return noChange;
				} else {
					var _p160 = expToMaybeMathExp(_p158._2);
					if (_p160.ctor === 'Nothing') {
						return noChange;
					} else {
						var lhs = A2(
							_user$project$Utils$fromJust_,
							'maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic expToMaybeMathExp (eVar identOfDefWhereUsedInvalidly)',
							expToMaybeMathExp(
								_user$project$Lang$eVar(_p171)));
						var locIdInvalidlyFree = A3(_user$project$Utils$justGet_, 'maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic Utils.justGet_ identInvalidlyFree identToVarId', _p170, identToVarId);
						var _p161 = A2(
							_elm_lang$core$Maybe$map,
							mathExpToExp,
							A4(_user$project$LocEqn$solveForLocUnchecked, locIdInvalidlyFree, _elm_lang$core$Dict$empty, lhs, _p160._0));
						if (_p161.ctor === 'Nothing') {
							return noChange;
						} else {
							var _p166 = _p161._0;
							var simpleLetBindings = _elm_lang$core$Dict$fromList(
								_user$project$LangTools$allSimplyResolvableLetBindings(_p169));
							var invalidlyFreeIdentBoundExpOld = A3(_user$project$Utils$justGet_, 'maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic invalidlyFreeIdentBoundExpOld', _p170, simpleLetBindings);
							var boundExpWhereUsedInvalidlyPartiallyReduced = A3(_user$project$Utils$justGet_, 'maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic boundExpWhereUsedInvalidlyPartiallyReduced', _p171, simpleLetBindings);
							var boundExpWhereUsedInvalidlyReduced = function () {
								var identsToReduce = A2(
									_elm_lang$core$Set$intersect,
									numericIdents,
									A2(
										_elm_lang$core$Set$diff,
										_user$project$LangTools$identifiersSet(_p166),
										_user$project$LangTools$identifiersSet(invalidlyFreeIdentBoundExpOld)));
								var inlineUntilConvergence = function (boundExpWhereUsedInvalidlyPartiallyReduced) {
									inlineUntilConvergence:
									while (true) {
										var _p162 = A3(
											_user$project$Lang$mapFoldExp,
											F2(
												function (exp, somethingHappened) {
													var _p163 = _user$project$LangTools$expToMaybeIdent(exp);
													if (_p163.ctor === 'Nothing') {
														return {ctor: '_Tuple2', _0: exp, _1: somethingHappened};
													} else {
														var _p164 = _p163._0;
														return A2(_elm_lang$core$Set$member, _p164, identsToReduce) ? {
															ctor: '_Tuple2',
															_0: A2(
																_user$project$Lang$copyPrecedingWhitespace,
																exp,
																_user$project$FastParser$clearAllIds(
																	A3(_user$project$Utils$justGet_, 'maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic inlineUntilConvergence', _p164, simpleLetBindings))),
															_1: true
														} : {ctor: '_Tuple2', _0: exp, _1: somethingHappened};
													}
												}),
											false,
											boundExpWhereUsedInvalidlyPartiallyReduced);
										var inlinedOnce = _p162._0;
										var somethingHappened = _p162._1;
										if (somethingHappened) {
											var _v59 = inlinedOnce;
											boundExpWhereUsedInvalidlyPartiallyReduced = _v59;
											continue inlineUntilConvergence;
										} else {
											return boundExpWhereUsedInvalidlyPartiallyReduced;
										}
									}
								};
								var inlined = inlineUntilConvergence(boundExpWhereUsedInvalidlyPartiallyReduced);
								var inlinedSimplified = function () {
									if (_elm_lang$core$Native_Utils.eq(inlined, boundExpWhereUsedInvalidlyPartiallyReduced)) {
										return inlined;
									} else {
										var _p165 = expToMaybeMathExp(inlined);
										if (_p165.ctor === 'Just') {
											return mathExpToExp(
												_user$project$LocEqn$normalizeSimplify(_p165._0));
										} else {
											return inlined;
										}
									}
								}();
								return inlinedSimplified;
							}();
							var newProgram = _user$project$FastParser$freshen(
								A3(
									_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
									invalidlyFreeIdentBoundExpOld.val.eid,
									_p166,
									A3(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, boundExpWhereUsedInvalidlyPartiallyReduced.val.eid, boundExpWhereUsedInvalidlyReduced, _p169)));
							return {
								ctor: '_Tuple3',
								_0: newProgram,
								_1: A2(_elm_lang$core$Set$insert, _p170, _p167),
								_2: A2(_elm_lang$core$Set$insert, _p171, _p168)
							};
						}
					}
				}
			}),
		{ctor: '_Tuple3', _0: inlinedSimplifiedProgram, _1: _elm_lang$core$Set$empty, _2: _elm_lang$core$Set$empty},
		A2(
			_elm_lang$core$List$sortBy,
			function (_p172) {
				var _p173 = _p172;
				return {
					ctor: '_Tuple2',
					_0: _user$project$Info$parsedThingToLocation(
						A3(_user$project$Utils$justGet_, 'maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic maybeTwiddledProgram sortBy1', _p173._0, simpleLetBindings)),
					_1: _user$project$Info$parsedThingToLocation(
						A3(_user$project$Utils$justGet_, 'maybeSatisfyUniqueNamesDependenciesByTwiddlingArithmetic maybeTwiddledProgram sortBy2', _p173._1, simpleLetBindings))
				};
			},
			identsOriginallySomewhereInvalidlyFreeWithDefWhereUsedInvalidly));
	var twiddledProgram = _p155._0;
	var identsInvalidlyFreeRewritten = _p155._1;
	var identsWithInvalidlyFreeVarsHandled = _p155._2;
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Set$size(identsInvalidlyFreeRewritten),
		0) > 0) ? _elm_lang$core$Maybe$Just(
		{
			ctor: '_Tuple3',
			_0: twiddledProgram,
			_1: _elm_lang$core$Set$toList(identsInvalidlyFreeRewritten),
			_2: _elm_lang$core$Set$toList(identsWithInvalidlyFreeVarsHandled)
		}) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$CodeMotion$removeNoopResults = F2(
	function (originalProgram, results) {
		var originalUnparsed = A3(_user$project$LangUnparser$unparseWithUniformWhitespace, true, true, originalProgram);
		return A2(
			_elm_lang$core$List$filter,
			function (_p174) {
				var _p175 = _p174;
				return !_elm_lang$core$Native_Utils.eq(
					originalUnparsed,
					A3(_user$project$LangUnparser$unparseWithUniformWhitespace, true, true, _p175._0.exp));
			},
			results);
	});
var _user$project$CodeMotion$pluckExpFromExpsByPath = F2(
	function (path, exps) {
		var _p176 = path;
		if (_p176.ctor === '::') {
			var _p181 = _p176._0;
			return A2(
				_elm_lang$core$Maybe$map,
				function (_p177) {
					var _p178 = _p177;
					var _p180 = _p178._0;
					var _p179 = _p178._1;
					if (_p179.ctor === 'Just') {
						return {
							ctor: '_Tuple2',
							_0: _p180,
							_1: A3(_user$project$Utils$replacei, _p181, _p179._0, exps)
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _p180,
							_1: A2(_user$project$Utils$removei, _p181, exps)
						};
					}
				},
				A2(
					_elm_lang$core$Maybe$andThen,
					_user$project$CodeMotion$pluckExpByPath(_p176._1),
					A2(_user$project$Utils$maybeGeti1, _p181, exps)));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$CodeMotion$pluckExpByPath = F2(
	function (path, exp) {
		var _p182 = {ctor: '_Tuple2', _0: exp.val.e__, _1: path};
		_v66_2:
		do {
			if (_p182.ctor === '_Tuple2') {
				if (_p182._1.ctor === '[]') {
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: exp, _1: _elm_lang$core$Maybe$Nothing});
				} else {
					if (_p182._0.ctor === 'EList') {
						var _p193 = _p182._0._4;
						var _p192 = _p182._0._2;
						var _p191 = _p182._0._0;
						var _p190 = _p182._0._3;
						var _p189 = _p182._1._1;
						var _p188 = _p182._1._0;
						var _p187 = _p182._0._1;
						return (_elm_lang$core$Native_Utils.cmp(
							_p188,
							_elm_lang$core$List$length(_p187)) < 1) ? A2(
							_elm_lang$core$Maybe$map,
							function (_p183) {
								var _p184 = _p183;
								return {
									ctor: '_Tuple2',
									_0: _p184._0,
									_1: _elm_lang$core$Maybe$Just(
										A2(
											_user$project$Lang$replaceE__,
											exp,
											A5(
												_user$project$Lang$EList,
												_p191,
												A2(
													_user$project$Utils$zip,
													A2(
														_elm_lang$core$List$map,
														_elm_lang$core$Tuple$first,
														_user$project$Utils$tail_(_p187)),
													_p184._1),
												_p192,
												_p190,
												_p193)))
								};
							},
							A2(
								_user$project$CodeMotion$pluckExpFromExpsByPath,
								{ctor: '::', _0: _p188, _1: _p189},
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p187))) : (_elm_lang$core$Native_Utils.eq(
							_p188,
							_elm_lang$core$List$length(_p187) + 1) ? A2(
							_elm_lang$core$Maybe$map,
							function (_p185) {
								var _p186 = _p185;
								return {
									ctor: '_Tuple2',
									_0: _p186._0,
									_1: _elm_lang$core$Maybe$Just(
										A2(
											_user$project$Lang$replaceE__,
											exp,
											A5(_user$project$Lang$EList, _p191, _p187, _p192, _p186._1, _p193)))
								};
							},
							A2(
								_elm_lang$core$Maybe$andThen,
								_user$project$CodeMotion$pluckExpByPath(_p189),
								_p190)) : _elm_lang$core$Maybe$Nothing);
					} else {
						break _v66_2;
					}
				}
			} else {
				break _v66_2;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$CodeMotion$tryReorderExps = F4(
	function (pathsToMove, insertPath, pathsToRemove, exps) {
		var _p194 = A2(_user$project$CodeMotion$maybePathAfterPathsRemoved, pathsToMove, insertPath);
		if (_p194.ctor === 'Nothing') {
			var _p195 = A2(
				_elm_lang$core$Debug$log,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'can\'t insert at that path in ',
					A2(
						_elm_lang$core$String$join,
						' ',
						A2(
							_elm_lang$core$List$map,
							_user$project$Syntax$unparser(_user$project$Syntax$Elm),
							exps))),
				insertPath);
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var maybePluckedExpsAndExpsAfterRemoved1 = A3(
				_user$project$Utils$foldrMaybe,
				F2(
					function (pathToRemove, _p196) {
						var _p197 = _p196;
						return A2(
							_elm_lang$core$Maybe$map,
							function (_p198) {
								var _p199 = _p198;
								return {
									ctor: '_Tuple2',
									_0: {ctor: '::', _0: _p199._0, _1: _p197._0},
									_1: _p199._1
								};
							},
							A2(_user$project$CodeMotion$pluckExpFromExpsByPath, pathToRemove, _p197._1));
					}),
				_elm_lang$core$Maybe$Just(
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: exps
					}),
				_elm_lang$core$List$sort(pathsToMove));
			var _p200 = maybePluckedExpsAndExpsAfterRemoved1;
			if (_p200.ctor === 'Just') {
				var maybeExpsAfterInsertion = A3(
					_user$project$Utils$foldrMaybe,
					F2(
						function (pluckedExp, newExps) {
							return A3(_user$project$CodeMotion$addExpToExpsByPath, pluckedExp, _p194._0, newExps);
						}),
					_elm_lang$core$Maybe$Just(_p200._0._1),
					_p200._0._0);
				var maybeNewExps = function () {
					var removeExpFromExpsByPath = F2(
						function (pathToRemove, exps) {
							return A2(
								_elm_lang$core$Maybe$map,
								_elm_lang$core$Tuple$second,
								A2(_user$project$CodeMotion$pluckExpFromExpsByPath, pathToRemove, exps));
						});
					return A3(
						_user$project$Utils$foldrMaybe,
						removeExpFromExpsByPath,
						maybeExpsAfterInsertion,
						_elm_lang$core$List$sort(pathsToRemove));
				}();
				return maybeNewExps;
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	});
var _user$project$CodeMotion$reorderExpressionsTransformation = F2(
	function (originalProgram, selections) {
		var _p201 = selections;
		_v73_2:
		do {
			if (_p201.ctor === '_Tuple7') {
				if (_p201._2.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (((((_p201._3.ctor === '[]') && (_p201._4.ctor === '[]')) && (_p201._5.ctor === '::')) && (_p201._5._1.ctor === '[]')) && (_p201._6.ctor === '[]')) {
						var _p211 = _p201._2;
						var _p202 = _p201._5._0;
						var beforeAfter = _p202._0;
						var expTargetEId = _p202._1;
						var relevantEIds = {ctor: '::', _0: expTargetEId, _1: _p211};
						var maybeSharedAncestor = _user$project$Utils$maybeLast(
							A2(
								_user$project$Lang$commonAncestors,
								function (e) {
									return A2(_elm_lang$core$List$member, e.val.eid, relevantEIds);
								},
								originalProgram));
						var reorder = F3(
							function (sharedAncestorEId, expList, makeNewAncestorE__) {
								var maybeInsertPath = function () {
									var _p203 = {
										ctor: '_Tuple2',
										_0: beforeAfter,
										_1: A2(_user$project$LangTools$eidPathInExpList, expList, expTargetEId)
									};
									_v74_2:
									do {
										if (_p203.ctor === '_Tuple2') {
											if (_p203._0.ctor === 'Before') {
												if (_p203._1.ctor === 'Just') {
													return _elm_lang$core$Maybe$Just(_p203._1._0);
												} else {
													break _v74_2;
												}
											} else {
												if (_p203._1.ctor === 'Just') {
													return _user$project$Lang$pathRightSibling(_p203._1._0);
												} else {
													break _v74_2;
												}
											}
										} else {
											break _v74_2;
										}
									} while(false);
									return _elm_lang$core$Maybe$Nothing;
								}();
								var maybePathsToMove = _user$project$Utils$projJusts(
									A2(
										_elm_lang$core$List$map,
										_user$project$LangTools$eidPathInExpList(expList),
										_p211));
								var _p204 = A3(
									_user$project$Utils$bindMaybe2,
									F2(
										function (pathsToMove, insertPath) {
											return A4(
												_user$project$CodeMotion$tryReorderExps,
												pathsToMove,
												insertPath,
												{ctor: '[]'},
												expList);
										}),
									maybePathsToMove,
									maybeInsertPath);
								if (_p204.ctor === 'Nothing') {
									return _elm_lang$core$Maybe$Nothing;
								} else {
									var ancestorE__WithReorderedChildren = makeNewAncestorE__(
										A2(_user$project$Lang$imitateExpListWhitespace, expList, _p204._0));
									var newProgram = A3(_user$project$Lang$replaceExpNodeE__ByEId, sharedAncestorEId, ancestorE__WithReorderedChildren, originalProgram);
									return _elm_lang$core$Maybe$Just(
										function (_p205) {
											var _p206 = _p205;
											return {
												ctor: '::',
												_0: A2(_user$project$InterfaceModel$synthesisResult, 'Reorder Expressions', newProgram),
												_1: {ctor: '[]'}
											};
										});
								}
							});
						var _p207 = maybeSharedAncestor;
						if (_p207.ctor === 'Just') {
							var _p210 = _p207._0;
							var sharedAncestorEId = _p210.val.eid;
							var _p208 = _p210.val.e__;
							switch (_p208.ctor) {
								case 'EList':
									var _p209 = _p208._1;
									return A3(
										reorder,
										sharedAncestorEId,
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p209),
										function (newListExps) {
											return A5(
												_user$project$Lang$EList,
												_p208._0,
												A2(
													_user$project$Utils$zip,
													A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p209),
													newListExps),
												_p208._2,
												_p208._3,
												_p208._4);
										});
								case 'EApp':
									return A3(
										reorder,
										sharedAncestorEId,
										_p208._2,
										function (newArgExps) {
											return A5(_user$project$Lang$EApp, _p208._0, _p208._1, newArgExps, _p208._3, _p208._4);
										});
								case 'EOp':
									return A3(
										reorder,
										sharedAncestorEId,
										_p208._2,
										function (newOperands) {
											return A4(_user$project$Lang$EOp, _p208._0, _p208._1, newOperands, _p208._3);
										});
								default:
									return _elm_lang$core$Maybe$Nothing;
							}
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						break _v73_2;
					}
				}
			} else {
				break _v73_2;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$CodeMotion$pluckPatFromPats = F2(
	function (path, pats) {
		var _p212 = path;
		if (_p212.ctor === '::') {
			var _p217 = _p212._0;
			return A2(
				_elm_lang$core$Maybe$map,
				function (_p213) {
					var _p214 = _p213;
					var _p216 = _p214._0;
					var _p215 = _p214._1;
					if (_p215.ctor === 'Just') {
						return {
							ctor: '_Tuple2',
							_0: _p216,
							_1: A2(
								_user$project$Lang$imitatePatListWhitespace,
								pats,
								A3(_user$project$Utils$replacei, _p217, _p215._0, pats))
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _p216,
							_1: A2(
								_user$project$Lang$imitatePatListWhitespace,
								pats,
								A2(_user$project$Utils$removei, _p217, pats))
						};
					}
				},
				A2(
					_elm_lang$core$Maybe$andThen,
					_user$project$CodeMotion$pluckPat(_p212._1),
					A2(_user$project$Utils$maybeGeti1, _p217, pats)));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$CodeMotion$pluckPat = F2(
	function (path, pat) {
		var _p218 = {ctor: '_Tuple2', _0: pat.val.p__, _1: path};
		_v82_3:
		do {
			if (_p218.ctor === '_Tuple2') {
				if (_p218._1.ctor === '[]') {
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: pat, _1: _elm_lang$core$Maybe$Nothing});
				} else {
					switch (_p218._0.ctor) {
						case 'PAs':
							if (_p218._1._0 === 1) {
								var _p219 = A2(
									_elm_lang$core$Debug$log,
									'plucking out of as-pattern is generally unsafe (not allowed yet)',
									{ctor: '_Tuple0'});
								return _elm_lang$core$Maybe$Nothing;
							} else {
								break _v82_3;
							}
						case 'PList':
							var _p230 = _p218._0._4;
							var _p229 = _p218._0._2;
							var _p228 = _p218._0._0;
							var _p227 = _p218._0._1;
							var _p226 = _p218._0._3;
							var _p225 = _p218._1._1;
							var _p224 = _p218._1._0;
							return (_elm_lang$core$Native_Utils.cmp(
								_p224,
								_elm_lang$core$List$length(_p227)) < 1) ? A2(
								_elm_lang$core$Maybe$map,
								function (_p220) {
									var _p221 = _p220;
									return {
										ctor: '_Tuple2',
										_0: _p221._0,
										_1: _elm_lang$core$Maybe$Just(
											A2(
												_user$project$Lang$replaceP__,
												pat,
												A5(_user$project$Lang$PList, _p228, _p221._1, _p229, _p226, _p230)))
									};
								},
								A2(
									_user$project$CodeMotion$pluckPatFromPats,
									{ctor: '::', _0: _p224, _1: _p225},
									_p227)) : (_elm_lang$core$Native_Utils.eq(
								_p224,
								_elm_lang$core$List$length(_p227) + 1) ? A2(
								_elm_lang$core$Maybe$map,
								function (_p222) {
									var _p223 = _p222;
									return {
										ctor: '_Tuple2',
										_0: _p223._0,
										_1: _elm_lang$core$Maybe$Just(
											A2(
												_user$project$Lang$replaceP__,
												pat,
												A5(_user$project$Lang$PList, _p228, _p227, _p229, _p223._1, _p230)))
									};
								},
								A2(
									_elm_lang$core$Maybe$andThen,
									_user$project$CodeMotion$pluckPat(_p225),
									_p226)) : _elm_lang$core$Maybe$Nothing);
						default:
							break _v82_3;
					}
				}
			} else {
				break _v82_3;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$CodeMotion$justRemovePatFromPats = F3(
	function (failureMessage, path, pats) {
		return _elm_lang$core$Tuple$second(
			A2(
				_user$project$Utils$fromJust_,
				failureMessage,
				A2(_user$project$CodeMotion$pluckPatFromPats, path, pats)));
	});
var _user$project$CodeMotion$removeArg = F3(
	function (syntax, pathedPatId, originalProgram) {
		var _p231 = pathedPatId;
		var funcEId = _p231._0._0;
		var path = _p231._1;
		var _p232 = A2(_user$project$LangTools$findLetAndIdentBindingExp, funcEId, originalProgram);
		if (_p232.ctor === 'Just') {
			var _p262 = _p232._0._1;
			var _p233 = _p232._0._0.val.e__;
			if (_p233.ctor === 'ELet') {
				var _p260 = _p233._7;
				var _p259 = _p233._2;
				var _p258 = _p233._5;
				var funcVarUsageEIds = _p259 ? _elm_lang$core$Set$fromList(
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_user$project$LangTools$identifierUsageEIds, _p262, _p258),
						A2(_user$project$LangTools$identifierUsageEIds, _p262, _p260))) : _elm_lang$core$Set$fromList(
					A2(_user$project$LangTools$identifierUsageEIds, _p262, _p260));
				var _p234 = _p258.val.e__;
				if (_p234.ctor === 'EFun') {
					var _p256 = _p234._1;
					var _p255 = _p234._2;
					var _p235 = A2(_user$project$CodeMotion$pluckPatFromPats, path, _p256);
					if ((_p235.ctor === 'Just') && (_p235._0.ctor === '_Tuple2')) {
						var _p253 = _p235._0._1;
						var _p252 = _p235._0._0;
						var transformedApplicationsWithRemovedCallsiteArgument = A2(
							_elm_lang$core$List$filterMap,
							function (exp) {
								var _p236 = exp.val.e__;
								if (_p236.ctor === 'EApp') {
									var _p240 = _p236._1;
									var _p239 = _p236._2;
									return A2(_elm_lang$core$Set$member, _p240.val.eid, funcVarUsageEIds) ? A2(
										_elm_lang$core$Maybe$map,
										function (_p237) {
											var _p238 = _p237;
											var newAppArgs = (_elm_lang$core$Native_Utils.eq(
												_p253,
												{ctor: '[]'}) && (!_elm_lang$core$Native_Utils.eq(
												_p239,
												{ctor: '[]'}))) ? {
												ctor: '::',
												_0: _user$project$Lang$eTuple(
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											} : _p238._1;
											return {
												ctor: '_Tuple4',
												_0: exp.val.eid,
												_1: A2(
													_user$project$Lang$replaceE__,
													exp,
													A5(_user$project$Lang$EApp, _p236._0, _p240, newAppArgs, _p236._3, _p236._4)),
												_2: _p240.val.eid,
												_3: _p238._0
											};
										},
										A2(_user$project$CodeMotion$pluckExpFromExpsByPath, path, _p239)) : _elm_lang$core$Maybe$Nothing;
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							},
							_p259 ? A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Lang$flattenExpTree(_p258),
								_user$project$Lang$flattenExpTree(_p260)) : _user$project$Lang$flattenExpTree(_p260));
						var _p241 = transformedApplicationsWithRemovedCallsiteArgument;
						if ((_p241.ctor === '::') && (_p241._0.ctor === '_Tuple4')) {
							var _p250 = _p241._0._3;
							var _p242 = function () {
								var _p243 = {
									ctor: '_Tuple2',
									_0: _p252.val.p__,
									_1: _user$project$LangTools$nodeCount(_p250)
								};
								if (((_p243.ctor === '_Tuple2') && (_p243._0.ctor === 'PVar')) && (_p243._1 === 1)) {
									var _p245 = _p243._0._1;
									var newFBody = A2(
										_user$project$LangTools$transformVarsUntilBound,
										A2(
											_elm_lang$core$Dict$singleton,
											_p245,
											function (varExp) {
												return A2(
													_user$project$Lang$setEId,
													varExp.val.eid,
													_user$project$FastParser$clearAllIds(_p250));
											}),
										_p255);
									var replacementLocationEIds = A2(
										_elm_lang$core$List$map,
										function (_p244) {
											return function (_) {
												return _.eid;
											}(
												function (_) {
													return _.val;
												}(_p244));
										},
										A2(_user$project$LangTools$identifierUses, _p245, _p255));
									return {ctor: '_Tuple2', _0: newFBody, _1: replacementLocationEIds};
								} else {
									var inlinedArgEId = _user$project$FastParser$maxId(originalProgram) + 1;
									var newFBody = A6(
										_user$project$LangTools$newLetFancyWhitespace,
										-1,
										false,
										_p252,
										A2(
											_user$project$Lang$setEId,
											inlinedArgEId,
											_user$project$FastParser$clearAllIds(_p250)),
										_p255,
										originalProgram);
									var replacementLocationEIds = {
										ctor: '::',
										_0: inlinedArgEId,
										_1: {ctor: '[]'}
									};
									return {ctor: '_Tuple2', _0: newFBody, _1: replacementLocationEIds};
								}
							}();
							var newFBody = _p242._0;
							var replacementLocationEIds = _p242._1;
							var newProgram = function () {
								var eidToNewNode = _elm_lang$core$Dict$fromList(
									A2(
										_elm_lang$core$List$map,
										function (_p246) {
											var _p247 = _p246;
											return {ctor: '_Tuple2', _0: _p247._0, _1: _p247._1};
										},
										transformedApplicationsWithRemovedCallsiteArgument));
								var newArgPats = _elm_lang$core$Native_Utils.eq(
									_p253,
									{ctor: '[]'}) ? {
									ctor: '::',
									_0: _user$project$Lang$pList0(
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								} : _p253;
								return A2(
									_user$project$Lang$replaceExpNodes,
									eidToNewNode,
									A3(
										_user$project$Lang$replaceExpNodeE__,
										_p258,
										A4(_user$project$Lang$EFun, _p234._0, newArgPats, newFBody, _p234._3),
										originalProgram));
							}();
							var isSafe = function () {
								var allCallsitesTransformed = function () {
									var usagesTransformed = _elm_lang$core$Set$fromList(
										A2(
											_elm_lang$core$List$map,
											function (_p248) {
												var _p249 = _p248;
												return _p249._2;
											},
											transformedApplicationsWithRemovedCallsiteArgument));
									return _elm_lang$core$Native_Utils.eq(funcVarUsageEIds, usagesTransformed);
								}();
								var argReplacementSafe = A2(
									_elm_lang$core$List$all,
									function (freeVarInReplacement) {
										var originalBindingScopeId = A2(_user$project$LangTools$bindingScopeIdFor, freeVarInReplacement, originalProgram);
										var freeIdentInReplacement = _user$project$LangTools$expToIdent(freeVarInReplacement);
										return A2(
											_elm_lang$core$List$all,
											function (replacedEId) {
												return _elm_lang$core$Native_Utils.eq(
													originalBindingScopeId,
													A3(_user$project$LangTools$bindingScopeIdForIdentAtEId, freeIdentInReplacement, replacedEId, newProgram));
											},
											replacementLocationEIds);
									},
									_user$project$LangTools$freeVars(_p250));
								return allCallsitesTransformed && argReplacementSafe;
							}();
							return {
								ctor: '::',
								_0: A2(
									_user$project$InterfaceModel$setResultSafe,
									isSafe,
									A2(
										_user$project$InterfaceModel$synthesisResult,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Remove Argument ',
											_user$project$Utils$squish(
												A2(_user$project$Syntax$patternUnparser, syntax, _p252))),
										newProgram)),
								_1: {ctor: '[]'}
							};
						} else {
							var _p251 = A2(_elm_lang$core$Debug$log, 'no uses to provide arg replacement value', transformedApplicationsWithRemovedCallsiteArgument);
							return {ctor: '[]'};
						}
					} else {
						var _p254 = A2(
							_elm_lang$core$Debug$log,
							'cannot pluck argument',
							{ctor: '_Tuple2', _0: path, _1: _p256});
						return {ctor: '[]'};
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'CodeMotion',
						{
							start: {line: 2115, column: 11},
							end: {line: 2224, column: 79}
						},
						_p234)('CodeMotion.removeArg should\'ve had an EFun here');
				}
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'CodeMotion',
					{
						start: {line: 2107, column: 7},
						end: {line: 2227, column: 98}
					},
					_p233)('CodeMotion.removeArg expected findLetAndIdentBindingExp to return ELet');
			}
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$removeArgs = F3(
	function (syntax, pathedPatIds, originalProgram) {
		var _p263 = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (pathedPatId, _p264) {
					var _p265 = _p264;
					var _p266 = A2(
						_elm_lang$core$Maybe$map,
						A2(_user$project$CodeMotion$removeArg, syntax, pathedPatId),
						_p265._0);
					if ((_p266.ctor === 'Just') && (_p266._0.ctor === '::')) {
						var _p267 = _p266._0._0._0;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Maybe$Just(_p267.exp),
							_1: _p265._1 && _p267.isSafe
						};
					} else {
						return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: false};
					}
				}),
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Just(originalProgram),
				_1: true
			},
			_elm_lang$core$List$sort(pathedPatIds));
		var maybeNewProgram = _p263._0;
		var isSafe = _p263._1;
		var _p268 = maybeNewProgram;
		if (_p268.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(
					_user$project$InterfaceModel$setResultSafe,
					isSafe,
					A2(_user$project$InterfaceModel$synthesisResult, 'Remove Arguments', _p268._0)),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$deadPathsInPats = function (pats) {
	return A2(
		_elm_lang$core$List$concatMap,
		function (_p269) {
			var _p270 = _p269;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(_p270._0),
				_user$project$CodeMotion$deadPathsInPat(_p270._1));
		},
		_user$project$Utils$zipi1(pats));
};
var _user$project$CodeMotion$deadPathsInPat = function (pat) {
	if (_elm_lang$core$Native_Utils.eq(
		_user$project$LangTools$identifiersListInPat(pat),
		{ctor: '[]'})) {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var _p271 = pat.val.p__;
		switch (_p271.ctor) {
			case 'PVar':
				return {ctor: '[]'};
			case 'PWildcard':
				return {ctor: '[]'};
			case 'PConst':
				return A2(
					_elm_lang$core$Debug$log,
					'why do you put constants in your function arguments?!',
					{ctor: '[]'});
			case 'PBase':
				return A2(
					_elm_lang$core$Debug$log,
					'why do you put base vals in your function arguments?!',
					{ctor: '[]'});
			case 'PAs':
				return {ctor: '[]'};
			case 'PParens':
				return {ctor: '[]'};
			default:
				var _p272 = _p271._1;
				var deadPathsInTail = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(
						_elm_lang$core$Maybe$map,
						function (tailPat) {
							var tailI = _elm_lang$core$List$length(_p272) + 1;
							return A2(
								_elm_lang$core$List$map,
								F2(
									function (x, y) {
										return {ctor: '::', _0: x, _1: y};
									})(tailI),
								_user$project$CodeMotion$deadPathsInPat(tailPat));
						},
						_p271._3));
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$CodeMotion$deadPathsInPats(_p272),
					deadPathsInTail);
		}
	}
};
var _user$project$CodeMotion$reorderFunctionArgs = F4(
	function (funcEId, paths, targetPath, originalProgram) {
		var _p273 = A2(_user$project$LangTools$findLetAndIdentBindingExp, funcEId, originalProgram);
		if (_p273.ctor === 'Just') {
			var _p298 = _p273._0._1;
			var _p274 = _p273._0._0.val.e__;
			if (_p274.ctor === 'ELet') {
				var _p296 = _p274._7;
				var _p295 = _p274._5;
				var funcVarUsageEIds = _p274._2 ? _elm_lang$core$Set$fromList(
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_user$project$LangTools$identifierUsageEIds, _p298, _p295),
						A2(_user$project$LangTools$identifierUsageEIds, _p298, _p296))) : _elm_lang$core$Set$fromList(
					A2(_user$project$LangTools$identifierUsageEIds, _p298, _p296));
				var _p275 = _p295.val.e__;
				if (_p275.ctor === 'EFun') {
					var _p293 = _p275._1;
					var _p276 = A3(
						_elm_lang$core$List$foldr,
						F2(
							function (pathToRemove, _p277) {
								var _p278 = _p277;
								var _p282 = _p278._0;
								var _p281 = _p278._2;
								var _p280 = _p278._1;
								var _p279 = A2(_user$project$CodeMotion$pluckPatFromPats, pathToRemove, _p280);
								if ((_p279.ctor === 'Just') && (_p279._0.ctor === '_Tuple2')) {
									return {
										ctor: '_Tuple3',
										_0: {ctor: '::', _0: _p279._0._0, _1: _p282},
										_1: _p279._0._1,
										_2: {ctor: '::', _0: pathToRemove, _1: _p281}
									};
								} else {
									return {ctor: '_Tuple3', _0: _p282, _1: _p280, _2: _p281};
								}
							}),
						{
							ctor: '_Tuple3',
							_0: {ctor: '[]'},
							_1: _p293,
							_2: {ctor: '[]'}
						},
						_elm_lang$core$List$sort(paths));
					var pluckedPats = _p276._0;
					var fpatsAfterRemoved1 = _p276._1;
					var pathsRemoved1 = _p276._2;
					var _p283 = A2(_user$project$CodeMotion$maybePathAfterPathsRemoved, pathsRemoved1, targetPath);
					if (_p283.ctor === 'Nothing') {
						var _p284 = A2(
							_elm_lang$core$Debug$log,
							'can\'t insert at that path',
							{ctor: '_Tuple2', _0: targetPath, _1: _p293});
						return {ctor: '[]'};
					} else {
						var _p292 = _p283._0;
						var maybeFPatsAfterInsertion = A3(
							_user$project$Utils$foldrMaybe,
							F2(
								function (pluckedPat, newFPats) {
									return A3(_user$project$CodeMotion$addPatToPats, pluckedPat, _p292, newFPats);
								}),
							_elm_lang$core$Maybe$Just(fpatsAfterRemoved1),
							pluckedPats);
						var _p285 = maybeFPatsAfterInsertion;
						if (_p285.ctor === 'Nothing') {
							var _p286 = A2(
								_elm_lang$core$Debug$log,
								'couldn\'t reorder patterns',
								{ctor: '_Tuple2', _0: _p292, _1: fpatsAfterRemoved1});
							return {ctor: '[]'};
						} else {
							var _p291 = _p285._0;
							var pathsRemoved2 = _user$project$CodeMotion$deadPathsInPats(_p291);
							var newFPats = A3(
								_elm_lang$core$List$foldr,
								_user$project$CodeMotion$justRemovePatFromPats('CodeMotion.reorderFunctionArgs shouldn\'t crash because we are removing paths known to exist'),
								_p291,
								pathsRemoved2);
							var _p287 = A3(
								_user$project$Lang$mapFoldExp,
								F2(
									function (exp, funcVarUsagesTransformed) {
										var _p288 = exp.val.e__;
										if (_p288.ctor === 'EApp') {
											var _p290 = _p288._1;
											if (A2(_elm_lang$core$Set$member, _p290.val.eid, funcVarUsageEIds)) {
												var _p289 = A4(_user$project$CodeMotion$tryReorderExps, pathsRemoved1, targetPath, pathsRemoved2, _p288._2);
												if (_p289.ctor === 'Just') {
													return {
														ctor: '_Tuple2',
														_0: A2(
															_user$project$Lang$replaceE__,
															exp,
															A5(_user$project$Lang$EApp, _p288._0, _p290, _p289._0, _p288._3, _p288._4)),
														_1: A2(_elm_lang$core$Set$insert, _p290.val.eid, funcVarUsagesTransformed)
													};
												} else {
													return {ctor: '_Tuple2', _0: exp, _1: funcVarUsagesTransformed};
												}
											} else {
												return {ctor: '_Tuple2', _0: exp, _1: funcVarUsagesTransformed};
											}
										} else {
											return {ctor: '_Tuple2', _0: exp, _1: funcVarUsagesTransformed};
										}
									}),
								_elm_lang$core$Set$empty,
								A3(
									_user$project$Lang$replaceExpNodeE__ByEId,
									_p295.val.eid,
									A4(_user$project$Lang$EFun, _p275._0, newFPats, _p275._2, _p275._3),
									originalProgram));
							var newProgram = _p287._0;
							var funcVarUsagesTransformed = _p287._1;
							var isSafe = _elm_lang$core$Native_Utils.eq(funcVarUsageEIds, funcVarUsagesTransformed);
							return {
								ctor: '::',
								_0: A2(
									_user$project$InterfaceModel$setResultSafe,
									isSafe,
									A2(_user$project$InterfaceModel$synthesisResult, 'Reorder Arguments', newProgram)),
								_1: {ctor: '[]'}
							};
						}
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'CodeMotion',
						{
							start: {line: 2307, column: 11},
							end: {line: 2382, column: 89}
						},
						_p275)('CodeMotion.reorderFunctionArgs should\'ve had an EFun here');
				}
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'CodeMotion',
					{
						start: {line: 2299, column: 7},
						end: {line: 2385, column: 108}
					},
					_p274)('CodeMotion.reorderFunctionArgs expected findLetAndIdentBindingExp to return ELet');
			}
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$pluck__ = F3(
	function (p, e1, path) {
		var _p299 = {ctor: '_Tuple3', _0: p.val.p__, _1: e1.val.e__, _2: path};
		_v109_3:
		do {
			if (_p299.ctor === '_Tuple3') {
				if (_p299._2.ctor === '[]') {
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '_Tuple3',
							_0: {ctor: '_Tuple2', _0: p, _1: e1},
							_1: A2(
								_user$project$Lang$replaceP__,
								p,
								A3(
									_user$project$Lang$PVar,
									_user$project$Lang$ws(
										_user$project$Lang$precedingWhitespacePat(p)),
									'*RemoveMe*',
									_user$project$Lang$noWidgetDecl)),
							_2: A2(
								_user$project$Lang$replaceE__,
								e1,
								A5(
									_user$project$Lang$EList,
									_user$project$Lang$ws(
										_user$project$Lang$precedingWhitespace(e1)),
									{ctor: '[]'},
									_user$project$Lang$space0,
									_elm_lang$core$Maybe$Nothing,
									_user$project$Lang$space0))
						});
				} else {
					switch (_p299._0.ctor) {
						case 'PAs':
							var _p300 = A2(
								_elm_lang$core$Debug$log,
								'can\'t pluck out of as-pattern yet (unsafe)',
								{ctor: '_Tuple0'});
							return _elm_lang$core$Maybe$Nothing;
						case 'PList':
							if (_p299._1.ctor === 'EList') {
								var _p317 = _p299._0._4;
								var _p316 = _p299._0._2;
								var _p315 = _p299._0._0;
								var _p314 = _p299._0._1;
								var _p313 = _p299._0._3;
								var _p312 = _p299._1._3;
								var _p311 = _p299._2._1;
								var _p310 = _p299._2._0;
								var _p309 = _p299._1._4;
								var _p308 = _p299._1._2;
								var _p307 = _p299._1._0;
								var _p306 = _p299._1._1;
								if ((_elm_lang$core$Native_Utils.cmp(
									_elm_lang$core$List$length(_p314),
									_p310) > -1) && (_elm_lang$core$Native_Utils.cmp(
									_elm_lang$core$List$length(_p306),
									_p310) > -1)) {
									var pi = A2(_user$project$Utils$geti, _p310, _p314);
									var ei = A2(
										_user$project$Utils$geti,
										_p310,
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p306));
									return A2(
										_elm_lang$core$Maybe$map,
										function (_p301) {
											var _p302 = _p301;
											var _p303 = {
												ctor: '_Tuple2',
												_0: A3(_user$project$Utils$replacei, _p310, _p302._1, _p314),
												_1: A3(
													_user$project$Utils$replacei,
													_p310,
													_p302._2,
													A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p306))
											};
											var newPs = _p303._0;
											var newEs = _p303._1;
											return {
												ctor: '_Tuple3',
												_0: _p302._0,
												_1: A2(
													_user$project$Lang$replaceP__,
													p,
													A5(_user$project$Lang$PList, _p315, newPs, _p316, _p313, _p317)),
												_2: A2(
													_user$project$Lang$replaceE__,
													e1,
													A5(
														_user$project$Lang$EList,
														_p307,
														A2(
															_user$project$Utils$zip,
															A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p306),
															newEs),
														_p308,
														_p312,
														_p309))
											};
										},
										A3(_user$project$CodeMotion$pluck__, pi, ei, _p311));
								} else {
									if (_elm_lang$core$Native_Utils.eq(
										_elm_lang$core$List$length(_p314),
										_elm_lang$core$List$length(_p306)) && (_elm_lang$core$Native_Utils.eq(
										_p310,
										1 + _elm_lang$core$List$length(_p314)) && (_user$project$Utils$maybeToBool(_p313) && _user$project$Utils$maybeToBool(_p312)))) {
										var pi = _user$project$Utils$fromJust(_p313);
										var ei = _user$project$Utils$fromJust(_p312);
										return A2(
											_elm_lang$core$Maybe$map,
											function (_p304) {
												var _p305 = _p304;
												return {
													ctor: '_Tuple3',
													_0: _p305._0,
													_1: A2(
														_user$project$Lang$replaceP__,
														p,
														A5(
															_user$project$Lang$PList,
															_p315,
															_p314,
															_p316,
															_elm_lang$core$Maybe$Just(_p305._1),
															_p317)),
													_2: A2(
														_user$project$Lang$replaceE__,
														e1,
														A5(
															_user$project$Lang$EList,
															_p307,
															_p306,
															_p308,
															_elm_lang$core$Maybe$Just(_p305._2),
															_p309))
												};
											},
											A3(_user$project$CodeMotion$pluck__, pi, ei, _p311));
									} else {
										return A2(_elm_lang$core$Debug$log, 'pluck index longer than head list of PList or EList', _elm_lang$core$Maybe$Nothing);
									}
								}
							} else {
								break _v109_3;
							}
						default:
							break _v109_3;
					}
				}
			} else {
				break _v109_3;
			}
		} while(false);
		var _p318 = A2(
			_elm_lang$core$Debug$log,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'pluck_: bad pattern ',
				A2(_user$project$Syntax$patternUnparser, _user$project$Syntax$Elm, p)),
			path);
		return _elm_lang$core$Maybe$Nothing;
	});
var _user$project$CodeMotion$pluck_ = F3(
	function (scopeExp, path, program) {
		var _p319 = function () {
			var _p320 = scopeExp.val.e__;
			if (_p320.ctor === 'ELet') {
				return {
					ctor: '_Tuple2',
					_0: A3(_user$project$CodeMotion$pluck__, _p320._3, _p320._5, path),
					_1: _user$project$LangTools$expToLetParts(scopeExp)
				};
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'CodeMotion',
					{
						start: {line: 216, column: 5},
						end: {line: 218, column: 153}
					},
					_p320)(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'pluck_: bad Exp__ (note: case branches, and func args not supported) ',
						_user$project$LangUnparser$unparseWithIds(scopeExp)));
			}
		}();
		var maybePluckedAndNewPatAndBoundExp = _p319._0;
		var ws1 = _p319._1._0;
		var letKind = _p319._1._1;
		var isRec = _p319._1._2;
		var ws2 = _p319._1._4;
		var ws3 = _p319._1._6;
		var e2 = _p319._1._7;
		var ws4 = _p319._1._8;
		var _p322 = maybePluckedAndNewPatAndBoundExp;
		if (_p322.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple3', _0: _p322._0._0._0, _1: _p322._0._0._1, _2: isRec},
					_1: A3(
						_user$project$Lang$replaceExpNodeE__,
						scopeExp,
						A9(_user$project$Lang$ELet, ws1, letKind, isRec, _p322._0._1, ws2, _p322._0._2, ws3, e2, ws4),
						program)
				});
		}
	});
var _user$project$CodeMotion$pluck = F2(
	function (_p323, program) {
		var _p324 = _p323;
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (scope) {
				return A3(_user$project$CodeMotion$pluck_, scope, _p324._1, program);
			},
			A2(
				_user$project$Utils$filterMaybe,
				_user$project$Lang$isLet,
				A2(_user$project$Lang$findExpByEId, program, _p324._0._0)));
	});
var _user$project$CodeMotion$liftDependenciesBasedOnUniqueNames = function (program) {
	var needToLift = _elm_lang$core$Set$toList(
		A2(
			_elm_lang$core$Set$diff,
			_user$project$LangTools$freeIdentifiers(program),
			_user$project$LangTools$preludeIdentifiers));
	var safeToLift = function () {
		var identToDependentIdents = _elm_lang$core$Dict$fromList(
			A2(
				_elm_lang$core$List$map,
				function (_p325) {
					var _p326 = _p325;
					return {
						ctor: '_Tuple2',
						_0: _p326._0,
						_1: _elm_lang$core$Set$toList(
							_user$project$LangTools$freeIdentifiers(_p326._1))
					};
				},
				_user$project$LangTools$allSimplyResolvableLetBindings(program)));
		var hasCyclicDependencies = F2(
			function (seenIdents, ident) {
				if (A2(_elm_lang$core$Set$member, ident, seenIdents)) {
					return true;
				} else {
					var _p327 = A2(_elm_lang$core$Dict$get, ident, identToDependentIdents);
					if (_p327.ctor === 'Just') {
						return A2(
							_elm_lang$core$List$any,
							hasCyclicDependencies(
								A2(_elm_lang$core$Set$insert, ident, seenIdents)),
							_p327._0);
					} else {
						return false;
					}
				}
			});
		return A2(
			_elm_lang$core$List$filter,
			function (_p328) {
				return !A2(hasCyclicDependencies, _elm_lang$core$Set$empty, _p328);
			},
			needToLift);
	}();
	var bringIdentIntoScope = function (identToLift) {
		var maybeOriginalDefiningScope = A2(
			_user$project$Lang$findFirstNode,
			function (_p329) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					false,
					A2(
						_elm_lang$core$Maybe$map,
						function (_p330) {
							return A2(
								_elm_lang$core$List$member,
								identToLift,
								_user$project$LangTools$identifiersListInPat(_p330));
						},
						_user$project$LangTools$expToMaybeLetPat(_p329)));
			},
			program);
		var _p331 = maybeOriginalDefiningScope;
		if (_p331.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p336 = _p331._0;
			var _p332 = A2(
				_user$project$LangTools$pathForIdentInPat,
				identToLift,
				_user$project$LangTools$expToLetPat(_p336));
			if (_p332.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p333 = A2(
					_user$project$CodeMotion$pluck,
					{
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: _p336.val.eid, _1: 1},
						_1: _p332._0
					},
					program);
				if (_p333.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _p335 = _p333._0._1;
					var eidToWrap = function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(
							A3(
								_user$project$LangTools$deepestCommonAncestorOrSelfWithNewline,
								program,
								_elm_lang$core$Basics$always(true),
								function (_p334) {
									return A2(
										F2(
											function (x, y) {
												return _elm_lang$core$Native_Utils.eq(x, y);
											}),
										_elm_lang$core$Maybe$Just(identToLift),
										_user$project$LangTools$expToMaybeIdent(_p334));
								})));
					var insertedLetEId = _user$project$FastParser$maxId(program) + 1;
					var newProgram = A3(
						_user$project$Lang$mapExpNode,
						eidToWrap,
						function (expToWrap) {
							return A6(_user$project$LangTools$newLetFancyWhitespace, insertedLetEId, _p333._0._0._2, _p333._0._0._0, _p333._0._0._1, expToWrap, _p335);
						},
						_p335);
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: newProgram, _1: identToLift});
				}
			}
		}
	};
	var maybeNewProgramAndMovedIdent = A2(_user$project$Utils$mapFirstSuccess, bringIdentIntoScope, safeToLift);
	var _p337 = maybeNewProgramAndMovedIdent;
	if (_p337.ctor === 'Nothing') {
		return {
			ctor: '_Tuple2',
			_0: _user$project$LangSimplify$simplifyAssignments(program),
			_1: {ctor: '[]'}
		};
	} else {
		var _p338 = _user$project$CodeMotion$liftDependenciesBasedOnUniqueNames(_p337._0._0);
		var finalProgram = _p338._0;
		var movedIdents = _p338._1;
		return {
			ctor: '_Tuple2',
			_0: finalProgram,
			_1: {ctor: '::', _0: _p337._0._1, _1: movedIdents}
		};
	}
};
var _user$project$CodeMotion$tryResolvingProblemsAfterTransform_ = function (baseDescription) {
	return function (uniqueNameToOldName) {
		return function (maybeNewScopeEId) {
			return function (_p339) {
				return function (namesUniqueTouched) {
					return function (varEIdsPreviouslyDeliberatelyRemoved) {
						return function (insertedVarEIdToBindingPId) {
							return function (originalProgramUniqueNames) {
								return function (newProgramUniqueNames) {
									return function (tryTwiddling) {
										var _p340 = _p339;
										var maybeNewPatUniqueNames = A2(
											_elm_lang$core$Maybe$map,
											function (newScopeEId) {
												return _user$project$LangTools$expToLetPat(
													A2(_user$project$LangTools$justFindExpByEId, newProgramUniqueNames, newScopeEId));
											},
											maybeNewScopeEId);
										var uniqueNameToOriginalUses = _user$project$Utils$pairsToDictOfLists(
											A2(
												_elm_lang$core$List$filterMap,
												function (exp) {
													return A2(
														_elm_lang$core$Maybe$map,
														function (ident) {
															return {ctor: '_Tuple2', _0: ident, _1: exp.val.eid};
														},
														_user$project$LangTools$expToMaybeIdent(exp));
												},
												_user$project$Lang$flattenExpTree(originalProgramUniqueNames)));
										var uniqueNameToNewVarEIds = _user$project$Utils$pairsToDictOfLists(
											A2(
												_elm_lang$core$List$filterMap,
												function (exp) {
													return A2(
														_elm_lang$core$Maybe$map,
														function (ident) {
															return {ctor: '_Tuple2', _0: ident, _1: exp.val.eid};
														},
														_user$project$LangTools$expToMaybeIdent(exp));
												},
												_user$project$Lang$flattenExpTree(newProgramUniqueNames)));
										var resultForOriginalNamesPriority = F7(
											function (uniqueNameToOldNameDescribedPrioritized, movedUniqueIdents, identsInvalidlyFreeRewritten, identsWithInvalidlyFreeVarsHandled, varEIdsDeliberatelyRemoved, insertedVarEIdToBindingPId, programWithUniqueNames) {
												var _p341 = A3(
													_user$project$Utils$foldl,
													{
														ctor: '_Tuple3',
														_0: programWithUniqueNames,
														_1: maybeNewPatUniqueNames,
														_2: {ctor: '[]'}
													},
													F2(
														function (_p343, _p342) {
															var _p344 = _p343;
															var _p354 = _p344._1;
															var _p353 = _p344._2;
															var _p352 = _p344._0;
															var _p345 = _p342;
															var _p351 = _p345._2;
															var _p350 = _p345._0;
															var _p349 = _p345._1;
															var intendedUses = A2(
																_elm_lang$core$Maybe$withDefault,
																{ctor: '[]'},
																A2(
																	_user$project$Utils$firstOrLazySecond,
																	A2(_elm_lang$core$Dict$get, _p354, uniqueNameToOriginalUses),
																	function (_p346) {
																		var _p347 = _p346;
																		return A2(_elm_lang$core$Dict$get, _p354, uniqueNameToNewVarEIds);
																	}));
															var usesInNewProgram = A2(
																_elm_lang$core$List$map,
																function (_p348) {
																	return function (_) {
																		return _.eid;
																	}(
																		function (_) {
																			return _.val;
																		}(_p348));
																},
																A2(_user$project$LangTools$identifierUsesAfterDefiningPat, _p354, _p350));
															var identifiersInNewPat = A2(
																_elm_lang$core$Maybe$withDefault,
																{ctor: '[]'},
																A2(_elm_lang$core$Maybe$map, _user$project$LangTools$identifiersListInPat, _p349));
															if (A2(_elm_lang$core$List$member, _p354, identifiersInNewPat) && (A2(_elm_lang$core$List$member, _p353, identifiersInNewPat) && (!(_elm_lang$core$Native_Utils.eq(_p354, _p353) && _elm_lang$core$Native_Utils.eq(
																1,
																A2(
																	_user$project$Utils$count,
																	F2(
																		function (x, y) {
																			return _elm_lang$core$Native_Utils.eq(x, y);
																		})(_p354),
																	identifiersInNewPat)))))) {
																return {
																	ctor: '_Tuple3',
																	_0: _p350,
																	_1: _p349,
																	_2: A2(
																		_elm_lang$core$Basics_ops['++'],
																		_p351,
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple3', _0: _p352, _1: _p353, _2: _p354},
																			_1: {ctor: '[]'}
																		})
																};
															} else {
																if (!A2(_user$project$Utils$equalAsSets, intendedUses, usesInNewProgram)) {
																	return {
																		ctor: '_Tuple3',
																		_0: A3(_user$project$LangTools$renameIdentifier, _p354, _p353, _p350),
																		_1: A2(
																			_elm_lang$core$Maybe$map,
																			A2(_user$project$LangTools$renameIdentifierInPat, _p354, _p353),
																			_p349),
																		_2: _p351
																	};
																} else {
																	var usesIfRenamed = function () {
																		var identScopeAreas = A2(_user$project$LangTools$findScopeAreasByIdent, _p354, _p350);
																		return A2(
																			_elm_lang$core$List$concatMap,
																			_user$project$LangTools$identifierUsageEIds(_p353),
																			A2(
																				_elm_lang$core$List$map,
																				A2(_user$project$LangTools$renameIdentifier, _p354, _p353),
																				identScopeAreas));
																	}();
																	return A2(_user$project$Utils$equalAsSets, intendedUses, usesIfRenamed) ? {
																		ctor: '_Tuple3',
																		_0: A3(_user$project$LangTools$renameIdentifier, _p354, _p353, _p350),
																		_1: A2(
																			_elm_lang$core$Maybe$map,
																			A2(_user$project$LangTools$renameIdentifierInPat, _p354, _p353),
																			_p349),
																		_2: _p351
																	} : {
																		ctor: '_Tuple3',
																		_0: _p350,
																		_1: _p349,
																		_2: A2(
																			_elm_lang$core$Basics_ops['++'],
																			_p351,
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple3', _0: _p352, _1: _p353, _2: _p354},
																				_1: {ctor: '[]'}
																			})
																	};
																}
															}
														}),
													uniqueNameToOldNameDescribedPrioritized);
												var newProgramPartiallyOriginalNames = _p341._0;
												var renamingsPreserved = _p341._2;
												return _user$project$CodeMotion$makeResult(baseDescription)(uniqueNameToOldName)(renamingsPreserved)(movedUniqueIdents)(identsInvalidlyFreeRewritten)(identsWithInvalidlyFreeVarsHandled)(
													A2(_elm_lang$core$Basics_ops['++'], varEIdsPreviouslyDeliberatelyRemoved, varEIdsDeliberatelyRemoved))(insertedVarEIdToBindingPId)(originalProgramUniqueNames)(newProgramPartiallyOriginalNames);
											});
										var _p355 = A2(
											_elm_lang$core$List$partition,
											function (_p356) {
												var _p357 = _p356;
												return A2(_elm_lang$core$Set$member, _p357._0, namesUniqueTouched);
											},
											_elm_lang$core$Dict$toList(uniqueNameToOldName));
										var uniqueNameToOldNameTouched = _p355._0;
										var uniqueNameToOldNameUntouched = _p355._1;
										var uniqueNameToOldNameTouchedDescribed = A2(
											_elm_lang$core$List$map,
											function (_p358) {
												var _p359 = _p358;
												return {ctor: '_Tuple3', _0: _p340._0, _1: _p359._0, _2: _p359._1};
											},
											uniqueNameToOldNameTouched);
										var uniqueNameToOldNameUntouchedDescribed = A2(
											_elm_lang$core$List$map,
											function (_p360) {
												var _p361 = _p360;
												return {ctor: '_Tuple3', _0: _p340._1, _1: _p361._0, _2: _p361._1};
											},
											uniqueNameToOldNameUntouched);
										var twiddledResults = tryTwiddling ? {ctor: '[]'} : {ctor: '[]'};
										var _p362 = _user$project$CodeMotion$liftDependenciesBasedOnUniqueNames(newProgramUniqueNames);
										var newProgramUniqueNamesDependenciesLifted = _p362._0;
										var liftedUniqueIdents = _p362._1;
										return A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: A7(
													resultForOriginalNamesPriority,
													A2(_elm_lang$core$Basics_ops['++'], uniqueNameToOldNameUntouchedDescribed, uniqueNameToOldNameTouchedDescribed),
													liftedUniqueIdents,
													{ctor: '[]'},
													{ctor: '[]'},
													{ctor: '[]'},
													insertedVarEIdToBindingPId,
													newProgramUniqueNamesDependenciesLifted),
												_1: {
													ctor: '::',
													_0: A7(
														resultForOriginalNamesPriority,
														A2(_elm_lang$core$Basics_ops['++'], uniqueNameToOldNameTouchedDescribed, uniqueNameToOldNameUntouchedDescribed),
														liftedUniqueIdents,
														{ctor: '[]'},
														{ctor: '[]'},
														{ctor: '[]'},
														insertedVarEIdToBindingPId,
														newProgramUniqueNamesDependenciesLifted),
													_1: {ctor: '[]'}
												}
											},
											twiddledResults);
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$CodeMotion$tryResolvingProblemsAfterTransform = F9(
	function (baseDescription, uniqueNameToOldName, maybeNewScopeEId, _p363, namesUniqueTouched, varEIdsPreviouslyDeliberatelyRemoved, insertedVarEIdToBindingPId, originalProgramUniqueNames, newProgramUniqueNames) {
		var _p364 = _p363;
		return _user$project$CodeMotion$tryResolvingProblemsAfterTransform_(baseDescription)(uniqueNameToOldName)(maybeNewScopeEId)(
			{ctor: '_Tuple2', _0: _p364._0, _1: _p364._1})(namesUniqueTouched)(varEIdsPreviouslyDeliberatelyRemoved)(insertedVarEIdToBindingPId)(originalProgramUniqueNames)(newProgramUniqueNames)(true);
	});
var _user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults = F9(
	function (baseDescription, uniqueNameToOldName, maybeNewScopeEId, _p365, namesUniqueTouched, varEIdsPreviouslyDeliberatelyRemoved, insertedVarEIdToBindingPId, originalProgramUniqueNames, newProgramUniqueNames) {
		var _p366 = _p365;
		var newProgramOriginalNamesResult = function () {
			var newProgramOriginalNames = A2(_user$project$LangTools$renameIdentifiers, uniqueNameToOldName, newProgramUniqueNames);
			return {
				ctor: '::',
				_0: _user$project$CodeMotion$makeResult(baseDescription)(uniqueNameToOldName)(
					{ctor: '[]'})(
					{ctor: '[]'})(
					{ctor: '[]'})(
					{ctor: '[]'})(varEIdsPreviouslyDeliberatelyRemoved)(insertedVarEIdToBindingPId)(originalProgramUniqueNames)(newProgramOriginalNames),
				_1: {ctor: '[]'}
			};
		}();
		var newProgramMaybeRenamedLiftedTwiddledResults = _user$project$InterfaceModel$isResultSafe(
			A2(_user$project$Utils$head, 'CodeMotion.programOriginalNamesAndMaybeRenamedLiftedTwiddledResults', newProgramOriginalNamesResult)) ? {ctor: '[]'} : A9(
			_user$project$CodeMotion$tryResolvingProblemsAfterTransform,
			baseDescription,
			uniqueNameToOldName,
			maybeNewScopeEId,
			{ctor: '_Tuple2', _0: _p366._0, _1: _p366._1},
			namesUniqueTouched,
			varEIdsPreviouslyDeliberatelyRemoved,
			insertedVarEIdToBindingPId,
			originalProgramUniqueNames,
			newProgramUniqueNames);
		var originalProgram = A2(_user$project$LangTools$renameIdentifiers, uniqueNameToOldName, originalProgramUniqueNames);
		return A2(
			_user$project$CodeMotion$removeNoopResults,
			originalProgram,
			A2(
				_user$project$Utils$dedupBy,
				function (_p367) {
					var _p368 = _p367;
					return A3(_user$project$LangUnparser$unparseWithUniformWhitespace, false, false, _p368._0.exp);
				},
				A2(_elm_lang$core$Basics_ops['++'], newProgramOriginalNamesResult, newProgramMaybeRenamedLiftedTwiddledResults)));
	});
var _user$project$CodeMotion$moveEquationsBeforeEId = F4(
	function (syntax, letEIds, targetEId, originalProgram) {
		var letEIdsSorted = A2(
			_elm_lang$core$List$sortBy,
			_user$project$LangTools$locationInProgram(originalProgram),
			letEIds);
		var maxId = _user$project$FastParser$maxId(originalProgram);
		var letEIdToReinsertedLetEId = _elm_lang$core$Dict$fromList(
			A2(
				_user$project$Utils$mapi1,
				function (_p369) {
					var _p370 = _p369;
					return {ctor: '_Tuple2', _0: _p370._1, _1: maxId + _p370._0};
				},
				letEIds));
		var _p371 = _user$project$LangTools$assignUniqueNames(originalProgram);
		var originalProgramUniqueNames = _p371._0;
		var uniqueNameToOldName = _p371._1;
		var programWithDuplicatedLets = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (letEIdToDup, program) {
					var letExp = A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, letEIdToDup);
					return A3(
						_user$project$Lang$mapExpNode,
						targetEId,
						function (expToWrap) {
							var insertedLetEId = A3(_user$project$Utils$justGet_, 'moveEquationsBeforeEId', letEIdToDup, letEIdToReinsertedLetEId);
							var _p372 = _user$project$LangTools$expToLetParts(letExp);
							var ws1 = _p372._0;
							var isRec = _p372._2;
							var pat = _p372._3;
							var boundExp = _p372._5;
							return A6(_user$project$LangTools$newLetFancyWhitespace, insertedLetEId, isRec, pat, boundExp, expToWrap, program);
						},
						program);
				}),
			originalProgramUniqueNames,
			letEIdsSorted);
		var programWithDuplicatedLetsRemoved = A2(
			_user$project$Lang$mapExp,
			function (exp) {
				return A2(_elm_lang$core$List$member, exp.val.eid, letEIds) ? A2(
					_user$project$Lang$copyPrecedingWhitespace,
					exp,
					_user$project$LangTools$expToLetBody(exp)) : exp;
			},
			programWithDuplicatedLets);
		var programWithNewLetsOriginalEIds = function () {
			var reinsertedLetEIdToOldLetEId = _user$project$Utils$flipDict(letEIdToReinsertedLetEId);
			return A2(
				_user$project$Lang$mapExp,
				function (exp) {
					var _p373 = A2(_elm_lang$core$Dict$get, exp.val.eid, reinsertedLetEIdToOldLetEId);
					if (_p373.ctor === 'Just') {
						return A2(_user$project$Lang$setEId, _p373._0, exp);
					} else {
						return exp;
					}
				},
				programWithDuplicatedLetsRemoved);
		}();
		var _p374 = _elm_lang$core$List$unzip(
			A2(
				_elm_lang$core$List$map,
				function (_p375) {
					return _user$project$LangTools$expToLetPatAndBoundExp(
						A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, _p375));
				},
				letEIdsSorted));
		var movedPats = _p374._0;
		var movedBoundExps = _p374._1;
		var namesUniqueExplicitlyMoved = _user$project$Utils$unionAll(
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _user$project$LangTools$identifiersSetInPats(movedPats),
					_1: {ctor: '[]'}
				},
				A2(_elm_lang$core$List$map, _user$project$LangTools$freeIdentifiers, movedBoundExps)));
		var movedThingsStr = _user$project$Utils$toSentence(
			A2(
				_elm_lang$core$List$map,
				function (_p376) {
					return _user$project$Utils$squish(
						A2(
							_user$project$Syntax$patternUnparser,
							syntax,
							A2(_user$project$LangTools$renameIdentifiersInPat, uniqueNameToOldName, _p376)));
				},
				movedPats));
		return A9(
			_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
			A2(_elm_lang$core$Basics_ops['++'], 'Move ', movedThingsStr),
			uniqueNameToOldName,
			_elm_lang$core$Maybe$Nothing,
			{ctor: '_Tuple2', _0: 'moved', _1: 'unmoved'},
			namesUniqueExplicitlyMoved,
			{ctor: '[]'},
			_elm_lang$core$Dict$empty,
			originalProgramUniqueNames,
			programWithNewLetsOriginalEIds);
	});
var _user$project$CodeMotion$introduceVarTransformation_ = F4(
	function (m, eidsToExtract, addNewVarsAtThisId, makeNewLet) {
		var toolName = A2(
			_elm_lang$core$Basics_ops['++'],
			'Introduce Variable',
			_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(eidsToExtract),
				1) ? '' : 's');
		var existingNamesToAvoid = function () {
			var targetBodyEId = function () {
				var exp = A2(_user$project$LangTools$justFindExpByEId, m.inputExp, addNewVarsAtThisId);
				var _p377 = exp.val.e__;
				if (_p377.ctor === 'ELet') {
					return _p377._7.val.eid;
				} else {
					return exp.val.eid;
				}
			}();
			return A2(
				_user$project$LangTools$visibleIdentifiersAtEIds,
				m.inputExp,
				_elm_lang$core$Set$fromList(
					{ctor: '::', _0: targetBodyEId, _1: eidsToExtract}));
		}();
		var _p378 = _user$project$LangTools$assignUniqueNames(m.inputExp);
		var programUniqueNames = _p378._0;
		var uniqueNameToOldName = _p378._1;
		var uniqueNameUsed = _user$project$LangTools$identifiersSetPlusPrelude(programUniqueNames);
		var _p379 = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (eidToExtract, _p380) {
					var _p381 = _p380;
					var _p384 = _p381._1;
					var _p383 = _p381._4;
					var name = A2(_user$project$LangTools$expNameForEId, m.inputExp, eidToExtract);
					var namesToAvoid = A2(
						_elm_lang$core$Set$union,
						existingNamesToAvoid,
						_elm_lang$core$Set$fromList(
							_elm_lang$core$Dict$values(_p384)));
					var uniqueNamesToAvoid = _user$project$Utils$unionAll(
						{
							ctor: '::',
							_0: namesToAvoid,
							_1: {
								ctor: '::',
								_0: uniqueNameUsed,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Set$fromList(
										_elm_lang$core$Dict$keys(_p384)),
									_1: {ctor: '[]'}
								}
							}
						});
					var newVarName = A3(_user$project$LangTools$nonCollidingName, name, 1, namesToAvoid);
					var newVarUniqueName = A3(_user$project$LangTools$nonCollidingName, name, 1, uniqueNamesToAvoid);
					var expToExtract = A2(_user$project$LangTools$justFindExpByEId, programUniqueNames, eidToExtract);
					var _p382 = {ctor: '_Tuple2', _0: _p383, _1: _p383 + 1};
					var newPId = _p382._0;
					var newEId = _p382._1;
					var newPat = A2(
						_user$project$Lang$setPId,
						newPId,
						_user$project$Lang$pVar(newVarUniqueName));
					var expWithNewVarUsed = A3(
						_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
						eidToExtract,
						A2(
							_user$project$Lang$setEId,
							newEId,
							_user$project$Lang$eVar(newVarUniqueName)),
						_p381._3);
					return {
						ctor: '_Tuple5',
						_0: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: newPat, _1: expToExtract},
							_1: _p381._0
						},
						_1: A3(_elm_lang$core$Dict$insert, newVarUniqueName, newVarName, _p384),
						_2: A3(
							_elm_lang$core$Dict$insert,
							newEId,
							_elm_lang$core$Maybe$Just(newPId),
							_p381._2),
						_3: expWithNewVarUsed,
						_4: _p383 + 2
					};
				}),
			{
				ctor: '_Tuple5',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Dict$empty,
				_3: programUniqueNames,
				_4: _user$project$FastParser$maxId(m.inputExp) + 1
			},
			eidsToExtract);
		var newPatBoundExps = _p379._0;
		var uniqueNameToOldNameAdditions = _p379._1;
		var insertedVarEIdToBindingPId = _p379._2;
		var programWithNewVarsUsed = _p379._3;
		var newId = _p379._4;
		var _p385 = function () {
			var _p386 = _elm_lang$core$List$unzip(newPatBoundExps);
			if ((((_p386._0.ctor === '::') && (_p386._0._1.ctor === '[]')) && (_p386._1.ctor === '::')) && (_p386._1._1.ctor === '[]')) {
				return {
					ctor: '_Tuple2',
					_0: _p386._0._0,
					_1: A2(_user$project$Lang$replacePrecedingWhitespace, ' ', _p386._1._0)
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _user$project$Lang$pList(
						A3(_user$project$Lang$setPatListWhitespace, '', ' ', _p386._0)),
					_1: _user$project$Lang$eTuple(
						A3(_user$project$Lang$setExpListWhitespace, '', ' ', _p386._1))
				};
			}
		}();
		var newPat = _p385._0;
		var newBoundExp = _p385._1;
		var _p387 = A3(
			_user$project$Lang$mapFoldExp,
			F2(
				function (e, maybeInsertedLetEId) {
					return _elm_lang$core$Native_Utils.eq(e.val.eid, addNewVarsAtThisId) ? A5(makeNewLet, newId, newPat, newBoundExp, e, programWithNewVarsUsed) : {ctor: '_Tuple2', _0: e, _1: maybeInsertedLetEId};
				}),
			_elm_lang$core$Maybe$Nothing,
			programWithNewVarsUsed);
		var newProgramUniqueNames = _p387._0;
		var maybeInsertedLetEId = _p387._1;
		var letEIdWithNewVars = A2(_elm_lang$core$Maybe$withDefault, addNewVarsAtThisId, maybeInsertedLetEId);
		var newNames = _user$project$LangTools$identifiersListInPat(newPat);
		var namesUniqueTouched = _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$Basics_ops['++'],
				newNames,
				_user$project$LangTools$identifiersList(newBoundExp)));
		return A9(
			_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
			toolName,
			A2(_elm_lang$core$Dict$union, uniqueNameToOldNameAdditions, uniqueNameToOldName),
			_elm_lang$core$Maybe$Just(letEIdWithNewVars),
			{ctor: '_Tuple2', _0: 'touched', _1: 'untouched'},
			namesUniqueTouched,
			{ctor: '[]'},
			insertedVarEIdToBindingPId,
			programUniqueNames,
			newProgramUniqueNames);
	});
var _user$project$CodeMotion$introduceVarTransformation = F3(
	function (m, expIds, maybeTargetPos) {
		var insertNewLet = F5(
			function (insertedLetEId, pat, boundExp, expToWrap, program) {
				return {
					ctor: '_Tuple2',
					_0: A6(_user$project$LangTools$newLetFancyWhitespace, insertedLetEId, false, pat, boundExp, expToWrap, program),
					_1: _elm_lang$core$Maybe$Just(insertedLetEId)
				};
			});
		var addToExistingLet = F6(
			function (targetPath, _p389, pat, boundExp, letExpToInsertInto, _p388) {
				return {
					ctor: '_Tuple2',
					_0: A3(
						_user$project$CodeMotion$insertPat_,
						{ctor: '_Tuple2', _0: pat, _1: boundExp},
						targetPath,
						letExpToInsertInto),
					_1: _elm_lang$core$Maybe$Nothing
				};
			});
		var _p390 = maybeTargetPos;
		if (_p390.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				function (_p391) {
					var _p392 = _p391;
					var expToWrap = A3(
						_user$project$LangTools$deepestCommonAncestorOrSelfWithNewline,
						m.inputExp,
						_elm_lang$core$Basics$always(true),
						function (e) {
							return A2(_elm_lang$core$List$member, e.val.eid, expIds);
						});
					return A4(_user$project$CodeMotion$introduceVarTransformation_, m, expIds, expToWrap.val.eid, insertNewLet);
				});
		} else {
			if (_p390._0.ctor === 'ExpTargetPosition') {
				if (_p390._0._0._0.ctor === 'After') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(
						function (_p393) {
							var _p394 = _p393;
							return A4(_user$project$CodeMotion$introduceVarTransformation_, m, expIds, _p390._0._0._1, insertNewLet);
						});
				}
			} else {
				var _p395 = _user$project$Lang$patTargetPositionToTargetPathedPatId(_p390._0._0);
				if (((_p395.ctor === '_Tuple2') && (_p395._0.ctor === '_Tuple2')) && (_p395._0._1 === 1)) {
					var _p399 = _p395._0._0;
					var _p396 = A2(_user$project$Lang$findExpByEId, m.inputExp, _p399);
					if (_p396.ctor === 'Just') {
						return _user$project$Lang$isLet(_p396._0) ? _elm_lang$core$Maybe$Just(
							function (_p397) {
								var _p398 = _p397;
								return A4(
									_user$project$CodeMotion$introduceVarTransformation_,
									m,
									expIds,
									_p399,
									addToExistingLet(_p395._1));
							}) : _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		}
	});
var _user$project$CodeMotion$makeEqualTransformation_ = F4(
	function (originalProgram, eids, newBindingLocationEId, makeNewLet) {
		var firstEId = A2(_user$project$Utils$head, 'CodeMotion.makeEqualTransform expected some eids, got []', eids);
		var potentialNames = function () {
			var namesToAvoid = A2(
				_user$project$LangTools$visibleIdentifiersAtEIds,
				originalProgram,
				_elm_lang$core$Set$fromList(
					{ctor: '::', _0: newBindingLocationEId, _1: eids}));
			var names = _user$project$Utils$dedup(
				A2(
					_elm_lang$core$List$map,
					_user$project$LangTools$expNameForEId(originalProgram),
					eids));
			var joinedName = A2(_elm_lang$core$String$join, '_', names);
			var commonName = A3(_user$project$LangTools$commonNameForEIdsWithDefault, joinedName, originalProgram, eids);
			return A2(
				_elm_lang$core$List$sortBy,
				function (s) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$String$length(s),
						_1: s
					};
				},
				_user$project$Utils$dedup(
					A2(
						_elm_lang$core$List$map,
						function (name) {
							return A3(_user$project$LangTools$nonCollidingName, name, 1, namesToAvoid);
						},
						{
							ctor: '::',
							_0: commonName,
							_1: {ctor: '::', _0: joinedName, _1: names}
						})));
		}();
		var _p400 = _user$project$LangTools$assignUniqueNames(originalProgram);
		var originalProgramUniqueNames = _p400._0;
		var uniqueNameToOldName = _p400._1;
		var maxId = _user$project$FastParser$maxId(originalProgram);
		var _p401 = {ctor: '_Tuple4', _0: maxId + 1, _1: maxId + 2, _2: maxId + 3, _3: maxId + 4};
		var insertedLetEId = _p401._0;
		var insertedVarsEId = _p401._1;
		var newBindingPId = _p401._2;
		var dummyBoundExpEId = _p401._3;
		var varTempName = '* New Variable *';
		var newBoundExp = A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, firstEId);
		var _p402 = A5(
			makeNewLet,
			insertedLetEId,
			A2(
				_user$project$Lang$setPId,
				newBindingPId,
				_user$project$Lang$pVar(varTempName)),
			A2(_user$project$Lang$setEId, dummyBoundExpEId, newBoundExp),
			A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, newBindingLocationEId),
			originalProgramUniqueNames);
		var newLet = _p402._0;
		var maybeNewScopeEId = _p402._1;
		var newProgramUniqueNames = function () {
			var expSubst = _elm_lang$core$Dict$fromList(
				A2(
					_elm_lang$core$List$map,
					function (eid) {
						return {
							ctor: '_Tuple2',
							_0: eid,
							_1: A2(
								_user$project$Lang$setEId,
								insertedVarsEId,
								_user$project$Lang$eVar(varTempName))
						};
					},
					eids));
			return A3(
				_user$project$Lang$mapExpNode,
				dummyBoundExpEId,
				_user$project$Lang$setEId(newBoundExp.val.eid),
				A2(
					_user$project$Lang$replaceExpNodesPreservingPrecedingWhitespace,
					expSubst,
					A3(_user$project$Lang$replaceExpNode, newBindingLocationEId, newLet, originalProgramUniqueNames)));
		}();
		var varEIdsPreviouslyDeliberatelyRemoved = A2(
			_elm_lang$core$List$map,
			function (_p403) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p403));
			},
			A2(
				_elm_lang$core$List$concatMap,
				function (eid) {
					return _user$project$LangTools$allVars(
						A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, eid));
				},
				A2(_elm_lang$core$List$drop, 1, eids)));
		var namesUniqueTouched = A2(
			_elm_lang$core$Set$insert,
			varTempName,
			_user$project$LangTools$identifiersSet(newBoundExp));
		return A2(
			_elm_lang$core$List$concatMap,
			function (varName) {
				return A9(
					_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
					A2(_elm_lang$core$Basics_ops['++'], 'New variable: ', varName),
					A3(_elm_lang$core$Dict$insert, varTempName, varName, uniqueNameToOldName),
					maybeNewScopeEId,
					{ctor: '_Tuple2', _0: 'touched', _1: 'untouched'},
					namesUniqueTouched,
					varEIdsPreviouslyDeliberatelyRemoved,
					A2(
						_elm_lang$core$Dict$singleton,
						insertedVarsEId,
						_elm_lang$core$Maybe$Just(newBindingPId)),
					originalProgramUniqueNames,
					newProgramUniqueNames);
			},
			potentialNames);
	});
var _user$project$CodeMotion$makeEqualTransformation = F3(
	function (originalProgram, eids, maybeTargetPosition) {
		var insertNewLet = F5(
			function (insertedLetEId, pat, boundExp, expToWrap, program) {
				return {
					ctor: '_Tuple2',
					_0: A6(_user$project$LangTools$newLetFancyWhitespace, insertedLetEId, false, pat, boundExp, expToWrap, program),
					_1: _elm_lang$core$Maybe$Just(insertedLetEId)
				};
			});
		var addToExistingLet = F6(
			function (targetPath, _p405, pat, boundExp, letExpToInsertInto, _p404) {
				return {
					ctor: '_Tuple2',
					_0: A3(
						_user$project$CodeMotion$insertPat_,
						{ctor: '_Tuple2', _0: pat, _1: boundExp},
						targetPath,
						letExpToInsertInto),
					_1: _elm_lang$core$Maybe$Nothing
				};
			});
		var _p406 = maybeTargetPosition;
		if (_p406.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				function (_p407) {
					var _p408 = _p407;
					var expToWrap = A3(
						_user$project$LangTools$deepestCommonAncestorOrSelfWithNewline,
						originalProgram,
						_elm_lang$core$Basics$always(true),
						function (e) {
							return A2(_elm_lang$core$List$member, e.val.eid, eids);
						});
					return A4(_user$project$CodeMotion$makeEqualTransformation_, originalProgram, eids, expToWrap.val.eid, insertNewLet);
				});
		} else {
			if (_p406._0.ctor === 'ExpTargetPosition') {
				if (_p406._0._0._0.ctor === 'After') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(
						function (_p409) {
							var _p410 = _p409;
							return A4(_user$project$CodeMotion$makeEqualTransformation_, originalProgram, eids, _p406._0._0._1, insertNewLet);
						});
				}
			} else {
				var _p411 = _user$project$Lang$patTargetPositionToTargetPathedPatId(_p406._0._0);
				if (((_p411.ctor === '_Tuple2') && (_p411._0.ctor === '_Tuple2')) && (_p411._0._1 === 1)) {
					var _p415 = _p411._0._0;
					var _p412 = A2(_user$project$Lang$findExpByEId, originalProgram, _p415);
					if (_p412.ctor === 'Just') {
						return _user$project$Lang$isLet(_p412._0) ? _elm_lang$core$Maybe$Just(
							function (_p413) {
								var _p414 = _p413;
								return A4(
									_user$project$CodeMotion$makeEqualTransformation_,
									originalProgram,
									eids,
									_p415,
									addToExistingLet(_p411._1));
							}) : _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		}
	});
var _user$project$CodeMotion$gatherUniqueDependencies = F4(
	function (description, targetEIdToGatherAround, program, slurpedBindingsFilter) {
		var _p416 = _user$project$LangTools$assignUniqueNames(program);
		var originalProgramUniqueNames = _p416._0;
		var uniqueNameToOldName = _p416._1;
		var _p417 = A2(_user$project$Lang$findExpByEId, originalProgramUniqueNames, targetEIdToGatherAround);
		if (_p417.ctor === 'Just') {
			var _p418 = A3(_user$project$CodeMotion$gatherUniqueDependencies_, _p417._0, originalProgramUniqueNames, slurpedBindingsFilter);
			var gatheredGroup = _p418._0;
			var programUniqueNamesBindingsRemoved = _p418._1;
			var gatheredGroupIndented = function () {
				var desiredIndentation = A2(
					_user$project$Utils$maybeWithLazyDefault,
					function (_p419) {
						var _p420 = _p419;
						return A2(_user$project$Lang$indentationAt, targetEIdToGatherAround, program);
					},
					A2(
						_elm_lang$core$Maybe$map,
						function (_p421) {
							var _p422 = _p421;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$Lang$indentationAt, _p422._0.val.eid, program),
								'  ');
						},
						A2(_user$project$LangTools$findLetAndPatMatchingExpLoose, targetEIdToGatherAround, program)));
				return A2(
					_user$project$Lang$indent,
					desiredIndentation,
					A2(
						_user$project$Lang$replacePrecedingWhitespace,
						'\n',
						_user$project$Lang$unindent(gatheredGroup)));
			}();
			var programWithGroupInserted = _user$project$LangSimplify$simplifyAssignments(
				A3(_user$project$Lang$replaceExpNode, targetEIdToGatherAround, gatheredGroupIndented, programUniqueNamesBindingsRemoved));
			return A9(
				_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
				description,
				uniqueNameToOldName,
				_elm_lang$core$Maybe$Nothing,
				{ctor: '_Tuple2', _0: 'moved', _1: 'unmoved'},
				_user$project$LangTools$identifiersSetPatsOnly(gatheredGroupIndented),
				{ctor: '[]'},
				_elm_lang$core$Dict$empty,
				originalProgramUniqueNames,
				programWithGroupInserted);
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$copyExpressionTransformation = F3(
	function (syntax, originalProgram, eids) {
		var exps = A2(
			_elm_lang$core$List$map,
			_user$project$LangTools$justFindExpByEId(originalProgram),
			eids);
		var uniqueExps = A2(
			_user$project$Utils$dedupBy,
			A2(_user$project$LangUnparser$unparseWithUniformWhitespace, true, true),
			exps);
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(uniqueExps),
			2) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			function (_p423) {
				var _p424 = _p423;
				var _p425 = _user$project$LangTools$assignUniqueNames(originalProgram);
				var originalProgramUniqueNames = _p425._0;
				var uniqueNameToOldName = _p425._1;
				return A2(
					_elm_lang$core$List$concatMap,
					function (eidToCopy) {
						var expToCopy = A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, eidToCopy);
						var expToCopyOriginalNames = A2(_user$project$LangTools$justFindExpByEId, originalProgram, eidToCopy);
						var eidsToChange = A2(
							_elm_lang$core$List$filter,
							F2(
								function (x, y) {
									return !_elm_lang$core$Native_Utils.eq(x, y);
								})(eidToCopy),
							eids);
						var newProgramUniqueNames = A3(
							_elm_lang$core$List$foldl,
							function (eid) {
								return A2(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, eid, expToCopy);
							},
							originalProgramUniqueNames,
							eidsToChange);
						var namesUniqueTouched = _user$project$LangTools$identifiersSet(expToCopy);
						var varEIdsPreviouslyDeliberatelyRemoved = A2(
							_elm_lang$core$List$map,
							function (_p426) {
								return function (_) {
									return _.eid;
								}(
									function (_) {
										return _.val;
									}(_p426));
							},
							A2(
								_elm_lang$core$List$concatMap,
								function (_p427) {
									return _user$project$LangTools$allVars(
										A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, _p427));
								},
								eidsToChange));
						return A9(
							_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Copy expression: ',
								_user$project$Utils$squish(
									A2(_user$project$Syntax$unparser, syntax, expToCopyOriginalNames))),
							uniqueNameToOldName,
							_elm_lang$core$Maybe$Nothing,
							{ctor: '_Tuple2', _0: 'copied', _1: 'untouched'},
							namesUniqueTouched,
							varEIdsPreviouslyDeliberatelyRemoved,
							_elm_lang$core$Dict$empty,
							originalProgramUniqueNames,
							newProgramUniqueNames);
					},
					A2(
						_elm_lang$core$List$map,
						function (_p428) {
							return function (_) {
								return _.eid;
							}(
								function (_) {
									return _.val;
								}(_p428));
						},
						uniqueExps));
			});
	});
var _user$project$CodeMotion$swapExpressionsTransformation = F4(
	function (syntax, originalProgram, eid1, eid2) {
		var exp1 = A2(_user$project$LangTools$justFindExpByEId, originalProgram, eid1);
		var exp2 = A2(_user$project$LangTools$justFindExpByEId, originalProgram, eid2);
		return A2(_user$project$LangUnparser$expsEquivalent, exp1, exp2) ? _elm_lang$core$Maybe$Nothing : ((A2(
			_elm_lang$core$List$member,
			exp1,
			_user$project$Lang$flattenExpTree(exp2)) || A2(
			_elm_lang$core$List$member,
			exp2,
			_user$project$Lang$flattenExpTree(exp1))) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			function (_p429) {
				var _p430 = _p429;
				var _p431 = _user$project$LangTools$assignUniqueNames(originalProgram);
				var originalProgramUniqueNames = _p431._0;
				var uniqueNameToOldName = _p431._1;
				var tempEId = _user$project$FastParser$maxId(originalProgramUniqueNames) + 1;
				var exp1UniqueNames = A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, eid1);
				var exp2UniqueNames = A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, eid2);
				var newProgramUniqueNames = A3(
					_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
					tempEId,
					exp2UniqueNames,
					A3(
						_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
						eid2,
						exp1UniqueNames,
						A3(
							_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
							eid1,
							A2(_user$project$Lang$setEId, tempEId, exp1UniqueNames),
							originalProgramUniqueNames)));
				var namesUniqueTouched = A2(
					_elm_lang$core$Set$union,
					_user$project$LangTools$identifiersSet(exp1UniqueNames),
					_user$project$LangTools$identifiersSet(exp2UniqueNames));
				return A9(
					_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Swap ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Utils$squish(
								A2(_user$project$Syntax$unparser, syntax, exp1)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' and ',
								_user$project$Utils$squish(
									A2(_user$project$Syntax$unparser, syntax, exp2))))),
					uniqueNameToOldName,
					_elm_lang$core$Maybe$Nothing,
					{ctor: '_Tuple2', _0: 'swapped', _1: 'untouched'},
					namesUniqueTouched,
					{ctor: '[]'},
					_elm_lang$core$Dict$empty,
					originalProgramUniqueNames,
					newProgramUniqueNames);
			}));
	});
var _user$project$CodeMotion$swapDefinitionsTransformation = F4(
	function (syntax, originalProgram, pid1, pid2) {
		var _p432 = {
			ctor: '_Tuple2',
			_0: A2(_user$project$LangTools$findPatAndBoundExpByPId, pid1, originalProgram),
			_1: A2(_user$project$LangTools$findPatAndBoundExpByPId, pid2, originalProgram)
		};
		if (((((_p432.ctor === '_Tuple2') && (_p432._0.ctor === 'Just')) && (_p432._0._0.ctor === '_Tuple2')) && (_p432._1.ctor === 'Just')) && (_p432._1._0.ctor === '_Tuple2')) {
			var _p442 = _p432._1._0._0;
			var _p441 = _p432._0._0._0;
			var _p440 = _p432._1._0._1;
			var _p439 = _p432._0._0._1;
			return (A2(_user$project$LangUnparser$patsEquivalent, _p441, _p442) && A2(_user$project$LangUnparser$expsEquivalent, _p439, _p440)) ? _elm_lang$core$Maybe$Nothing : ((A2(
				_elm_lang$core$List$member,
				_p439,
				_user$project$Lang$flattenExpTree(_p440)) || A2(
				_elm_lang$core$List$member,
				_p440,
				_user$project$Lang$flattenExpTree(_p439))) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
				function (_p433) {
					var _p434 = _p433;
					var _p435 = _user$project$LangTools$assignUniqueNames(originalProgram);
					var originalProgramUniqueNames = _p435._0;
					var uniqueNameToOldName = _p435._1;
					var maxId = _user$project$FastParser$maxId(originalProgramUniqueNames);
					var _p436 = {ctor: '_Tuple2', _0: maxId + 1, _1: maxId + 2};
					var tempPId = _p436._0;
					var tempEId = _p436._1;
					var _p437 = A2(
						_user$project$Utils$fromJust_,
						'CodeMotion.swapDefinitionsTransformation',
						A2(_user$project$LangTools$findPatAndBoundExpByPId, pid1, originalProgramUniqueNames));
					var pat1UniqueNames = _p437._0;
					var boundExp1UniqueNames = _p437._1;
					var _p438 = A2(
						_user$project$Utils$fromJust_,
						'CodeMotion.swapDefinitionsTransformation',
						A2(_user$project$LangTools$findPatAndBoundExpByPId, pid2, originalProgramUniqueNames));
					var pat2UniqueNames = _p438._0;
					var boundExp2UniqueNames = _p438._1;
					var newProgramUniqueNames = A3(
						_user$project$Lang$replacePatNodePreservingPrecedingWhitespace,
						tempPId,
						pat2UniqueNames,
						A3(
							_user$project$Lang$replacePatNodePreservingPrecedingWhitespace,
							pat2UniqueNames.val.pid,
							pat1UniqueNames,
							A3(
								_user$project$Lang$replacePatNodePreservingPrecedingWhitespace,
								pat1UniqueNames.val.pid,
								A2(_user$project$Lang$setPId, tempPId, pat1UniqueNames),
								A3(
									_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
									tempEId,
									boundExp2UniqueNames,
									A3(
										_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
										boundExp2UniqueNames.val.eid,
										boundExp1UniqueNames,
										A3(
											_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
											boundExp1UniqueNames.val.eid,
											A2(_user$project$Lang$setEId, tempEId, boundExp1UniqueNames),
											originalProgramUniqueNames))))));
					var namesUniqueTouched = _user$project$Utils$unionAll(
						{
							ctor: '::',
							_0: _user$project$LangTools$identifiersSetInPat(pat1UniqueNames),
							_1: {
								ctor: '::',
								_0: _user$project$LangTools$identifiersSetInPat(pat2UniqueNames),
								_1: {
									ctor: '::',
									_0: _user$project$LangTools$identifiersSet(boundExp1UniqueNames),
									_1: {
										ctor: '::',
										_0: _user$project$LangTools$identifiersSet(boundExp2UniqueNames),
										_1: {ctor: '[]'}
									}
								}
							}
						});
					return A9(
						_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Swap Definitions ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Utils$squish(
									A2(_user$project$Syntax$patternUnparser, syntax, _p441)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' and ',
									_user$project$Utils$squish(
										A2(_user$project$Syntax$patternUnparser, syntax, _p442))))),
						uniqueNameToOldName,
						_elm_lang$core$Maybe$Nothing,
						{ctor: '_Tuple2', _0: 'swapped', _1: 'untouched'},
						namesUniqueTouched,
						{ctor: '[]'},
						_elm_lang$core$Dict$empty,
						originalProgramUniqueNames,
						newProgramUniqueNames);
				}));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$CodeMotion$tryResolvingProblemsAfterTransformNoTwiddling = F9(
	function (baseDescription, uniqueNameToOldName, maybeNewScopeEId, _p443, namesUniqueTouched, varEIdsPreviouslyDeliberatelyRemoved, insertedVarEIdToBindingPId, originalProgramUniqueNames, newProgramUniqueNames) {
		var _p444 = _p443;
		return _user$project$CodeMotion$tryResolvingProblemsAfterTransform_(baseDescription)(uniqueNameToOldName)(maybeNewScopeEId)(
			{ctor: '_Tuple2', _0: _p444._0, _1: _p444._1})(namesUniqueTouched)(varEIdsPreviouslyDeliberatelyRemoved)(insertedVarEIdToBindingPId)(originalProgramUniqueNames)(newProgramUniqueNames)(false);
	});
var _user$project$CodeMotion$makeEIdVisibleToEIdsByInsertingNewBinding = F3(
	function (originalProgram, mobileEId, viewerEIds) {
		var _p445 = _user$project$LangTools$assignUniqueNames(originalProgram);
		var originalProgramUniqueNames = _p445._0;
		var uniqueNameToOldName = _p445._1;
		var allViewerEIds = A2(_elm_lang$core$Set$insert, mobileEId, viewerEIds);
		var expToWrap = A3(
			_user$project$LangTools$deepestCommonAncestorOrSelfWithNewline,
			originalProgramUniqueNames,
			_elm_lang$core$Basics$always(true),
			function (e) {
				return A2(_elm_lang$core$Set$member, e.val.eid, allViewerEIds);
			});
		var maxId = _user$project$FastParser$maxId(originalProgramUniqueNames);
		var _p446 = {ctor: '_Tuple2', _0: maxId + 1, _1: maxId + 2};
		var insertedVarEId = _p446._0;
		var newBindingPId = _p446._1;
		var _p447 = A2(_user$project$Lang$findExpByEId, originalProgramUniqueNames, mobileEId);
		if (_p447.ctor === 'Just') {
			var newProgramUniqueNames = A3(
				_user$project$Lang$mapExpNode,
				expToWrap.val.eid,
				function (e) {
					return A6(
						_user$project$LangTools$newLetFancyWhitespace,
						-1,
						false,
						A2(
							_user$project$Lang$setPId,
							newBindingPId,
							_user$project$Lang$pVar('*EXTRACTED EXPRESSION*')),
						_p447._0,
						e,
						originalProgramUniqueNames);
				},
				A3(
					_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
					mobileEId,
					A2(
						_user$project$Lang$setEId,
						insertedVarEId,
						_user$project$Lang$eVar('*EXTRACTED EXPRESSION*')),
					originalProgramUniqueNames));
			var maybeNewProgramWithLiftedDependenciesOldNames = A2(
				_elm_lang$core$Maybe$map,
				function (_p448) {
					var _p449 = _p448;
					return _p449._0.exp;
				},
				A2(
					_user$project$Utils$findFirst,
					_user$project$InterfaceModel$isResultSafe,
					A9(
						_user$project$CodeMotion$tryResolvingProblemsAfterTransformNoTwiddling,
						'',
						A3(_elm_lang$core$Dict$insert, '*EXTRACTED EXPRESSION*', '*EXTRACTED EXPRESSION*', uniqueNameToOldName),
						_elm_lang$core$Maybe$Nothing,
						{ctor: '_Tuple2', _0: '', _1: ''},
						_elm_lang$core$Set$empty,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Dict$singleton,
							insertedVarEId,
							_elm_lang$core$Maybe$Just(newBindingPId)),
						originalProgramUniqueNames,
						newProgramUniqueNames)));
			var visibleNameSuggestion = A2(_user$project$LangTools$expNameForEId, originalProgram, mobileEId);
			var _p450 = maybeNewProgramWithLiftedDependenciesOldNames;
			if (_p450.ctor === 'Nothing') {
				var _p451 = _user$project$Utils$log(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'makeEIdVisibleToEIdsByInsertingNewBinding failed to lift eid ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(mobileEId),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' because tryResolvingProblemsAfterTransformNoTwiddling didn\'t produce a safe result resolving ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$LangUnparser$unparseWithIds(newProgramUniqueNames),
									'\n\nyou may need to fix a transform so it doesn\'t insert dummy EIDs')))));
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p454 = _p450._0;
				var namesToAvoid = function () {
					var newProgramWithLiftedDependenciesOldNamesFresh = _user$project$FastParser$freshen(_p454);
					var finalViewerEIds = A2(
						_elm_lang$core$Set$union,
						viewerEIds,
						_elm_lang$core$Set$fromList(
							A2(
								_elm_lang$core$List$map,
								function (_p452) {
									return function (_) {
										return _.eid;
									}(
										function (_) {
											return _.val;
										}(_p452));
								},
								A2(
									_elm_lang$core$List$filter,
									function (_p453) {
										return A2(
											F2(
												function (x, y) {
													return _elm_lang$core$Native_Utils.eq(x, y);
												}),
											_elm_lang$core$Maybe$Just('*EXTRACTED EXPRESSION*'),
											_user$project$LangTools$expToMaybeIdent(_p453));
									},
									_user$project$Lang$flattenExpTree(newProgramWithLiftedDependenciesOldNamesFresh)))));
					return A2(_user$project$LangTools$visibleIdentifiersAtEIds, newProgramWithLiftedDependenciesOldNamesFresh, finalViewerEIds);
				}();
				var visibleName = A3(_user$project$LangTools$nonCollidingName, visibleNameSuggestion, 2, namesToAvoid);
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '_Tuple3',
						_0: visibleName,
						_1: insertedVarEId,
						_2: A3(_user$project$LangTools$renameIdentifier, '*EXTRACTED EXPRESSION*', visibleName, _p454)
					});
			}
		} else {
			var _p455 = _user$project$Utils$log(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'makeEIdVisibleToEIdsByInsertingNewBinding failed to lift eid ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(mobileEId),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' because can\'t find it in ',
							_user$project$LangUnparser$unparseWithIds(originalProgramUniqueNames)))));
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$CodeMotion$abstractPVar = F4(
	function (syntax, pathedPatId, perhapsArgEIds, originalProgram) {
		var _p456 = A2(_user$project$CodeMotion$pluck, pathedPatId, originalProgram);
		if (_p456.ctor === 'Nothing') {
			return A2(
				_elm_lang$core$Debug$log,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'abstractPVar Could not find pathedPatternId ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(pathedPatId),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' in program\n',
							_user$project$LangUnparser$unparseWithIds(originalProgram)))),
				{ctor: '[]'});
		} else {
			if (((_p456._0.ctor === '_Tuple2') && (_p456._0._0.ctor === '_Tuple3')) && (_p456._0._0._2 === false)) {
				var _p469 = _p456._0._0._1;
				var _p457 = _p456._0._0._0.val.p__;
				if (_p457.ctor === 'PVar') {
					var _p468 = _p457._1;
					var doAbstract = function (shouldBeParameter) {
						var _p458 = pathedPatId;
						var scopeEId = _p458._0._0;
						var scopeExp = A2(_user$project$LangTools$justFindExpByEId, originalProgram, scopeEId);
						var scopeBody = _user$project$LangTools$expToLetBody(scopeExp);
						var _p459 = A3(_user$project$CodeMotion$abstract, _p469.val.eid, shouldBeParameter, originalProgram);
						var argumentsForCallSite = _p459._0;
						var abstractedFuncExp = _p459._1;
						var abstractedFuncExpNiceWs = A2(
							_user$project$Lang$replaceIndentation,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Lang$indentationOf(scopeExp),
								'  '),
							A2(_user$project$Lang$replacePrecedingWhitespace, ' ', abstractedFuncExp));
						var newScopeBody = function () {
							var varToApp = function (varExp) {
								return A2(
									_user$project$Lang$replaceE__PreservingPrecedingWhitespace,
									varExp,
									A5(
										_user$project$Lang$EApp,
										_user$project$Lang$space0,
										_user$project$Lang$eVar0(_p468),
										A3(_user$project$Lang$setExpListWhitespace, ' ', ' ', argumentsForCallSite),
										_user$project$Lang$SpaceApp,
										_user$project$Lang$space0));
							};
							return A2(
								_user$project$LangTools$transformVarsUntilBound,
								A2(_elm_lang$core$Dict$singleton, _p468, varToApp),
								scopeBody);
						}();
						var newProgram = A3(
							_user$project$Lang$replaceExpNode,
							_p469.val.eid,
							abstractedFuncExpNiceWs,
							A3(_user$project$Lang$replaceExpNode, scopeBody.val.eid, newScopeBody, originalProgram));
						return {
							ctor: '_Tuple2',
							_0: newProgram,
							_1: _user$project$LangTools$expToFuncPats(abstractedFuncExpNiceWs)
						};
					};
					var _p460 = perhapsArgEIds;
					if (_p460.ctor === '[]') {
						var abstractedOverAllConstantsResult = function () {
							var _p461 = doAbstract(_user$project$CodeMotion$shouldBeParameterIsConstant);
							var newProgram = _p461._0;
							return A2(
								_user$project$InterfaceModel$synthesisResult,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Abstract ',
									A2(_elm_lang$core$Basics_ops['++'], _p468, ' over its constants')),
								newProgram);
						}();
						var abstractedOverNamedUnfrozenConstantsResult = function () {
							var _p462 = doAbstract(_user$project$CodeMotion$shouldBeParameterIsNamedUnfrozenConstant);
							var newProgram = _p462._0;
							return A2(
								_user$project$InterfaceModel$synthesisResult,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Abstract ',
									A2(_elm_lang$core$Basics_ops['++'], _p468, ' over its named constants')),
								newProgram);
						}();
						return {
							ctor: '::',
							_0: abstractedOverAllConstantsResult,
							_1: {
								ctor: '::',
								_0: abstractedOverNamedUnfrozenConstantsResult,
								_1: {ctor: '[]'}
							}
						};
					} else {
						var _p467 = _p460;
						var shouldBeParameter = F2(
							function (e, _p463) {
								return A2(_elm_lang$core$List$member, e.val.eid, _p467);
							});
						var _p464 = doAbstract(shouldBeParameter);
						var newProgram = _p464._0;
						var argPats = _p464._1;
						var isSafe = A2(
							_elm_lang$core$List$all,
							function (_p465) {
								return A2(
									F2(
										function (x, y) {
											return _elm_lang$core$Native_Utils.eq(x, y);
										}),
									_elm_lang$core$Maybe$Just(true),
									A2(
										_elm_lang$core$Maybe$map,
										_user$project$LangTools$isLiteral,
										A2(_user$project$Lang$findExpByEId, originalProgram, _p465)));
							},
							_p467);
						return {
							ctor: '::',
							_0: A2(
								_user$project$InterfaceModel$setResultSafe,
								isSafe,
								A2(
									_user$project$InterfaceModel$synthesisResult,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'Abstract ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p468,
											A2(
												_elm_lang$core$Basics_ops['++'],
												' over ',
												_user$project$Utils$toSentence(
													A2(
														_elm_lang$core$List$map,
														function (_p466) {
															return _user$project$Utils$squish(
																A2(_user$project$Syntax$patternUnparser, syntax, _p466));
														},
														argPats))))),
									newProgram)),
							_1: {ctor: '[]'}
						};
					}
				} else {
					return A2(
						_elm_lang$core$Debug$log,
						'Can only abstract a PVar',
						{ctor: '[]'});
				}
			} else {
				return A2(
					_elm_lang$core$Debug$log,
					'Cannot abstract a recursive definition',
					{ctor: '[]'});
			}
		}
	});
var _user$project$CodeMotion$addArgFromPat_ = F5(
	function (syntax, postProcessFBody, argSourcePathedPatId, targetPathedPatId, originalProgram) {
		var funcToIsSafePatToInsertArgValExpAndNewFuncBody = F2(
			function (func, fbody) {
				var _p470 = A2(_user$project$CodeMotion$pluck, argSourcePathedPatId, fbody);
				if (_p470.ctor === 'Nothing') {
					var _p471 = _user$project$Utils$log('could not pluck argument source pattern from inside the function');
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p470._0._0._2 === false) {
						var _p473 = _p470._0._0._0;
						var _p472 = _p470._0._1;
						var varUsagesSame = function () {
							var oldScopeAreas = A2(
								_user$project$LangTools$findScopeAreas,
								_user$project$Lang$pathedPatIdToScopeId(argSourcePathedPatId),
								fbody);
							return A2(
								_elm_lang$core$List$all,
								function (ident) {
									return _elm_lang$core$Native_Utils.eq(
										A2(_user$project$LangTools$identifierUses, ident, _p472),
										A2(
											_elm_lang$core$List$concatMap,
											_user$project$LangTools$identifierUses(ident),
											oldScopeAreas));
								},
								_user$project$LangTools$identifiersListInPat(_p473));
						}();
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple4',
								_0: varUsagesSame,
								_1: _p473,
								_2: _p470._0._0._1,
								_3: postProcessFBody(_p472)
							});
					} else {
						var _p474 = _user$project$Utils$log('cannot add recursive function as an argument');
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		return A4(_user$project$CodeMotion$addArg_, syntax, targetPathedPatId, funcToIsSafePatToInsertArgValExpAndNewFuncBody, originalProgram);
	});
var _user$project$CodeMotion$addArgsFromPats = F4(
	function (syntax, argSourcePathedPatIds, pathedPatId, originalProgram) {
		var _p475 = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (argSourcePathedPatId, _p476) {
					var _p477 = _p476;
					var _p480 = _p477._1;
					var _p478 = A2(
						_elm_lang$core$Maybe$map,
						A4(_user$project$CodeMotion$addArgFromPat_, syntax, _elm_lang$core$Basics$identity, argSourcePathedPatId, pathedPatId),
						_p477._0);
					if ((_p478.ctor === 'Just') && (_p478._0.ctor === '::')) {
						var _p479 = _p478._0._0._0;
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Maybe$Just(_p479.exp),
							_1: {ctor: '::', _0: _p479.description, _1: _p480},
							_2: _p477._2 && _p479.isSafe
						};
					} else {
						return {ctor: '_Tuple3', _0: _elm_lang$core$Maybe$Nothing, _1: _p480, _2: false};
					}
				}),
			{
				ctor: '_Tuple3',
				_0: _elm_lang$core$Maybe$Just(originalProgram),
				_1: {ctor: '[]'},
				_2: true
			},
			A2(
				_elm_lang$core$List$sortBy,
				function (_p481) {
					var _p482 = _p481;
					return A2(_user$project$LangTools$locationInProgram, originalProgram, _p482._0._0);
				},
				argSourcePathedPatIds));
		var maybeNewProgram = _p475._0;
		var resultDescs = _p475._1;
		var isSafe = _p475._2;
		var _p483 = maybeNewProgram;
		if (_p483.ctor === 'Just') {
			var newProgramWithAssignmentsSimplified = A3(
				_user$project$Lang$mapExpNode,
				_user$project$Lang$pathedPatIdToScopeEId(pathedPatId),
				_user$project$LangSimplify$simplifyAssignments,
				_p483._0);
			var caption = A3(
				_user$project$Utils$stringReplace,
				'Argument ',
				'Arguments ',
				_user$project$Utils$mergeStrings(resultDescs));
			return {
				ctor: '::',
				_0: A2(
					_user$project$InterfaceModel$setResultSafe,
					isSafe,
					A2(_user$project$InterfaceModel$synthesisResult, caption, newProgramWithAssignmentsSimplified)),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$addArgFromPat = F4(
	function (syntax, argSourcePathedPatId, targetPathedPatId, originalProgram) {
		return A5(_user$project$CodeMotion$addArgFromPat_, syntax, _user$project$LangSimplify$simplifyAssignments, argSourcePathedPatId, targetPathedPatId, originalProgram);
	});
var _user$project$CodeMotion$rewriteOffsetTransformation = F3(
	function (m, ppid, nums) {
		var eids = A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, nums);
		var isSafe = true;
		if (!isSafe) {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p484 = A2(_user$project$CodeMotion$pluck, ppid, m.inputExp);
			if ((((_p484.ctor === 'Just') && (_p484._0.ctor === '_Tuple2')) && (_p484._0._0.ctor === '_Tuple3')) && (_p484._0._0._2 === false)) {
				var _p485 = {ctor: '_Tuple2', _0: _p484._0._0._0.val.p__, _1: _p484._0._0._1.val.e__};
				if (((_p485.ctor === '_Tuple2') && (_p485._0.ctor === 'PVar')) && (_p485._1.ctor === 'EConst')) {
					var _p490 = _p485._0._1;
					return _elm_lang$core$Maybe$Just(
						function (_p486) {
							var _p487 = _p486;
							var newExp = A3(
								_elm_lang$core$List$foldl,
								function (_p488) {
									var _p489 = _p488;
									var eBasePlusOffset = function () {
										var diff = _p489._1._1 - _p485._1._1;
										return (_elm_lang$core$Native_Utils.cmp(diff, 0) > -1) ? A2(
											_user$project$Lang$ePlus,
											_user$project$Lang$eVar(_p490),
											A2(_user$project$Lang$eConst, diff, _user$project$Lang$dummyLoc)) : A2(
											_user$project$Lang$eMinus,
											_user$project$Lang$eVar(_p490),
											A2(_user$project$Lang$eConst, -1 * diff, _user$project$Lang$dummyLoc));
									}();
									return A2(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, _p489._0, eBasePlusOffset);
								},
								m.inputExp,
								nums);
							return _user$project$InterfaceModel$oneSafeResult(newExp);
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	});
var _user$project$CodeMotion$pluckByPId = F2(
	function (pid, program) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (ppid) {
				return A2(_user$project$CodeMotion$pluck, ppid, program);
			},
			A2(_user$project$Lang$pidToPathedPatternId, program, pid));
	});
var _user$project$CodeMotion$maybeDeleteEId = F2(
	function (eidToDelete, program) {
		var _p491 = A2(_user$project$Lang$findExpByEId, program, eidToDelete);
		if (_p491.ctor === 'Just') {
			var _p510 = _p491._0;
			var maybeProgramWithExpressionRemoved = function () {
				var _p492 = A2(_user$project$LangTools$findLetAndPatMatchingExpLoose, _p510.val.eid, program);
				if (_p492.ctor === 'Just') {
					var _p496 = _p492._0._1;
					var _p495 = _p492._0._0;
					var identsToDelete = _user$project$LangTools$identifiersListInPat(_p496);
					var scopeAreas = A2(
						_user$project$LangTools$findScopeAreas,
						{ctor: '_Tuple2', _0: _p495.val.eid, _1: 1},
						_p495);
					var varUses = A2(
						_elm_lang$core$List$concatMap,
						_user$project$LangTools$identifierSetUses(
							_elm_lang$core$Set$fromList(identsToDelete)),
						scopeAreas);
					var deleteVarUses = function (program) {
						return _user$project$LangSimplify$simplifyAssignments(
							A3(
								_elm_lang$core$List$foldr,
								_user$project$CodeMotion$deleteEId,
								program,
								A2(
									_elm_lang$core$List$map,
									function (_p493) {
										return function (_) {
											return _.eid;
										}(
											function (_) {
												return _.val;
											}(_p493));
									},
									varUses)));
					};
					var _p494 = A2(_user$project$CodeMotion$pluckByPId, _p496.val.pid, program);
					if (_p494.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(
							deleteVarUses(_p494._0._1));
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					var _p497 = A2(
						_user$project$Lang$parentByEId,
						program,
						A2(_user$project$LangTools$outerSameValueExp, program, _p510).val.eid);
					if ((_p497.ctor === 'Just') && (_p497._0.ctor === 'Just')) {
						var _p506 = _p497._0._0;
						var _p498 = _p506.val.e__;
						switch (_p498.ctor) {
							case 'EFun':
								return A2(_user$project$CodeMotion$maybeDeleteEId, _p506.val.eid, program);
							case 'EList':
								var _p504 = _p498._4;
								var _p503 = _p498._2;
								var _p502 = _p498._0;
								var _p501 = _p498._3;
								var _p500 = _p498._1;
								var _p499 = A2(
									_user$project$Utils$findi,
									_user$project$Lang$eidIs(eidToDelete),
									A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p500));
								if (_p499.ctor === 'Just') {
									return _elm_lang$core$Maybe$Just(
										A3(
											_user$project$Lang$replaceExpNodeE__,
											_p506,
											A5(
												_user$project$Lang$EList,
												_p502,
												A2(
													_elm_lang$core$List$map,
													F2(
														function (v0, v1) {
															return {ctor: '_Tuple2', _0: v0, _1: v1};
														})(_user$project$Lang$space0),
													A2(
														_user$project$Lang$imitateExpListWhitespace,
														A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p500),
														A2(
															_user$project$Utils$removei,
															_p499._0,
															A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p500)))),
												_p503,
												_p501,
												_p504),
											program));
								} else {
									return _elm_lang$core$Native_Utils.eq(
										A2(
											_elm_lang$core$Maybe$map,
											_user$project$Lang$eidIs(eidToDelete),
											_p501),
										_elm_lang$core$Maybe$Just(true)) ? _elm_lang$core$Maybe$Just(
										A3(
											_user$project$Lang$replaceExpNodeE__,
											_p506,
											A5(_user$project$Lang$EList, _p502, _p500, _p503, _elm_lang$core$Maybe$Nothing, _p504),
											program)) : _elm_lang$core$Maybe$Nothing;
								}
							default:
								var _p505 = _user$project$Utils$log(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'can\'t remove from parent ',
										A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, _p506)));
								return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						var _p507 = _user$project$Utils$log('can\'t find parent to remove from');
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			}();
			return A2(
				_elm_lang$core$Maybe$map,
				function (programWithExpressionRemoved) {
					var varEIdsPerhapsRemoved = function () {
						var _p508 = _user$project$LangTools$expToMaybeVar(
							_user$project$Lang$expEffectiveExp(_p510));
						if (_p508.ctor === 'Just') {
							return _elm_lang$core$Set$singleton(_p508._0.val.eid);
						} else {
							return _elm_lang$core$Set$empty;
						}
					}();
					var pidsToRemoveIfNowUnused = _elm_lang$core$Set$fromList(
						_user$project$Utils$filterJusts(
							_elm_lang$core$Dict$values(
								A2(
									_elm_lang$core$Dict$filter,
									F2(
										function (varEId, _p509) {
											return A2(_elm_lang$core$Set$member, varEId, varEIdsPerhapsRemoved);
										}),
									_user$project$LangTools$allVarEIdsToBindingPId(program)))));
					return _user$project$LangSimplify$removeEmptyListsFromConcats(
						A2(
							_user$project$LangSimplify$removeUnusedLetPatsMatching,
							function (pat) {
								return A2(_elm_lang$core$Set$member, pat.val.pid, pidsToRemoveIfNowUnused);
							},
							programWithExpressionRemoved));
				},
				maybeProgramWithExpressionRemoved);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$CodeMotion$deleteEId = F2(
	function (eidToDelete, program) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			program,
			A2(_user$project$CodeMotion$maybeDeleteEId, eidToDelete, program));
	});
var _user$project$CodeMotion$pluckAll = F2(
	function (sourcePathedPatIds, program) {
		var sortedSourcePathedPatIds = A2(
			_elm_lang$core$List$sortBy,
			function (_p511) {
				var _p512 = _p511;
				return {
					ctor: '_Tuple3',
					_0: A2(_user$project$LangTools$locationInProgram, program, _p512._0._0),
					_1: _p512._0._1,
					_2: _p512._1
				};
			},
			sourcePathedPatIds);
		var _p513 = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (sourcePathedPatId, _p514) {
					var _p515 = _p514;
					var _p518 = _p515._1;
					var _p517 = _p515._0;
					var _p516 = A2(_user$project$CodeMotion$pluck, sourcePathedPatId, _p518);
					if (_p516.ctor === 'Just') {
						return {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: {ctor: '_Tuple3', _0: _p516._0._0._0, _1: _p516._0._0._1, _2: _p516._0._0._2},
								_1: _p517
							},
							_1: _p516._0._1
						};
					} else {
						return {ctor: '_Tuple2', _0: _p517, _1: _p518};
					}
				}),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: program
			},
			sortedSourcePathedPatIds);
		var pluckedPatAndBoundExpAndIsRecs = _p513._0;
		var programWithoutPlucked = _p513._1;
		return {ctor: '_Tuple2', _0: pluckedPatAndBoundExpAndIsRecs, _1: programWithoutPlucked};
	});
var _user$project$CodeMotion$moveDefinitions_ = F4(
	function (syntax, makeNewProgram, sourcePathedPatIds, program) {
		var _p519 = _user$project$LangTools$assignUniqueNames(program);
		var programUniqueNames = _p519._0;
		var uniqueNameToOldName = _p519._1;
		var _p520 = A2(_user$project$CodeMotion$pluckAll, sourcePathedPatIds, programUniqueNames);
		var pluckedPatAndBoundExpAndIsRecs = _p520._0;
		var programWithoutPlucked = _p520._1;
		if (_elm_lang$core$Native_Utils.eq(
			pluckedPatAndBoundExpAndIsRecs,
			{ctor: '[]'})) {
			return A2(
				_elm_lang$core$Debug$log,
				'could not pluck anything',
				{ctor: '[]'});
		} else {
			var _p521 = _user$project$Utils$unzip3(pluckedPatAndBoundExpAndIsRecs);
			var pluckedPats = _p521._0;
			var pluckedBoundExps = _p521._1;
			var isRecs = _p521._2;
			var pluckedPathedPatIdentifiersUnique = _user$project$Utils$unionAll(
				A2(_elm_lang$core$List$map, _user$project$LangTools$identifiersSetInPat, pluckedPats));
			var pluckedBoundExpFreeIdentifiersUnique = _user$project$Utils$unionAll(
				A2(_elm_lang$core$List$map, _user$project$LangTools$freeIdentifiers, pluckedBoundExps));
			var namesUniqueExplicitlyMoved = A2(_elm_lang$core$Set$union, pluckedPathedPatIdentifiersUnique, pluckedBoundExpFreeIdentifiersUnique);
			var _p522 = A2(
				_elm_lang$core$Tuple$mapFirst,
				_user$project$LangSimplify$simplifyAssignments,
				A2(makeNewProgram, pluckedPatAndBoundExpAndIsRecs, programWithoutPlucked));
			var newProgramUniqueNames = _p522._0;
			var newScopeEId = _p522._1;
			var movedThingsStr = _user$project$Utils$toSentence(
				A2(
					_elm_lang$core$List$map,
					function (_p523) {
						return _user$project$Utils$squish(
							A2(
								_user$project$Syntax$patternUnparser,
								syntax,
								A2(_user$project$LangTools$renameIdentifiersInPat, uniqueNameToOldName, _p523)));
					},
					pluckedPats));
			return A9(
				_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
				A2(_elm_lang$core$Basics_ops['++'], 'Move ', movedThingsStr),
				uniqueNameToOldName,
				_elm_lang$core$Maybe$Just(newScopeEId),
				{ctor: '_Tuple2', _0: 'moved', _1: 'unmoved'},
				namesUniqueExplicitlyMoved,
				{ctor: '[]'},
				_elm_lang$core$Dict$empty,
				programUniqueNames,
				newProgramUniqueNames);
		}
	});
var _user$project$CodeMotion$moveDefinitionsBeforeEId = F4(
	function (syntax, sourcePathedPatIds, targetEId, program) {
		var makeNewProgram = F2(
			function (pluckedPatAndBoundExpAndIsRecs, programWithoutPluckedUniqueNames) {
				return A4(_user$project$CodeMotion$insertNewLetFromPlucked, targetEId, pluckedPatAndBoundExpAndIsRecs, programWithoutPluckedUniqueNames, program);
			});
		return A4(_user$project$CodeMotion$moveDefinitions_, syntax, makeNewProgram, sourcePathedPatIds, program);
	});
var _user$project$CodeMotion$makeEIdVisibleToEIds = F3(
	function (originalProgram, mobileEId, viewerEIds) {
		var _p524 = _user$project$LangTools$assignUniqueNames(originalProgram);
		var originalProgramUniqueNames = _p524._0;
		var uniqueNameToOldName = _p524._1;
		var allViewerEIds = A2(_elm_lang$core$Set$insert, mobileEId, viewerEIds);
		var renameIfCollision = F5(
			function (mobileUniqueName, uniqueNameToOldName, viewerEIds, program, programUniqueNames) {
				var mobileOriginalName = A3(_user$project$Utils$getWithDefault, mobileUniqueName, '', uniqueNameToOldName);
				var resolvesCorrectly = function (viewerEId) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						false,
						A2(
							_elm_lang$core$Maybe$map,
							function (e) {
								return A2(
									_elm_lang$core$List$member,
									mobileEId,
									_user$project$Lang$expEffectiveEIds(e));
							},
							A3(_user$project$LangTools$maybeResolveIdentifierToExp, mobileOriginalName, viewerEId, program)));
				};
				if (A2(
					_elm_lang$core$List$all,
					resolvesCorrectly,
					_elm_lang$core$Set$toList(viewerEIds))) {
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple3', _0: mobileOriginalName, _1: mobileEId, _2: program});
				} else {
					var uniqueNameToOldNameWithoutMobileName = A2(_elm_lang$core$Dict$remove, mobileUniqueName, uniqueNameToOldName);
					var newProgram = A2(_user$project$LangTools$renameIdentifiers, uniqueNameToOldNameWithoutMobileName, programUniqueNames);
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple3', _0: mobileUniqueName, _1: mobileEId, _2: newProgram});
				}
			});
		var _p525 = A2(_user$project$LangTools$findLetAndIdentBindingExpLoose, mobileEId, originalProgramUniqueNames);
		if (_p525.ctor === 'Just') {
			var _p536 = _p525._0._1;
			var _p535 = _p525._0._0;
			if (A2(
				_elm_lang$core$List$all,
				function (viewerEId) {
					return A2(
						_elm_lang$core$Set$member,
						_p536,
						A2(
							_user$project$LangTools$visibleIdentifiersAtEIds,
							originalProgramUniqueNames,
							_elm_lang$core$Set$singleton(viewerEId)));
				},
				_elm_lang$core$Set$toList(viewerEIds))) {
				return A5(renameIfCollision, _p536, uniqueNameToOldName, viewerEIds, originalProgram, originalProgramUniqueNames);
			} else {
				var expToWrap = A3(
					_user$project$LangTools$deepestCommonAncestorOrSelfWithNewline,
					originalProgramUniqueNames,
					_elm_lang$core$Basics$always(true),
					function (e) {
						return A2(_elm_lang$core$Set$member, e.val.eid, allViewerEIds);
					});
				var maybeProgramAfterMove = function () {
					var bindingLetBoundExp = _user$project$LangTools$expToLetBoundExp(_p535);
					var freeVarsAtNewLocation = _user$project$LangTools$freeVars(expToWrap);
					if (A2(
						_elm_lang$core$List$member,
						_p535,
						_user$project$LangTools$sameLevelExps(expToWrap)) && A2(
						_elm_lang$core$List$all,
						function ($var) {
							return A2(_elm_lang$core$List$member, $var, freeVarsAtNewLocation);
						},
						_user$project$LangTools$freeVars(bindingLetBoundExp))) {
						return A2(
							_elm_lang$core$Maybe$map,
							function (_p526) {
								var _p527 = _p526;
								return _p527._0.exp;
							},
							A2(
								_user$project$Utils$findFirst,
								_user$project$InterfaceModel$isResultSafe,
								A4(
									_user$project$CodeMotion$moveEquationsBeforeEId,
									_user$project$Syntax$Elm,
									{
										ctor: '::',
										_0: _p535.val.eid,
										_1: {ctor: '[]'}
									},
									expToWrap.val.eid,
									originalProgram)));
					} else {
						var pathedPatId = A2(
							_user$project$Utils$fromJust_,
							'makeEIdVisibleToEIds: bindingPathedPatternIdForUniqueName mobileUniqueName originalProgramUniqueNames',
							A2(_user$project$LangTools$bindingPathedPatternIdForUniqueName, _p536, _p535));
						return A2(
							_elm_lang$core$Maybe$map,
							function (_p528) {
								var _p529 = _p528;
								return _p529._0.exp;
							},
							A2(
								_user$project$Utils$findFirst,
								_user$project$InterfaceModel$isResultSafe,
								A4(
									_user$project$CodeMotion$moveDefinitionsBeforeEId,
									_user$project$Syntax$Elm,
									{
										ctor: '::',
										_0: pathedPatId,
										_1: {ctor: '[]'}
									},
									expToWrap.val.eid,
									originalProgram)));
					}
				}();
				var _p530 = maybeProgramAfterMove;
				if (_p530.ctor === 'Nothing') {
					return A3(_user$project$CodeMotion$makeEIdVisibleToEIdsByInsertingNewBinding, originalProgram, mobileEId, viewerEIds);
				} else {
					var _p534 = _p530._0;
					var _p531 = _user$project$LangTools$assignUniqueNames(_p534);
					var maybeProgramAfterMoveUniqueNames = _p531._0;
					var afterMoveUniqueNameToOldName = _p531._1;
					var _p532 = A2(_user$project$LangTools$findLetAndIdentBindingExpLoose, mobileEId, maybeProgramAfterMoveUniqueNames);
					if (_p532.ctor === 'Nothing') {
						return _elm_lang$core$Native_Utils.crashCase(
							'CodeMotion',
							{
								start: {line: 2772, column: 13},
								end: {line: 2775, column: 141}
							},
							_p532)('makeEIdVisibleToEIds eids got screwed up somewhere');
					} else {
						return A5(renameIfCollision, _p532._0._1, afterMoveUniqueNameToOldName, viewerEIds, _p534, maybeProgramAfterMoveUniqueNames);
					}
				}
			}
		} else {
			return A3(_user$project$CodeMotion$makeEIdVisibleToEIdsByInsertingNewBinding, originalProgram, mobileEId, viewerEIds);
		}
	});
var _user$project$CodeMotion$makeEIdOriginVisibleToEIds = F3(
	function (originalProgram, mobileEId, viewerEIds) {
		var performAsGiven = function (_p537) {
			var _p538 = _p537;
			return A3(_user$project$CodeMotion$makeEIdVisibleToEIds, originalProgram, mobileEId, viewerEIds);
		};
		var _p539 = A2(
			_elm_lang$core$Maybe$map,
			_user$project$Lang$expEffectiveExp,
			A2(_user$project$Lang$findExpByEId, originalProgram, mobileEId));
		if (_p539.ctor === 'Just') {
			var _p542 = _p539._0;
			if (_user$project$Lang$isVar(_p542)) {
				var _p540 = A3(
					_user$project$LangTools$maybeResolveIdentifierToExp,
					_user$project$LangTools$expToIdent(_p542),
					_p542.val.eid,
					originalProgram);
				if (_p540.ctor === 'Just') {
					var _p541 = _p540._0;
					return _user$project$FastParser$isProgramEId(_p541.val.eid) ? A3(_user$project$CodeMotion$makeEIdVisibleToEIds, originalProgram, _p541.val.eid, viewerEIds) : performAsGiven(
						{ctor: '_Tuple0'});
				} else {
					return performAsGiven(
						{ctor: '_Tuple0'});
				}
			} else {
				return performAsGiven(
					{ctor: '_Tuple0'});
			}
		} else {
			return performAsGiven(
				{ctor: '_Tuple0'});
		}
	});
var _user$project$CodeMotion$liftLocsSoVisibleTo_ = F4(
	function (copyOriginal, program, mobileLocIdSet, viewerEIds) {
		var makeEIdVisible = copyOriginal ? _user$project$CodeMotion$makeEIdVisibleToEIdsByInsertingNewBinding : _user$project$CodeMotion$makeEIdVisibleToEIds;
		return A3(
			_elm_lang$core$Set$foldl,
			F2(
				function (mobileLocId, _p543) {
					var _p544 = _p543;
					var _p554 = _p544._0;
					var _p553 = _p544._2;
					var _p552 = _p544._1;
					var _p545 = A2(_user$project$Lang$locIdToEId, _p554, mobileLocId);
					if (_p545.ctor === 'Just') {
						var _p546 = A3(makeEIdVisible, _p554, _p545._0, viewerEIds);
						if (_p546.ctor === 'Just') {
							return {
								ctor: '_Tuple3',
								_0: _p546._0._2,
								_1: A3(_elm_lang$core$Dict$insert, mobileLocId, _p546._0._0, _p552),
								_2: A3(_elm_lang$core$Dict$insert, mobileLocId, _p546._0._1, _p553)
							};
						} else {
							var _p547 = _user$project$Utils$log('liftLocsSoVisibleTo: makeEIdVisible could not lift');
							return {ctor: '_Tuple3', _0: _p554, _1: _p552, _2: _p553};
						}
					} else {
						var _p548 = _user$project$Utils$log(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'liftLocsSoVisibleTo: could not convert locId ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(mobileLocId),
									' to EId')));
						var _p549 = A2(_elm_lang$core$Debug$log, 'locIdToNewName', _p552);
						var _p550 = A2(_elm_lang$core$Debug$log, 'locIdToVarEId', _p553);
						var _p551 = _user$project$Utils$log(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'program: ',
								_user$project$LangUnparser$unparseWithIds(_p554)));
						return {ctor: '_Tuple3', _0: _p554, _1: _p552, _2: _p553};
					}
				}),
			{ctor: '_Tuple3', _0: program, _1: _elm_lang$core$Dict$empty, _2: _elm_lang$core$Dict$empty},
			mobileLocIdSet);
	});
var _user$project$CodeMotion$liftLocsSoVisibleTo = F3(
	function (program, mobileLocIdSet, viewerEIds) {
		return A4(_user$project$CodeMotion$liftLocsSoVisibleTo_, false, program, mobileLocIdSet, viewerEIds);
	});
var _user$project$CodeMotion$copyLocsSoVisibleTo = F3(
	function (program, mobileLocIdSet, viewerEIds) {
		return A4(_user$project$CodeMotion$liftLocsSoVisibleTo_, true, program, mobileLocIdSet, viewerEIds);
	});
var _user$project$CodeMotion$resolveValueAndLocHoles = F5(
	function (allowReplacementOfHoleParentExps, solutionsCache, syncOptions, maybeEnv, programWithHolesUnfresh) {
		resolveValueAndLocHoles:
		while (true) {
			var makeDestructuring = F5(
				function (program, namesToAvoid, targetVal, parentVal, parentExp) {
					if (A2(_user$project$Provenance$valsSame, targetVal, parentVal)) {
						var suggestedName = A2(_user$project$Provenance$nameForVal, program, targetVal);
						var name = A3(_user$project$LangTools$nonCollidingName, suggestedName, 2, namesToAvoid);
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple3',
								_0: name,
								_1: _user$project$Lang$pVar(name),
								_2: parentExp
							});
					} else {
						var _p555 = {
							ctor: '_Tuple2',
							_0: parentVal.v_,
							_1: _user$project$Lang$valToMaybeXYVals(parentVal)
						};
						_v192_2:
						do {
							if (_p555.ctor === '_Tuple2') {
								if ((_p555._1.ctor === 'Just') && (_p555._1._0.ctor === '_Tuple2')) {
									if (A2(_user$project$Provenance$valsSame, targetVal, _p555._1._0._0)) {
										var name = A3(_user$project$LangTools$nonCollidingName, 'x', 1, namesToAvoid);
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '_Tuple3',
												_0: name,
												_1: _user$project$Lang$pList(
													{
														ctor: '::',
														_0: _user$project$Lang$pVar0(name),
														_1: {
															ctor: '::',
															_0: _user$project$Lang$pWildcard,
															_1: {ctor: '[]'}
														}
													}),
												_2: parentExp
											});
									} else {
										if (A2(_user$project$Provenance$valsSame, targetVal, _p555._1._0._1)) {
											var name = A3(_user$project$LangTools$nonCollidingName, 'y', 1, namesToAvoid);
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '_Tuple3',
													_0: name,
													_1: _user$project$Lang$pList(
														{
															ctor: '::',
															_0: _user$project$Lang$pWildcard0,
															_1: {
																ctor: '::',
																_0: _user$project$Lang$pVar(name),
																_1: {ctor: '[]'}
															}
														}),
													_2: parentExp
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								} else {
									if (_p555._0.ctor === 'VList') {
										return _elm_lang$core$Tuple$second(
											A3(
												_user$project$Utils$foldl,
												{ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Maybe$Nothing},
												F2(
													function (childVal, _p556) {
														var _p557 = _p556;
														var _p559 = _p557._1;
														var _p558 = _p557._0;
														if (_elm_lang$core$Native_Utils.eq(_p559, _elm_lang$core$Maybe$Nothing)) {
															var newParentExp = A2(
																_user$project$Lang$eCall,
																'nth',
																{
																	ctor: '::',
																	_0: parentExp,
																	_1: {
																		ctor: '::',
																		_0: _user$project$Lang$eConstDummyLoc(_p558),
																		_1: {ctor: '[]'}
																	}
																});
															return {
																ctor: '_Tuple2',
																_0: _p558 + 1,
																_1: A5(makeDestructuring, program, namesToAvoid, targetVal, childVal, newParentExp)
															};
														} else {
															return {ctor: '_Tuple2', _0: _p558 + 1, _1: _p559};
														}
													}),
												_p555._0._0));
									} else {
										break _v192_2;
									}
								}
							} else {
								break _v192_2;
							}
						} while(false);
						return _elm_lang$core$Maybe$Nothing;
					}
				});
			var expMatchesExpWithHoles = F4(
				function (program, viewerEId, expWithHoles, existingExp) {
					var _p560 = {
						ctor: '_Tuple2',
						_0: _user$project$Lang$expEffectiveExp(expWithHoles).val.e__,
						_1: existingExp.val.e__
					};
					_v194_7:
					do {
						_v194_5:
						do {
							_v194_1:
							do {
								if (_p560.ctor === '_Tuple2') {
									switch (_p560._0.ctor) {
										case 'EVar':
											if (_user$project$FastParser$isProgramEId(viewerEId)) {
												var _p561 = A2(
													_elm_lang$core$Maybe$map,
													_user$project$Lang$expEffectiveExp,
													A3(_user$project$LangTools$maybeResolveIdentifierToExp, _p560._0._1, viewerEId, program));
												if (_p561.ctor === 'Just') {
													var _p562 = _p561._0;
													return (_elm_lang$core$Native_Utils.cmp(_p562.val.eid, 0) > 0) && A4(expMatchesExpWithHoles, program, _p562.val.eid, _p562, existingExp);
												} else {
													return false;
												}
											} else {
												return false;
											}
										case 'EList':
											switch (_p560._1.ctor) {
												case 'EVar':
													break _v194_1;
												case 'EList':
													if ((_p560._0._3.ctor === 'Nothing') && (_p560._1._3.ctor === 'Nothing')) {
														return A2(
															_elm_lang$core$Maybe$withDefault,
															false,
															A2(
																_elm_lang$core$Maybe$map,
																_elm_lang$core$List$all(
																	function (_p565) {
																		var _p566 = _p565;
																		return A4(
																			expMatchesExpWithHoles,
																			program,
																			viewerEId,
																			_p566._0._1,
																			_user$project$Lang$expEffectiveExp(_p566._1._1));
																	}),
																A2(_user$project$Utils$maybeZip, _p560._0._1, _p560._1._1)));
													} else {
														break _v194_7;
													}
												default:
													break _v194_7;
											}
										case 'EOp':
											switch (_p560._1.ctor) {
												case 'EVar':
													break _v194_1;
												case 'EOp':
													var _p571 = _p560._1._1;
													var _p570 = _p560._1._2;
													return _elm_lang$core$Native_Utils.eq(_p560._0._1.val, _p571.val) && function () {
														var existingExpChildExpOrdersToTry = function () {
															var _p567 = _p571.val;
															switch (_p567.ctor) {
																case 'Plus':
																	return {
																		ctor: '::',
																		_0: _p570,
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$core$List$reverse(_p570),
																			_1: {ctor: '[]'}
																		}
																	};
																case 'Mult':
																	return {
																		ctor: '::',
																		_0: _p570,
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$core$List$reverse(_p570),
																			_1: {ctor: '[]'}
																		}
																	};
																default:
																	return {
																		ctor: '::',
																		_0: _p570,
																		_1: {ctor: '[]'}
																	};
															}
														}();
														return A2(
															_elm_lang$core$List$any,
															function (existingExpChildExps) {
																return A2(
																	_elm_lang$core$Maybe$withDefault,
																	false,
																	A2(
																		_elm_lang$core$Maybe$map,
																		_elm_lang$core$List$all(
																			function (_p568) {
																				var _p569 = _p568;
																				return A4(
																					expMatchesExpWithHoles,
																					program,
																					viewerEId,
																					_p569._0,
																					_user$project$Lang$expEffectiveExp(_p569._1));
																			}),
																		A2(_user$project$Utils$maybeZip, _p560._0._2, existingExpChildExps)));
															},
															existingExpChildExpOrdersToTry);
													}();
												default:
													break _v194_7;
											}
										case 'EConst':
											switch (_p560._1.ctor) {
												case 'EVar':
													break _v194_1;
												case 'EConst':
													if ((_p560._0._2.ctor === '_Tuple3') && (_p560._1._2.ctor === '_Tuple3')) {
														var _p572 = _p560._0._2._0;
														return ((_elm_lang$core$Native_Utils.cmp(_p572, 0) > 0) && _elm_lang$core$Native_Utils.eq(_p572, _p560._1._2._0)) || (_elm_lang$core$Native_Utils.eq(_p560._0._1, _p560._1._1) && (_elm_lang$core$Native_Utils.eq(_p560._0._2._1, _user$project$Lang$frozen) && _elm_lang$core$Native_Utils.eq(_p560._1._2._1, _user$project$Lang$frozen)));
													} else {
														break _v194_7;
													}
												default:
													break _v194_7;
											}
										case 'EHole':
											switch (_p560._1.ctor) {
												case 'EVar':
													break _v194_1;
												case 'EConst':
													switch (_p560._0._1.ctor) {
														case 'HoleVal':
															break _v194_5;
														case 'HoleLoc':
															if (_p560._1._2.ctor === '_Tuple3') {
																return _elm_lang$core$Native_Utils.eq(_p560._0._1._0, _p560._1._2._0);
															} else {
																break _v194_7;
															}
														default:
															break _v194_7;
													}
												default:
													if (_p560._0._1.ctor === 'HoleVal') {
														break _v194_5;
													} else {
														break _v194_7;
													}
											}
										default:
											if (_p560._1.ctor === 'EVar') {
												break _v194_1;
											} else {
												break _v194_7;
											}
									}
								} else {
									break _v194_7;
								}
							} while(false);
							if (_user$project$FastParser$isProgramEId(existingExp.val.eid)) {
								var _p563 = A2(
									_elm_lang$core$Maybe$map,
									_user$project$Lang$expEffectiveExp,
									A3(_user$project$LangTools$maybeResolveIdentifierToExp, _p560._1._1, existingExp.val.eid, program));
								if (_p563.ctor === 'Just') {
									var _p564 = _p563._0;
									return (_elm_lang$core$Native_Utils.cmp(_p564.val.eid, 0) > 0) && A4(expMatchesExpWithHoles, program, viewerEId, expWithHoles, _p564);
								} else {
									return false;
								}
							} else {
								return false;
							}
						} while(false);
						return A2(
							_elm_lang$core$List$member,
							existingExp.val.eid,
							A2(
								_elm_lang$core$List$map,
								function (_p573) {
									return function (_) {
										return _.eid;
									}(
										function (_) {
											return _.val;
										}(_p573));
								},
								A2(_user$project$Provenance$valBasedOnTreeToProgramExps, program, _p560._0._1._0)));
					} while(false);
					return false;
				});
			var expCouldMatchEnvVal = F2(
				function (exp, envVal) {
					var _p574 = {
						ctor: '_Tuple2',
						_0: _user$project$Lang$expEffectiveExp(exp).val.e__,
						_1: envVal.v_
					};
					_v200_6:
					do {
						if (_p574.ctor === '_Tuple2') {
							switch (_p574._0.ctor) {
								case 'EVar':
									return true;
								case 'EList':
									if ((_p574._0._3.ctor === 'Nothing') && (_p574._1.ctor === 'VList')) {
										return A2(
											_elm_lang$core$Maybe$withDefault,
											false,
											A2(
												_elm_lang$core$Maybe$map,
												_elm_lang$core$List$all(
													function (_p575) {
														var _p576 = _p575;
														return A2(expCouldMatchEnvVal, _p576._0._1, _p576._1);
													}),
												A2(_user$project$Utils$maybeZip, _p574._0._1, _p574._1._0)));
									} else {
										break _v200_6;
									}
								case 'EOp':
									if (((_p574._1.ctor === 'VConst') && (_p574._1._1.ctor === '_Tuple2')) && (_p574._1._1._1.ctor === 'MathOp')) {
										return _user$project$Lang$isMathOp_(_p574._0._1.val);
									} else {
										break _v200_6;
									}
								case 'EConst':
									if ((_p574._1.ctor === 'VConst') && (_p574._1._1.ctor === '_Tuple2')) {
										return _elm_lang$core$Native_Utils.eq(_p574._0._1, _p574._1._1._0);
									} else {
										break _v200_6;
									}
								case 'EHole':
									switch (_p574._0._1.ctor) {
										case 'HoleVal':
											var _p577 = _p574._0._1._0;
											return _elm_lang$core$Native_Utils.eq(
												_user$project$Lang$valToMaybeNum(_p577),
												_user$project$Lang$valToMaybeNum(envVal)) && _elm_lang$core$Native_Utils.eq(
												A2(
													_elm_lang$core$Maybe$map,
													_elm_lang$core$List$length,
													_user$project$Lang$vListToMaybeVals(_p577)),
												A2(
													_elm_lang$core$Maybe$map,
													_elm_lang$core$List$length,
													_user$project$Lang$vListToMaybeVals(envVal)));
										case 'HoleLoc':
											if (((_p574._1.ctor === 'VConst') && (_p574._1._1.ctor === '_Tuple2')) && (_p574._1._1._1.ctor === 'MathVar')) {
												return _elm_lang$core$Native_Utils.eq(_p574._0._1._0, _p574._1._1._1._0);
											} else {
												break _v200_6;
											}
										default:
											break _v200_6;
									}
								default:
									break _v200_6;
							}
						} else {
							break _v200_6;
						}
					} while(false);
					return false;
				});
			var isPossibleExpandedExpForLifting = function (exp) {
				return A2(
					_elm_lang$core$List$any,
					function (pred) {
						return pred(exp);
					},
					allowReplacementOfHoleParentExps ? {
						ctor: '::',
						_0: _user$project$Lang$isNumber,
						_1: {
							ctor: '::',
							_0: _user$project$Lang$isTuple,
							_1: {
								ctor: '::',
								_0: _user$project$Lang$isMathOp,
								_1: {
									ctor: '::',
									_0: _user$project$Lang$isVar,
									_1: {
										ctor: '::',
										_0: _user$project$Lang$isParens,
										_1: {
											ctor: '::',
											_0: _user$project$Lang$isComment,
											_1: {
												ctor: '::',
												_0: _user$project$Lang$isValHole,
												_1: {
													ctor: '::',
													_0: _user$project$Lang$isLocHole,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					} : {
						ctor: '::',
						_0: _user$project$Lang$isValHole,
						_1: {
							ctor: '::',
							_0: _user$project$Lang$isLocHole,
							_1: {ctor: '[]'}
						}
					});
			};
			var expsForMatching = function (program) {
				return A2(
					_elm_lang$core$List$filter,
					_user$project$Lang$allNodesSatisfy(isPossibleExpandedExpForLifting),
					A2(
						_elm_lang$core$List$filter,
						function (_p578) {
							return _user$project$FastParser$isProgramEId(
								function (_) {
									return _.eid;
								}(
									function (_) {
										return _.val;
									}(_p578)));
						},
						_user$project$Lang$flattenExpTree(program)));
			};
			var expandedExpsWithHoles = function (program) {
				return _elm_lang$core$List$reverse(
					A2(
						_elm_lang$core$List$sortBy,
						_user$project$LangTools$nodeCount,
						A2(
							_elm_lang$core$List$filter,
							_user$project$Lang$containsNode(
								function (e) {
									return _user$project$Lang$isValHole(e) || _user$project$Lang$isLocHole(e);
								}),
							expsForMatching(program))));
			};
			var programWithHoles = _user$project$FastParser$freshen(programWithHolesUnfresh);
			var unfrozenLocIdSet = A2(_user$project$Sync$expToUnfrozenLocIdSet, syncOptions, programWithHoles);
			var expMatchesEnvVal = F5(
				function (program, envDistalSameVals, viewerEId, exp, envVal) {
					var _p579 = {
						ctor: '_Tuple2',
						_0: _user$project$Lang$expEffectiveExp(exp).val.e__,
						_1: envVal.v_
					};
					_v202_6:
					do {
						if (_p579.ctor === '_Tuple2') {
							switch (_p579._0.ctor) {
								case 'EVar':
									var _p581 = _p579._0._1;
									var _p580 = A2(_user$project$Utils$maybeFind, _p581, envDistalSameVals);
									if (_p580.ctor === 'Just') {
										return A2(_user$project$Provenance$valEqFast, _p580._0, envVal);
									} else {
										return _user$project$FastParser$isProgramEId(viewerEId) ? A2(
											_elm_lang$core$Maybe$withDefault,
											false,
											A2(
												_elm_lang$core$Maybe$map,
												function (resolvedVarExp) {
													return A5(expMatchesEnvVal, program, envDistalSameVals, resolvedVarExp.val.eid, resolvedVarExp, envVal);
												},
												A3(_user$project$LangTools$maybeResolveIdentifierToExp, _p581, viewerEId, program))) : false;
									}
								case 'EList':
									if ((_p579._0._3.ctor === 'Nothing') && (_p579._1.ctor === 'VList')) {
										return A2(
											_elm_lang$core$Maybe$withDefault,
											false,
											A2(
												_elm_lang$core$Maybe$map,
												_elm_lang$core$List$all(
													function (_p582) {
														var _p583 = _p582;
														return A5(expMatchesEnvVal, program, envDistalSameVals, viewerEId, _p583._0._1, _p583._1);
													}),
												A2(_user$project$Utils$maybeZip, _p579._0._1, _p579._1._0)));
									} else {
										break _v202_6;
									}
								case 'EOp':
									if (((_p579._1.ctor === 'VConst') && (_p579._1._1.ctor === '_Tuple2')) && (_p579._1._1._1.ctor === 'MathOp')) {
										var _p587 = _p579._1._1._1._0;
										return _elm_lang$core$Native_Utils.eq(_p579._0._1.val, _p587) && function () {
											var childVals = A2(
												_elm_lang$core$List$map,
												_user$project$Provenance$valToDistalSameVal,
												_user$project$Lang$valBasedOn(envVal));
											var childValOrdersToTry = function () {
												var _p584 = _p587;
												switch (_p584.ctor) {
													case 'Plus':
														return {
															ctor: '::',
															_0: childVals,
															_1: {
																ctor: '::',
																_0: _elm_lang$core$List$reverse(childVals),
																_1: {ctor: '[]'}
															}
														};
													case 'Mult':
														return {
															ctor: '::',
															_0: childVals,
															_1: {
																ctor: '::',
																_0: _elm_lang$core$List$reverse(childVals),
																_1: {ctor: '[]'}
															}
														};
													default:
														return {
															ctor: '::',
															_0: childVals,
															_1: {ctor: '[]'}
														};
												}
											}();
											return A2(
												_elm_lang$core$List$any,
												function (childVals) {
													return A2(
														_elm_lang$core$Maybe$withDefault,
														false,
														A2(
															_elm_lang$core$Maybe$map,
															_elm_lang$core$List$all(
																function (_p585) {
																	var _p586 = _p585;
																	return A5(expMatchesEnvVal, program, envDistalSameVals, viewerEId, _p586._0, _p586._1);
																}),
															A2(_user$project$Utils$maybeZip, _p579._0._2, childVals)));
												},
												childValOrdersToTry);
										}();
									} else {
										break _v202_6;
									}
								case 'EConst':
									if (((_p579._1.ctor === 'VConst') && (_p579._1._1.ctor === '_Tuple2')) && (_p579._1._1._1.ctor === 'MathVar')) {
										return _elm_lang$core$Native_Utils.eq(_p579._0._1, _p579._1._1._0) && (!A2(_elm_lang$core$Set$member, _p579._1._1._1._0, unfrozenLocIdSet));
									} else {
										break _v202_6;
									}
								case 'EHole':
									switch (_p579._0._1.ctor) {
										case 'HoleVal':
											return A2(_user$project$Provenance$valsSame, envVal, _p579._0._1._0);
										case 'HoleLoc':
											return A2(
												F2(
													function (x, y) {
														return _elm_lang$core$Native_Utils.eq(x, y);
													}),
												_elm_lang$core$Maybe$Just(_p579._0._1._0),
												_user$project$LangTools$expToMaybeLocId(
													_user$project$Lang$valExp(
														_user$project$Provenance$valToDistalSameVal(envVal))));
										default:
											break _v202_6;
									}
								default:
									break _v202_6;
							}
						} else {
							break _v202_6;
						}
					} while(false);
					return false;
				});
			var env = _user$project$Utils$removeShadowedKeys(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					maybeEnv));
			var envDistalSameVals = A2(
				_elm_lang$core$List$map,
				function (_p588) {
					var _p589 = _p588;
					return {
						ctor: '_Tuple2',
						_0: _p589._0,
						_1: _user$project$Provenance$valToDistalSameVal(_p589._1)
					};
				},
				env);
			var programWithSomeHolesResolvedFromEnv = function () {
				var _p590 = maybeEnv;
				if (_p590.ctor === 'Just') {
					return A3(
						_user$project$Utils$foldl,
						programWithHoles,
						F2(
							function (expWithHoles, program) {
								if (A2(
									_user$project$Lang$containsNode,
									F2(
										function (x, y) {
											return _elm_lang$core$Native_Utils.eq(x, y);
										})(expWithHoles),
									program)) {
									var _p593 = A2(
										_elm_lang$core$List$filter,
										function (_p591) {
											var _p592 = _p591;
											return A2(expCouldMatchEnvVal, expWithHoles, _p592._1);
										},
										envDistalSameVals);
									if (_p593.ctor === '[]') {
										return program;
									} else {
										var _p617 = _p593;
										var _p594 = _user$project$Lang$expEffectiveExp(expWithHoles).val.e__;
										_v211_2:
										do {
											if (_p594.ctor === 'EHole') {
												switch (_p594._1.ctor) {
													case 'HoleVal':
														var _p601 = _p594._1._0;
														var _p597 = A2(
															_elm_lang$core$List$filter,
															function (_p595) {
																var _p596 = _p595;
																return A2(_user$project$Provenance$valsSame, _p596._1, _p601);
															},
															_p617);
														if (_p597.ctor === '[]') {
															return program;
														} else {
															if ((_p597._0.ctor === '_Tuple2') && (_p597._1.ctor === '[]')) {
																return A3(
																	_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
																	_user$project$Lang$expEffectiveExp(expWithHoles).val.eid,
																	A2(
																		_user$project$Lang$setEId,
																		1 + _user$project$FastParser$maxId(program),
																		_user$project$Lang$eVar(_p597._0._0)),
																	program);
															} else {
																var _p598 = A2(
																	_elm_lang$core$Maybe$withDefault,
																	_p597._0,
																	A2(
																		_user$project$Utils$findFirst,
																		function (_p599) {
																			var _p600 = _p599;
																			return A2(
																				_user$project$Provenance$valEqFast,
																				_p601,
																				A3(_user$project$Utils$find, 'resolveValueHole: Ident in env not found in env. Shouldn\'t happen.', env, _p600._0));
																		},
																		_p597));
																var identToUse = _p598._0;
																return A3(
																	_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
																	_user$project$Lang$expEffectiveExp(expWithHoles).val.eid,
																	A2(
																		_user$project$Lang$setEId,
																		1 + _user$project$FastParser$maxId(program),
																		_user$project$Lang$eVar(identToUse)),
																	program);
															}
														}
													case 'HoleLoc':
														var _p604 = A2(
															_user$project$Utils$findFirst,
															function (_p602) {
																var _p603 = _p602;
																return A2(
																	F2(
																		function (x, y) {
																			return _elm_lang$core$Native_Utils.eq(x, y);
																		}),
																	_elm_lang$core$Maybe$Just(_p594._1._0),
																	_user$project$LangTools$expToMaybeLocId(
																		_user$project$Lang$valExp(
																			_user$project$Provenance$valToDistalSameVal(_p603._1))));
															},
															_p617);
														if (_p604.ctor === 'Just') {
															return A3(
																_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
																_user$project$Lang$expEffectiveExp(expWithHoles).val.eid,
																A2(
																	_user$project$Lang$setEId,
																	1 + _user$project$FastParser$maxId(program),
																	_user$project$Lang$eVar(_p604._0._0)),
																program);
														} else {
															return program;
														}
													default:
														break _v211_2;
												}
											} else {
												break _v211_2;
											}
										} while(false);
										var holeVals = A2(
											_elm_lang$core$List$filterMap,
											_user$project$LangTools$expToMaybeHoleVal,
											_user$project$Lang$flattenExpTree(expWithHoles));
										var envCandidates2 = function () {
											var _p605 = holeVals;
											if (_p605.ctor === '[]') {
												return _p617;
											} else {
												var sharedParents = A2(
													_elm_lang$core$List$map,
													_user$project$Provenance$valToDistalSameVal,
													_user$project$Provenance$sharedParents(holeVals));
												return A2(
													_elm_lang$core$List$filterMap,
													function (_p606) {
														var _p607 = _p606;
														return A2(
															_elm_lang$core$Maybe$map,
															function (sharedParentVal) {
																return {ctor: '_Tuple2', _0: _p607._0, _1: sharedParentVal};
															},
															A2(
																_user$project$Utils$findFirst,
																_user$project$Provenance$valEqFast(_p607._1),
																sharedParents));
													},
													_p617);
											}
										}();
										var locHoleLocIds = _user$project$Utils$dedup(
											A2(
												_elm_lang$core$List$filterMap,
												_user$project$LangTools$expToMaybeHoleLocId,
												_user$project$Lang$flattenExpTree(expWithHoles)));
										var envCandidates3 = function () {
											var _p608 = locHoleLocIds;
											if (_p608.ctor === '[]') {
												return envCandidates2;
											} else {
												return A2(
													_elm_lang$core$List$filter,
													function (_p609) {
														var _p610 = _p609;
														var locIdsInProvenance = A2(
															_elm_lang$core$List$filterMap,
															function (_p611) {
																return _user$project$LangTools$expToMaybeLocId(
																	_user$project$Lang$valExp(_p611));
															},
															_user$project$Provenance$flattenValBasedOnTree(_p610._1));
														return A2(_user$project$Utils$isSublistAsSet, locHoleLocIds, locIdsInProvenance);
													},
													envCandidates2);
											}
										}();
										var maybeMatchingEnvIdent = A2(
											_elm_lang$core$Maybe$map,
											function (_p612) {
												var _p613 = _p612;
												return _p613._0;
											},
											A2(
												_user$project$Utils$findFirst,
												function (_p614) {
													var _p615 = _p614;
													return A5(expMatchesEnvVal, program, envDistalSameVals, expWithHoles.val.eid, expWithHoles, _p615._1);
												},
												envCandidates3));
										var _p616 = maybeMatchingEnvIdent;
										if (_p616.ctor === 'Just') {
											return A3(
												_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
												expWithHoles.val.eid,
												A2(
													_user$project$Lang$setEId,
													1 + _user$project$FastParser$maxId(program),
													_user$project$Lang$eVar(_p616._0)),
												program);
										} else {
											return program;
										}
									}
								} else {
									return program;
								}
							}),
						expandedExpsWithHoles(programWithHoles));
				} else {
					return programWithHoles;
				}
			}();
			var programWithSomeHolesResolvedByLifting = A3(
				_user$project$Utils$foldl,
				programWithSomeHolesResolvedFromEnv,
				F2(
					function (expWithHoles, program) {
						return function (newProgram) {
							return _elm_lang$core$Native_Utils.eq(newProgram, program) ? newProgram : newProgram;
						}(
							function () {
								if (A2(
									_user$project$Lang$containsNode,
									F2(
										function (x, y) {
											return _elm_lang$core$Native_Utils.eq(x, y);
										})(expWithHoles),
									program)) {
									var _p618 = _user$project$Lang$expEffectiveExp(expWithHoles).val.e__;
									_v224_2:
									do {
										if (_p618.ctor === 'EHole') {
											switch (_p618._1.ctor) {
												case 'HoleVal':
													var _p619 = A2(_user$project$Provenance$valBasedOnTreeToProgramExp, program, _p618._1._0);
													if (_p619.ctor === 'Just') {
														var _p620 = A3(
															_user$project$CodeMotion$makeEIdVisibleToEIds,
															program,
															_p619._0.val.eid,
															_elm_lang$core$Set$singleton(
																_user$project$Lang$expEffectiveExp(expWithHoles).val.eid));
														if (_p620.ctor === 'Just') {
															var _p621 = _p620._0._2;
															return A3(
																_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
																_user$project$Lang$expEffectiveExp(expWithHoles).val.eid,
																A2(
																	_user$project$Lang$setEId,
																	1 + _user$project$FastParser$maxId(_p621),
																	_user$project$Lang$eVar(_p620._0._0)),
																_p621);
														} else {
															return program;
														}
													} else {
														return program;
													}
												case 'HoleLoc':
													var _p624 = _p618._1._0;
													var _p622 = A3(
														_user$project$CodeMotion$liftLocsSoVisibleTo,
														program,
														_elm_lang$core$Set$singleton(_p624),
														_elm_lang$core$Set$singleton(
															_user$project$Lang$expEffectiveExp(expWithHoles).val.eid));
													var programWithLocLifted = _p622._0;
													var locIdToNewName = _p622._1;
													var _p623 = A2(_elm_lang$core$Dict$get, _p624, locIdToNewName);
													if (_p623.ctor === 'Just') {
														return A3(
															_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
															_user$project$Lang$expEffectiveExp(expWithHoles).val.eid,
															A2(
																_user$project$Lang$setEId,
																1 + _user$project$FastParser$maxId(programWithLocLifted),
																_user$project$Lang$eVar(_p623._0)),
															programWithLocLifted);
													} else {
														return A3(
															_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
															_user$project$Lang$expEffectiveExp(expWithHoles).val.eid,
															A2(
																_user$project$Lang$setEId,
																1 + _user$project$FastParser$maxId(programWithLocLifted),
																_user$project$Lang$eVar(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'couldNotFindHoleLocId',
																		_elm_lang$core$Basics$toString(_p624)))),
															programWithLocLifted);
													}
												default:
													break _v224_2;
											}
										} else {
											break _v224_2;
										}
									} while(false);
									var holeVals = A2(
										_elm_lang$core$List$filterMap,
										_user$project$LangTools$expToMaybeHoleVal,
										_user$project$Lang$flattenExpTree(expWithHoles));
									var relevantSharedParents = A2(
										_user$project$Utils$dedupBy,
										function (_p625) {
											return function (_) {
												return _.eid;
											}(
												function (_) {
													return _.val;
												}(
													_user$project$Lang$valExp(_p625)));
										},
										A2(
											_elm_lang$core$List$filter,
											function (_p626) {
												return !_user$project$Lang$isVar(
													_user$project$Lang$expEffectiveExp(
														_user$project$Lang$valExp(_p626)));
											},
											A2(
												_elm_lang$core$List$filter,
												function (_p627) {
													return _user$project$FastParser$isProgramEId(
														function (_) {
															return _.eid;
														}(
															function (_) {
																return _.val;
															}(
																_user$project$Lang$valExp(_p627))));
												},
												_user$project$Provenance$sharedParents(holeVals))));
									var maybeParentExp = A2(
										_elm_lang$core$Maybe$map,
										_user$project$Lang$valExp,
										A2(
											_user$project$Utils$findFirst,
											function (parentVal) {
												return A5(
													expMatchesEnvVal,
													program,
													{ctor: '[]'},
													expWithHoles.val.eid,
													expWithHoles,
													parentVal) && _user$project$Utils$maybeToBool(
													A3(
														_user$project$CodeMotion$makeEIdVisibleToEIds,
														program,
														_user$project$Lang$valEId(parentVal),
														_elm_lang$core$Set$singleton(
															_user$project$Lang$expEffectiveExp(expWithHoles).val.eid)));
											},
											relevantSharedParents));
									var maybeExpToLift = function () {
										var _p628 = maybeParentExp;
										if (_p628.ctor === 'Just') {
											return _elm_lang$core$Maybe$Just(_p628._0);
										} else {
											var possibleExpsFromValHoles = function () {
												var _p629 = holeVals;
												if (_p629.ctor === '[]') {
													return A2(
														_elm_lang$core$List$filter,
														function (_p630) {
															return !_user$project$Lang$isVar(
																_user$project$Lang$expEffectiveExp(_p630));
														},
														expsForMatching(program));
												} else {
													return A2(_elm_lang$core$List$map, _user$project$Lang$valExp, relevantSharedParents);
												}
											}();
											return A2(
												_user$project$Utils$findFirst,
												function (existingExp) {
													return A4(expMatchesExpWithHoles, program, expWithHoles.val.eid, expWithHoles, existingExp);
												},
												possibleExpsFromValHoles);
										}
									}();
									var locHoleLocIds = _user$project$Utils$dedup(
										A2(
											_elm_lang$core$List$filterMap,
											_user$project$LangTools$expToMaybeHoleLocId,
											_user$project$Lang$flattenExpTree(expWithHoles)));
									var _p631 = maybeExpToLift;
									if (_p631.ctor === 'Just') {
										var _p632 = A3(
											_user$project$CodeMotion$makeEIdVisibleToEIds,
											program,
											_p631._0.val.eid,
											_elm_lang$core$Set$singleton(
												_user$project$Lang$expEffectiveExp(expWithHoles).val.eid));
										if (_p632.ctor === 'Just') {
											var _p633 = _p632._0._2;
											return A3(
												_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
												_user$project$Lang$expEffectiveExp(expWithHoles).val.eid,
												A2(
													_user$project$Lang$setEId,
													1 + _user$project$FastParser$maxId(_p633),
													_user$project$Lang$eVar(_p632._0._0)),
												_p633);
										} else {
											return program;
										}
									} else {
										return program;
									}
								} else {
									return program;
								}
							}());
					}),
				expandedExpsWithHoles(programWithSomeHolesResolvedFromEnv));
			var programWithSomeHolesResolvedByDestructuring = A3(
				_user$project$Utils$foldl,
				programWithSomeHolesResolvedByLifting,
				F2(
					function (valHoleExp, program) {
						var val = _user$project$LangTools$expToHoleVal(valHoleExp);
						var valParents = _user$project$Provenance$equivalentValParents(val);
						var maybeWithParentVisible = A2(
							_user$project$Utils$mapFirstSuccess,
							function (parentVal) {
								return A2(
									_elm_lang$core$Maybe$map,
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})(parentVal),
									A2(
										_elm_lang$core$Maybe$andThen,
										function (parentExp) {
											return A3(
												_user$project$CodeMotion$makeEIdVisibleToEIds,
												program,
												parentExp.val.eid,
												_elm_lang$core$Set$singleton(valHoleExp.val.eid));
										},
										A2(_user$project$Provenance$valBasedOnTreeToProgramExp, program, parentVal)));
							},
							valParents);
						var _p634 = maybeWithParentVisible;
						if (_p634.ctor === 'Just') {
							var _p637 = _p634._0._1._2;
							var namesToAvoid = A2(
								_user$project$LangTools$visibleIdentifiersAtEIds,
								_p637,
								_elm_lang$core$Set$singleton(valHoleExp.val.eid));
							var _p635 = A5(
								makeDestructuring,
								_p637,
								namesToAvoid,
								val,
								_p634._0._0,
								_user$project$Lang$eVar(_p634._0._1._0));
							if (_p635.ctor === 'Just') {
								var insertedLetEId = _user$project$FastParser$maxId(_p637) + 1;
								var expToWrap = A3(
									_user$project$LangTools$deepestCommonAncestorOrSelfWithNewline,
									_p637,
									_elm_lang$core$Basics$always(true),
									function (_p636) {
										return A2(
											F2(
												function (x, y) {
													return _elm_lang$core$Native_Utils.eq(x, y);
												}),
											valHoleExp.val.eid,
											function (_) {
												return _.eid;
											}(
												function (_) {
													return _.val;
												}(_p636)));
									});
								var programWithDestructuring = A3(
									_user$project$Lang$replaceExpNode,
									expToWrap.val.eid,
									A6(_user$project$LangTools$newLetFancyWhitespace, insertedLetEId, false, _p635._0._1, _p635._0._2, expToWrap, _p637),
									_p637);
								return A3(
									_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
									valHoleExp.val.eid,
									A2(
										_user$project$Lang$setEId,
										1 + _user$project$FastParser$maxId(programWithDestructuring),
										_user$project$Lang$eVar(_p635._0._0)),
									programWithDestructuring);
							} else {
								return program;
							}
						} else {
							return program;
						}
					}),
				A2(
					_elm_lang$core$List$filter,
					_user$project$Lang$isValHole,
					_user$project$Lang$flattenExpTree(programWithSomeHolesResolvedByLifting)));
			var isNumericValHole = function (_p638) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					_elm_lang$core$Maybe$Just(true),
					A2(
						_elm_lang$core$Maybe$map,
						_user$project$Lang$valIsNum,
						_user$project$LangTools$expToMaybeHoleVal(_p638)));
			};
			if (A2(_user$project$Lang$containsNode, isNumericValHole, programWithSomeHolesResolvedByDestructuring)) {
				var locIdToFrozenNum = A2(
					_elm_lang$core$Dict$union,
					_user$project$FastParser$preludeSubst,
					_elm_lang$core$Dict$fromList(
						A2(
							_elm_lang$core$List$map,
							function (_p639) {
								var _p640 = _p639;
								return {ctor: '_Tuple2', _0: _p640._0._0, _1: _p640._1};
							},
							A2(
								_elm_lang$core$List$filter,
								function (_p641) {
									var _p642 = _p641;
									return A2(_user$project$Sync$locIsFrozen, syncOptions, _p642._0);
								},
								_user$project$LangTools$allLocsAndNumbers(programWithSomeHolesResolvedByDestructuring)))));
				var valHoles = A2(
					_elm_lang$core$List$filter,
					isNumericValHole,
					_user$project$Lang$flattenExpTree(programWithSomeHolesResolvedByDestructuring));
				var holeVals = A2(_elm_lang$core$List$map, _user$project$LangTools$expToHoleVal, valHoles);
				var holeMathExps = A2(
					_elm_lang$core$List$map,
					function (_p643) {
						return A2(
							_user$project$Solver$simplify,
							solutionsCache,
							A2(
								_user$project$MathExp$applySubst,
								locIdToFrozenNum,
								_user$project$Lang$valToTrace(_p643)));
					},
					holeVals);
				var holeEIds = A2(
					_elm_lang$core$List$map,
					function (_p644) {
						return function (_) {
							return _.eid;
						}(
							function (_) {
								return _.val;
							}(_p644));
					},
					valHoles);
				var programWithNumericValHolesReplacedByInlinedTraces = A3(
					_user$project$Utils$foldl,
					programWithSomeHolesResolvedByDestructuring,
					F2(
						function (_p645, programSoFar) {
							var _p646 = _p645;
							var inlinedTraceForValHole = A3(_user$project$MathExp$mathExpToExp, _user$project$Lang$eConstFrozen, _user$project$Lang$eHoleLoc, _p646._1);
							return A3(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, _p646._0, inlinedTraceForValHole, programSoFar);
						}),
					A2(_user$project$Utils$zip, holeEIds, holeMathExps));
				var _v237 = allowReplacementOfHoleParentExps,
					_v238 = solutionsCache,
					_v239 = syncOptions,
					_v240 = maybeEnv,
					_v241 = programWithNumericValHolesReplacedByInlinedTraces;
				allowReplacementOfHoleParentExps = _v237;
				solutionsCache = _v238;
				syncOptions = _v239;
				maybeEnv = _v240;
				programWithHolesUnfresh = _v241;
				continue resolveValueAndLocHoles;
			} else {
				return {
					ctor: '::',
					_0: programWithSomeHolesResolvedByDestructuring,
					_1: {ctor: '[]'}
				};
			}
		}
	});
var _user$project$CodeMotion$moveDefinitionsPat = F4(
	function (syntax, sourcePathedPatIds, targetPathedPatId, program) {
		var makeNewProgram = F2(
			function (pluckedPatAndBoundExpAndIsRecs, programWithoutPluckedUniqueNames) {
				return A3(_user$project$CodeMotion$insertPluckedIntoPat, targetPathedPatId, pluckedPatAndBoundExpAndIsRecs, programWithoutPluckedUniqueNames);
			});
		return A4(_user$project$CodeMotion$moveDefinitions_, syntax, makeNewProgram, sourcePathedPatIds, program);
	});
var _user$project$CodeMotion$duplicateDefinitionsBeforeEId = F4(
	function (syntax, sourcePathedPatIds, targetEId, originalProgram) {
		var _p647 = A2(_user$project$CodeMotion$pluckAll, sourcePathedPatIds, originalProgram);
		var pluckedPatAndBoundExpAndIsRecs = _p647._0;
		var _p648 = A2(
			_elm_lang$core$Tuple$mapFirst,
			_user$project$FastParser$freshen,
			A4(_user$project$CodeMotion$insertNewLetFromPlucked, targetEId, pluckedPatAndBoundExpAndIsRecs, originalProgram, originalProgram));
		var newProgram = _p648._0;
		var insertedLetEId = _p648._1;
		return A5(_user$project$CodeMotion$makeDuplicateResults_, syntax, insertedLetEId, pluckedPatAndBoundExpAndIsRecs, newProgram, originalProgram);
	});
var _user$project$CodeMotion$duplicateDefinitionsPat = F4(
	function (syntax, sourcePathedPatIds, targetPathedPatId, originalProgram) {
		var _p649 = A2(_user$project$CodeMotion$pluckAll, sourcePathedPatIds, originalProgram);
		var pluckedPatAndBoundExpAndIsRecs = _p649._0;
		var _p650 = A2(
			_elm_lang$core$Tuple$mapFirst,
			_user$project$FastParser$freshen,
			A3(_user$project$CodeMotion$insertPluckedIntoPat, targetPathedPatId, pluckedPatAndBoundExpAndIsRecs, originalProgram));
		var newProgram = _p650._0;
		var targetLetEId = _p650._1;
		return A5(_user$project$CodeMotion$makeDuplicateResults_, syntax, targetLetEId, pluckedPatAndBoundExpAndIsRecs, newProgram, originalProgram);
	});
var _user$project$CodeMotion$inlineDefinitions = F3(
	function (syntax, selectedPathedPatIds, originalProgram) {
		var _p651 = _user$project$LangTools$assignUniqueNames(originalProgram);
		var programUniqueNames = _p651._0;
		var uniqueNameToOldName = _p651._1;
		var namedPathedPatIdsToPluck = A2(
			_elm_lang$core$List$concatMap,
			function (_p652) {
				var _p653 = _p652;
				var _p659 = _p653._0;
				var paths = A2(_elm_lang$core$List$map, _user$project$Lang$pathedPatIdToPath, _p653._1);
				var _p654 = A2(
					_user$project$LangTools$findPatByPathedPatternId,
					{
						ctor: '_Tuple2',
						_0: _p659,
						_1: {ctor: '[]'}
					},
					programUniqueNames);
				if (_p654.ctor === 'Nothing') {
					return {ctor: '[]'};
				} else {
					return A2(
						_elm_lang$core$List$map,
						function (_p655) {
							var _p656 = _p655;
							return {ctor: '_Tuple2', _0: _p659, _1: _p656._1};
						},
						A2(
							_elm_lang$core$List$filter,
							function (_p657) {
								var _p658 = _p657;
								return A2(
									_elm_lang$core$List$any,
									_user$project$Utils$isPrefixOf(_p658._1),
									paths);
							},
							_user$project$LangTools$identPathsInPat(_p654._0)));
				}
			},
			_elm_lang$core$Dict$toList(
				A2(_user$project$Utils$groupBy, _user$project$Lang$pathedPatIdToScopeId, selectedPathedPatIds)));
		var _p660 = A2(_user$project$CodeMotion$pluckAll, namedPathedPatIdsToPluck, programUniqueNames);
		var pluckedPatAndBoundExpAndIsRecs = _p660._0;
		var programWithoutPlucked = _p660._1;
		var _p661 = _user$project$Utils$unzip3(pluckedPatAndBoundExpAndIsRecs);
		var pluckedPats = _p661._0;
		var pluckedBoundExps = _p661._1;
		var isRecs = _p661._2;
		if (_elm_lang$core$Native_Utils.eq(
			pluckedPatAndBoundExpAndIsRecs,
			{ctor: '[]'})) {
			return A2(
				_elm_lang$core$Debug$log,
				'could not pluck anything',
				{ctor: '[]'});
		} else {
			if (!_elm_lang$core$Native_Utils.eq(
				_user$project$Utils$maybeConsensus(isRecs),
				_elm_lang$core$Maybe$Just(false))) {
				return A2(
					_elm_lang$core$Debug$log,
					'Can\'t inline recursive definitions',
					{ctor: '[]'});
			} else {
				var pluckedPathedPatIdentifiersUnique = _user$project$Utils$unionAll(
					A2(_elm_lang$core$List$map, _user$project$LangTools$identifiersSetInPat, pluckedPats));
				var pluckedBoundExpFreeIdentifiersUnique = _user$project$Utils$unionAll(
					A2(_elm_lang$core$List$map, _user$project$LangTools$freeIdentifiers, pluckedBoundExps));
				var namesUniqueExplicitlyTouched = A2(_elm_lang$core$Set$union, pluckedPathedPatIdentifiersUnique, pluckedBoundExpFreeIdentifiersUnique);
				var uniqueIdentToExp = _elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$map,
						function (_p662) {
							var _p663 = _p662;
							var _p667 = _p663._0;
							var _p666 = _p663._1;
							var _p664 = _user$project$LangTools$patToMaybeIdent(_p667);
							if (_p664.ctor === 'Just') {
								return {ctor: '_Tuple2', _0: _p664._0, _1: _p666};
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'CodeMotion',
									{
										start: {line: 1633, column: 13},
										end: {line: 1635, column: 144}
									},
									_p664)(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'CodeMotion.inlineDefinitions: should only have PVar or PAs here, got: ',
										_elm_lang$core$Basics$toString(
											{ctor: '_Tuple2', _0: _p667, _1: _p666})));
							}
						},
						pluckedPatAndBoundExpAndIsRecs));
				var _p668 = A3(
					_user$project$Lang$mapFoldExp,
					F2(
						function (exp, varEIdsRemoved) {
							var _p669 = A2(
								_elm_lang$core$Maybe$andThen,
								function (ident) {
									return A2(_elm_lang$core$Dict$get, ident, uniqueIdentToExp);
								},
								_user$project$LangTools$expToMaybeIdent(exp));
							if (_p669.ctor === 'Just') {
								return {
									ctor: '_Tuple2',
									_0: A2(_user$project$Lang$copyPrecedingWhitespace, exp, _p669._0),
									_1: {ctor: '::', _0: exp.val.eid, _1: varEIdsRemoved}
								};
							} else {
								return {ctor: '_Tuple2', _0: exp, _1: varEIdsRemoved};
							}
						}),
					{ctor: '[]'},
					_user$project$LangSimplify$simplifyAssignments(programWithoutPlucked));
				var newProgramUniqueNames = _p668._0;
				var varEIdsRemoved = _p668._1;
				var inlinedThingsStr = _user$project$Utils$toSentence(
					A2(
						_elm_lang$core$List$map,
						function (_p670) {
							return _user$project$Utils$squish(
								A2(
									_user$project$Syntax$patternUnparser,
									syntax,
									A2(_user$project$LangTools$renameIdentifiersInPat, uniqueNameToOldName, _p670)));
						},
						pluckedPats));
				return A9(
					_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
					A2(_elm_lang$core$Basics_ops['++'], 'Inline ', inlinedThingsStr),
					uniqueNameToOldName,
					_elm_lang$core$Maybe$Nothing,
					{ctor: '_Tuple2', _0: 'touched', _1: 'untouched'},
					namesUniqueExplicitlyTouched,
					varEIdsRemoved,
					_elm_lang$core$Dict$empty,
					programUniqueNames,
					newProgramUniqueNames);
			}
		}
	});
var _user$project$CodeMotion$renamePat = F3(
	function (_p671, newName, program) {
		var _p672 = _p671;
		var _p681 = _p672._0;
		var _p680 = _p672._1;
		var _p673 = A2(
			_user$project$LangTools$findScopeExpAndPatByPathedPatternId,
			{ctor: '_Tuple2', _0: _p681, _1: _p680},
			program);
		if (_p673.ctor === 'Just') {
			var _p679 = _p673._0._0;
			var _p678 = _p673._0._1;
			var _p674 = _user$project$LangTools$patToMaybeIdent(_p678);
			if (_p674.ctor === 'Just') {
				var _p677 = _p674._0;
				var scopeAreas = A2(_user$project$LangTools$findScopeAreas, _p681, _p679);
				var oldUseEIds = A2(
					_elm_lang$core$List$map,
					function (_p675) {
						return function (_) {
							return _.eid;
						}(
							function (_) {
								return _.val;
							}(_p675));
					},
					A2(
						_elm_lang$core$List$concatMap,
						_user$project$LangTools$identifierUses(_p677),
						scopeAreas));
				var newScopeAreas = A2(
					_elm_lang$core$List$map,
					A2(_user$project$LangTools$renameVarUntilBound, _p677, newName),
					scopeAreas);
				var newUseEIds = A2(
					_elm_lang$core$List$map,
					function (_p676) {
						return function (_) {
							return _.eid;
						}(
							function (_) {
								return _.val;
							}(_p676));
					},
					A2(
						_elm_lang$core$List$concatMap,
						_user$project$LangTools$identifierUses(newName),
						newScopeAreas));
				var isSafe = _elm_lang$core$Native_Utils.eq(oldUseEIds, newUseEIds) && (!A2(
					_elm_lang$core$List$member,
					newName,
					_user$project$LangTools$identifiersListInPat(_p678)));
				var newScopeExp = function () {
					var scopeAreasReplaced = A3(
						_elm_lang$core$List$foldl,
						F2(
							function (newScopeArea, scopeExp) {
								return A3(_user$project$Lang$replaceExpNode, newScopeArea.val.eid, newScopeArea, scopeExp);
							}),
						_p679,
						newScopeAreas);
					return A3(
						_user$project$LangTools$setPatName,
						{ctor: '_Tuple2', _0: _p681, _1: _p680},
						newName,
						scopeAreasReplaced);
				}();
				var newProgram = A3(_user$project$Lang$replaceExpNode, newScopeExp.val.eid, newScopeExp, program);
				var result = function () {
					var descriptionEnd = _elm_lang$core$String$isEmpty(newName) ? '...' : A2(
						_elm_lang$core$Basics_ops['++'],
						' \'',
						A2(_elm_lang$core$Basics_ops['++'], newName, '\''));
					var descriptionStart = A2(
						_elm_lang$core$Basics_ops['++'],
						'Rename \'',
						A2(_elm_lang$core$Basics_ops['++'], _p677, '\' to'));
					var description = A2(_elm_lang$core$Basics_ops['++'], descriptionStart, descriptionEnd);
					return A2(
						_user$project$InterfaceModel$setResultSafe,
						isSafe,
						A2(_user$project$InterfaceModel$synthesisResult, description, newProgram));
				}();
				return {
					ctor: '::',
					_0: result,
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$renameVar = F3(
	function (varEId, newName, program) {
		var varExp = A2(_user$project$LangTools$justFindExpByEId, program, varEId);
		var oldName = _user$project$LangTools$expToIdent(varExp);
		var _p682 = A2(_user$project$LangTools$bindingPathedPatternIdFor, varExp, program);
		if (_p682.ctor === 'Just') {
			return A3(_user$project$CodeMotion$renamePat, _p682._0, newName, program);
		} else {
			var _p683 = A2(
				_elm_lang$core$Debug$log,
				A2(_elm_lang$core$Basics_ops['++'], oldName, ' is free at this location in the program'),
				{ctor: '_Tuple0'});
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$renamePatByPId = F3(
	function (pid, newName, program) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				function (ppid) {
					return A3(_user$project$CodeMotion$renamePat, ppid, newName, program);
				},
				A2(_user$project$Lang$pidToPathedPatternId, program, pid)));
	});
var _user$project$CodeMotion$swapUsages = F3(
	function (_p685, _p684, originalProgram) {
		var _p686 = _p685;
		var _p687 = _p684;
		var _p688 = {
			ctor: '_Tuple2',
			_0: A2(
				_user$project$LangTools$findScopeExpAndPatByPathedPatternId,
				{ctor: '_Tuple2', _0: _p686._0, _1: _p686._1},
				originalProgram),
			_1: A2(
				_user$project$LangTools$findScopeExpAndPatByPathedPatternId,
				{ctor: '_Tuple2', _0: _p687._0, _1: _p687._1},
				originalProgram)
		};
		if (((((_p688.ctor === '_Tuple2') && (_p688._0.ctor === 'Just')) && (_p688._0._0.ctor === '_Tuple2')) && (_p688._1.ctor === 'Just')) && (_p688._1._0.ctor === '_Tuple2')) {
			var _p696 = _p688._1._0._1;
			var _p695 = _p688._0._0._1;
			var _p689 = {
				ctor: '_Tuple2',
				_0: _user$project$LangTools$patToMaybeIdent(_p695),
				_1: _user$project$LangTools$patToMaybeIdent(_p696)
			};
			if (((_p689.ctor === '_Tuple2') && (_p689._0.ctor === 'Just')) && (_p689._1.ctor === 'Just')) {
				var _p694 = _p689._1._0;
				var _p693 = _p689._0._0;
				var eidToBindingPId = _user$project$LangTools$allVarEIdsToBindingPId(originalProgram);
				var newProgram = A2(
					_user$project$Lang$mapExp,
					function (exp) {
						var _p690 = {
							ctor: '_Tuple2',
							_0: A2(_elm_lang$core$Dict$get, exp.val.eid, eidToBindingPId),
							_1: exp.val.e__
						};
						if ((((_p690.ctor === '_Tuple2') && (_p690._0.ctor === 'Just')) && (_p690._0._0.ctor === 'Just')) && (_p690._1.ctor === 'EVar')) {
							var _p692 = _p690._1._0;
							var _p691 = _p690._0._0._0;
							return _elm_lang$core$Native_Utils.eq(_p691, _p695.val.pid) ? A2(
								_user$project$Lang$replaceE__,
								exp,
								A2(_user$project$Lang$EVar, _p692, _p694)) : (_elm_lang$core$Native_Utils.eq(_p691, _p696.val.pid) ? A2(
								_user$project$Lang$replaceE__,
								exp,
								A2(_user$project$Lang$EVar, _p692, _p693)) : exp);
						} else {
							return exp;
						}
					},
					originalProgram);
				var isSafe = function () {
					var expectedVarEIdsToBindingPId = A2(
						_elm_lang$core$Dict$map,
						F2(
							function (eid, maybePId) {
								return _elm_lang$core$Native_Utils.eq(
									maybePId,
									_elm_lang$core$Maybe$Just(_p695.val.pid)) ? _elm_lang$core$Maybe$Just(_p696.val.pid) : (_elm_lang$core$Native_Utils.eq(
									maybePId,
									_elm_lang$core$Maybe$Just(_p696.val.pid)) ? _elm_lang$core$Maybe$Just(_p695.val.pid) : maybePId);
							}),
						eidToBindingPId);
					return _elm_lang$core$Native_Utils.eq(
						_user$project$LangTools$allVarEIdsToBindingPId(newProgram),
						expectedVarEIdsToBindingPId);
				}();
				var result = A2(
					_user$project$InterfaceModel$setResultSafe,
					isSafe,
					A2(
						_user$project$InterfaceModel$synthesisResult,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Swap usages of ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p693,
								A2(_elm_lang$core$Basics_ops['++'], ' and ', _p694))),
						newProgram));
				return {
					ctor: '::',
					_0: result,
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$CodeMotion$composeTransformations = F3(
	function (finalCaption, transformations, originalProgram) {
		return A2(
			_elm_lang$core$List$map,
			_user$project$InterfaceModel$setResultDescription(finalCaption),
			A3(
				_elm_lang$core$List$foldl,
				F2(
					function (transformation, results) {
						return A2(
							_elm_lang$core$List$concatMap,
							function (_p697) {
								var _p698 = _p697;
								var _p699 = _p698._0;
								return A2(
									_elm_lang$core$List$map,
									_user$project$InterfaceModel$mapResultSafe(
										F2(
											function (x, y) {
												return x && y;
											})(_p699.isSafe)),
									transformation(
										_user$project$FastParser$freshen(_p699.exp)));
							},
							results);
					}),
				{
					ctor: '::',
					_0: A2(_user$project$InterfaceModel$synthesisResult, 'Original', originalProgram),
					_1: {ctor: '[]'}
				},
				transformations));
	});

var _user$project$StaticAnalysis$grossDependencies_ = F2(
	function (identToDepEId, program) {
		var addDependency = F3(
			function (eid, dependsOnEId, programDependencies) {
				var priorDeps = A3(_user$project$Utils$getWithDefault, eid, _elm_lang$core$Set$empty, programDependencies);
				return A3(
					_elm_lang$core$Dict$insert,
					eid,
					A2(_elm_lang$core$Set$insert, dependsOnEId, priorDeps),
					programDependencies);
			});
		var childrenValueExpEIds = function (exp) {
			return A2(
				_elm_lang$core$List$map,
				function (_p0) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(
							_user$project$Lang$expEffectiveExp(_p0)));
				},
				_user$project$Lang$childExps(exp));
		};
		var handleELet = F2(
			function (letExp, identToDepEId) {
				var _p1 = _user$project$LangTools$expToLetPatAndBoundExp(letExp);
				var pat = _p1._0;
				var boundExp = _p1._1;
				var newBindings = function () {
					var _p2 = A2(_user$project$LangTools$tryMatchExp, pat, boundExp);
					if (_p2.ctor === 'Match') {
						return A2(
							_elm_lang$core$List$map,
							function (_p3) {
								var _p4 = _p3;
								return {ctor: '_Tuple2', _0: _p4._0, _1: _p4._1.val.eid};
							},
							_p2._0);
					} else {
						return A2(
							_elm_lang$core$List$map,
							function (ident) {
								return {ctor: '_Tuple2', _0: ident, _1: boundExp.val.eid};
							},
							_user$project$LangTools$identifiersListInPat(pat));
					}
				}();
				return A2(_elm_lang$core$Basics_ops['++'], newBindings, identToDepEId);
			});
		var handleEFun = F2(
			function (funcExp, identToDepEId) {
				var newBindings = A2(
					_elm_lang$core$List$map,
					function (ident) {
						return {ctor: '_Tuple2', _0: ident, _1: -1};
					},
					A2(
						_elm_lang$core$List$concatMap,
						_user$project$LangTools$identifiersListInPat,
						_user$project$LangTools$expToFuncPats(funcExp)));
				return A2(_elm_lang$core$Basics_ops['++'], newBindings, identToDepEId);
			});
		var handleCaseBranch = F4(
			function (caseExp, branch, branchI, identToDepEId) {
				var scrutinee = _user$project$LangTools$expToCaseScrutinee(caseExp);
				var pat = _user$project$Lang$branchPat(branch);
				var newBindings = function () {
					var _p5 = A2(_user$project$LangTools$tryMatchExp, pat, scrutinee);
					if (_p5.ctor === 'Match') {
						return A2(
							_elm_lang$core$List$map,
							function (_p6) {
								var _p7 = _p6;
								return {ctor: '_Tuple2', _0: _p7._0, _1: _p7._1.val.eid};
							},
							_p5._0);
					} else {
						return A2(
							_elm_lang$core$List$map,
							function (ident) {
								return {ctor: '_Tuple2', _0: ident, _1: scrutinee.val.eid};
							},
							_user$project$LangTools$identifiersListInPat(pat));
					}
				}();
				return A2(_elm_lang$core$Basics_ops['++'], newBindings, identToDepEId);
			});
		var addThisExpDeps = F3(
			function (exp, programDependencies, identToDepEId) {
				var newDepEIds = function () {
					var _p8 = exp.val.e__;
					switch (_p8.ctor) {
						case 'EConst':
							return {ctor: '[]'};
						case 'EBase':
							return {ctor: '[]'};
						case 'EVar':
							var _p9 = A2(_user$project$Utils$maybeFind, _p8._1, identToDepEId);
							if (_p9.ctor === 'Just') {
								if (_p9._0 === -1) {
									return {ctor: '[]'};
								} else {
									return {
										ctor: '::',
										_0: _p9._0,
										_1: {ctor: '[]'}
									};
								}
							} else {
								return {ctor: '[]'};
							}
						case 'EFun':
							return {
								ctor: '::',
								_0: _user$project$Lang$expEffectiveExp(_p8._2).val.eid,
								_1: {ctor: '[]'}
							};
						case 'EOp':
							return childrenValueExpEIds(exp);
						case 'EList':
							return childrenValueExpEIds(exp);
						case 'EIf':
							return childrenValueExpEIds(exp);
						case 'ECase':
							return childrenValueExpEIds(exp);
						case 'ETypeCase':
							return childrenValueExpEIds(exp);
						case 'EApp':
							return childrenValueExpEIds(exp);
						case 'ELet':
							return {
								ctor: '::',
								_0: _user$project$Lang$expEffectiveExp(_p8._7).val.eid,
								_1: {ctor: '[]'}
							};
						case 'EComment':
							return {
								ctor: '::',
								_0: _user$project$Lang$expEffectiveExp(_p8._2).val.eid,
								_1: {ctor: '[]'}
							};
						case 'EOption':
							return {
								ctor: '::',
								_0: _user$project$Lang$expEffectiveExp(_p8._4).val.eid,
								_1: {ctor: '[]'}
							};
						case 'ETyp':
							return {
								ctor: '::',
								_0: _user$project$Lang$expEffectiveExp(_p8._3).val.eid,
								_1: {ctor: '[]'}
							};
						case 'EColonType':
							return {
								ctor: '::',
								_0: _user$project$Lang$expEffectiveExp(_p8._1).val.eid,
								_1: {ctor: '[]'}
							};
						case 'ETypeAlias':
							return {
								ctor: '::',
								_0: _user$project$Lang$expEffectiveExp(_p8._3).val.eid,
								_1: {ctor: '[]'}
							};
						case 'EParens':
							return {
								ctor: '::',
								_0: _user$project$Lang$expEffectiveExp(_p8._1).val.eid,
								_1: {ctor: '[]'}
							};
						default:
							return childrenValueExpEIds(exp);
					}
				}();
				return A3(
					_elm_lang$core$List$foldl,
					addDependency(exp.val.eid),
					programDependencies,
					newDepEIds);
			});
		return A7(_user$project$Lang$foldExpTopDownWithScope, addThisExpDeps, handleELet, handleEFun, handleCaseBranch, _elm_lang$core$Dict$empty, identToDepEId, program);
	});
var _user$project$StaticAnalysis$grossDependencies = function (exp) {
	return A2(
		_user$project$StaticAnalysis$grossDependencies_,
		{ctor: '[]'},
		exp);
};
var _user$project$StaticAnalysis$eidDependencies = F2(
	function (dependencies, eid) {
		var dependenciesBFS = F2(
			function (visited, toVisit) {
				dependenciesBFS:
				while (true) {
					var _p10 = toVisit;
					if (_p10.ctor === '[]') {
						return visited;
					} else {
						var _p12 = _p10._1;
						var _p11 = _p10._0;
						if (A2(_elm_lang$core$Set$member, _p11, visited)) {
							var _v7 = visited,
								_v8 = _p12;
							visited = _v7;
							toVisit = _v8;
							continue dependenciesBFS;
						} else {
							var newVisited = A2(_elm_lang$core$Set$insert, _p11, visited);
							var newToVisit = A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Set$toList(
									A3(_user$project$Utils$getWithDefault, _p11, _elm_lang$core$Set$empty, dependencies)),
								_p12);
							var _v9 = newVisited,
								_v10 = newToVisit;
							visited = _v9;
							toVisit = _v10;
							continue dependenciesBFS;
						}
					}
				}
			});
		return A2(
			dependenciesBFS,
			_elm_lang$core$Set$empty,
			_elm_lang$core$Set$toList(
				A3(_user$project$Utils$getWithDefault, eid, _elm_lang$core$Set$empty, dependencies)));
	});
var _user$project$StaticAnalysis$isDependentOn = F3(
	function (dependencies, focusEId, dependentEId) {
		return A2(
			_elm_lang$core$Set$member,
			dependentEId,
			A2(_user$project$StaticAnalysis$eidDependencies, dependencies, focusEId));
	});

var _user$project$DrawAddShape$maybeShapeCountAndListItemCountInContextOutput = F2(
	function (model, program) {
		var _p0 = A2(_user$project$InterfaceModel$runAndResolveAtContext, model, program);
		if (_p0.ctor === 'Ok') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$Dict$size(_p0._0._2._1),
					_1: A2(
						_elm_lang$core$Maybe$withDefault,
						1,
						A2(
							_elm_lang$core$Maybe$map,
							_elm_lang$core$List$length,
							_user$project$Lang$vListToMaybeValsExcludingPoint(_p0._0._0)))
				});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$DrawAddShape$addShape = function (model) {
	return function (targetListFilter) {
		return function (maybeNewShapeName) {
			return function (newShapeExp) {
				return function (maybeNumberOfNewShapesExpected) {
					return function (maybeNumberOfNewShapesExpectedIfListInlined) {
						return function (maybeNumberOfNewListItemsExpected) {
							return function (maybeNumberOfNewListItemsExpectedIfListInlined) {
								return function (areCrashingProgramsOkay) {
									return function (originalProgram) {
										var grossDependencies = _user$project$StaticAnalysis$grossDependencies(originalProgram);
										var _p1 = A2(
											_elm_lang$core$Maybe$withDefault,
											{ctor: '_Tuple2', _0: 0, _1: 0},
											A2(_user$project$DrawAddShape$maybeShapeCountAndListItemCountInContextOutput, model, originalProgram));
										var oldShapeCount = _p1._0;
										var oldListItemsCount = _p1._1;
										var _p2 = A2(
											_elm_lang$core$Debug$log,
											'(oldShapeCount, oldListItemsCount)',
											{ctor: '_Tuple2', _0: oldShapeCount, _1: oldListItemsCount});
										var incomingExpFreshened = _user$project$FastParser$freshen(newShapeExp);
										var idToTypeAndContextThunk = _user$project$AlgorithmJish$inferTypes(originalProgram);
										var contextExp = A2(_user$project$FocusedEditingContext$drawingContextExp, model.editingContext, originalProgram);
										var inferredReturnTypeAndContextThunk = A2(
											_elm_lang$core$Dict$get,
											_user$project$Lang$expEffectiveExp(contextExp).val.eid,
											idToTypeAndContextThunk);
										var inferredReturnType = A2(_elm_lang$core$Maybe$map, _elm_lang$core$Tuple$first, inferredReturnTypeAndContextThunk);
										var typeContextAtReturnType = A2(
											_elm_lang$core$Maybe$withDefault,
											_user$project$AlgorithmJish$preludeTypeContext,
											A2(
												_elm_lang$core$Maybe$map,
												function (_p3) {
													return function (thunk) {
														return thunk(
															{ctor: '_Tuple0'});
													}(
														_elm_lang$core$Tuple$second(_p3));
												},
												inferredReturnTypeAndContextThunk));
										var incomingType = A2(_user$project$AlgorithmJish$inferOne, typeContextAtReturnType, incomingExpFreshened);
										var _p4 = _user$project$Utils$log(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'incomingType: ',
												A2(_user$project$Syntax$typeUnparser, _user$project$Syntax$Elm, incomingType)));
										var eidsThatWouldMakeARecursiveFunction = function () {
											var identBoundExps = _user$project$LangTools$allSimplyResolvableLetBindings(contextExp);
											return _elm_lang$core$Set$fromList(
												A2(
													_elm_lang$core$List$concatMap,
													_user$project$Lang$allEIds,
													A2(
														_elm_lang$core$List$filterMap,
														A2(_elm_lang$core$Basics$flip, _user$project$Utils$maybeFind, identBoundExps),
														_elm_lang$core$Set$toList(
															_user$project$LangTools$freeIdentifiers(incomingExpFreshened)))));
										}();
										var isPossibleTargetList = function (exp) {
											return _user$project$Lang$isList(exp) && (targetListFilter(exp) && ((!A2(_elm_lang$core$Set$member, exp.val.eid, eidsThatWouldMakeARecursiveFunction)) && function () {
												var _p5 = A2(_elm_lang$core$Dict$get, exp.val.eid, idToTypeAndContextThunk);
												if (_p5.ctor === 'Just') {
													var _p7 = _p5._0._0;
													var _p6 = _user$project$Utils$log(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'listExpType: ',
															A2(_user$project$Syntax$typeUnparser, _user$project$Syntax$Elm, _p7)));
													return A2(
														_elm_lang$core$List$all,
														_user$project$AlgorithmJish$doesUnify(
															_user$project$Types$tList(incomingType)),
														_user$project$Lang$childTypes(_p7)) || (A2(
														_elm_lang$core$List$all,
														_user$project$AlgorithmJish$doesUnify(incomingType),
														_user$project$Lang$childTypes(_p7)) || A2(_user$project$AlgorithmJish$doesUnify, incomingType, _p7));
												} else {
													return _elm_lang$core$Native_Utils.eq(
														_user$project$Lang$childExps(exp),
														{ctor: '[]'});
												}
											}()));
										};
										var possibleTargetLists = A2(
											_elm_lang$core$List$filter,
											isPossibleTargetList,
											_user$project$Lang$flattenExpTree(contextExp));
										var maybeProgramWithListifiedReturnExpAndLists = function () {
											var tryToListifyReturnValue = function () {
												var _p8 = inferredReturnType;
												if (_p8.ctor === 'Just') {
													return !_user$project$Types$isListNotTuple(_p8._0);
												} else {
													return false;
												}
											}();
											if (tryToListifyReturnValue) {
												var terminalExpLevels = _user$project$LangTools$terminalExpLevels(contextExp);
												var programWithListifiedReturnExp = _user$project$FastParser$freshen(
													A3(
														_user$project$Utils$foldr,
														originalProgram,
														F2(
															function (terminalExp, program) {
																var eidToWrap = _user$project$LangTools$lastSameLevelExp(terminalExp).val.eid;
																return A3(
																	_user$project$Lang$mapExpNode,
																	eidToWrap,
																	function (expToWrap) {
																		return A2(
																			_user$project$Lang$copyPrecedingWhitespace,
																			expToWrap,
																			_user$project$Lang$eTuple(
																				{
																					ctor: '::',
																					_0: _user$project$Lang$removePrecedingWhitespace(expToWrap),
																					_1: {ctor: '[]'}
																				}));
																	},
																	program);
															}),
														terminalExpLevels));
												var possibleTargetLists = A2(
													_elm_lang$core$List$filter,
													_user$project$Lang$isList,
													A2(
														_elm_lang$core$List$map,
														_user$project$LangTools$lastSameLevelExp,
														_user$project$LangTools$terminalExpLevels(
															A2(_user$project$LangTools$justFindExpByEId, programWithListifiedReturnExp, contextExp.val.eid))));
												return _elm_lang$core$Maybe$Just(
													{ctor: '_Tuple2', _0: programWithListifiedReturnExp, _1: possibleTargetLists});
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}();
										var _p9 = function () {
											var envAtEndOfContext = function () {
												var endOfContextEnvEId = _user$project$Lang$expEffectiveExp(contextExp).val.eid;
												return A2(
													_elm_lang$core$Maybe$withDefault,
													_user$project$Eval$initEnv,
													A2(
														_elm_lang$core$Maybe$withDefault,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Result$toMaybe(
															A2(
																_elm_lang$core$Result$map,
																function (_p10) {
																	var _p11 = _p10;
																	return _p11._1;
																},
																A6(
																	_user$project$Eval$doEvalEarlyAbort,
																	false,
																	_elm_lang$core$Maybe$Just(endOfContextEnvEId),
																	function (_p12) {
																		return A2(
																			F2(
																				function (x, y) {
																					return _elm_lang$core$Native_Utils.eq(x, y);
																				}),
																			endOfContextEnvEId,
																			function (_) {
																				return _.eid;
																			}(
																				function (_) {
																					return _.val;
																				}(_p12)));
																	},
																	model.syntax,
																	_user$project$Eval$initEnv,
																	originalProgram)))));
											}();
											return A2(
												_elm_lang$core$Maybe$withDefault,
												{ctor: '_Tuple2', _0: 0, _1: 0},
												_elm_lang$core$Result$toMaybe(
													A2(
														_elm_lang$core$Result$andThen,
														function (_p13) {
															var _p14 = _p13;
															var _p18 = _p14._0._0;
															return A2(
																_elm_lang$core$Result$map,
																function (_p15) {
																	var _p16 = _p15;
																	var _p17 = _p16._1;
																	return {
																		ctor: '_Tuple2',
																		_0: (_elm_lang$core$Native_Utils.cmp(
																			_elm_lang$core$Dict$size(_p17),
																			1) > 0) ? (_elm_lang$core$Dict$size(_p17) - 1) : _elm_lang$core$Dict$size(_p17),
																		_1: A2(
																			_elm_lang$core$Maybe$withDefault,
																			1,
																			A2(
																				_elm_lang$core$Maybe$map,
																				_elm_lang$core$List$length,
																				_user$project$Lang$vListToMaybeValsExcludingPoint(_p18)))
																	};
																},
																A6(_user$project$LangSvg$resolveToRootedIndexedTree, false, model.syntax, model.slideNumber, model.movieNumber, model.movieTime, _p18));
														},
														A4(_user$project$Eval$doEval, false, model.syntax, envAtEndOfContext, newShapeExp))));
										}();
										var incomingShapeCount = _p9._0;
										var incomingListItemsCount = _p9._1;
										var _p19 = A2(
											_elm_lang$core$Debug$log,
											'(incomingShapeCount, incomingListItemsCount)',
											{ctor: '_Tuple2', _0: incomingShapeCount, _1: incomingListItemsCount});
										var _p20 = A2(
											_elm_lang$core$Debug$log,
											'(maybeReallyNumberOfNewShapesExpected, maybeReallyNumberOfNewListItemsExpected, incomingExpShouldBeInlined)',
											function () {
												if ((!_elm_lang$core$Native_Utils.eq(maybeNumberOfNewShapesExpectedIfListInlined, _elm_lang$core$Maybe$Nothing)) || (!_elm_lang$core$Native_Utils.eq(maybeNumberOfNewListItemsExpectedIfListInlined, _elm_lang$core$Maybe$Nothing))) {
													var _p21 = inferredReturnType;
													if (_p21.ctor === 'Just') {
														var _p22 = _p21._0;
														return (_user$project$Types$isListOrTuple(_p22) && (_user$project$Types$isListOrTuple(incomingType) && A2(_user$project$AlgorithmJish$doesUnify, _p22, incomingType))) ? {ctor: '_Tuple3', _0: maybeNumberOfNewShapesExpectedIfListInlined, _1: maybeNumberOfNewListItemsExpectedIfListInlined, _2: true} : {
															ctor: '_Tuple3',
															_0: A2(
																_elm_lang$core$Maybe$map,
																_elm_lang$core$Basics$always(incomingShapeCount),
																maybeNumberOfNewShapesExpected),
															_1: maybeNumberOfNewListItemsExpected,
															_2: false
														};
													} else {
														return {
															ctor: '_Tuple3',
															_0: A2(
																_elm_lang$core$Maybe$map,
																_elm_lang$core$Basics$always(incomingShapeCount),
																maybeNumberOfNewShapesExpected),
															_1: maybeNumberOfNewListItemsExpected,
															_2: false
														};
													}
												} else {
													return {
														ctor: '_Tuple3',
														_0: A2(
															_elm_lang$core$Maybe$map,
															_elm_lang$core$Basics$always(incomingShapeCount),
															maybeNumberOfNewShapesExpected),
														_1: maybeNumberOfNewListItemsExpected,
														_2: false
													};
												}
											}());
										var maybeReallyNumberOfNewShapesExpected = _p20._0;
										var maybeReallyNumberOfNewListItemsExpected = _p20._1;
										var incomingExpShouldBeInlined = _p20._2;
										var candidatesForList = F2(
											function (originalProgram, listExp) {
												var _p23 = _user$project$LangTools$expToListParts(listExp);
												var ws1 = _p23._0;
												var heads = _p23._1;
												var ws2 = _p23._2;
												var maybeTail = _p23._3;
												var ws3 = _p23._4;
												var _p24 = function () {
													var _p25 = maybeNewShapeName;
													if (_p25.ctor === 'Just') {
														var _p26 = A6(
															_user$project$LangTools$newVariableVisibleTo,
															-1,
															_p25._0,
															1,
															newShapeExp,
															{
																ctor: '::',
																_0: listExp.val.eid,
																_1: {ctor: '[]'}
															},
															originalProgram);
														var varName = _p26._0;
														var programWithNewDef = _p26._1;
														return {
															ctor: '_Tuple2',
															_0: _user$project$Lang$eVar(varName),
															_1: programWithNewDef
														};
													} else {
														return {ctor: '_Tuple2', _0: newShapeExp, _1: originalProgram};
													}
												}();
												var newListItemExp = _p24._0;
												var programPerhapsWithNewDef = _p24._1;
												var newListFlat = A2(
													_user$project$Lang$replaceE__,
													listExp,
													A5(
														_user$project$Lang$EList,
														ws1,
														A2(
															_elm_lang$core$List$map,
															F2(
																function (v0, v1) {
																	return {ctor: '_Tuple2', _0: v0, _1: v1};
																})(_user$project$Lang$space0),
															A3(
																_user$project$Lang$imitateExpListWhitespace_,
																heads,
																ws3.val,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	heads,
																	{
																		ctor: '::',
																		_0: newListItemExp,
																		_1: {ctor: '[]'}
																	}))),
														ws2,
														maybeTail,
														ws3));
												var newProgramFlat = A3(_user$project$Lang$replaceExpNode, listExp.val.eid, newListFlat, programPerhapsWithNewDef);
												var newCandidates = function () {
													if (incomingExpShouldBeInlined) {
														var newConcat = A2(
															_user$project$Lang$copyPrecedingWhitespace,
															listExp,
															A2(
																_user$project$Lang$eCall,
																'concat',
																{
																	ctor: '::',
																	_0: _user$project$Lang$eTuple(
																		{
																			ctor: '::',
																			_0: _user$project$Lang$removePrecedingWhitespace(listExp),
																			_1: {
																				ctor: '::',
																				_0: newListItemExp,
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}));
														var newProgramConcatAdded = A3(_user$project$Lang$replaceExpNode, listExp.val.eid, newConcat, programPerhapsWithNewDef);
														return {
															ctor: '::',
															_0: newProgramFlat,
															_1: {
																ctor: '::',
																_0: newProgramConcatAdded,
																_1: {ctor: '[]'}
															}
														};
													} else {
														var newListSingleton = A2(
															_user$project$Lang$replaceE__,
															listExp,
															A5(
																_user$project$Lang$EList,
																ws1,
																A2(
																	_elm_lang$core$List$map,
																	F2(
																		function (v0, v1) {
																			return {ctor: '_Tuple2', _0: v0, _1: v1};
																		})(_user$project$Lang$space0),
																	A3(
																		_user$project$Lang$imitateExpListWhitespace_,
																		heads,
																		ws3.val,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			heads,
																			{
																				ctor: '::',
																				_0: _user$project$Lang$eTuple(
																					{
																						ctor: '::',
																						_0: _user$project$Lang$removePrecedingWhitespace(newListItemExp),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}))),
																ws2,
																maybeTail,
																ws3));
														var newProgramSingleton = A3(_user$project$Lang$replaceExpNode, listExp.val.eid, newListSingleton, programPerhapsWithNewDef);
														return {
															ctor: '::',
															_0: newProgramFlat,
															_1: {
																ctor: '::',
																_0: newProgramSingleton,
																_1: {ctor: '[]'}
															}
														};
													}
												}();
												return A2(
													_elm_lang$core$List$map,
													F2(
														function (v0, v1) {
															return {ctor: '_Tuple2', _0: v0, _1: v1};
														})(listExp.val.eid),
													A2(
														_elm_lang$core$List$concatMap,
														A4(_user$project$CodeMotion$resolveValueAndLocHoles, true, model.solutionsCache, model.syncOptions, model.maybeEnv),
														newCandidates));
											});
										var listEIdWithPossiblePrograms = A2(
											_elm_lang$core$List$filter,
											function (_p27) {
												var _p28 = _p27;
												return areCrashingProgramsOkay || function () {
													var _p29 = A2(_user$project$DrawAddShape$maybeShapeCountAndListItemCountInContextOutput, model, _p28._1);
													if ((_p29.ctor === 'Just') && (_p29._0.ctor === '_Tuple2')) {
														var _p33 = _p29._0._0;
														var _p32 = _p29._0._1;
														var listItemCountOkay = function () {
															var _p30 = maybeReallyNumberOfNewListItemsExpected;
															if (_p30.ctor === 'Just') {
																return _elm_lang$core$Native_Utils.eq(oldListItemsCount + _p30._0, _p32);
															} else {
																return _elm_lang$core$Native_Utils.cmp(oldListItemsCount, _p32) < 1;
															}
														}();
														var shapeCountOkay = function () {
															var _p31 = maybeReallyNumberOfNewShapesExpected;
															if (_p31.ctor === 'Just') {
																return _elm_lang$core$Native_Utils.eq(oldShapeCount + _p31._0, _p33);
															} else {
																return _elm_lang$core$Native_Utils.cmp(oldShapeCount, _p33) < 1;
															}
														}();
														return shapeCountOkay && listItemCountOkay;
													} else {
														return false;
													}
												}();
											},
											function (candidates) {
												var _p34 = maybeProgramWithListifiedReturnExpAndLists;
												if (_p34.ctor === 'Just') {
													return A2(
														_elm_lang$core$Basics_ops['++'],
														candidates,
														A2(
															_elm_lang$core$List$concatMap,
															candidatesForList(_p34._0._0),
															_p34._0._1));
												} else {
													return candidates;
												}
											}(
												A2(
													_elm_lang$core$List$concatMap,
													candidatesForList(originalProgram),
													possibleTargetLists)));
										var _p35 = _elm_lang$core$List$unzip(listEIdWithPossiblePrograms);
										var listEIds = _p35._0;
										var _p36 = _elm_lang$core$List$unzip(
											A2(
												_elm_lang$core$List$sortBy,
												function (_p37) {
													var _p38 = _p37;
													var sortKey = {
														ctor: '_Tuple2',
														_0: _elm_lang$core$List$sum(
															A2(
																_elm_lang$core$List$map,
																function (otherListEId) {
																	return A3(_user$project$StaticAnalysis$isDependentOn, grossDependencies, otherListEId, _p38._0) ? 1 : 0;
																},
																listEIds)),
														_1: _user$project$LangTools$nodeCount(_p38._1)
													};
													return sortKey;
												},
												listEIdWithPossiblePrograms));
										var rankedNewPrograms = _p36._1;
										return rankedNewPrograms;
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _user$project$TypeDirectedFunctionUtils$roleExps = {
	ctor: '::',
	_0: {
		ctor: '_Tuple2',
		_0: 'Ratio',
		_1: _user$project$Lang$eConstDummyLoc(0.62)
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'Color',
			_1: _user$project$Lang$eConstDummyLoc(0)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'StrokeWidth',
				_1: _user$project$Lang$eConstDummyLoc(5)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'Point',
					_1: _user$project$Lang$eTuple(
						{
							ctor: '::',
							_0: _user$project$Lang$eInt0(0),
							_1: {
								ctor: '::',
								_0: _user$project$Lang$eInt(0),
								_1: {ctor: '[]'}
							}
						})
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'Vec2D',
						_1: _user$project$Lang$eTuple(
							{
								ctor: '::',
								_0: _user$project$Lang$eInt0(0),
								_1: {
									ctor: '::',
									_0: _user$project$Lang$eInt(0),
									_1: {ctor: '[]'}
								}
							})
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'Width',
							_1: _user$project$Lang$eConstDummyLoc(162)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'Height',
								_1: _user$project$Lang$eConstDummyLoc(100)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'HalfWidth',
									_1: _user$project$Lang$eConstDummyLoc(81)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'HalfHeight',
										_1: _user$project$Lang$eConstDummyLoc(50)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'HorizontalDistance',
											_1: _user$project$Lang$eConstDummyLoc(81)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'VerticalDistance',
												_1: _user$project$Lang$eConstDummyLoc(50)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'Count',
													_1: _user$project$Lang$withDummyExpInfo(
														A4(
															_user$project$Lang$EConst,
															_user$project$Lang$space1,
															3,
															_user$project$Lang$dummyLoc,
															A3(_user$project$Lang$rangeSlider, _user$project$Lang$IntSlider, 0, 10)))
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'PivotsOnTwo',
														_1: _user$project$Lang$withDummyExpInfo(
															A4(
																_user$project$Lang$EConst,
																_user$project$Lang$space1,
																2,
																_user$project$Lang$dummyLoc,
																A3(_user$project$Lang$rangeSlider, _user$project$Lang$IntSlider, 1, 5)))
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'PivotsOnOne',
															_1: _user$project$Lang$withDummyExpInfo(
																A4(
																	_user$project$Lang$EConst,
																	_user$project$Lang$space1,
																	2,
																	_user$project$Lang$dummyLoc,
																	A3(_user$project$Lang$rangeSlider, _user$project$Lang$IntSlider, 0, 4)))
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'PivotsOnZero',
																_1: _user$project$Lang$withDummyExpInfo(
																	A4(
																		_user$project$Lang$EConst,
																		_user$project$Lang$space1,
																		1,
																		_user$project$Lang$dummyLoc,
																		A3(_user$project$Lang$rangeSlider, _user$project$Lang$IntSlider, -1, 3)))
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'Radians',
																	_1: _user$project$Lang$withDummyExpInfo(
																		A4(
																			_user$project$Lang$EConst,
																			_user$project$Lang$space1,
																			0,
																			_user$project$Lang$dummyLoc,
																			A3(_user$project$Lang$rangeSlider, _user$project$Lang$NumSlider, -3.14, 3.14)))
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'Degrees',
																		_1: _user$project$Lang$withDummyExpInfo(
																			A4(
																				_user$project$Lang$EConst,
																				_user$project$Lang$space1,
																				0,
																				_user$project$Lang$dummyLoc,
																				A3(_user$project$Lang$rangeSlider, _user$project$Lang$IntSlider, -180, 180)))
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: 'Radius',
																			_1: _user$project$Lang$eConstDummyLoc(100)
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: 'Distance',
																				_1: _user$project$Lang$eConstDummyLoc(100)
																			},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$TypeDirectedFunctionUtils$maybeFillInArgPrimitive = function (argType) {
	return A2(
		_elm_lang$core$Maybe$map,
		_user$project$Types$isPointType(argType) ? _elm_lang$core$Basics$identity : _elm_lang$core$Basics$identity,
		function () {
			var maybeFilledByRoles = A2(
				_user$project$Utils$mapFirstSuccess,
				A2(_elm_lang$core$Basics$flip, _user$project$Utils$maybeFind, _user$project$TypeDirectedFunctionUtils$roleExps),
				_elm_lang$core$Set$toList(argType.val.roles));
			var _p0 = maybeFilledByRoles;
			if (_p0.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(_p0._0);
			} else {
				var _p1 = argType.val.t__;
				switch (_p1.ctor) {
					case 'TNum':
						return _elm_lang$core$Maybe$Just(
							_user$project$Lang$eConstDummyLoc(0));
					case 'TBool':
						return _elm_lang$core$Maybe$Just(_user$project$Lang$eFalse);
					case 'TString':
						return _elm_lang$core$Maybe$Just(
							_user$project$Lang$eStr('string'));
					case 'TNull':
						return _elm_lang$core$Maybe$Just(_user$project$Lang$eNull);
					case 'TList':
						return _elm_lang$core$Maybe$Just(
							_user$project$Lang$eTuple(
								{ctor: '[]'}));
					case 'TDict':
						return _elm_lang$core$Maybe$Just(
							A2(
								_user$project$Lang$eOp,
								_user$project$Lang$DictEmpty,
								{ctor: '[]'}));
					case 'TTuple':
						return A2(
							_elm_lang$core$Maybe$map,
							_user$project$Lang$eTuple,
							_user$project$Utils$projJusts(
								A2(_elm_lang$core$List$map, _user$project$TypeDirectedFunctionUtils$maybeFillInArgPrimitive, _p1._1)));
					case 'TUnion':
						return A2(_user$project$Utils$mapFirstSuccess, _user$project$TypeDirectedFunctionUtils$maybeFillInArgPrimitive, _p1._1);
					case 'TVar':
						return _elm_lang$core$Maybe$Just(
							_user$project$Lang$eTuple(
								{ctor: '[]'}));
					case 'TWildcard':
						return _elm_lang$core$Maybe$Just(
							_user$project$Lang$eTuple(
								{ctor: '[]'}));
					case 'TNamed':
						return A2(_user$project$Utils$maybeFind, _p1._1, _user$project$TypeDirectedFunctionUtils$roleExps);
					default:
						return _elm_lang$core$Maybe$Nothing;
				}
			}
		}());
};
var _user$project$TypeDirectedFunctionUtils$clearlyNotShapeOrListOfShapesExp = function (exp) {
	clearlyNotShapeOrListOfShapesExp:
	while (true) {
		var _p2 = _user$project$Lang$expEffectiveExp(exp).val.e__;
		_v2_3:
		do {
			switch (_p2.ctor) {
				case 'EConst':
					return true;
				case 'EBase':
					return true;
				case 'EList':
					if ((_p2._1.ctor === '::') && (_p2._1._0.ctor === '_Tuple2')) {
						var effectiveHead = _user$project$Lang$expEffectiveExp(_p2._1._0._1);
						if (_user$project$Lang$isList(effectiveHead)) {
							var _v3 = effectiveHead;
							exp = _v3;
							continue clearlyNotShapeOrListOfShapesExp;
						} else {
							return !(_user$project$Lang$isString(effectiveHead) || (_user$project$Lang$isVar(effectiveHead) || _user$project$Lang$isApp(effectiveHead)));
						}
					} else {
						break _v2_3;
					}
				default:
					break _v2_3;
			}
		} while(false);
		return false;
	}
};
var _user$project$TypeDirectedFunctionUtils$clearlyNotShapeOrListOfShapesType = function (tipe) {
	return _user$project$Types$isPointType(tipe) || (_user$project$Types$isPointListType(tipe) || A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			_user$project$TypeDirectedFunctionUtils$clearlyNotShapeOrListOfShapesExp,
			_user$project$TypeDirectedFunctionUtils$maybeFillInArgPrimitive(tipe))));
};
var _user$project$TypeDirectedFunctionUtils$getFunctionsByPredicateOnType = F4(
	function (hasDesiredType, idToTypeAndContextThunk, program, editingContext) {
		var viewerEId = A2(_user$project$FocusedEditingContext$eidAtEndOfDrawingContext, editingContext, program);
		var _p3 = A2(_elm_lang$core$Dict$get, viewerEId, idToTypeAndContextThunk);
		if (_p3.ctor === 'Just') {
			var typingContext = _p3._0._1(
				{ctor: '_Tuple0'});
			var programIdentifiersAtScope = A2(
				_user$project$LangTools$visibleIdentifiersAtPredicateNoPrelude,
				program,
				function (_p4) {
					return A2(
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						viewerEId,
						function (_) {
							return _.eid;
						}(
							function (_) {
								return _.val;
							}(_p4)));
				});
			var _p5 = A2(
				_elm_lang$core$List$partition,
				function (_p6) {
					var _p7 = _p6;
					return A2(_elm_lang$core$Set$member, _p7._0, programIdentifiersAtScope);
				},
				_elm_lang$core$List$reverse(
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Tuple$mapSecond(_user$project$Types$prettify),
						A2(
							_elm_lang$core$List$filter,
							function (_p8) {
								var _p9 = _p8;
								return hasDesiredType(_p9._1);
							},
							_user$project$Utils$removeShadowedKeys(typingContext)))));
			var programFunctions = _p5._0;
			var preludeFunctions = _p5._1;
			return A2(_elm_lang$core$Basics_ops['++'], programFunctions, preludeFunctions);
		} else {
			return {ctor: '[]'};
		}
	});

var _user$project$Draw$isDrawableType = function (tipe) {
	var typeCountWithAnyOfRoles = F2(
		function (roles, inputTypes) {
			return A2(
				_user$project$Utils$count,
				function (_p0) {
					return A2(
						_user$project$Utils$anyOverlapListSet,
						roles,
						_user$project$Types$typeToRoles(_p0));
				},
				inputTypes);
		});
	var atLeastOneDistanceArg = function (inputTypes) {
		return (_elm_lang$core$Native_Utils.cmp(
			A2(
				typeCountWithAnyOfRoles,
				{
					ctor: '::',
					_0: 'Width',
					_1: {
						ctor: '::',
						_0: 'HalfWidth',
						_1: {
							ctor: '::',
							_0: 'HorizontalDistance',
							_1: {ctor: '[]'}
						}
					}
				},
				inputTypes),
			1) > -1) || ((_elm_lang$core$Native_Utils.cmp(
			A2(
				typeCountWithAnyOfRoles,
				{
					ctor: '::',
					_0: 'Height',
					_1: {
						ctor: '::',
						_0: 'HalfHeight',
						_1: {
							ctor: '::',
							_0: 'VerticalDistance',
							_1: {ctor: '[]'}
						}
					}
				},
				inputTypes),
			1) > -1) || (_elm_lang$core$Native_Utils.cmp(
			A2(
				typeCountWithAnyOfRoles,
				{
					ctor: '::',
					_0: 'Radius',
					_1: {ctor: '[]'}
				},
				inputTypes),
			1) > -1));
	};
	var _p1 = _user$project$Types$typeToMaybeArgTypesAndReturnType(tipe);
	if ((_p1.ctor === 'Just') && (_p1._0.ctor === '_Tuple2')) {
		var _p2 = _p1._0._0;
		return (_elm_lang$core$Native_Utils.cmp(
			A2(_user$project$Utils$count, _user$project$Types$isPointType, _p2),
			2) > -1) || (((_elm_lang$core$Native_Utils.cmp(
			A2(_user$project$Utils$count, _user$project$Types$isPointType, _p2),
			1) > -1) && atLeastOneDistanceArg(_p2)) || (_elm_lang$core$Native_Utils.eq(
			A2(_user$project$Utils$count, _user$project$Types$isPointType, _p2),
			0) && (_elm_lang$core$Native_Utils.eq(
			A2(
				typeCountWithAnyOfRoles,
				{
					ctor: '::',
					_0: 'X',
					_1: {ctor: '[]'}
				},
				_p2),
			1) && (_elm_lang$core$Native_Utils.eq(
			A2(
				typeCountWithAnyOfRoles,
				{
					ctor: '::',
					_0: 'Y',
					_1: {ctor: '[]'}
				},
				_p2),
			1) && atLeastOneDistanceArg(_p2)))));
	} else {
		return false;
	}
};
var _user$project$Draw$getDrawableFunctions = function (model) {
	return A4(_user$project$TypeDirectedFunctionUtils$getFunctionsByPredicateOnType, _user$project$Draw$isDrawableType, model.idToTypeAndContextThunk, model.inputExp, model.editingContext);
};
var _user$project$Draw$maybeGhost = F3(
	function (b, f, args) {
		return b ? {
			ctor: '_Tuple2',
			_0: _user$project$Lang$eVar0('ghost'),
			_1: {
				ctor: '::',
				_0: _user$project$Lang$withDummyExpInfo(
					A5(_user$project$Lang$EApp, _user$project$Lang$space1, f, args, _user$project$Lang$SpaceApp, _user$project$Lang$space0)),
				_1: {ctor: '[]'}
			}
		} : {ctor: '_Tuple2', _0: f, _1: args};
	});
var _user$project$Draw$ghost = _user$project$Draw$maybeGhost(true);
var _user$project$Draw$addToMainExp = F2(
	function (newBlob, mainExp) {
		var _p3 = mainExp;
		switch (_p3.ctor) {
			case 'SvgConcat':
				return A2(
					_user$project$Blobs$SvgConcat,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p3._0,
						{
							ctor: '::',
							_0: _user$project$Blobs$fromBlobExp(newBlob),
							_1: {ctor: '[]'}
						}),
					_p3._1);
			case 'Blobs':
				return A2(
					_user$project$Blobs$Blobs,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p3._0,
						{
							ctor: '::',
							_0: newBlob,
							_1: {ctor: '[]'}
						}),
					_p3._1);
			default:
				var wsN = _user$project$Lang$ws('\n');
				return _user$project$Blobs$OtherExp(
					_user$project$Lang$withDummyExpInfo(
						A5(
							_user$project$Lang$EApp,
							wsN,
							_user$project$Lang$eVar0('addBlob'),
							{
								ctor: '::',
								_0: _user$project$Blobs$fromBlobExp(newBlob),
								_1: {
									ctor: '::',
									_0: _p3._0,
									_1: {ctor: '[]'}
								}
							},
							_user$project$Lang$SpaceApp,
							_user$project$Lang$space0)));
		}
	});
var _user$project$Draw$makeAxisDifferenceExpFromPointsWithSnap = F4(
	function (maybeX1Y1Vals, axis, _p5, _p4) {
		var _p6 = _p5;
		var _p7 = _p4;
		var _p8 = function () {
			var _p9 = axis;
			if (_p9.ctor === 'X') {
				return {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: _p6._0._0, _1: _p6._0._1},
					_1: {ctor: '_Tuple2', _0: _p7._0._0, _1: _p7._0._1}
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: _p6._1._0, _1: _p6._1._1},
					_1: {ctor: '_Tuple2', _0: _p7._1._0, _1: _p7._1._1}
				};
			}
		}();
		var endCoord = _p8._0._0;
		var endSnap = _p8._0._1;
		var startCoord = _p8._1._0;
		var startSnap = _p8._1._1;
		var maybeStartVal = function () {
			var _p10 = {ctor: '_Tuple2', _0: axis, _1: maybeX1Y1Vals};
			_v5_2:
			do {
				if (_p10.ctor === '_Tuple2') {
					if (_p10._0.ctor === 'X') {
						if ((_p10._1.ctor === 'Just') && (_p10._1._0.ctor === '_Tuple2')) {
							return _elm_lang$core$Maybe$Just(_p10._1._0._0);
						} else {
							break _v5_2;
						}
					} else {
						if ((_p10._1.ctor === 'Just') && (_p10._1._0.ctor === '_Tuple2')) {
							return _elm_lang$core$Maybe$Just(_p10._1._0._1);
						} else {
							break _v5_2;
						}
					}
				} else {
					break _v5_2;
				}
			} while(false);
			return _elm_lang$core$Maybe$Nothing;
		}();
		var _p11 = {ctor: '_Tuple3', _0: endSnap, _1: startSnap, _2: maybeStartVal};
		if (_p11._0.ctor === 'NoSnap') {
			return _user$project$Lang$eInt(endCoord - startCoord);
		} else {
			if (_p11._1.ctor === 'NoSnap') {
				if (_p11._2.ctor === 'Just') {
					return A2(
						_user$project$Lang$eMinus,
						_user$project$Lang$eHoleVal(_p11._0._0),
						_user$project$Lang$eHoleVal(_p11._2._0));
				} else {
					return A2(
						_user$project$Lang$eMinus,
						_user$project$Lang$eHoleVal(_p11._0._0),
						_user$project$Lang$eInt(startCoord));
				}
			} else {
				return A2(
					_user$project$Lang$eMinus,
					_user$project$Lang$eHoleVal(_p11._0._0),
					_user$project$Lang$eHoleVal(_p11._1._0));
			}
		}
	});
var _user$project$Draw$makeIntPairOrSnap = function (_p12) {
	var _p13 = _p12;
	var _p16 = _p13._1._0;
	var _p15 = _p13._0._0;
	var _p14 = {ctor: '_Tuple2', _0: _p13._0._1, _1: _p13._1._1};
	if (_p14._0.ctor === 'NoSnap') {
		if (_p14._1.ctor === 'NoSnap') {
			return {
				ctor: '_Tuple2',
				_0: _user$project$Lang$eInt(_p15),
				_1: _user$project$Lang$eInt(_p16)
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _user$project$Lang$eInt(_p15),
				_1: _user$project$Lang$eHoleVal(_p14._1._0)
			};
		}
	} else {
		if (_p14._1.ctor === 'NoSnap') {
			return {
				ctor: '_Tuple2',
				_0: _user$project$Lang$eHoleVal(_p14._0._0),
				_1: _user$project$Lang$eInt(_p16)
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _user$project$Lang$eHoleVal(_p14._0._0),
				_1: _user$project$Lang$eHoleVal(_p14._1._0)
			};
		}
	}
};
var _user$project$Draw$makePointExpFromPointWithSnap = function (pt) {
	var _p17 = _user$project$Draw$makeIntPairOrSnap(pt);
	var xExp = _p17._0;
	var yExp = _p17._1;
	return _elm_lang$core$Basics$identity(
		A2(
			_user$project$Lang$ePair,
			_user$project$Lang$removePrecedingWhitespace(xExp),
			yExp));
};
var _user$project$Draw$makeIntPair = function (_p18) {
	var _p19 = _p18;
	return {
		ctor: '_Tuple2',
		_0: _user$project$Lang$eInt(_p19._0),
		_1: _user$project$Lang$eInt(_p19._1)
	};
};
var _user$project$Draw$makeInts = function (nums) {
	var _p20 = nums;
	if (_p20.ctor === '[]') {
		return _elm_lang$core$Native_Utils.crashCase(
			'Draw',
			{
				start: {line: 1010, column: 3},
				end: {line: 1013, column: 41}
			},
			_p20)('makeInts');
	} else {
		if (_p20._1.ctor === '[]') {
			return {
				ctor: '::',
				_0: _user$project$Lang$eInt0(_p20._0),
				_1: {ctor: '[]'}
			};
		} else {
			return {
				ctor: '::',
				_0: _user$project$Lang$eInt0(_p20._0),
				_1: A2(_elm_lang$core$List$map, _user$project$Lang$eInt, _p20._1)
			};
		}
	}
};
var _user$project$Draw$makeLet = F2(
	function (vars, exps) {
		var _p22 = {ctor: '_Tuple2', _0: vars, _1: exps};
		if (((_p22.ctor === '_Tuple2') && (_p22._0.ctor === '::')) && (_p22._1.ctor === '::')) {
			if ((_p22._0._1.ctor === '[]') && (_p22._1._1.ctor === '[]')) {
				return {
					ctor: '_Tuple2',
					_0: _user$project$Lang$pVar(_p22._0._0),
					_1: _p22._1._0
				};
			} else {
				var ps = A2(_elm_lang$core$List$map, _user$project$Lang$pVar, _p22._0._1);
				var p = _user$project$Lang$pVar0(_p22._0._0);
				return {
					ctor: '_Tuple2',
					_0: _user$project$Lang$pList(
						{ctor: '::', _0: p, _1: ps}),
					_1: A2(
						_user$project$Lang$eList,
						{ctor: '::', _0: _p22._1._0, _1: _p22._1._1},
						_elm_lang$core$Maybe$Nothing)
				};
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Draw',
				{
					start: {line: 996, column: 3},
					end: {line: 1001, column: 43}
				},
				_p22)('makeLet');
		}
	});
var _user$project$Draw$makeLetAs = F3(
	function (x, vars, exps) {
		var _p24 = A2(_user$project$Draw$makeLet, vars, exps);
		var p = _p24._0;
		var e = _p24._1;
		return {
			ctor: '_Tuple2',
			_0: A2(_user$project$Lang$pAs, x, p),
			_1: e
		};
	});
var _user$project$Draw$makeCallWithLocals = F3(
	function (locals, func, args) {
		var recurse = function (locals) {
			var _p25 = locals;
			if (_p25.ctor === '[]') {
				return _user$project$Lang$withDummyExpInfo(
					A5(
						_user$project$Lang$EApp,
						_user$project$Lang$ws('\n    '),
						func,
						args,
						_user$project$Lang$SpaceApp,
						_user$project$Lang$space0));
			} else {
				return _user$project$Lang$withDummyExpInfo(
					A9(
						_user$project$Lang$ELet,
						_user$project$Lang$ws('\n  '),
						_user$project$Lang$Let,
						false,
						_p25._0._0,
						_user$project$Lang$space1,
						_p25._0._1,
						_user$project$Lang$space1,
						recurse(_p25._1),
						_user$project$Lang$space0));
			}
		};
		return recurse(locals);
	});
var _user$project$Draw$addShapeToModel = F3(
	function (model, newShapeName, newShapeExp) {
		var newProgram = A2(
			_elm_lang$core$Maybe$withDefault,
			model.inputExp,
			_elm_lang$core$List$head(
				_user$project$DrawAddShape$addShape(model)(
					_elm_lang$core$Basics$always(true))(
					_elm_lang$core$Maybe$Just(newShapeName))(newShapeExp)(
					_elm_lang$core$Maybe$Just(1))(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(false)(model.inputExp)));
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				code: A2(_user$project$Syntax$unparser, model.syntax, newProgram)
			});
	});
var _user$project$Draw$newFunctionCallExp = F4(
	function (fName, model, pt1, pt2) {
		var _p26 = A2(_user$project$Utils$maybeFind, fName, model.drawableFunctions);
		if (_p26.ctor === 'Just') {
			var _p49 = _p26._0;
			var _p27 = _user$project$Types$typeToMaybeArgTypesAndReturnType(_p49);
			if (_p27.ctor === 'Just') {
				var _p47 = _p27._0._1;
				var _p46 = _p27._0._0;
				var _p28 = A3(
					_user$project$Utils$foldl,
					{
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: pt1,
							_1: {
								ctor: '::',
								_0: pt2,
								_1: {ctor: '[]'}
							}
						},
						_1: {ctor: '[]'}
					},
					F2(
						function (argType, _p29) {
							var _p30 = _p29;
							var _p33 = _p30._0;
							var _p32 = _p30._1;
							var _p31 = {
								ctor: '_Tuple2',
								_0: _p33,
								_1: _user$project$Types$isPointType(argType)
							};
							if (((_p31.ctor === '_Tuple2') && (_p31._0.ctor === '::')) && (_p31._1 === true)) {
								return {
									ctor: '_Tuple2',
									_0: _p31._0._1,
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_p32,
										{
											ctor: '::',
											_0: _elm_lang$core$Maybe$Just(
												_user$project$Draw$makePointExpFromPointWithSnap(_p31._0._0)),
											_1: {ctor: '[]'}
										})
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p33,
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_p32,
										{
											ctor: '::',
											_0: _user$project$TypeDirectedFunctionUtils$maybeFillInArgPrimitive(argType),
											_1: {ctor: '[]'}
										})
								};
							}
						}),
					_p46);
				var ptsUnused = _p28._0;
				var argMaybeExpsTwoPoints = _p28._1;
				var _p34 = function () {
					var maxId = _user$project$FastParser$maxId(model.inputExp);
					var x1y1Exp = A2(
						_user$project$FastParser$freshenFrom,
						maxId + 1,
						_user$project$Draw$makePointExpFromPointWithSnap(pt1));
					var _p35 = _user$project$Utils$unwrap2(
						A2(
							_elm_lang$core$List$map,
							_user$project$Lang$ensureWhitespaceExp,
							_user$project$LangTools$expToListHeads(
								_user$project$Lang$expEffectiveExp(x1y1Exp))));
					var x1Exp = _p35._0;
					var y1Exp = _p35._1;
					var maybeX1Y1Vals = A2(
						_elm_lang$core$Maybe$andThen,
						_user$project$Lang$valToMaybeXYVals,
						_user$project$Eval$simpleEvalToMaybeVal(x1y1Exp));
					var _p36 = pt1;
					var x1Int = _p36._0._0;
					var y1Int = _p36._1._0;
					var _p37 = pt2;
					var x2Int = _p37._0._0;
					var y2Int = _p37._1._0;
					var majorAxis = (_elm_lang$core$Native_Utils.cmp(
						_elm_lang$core$Basics$abs(x2Int - x1Int),
						_elm_lang$core$Basics$abs(y2Int - y1Int)) > -1) ? _user$project$Lang$X : _user$project$Lang$Y;
					return A3(
						_user$project$Utils$foldl,
						{
							ctor: '_Tuple4',
							_0: {ctor: '_Tuple2', _0: false, _1: false},
							_1: false,
							_2: false,
							_3: {ctor: '[]'}
						},
						F2(
							function (argType, _p38) {
								var _p39 = _p38;
								var _p45 = _p39._0._1;
								var _p44 = _p39._0._0;
								var _p43 = _p39._1;
								var _p42 = _p39._2;
								var _p41 = _p39._3;
								var _p40 = {
									ctor: '_Tuple9',
									_0: {ctor: '_Tuple2', _0: _p44, _1: _p45},
									_1: _user$project$Types$isPointType(argType),
									_2: {
										ctor: '_Tuple2',
										_0: A2(
											_elm_lang$core$Set$member,
											'X',
											_user$project$Types$typeToRoles(argType)),
										_1: A2(
											_elm_lang$core$Set$member,
											'Y',
											_user$project$Types$typeToRoles(argType))
									},
									_3: _p43,
									_4: A2(
										_user$project$Utils$anyOverlapListSet,
										{
											ctor: '::',
											_0: 'Width',
											_1: {
												ctor: '::',
												_0: 'HalfWidth',
												_1: {
													ctor: '::',
													_0: 'HorizontalDistance',
													_1: {ctor: '[]'}
												}
											}
										},
										_user$project$Types$typeToRoles(argType)),
									_5: _p42,
									_6: A2(
										_user$project$Utils$anyOverlapListSet,
										{
											ctor: '::',
											_0: 'Height',
											_1: {
												ctor: '::',
												_0: 'HalfHeight',
												_1: {
													ctor: '::',
													_0: 'VerticalDistance',
													_1: {ctor: '[]'}
												}
											}
										},
										_user$project$Types$typeToRoles(argType)),
									_7: _p42 || _p43,
									_8: A2(
										_elm_lang$core$Set$member,
										'Radius',
										_user$project$Types$typeToRoles(argType))
								};
								_v18_6:
								do {
									_v18_5:
									do {
										_v18_4:
										do {
											_v18_3:
											do {
												if (((_p40.ctor === '_Tuple9') && (_p40._0.ctor === '_Tuple2')) && (_p40._2.ctor === '_Tuple2')) {
													if (_p40._1 === true) {
														if ((_p40._0._0 === false) && (_p40._0._1 === false)) {
															return {
																ctor: '_Tuple4',
																_0: {ctor: '_Tuple2', _0: true, _1: true},
																_1: _p43,
																_2: _p42,
																_3: A2(
																	_elm_lang$core$Basics_ops['++'],
																	_p41,
																	{
																		ctor: '::',
																		_0: _elm_lang$core$Maybe$Just(x1y1Exp),
																		_1: {ctor: '[]'}
																	})
															};
														} else {
															if ((_p40._3 === false) && (_p40._4 === true)) {
																break _v18_3;
															} else {
																if ((_p40._5 === false) && (_p40._6 === true)) {
																	break _v18_4;
																} else {
																	if ((_p40._7 === false) && (_p40._8 === true)) {
																		break _v18_5;
																	} else {
																		break _v18_6;
																	}
																}
															}
														}
													} else {
														if ((_p40._0._0 === false) && (_p40._2._0 === true)) {
															return {
																ctor: '_Tuple4',
																_0: {ctor: '_Tuple2', _0: true, _1: _p45},
																_1: _p43,
																_2: _p42,
																_3: A2(
																	_elm_lang$core$Basics_ops['++'],
																	_p41,
																	{
																		ctor: '::',
																		_0: _elm_lang$core$Maybe$Just(x1Exp),
																		_1: {ctor: '[]'}
																	})
															};
														} else {
															if ((_p40._0._1 === false) && (_p40._2._1 === true)) {
																return {
																	ctor: '_Tuple4',
																	_0: {ctor: '_Tuple2', _0: _p44, _1: true},
																	_1: _p43,
																	_2: _p42,
																	_3: A2(
																		_elm_lang$core$Basics_ops['++'],
																		_p41,
																		{
																			ctor: '::',
																			_0: _elm_lang$core$Maybe$Just(y1Exp),
																			_1: {ctor: '[]'}
																		})
																};
															} else {
																if ((_p40._3 === false) && (_p40._4 === true)) {
																	break _v18_3;
																} else {
																	if ((_p40._5 === false) && (_p40._6 === true)) {
																		break _v18_4;
																	} else {
																		if ((_p40._7 === false) && (_p40._8 === true)) {
																			break _v18_5;
																		} else {
																			break _v18_6;
																		}
																	}
																}
															}
														}
													}
												} else {
													break _v18_6;
												}
											} while(false);
											return {
												ctor: '_Tuple4',
												_0: {ctor: '_Tuple2', _0: _p44, _1: _p45},
												_1: true,
												_2: _p42,
												_3: A2(
													_elm_lang$core$Basics_ops['++'],
													_p41,
													{
														ctor: '::',
														_0: _elm_lang$core$Maybe$Just(
															A4(_user$project$Draw$makeAxisDifferenceExpFromPointsWithSnap, maybeX1Y1Vals, _user$project$Lang$X, pt2, pt1)),
														_1: {ctor: '[]'}
													})
											};
										} while(false);
										return {
											ctor: '_Tuple4',
											_0: {ctor: '_Tuple2', _0: _p44, _1: _p45},
											_1: _p43,
											_2: true,
											_3: A2(
												_elm_lang$core$Basics_ops['++'],
												_p41,
												{
													ctor: '::',
													_0: _elm_lang$core$Maybe$Just(
														A4(_user$project$Draw$makeAxisDifferenceExpFromPointsWithSnap, maybeX1Y1Vals, _user$project$Lang$Y, pt2, pt1)),
													_1: {ctor: '[]'}
												})
										};
									} while(false);
									return {
										ctor: '_Tuple4',
										_0: {ctor: '_Tuple2', _0: _p44, _1: _p45},
										_1: true,
										_2: true,
										_3: A2(
											_elm_lang$core$Basics_ops['++'],
											_p41,
											{
												ctor: '::',
												_0: _elm_lang$core$Maybe$Just(
													A4(_user$project$Draw$makeAxisDifferenceExpFromPointsWithSnap, maybeX1Y1Vals, majorAxis, pt2, pt1)),
												_1: {ctor: '[]'}
											})
									};
								} while(false);
								return {
									ctor: '_Tuple4',
									_0: {ctor: '_Tuple2', _0: _p44, _1: _p45},
									_1: _p43,
									_2: _p42,
									_3: A2(
										_elm_lang$core$Basics_ops['++'],
										_p41,
										{
											ctor: '::',
											_0: _user$project$TypeDirectedFunctionUtils$maybeFillInArgPrimitive(argType),
											_1: {ctor: '[]'}
										})
								};
							}),
						_p46);
				}();
				var x1Used = _p34._0._0;
				var y1Used = _p34._0._1;
				var widthUsed = _p34._1;
				var heightUsed = _p34._2;
				var argMaybeExpsPointWidthHeight = _p34._3;
				var perhapsPointAnnotation = _user$project$Types$isPointType(_p47) ? _elm_lang$core$Basics$identity : _elm_lang$core$Basics$identity;
				return A2(
					_elm_lang$core$Maybe$map,
					function (argExps) {
						return {
							ctor: '_Tuple2',
							_0: perhapsPointAnnotation(
								A2(_user$project$Lang$eCall, fName, argExps)),
							_1: _p47
						};
					},
					A2(
						_user$project$Utils$orMaybe,
						A2(
							_user$project$Utils$filterMaybe,
							_elm_lang$core$Basics$always(
								_elm_lang$core$Native_Utils.eq(
									ptsUnused,
									{ctor: '[]'})),
							_user$project$Utils$projJusts(argMaybeExpsTwoPoints)),
						A2(
							_user$project$Utils$filterMaybe,
							_elm_lang$core$Basics$always(x1Used && (y1Used && (widthUsed || heightUsed))),
							_user$project$Utils$projJusts(argMaybeExpsPointWidthHeight))));
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'Draw',
					{
						start: {line: 894, column: 7},
						end: {line: 943, column: 123}
					},
					_p27)(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Draw.newFunctionCallExp bad function type: ',
						A2(_user$project$Syntax$typeUnparser, _user$project$Syntax$Elm, _p49)));
			}
		} else {
			var _p50 = _user$project$Utils$log(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Could not find function ',
					A2(_elm_lang$core$Basics_ops['++'], fName, ' to draw!')));
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Draw$eAsPoint = function (e) {
	return A2(_user$project$Lang$eColonTypeAlias, e, 'Point');
};
var _user$project$Draw$strPoint = F3(
	function (strX, strY, _p51) {
		var _p52 = _p51;
		return _user$project$Utils$spaces(
			{
				ctor: '::',
				_0: strX(_p52._0),
				_1: {
					ctor: '::',
					_0: strY(_p52._1),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Draw$pathCommands = F3(
	function (strX, strY, keysAndPoints) {
		var strPt = A2(_user$project$Draw$strPoint, strX, strY);
		var keysAndPoints_ = _elm_lang$core$List$reverse(keysAndPoints);
		var _p53 = _user$project$Utils$head_(keysAndPoints_);
		var firstClick = _p53._1;
		var _p54 = _user$project$Utils$last_(keysAndPoints_);
		var lastClick = _p54._1;
		var _p55 = function () {
			if (!_elm_lang$core$Native_Utils.eq(firstClick, lastClick)) {
				return {
					ctor: '_Tuple3',
					_0: {ctor: '[]'},
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'\'M\' ',
						strPt(firstClick)),
					_2: strPt(firstClick)
				};
			} else {
				var extraLets = {
					ctor: '::',
					_0: A2(
						_user$project$Draw$makeLet,
						{
							ctor: '::',
							_0: 'x0',
							_1: {
								ctor: '::',
								_0: 'y0',
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _user$project$Lang$eVar0(
								strX(
									_elm_lang$core$Tuple$first(firstClick))),
							_1: {
								ctor: '::',
								_0: _user$project$Lang$eVar(
									strY(
										_elm_lang$core$Tuple$second(firstClick))),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				};
				return {ctor: '_Tuple3', _0: extraLets, _1: '\'M\' x0 y0', _2: 'x0 y0'};
			}
		}();
		var extraLets = _p55._0;
		var firstCmd = _p55._1;
		var lastPoint = _p55._2;
		var remainingCmds = function () {
			var foo = function (list0) {
				var _p56 = list0;
				if (_p56.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					var _p74 = _p56._0._0;
					var _p73 = _p56._1;
					var _p72 = _p56._0._1;
					if (_elm_lang$core$Native_Utils.eq(_p74, _user$project$Keys$q)) {
						var _p57 = _p73;
						if ((_p57.ctor === '::') && (_p57._0.ctor === '_Tuple2')) {
							var _p61 = _p57._1;
							var _p60 = _p57._0._1;
							var _p58 = {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.eq(_p60, firstClick),
								_1: _p61
							};
							if (_p58._0 === false) {
								return {
									ctor: '::',
									_0: _user$project$Utils$spaces(
										{
											ctor: '::',
											_0: '\'Q\'',
											_1: {
												ctor: '::',
												_0: strPt(_p72),
												_1: {
													ctor: '::',
													_0: strPt(_p60),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: foo(_p61)
								};
							} else {
								if (_p58._1.ctor === '[]') {
									return {
										ctor: '::',
										_0: _user$project$Utils$spaces(
											{
												ctor: '::',
												_0: '\'Q\'',
												_1: {
													ctor: '::',
													_0: strPt(_p72),
													_1: {
														ctor: '::',
														_0: lastPoint,
														_1: {
															ctor: '::',
															_0: '\'Z\'',
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									};
								} else {
									return _elm_lang$core$Native_Utils.crashCase(
										'Draw',
										{
											start: {line: 834, column: 15},
											end: {line: 837, column: 55}
										},
										_p58)('addPath Q1');
								}
							}
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'Draw',
								{
									start: {line: 832, column: 11},
									end: {line: 838, column: 42}
								},
								_p57)('addPath Q2');
						}
					} else {
						if (_elm_lang$core$Native_Utils.eq(_p74, _user$project$Keys$c)) {
							var _p63 = _p73;
							if ((((_p63.ctor === '::') && (_p63._0.ctor === '_Tuple2')) && (_p63._1.ctor === '::')) && (_p63._1._0.ctor === '_Tuple2')) {
								var _p68 = _p63._1._1;
								var _p67 = _p63._1._0._1;
								var _p66 = _p63._0._1;
								var _p64 = {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.eq(_p67, firstClick),
									_1: _p68
								};
								if (_p64._0 === false) {
									return {
										ctor: '::',
										_0: _user$project$Utils$spaces(
											{
												ctor: '::',
												_0: '\'C\'',
												_1: {
													ctor: '::',
													_0: strPt(_p72),
													_1: {
														ctor: '::',
														_0: strPt(_p66),
														_1: {
															ctor: '::',
															_0: strPt(_p67),
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: foo(_p68)
									};
								} else {
									if (_p64._1.ctor === '[]') {
										return {
											ctor: '::',
											_0: _user$project$Utils$spaces(
												{
													ctor: '::',
													_0: '\'C\'',
													_1: {
														ctor: '::',
														_0: strPt(_p72),
														_1: {
															ctor: '::',
															_0: strPt(_p66),
															_1: {
																ctor: '::',
																_0: lastPoint,
																_1: {
																	ctor: '::',
																	_0: '\'Z\'',
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										};
									} else {
										return _elm_lang$core$Native_Utils.crashCase(
											'Draw',
											{
												start: {line: 843, column: 15},
												end: {line: 846, column: 55}
											},
											_p64)('addPath C1');
									}
								}
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'Draw',
									{
										start: {line: 841, column: 11},
										end: {line: 847, column: 42}
									},
									_p63)('addPath C2');
							}
						} else {
							var _p70 = {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.eq(_p72, firstClick),
								_1: _p73
							};
							if (_p70._0 === false) {
								return {
									ctor: '::',
									_0: _user$project$Utils$spaces(
										{
											ctor: '::',
											_0: '\'L\'',
											_1: {
												ctor: '::',
												_0: strPt(_p72),
												_1: {ctor: '[]'}
											}
										}),
									_1: foo(_p73)
								};
							} else {
								if (_p70._1.ctor === '[]') {
									return {
										ctor: '::',
										_0: '\'Z\'',
										_1: {ctor: '[]'}
									};
								} else {
									return _elm_lang$core$Native_Utils.crashCase(
										'Draw',
										{
											start: {line: 850, column: 11},
											end: {line: 853, column: 51}
										},
										_p70)('addPath ZL');
								}
							}
						}
					}
				}
			};
			return foo(
				_user$project$Utils$tail_(keysAndPoints_));
		}();
		var sD = _user$project$Utils$bracks(
			_user$project$Utils$spaces(
				{ctor: '::', _0: firstCmd, _1: remainingCmds}));
		return {ctor: '_Tuple2', _0: extraLets, _1: sD};
	});
var _user$project$Draw$pointWithSnapToXYExps = function (_p75) {
	var _p76 = _p75;
	var xExp = function () {
		var _p77 = _p76._0._1;
		if (_p77.ctor === 'NoSnap') {
			return _user$project$Lang$eConstDummyLoc0(
				_elm_lang$core$Basics$toFloat(_p76._0._0));
		} else {
			return _user$project$Lang$eHoleVal0(_p77._0);
		}
	}();
	var yExp = function () {
		var _p78 = _p76._1._1;
		if (_p78.ctor === 'NoSnap') {
			return _user$project$Lang$eConstDummyLoc(
				_elm_lang$core$Basics$toFloat(_p76._1._0));
		} else {
			return _user$project$Lang$eHoleVal(_p78._0);
		}
	}();
	return {ctor: '_Tuple2', _0: xExp, _1: yExp};
};
var _user$project$Draw$pointWithSnapToPairExp = function (pointWithSnap) {
	var _p79 = _user$project$Draw$pointWithSnapToXYExps(pointWithSnap);
	var xExp = _p79._0;
	var yExp = _p79._1;
	return _user$project$Lang$eTuple(
		{
			ctor: '::',
			_0: xExp,
			_1: {
				ctor: '::',
				_0: yExp,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Draw$maybeThaw0 = function (s) {
	return _elm_lang$core$Native_Utils.eq(s, '0') ? s : A2(_elm_lang$core$Basics_ops['++'], s, '?');
};
var _user$project$Draw$maybeThaw = function (n) {
	return (_elm_lang$core$Native_Utils.eq(n, 0) || _elm_lang$core$Native_Utils.eq(n, 1)) ? _elm_lang$core$Basics$toString(n) : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(n),
		'?');
};
var _user$project$Draw$perhapsPrepareRecursiveFunction = F2(
	function (someEIdAtTopLevelOfFunction, program) {
		var funcBody = A2(
			_user$project$LangTools$outerSameValueExp,
			program,
			A2(_user$project$LangTools$justFindExpByEId, program, someEIdAtTopLevelOfFunction));
		var maybeFuncEId = A2(
			_elm_lang$core$Maybe$map,
			function (_p80) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p80));
			},
			A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Maybe$Nothing,
				A2(_user$project$Lang$parentByEId, program, funcBody.val.eid)));
		var _p81 = maybeFuncEId;
		if (_p81.ctor === 'Just') {
			var _p82 = A2(_user$project$LangTools$findLetAndIdentBindingExpLoose, _p81._0, program);
			if (_p82.ctor === 'Just') {
				var _p87 = _p82._0._0;
				var _p86 = _p82._0._1;
				if (_user$project$LangTools$expToLetRec(_p87)) {
					var _p83 = _user$project$Lang$expEffectiveExp(funcBody).val.e__;
					switch (_p83.ctor) {
						case 'EIf':
							return program;
						case 'ECase':
							return program;
						case 'ETypeCase':
							return program;
						default:
							if (A2(
								_elm_lang$core$Set$member,
								_p86,
								_user$project$LangTools$freeIdentifiers(funcBody))) {
								var indentationAtLet = A2(_user$project$Lang$indentationAt, _p87.val.eid, program);
								var freshenedProgram = _user$project$FastParser$freshen(program);
								var dependencies = _user$project$StaticAnalysis$grossDependencies(freshenedProgram);
								var freshFuncBody = A2(_user$project$LangTools$justFindExpByEId, freshenedProgram, funcBody.val.eid);
								var recursiveVars = A2(
									_elm_lang$core$List$filter,
									function (_p84) {
										return A2(
											F2(
												function (x, y) {
													return _elm_lang$core$Native_Utils.eq(x, y);
												}),
											_p86,
											_user$project$LangTools$expToIdent(_p84));
									},
									_user$project$LangTools$freeVars(freshFuncBody));
								var findExpToWrap = function (e) {
									findExpToWrap:
									while (true) {
										var _p85 = {
											ctor: '_Tuple2',
											_0: _user$project$LangTools$expToMaybeLetBoundExp(e),
											_1: _user$project$LangTools$maybeSameLevelChild(e)
										};
										if (_p85._1.ctor === 'Just') {
											if (_p85._0.ctor === 'Just') {
												if (!_elm_lang$core$Native_Utils.eq(
													{ctor: '[]'},
													A2(
														_user$project$Utils$intersectAsSet,
														_user$project$Lang$flattenExpTree(_p85._0._0),
														recursiveVars))) {
													return e;
												} else {
													var _v33 = _p85._1._0;
													e = _v33;
													continue findExpToWrap;
												}
											} else {
												var _v34 = _p85._1._0;
												e = _v34;
												continue findExpToWrap;
											}
										} else {
											return e;
										}
									}
								};
								var expToWrap = findExpToWrap(freshFuncBody);
								var originalRetExp = _user$project$LangTools$lastSameLevelExp(freshFuncBody);
								var retExpDependsOnAnythingInRecursiveCase = A2(
									_user$project$Utils$anyOverlapListSet,
									A2(
										_user$project$Utils$diffAsSet,
										_user$project$Lang$allEIds(expToWrap),
										_user$project$Lang$allEIds(originalRetExp)),
									A2(_user$project$StaticAnalysis$eidDependencies, dependencies, originalRetExp.val.eid));
								var newFuncBody = A2(
									_user$project$Lang$indent,
									A2(_elm_lang$core$Basics_ops['++'], indentationAtLet, '  '),
									A3(
										_user$project$Lang$mapExpNode,
										expToWrap.val.eid,
										function (expToWrap) {
											if (retExpDependsOnAnythingInRecursiveCase) {
												return A2(
													_user$project$Lang$replacePrecedingWhitespace,
													'\n',
													A3(
														_user$project$Lang$eIf,
														_user$project$Lang$eHoleNamed('terminationCondition'),
														A2(
															_user$project$Lang$replacePrecedingWhitespace,
															'\n  ',
															_user$project$Lang$eTuple(
																{ctor: '[]'})),
														A2(
															_user$project$Lang$replacePrecedingWhitespace,
															'\n  ',
															A2(_user$project$Lang$replaceIndentation, '  ', expToWrap))));
											} else {
												var suggestedName = A2(_user$project$LangTools$expNameForEId, freshFuncBody, originalRetExp.val.eid);
												var nameForRetExp = A3(
													_user$project$LangTools$nonCollidingName,
													suggestedName,
													2,
													A2(
														_user$project$LangTools$visibleIdentifiersAtEIds,
														program,
														_elm_lang$core$Set$singleton(
															_user$project$LangTools$lastExp(funcBody).val.eid)));
												return A2(
													_user$project$Lang$eLet,
													{
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: nameForRetExp,
															_1: _user$project$LangTools$reflowBoundExpWhitespace(originalRetExp)
														},
														_1: {ctor: '[]'}
													},
													A2(
														_user$project$Lang$replacePrecedingWhitespace,
														'\n',
														A3(
															_user$project$Lang$eIf,
															_user$project$Lang$eHoleNamed('terminationCondition'),
															A2(
																_user$project$Lang$replacePrecedingWhitespace,
																'\n  ',
																_user$project$Lang$eVar(nameForRetExp)),
															A2(
																_user$project$Lang$replacePrecedingWhitespace,
																'\n  ',
																A3(
																	_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
																	originalRetExp.val.eid,
																	_user$project$Lang$eVar(nameForRetExp),
																	A2(_user$project$Lang$replaceIndentation, '  ', expToWrap))))));
											}
										},
										_user$project$Lang$unindent(freshFuncBody)));
								return A3(_user$project$Lang$replaceExpNode, funcBody.val.eid, newFuncBody, program);
							} else {
								return program;
							}
					}
				} else {
					return program;
				}
			} else {
				return program;
			}
		} else {
			return program;
		}
	});
var _user$project$Draw$addToEndOfDrawingContext = F3(
	function (old, varSuggestedName, exp) {
		var originalProgram = old.inputExp;
		var _p88 = A2(_user$project$FocusedEditingContext$contextExpAndEndOfDrawingContextExp, old.editingContext, originalProgram);
		var contextExp = _p88._0;
		var endOfDrawingContextExp = _p88._1;
		var varName = A3(
			_user$project$LangTools$nonCollidingName,
			varSuggestedName,
			2,
			A2(
				_user$project$LangTools$visibleIdentifiersAtEIds,
				originalProgram,
				_elm_lang$core$Set$singleton(
					_user$project$LangTools$lastExp(contextExp).val.eid)));
		var newProgram = A2(
			_elm_lang$core$Maybe$withDefault,
			originalProgram,
			_elm_lang$core$List$head(
				A5(
					_user$project$CodeMotion$resolveValueAndLocHoles,
					true,
					old.solutionsCache,
					old.syncOptions,
					old.maybeEnv,
					A2(
						_user$project$LangTools$logProgram,
						'addToEndOfDrawingContext about to resolve holes',
						A2(
							_user$project$Draw$perhapsPrepareRecursiveFunction,
							endOfDrawingContextExp.val.eid,
							A4(
								_user$project$LangTools$newLetAfterComments,
								endOfDrawingContextExp.val.eid,
								_user$project$Lang$pVar(varName),
								exp,
								originalProgram))))));
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				code: A2(_user$project$Syntax$unparser, old.syntax, newProgram)
			});
	});
var _user$project$Draw$addFunction = F4(
	function (fName, old, pt1, pt2) {
		var _p89 = A4(_user$project$Draw$newFunctionCallExp, fName, old, pt1, pt2);
		if ((_p89.ctor === 'Just') && (_p89._0.ctor === '_Tuple2')) {
			var _p90 = _p89._0._0;
			return A2(
				_elm_lang$core$Debug$log,
				'TypeDirectedFunctionUtils.clearlyNotShapeOrListOfShapesType returnType',
				_user$project$TypeDirectedFunctionUtils$clearlyNotShapeOrListOfShapesType(_p89._0._1)) ? A3(_user$project$Draw$addToEndOfDrawingContext, old, fName, _p90) : A3(_user$project$Draw$addShapeToModel, old, fName, _p90);
		} else {
			var _p91 = _user$project$Utils$log(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Could not draw function ',
					A2(_elm_lang$core$Basics_ops['++'], fName, '!')));
			return old;
		}
	});
var _user$project$Draw$horizontalVerticalSnap = F2(
	function (_p93, _p92) {
		var _p94 = _p93;
		var _p99 = _p94._1;
		var _p98 = _p94._0;
		var _p95 = _p92;
		var _p97 = _p95._1;
		var _p96 = _p95._0;
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Basics$abs(_p96 - _p98),
			_elm_lang$core$Basics$abs(_p97 - _p99)) > -1) ? ((_elm_lang$core$Native_Utils.cmp(_p96 - _p98, 0) > 0) ? {ctor: '_Tuple3', _0: _user$project$Lang$X, _1: _user$project$Lang$Positive, _2: _p96 - _p98} : {ctor: '_Tuple3', _0: _user$project$Lang$X, _1: _user$project$Lang$Negative, _2: _p98 - _p96}) : ((_elm_lang$core$Native_Utils.cmp(_p97 - _p99, 0) > 0) ? {ctor: '_Tuple3', _0: _user$project$Lang$Y, _1: _user$project$Lang$Positive, _2: _p97 - _p99} : {ctor: '_Tuple3', _0: _user$project$Lang$Y, _1: _user$project$Lang$Negative, _2: _p99 - _p97});
	});
var _user$project$Draw$addPoint = F2(
	function (old, _p100) {
		var _p101 = _p100;
		var originalProgram = old.inputExp;
		var contextExp = A2(_user$project$FocusedEditingContext$drawingContextExp, old.editingContext, originalProgram);
		var _p102 = A3(
			_user$project$LangTools$nonCollidingNames,
			{
				ctor: '::',
				_0: 'point',
				_1: {
					ctor: '::',
					_0: 'x',
					_1: {
						ctor: '::',
						_0: 'y',
						_1: {ctor: '[]'}
					}
				}
			},
			2,
			A2(
				_user$project$LangTools$visibleIdentifiersAtEIds,
				originalProgram,
				_elm_lang$core$Set$singleton(
					_user$project$LangTools$lastExp(contextExp).val.eid)));
		if ((((_p102.ctor === '::') && (_p102._1.ctor === '::')) && (_p102._1._1.ctor === '::')) && (_p102._1._1._1.ctor === '[]')) {
			var programWithPoint = A4(
				_user$project$LangTools$newLetAfterComments,
				contextExp.val.eid,
				A2(
					_user$project$Lang$pAs,
					_p102._0,
					_user$project$Lang$pList(
						{
							ctor: '::',
							_0: _user$project$Lang$pVar0(_p102._1._0),
							_1: {
								ctor: '::',
								_0: _user$project$Lang$pVar(_p102._1._1._0),
								_1: {ctor: '[]'}
							}
						})),
				_elm_lang$core$Basics$identity(
					_user$project$Lang$eTuple(
						{
							ctor: '::',
							_0: _user$project$Lang$eInt0(_p101._0),
							_1: {
								ctor: '::',
								_0: _user$project$Lang$eInt(_p101._1),
								_1: {ctor: '[]'}
							}
						})),
				originalProgram);
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					code: A2(_user$project$Syntax$unparser, old.syntax, programWithPoint)
				});
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Draw',
				{
					start: {line: 555, column: 3},
					end: {line: 563, column: 112}
				},
				_p102)('unsatisfied list length invariant in LangTools.nonCollidingNames or bug in Draw.addPoint');
		}
	});
var _user$project$Draw$addOffsetAndMaybePoint = F4(
	function (old, pt1, amountSnap, _p104) {
		var _p105 = _p104;
		var originalProgram = old.inputExp;
		var _p106 = pt1;
		var x1Int = _p106._0._0;
		var y1Int = _p106._1._0;
		var _p107 = A2(
			_user$project$Draw$horizontalVerticalSnap,
			{ctor: '_Tuple2', _0: x1Int, _1: y1Int},
			{ctor: '_Tuple2', _0: _p105._0, _1: _p105._1});
		var axis = _p107._0;
		var sign = _p107._1;
		var offsetAmount = _p107._2;
		if ((_elm_lang$core$Native_Utils.cmp(offsetAmount, 1) < 1) && _elm_lang$core$Native_Utils.eq(amountSnap, _user$project$InterfaceModel$NoSnap)) {
			return A2(
				_user$project$Draw$addPoint,
				old,
				{ctor: '_Tuple2', _0: x1Int, _1: y1Int});
		} else {
			var plusOrMinus = _elm_lang$core$Native_Utils.eq(sign, _user$project$Lang$Positive) ? _user$project$Lang$Plus : _user$project$Lang$Minus;
			var offsetAmountExp = function () {
				var _p108 = amountSnap;
				if (_p108.ctor === 'NoSnap') {
					return _user$project$Lang$eInt(offsetAmount);
				} else {
					return _user$project$Lang$eHoleVal(_p108._0);
				}
			}();
			var offsetFromExisting = function (baseVal) {
				var offsetSuggestedName = A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_user$project$Provenance$nameForVal, originalProgram, baseVal),
					'Offset');
				var offsetExp = A2(
					_user$project$Lang$eOp,
					plusOrMinus,
					{
						ctor: '::',
						_0: _user$project$Lang$eHoleVal(baseVal),
						_1: {
							ctor: '::',
							_0: offsetAmountExp,
							_1: {ctor: '[]'}
						}
					});
				return A3(_user$project$Draw$addToEndOfDrawingContext, old, offsetSuggestedName, offsetExp);
			};
			var otherCoordinateForValIs = F2(
				function (val, targetVal) {
					var _p109 = val.v_;
					if (((_p109.ctor === 'VConst') && (_p109._0.ctor === 'Just')) && (_p109._0._0.ctor === '_Tuple3')) {
						return A2(_user$project$Provenance$valEqFast, _p109._0._0._2, targetVal);
					} else {
						return false;
					}
				});
			var pointAndOffset = function (addPointAtBeginning) {
				var _p110 = A2(_user$project$FocusedEditingContext$contextExpAndEndOfDrawingContextExp, old.editingContext, originalProgram);
				var contextExp = _p110._0;
				var endOfDrawingContextExp = _p110._1;
				var _p111 = A3(
					_user$project$LangTools$nonCollidingNames,
					{
						ctor: '::',
						_0: 'point',
						_1: {
							ctor: '::',
							_0: 'x',
							_1: {
								ctor: '::',
								_0: 'y',
								_1: {
									ctor: '::',
									_0: 'x{n}Offset',
									_1: {
										ctor: '::',
										_0: 'y{n}Offset',
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					1,
					A2(
						_user$project$LangTools$visibleIdentifiersAtEIds,
						originalProgram,
						_elm_lang$core$Set$singleton(
							_user$project$LangTools$lastExp(endOfDrawingContextExp).val.eid)));
				if ((((((_p111.ctor === '::') && (_p111._1.ctor === '::')) && (_p111._1._1.ctor === '::')) && (_p111._1._1._1.ctor === '::')) && (_p111._1._1._1._1.ctor === '::')) && (_p111._1._1._1._1._1.ctor === '[]')) {
					var _p114 = _p111._1._1._0;
					var _p113 = _p111._1._0;
					var insertPointBeforeEId = addPointAtBeginning ? contextExp.val.eid : endOfDrawingContextExp.val.eid;
					var programWithPoint = _user$project$FastParser$freshen(
						A4(
							_user$project$LangTools$newLetAfterComments,
							insertPointBeforeEId,
							A2(
								_user$project$Lang$pAs,
								_p111._0,
								_user$project$Lang$pList(
									{
										ctor: '::',
										_0: _user$project$Lang$pVar0(_p113),
										_1: {
											ctor: '::',
											_0: _user$project$Lang$pVar(_p114),
											_1: {ctor: '[]'}
										}
									})),
							_user$project$Draw$makePointExpFromPointWithSnap(pt1),
							originalProgram));
					var _p112 = _elm_lang$core$Native_Utils.eq(axis, _user$project$Lang$X) ? {ctor: '_Tuple2', _0: _p111._1._1._1._0, _1: _p113} : {ctor: '_Tuple2', _0: _p111._1._1._1._1._0, _1: _p114};
					var offsetName = _p112._0;
					var offsetFromName = _p112._1;
					var programWithOffsetAndPoint = A2(
						_elm_lang$core$Maybe$withDefault,
						originalProgram,
						_elm_lang$core$List$head(
							A5(
								_user$project$CodeMotion$resolveValueAndLocHoles,
								true,
								old.solutionsCache,
								old.syncOptions,
								old.maybeEnv,
								A4(
									_user$project$LangTools$newLetAfterComments,
									endOfDrawingContextExp.val.eid,
									_user$project$Lang$pVar(offsetName),
									A2(
										_user$project$Lang$eOp,
										plusOrMinus,
										{
											ctor: '::',
											_0: _user$project$Lang$eVar(offsetFromName),
											_1: {
												ctor: '::',
												_0: offsetAmountExp,
												_1: {ctor: '[]'}
											}
										}),
									programWithPoint))));
					return _elm_lang$core$Native_Utils.update(
						old,
						{
							code: A2(_user$project$Syntax$unparser, old.syntax, programWithOffsetAndPoint)
						});
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Draw',
						{
							start: {line: 712, column: 7},
							end: {line: 734, column: 130}
						},
						_p111)('unsatisfied list length invariant in LangTools.nonCollidingNames or bug in Draw.addOffsetAndMaybePoint');
				}
			};
			var _p116 = {ctor: '_Tuple2', _0: axis, _1: pt1};
			_v44_4:
			do {
				if (_p116.ctor === '_Tuple2') {
					if (_p116._0.ctor === 'X') {
						if ((((_p116._1.ctor === '_Tuple2') && (_p116._1._0.ctor === '_Tuple2')) && (_p116._1._0._1.ctor === 'SnapVal')) && (_p116._1._1.ctor === '_Tuple2')) {
							if (_p116._1._1._1.ctor === 'NoSnap') {
								return offsetFromExisting(_p116._1._0._1._0);
							} else {
								var _p117 = _p116._1._0._1._0;
								return A2(otherCoordinateForValIs, _p117, _p116._1._1._1._0) ? offsetFromExisting(_p117) : pointAndOffset(false);
							}
						} else {
							break _v44_4;
						}
					} else {
						if ((_p116._1.ctor === '_Tuple2') && (_p116._1._0.ctor === '_Tuple2')) {
							if (_p116._1._0._1.ctor === 'NoSnap') {
								if ((_p116._1._1.ctor === '_Tuple2') && (_p116._1._1._1.ctor === 'SnapVal')) {
									return offsetFromExisting(_p116._1._1._1._0);
								} else {
									break _v44_4;
								}
							} else {
								if ((_p116._1._1.ctor === '_Tuple2') && (_p116._1._1._1.ctor === 'SnapVal')) {
									var _p118 = _p116._1._1._1._0;
									return A2(otherCoordinateForValIs, _p118, _p116._1._0._1._0) ? offsetFromExisting(_p118) : pointAndOffset(false);
								} else {
									break _v44_4;
								}
							}
						} else {
							break _v44_4;
						}
					}
				} else {
					break _v44_4;
				}
			} while(false);
			return pointAndOffset(true);
		}
	});
var _user$project$Draw$randomColor1 = function (model) {
	return A2(
		_user$project$Lang$eConst,
		_elm_lang$core$Basics$toFloat(model.randomColor),
		_user$project$Lang$dummyLoc);
};
var _user$project$Draw$randomColor = function (model) {
	return A2(
		_user$project$Lang$eConst0,
		_elm_lang$core$Basics$toFloat(model.randomColor),
		_user$project$Lang$dummyLoc);
};
var _user$project$Draw$addPolygonList = F2(
	function (old, listExp) {
		var polygonExp = A3(
			_user$project$Draw$makeCallWithLocals,
			{
				ctor: '::',
				_0: A2(
					_user$project$Draw$makeLet,
					{
						ctor: '::',
						_0: 'pts',
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: listExp,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Draw$makeLet,
						{
							ctor: '::',
							_0: 'color',
							_1: {
								ctor: '::',
								_0: 'strokeColor',
								_1: {
									ctor: '::',
									_0: 'strokeWidth',
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _user$project$Draw$randomColor(old),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Lang$eConst, 360, _user$project$Lang$dummyLoc),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Lang$eConst, 2, _user$project$Lang$dummyLoc),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			_user$project$Lang$eVar0('polygon'),
			{
				ctor: '::',
				_0: _user$project$Lang$eVar('color'),
				_1: {
					ctor: '::',
					_0: _user$project$Lang$eVar('strokeColor'),
					_1: {
						ctor: '::',
						_0: _user$project$Lang$eVar('strokeWidth'),
						_1: {
							ctor: '::',
							_0: _user$project$Lang$eVar('pts'),
							_1: {ctor: '[]'}
						}
					}
				}
			});
		return A3(_user$project$Draw$addShapeToModel, old, 'polygon', polygonExp);
	});
var _user$project$Draw$addPolygon = F2(
	function (old, pointsWithSnap) {
		var ePts = A2(
			_elm_lang$core$List$map,
			_user$project$Draw$pointWithSnapToPairExp,
			_elm_lang$core$List$reverse(pointsWithSnap));
		return A2(
			_user$project$Draw$addPolygonList,
			old,
			_user$project$Lang$eTuple(
				A3(_user$project$Lang$setExpListWhitespace, '', ' ', ePts)));
	});
var _user$project$Draw$addAbsolutePath = F2(
	function (old, keysAndPoints) {
		var _p119 = A3(_user$project$Draw$pathCommands, _elm_lang$core$Basics$toString, _elm_lang$core$Basics$toString, keysAndPoints);
		var extraLets = _p119._0;
		var sD = _p119._1;
		var pathExp = A3(
			_user$project$Draw$makeCallWithLocals,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_user$project$Draw$makeLet,
						{
							ctor: '::',
							_0: 'strokeColor',
							_1: {
								ctor: '::',
								_0: 'strokeWidth',
								_1: {
									ctor: '::',
									_0: 'color',
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _user$project$Draw$randomColor(old),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Lang$eConst, 5, _user$project$Lang$dummyLoc),
								_1: {
									ctor: '::',
									_0: _user$project$Draw$randomColor1(old),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					extraLets,
					{
						ctor: '::',
						_0: A2(
							_user$project$Draw$makeLet,
							{
								ctor: '::',
								_0: 'd',
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$Lang$eVar(sD),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					})),
			_user$project$Lang$eVar0('rawPath'),
			{
				ctor: '::',
				_0: _user$project$Lang$eVar('color'),
				_1: {
					ctor: '::',
					_0: _user$project$Lang$eVar('strokeColor'),
					_1: {
						ctor: '::',
						_0: _user$project$Lang$eVar('strokeWidth'),
						_1: {
							ctor: '::',
							_0: _user$project$Lang$eVar('d'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Lang$eConst, 0, _user$project$Lang$dummyLoc),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		return A3(_user$project$Draw$addShapeToModel, old, 'path', pathExp);
	});
var _user$project$Draw$addPath = F2(
	function (old, keysAndPoints) {
		return A2(_user$project$Draw$addAbsolutePath, old, keysAndPoints);
	});
var _user$project$Draw$strPt = function (_p120) {
	var _p121 = _p120;
	return _user$project$Utils$spaces(
		{
			ctor: '::',
			_0: _elm_lang$core$Basics$toString(_p121._0),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(_p121._1),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Draw$slicesPerQuadrant = 2;
var _user$project$Draw$radiansPerSlice = _elm_lang$core$Basics$pi / (2 * _user$project$Draw$slicesPerQuadrant);
var _user$project$Draw$snapLine = F3(
	function (keysDown, _p123, _p122) {
		var _p124 = _p123;
		var _p130 = _p124._1._0;
		var _p129 = _p124._0._0;
		var _p125 = _p122;
		var _p128 = _p125._1._0;
		var _p127 = _p125._0._0;
		if (_elm_lang$core$Native_Utils.eq(
			keysDown,
			{
				ctor: '::',
				_0: _user$project$Keys$keyShift,
				_1: {ctor: '[]'}
			})) {
			var _p126 = {ctor: '_Tuple2', _0: _p127 - _p129, _1: _p128 - _p130};
			var dx = _p126._0;
			var dy = _p126._1;
			var angle = A2(
				_elm_lang$core$Basics$atan2,
				_elm_lang$core$Basics$toFloat(0 - dy),
				_elm_lang$core$Basics$toFloat(dx));
			var slice = _elm_lang$core$Basics$round(angle / _user$project$Draw$radiansPerSlice);
			var r = A2(
				_user$project$Utils$distanceInt,
				{ctor: '_Tuple2', _0: _p127, _1: _p128},
				{ctor: '_Tuple2', _0: _p129, _1: _p130});
			var xb = _elm_lang$core$Basics$toFloat(_p129) + (r * _elm_lang$core$Basics$cos(
				_elm_lang$core$Basics$toFloat(slice) * _user$project$Draw$radiansPerSlice));
			var yb = _elm_lang$core$Basics$toFloat(_p130) - (r * _elm_lang$core$Basics$sin(
				_elm_lang$core$Basics$toFloat(slice) * _user$project$Draw$radiansPerSlice));
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$round(xb),
				_1: _elm_lang$core$Basics$round(yb)
			};
		} else {
			return {ctor: '_Tuple2', _0: _p127, _1: _p128};
		}
	});
var _user$project$Draw$squareBoundingBox = F2(
	function (_p132, _p131) {
		var _p133 = _p132;
		var _p140 = _p133._1;
		var _p139 = _p133._0;
		var _p134 = _p131;
		var _p138 = _p134._1;
		var _p137 = _p134._0;
		var _p135 = {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$abs(_p137 - _p139),
			_1: _elm_lang$core$Basics$abs(_p138 - _p140)
		};
		var xDiff = _p135._0;
		var yDiff = _p135._1;
		var _p136 = {
			ctor: '_Tuple3',
			_0: _elm_lang$core$Native_Utils.cmp(yDiff, xDiff) > 0,
			_1: _elm_lang$core$Native_Utils.cmp(_p139, _p137) < 0,
			_2: _elm_lang$core$Native_Utils.cmp(_p140, _p138) < 0
		};
		if (_p136._0 === true) {
			if (_p136._1 === true) {
				return {
					ctor: '_Tuple4',
					_0: _p139,
					_1: _p139 + yDiff,
					_2: A2(_elm_lang$core$Basics$min, _p140, _p138),
					_3: A2(_elm_lang$core$Basics$max, _p140, _p138)
				};
			} else {
				return {
					ctor: '_Tuple4',
					_0: _p139 - yDiff,
					_1: _p139,
					_2: A2(_elm_lang$core$Basics$min, _p140, _p138),
					_3: A2(_elm_lang$core$Basics$max, _p140, _p138)
				};
			}
		} else {
			if (_p136._2 === true) {
				return {
					ctor: '_Tuple4',
					_0: A2(_elm_lang$core$Basics$min, _p139, _p137),
					_1: A2(_elm_lang$core$Basics$max, _p139, _p137),
					_2: _p140,
					_3: _p140 + xDiff
				};
			} else {
				return {
					ctor: '_Tuple4',
					_0: A2(_elm_lang$core$Basics$min, _p139, _p137),
					_1: A2(_elm_lang$core$Basics$max, _p139, _p137),
					_2: _p140 - xDiff,
					_3: _p140
				};
			}
		}
	});
var _user$project$Draw$boundingBox = F2(
	function (_p142, _p141) {
		var _p143 = _p142;
		var _p148 = _p143._1;
		var _p147 = _p143._0;
		var _p144 = _p141;
		var _p146 = _p144._1;
		var _p145 = _p144._0;
		return {
			ctor: '_Tuple4',
			_0: A2(_elm_lang$core$Basics$min, _p147, _p145),
			_1: A2(_elm_lang$core$Basics$max, _p147, _p145),
			_2: A2(_elm_lang$core$Basics$min, _p148, _p146),
			_3: A2(_elm_lang$core$Basics$max, _p148, _p146)
		};
	});
var _user$project$Draw$guideStroke = A2(_user$project$LangSvg$attr, 'stroke', 'aqua');
var _user$project$Draw$dotStrokeWidth = A2(_user$project$LangSvg$attr, 'stroke-width', '2');
var _user$project$Draw$dotStroke = A2(_user$project$LangSvg$attr, 'stroke', 'black');
var _user$project$Draw$drawDotSize = 10;
var _user$project$Draw$dotSize = A2(
	_user$project$LangSvg$attr,
	'r',
	_elm_lang$core$Basics$toString(_user$project$Draw$drawDotSize));
var _user$project$Draw$dotFillCursor = A2(_user$project$LangSvg$attr, 'fill', 'none');
var _user$project$Draw$dotFillControlPt = A2(_user$project$LangSvg$attr, 'fill', 'green');
var _user$project$Draw$dotFill2 = A2(_user$project$LangSvg$attr, 'fill', 'orange');
var _user$project$Draw$dotFill = A2(_user$project$LangSvg$attr, 'fill', 'red');
var _user$project$Draw$defaultFill = A2(_user$project$LangSvg$attr, 'fill', 'gray');
var _user$project$Draw$defaultStrokeWidth = A2(_user$project$LangSvg$attr, 'stroke-width', '5');
var _user$project$Draw$defaultStroke = A2(_user$project$LangSvg$attr, 'stroke', 'gray');
var _user$project$Draw$defaultOpacity = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'opacity', _1: '0.5'},
		_1: {ctor: '[]'}
	});
var _user$project$Draw$boundingBoxOfPoints_ = function (pts) {
	var _p149 = _elm_lang$core$List$unzip(pts);
	var xs = _p149._0;
	var ys = _p149._1;
	var xMax = _user$project$Utils$fromJust(
		_elm_lang$core$List$maximum(xs));
	var xMin = _user$project$Utils$fromJust(
		_elm_lang$core$List$minimum(xs));
	var yMax = _user$project$Utils$fromJust(
		_elm_lang$core$List$maximum(ys));
	var yMin = _user$project$Utils$fromJust(
		_elm_lang$core$List$minimum(ys));
	return {ctor: '_Tuple4', _0: xMin, _1: xMax, _2: yMin, _3: yMax};
};
var _user$project$Draw$boundingBoxOfPoints = function (pts) {
	var pts_ = A2(
		_elm_lang$core$List$map,
		function (_p150) {
			var _p151 = _p150;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toFloat(_p151._0),
				_1: _elm_lang$core$Basics$toFloat(_p151._1)
			};
		},
		pts);
	var _p152 = _user$project$Draw$boundingBoxOfPoints_(pts_);
	var a = _p152._0;
	var b = _p152._1;
	var c = _p152._2;
	var d = _p152._3;
	return {
		ctor: '_Tuple4',
		_0: _elm_lang$core$Basics$round(a),
		_1: _elm_lang$core$Basics$round(b),
		_2: _elm_lang$core$Basics$round(c),
		_3: _elm_lang$core$Basics$round(d)
	};
};
var _user$project$Draw$colorInputAndOutput = '#C8B4A0';
var _user$project$Draw$colorOutput = '#91C5FF';
var _user$project$Draw$colorInput = '#FFA340';
var _user$project$Draw$colorLineNotSelected = '#FAB4D3';
var _user$project$Draw$colorLineSelected = '#B4FADB';
var _user$project$Draw$colorPointNotSelected = '#F5B038';
var _user$project$Draw$colorPointSelected = '#38F552';
var _user$project$Draw$pointZoneStyles = {
	radius: 9,
	stroke: 'black',
	strokeWidth: 3,
	fill: {shown: 'white', selectedShape: 'yellow', selectedBlob: 'aqua', hidden: 'rgba(0,0,0,0.0)'}
};
var _user$project$Draw$svgPath = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$path,
	{ctor: '[]'});
var _user$project$Draw$svgPolygon = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$polygon,
	{ctor: '[]'});
var _user$project$Draw$svgEllipse = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$ellipse,
	{ctor: '[]'});
var _user$project$Draw$svgCircle = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$circle,
	{ctor: '[]'});
var _user$project$Draw$drawDot = F2(
	function (fill, _p153) {
		var _p154 = _p153;
		return _user$project$Draw$svgCircle(
			{
				ctor: '::',
				_0: _user$project$Draw$dotSize,
				_1: {
					ctor: '::',
					_0: fill,
					_1: {
						ctor: '::',
						_0: _user$project$Draw$defaultOpacity,
						_1: {
							ctor: '::',
							_0: _user$project$Draw$dotStroke,
							_1: {
								ctor: '::',
								_0: _user$project$Draw$dotStrokeWidth,
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'cx',
										_elm_lang$core$Basics$toString(_p154._0)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'cy',
											_elm_lang$core$Basics$toString(_p154._1)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$Draw$drawNewPolygon = F2(
	function (ptLast, points) {
		var allRawPoints = A2(
			_elm_lang$core$List$map,
			function (_p155) {
				var _p156 = _p155;
				return {ctor: '_Tuple2', _0: _p156._0._0, _1: _p156._1._0};
			},
			{ctor: '::', _0: ptLast, _1: points});
		var _p157 = _user$project$Utils$last_(allRawPoints);
		var xInit = _p157._0;
		var yInit = _p157._1;
		var redDot = A2(
			_user$project$Draw$drawDot,
			_user$project$Draw$dotFill,
			{ctor: '_Tuple2', _0: xInit, _1: yInit});
		var clearDots = A2(
			_elm_lang$core$List$map,
			_user$project$Draw$drawDot(_user$project$Draw$dotFillCursor),
			allRawPoints);
		var maybeShape = function () {
			var _p158 = allRawPoints;
			if ((_p158.ctor === '::') && (_p158._1.ctor === '[]')) {
				return {ctor: '[]'};
			} else {
				var polyPoints = _elm_lang$core$List$reverse(allRawPoints);
				var sPoints = _user$project$Utils$spaces(
					A2(
						_elm_lang$core$List$map,
						function (_p159) {
							var _p160 = _p159;
							return A2(
								_elm_lang$core$String$join,
								',',
								A2(
									_elm_lang$core$List$map,
									_elm_lang$core$Basics$toString,
									{
										ctor: '::',
										_0: _p160._0,
										_1: {
											ctor: '::',
											_0: _p160._1,
											_1: {ctor: '[]'}
										}
									}));
						},
						polyPoints));
				return {
					ctor: '::',
					_0: _user$project$Draw$svgPolygon(
						{
							ctor: '::',
							_0: _user$project$Draw$defaultStroke,
							_1: {
								ctor: '::',
								_0: _user$project$Draw$defaultStrokeWidth,
								_1: {
									ctor: '::',
									_0: _user$project$Draw$defaultFill,
									_1: {
										ctor: '::',
										_0: _user$project$Draw$defaultOpacity,
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'points', sPoints),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				};
			}
		}();
		return {
			ctor: '::',
			_0: redDot,
			_1: A2(_elm_lang$core$Basics_ops['++'], clearDots, maybeShape)
		};
	});
var _user$project$Draw$svgXYDot = F5(
	function (dotScalingFactor, _p161, fill, isVisible, extraAttrs) {
		var _p162 = _p161;
		return _user$project$Draw$svgCircle(
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_user$project$LangSvg$attr,
						'cx',
						_elm_lang$core$Basics$toString(_p162._0)),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'cy',
							_elm_lang$core$Basics$toString(_p162._1)),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'fill', fill),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'stroke', _user$project$Draw$pointZoneStyles.stroke),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'stroke-width',
										_elm_lang$core$Basics$toString(_user$project$Draw$pointZoneStyles.strokeWidth * dotScalingFactor)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'r',
											isVisible ? _elm_lang$core$Basics$toString(_user$project$Draw$pointZoneStyles.radius * dotScalingFactor) : '0'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				extraAttrs));
	});
var _user$project$Draw$drawNewFunction = F5(
	function (dotScalingFactor, fName, model, pt1, pt2) {
		var inputPtDots = function () {
			var _p163 = pt1;
			var x1 = _p163._0._0;
			var x1Snap = _p163._0._1;
			var y1 = _p163._1._0;
			var y1Snap = _p163._1._1;
			var _p164 = pt2;
			var x2 = _p164._0._0;
			var x2Snap = _p164._0._1;
			var y2 = _p164._1._0;
			var y2Snap = _p164._1._1;
			var dot1 = (_elm_lang$core$Native_Utils.eq(x1Snap, _user$project$InterfaceModel$NoSnap) || _elm_lang$core$Native_Utils.eq(y1Snap, _user$project$InterfaceModel$NoSnap)) ? {
				ctor: '::',
				_0: A5(
					_user$project$Draw$svgXYDot,
					dotScalingFactor,
					{ctor: '_Tuple2', _0: x1, _1: y1},
					_user$project$Draw$pointZoneStyles.fill.shown,
					true,
					{
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'opacity', '0.4'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			} : {ctor: '[]'};
			var dot2 = (_elm_lang$core$Native_Utils.eq(x2Snap, _user$project$InterfaceModel$NoSnap) || _elm_lang$core$Native_Utils.eq(y2Snap, _user$project$InterfaceModel$NoSnap)) ? {
				ctor: '::',
				_0: A5(
					_user$project$Draw$svgXYDot,
					dotScalingFactor,
					{ctor: '_Tuple2', _0: x2, _1: y2},
					_user$project$Draw$pointZoneStyles.fill.shown,
					true,
					{
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'opacity', '0.4'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			} : {ctor: '[]'};
			return A2(_elm_lang$core$Basics_ops['++'], dot1, dot2);
		}();
		return A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			inputPtDots,
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				A2(
					_elm_lang$core$Maybe$andThen,
					function (_p165) {
						var _p166 = _p165;
						var _p173 = _p166._1;
						var pseudoProgram = _user$project$LangSimplify$removeUnusedLetPats(
							A3(
								_user$project$Lang$replaceExpNode,
								_user$project$LangTools$lastSameLevelExp(model.inputExp).val.eid,
								_p166._0,
								model.inputExp));
						if (_user$project$Types$isPointType(_p173) || _user$project$Types$isPointListType(_p173)) {
							var maybePoints = A2(
								_elm_lang$core$Maybe$andThen,
								function (_p167) {
									var _p168 = _p167;
									var _p170 = _p168._0._0;
									return A2(
										_user$project$Utils$orMaybe,
										A2(
											_elm_lang$core$Maybe$andThen,
											function (_p169) {
												return _user$project$Utils$projJusts(
													A2(_elm_lang$core$List$map, _user$project$Lang$valToMaybePoint, _p169));
											},
											_user$project$Lang$vListToMaybeVals(_p170)),
										A2(
											_elm_lang$core$Maybe$map,
											_elm_lang$core$List$singleton,
											_user$project$Lang$valToMaybePoint(_p170)));
								},
								_elm_lang$core$Result$toMaybe(
									A2(
										_user$project$Utils$perhapsLogError,
										'drawNewFunction error',
										A4(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, _user$project$Eval$initEnv, pseudoProgram))));
							return A2(
								_elm_lang$core$Maybe$map,
								_elm_lang$core$List$map(
									function (_p171) {
										var _p172 = _p171;
										return A5(
											_user$project$Draw$svgXYDot,
											dotScalingFactor,
											{ctor: '_Tuple2', _0: _p172._0, _1: _p172._1},
											_user$project$Draw$pointZoneStyles.fill.shown,
											true,
											{ctor: '[]'});
									}),
								maybePoints);
						} else {
							return A2(
								_elm_lang$core$Maybe$map,
								_user$project$LangSvg$maybeInlineListOfShapes,
								_elm_lang$core$Result$toMaybe(
									A2(
										_user$project$Utils$perhapsLogError,
										'drawNewFunction error',
										A3(_user$project$LangSvg$evalToSvg, _user$project$Syntax$Elm, _user$project$Eval$initEnv, pseudoProgram))));
						}
					},
					A4(_user$project$Draw$newFunctionCallExp, fName, model, pt1, pt2))));
	});
var _user$project$Draw$svgRect = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$rect,
	{ctor: '[]'});
var _user$project$Draw$svgLine = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$line,
	{ctor: '[]'});
var _user$project$Draw$debugLog = _user$project$Config$debugLog(_user$project$Config$debugController);

var _user$project$FindRepeatTools$isRepetitionFunctionType = function (tipe) {
	var _p0 = _user$project$Types$typeToMaybeArgTypesAndReturnType(tipe);
	if ((_p0.ctor === 'Just') && (_p0._0.ctor === '_Tuple2')) {
		return A2(_elm_lang$core$List$any, _user$project$Types$isPointType, _p0._0._0) && A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				_user$project$Types$isPointType,
				_user$project$Types$maybeListElementsType(_p0._0._1)));
	} else {
		return false;
	}
};
var _user$project$FindRepeatTools$getRepetitionFunctions = F3(
	function (program, idToTypeAndContextThunk, editingContext) {
		return A4(_user$project$TypeDirectedFunctionUtils$getFunctionsByPredicateOnType, _user$project$FindRepeatTools$isRepetitionFunctionType, idToTypeAndContextThunk, program, editingContext);
	});

var _user$project$ValueBasedTransform$featurePoints = function (featuresAndEquations) {
	featurePoints:
	while (true) {
		var _p0 = featuresAndEquations;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p7 = _p0._0;
			var _p6 = _p0._1;
			var _p1 = _p7;
			var feature = _p1._0;
			if (!_user$project$ShapeWidgets$featureIsXOrY(feature)) {
				var _v1 = _p6;
				featuresAndEquations = _v1;
				continue featurePoints;
			} else {
				var maybePairedFeatureAndEquation = A2(
					_user$project$Utils$findFirst,
					function (_p2) {
						var _p3 = _p2;
						return A2(_user$project$ShapeWidgets$featuresAreXYPairs, feature, _p3._0);
					},
					_p6);
				var _p4 = maybePairedFeatureAndEquation;
				if (_p4.ctor === 'Just') {
					var _p5 = _p4._0;
					var pairToReturn = _user$project$ShapeWidgets$featureIsX(feature) ? {ctor: '_Tuple2', _0: _p7, _1: _p5} : {ctor: '_Tuple2', _0: _p5, _1: _p7};
					var remainingFeatures = A2(_user$project$Utils$removeFirst, _p5, _p6);
					return {
						ctor: '::',
						_0: pairToReturn,
						_1: _user$project$ValueBasedTransform$featurePoints(remainingFeatures)
					};
				} else {
					var _v4 = _p6;
					featuresAndEquations = _v4;
					continue featurePoints;
				}
			}
		}
	}
};
var _user$project$ValueBasedTransform$applyRemovedLocIdToMathExp_ = F2(
	function (_p8, mathExp) {
		var _p9 = _p8;
		var _p12 = _p9._1;
		var _p11 = _p9._0;
		var _p10 = mathExp;
		switch (_p10.ctor) {
			case 'MathNum':
				return mathExp;
			case 'MathVar':
				return _elm_lang$core$Native_Utils.eq(_p10._0, _p11) ? _p12 : mathExp;
			default:
				return A2(
					_user$project$Lang$MathOp,
					_p10._0,
					A2(
						_elm_lang$core$List$map,
						_user$project$ValueBasedTransform$applyRemovedLocIdToMathExp_(
							{ctor: '_Tuple2', _0: _p11, _1: _p12}),
						_p10._1));
		}
	});
var _user$project$ValueBasedTransform$applyRemovedLocIdToMathExp = F2(
	function (removedLocIdToMathExp, mathExp) {
		return A3(_elm_lang$core$List$foldl, _user$project$ValueBasedTransform$applyRemovedLocIdToMathExp_, mathExp, removedLocIdToMathExp);
	});
var _user$project$ValueBasedTransform$featureEquationToMathExp_ = function (featureEqn) {
	var _p13 = featureEqn;
	if (_p13.ctor === 'EqnNum') {
		return _user$project$Lang$valToTrace(_p13._0);
	} else {
		return A2(
			_user$project$Lang$MathOp,
			_p13._0,
			A2(_elm_lang$core$List$map, _user$project$ValueBasedTransform$featureEquationToMathExp_, _p13._1));
	}
};
var _user$project$ValueBasedTransform$featureEquationToMathExp = F2(
	function (removedLocIdToMathExp, featureEqn) {
		return A2(
			_user$project$ValueBasedTransform$applyRemovedLocIdToMathExp,
			removedLocIdToMathExp,
			_user$project$ValueBasedTransform$featureEquationToMathExp_(featureEqn));
	});
var _user$project$ValueBasedTransform$equationLocIds = F2(
	function (unfrozenLocIdSet, featureEqn) {
		return _user$project$Utils$dedup(
			A2(
				_elm_lang$core$List$concatMap,
				function (_p14) {
					return _elm_lang$core$Set$toList(
						A2(
							_user$project$Sync$unfrozenTraceLocIdSet,
							unfrozenLocIdSet,
							_elm_lang$core$Tuple$second(_p14)));
				},
				_user$project$ShapeWidgets$equationNumTrs(featureEqn)));
	});
var _user$project$ValueBasedTransform$locIdToWidgetDeclOf = function (exp) {
	return A3(
		_user$project$Lang$foldExpViaE__,
		F2(
			function (e__, dict) {
				var _p15 = e__;
				if ((_p15.ctor === 'EConst') && (_p15._2.ctor === '_Tuple3')) {
					return A3(_elm_lang$core$Dict$insert, _p15._2._0, _p15._3, dict);
				} else {
					return dict;
				}
			}),
		_elm_lang$core$Dict$empty,
		exp);
};
var _user$project$ValueBasedTransform$locIdToWidgetDeclLittleOf = function (exp) {
	return A2(
		_elm_lang$core$Dict$map,
		F2(
			function (locId, wd) {
				return _user$project$LangUnparser$unparseWD(wd);
			}),
		_user$project$ValueBasedTransform$locIdToWidgetDeclOf(exp));
};
var _user$project$ValueBasedTransform$locIdToNumberAndLocOf = function (exp) {
	return A3(
		_user$project$Lang$foldExpViaE__,
		F2(
			function (e__, dict) {
				var _p16 = e__;
				if ((_p16.ctor === 'EConst') && (_p16._2.ctor === '_Tuple3')) {
					var _p17 = _p16._2._0;
					return A3(
						_elm_lang$core$Dict$insert,
						_p17,
						{
							ctor: '_Tuple2',
							_0: _p16._1,
							_1: {ctor: '_Tuple3', _0: _p17, _1: _p16._2._1, _2: _p16._2._2}
						},
						dict);
				} else {
					return dict;
				}
			}),
		_elm_lang$core$Dict$empty,
		exp);
};
var _user$project$ValueBasedTransform$variableifyConstantsAndWrapTargetExpWithLets = F4(
	function (locIdToNewName, listOfListsOfNamesAndAssigns, targetExp, program) {
		var targetExpReplaced = A2(_user$project$LangTools$replaceConstsWithVars, locIdToNewName, targetExp);
		var newProgram = A3(
			_user$project$LangTools$wrapWithLets,
			listOfListsOfNamesAndAssigns,
			targetExp.val.eid,
			A3(_user$project$Lang$replaceExpNodeE__ByEId, targetExp.val.eid, targetExpReplaced.val.e__, program));
		return _user$project$FastParser$freshen(newProgram);
	});
var _user$project$ValueBasedTransform$abstract_ = F8(
	function (program, originalProgramUniqueNames, editingContext, uniqueNameToOldName, outputEId, slurpedBindingsFilter, computeExpsGroupsToArgumentize, postProcessBeforeProblemResolution) {
		var insertionLocationEIds = A2(_user$project$FocusedEditingContext$insertionLocationEIdsForContext, editingContext, program);
		var possibleSimpleExpansions = A2(
			_elm_lang$core$List$map,
			function (_p18) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(_p18));
			},
			_user$project$Lang$expEffectiveExps(
				A2(_user$project$LangTools$outerSameValueExpByEId, originalProgramUniqueNames, outputEId)));
		return A2(
			_elm_lang$core$List$concatMap,
			function (outputEId) {
				var funcSuggestedName = A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_user$project$LangTools$expNameForEId, program, outputEId),
					'Func');
				var funcName = A3(
					_user$project$LangTools$nonCollidingName,
					funcSuggestedName,
					2,
					A2(
						_user$project$LangTools$visibleIdentifiersAtEIds,
						program,
						_elm_lang$core$Set$singleton(outputEId)));
				var uniqueNamesToAvoid = A2(
					_elm_lang$core$Set$union,
					_user$project$LangTools$identifiersSetPlusPrelude(program),
					_elm_lang$core$Set$fromList(
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: funcSuggestedName,
								_1: {
									ctor: '::',
									_0: funcName,
									_1: {ctor: '[]'}
								}
							},
							_elm_lang$core$Dict$keys(uniqueNameToOldName))));
				var funcUniqueName = A3(_user$project$LangTools$nonCollidingName, funcSuggestedName, 2, uniqueNamesToAvoid);
				var uniqueNameToOldName2 = A3(_elm_lang$core$Dict$insert, funcUniqueName, funcName, uniqueNameToOldName);
				var returnExp = A2(_user$project$LangTools$justFindExpByEId, originalProgramUniqueNames, outputEId);
				var _p19 = A3(_user$project$CodeMotion$gatherUniqueDependencies_, returnExp, originalProgramUniqueNames, slurpedBindingsFilter);
				var funcBodyAfterSlurpingBeforeArgumentization = _p19._0;
				var programUniqueNamesBindingsRemoved = _p19._1;
				var expsGroupsToArgumentize = computeExpsGroupsToArgumentize(funcBodyAfterSlurpingBeforeArgumentization);
				var funcLocation = A3(
					_user$project$LangTools$deepestCommonAncestorOrSelfWithNewline,
					programUniqueNamesBindingsRemoved,
					function (e) {
						return A2(_elm_lang$core$Set$member, e.val.eid, insertionLocationEIds);
					},
					function (_p20) {
						return A2(
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								}),
							returnExp.val.eid,
							function (_) {
								return _.eid;
							}(
								function (_) {
									return _.val;
								}(_p20)));
					});
				return A2(
					_elm_lang$core$List$concatMap,
					function (expsToArgumentize) {
						var allProgramPats = A2(
							_elm_lang$core$List$concatMap,
							_user$project$Lang$flattenPatTree,
							_user$project$LangTools$allRootPats(originalProgramUniqueNames));
						var _p21 = A2(_elm_lang$core$List$partition, _user$project$Lang$isVar, expsToArgumentize);
						var varsToArgumentize = _p21._0;
						var otherExpsToArgumentize = _p21._1;
						var _p22 = A3(
							_user$project$Utils$foldl,
							{
								ctor: '_Tuple2',
								_0: {ctor: '[]'},
								_1: varsToArgumentize
							},
							F2(
								function (pat, _p23) {
									var _p24 = _p23;
									var _p32 = _p24._1;
									var _p31 = _p24;
									var _p25 = pat.val.p__;
									if (_p25.ctor === 'PAs') {
										var remainingIdentsToArgumentize = A2(_elm_lang$core$List$map, _user$project$LangTools$expToIdent, _p32);
										var patWithUnusedRemoved = A2(
											_user$project$Lang$mapPat,
											function (pat) {
												var _p26 = pat.val.p__;
												switch (_p26.ctor) {
													case 'PVar':
														return A2(_elm_lang$core$List$member, _p26._1, remainingIdentsToArgumentize) ? pat : A2(
															_user$project$Lang$replaceP__PreservingPrecedingWhitespace,
															pat,
															_user$project$Lang$PWildcard(_user$project$Lang$space1));
													case 'PAs':
														var _p29 = _p26._1;
														var _p28 = _p26._3;
														var _p27 = {
															ctor: '_Tuple2',
															_0: A2(_elm_lang$core$List$member, _p29, remainingIdentsToArgumentize),
															_1: _user$project$Lang$isPWildcard(_p28)
														};
														if ((_p27.ctor === '_Tuple2') && (_p27._0 === true)) {
															if (_p27._1 === false) {
																return pat;
															} else {
																return A2(
																	_user$project$Lang$replaceP__PreservingPrecedingWhitespace,
																	pat,
																	A3(_user$project$Lang$PVar, _user$project$Lang$space0, _p29, _user$project$Lang$noWidgetDecl));
															}
														} else {
															return A2(_user$project$Lang$copyPrecedingWhitespacePat, pat, _p28);
														}
													case 'PConst':
														return A2(
															_user$project$Lang$replaceP__PreservingPrecedingWhitespace,
															pat,
															_user$project$Lang$PWildcard(_user$project$Lang$space1));
													case 'PBase':
														return A2(
															_user$project$Lang$replaceP__PreservingPrecedingWhitespace,
															pat,
															_user$project$Lang$PWildcard(_user$project$Lang$space1));
													case 'PList':
														return A2(
															_elm_lang$core$List$all,
															_user$project$Lang$isPWildcard,
															_user$project$Lang$childPats(pat)) ? A2(
															_user$project$Lang$replaceP__PreservingPrecedingWhitespace,
															pat,
															_user$project$Lang$PWildcard(_user$project$Lang$space1)) : pat;
													case 'PParens':
														return A2(_user$project$Lang$copyPrecedingWhitespacePat, pat, _p26._1);
													default:
														return pat;
												}
											},
											pat);
										var _p30 = _user$project$LangTools$identifiersListInPat(patWithUnusedRemoved);
										if (_p30.ctor === '[]') {
											return _p31;
										} else {
											if (_p30._1.ctor === '[]') {
												return _p31;
											} else {
												var argPat = patWithUnusedRemoved;
												return {
													ctor: '_Tuple2',
													_0: A2(
														_elm_lang$core$Basics_ops['++'],
														_p24._0,
														{
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: argPat,
																_1: _user$project$Lang$eVar(_p25._1)
															},
															_1: {ctor: '[]'}
														}),
													_1: A2(
														_elm_lang$core$List$filter,
														function ($var) {
															return !A2(
																_elm_lang$core$List$member,
																_user$project$LangTools$expToIdent($var),
																_user$project$LangTools$identifiersListInPat(argPat));
														},
														_p32)
												};
											}
										}
									} else {
										return _p31;
									}
								}),
							allProgramPats);
						var nonPVarArgPatExpsForVars = _p22._0;
						var remainingVarsToArgumentize = _p22._1;
						var argPVarExpsForVars = A2(
							_elm_lang$core$List$map,
							function (uniqueIdent) {
								var _p34 = A2(
									_user$project$Utils$findFirst,
									function (_p33) {
										return A2(
											F2(
												function (x, y) {
													return _elm_lang$core$Native_Utils.eq(x, y);
												}),
											_elm_lang$core$Maybe$Just(uniqueIdent),
											_user$project$LangTools$patToMaybeIdent(_p33));
									},
									allProgramPats);
								if (_p34.ctor === 'Just') {
									return {
										ctor: '_Tuple2',
										_0: A2(
											_user$project$Lang$replaceP__PreservingPrecedingWhitespace,
											_p34._0,
											A3(_user$project$Lang$PVar, _user$project$Lang$space0, uniqueIdent, _user$project$Lang$noWidgetDecl)),
										_1: _user$project$Lang$eVar(uniqueIdent)
									};
								} else {
									var _p35 = _user$project$Utils$log(
										A2(_elm_lang$core$Basics_ops['++'], 'abstract shouldn\'t happen: couldn\'t find existing program pattern for argument name ', uniqueIdent));
									return {
										ctor: '_Tuple2',
										_0: _user$project$Lang$pVar(uniqueIdent),
										_1: _user$project$Lang$eVar(uniqueIdent)
									};
								}
							},
							A2(_elm_lang$core$List$map, _user$project$LangTools$expToIdent, remainingVarsToArgumentize));
						var _p36 = A3(
							_user$project$Utils$foldl,
							{
								ctor: '_Tuple3',
								_0: {ctor: '[]'},
								_1: funcBodyAfterSlurpingBeforeArgumentization,
								_2: uniqueNameToOldName2
							},
							F2(
								function (expToArgumentize, _p37) {
									var _p38 = _p37;
									var _p45 = _p38._2;
									var _p44 = _p38._1;
									var _p43 = _p38._0;
									var simpleVarArg = function (_p39) {
										var _p40 = _p39;
										var suggestedName = A2(_user$project$LangTools$expNameForEId, program, expToArgumentize.val.eid);
										var name = A3(
											_user$project$LangTools$nonCollidingName,
											suggestedName,
											2,
											A2(
												_user$project$LangTools$visibleIdentifiersAtEIds,
												program,
												_elm_lang$core$Set$singleton(expToArgumentize.val.eid)));
										var uniqueNamesToAvoid = _user$project$Utils$unionAll(
											{
												ctor: '::',
												_0: _user$project$LangTools$identifiersSetPlusPrelude(program),
												_1: {
													ctor: '::',
													_0: _user$project$LangTools$identifiersSet(_p44),
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Set$fromList(
															A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: suggestedName,
																	_1: {
																		ctor: '::',
																		_0: name,
																		_1: {ctor: '[]'}
																	}
																},
																_elm_lang$core$Dict$keys(_p45))),
														_1: {ctor: '[]'}
													}
												}
											});
										var uniqueName = A3(_user$project$LangTools$nonCollidingName, suggestedName, 2, uniqueNamesToAvoid);
										var argPat = A2(
											_user$project$Info$copyInfo,
											expToArgumentize,
											_user$project$Lang$pVar(uniqueName));
										return {
											ctor: '_Tuple3',
											_0: A2(
												_elm_lang$core$Basics_ops['++'],
												_p43,
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: argPat, _1: expToArgumentize},
													_1: {ctor: '[]'}
												}),
											_1: A3(
												_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
												expToArgumentize.val.eid,
												_user$project$Lang$eVar(uniqueName),
												_p44),
											_2: A3(_elm_lang$core$Dict$insert, uniqueName, name, _p45)
										};
									};
									var _p41 = A2(_user$project$LangTools$findLetAndPatMatchingExpLoose, expToArgumentize.val.eid, _p44);
									if ((_p41.ctor === 'Just') && (_p41._0.ctor === '_Tuple2')) {
										var _p42 = A2(_user$project$CodeMotion$pluckByPId, _p41._0._1.val.pid, _p44);
										if ((((_p42.ctor === 'Just') && (_p42._0.ctor === '_Tuple2')) && (_p42._0._0.ctor === '_Tuple3')) && (_p42._0._0._2 === false)) {
											return {
												ctor: '_Tuple3',
												_0: A2(
													_elm_lang$core$Basics_ops['++'],
													_p43,
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: _p42._0._0._0, _1: _p42._0._0._1},
														_1: {ctor: '[]'}
													}),
												_1: _p42._0._1,
												_2: _p45
											};
										} else {
											return simpleVarArg(
												{ctor: '_Tuple0'});
										}
									} else {
										return simpleVarArg(
											{ctor: '_Tuple0'});
									}
								}),
							otherExpsToArgumentize);
						var argPatExpsForOtherExps = _p36._0;
						var funcBody = _p36._1;
						var uniqueNameToOldName3 = _p36._2;
						var _p46 = _elm_lang$core$List$unzip(
							A2(
								_elm_lang$core$List$sortBy,
								function (_p47) {
									var _p48 = _p47;
									return _user$project$Info$parsedThingToLocation(_p48._0);
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									argPVarExpsForVars,
									A2(_elm_lang$core$Basics_ops['++'], nonPVarArgPatExpsForVars, argPatExpsForOtherExps))));
						var argPats = _p46._0;
						var argExps = _p46._1;
						var call = A2(
							_user$project$Lang$setEId,
							outputEId,
							A2(
								_user$project$Lang$eCall,
								funcUniqueName,
								A2(
									_elm_lang$core$List$map,
									_user$project$Lang$replacePrecedingWhitespace(' '),
									argExps)));
						var programWithCall = A3(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, outputEId, call, programUniqueNamesBindingsRemoved);
						var insertedLetEId = _user$project$FastParser$maxId(programWithCall) + 1;
						var funcLet = A6(
							_user$project$LangTools$newLetFancyWhitespace,
							insertedLetEId,
							false,
							_user$project$Lang$pVar(funcUniqueName),
							A2(
								_user$project$Lang$eFun,
								A3(_user$project$Lang$setPatListWhitespace, '', ' ', argPats),
								A2(
									_user$project$Lang$indent,
									'  ',
									A2(
										_user$project$Lang$replacePrecedingWhitespace,
										'\n',
										_user$project$Lang$unindent(funcBody)))),
							A2(_user$project$LangTools$justFindExpByEId, programWithCall, funcLocation.val.eid),
							programWithCall);
						var programWithCallAndFunc = _user$project$LangSimplify$simplifyAssignments(
							A3(_user$project$Lang$replaceExpNode, funcLocation.val.eid, funcLet, programWithCall));
						var programsWithCallAndFuncPostProcessedAndCaption = A4(postProcessBeforeProblemResolution, programWithCallAndFunc, call, argExps, uniqueNameToOldName3);
						return ((_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$List$length(argPats),
							0) > 0) && (_elm_lang$core$Native_Utils.cmp(
							_user$project$LangTools$nodeCount(funcBody),
							A2(
								_elm_lang$core$Basics$max,
								5,
								2 * _elm_lang$core$List$length(argPats))) > -1)) ? A2(
							_elm_lang$core$List$map,
							_user$project$InterfaceModel$setResultSafe(true),
							A2(
								_elm_lang$core$List$concatMap,
								function (_p49) {
									var _p50 = _p49;
									return A9(
										_user$project$CodeMotion$programOriginalNamesAndMaybeRenamedLiftedTwiddledResults,
										_p50._1,
										uniqueNameToOldName3,
										_elm_lang$core$Maybe$Nothing,
										{ctor: '_Tuple2', _0: 'new', _1: 'old'},
										A2(
											_elm_lang$core$Set$insert,
											funcUniqueName,
											_user$project$LangTools$identifiersSetInPats(argPats)),
										{ctor: '[]'},
										_elm_lang$core$Dict$empty,
										originalProgramUniqueNames,
										_p50._0);
								},
								programsWithCallAndFuncPostProcessedAndCaption)) : {ctor: '[]'};
					},
					expsGroupsToArgumentize);
			},
			possibleSimpleExpansions);
	});
var _user$project$ValueBasedTransform$repeat_ = function (program) {
	return function (showPreludeOffsets) {
		return function (editingContext) {
			return function (maybeEnv) {
				return function (maybeMakePointsExpAndRepeatingOverWhatDesc) {
					return function (selectedFeatures) {
						return function (selectedShapes) {
							return function (selectedBlobs) {
								return function (slideNumber) {
									return function (movieNumber) {
										return function (movieTime) {
											return function (solutionsCache) {
												return function (syncOptions) {
													var drawingScopeEId = A2(_user$project$FocusedEditingContext$eidAtEndOfDrawingContext, editingContext, program);
													var model = {slideNumber: slideNumber, movieNumber: movieNumber, movieTime: movieTime, syntax: _user$project$Syntax$Elm, solutionsCache: solutionsCache, syncOptions: syncOptions, showPreludeOffsets: showPreludeOffsets, maybeEnv: maybeEnv, editingContext: editingContext};
													var _p51 = A2(_user$project$InterfaceModel$runAndResolveAtContext, model, program);
													if (_p51.ctor === 'Err') {
														return {ctor: '[]'};
													} else {
														var _p90 = _p51._0._1;
														var _p89 = _p51._0._2;
														var _p52 = _user$project$LangTools$assignUniqueNames(program);
														var originalProgramUniqueNames = _p52._0;
														var uniqueNameToOldName = _p52._1;
														var selectedVals = A5(_user$project$ShapeWidgets$selectedVals, _p89, _p90, selectedFeatures, selectedShapes, selectedBlobs);
														var allIntermediates = A2(_elm_lang$core$List$concatMap, _user$project$Provenance$flattenValBasedOnTree, selectedVals);
														var allExplicitPointIntermediates = A2(_elm_lang$core$List$filter, _user$project$Lang$valIsPoint, allIntermediates);
														var allNumericIntermediates = A2(_elm_lang$core$List$filter, _user$project$Lang$valIsNum, allIntermediates);
														var intermediatePoints = A2(
															_elm_lang$core$Basics_ops['++'],
															allExplicitPointIntermediates,
															A2(_user$project$Provenance$coordinateIntermediatesToSharedPointParents, allNumericIntermediates, allNumericIntermediates));
														var intermediatePointEIdSet = _elm_lang$core$Set$fromList(
															A2(
																_elm_lang$core$List$filter,
																_user$project$FastParser$isProgramEId,
																A2(
																	_elm_lang$core$List$map,
																	function (_p53) {
																		return function (_) {
																			return _.eid;
																		}(
																			function (_) {
																				return _.val;
																			}(
																				_user$project$Lang$valExp(_p53)));
																	},
																	intermediatePoints)));
														var intermediateXYExpPossibilities = A2(
															_user$project$Utils$dedupBy,
															_user$project$Utils$mapBoth(
																function (_p54) {
																	return function (_) {
																		return _.eid;
																	}(
																		function (_) {
																			return _.val;
																		}(_p54));
																}),
															A2(
																_elm_lang$core$List$filter,
																function (_p55) {
																	var _p56 = _p55;
																	var _p58 = _p56._1;
																	var _p57 = _p56._0;
																	return (!_elm_lang$core$Native_Utils.eq(_p57.val.eid, _p58.val.eid)) && (_user$project$FastParser$isProgramEId(_p57.val.eid) && _user$project$FastParser$isProgramEId(_p58.val.eid));
																},
																A2(
																	_elm_lang$core$List$map,
																	_user$project$Utils$mapBoth(_user$project$Lang$valExp),
																	A2(
																		_elm_lang$core$List$concatMap,
																		function (_p59) {
																			var _p60 = _p59;
																			return A2(
																				_user$project$Utils$cartProd,
																				_user$project$Provenance$valToSameVals(_p60._0),
																				_user$project$Provenance$valToSameVals(_p60._1));
																		},
																		A2(_elm_lang$core$List$filterMap, _user$project$Lang$valToMaybeXYVals, intermediatePoints)))));
														var intermediateXYEIdPossibilities = A2(
															_elm_lang$core$List$map,
															_user$project$Utils$mapBoth(
																function (_p61) {
																	return function (_) {
																		return _.eid;
																	}(
																		function (_) {
																			return _.val;
																		}(_p61));
																}),
															intermediateXYExpPossibilities);
														var possibleEIdsToAbstract = function () {
															var eidsContainingSomeRelevantPointExp = A2(
																_elm_lang$core$List$map,
																function (_p62) {
																	return function (_) {
																		return _.eid;
																	}(
																		function (_) {
																			return _.val;
																		}(_p62));
																},
																A2(
																	_elm_lang$core$List$filter,
																	function (e) {
																		return _elm_lang$core$Native_Utils.cmp(
																			_user$project$LangTools$nodeCount(e),
																			3) > -1;
																	},
																	A2(
																		_user$project$Lang$allExpsContaining,
																		function (e) {
																			return A2(_elm_lang$core$Set$member, e.val.eid, intermediatePointEIdSet);
																		},
																		program)));
															var intermediateYEIds = _elm_lang$core$Set$fromList(
																A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, intermediateXYEIdPossibilities));
															var eidsContainingSomeRelevantYExp = A2(
																_elm_lang$core$List$map,
																function (_p63) {
																	return function (_) {
																		return _.eid;
																	}(
																		function (_) {
																			return _.val;
																		}(_p63));
																},
																A2(
																	_elm_lang$core$List$filter,
																	function (e) {
																		return _elm_lang$core$Native_Utils.cmp(
																			_user$project$LangTools$nodeCount(e),
																			3) > -1;
																	},
																	A2(
																		_user$project$Lang$allExpsContaining,
																		function (e) {
																			return A2(_elm_lang$core$Set$member, e.val.eid, intermediateYEIds);
																		},
																		program)));
															var intermediateXEIds = _elm_lang$core$Set$fromList(
																A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, intermediateXYEIdPossibilities));
															var eidsContainingSomeRelevantXExp = A2(
																_elm_lang$core$List$map,
																function (_p64) {
																	return function (_) {
																		return _.eid;
																	}(
																		function (_) {
																			return _.val;
																		}(_p64));
																},
																A2(
																	_elm_lang$core$List$filter,
																	function (e) {
																		return _elm_lang$core$Native_Utils.cmp(
																			_user$project$LangTools$nodeCount(e),
																			3) > -1;
																	},
																	A2(
																		_user$project$Lang$allExpsContaining,
																		function (e) {
																			return A2(_elm_lang$core$Set$member, e.val.eid, intermediateXEIds);
																		},
																		program)));
															var nonTrivialEIdsContainingSomeRelevantExps = _elm_lang$core$Set$fromList(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	eidsContainingSomeRelevantPointExp,
																	A2(_user$project$Utils$intersectAsSet, eidsContainingSomeRelevantXExp, eidsContainingSomeRelevantYExp)));
															return A7(
																_user$project$ShapeWidgets$selectionsSingleEIdInterpretations,
																program,
																_p89,
																_p90,
																selectedFeatures,
																selectedShapes,
																selectedBlobs,
																function (e) {
																	return A2(_elm_lang$core$Set$member, e.val.eid, nonTrivialEIdsContainingSomeRelevantExps);
																});
														}();
														var abstractedCandidatePrograms = A2(
															_elm_lang$core$List$concatMap,
															function (outputEId) {
																var postProcessBeforeProblemResolution = F4(
																	function (programWithCallAndFunc, callExp, argExps, uniqueNameToOldName) {
																		var itemFuncUniqueName = _user$project$LangTools$expToIdent(
																			_user$project$LangTools$expToAppFunc(callExp));
																		var itemFuncName = A3(_user$project$Utils$justGet_, 'ValueBasedTransform.repeatUsingFunction postProcessBeforeProblemResolution itemFuncName', itemFuncUniqueName, uniqueNameToOldName);
																		var repeatGroupSuggestedName = A2(
																			_elm_lang$core$Basics_ops['++'],
																			'repeated',
																			_user$project$Utils$capitalize(itemFuncName));
																		var repeatGroupName = A3(
																			_user$project$LangTools$nonCollidingName,
																			repeatGroupSuggestedName,
																			2,
																			A2(
																				_user$project$LangTools$visibleIdentifiersAtEIds,
																				program,
																				_elm_lang$core$Set$singleton(drawingScopeEId)));
																		var shouldReverseXY = function () {
																			var _p65 = argExps;
																			if (((_p65.ctor === '::') && (_p65._1.ctor === '::')) && (_p65._1._1.ctor === '[]')) {
																				return A2(
																					_elm_lang$core$List$member,
																					{ctor: '_Tuple2', _0: _p65._1._0.val.eid, _1: _p65._0.val.eid},
																					intermediateXYEIdPossibilities);
																			} else {
																				return false;
																			}
																		}();
																		var maybePointsExpAndRepeatingOverWhatDesc = A2(maybeMakePointsExpAndRepeatingOverWhatDesc, argExps, shouldReverseXY);
																		var programWithCallAndFuncFresh = _user$project$FastParser$freshen(programWithCallAndFunc);
																		var uniqueNamesToAvoid = _user$project$Utils$unionAll(
																			{
																				ctor: '::',
																				_0: _user$project$LangTools$identifiersSetPlusPrelude(program),
																				_1: {
																					ctor: '::',
																					_0: _user$project$LangTools$identifiersSet(programWithCallAndFuncFresh),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$core$Set$fromList(
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								{
																									ctor: '::',
																									_0: repeatGroupSuggestedName,
																									_1: {
																										ctor: '::',
																										_0: repeatGroupName,
																										_1: {ctor: '[]'}
																									}
																								},
																								A2(
																									_elm_lang$core$Basics_ops['++'],
																									_elm_lang$core$Dict$keys(uniqueNameToOldName),
																									_elm_lang$core$Dict$values(uniqueNameToOldName)))),
																						_1: {ctor: '[]'}
																					}
																				}
																			});
																		var repeatGroupUniqueName = A3(_user$project$LangTools$nonCollidingName, repeatGroupSuggestedName, 2, uniqueNamesToAvoid);
																		var maybeProgramWithFuncButNoCallFresh = function () {
																			var callEId = function (_p66) {
																				return function (_) {
																					return _.eid;
																				}(
																					function (_) {
																						return _.val;
																					}(_p66));
																			}(
																				A2(
																					_user$project$Utils$fromJust_,
																					'ValueBasedTransform.repeatUsingFunction programWithFuncButNoCallFresh callEId',
																					A2(
																						_user$project$Lang$findFirstNode,
																						function (_p67) {
																							return A2(
																								F2(
																									function (x, y) {
																										return _elm_lang$core$Native_Utils.eq(x, y);
																									}),
																								_elm_lang$core$Maybe$Just(itemFuncUniqueName),
																								A2(
																									_elm_lang$core$Maybe$andThen,
																									_user$project$LangTools$expToMaybeIdent,
																									_user$project$LangTools$expToMaybeAppFunc(_p67)));
																						},
																						programWithCallAndFuncFresh)));
																			return A2(_user$project$CodeMotion$maybeDeleteEId, callEId, programWithCallAndFuncFresh);
																		}();
																		var maybeFuncExpFreshWithOriginalPats = function () {
																			var _p68 = maybeProgramWithFuncButNoCallFresh;
																			if (_p68.ctor === 'Just') {
																				var _p73 = _p68._0;
																				var _p69 = A2(
																					_user$project$Utils$maybeFind,
																					itemFuncUniqueName,
																					_user$project$LangTools$allSimplyResolvableLetBindings(_p73));
																				if (_p69.ctor === 'Just') {
																					return _elm_lang$core$Maybe$Just(_p69._0);
																				} else {
																					var _p70 = _user$project$Utils$log(
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							'ValueBasedTransform.repeatUsingFunction funcExpFreshWithOriginalPats Utils.maybeFind itemFuncUniqueName ',
																							A2(_elm_lang$core$Basics_ops['++'], itemFuncUniqueName, ' failed, this probably means CodeMotion.maybeDeleteEId removed it :(')));
																					var _p71 = _user$project$Utils$log(
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							'Before CodeMotion.maybeDeleteEId:\n',
																							A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, programWithCallAndFuncFresh)));
																					var _p72 = _user$project$Utils$log(
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							'After CodeMotion.maybeDeleteEId:\n',
																							A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, _p73)));
																					return _elm_lang$core$Maybe$Nothing;
																				}
																			} else {
																				return _elm_lang$core$Maybe$Nothing;
																			}
																		}();
																		var _p74 = {ctor: '_Tuple3', _0: maybePointsExpAndRepeatingOverWhatDesc, _1: maybeProgramWithFuncButNoCallFresh, _2: maybeFuncExpFreshWithOriginalPats};
																		if (((((_p74.ctor === '_Tuple3') && (_p74._0.ctor === 'Just')) && (_p74._0._0.ctor === '_Tuple2')) && (_p74._1.ctor === 'Just')) && (_p74._2.ctor === 'Just')) {
																			var _p82 = _p74._0._0._0;
																			var _p81 = _p74._2._0;
																			var eidsInNewAbstraction = _elm_lang$core$Set$fromList(
																				_user$project$Lang$allEIds(
																					_user$project$LangTools$expToFuncBody(_p81)));
																			var programWithFuncButNoCallFreshArgsRewritten = function () {
																				var funcExpFreshWithNewPats = function () {
																					var _p75 = _p81.val.e__;
																					if ((((_p75.ctor === 'EFun') && (_p75._1.ctor === '::')) && (_p75._1._1.ctor === '::')) && (_p75._1._1._1.ctor === '[]')) {
																						var _p80 = _p75._1._1._0;
																						var _p79 = _p75._1._0;
																						var _p78 = _p75._3;
																						var _p77 = _p75._0;
																						var _p76 = _p75._2;
																						return (!shouldReverseXY) ? A2(
																							_user$project$Lang$replaceE__,
																							_p81,
																							A4(
																								_user$project$Lang$EFun,
																								_p77,
																								{
																									ctor: '::',
																									_0: _user$project$Lang$pList(
																										A3(
																											_user$project$Lang$setPatListWhitespace,
																											'',
																											' ',
																											{
																												ctor: '::',
																												_0: _p79,
																												_1: {
																													ctor: '::',
																													_0: _p80,
																													_1: {ctor: '[]'}
																												}
																											})),
																									_1: {ctor: '[]'}
																								},
																								_p76,
																								_p78)) : A2(
																							_user$project$Lang$replaceE__,
																							_p81,
																							A4(
																								_user$project$Lang$EFun,
																								_p77,
																								{
																									ctor: '::',
																									_0: _user$project$Lang$pList(
																										A3(
																											_user$project$Lang$setPatListWhitespace,
																											'',
																											' ',
																											{
																												ctor: '::',
																												_0: _p80,
																												_1: {
																													ctor: '::',
																													_0: _p79,
																													_1: {ctor: '[]'}
																												}
																											})),
																									_1: {ctor: '[]'}
																								},
																								_p76,
																								_p78));
																					} else {
																						return _p81;
																					}
																				}();
																				return A3(_user$project$Lang$replaceExpNode, _p81.val.eid, funcExpFreshWithNewPats, _p74._1._0);
																			}();
																			var programWithCallAndFuncUnparsed = A3(_user$project$LangUnparser$unparseWithUniformWhitespace, true, true, programWithFuncButNoCallFreshArgsRewritten);
																			return A2(
																				_elm_lang$core$List$concatMap,
																				function (repeatGroupCall) {
																					var programsWithRepeatCall = _user$project$DrawAddShape$addShape(model)(
																						function (list) {
																							return !A2(_elm_lang$core$Set$member, list.val.eid, eidsInNewAbstraction);
																						})(
																						_elm_lang$core$Maybe$Just(repeatGroupName))(repeatGroupCall)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(true)(programWithFuncButNoCallFreshArgsRewritten);
																					return A2(
																						_elm_lang$core$List$filterMap,
																						function (programWithRepeatCall) {
																							return _elm_lang$core$Native_Utils.eq(
																								A3(_user$project$LangUnparser$unparseWithUniformWhitespace, true, true, programWithRepeatCall),
																								programWithCallAndFuncUnparsed) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
																								{
																									ctor: '_Tuple2',
																									_0: programWithRepeatCall,
																									_1: A2(
																										_elm_lang$core$Basics_ops['++'],
																										'Repeat ',
																										A2(
																											_elm_lang$core$Basics_ops['++'],
																											itemFuncName,
																											A2(_elm_lang$core$Basics_ops['++'], ' ', _p74._0._0._1)))
																								});
																						},
																						programsWithRepeatCall);
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_user$project$Lang$indent,
																						'  ',
																						A2(
																							_user$project$Lang$replacePrecedingWhitespace,
																							'\n',
																							A2(
																								_user$project$Lang$eCall,
																								'map',
																								{
																									ctor: '::',
																									_0: _user$project$Lang$eVar(itemFuncUniqueName),
																									_1: {
																										ctor: '::',
																										_0: _p82,
																										_1: {ctor: '[]'}
																									}
																								}))),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_user$project$Lang$indent,
																							'  ',
																							A2(
																								_user$project$Lang$replacePrecedingWhitespace,
																								'\n',
																								A2(
																									_user$project$Lang$eCall,
																									'concatMap',
																									{
																										ctor: '::',
																										_0: _user$project$Lang$eVar(itemFuncUniqueName),
																										_1: {
																											ctor: '::',
																											_0: _p82,
																											_1: {ctor: '[]'}
																										}
																									}))),
																						_1: {ctor: '[]'}
																					}
																				});
																		} else {
																			return {ctor: '[]'};
																		}
																	});
																var computeExpsGroupsToArgumentize = function (funcBodyAfterSlurpingBeforeArgumentization) {
																	var expsInFunc = _user$project$Lang$flattenExpTree(funcBodyAfterSlurpingBeforeArgumentization);
																	var singlePointArgumentPossibilities = A2(
																		_elm_lang$core$List$map,
																		_elm_lang$core$List$singleton,
																		A2(
																			_elm_lang$core$List$filter,
																			function (e) {
																				return A2(_elm_lang$core$Set$member, e.val.eid, intermediatePointEIdSet);
																			},
																			expsInFunc));
																	var xyArgumentPossibilities = function () {
																		var eidsInFunc = function (_p83) {
																			return _elm_lang$core$Set$fromList(
																				A2(
																					_elm_lang$core$List$map,
																					function (_p84) {
																						return function (_) {
																							return _.eid;
																						}(
																							function (_) {
																								return _.val;
																							}(_p84));
																					},
																					_p83));
																		}(expsInFunc);
																		return A2(
																			_elm_lang$core$List$map,
																			_user$project$Utils$pairToList,
																			A2(
																				_elm_lang$core$List$filter,
																				function (_p85) {
																					var _p86 = _p85;
																					return A2(_elm_lang$core$Set$member, _p86._0.val.eid, eidsInFunc) && A2(_elm_lang$core$Set$member, _p86._1.val.eid, eidsInFunc);
																				},
																				intermediateXYExpPossibilities));
																	}();
																	return A2(_elm_lang$core$Basics_ops['++'], singlePointArgumentPossibilities, xyArgumentPossibilities);
																};
																var slurpedBindingsFilter = F2(
																	function (pat, boundExp) {
																		return true;
																	});
																return A8(_user$project$ValueBasedTransform$abstract_, program, originalProgramUniqueNames, editingContext, uniqueNameToOldName, outputEId, slurpedBindingsFilter, computeExpsGroupsToArgumentize, postProcessBeforeProblemResolution);
															},
															possibleEIdsToAbstract);
														var shapeCountBefore = _elm_lang$core$Dict$size(_p51._0._2._1);
														return A2(
															_elm_lang$core$List$filter,
															function (synthesisResult) {
																return A2(
																	_elm_lang$core$Debug$log,
																	'It ran okay?',
																	function () {
																		var _p87 = A2(
																			_user$project$InterfaceModel$runAndResolveAtContext,
																			model,
																			A2(
																				_user$project$LangTools$logProgram,
																				'Testing candidate for crashing:',
																				_user$project$InterfaceModel$resultExp(synthesisResult)));
																		if (_p87.ctor === 'Err') {
																			var _p88 = _user$project$Utils$log(_p87._0);
																			return false;
																		} else {
																			return (_elm_lang$core$Native_Utils.cmp(shapeCountBefore, 1) > 0) ? (_elm_lang$core$Native_Utils.cmp(
																				_elm_lang$core$Dict$size(_p87._0._2._1),
																				1) > 0) : true;
																		}
																	}());
															},
															abstractedCandidatePrograms);
													}
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$ValueBasedTransform$repeatUsingFunction = function (program) {
	return function (idToTypeAndContextThunk) {
		return function (showPreludeOffsets) {
			return function (editingContext) {
				return function (maybeEnv) {
					return function (pointsFuncName) {
						return function (selectedFeatures) {
							return function (selectedShapes) {
								return function (selectedBlobs) {
									return function (slideNumber) {
										return function (movieNumber) {
											return function (movieTime) {
												return function (solutionsCache) {
													return function (syncOptions) {
														var maybeMakePointsExpAndRepeatingOverWhatDesc = F2(
															function (argExps, shouldReverseXY) {
																var pointsFuncType = A2(
																	_user$project$Utils$fromJust_,
																	'ValueBasedTransform.repeatUsingFunction FindRepeatTools.getRepetitionFunctions model |> Utils.maybeFind pointsFuncName',
																	A2(
																		_user$project$Utils$maybeFind,
																		pointsFuncName,
																		A3(_user$project$FindRepeatTools$getRepetitionFunctions, program, idToTypeAndContextThunk, editingContext)));
																var _p91 = A2(
																	_user$project$Utils$fromJust_,
																	'ValueBasedTransform.repeatUsingFunction pointsFuncType |> Types.typeToMaybeArgTypesAndReturnType',
																	_user$project$Types$typeToMaybeArgTypesAndReturnType(pointsFuncType));
																var pointsFuncArgTypes = _p91._0;
																var pointsFuncReturnType = _p91._1;
																var ptArgExp = function () {
																	var _p92 = argExps;
																	_v32_2:
																	do {
																		if (_p92.ctor === '::') {
																			if (_p92._1.ctor === '[]') {
																				return _p92._0;
																			} else {
																				if (_p92._1._1.ctor === '[]') {
																					var _p94 = _p92._1._0;
																					var _p93 = _p92._0;
																					return _user$project$Lang$eTuple(
																						A3(
																							_user$project$Lang$setExpListWhitespace,
																							'',
																							' ',
																							(!shouldReverseXY) ? {
																								ctor: '::',
																								_0: _p93,
																								_1: {
																									ctor: '::',
																									_0: _p94,
																									_1: {ctor: '[]'}
																								}
																							} : {
																								ctor: '::',
																								_0: _p94,
																								_1: {
																									ctor: '::',
																									_0: _p93,
																									_1: {ctor: '[]'}
																								}
																							}));
																				} else {
																					break _v32_2;
																				}
																			}
																		} else {
																			break _v32_2;
																		}
																	} while(false);
																	return _elm_lang$core$Native_Utils.crashCase(
																		'ValueBasedTransform',
																		{
																			start: {line: 1015, column: 9},
																			end: {line: 1018, column: 164}
																		},
																		_p92)(
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'ValueBasedTransform.repeatUsingFunction: ptArgExp should only have one or two argExps but got ',
																			_elm_lang$core$Basics$toString(argExps)));
																}();
																var _p96 = A3(
																	_user$project$Utils$foldl,
																	{
																		ctor: '_Tuple2',
																		_0: false,
																		_1: {ctor: '[]'}
																	},
																	F2(
																		function (argType, _p97) {
																			var _p98 = _p97;
																			var _p101 = _p98._0;
																			var _p100 = _p98._1;
																			var _p99 = {
																				ctor: '_Tuple2',
																				_0: _p101,
																				_1: _user$project$Types$isPointType(argType)
																			};
																			if (((_p99.ctor === '_Tuple2') && (_p99._0 === false)) && (_p99._1 === true)) {
																				return {
																					ctor: '_Tuple2',
																					_0: true,
																					_1: A2(
																						_elm_lang$core$Basics_ops['++'],
																						_p100,
																						{
																							ctor: '::',
																							_0: _elm_lang$core$Maybe$Just(
																								A2(_user$project$Lang$replacePrecedingWhitespace, ' ', ptArgExp)),
																							_1: {ctor: '[]'}
																						})
																				};
																			} else {
																				return {
																					ctor: '_Tuple2',
																					_0: _p101,
																					_1: A2(
																						_elm_lang$core$Basics_ops['++'],
																						_p100,
																						{
																							ctor: '::',
																							_0: _user$project$TypeDirectedFunctionUtils$maybeFillInArgPrimitive(argType),
																							_1: {ctor: '[]'}
																						})
																				};
																			}
																		}),
																	pointsFuncArgTypes);
																var isPointUsed = _p96._0;
																var pointsCallArgMaybeExps = _p96._1;
																var _p102 = A2(
																	_user$project$Utils$assert,
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'Expected pointsFuncArgTypes to have a point type but was ',
																		_elm_lang$core$Basics$toString(pointsFuncArgTypes)),
																	isPointUsed);
																var _p103 = _user$project$Utils$projJusts(pointsCallArgMaybeExps);
																if (_p103.ctor === 'Just') {
																	return _elm_lang$core$Maybe$Just(
																		{
																			ctor: '_Tuple2',
																			_0: A2(_user$project$Lang$eCall, pointsFuncName, _p103._0),
																			_1: A2(_elm_lang$core$Basics_ops['++'], 'using ', pointsFuncName)
																		});
																} else {
																	var _p104 = A2(
																		_elm_lang$core$Debug$log,
																		A2(_elm_lang$core$Basics_ops['++'], 'Could not generate all arguments for ', pointsFuncName),
																		{ctor: '_Tuple2', _0: pointsFuncArgTypes, _1: pointsCallArgMaybeExps});
																	return _elm_lang$core$Maybe$Nothing;
																}
															});
														return _user$project$ValueBasedTransform$repeat_(program)(showPreludeOffsets)(editingContext)(maybeEnv)(maybeMakePointsExpAndRepeatingOverWhatDesc)(selectedFeatures)(selectedShapes)(selectedBlobs)(slideNumber)(movieNumber)(movieTime)(solutionsCache)(syncOptions);
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$ValueBasedTransform$repeatUsingPointList = function (program) {
	return function (showPreludeOffsets) {
		return function (editingContext) {
			return function (maybeEnv) {
				return function (pointListVal) {
					return function (selectedFeatures) {
						return function (selectedShapes) {
							return function (selectedBlobs) {
								return function (slideNumber) {
									return function (movieNumber) {
										return function (movieTime) {
											return function (solutionsCache) {
												return function (syncOptions) {
													var maybeMakePointsExpAndRepeatingOverWhatDesc = F2(
														function (argExps, shouldReverseXY) {
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '_Tuple2',
																	_0: _user$project$Lang$eHoleVal(pointListVal),
																	_1: A2(
																		_elm_lang$core$Basics_ops['++'],
																		'over ',
																		_user$project$Utils$squish(
																			A2(
																				_user$project$Syntax$unparser,
																				_user$project$Syntax$Elm,
																				_user$project$Lang$valExp(pointListVal))))
																});
														});
													return _user$project$ValueBasedTransform$repeat_(program)(showPreludeOffsets)(editingContext)(maybeEnv)(maybeMakePointsExpAndRepeatingOverWhatDesc)(selectedFeatures)(selectedShapes)(selectedBlobs)(slideNumber)(movieNumber)(movieTime)(solutionsCache)(syncOptions);
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$ValueBasedTransform$abstract = function (program) {
	return function (idToTypeAndContextThunk) {
		return function (showPreludeOffsets) {
			return function (editingContext) {
				return function (selectedFeatures) {
					return function (selectedShapes) {
						return function (selectedBlobs) {
							return function (slideNumber) {
								return function (movieNumber) {
									return function (movieTime) {
										return function (syncOptions) {
											var _p105 = A2(
												_user$project$InterfaceModel$runAndResolve_,
												{showPreludeOffsets: showPreludeOffsets, slideNumber: slideNumber, movieNumber: movieNumber, movieTime: movieTime, syntax: _user$project$Syntax$Elm},
												program);
											if (_p105.ctor === 'Err') {
												return {ctor: '[]'};
											} else {
												var _p106 = _user$project$LangTools$assignUniqueNames(program);
												var originalProgramUniqueNames = _p106._0;
												var uniqueNameToOldName = _p106._1;
												var varEIdsReferringToFunctions = A2(
													_elm_lang$core$List$filter,
													function (varEId) {
														return A2(
															_elm_lang$core$Maybe$withDefault,
															false,
															A2(
																_elm_lang$core$Maybe$map,
																function (_p107) {
																	var _p108 = _p107;
																	return _user$project$Types$isArrow(_p108._0);
																},
																A2(_elm_lang$core$Dict$get, varEId, idToTypeAndContextThunk)));
													},
													A2(
														_elm_lang$core$List$map,
														function (_p109) {
															return function (_) {
																return _.eid;
															}(
																function (_) {
																	return _.val;
																}(_p109));
														},
														_user$project$LangTools$allVars(originalProgramUniqueNames)));
												return A2(
													_elm_lang$core$List$concatMap,
													function (interpretation) {
														return A2(
															_elm_lang$core$List$concatMap,
															function (eidI) {
																var postProcessBeforeProblemResolution = F4(
																	function (programWithCallAndFunc, callExp, argExps, uniqueNameToOldName) {
																		return {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: programWithCallAndFunc,
																				_1: A2(
																					_elm_lang$core$Basics_ops['++'],
																					'Build abstraction of ',
																					_user$project$Utils$squish(
																						A2(
																							_user$project$Syntax$unparser,
																							_user$project$Syntax$Elm,
																							A2(_user$project$LangTools$renameIdentifiers, uniqueNameToOldName, callExp))))
																			},
																			_1: {ctor: '[]'}
																		};
																	});
																var computeExpsGroupsToArgumentize = function (funcBodyAfterSlurpingBeforeArgumentization) {
																	var patUniqueNamesInFunction = A2(
																		_elm_lang$core$List$concatMap,
																		_user$project$LangTools$identifiersListInPat,
																		_user$project$LangTools$allRootPats(funcBodyAfterSlurpingBeforeArgumentization));
																	var expsUsedAsApplicationFunctionInFunction = A2(
																		_elm_lang$core$List$map,
																		_user$project$Lang$expEffectiveExp,
																		A2(
																			_elm_lang$core$List$filterMap,
																			_user$project$LangTools$expToMaybeAppFunc,
																			_user$project$Lang$flattenExpTree(funcBodyAfterSlurpingBeforeArgumentization)));
																	return {
																		ctor: '::',
																		_0: A2(
																			_user$project$Utils$dedupBy,
																			_user$project$LangTools$expToIdent,
																			A2(
																				_elm_lang$core$List$filter,
																				function ($var) {
																					return !A2(_elm_lang$core$List$member, $var.val.eid, varEIdsReferringToFunctions);
																				},
																				A2(
																					_elm_lang$core$List$filter,
																					function ($var) {
																						return !A2(_elm_lang$core$List$member, $var, expsUsedAsApplicationFunctionInFunction);
																					},
																					A2(
																						_elm_lang$core$List$filter,
																						function ($var) {
																							return !A2(
																								_elm_lang$core$List$member,
																								_user$project$LangTools$expToIdent($var),
																								patUniqueNamesInFunction);
																						},
																						_user$project$LangTools$freeVars(funcBodyAfterSlurpingBeforeArgumentization))))),
																		_1: {ctor: '[]'}
																	};
																};
																var slurpedBindingsFilter = F2(
																	function (pat, boundExp) {
																		return !_user$project$LangTools$isLiteral(boundExp);
																	});
																var outputEId = A2(_user$project$Utils$geti, eidI, interpretation);
																return A8(_user$project$ValueBasedTransform$abstract_, program, originalProgramUniqueNames, editingContext, uniqueNameToOldName, outputEId, slurpedBindingsFilter, computeExpsGroupsToArgumentize, postProcessBeforeProblemResolution);
															},
															A2(
																_elm_lang$core$List$range,
																1,
																_elm_lang$core$List$length(interpretation)));
													},
													A7(
														_user$project$ShapeWidgets$selectionsProximalEIdInterpretations,
														program,
														_p105._0._2,
														_p105._0._1,
														selectedFeatures,
														selectedShapes,
														selectedBlobs,
														function (e) {
															return (!_elm_lang$core$Native_Utils.eq(
																_user$project$Lang$childExps(e),
																{ctor: '[]'})) && (!_elm_lang$core$Native_Utils.eq(
																_user$project$LangTools$freeVars(e),
																{ctor: '[]'}));
														}));
											}
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$ValueBasedTransform$relate__ = F8(
	function (syntax, solutionsCache, relationToSynthesize, featureEqns, originalExp, maybeTermShape, removedLocIdToMathExp, syncOptions) {
		var locIdToNumberAndLoc = _user$project$ValueBasedTransform$locIdToNumberAndLocOf(originalExp);
		var removedLocIds = _elm_lang$core$Set$fromList(
			A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, removedLocIdToMathExp));
		var frozenLocIdToNum = _elm_lang$core$Dict$fromList(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$LangTools$frozenLocIdsAndNumbers(originalExp),
				_user$project$LangTools$frozenLocIdsAndNumbers(_user$project$FastParser$prelude)));
		var programUnfrozenLocIdSet = A2(_user$project$Sync$expToUnfrozenLocIdSet, syncOptions, originalExp);
		var unfrozenLocIdSet = A2(
			_elm_lang$core$Set$filter,
			function (locId) {
				return !A2(_elm_lang$core$Set$member, locId, removedLocIds);
			},
			_elm_lang$core$Set$fromList(
				A2(
					_elm_lang$core$List$concatMap,
					_user$project$ValueBasedTransform$equationLocIds(programUnfrozenLocIdSet),
					featureEqns)));
		var featureEqnLocIds = A2(
			_elm_lang$core$List$map,
			function (_p110) {
				return A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$Set$diff,
					removedLocIds,
					_elm_lang$core$Set$fromList(
						A2(_user$project$ValueBasedTransform$equationLocIds, programUnfrozenLocIdSet, _p110)));
			},
			featureEqns);
		var eqnsUniqueLocIds = _user$project$Utils$manySetDiffs(featureEqnLocIds);
		var subst = _user$project$FastParser$substOf(originalExp);
		var featureMathExps = A2(
			_elm_lang$core$List$map,
			_user$project$ValueBasedTransform$featureEquationToMathExp(removedLocIdToMathExp),
			featureEqns);
		var locIdCombosToSolveFor = function () {
			var _p111 = relationToSynthesize;
			if (_p111.ctor === 'Equalize') {
				return A2(
					_user$project$Utils$combinationsAsSet,
					_elm_lang$core$List$length(featureEqns) - 1,
					_elm_lang$core$Set$toList(unfrozenLocIdSet));
			} else {
				return A2(
					_elm_lang$core$List$map,
					_elm_lang$core$List$singleton,
					_elm_lang$core$Set$toList(unfrozenLocIdSet));
			}
		}();
		var solutionsForLocIds = function (dependentLocIds) {
			var _p112 = {ctor: '_Tuple2', _0: relationToSynthesize, _1: dependentLocIds};
			_v39_2:
			do {
				if (_p112.ctor === '_Tuple2') {
					if (_p112._0.ctor === 'Equalize') {
						var equations = _user$project$Utils$overlappingAdjacentPairs(
							A2(
								_elm_lang$core$List$map,
								_user$project$MathExp$applySubst(frozenLocIdToNum),
								A2(
									_elm_lang$core$List$map,
									_user$project$ValueBasedTransform$featureEquationToMathExp(removedLocIdToMathExp),
									featureEqns)));
						var dependentIdentDescs = A2(
							_elm_lang$core$List$map,
							_user$project$LangTools$locIdDescription(originalExp),
							dependentLocIds);
						return A2(
							_elm_lang$core$List$map,
							function (solution) {
								return {
									ctor: '_Tuple2',
									_0: solution,
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										'Equalize by removing ',
										_user$project$Utils$toSentence(dependentIdentDescs))
								};
							},
							A2(
								_elm_lang$core$List$filter,
								function (solution) {
									return _elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$List$length(solution),
										0) > 0;
								},
								A3(_user$project$Solver$solve, solutionsCache, equations, dependentLocIds)));
					} else {
						if ((_p112._1.ctor === '::') && (_p112._1._1.ctor === '[]')) {
							var _p123 = _p112._1._0;
							var dependentIdentDesc = A2(_user$project$LangTools$locIdDescription, originalExp, _p123);
							var _p113 = function () {
								var _p116 = A2(
									_user$project$Utils$findFirst,
									function (_p114) {
										var _p115 = _p114;
										return A2(_elm_lang$core$Set$member, _p123, _p115._1);
									},
									_user$project$Utils$zipi1(eqnsUniqueLocIds));
								if (_p116.ctor === 'Just') {
									var _p117 = _p116._0._0;
									var independentLocIds = A2(
										_elm_lang$core$List$concatMap,
										_elm_lang$core$Set$toList,
										A2(_user$project$Utils$removei, _p117, eqnsUniqueLocIds));
									return {
										ctor: '_Tuple3',
										_0: independentLocIds,
										_1: A2(_user$project$Utils$geti, _p117, featureMathExps),
										_2: A2(_user$project$Utils$removei, _p117, featureMathExps)
									};
								} else {
									return {
										ctor: '_Tuple3',
										_0: {ctor: '[]'},
										_1: A2(_user$project$Utils$head, 'ValueBasedTransform.relate__ cannot relate but featureEqns shouldn\'t be empty', featureMathExps),
										_2: {ctor: '[]'}
									};
								}
							}();
							var independentLocIds = _p113._0;
							var targetMathExp = _p113._1;
							var otherMathExps = _p113._2;
							var targetLocValue = A3(_user$project$Utils$justGet_, 'ValueBasedTransform.relate__ targetLocValue', _p123, subst);
							var originalMathExp = targetMathExp;
							var otherReferenceValues = A2(
								_elm_lang$core$List$map,
								_user$project$LocEqn$mathExpEval(subst),
								otherMathExps);
							var originalFeatureValue = A2(_user$project$LocEqn$mathExpEval, subst, targetMathExp);
							var usesLocFromEachOtherEqn = function (mathExp) {
								var mathExpLocIds = _user$project$LocEqn$mathExpLocIdSet(mathExp);
								var eqnsUsedCount = A2(
									_user$project$Utils$count,
									function (_p118) {
										return !_elm_lang$core$Set$isEmpty(
											A2(_elm_lang$core$Set$intersect, mathExpLocIds, _p118));
									},
									eqnsUniqueLocIds);
								return _elm_lang$core$Native_Utils.eq(
									eqnsUsedCount,
									_elm_lang$core$List$length(featureMathExps) - 1);
							};
							var isGoodEnough = function (mathExp) {
								if (_elm_lang$core$Native_Utils.eq(
									_elm_lang$core$Set$size(
										_user$project$LocEqn$mathExpLocIdSet(mathExp)),
									0)) {
									return false;
								} else {
									var newValueAtLoc = A2(_user$project$LocEqn$mathExpEval, subst, mathExp);
									var valueCloseEnoughToLoc = function () {
										var diff = newValueAtLoc - targetLocValue;
										return _elm_lang$core$Native_Utils.eq(targetLocValue, 0) ? _elm_lang$core$Native_Utils.eq(diff, 0) : (_elm_lang$core$Native_Utils.cmp(
											_elm_lang$core$Basics$abs(diff / targetLocValue),
											0.2) < 0);
									}();
									var newFeatureValue = A2(
										_user$project$LocEqn$mathExpEval,
										A3(_elm_lang$core$Dict$insert, _p123, newValueAtLoc, subst),
										originalMathExp);
									var equationResultRelativelyCloseEnough = A2(
										_elm_lang$core$List$all,
										function (refVal) {
											var targetDistance = originalFeatureValue - refVal;
											var newDistance = newFeatureValue - refVal;
											var diff = newDistance - targetDistance;
											return _elm_lang$core$Native_Utils.eq(targetDistance, 0) ? _elm_lang$core$Native_Utils.eq(diff, 0) : (_elm_lang$core$Native_Utils.cmp(
												_elm_lang$core$Basics$abs(diff / targetDistance),
												0.2) < 0);
										},
										otherReferenceValues);
									return valueCloseEnoughToLoc && equationResultRelativelyCloseEnough;
								}
							};
							var possibleEquationConstants = (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$List$length(featureMathExps),
								2) < 1) ? _user$project$LocEqn$littleConstants : A2(
								_elm_lang$core$List$filter,
								function (n) {
									return _elm_lang$core$Native_Utils.cmp(n, 10) < 1;
								},
								_user$project$LocEqn$littleConstants);
							var astSizeRange = (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$List$length(featureMathExps),
								2) < 1) ? A2(_elm_lang$core$List$range, 1, 3) : A2(_elm_lang$core$List$range, 1, 7);
							var resultMathExps = function () {
								var _p119 = maybeTermShape;
								if (_p119.ctor === 'Nothing') {
									var synthesizeMore = F2(
										function (astSize, results) {
											if (false) {
												return results;
											} else {
												var newMathExps = function () {
													var minLocsInMathExp = _elm_lang$core$List$length(featureMathExps) - 1;
													return A2(
														_elm_lang$core$List$filter,
														function (mathExp) {
															return _elm_lang$core$Native_Utils.cmp(
																_user$project$LocEqn$mathExpSize(mathExp),
																astSize) > -1;
														},
														A2(
															_elm_lang$core$List$map,
															_user$project$LocEqn$normalizeSimplify,
															A2(
																_elm_lang$core$List$filter,
																isGoodEnough,
																A4(
																	_user$project$LocEqn$mathExpTemplateFillingsLocsFilled,
																	targetLocValue,
																	subst,
																	possibleEquationConstants,
																	A2(
																		_elm_lang$core$List$filter,
																		usesLocFromEachOtherEqn,
																		A2(
																			_elm_lang$core$List$concatMap,
																			function (template) {
																				return A2(_user$project$LocEqn$mathExpTemplateLocFillings, independentLocIds, template);
																			},
																			A3(_user$project$LocEqn$mathExpsTemplatesOfSize, minLocsInMathExp, 1, astSize)))))));
												}();
												return A2(_elm_lang$core$Basics_ops['++'], results, newMathExps);
											}
										});
									return _user$project$Utils$dedup(
										A3(
											_elm_lang$core$List$foldl,
											synthesizeMore,
											{ctor: '[]'},
											astSizeRange));
								} else {
									var _p122 = _p119._0;
									var matchesTermShape = F2(
										function (termShape, mathExp) {
											var _p120 = {ctor: '_Tuple2', _0: termShape, _1: mathExp};
											_v43_3:
											do {
												if (_p120.ctor === '_Tuple2') {
													switch (_p120._0.ctor) {
														case 'MathNum':
															if (_p120._1.ctor === 'MathNum') {
																return _elm_lang$core$Native_Utils.eq(_p120._0._0, _p120._1._0);
															} else {
																break _v43_3;
															}
														case 'MathVar':
															if (_p120._1.ctor === 'MathVar') {
																var _p121 = _p120._0._0;
																return _elm_lang$core$Native_Utils.eq(_p121, 0) || _elm_lang$core$Native_Utils.eq(
																	A2(
																		_elm_lang$core$Maybe$withDefault,
																		0,
																		A2(
																			_user$project$Utils$findi,
																			_elm_lang$core$Set$member(_p120._1._0),
																			featureEqnLocIds)),
																	_p121);
															} else {
																break _v43_3;
															}
														default:
															if (_p120._1.ctor === 'MathOp') {
																return _elm_lang$core$Native_Utils.eq(_p120._0._0, _p120._1._0) && A2(
																	_elm_lang$core$Maybe$withDefault,
																	false,
																	A2(
																		_elm_lang$core$Maybe$map,
																		_elm_lang$core$List$all(
																			_elm_lang$core$Basics$uncurry(matchesTermShape)),
																		A2(_user$project$Utils$maybeZip, _p120._0._1, _p120._1._1)));
															} else {
																break _v43_3;
															}
													}
												} else {
													break _v43_3;
												}
											} while(false);
											return false;
										});
									var astSize = _user$project$LocEqn$mathExpSize(_p122);
									return _user$project$Utils$dedup(
										A2(
											_elm_lang$core$List$filter,
											function (mathExp) {
												return _elm_lang$core$Native_Utils.cmp(
													_user$project$LocEqn$mathExpSize(mathExp),
													astSize) > -1;
											},
											A2(
												_elm_lang$core$List$map,
												_user$project$LocEqn$normalizeSimplify,
												A2(
													_elm_lang$core$List$filter,
													isGoodEnough,
													A2(
														_elm_lang$core$List$filter,
														usesLocFromEachOtherEqn,
														A2(
															_elm_lang$core$List$filter,
															matchesTermShape(_p122),
															A2(_user$project$LocEqn$mathExpTemplateLocFillings, independentLocIds, _p122)))))));
								}
							}();
							return A2(
								_elm_lang$core$List$map,
								function (resultMathExp) {
									return {
										ctor: '_Tuple2',
										_0: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: resultMathExp, _1: _p123},
											_1: {ctor: '[]'}
										},
										_1: A2(_elm_lang$core$Basics_ops['++'], dependentIdentDesc, ' = ')
									};
								},
								resultMathExps);
						} else {
							break _v39_2;
						}
					}
				} else {
					break _v39_2;
				}
			} while(false);
			return _elm_lang$core$Native_Utils.crashCase(
				'ValueBasedTransform',
				{
					start: {line: 491, column: 5},
					end: {line: 622, column: 120}
				},
				_p112)('relate__: Relation type \"Relate\" should only look for an expression for a single loc at a time!');
		};
		return A2(
			_elm_lang$core$List$map,
			function (_p125) {
				var _p126 = _p125;
				var _p141 = _p126._0;
				var _p127 = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (_p129, _p128) {
							var _p130 = _p129;
							var _p131 = _p128;
							var dependentEId = A2(
								_user$project$Utils$fromJust_,
								'relate__: dependendLocId locIdToEId',
								A2(_user$project$Lang$locIdToEId, originalExp, _p130._1));
							var dependentLocExp = A3(
								_user$project$MathExp$mathExpToExp,
								_user$project$Lang$eConstFrozen,
								function (locId) {
									var _p132 = A2(_elm_lang$core$Dict$get, locId, frozenLocIdToNum);
									if (_p132.ctor === 'Just') {
										return _user$project$Lang$eConstFrozen(_p132._0);
									} else {
										return _user$project$Lang$eHoleLoc(locId);
									}
								},
								_p130._0);
							return {
								ctor: '_Tuple2',
								_0: A3(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, dependentEId, dependentLocExp, _p131._0),
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									_p131._1,
									{
										ctor: '::',
										_0: dependentLocExp,
										_1: {ctor: '[]'}
									})
							};
						}),
					{
						ctor: '_Tuple2',
						_0: originalExp,
						_1: {ctor: '[]'}
					},
					_p141);
				var newProgram = _p127._0;
				var dependentLocExps = _p127._1;
				var maybeTermShape = function () {
					var _p133 = {ctor: '_Tuple2', _0: relationToSynthesize, _1: _p141};
					if (((((_p133.ctor === '_Tuple2') && (_p133._0.ctor === 'Relate')) && (_p133._1.ctor === '::')) && (_p133._1._0.ctor === '_Tuple2')) && (_p133._1._1.ctor === '[]')) {
						var termShape = function (mathExp) {
							var _p134 = mathExp;
							switch (_p134.ctor) {
								case 'MathNum':
									return mathExp;
								case 'MathVar':
									return _user$project$Lang$MathVar(
										A2(
											_elm_lang$core$Maybe$withDefault,
											0,
											A2(
												_user$project$Utils$findi,
												_elm_lang$core$Set$member(_p134._0),
												featureEqnLocIds)));
								default:
									return A2(
										_user$project$Lang$MathOp,
										_p134._0,
										A2(_elm_lang$core$List$map, termShape, _p134._1));
							}
						};
						return _elm_lang$core$Maybe$Just(
							termShape(_p133._1._0._0));
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}();
				var _p135 = _elm_lang$core$List$unzip(_p141);
				var dependentLocIds = _p135._1;
				var augmentedDescription = A2(
					_elm_lang$core$Basics_ops['++'],
					_p126._1,
					function () {
						var _p136 = relationToSynthesize;
						if (_p136.ctor === 'Equalize') {
							return '';
						} else {
							return A2(
								_user$project$Syntax$unparser,
								syntax,
								A2(
									_user$project$Lang$mapExpViaExp__,
									function (e__) {
										var _p137 = e__;
										if ((_p137.ctor === 'EHole') && (_p137._1.ctor === 'HoleLoc')) {
											var _p138 = A2(_elm_lang$core$Dict$get, _p137._1._0, locIdToNumberAndLoc);
											if (((_p138.ctor === 'Just') && (_p138._0.ctor === '_Tuple2')) && (_p138._0._1.ctor === '_Tuple3')) {
												var _p139 = _p138._0._1._2;
												return (!_elm_lang$core$Native_Utils.eq(_p139, '')) ? A2(_user$project$Lang$EVar, _user$project$Lang$space1, _p139) : A4(_user$project$Lang$EConst, _user$project$Lang$space1, _p138._0._0, _p138._0._1, _user$project$Lang$noWidgetDecl);
											} else {
												return e__;
											}
										} else {
											return e__;
										}
									},
									A2(_user$project$Utils$head, 'relate__ augmentedDescription', dependentLocExps)));
						}
					}());
				return {
					description: augmentedDescription,
					exp: function () {
						var _p140 = _user$project$Utils$log(
							A2(_user$project$Syntax$unparser, syntax, newProgram));
						return _user$project$FastParser$freshen(newProgram);
					}(),
					maybeTermShape: maybeTermShape,
					dependentLocIds: dependentLocIds,
					removedLocIdToMathExp: A2(
						_elm_lang$core$Basics_ops['++'],
						removedLocIdToMathExp,
						A2(_elm_lang$core$List$map, _user$project$Utils$flip, _p141))
				};
			},
			A2(_elm_lang$core$List$concatMap, solutionsForLocIds, locIdCombosToSolveFor));
	});
var _user$project$ValueBasedTransform$selectedFeaturesToFeaturesAndEquations = F3(
	function (selectedFeatures, _p142, widgets) {
		var _p143 = _p142;
		return A2(
			_elm_lang$core$List$filterMap,
			function (selectableFeature) {
				var _p144 = A3(_user$project$ShapeWidgets$featureToEquation, selectableFeature, _p143._1, widgets);
				if (_p144.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: selectableFeature, _1: _p144._0});
				} else {
					return A2(
						_elm_lang$core$Native_Utils.crash(
							'ValueBasedTransform',
							{
								start: {line: 244, column: 30},
								end: {line: 244, column: 41}
							}),
						'Could not generate an equation for ',
						_elm_lang$core$Basics$toString(selectableFeature));
				}
			},
			selectedFeatures);
	});
var _user$project$ValueBasedTransform$rankComparedTo = F2(
	function (originalExp, synthesisResults) {
		var isLocId = F2(
			function (targetLocId, exp) {
				var _p145 = exp.val.e__;
				if ((_p145.ctor === 'EConst') && (_p145._2.ctor === '_Tuple3')) {
					return _elm_lang$core$Native_Utils.eq(targetLocId, _p145._2._0);
				} else {
					return false;
				}
			});
		return A2(
			_elm_lang$core$List$map,
			function (_p146) {
				var _p147 = _p146;
				var locLineNums = A2(
					_elm_lang$core$List$map,
					function (locId) {
						var _p148 = A2(
							_user$project$Lang$findFirstNode,
							isLocId(locId),
							originalExp);
						if (_p148.ctor === 'Just') {
							return _elm_lang$core$Basics$toFloat(_p148._0.start.line);
						} else {
							return 0 - _user$project$Utils$infinity;
						}
					},
					_p147.dependentLocIds);
				var removedLocDistance = ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(locLineNums),
					1) < 1) || A2(_elm_lang$core$List$any, _elm_lang$core$Basics$isInfinite, locLineNums)) ? _user$project$Utils$infinity : (_user$project$Utils$fromJust(
					_elm_lang$core$List$maximum(locLineNums)) - _user$project$Utils$fromJust(
					_elm_lang$core$List$minimum(locLineNums)));
				return _user$project$InterfaceModel$SynthesisResult(
					{
						description: _p147.description,
						exp: _p147.exp,
						isSafe: true,
						sortKey: A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: removedLocDistance,
								_1: {ctor: '[]'}
							},
							_elm_lang$core$List$reverse(
								A2(_elm_lang$core$List$map, _elm_lang$core$Basics$negate, locLineNums))),
						children: _elm_lang$core$Maybe$Nothing
					});
			},
			synthesisResults);
	});
var _user$project$ValueBasedTransform$synthesizeRelationCoordinateWiseAndSortResults = F6(
	function (solutionsCache, syncOptions, doSynthesis, originalExp, maybeEnv, featuresAndEquations) {
		var selectedPoints = _user$project$ValueBasedTransform$featurePoints(featuresAndEquations);
		var startingResult = {
			description: 'Original',
			exp: originalExp,
			maybeTermShape: _elm_lang$core$Maybe$Nothing,
			dependentLocIds: {ctor: '[]'},
			removedLocIdToMathExp: {ctor: '[]'}
		};
		if (_elm_lang$core$Native_Utils.eq(
			2 * _elm_lang$core$List$length(selectedPoints),
			_elm_lang$core$List$length(featuresAndEquations))) {
			var _p149 = _elm_lang$core$List$unzip(selectedPoints);
			var xFeatures = _p149._0;
			var yFeatures = _p149._1;
			var xsRelated = A2(
				doSynthesis,
				{
					ctor: '::',
					_0: startingResult,
					_1: {ctor: '[]'}
				},
				xFeatures);
			var xysRelated = A2(doSynthesis, xsRelated, yFeatures);
			return A2(
				_user$project$ValueBasedTransform$rankComparedTo,
				originalExp,
				A2(
					_elm_lang$core$List$concatMap,
					function (partialResult) {
						return A2(
							_elm_lang$core$List$map,
							function (newExp) {
								return _elm_lang$core$Native_Utils.update(
									partialResult,
									{exp: newExp});
							},
							A5(_user$project$CodeMotion$resolveValueAndLocHoles, true, solutionsCache, syncOptions, maybeEnv, partialResult.exp));
					},
					xysRelated));
		} else {
			return A2(
				_user$project$ValueBasedTransform$rankComparedTo,
				originalExp,
				A2(
					_elm_lang$core$List$concatMap,
					function (partialResult) {
						return A2(
							_elm_lang$core$List$map,
							function (newExp) {
								return _elm_lang$core$Native_Utils.update(
									partialResult,
									{exp: newExp});
							},
							A5(_user$project$CodeMotion$resolveValueAndLocHoles, true, solutionsCache, syncOptions, maybeEnv, partialResult.exp));
					},
					A2(
						doSynthesis,
						{
							ctor: '::',
							_0: startingResult,
							_1: {ctor: '[]'}
						},
						featuresAndEquations)));
		}
	});
var _user$project$ValueBasedTransform$indexLocId = -2;
var _user$project$ValueBasedTransform$indexedRelateDistanceScore = F3(
	function (subst, indexedLocIdsWithTarget, mathExp) {
		var _p150 = _user$project$Utils$unzip3(indexedLocIdsWithTarget);
		var targets = _p150._2;
		var meanAbsoluteDeviation = function () {
			var absDevs = A2(
				_elm_lang$core$List$map,
				function (_p151) {
					var _p152 = _p151;
					return _p152._1 - _p152._0;
				},
				A2(
					_user$project$Utils$zip,
					targets,
					A2(_elm_lang$core$List$drop, 1, targets)));
			return _elm_lang$core$List$sum(absDevs) / _elm_lang$core$Basics$toFloat(
				_elm_lang$core$List$length(absDevs));
		}();
		var sumOfSquares = _elm_lang$core$List$sum(
			A2(
				_elm_lang$core$List$map,
				function (distance) {
					return Math.pow(distance / meanAbsoluteDeviation, 2);
				},
				A2(
					_elm_lang$core$List$map,
					function (_p153) {
						var _p154 = _p153;
						return A2(
							_user$project$LocEqn$mathExpEval,
							A3(
								_elm_lang$core$Dict$insert,
								_user$project$ValueBasedTransform$indexLocId,
								_elm_lang$core$Basics$toFloat(_p154._0),
								subst),
							mathExp) - _p154._2;
					},
					indexedLocIdsWithTarget)));
		return sumOfSquares / _elm_lang$core$Basics$toFloat(
			_elm_lang$core$List$length(indexedLocIdsWithTarget));
	});
var _user$project$ValueBasedTransform$stormTheBastille = F2(
	function (subst, indexedLocIdsWithTarget) {
		var _p155 = _user$project$Utils$unzip3(indexedLocIdsWithTarget);
		var locIds = _p155._1;
		var locIdsAndIndex = {ctor: '::', _0: _user$project$ValueBasedTransform$indexLocId, _1: locIds};
		var distanceScore = function (mathExp) {
			return A3(_user$project$ValueBasedTransform$indexedRelateDistanceScore, subst, indexedLocIdsWithTarget, mathExp);
		};
		var mathExpsOfSize = function (astSize) {
			return A2(
				_elm_lang$core$List$filter,
				function (mathExp) {
					return _elm_lang$core$Native_Utils.cmp(
						_user$project$LocEqn$mathExpSize(mathExp),
						astSize) > -1;
				},
				A2(
					_elm_lang$core$List$map,
					_user$project$LocEqn$normalizeSimplify,
					A2(
						_elm_lang$core$List$filter,
						function (mathExp) {
							return _elm_lang$core$Native_Utils.cmp(
								distanceScore(mathExp),
								Math.pow(0.2, 2)) < 0;
						},
						A2(
							_elm_lang$core$List$map,
							function (locsFilledTemplate) {
								return A2(
									_user$project$Utils$head,
									'ValueBasedTransform.stormTheBastille constantFillingRanking',
									A2(
										_elm_lang$core$List$sortBy,
										distanceScore,
										A2(_user$project$LocEqn$mathExpTemplateConstantFillings, _user$project$LocEqn$littleConstants, locsFilledTemplate)));
							},
							A2(
								_elm_lang$core$List$concatMap,
								_user$project$LocEqn$mathExpTemplateLocFillings(locIdsAndIndex),
								A3(_user$project$LocEqn$mathExpsTemplatesOfSize, 1, 1, astSize))))));
		};
		return A2(
			_elm_lang$core$List$concatMap,
			mathExpsOfSize,
			A2(_elm_lang$core$List$range, 1, 5));
	});
var _user$project$ValueBasedTransform$getIndexedLocIdsWithTarget = F2(
	function (originalExp, locIdsToRevolutionize) {
		var subst = _user$project$FastParser$substOf(originalExp);
		return A2(
			_user$project$Utils$mapi0,
			function (_p156) {
				var _p157 = _p156;
				return {ctor: '_Tuple3', _0: _p157._0, _1: _p157._1._0, _2: _p157._1._1};
			},
			A2(
				_elm_lang$core$List$sortBy,
				_elm_lang$core$Tuple$second,
				A2(
					_elm_lang$core$List$map,
					function (locId) {
						return {
							ctor: '_Tuple2',
							_0: locId,
							_1: A3(_user$project$Utils$justGet_, 'ValueBasedTransform.stormTheBastille sortedLocs', locId, subst)
						};
					},
					locIdsToRevolutionize)));
	});
var _user$project$ValueBasedTransform$indexedRelate = F7(
	function (syntax, originalExp, selectedFeatures, selectedShapes, _p158, widgets, syncOptions) {
		var _p159 = _p158;
		return {ctor: '[]'};
	});
var _user$project$ValueBasedTransform$PartialSynthesisResult = F5(
	function (a, b, c, d, e) {
		return {description: a, dependentLocIds: b, maybeTermShape: c, exp: d, removedLocIdToMathExp: e};
	});
var _user$project$ValueBasedTransform$Relate = {ctor: 'Relate'};
var _user$project$ValueBasedTransform$relate = F8(
	function (syntax, solutionsCache, originalExp, maybeEnv, selectedFeatures, slate, widgets, syncOptions) {
		var featuresAndEquations = A3(_user$project$ValueBasedTransform$selectedFeaturesToFeaturesAndEquations, selectedFeatures, slate, widgets);
		var relateOneInTermsOfAllOthers = F2(
			function (priorResults, featuresAndEquations) {
				var _p165 = _elm_lang$core$List$unzip(featuresAndEquations);
				var featureEqns = _p165._1;
				return A2(
					_elm_lang$core$List$concatMap,
					function (_p166) {
						var _p167 = _p166;
						var priorExp = _p167.exp;
						return A2(
							_elm_lang$core$List$map,
							function (result) {
								return _elm_lang$core$Native_Utils.update(
									result,
									{
										dependentLocIds: A2(_elm_lang$core$Basics_ops['++'], _p167.dependentLocIds, result.dependentLocIds)
									});
							},
							A2(
								_elm_lang$core$List$map,
								_user$project$InterfaceModel$prependDescription(
									A2(_elm_lang$core$Basics_ops['++'], _p167.description, ' → ')),
								A8(_user$project$ValueBasedTransform$relate__, syntax, solutionsCache, _user$project$ValueBasedTransform$Relate, featureEqns, priorExp, _p167.maybeTermShape, _p167.removedLocIdToMathExp, syncOptions)));
					},
					priorResults);
			});
		return A6(_user$project$ValueBasedTransform$synthesizeRelationCoordinateWiseAndSortResults, solutionsCache, syncOptions, relateOneInTermsOfAllOthers, originalExp, maybeEnv, featuresAndEquations);
	});
var _user$project$ValueBasedTransform$Equalize = {ctor: 'Equalize'};
var _user$project$ValueBasedTransform$makeEqual = F8(
	function (syntax, solutionsCache, originalExp, maybeEnv, selectedFeatures, slate, widgets, syncOptions) {
		var featuresAndEquations = A3(_user$project$ValueBasedTransform$selectedFeaturesToFeaturesAndEquations, selectedFeatures, slate, widgets);
		var equalizeAll = F2(
			function (priorResults, featuresAndEquations) {
				var _p168 = _elm_lang$core$List$unzip(featuresAndEquations);
				var features = _p168._0;
				var featureEqns = _p168._1;
				var descriptionPrefix = '';
				return A2(
					_elm_lang$core$List$concatMap,
					function (_p169) {
						var _p170 = _p169;
						var priorExp = _p170.exp;
						return A2(
							_elm_lang$core$List$map,
							function (result) {
								return _elm_lang$core$Native_Utils.update(
									result,
									{
										dependentLocIds: A2(_elm_lang$core$Basics_ops['++'], _p170.dependentLocIds, result.dependentLocIds)
									});
							},
							A2(
								_elm_lang$core$List$map,
								_user$project$InterfaceModel$prependDescription(
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p170.description,
										A2(
											_elm_lang$core$Basics_ops['++'],
											' → ',
											A2(_elm_lang$core$Basics_ops['++'], descriptionPrefix, ' ')))),
								A8(_user$project$ValueBasedTransform$relate__, syntax, solutionsCache, _user$project$ValueBasedTransform$Equalize, featureEqns, priorExp, _p170.maybeTermShape, _p170.removedLocIdToMathExp, syncOptions)));
					},
					priorResults);
			});
		return A6(_user$project$ValueBasedTransform$synthesizeRelationCoordinateWiseAndSortResults, solutionsCache, syncOptions, equalizeAll, originalExp, maybeEnv, featuresAndEquations);
	});

var _user$project$ExpressionBasedTransform$noExtraneousFreeVarsInRemovedClones = F2(
	function (cloneExps, commonScopeWhereAbstractionWillBeDefined) {
		var freeAtAbstraction = _user$project$LangTools$freeVars(commonScopeWhereAbstractionWillBeDefined);
		return A2(
			_elm_lang$core$List$all,
			function (cloneExp) {
				return A2(
					_elm_lang$core$List$all,
					function ($var) {
						return A2(_elm_lang$core$List$member, $var, freeAtAbstraction);
					},
					_user$project$LangTools$freeVars(cloneExp));
			},
			cloneExps);
	});
var _user$project$ExpressionBasedTransform$detectClones = F6(
	function (originalExp, candidateExpFilter, minCloneCount, minCloneSize, argCount, allowCurrying) {
		var argVar = _user$project$Lang$eVar('INSERT_ARGUMENT_HERE');
		var isArgVarPlaceholder = function (exp) {
			var _p0 = exp.val.e__;
			if (_p0.ctor === 'EVar') {
				return _elm_lang$core$Native_Utils.eq(_p0._1, 'INSERT_ARGUMENT_HERE');
			} else {
				return false;
			}
		};
		var merge = F2(
			function (expA, expB) {
				merge:
				while (true) {
					var _p1 = {ctor: '_Tuple2', _0: expA.val.e__, _1: expB.val.e__};
					_v1_21:
					do {
						_v1_20:
						do {
							_v1_13:
							do {
								if (_p1.ctor === '_Tuple2') {
									switch (_p1._0.ctor) {
										case 'EConst':
											switch (_p1._1.ctor) {
												case 'EConst':
													return _elm_lang$core$Native_Utils.eq(_p1._0._1, _p1._1._1) ? expA : argVar;
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EBase':
											switch (_p1._1.ctor) {
												case 'EBase':
													return A2(_user$project$Lang$eBaseValsEqual, _p1._0._1, _p1._1._1) ? expA : argVar;
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EVar':
											switch (_p1._1.ctor) {
												case 'EVar':
													return _elm_lang$core$Native_Utils.eq(_p1._0._1, _p1._1._1) ? expA : argVar;
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EFun':
											switch (_p1._1.ctor) {
												case 'EFun':
													var _p2 = _p1._0._1;
													return A2(_user$project$LangTools$patternListsEqual, _p2, _p1._1._1) ? A2(
														_user$project$Lang$replaceE__,
														expA,
														A4(
															_user$project$Lang$EFun,
															_p1._0._0,
															_p2,
															A2(merge, _p1._0._2, _p1._1._2),
															_p1._0._3)) : argVar;
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EOp':
											switch (_p1._1.ctor) {
												case 'EOp':
													var _p6 = _p1._0._1;
													return _elm_lang$core$Native_Utils.eq(_p6.val, _p1._1._1.val) ? A2(
														_elm_lang$core$Maybe$withDefault,
														argVar,
														A2(
															_elm_lang$core$Maybe$map,
															function (_p3) {
																return function (newEs) {
																	return A2(
																		_user$project$Lang$replaceE__,
																		expA,
																		A4(_user$project$Lang$EOp, _p1._0._0, _p6, newEs, _p1._0._3));
																}(
																	A2(
																		_elm_lang$core$List$map,
																		function (_p4) {
																			var _p5 = _p4;
																			return A2(merge, _p5._0, _p5._1);
																		},
																		_p3));
															},
															A2(_user$project$Utils$maybeZip, _p1._0._2, _p1._1._2))) : argVar;
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EList':
											switch (_p1._1.ctor) {
												case 'EList':
													if (_p1._0._3.ctor === 'Nothing') {
														if (_p1._1._3.ctor === 'Nothing') {
															var _p10 = _p1._0._1;
															return A2(
																_elm_lang$core$Maybe$withDefault,
																argVar,
																A2(
																	_elm_lang$core$Maybe$map,
																	function (_p7) {
																		return function (newEs) {
																			return A2(
																				_user$project$Lang$replaceE__,
																				expA,
																				A5(
																					_user$project$Lang$EList,
																					_p1._0._0,
																					A2(
																						_user$project$Utils$zip,
																						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p10),
																						newEs),
																					_p1._0._2,
																					_elm_lang$core$Maybe$Nothing,
																					_p1._0._4));
																		}(
																			A2(
																				_elm_lang$core$List$map,
																				function (_p8) {
																					var _p9 = _p8;
																					return A2(merge, _p9._0, _p9._1);
																				},
																				_p7));
																	},
																	A2(
																		_user$project$Utils$maybeZip,
																		A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p10),
																		A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p1._1._1))));
														} else {
															break _v1_21;
														}
													} else {
														if (_p1._1._3.ctor === 'Just') {
															var _p14 = _p1._0._1;
															return A2(
																_elm_lang$core$Maybe$withDefault,
																argVar,
																A2(
																	_elm_lang$core$Maybe$map,
																	function (_p11) {
																		return function (newEs) {
																			return A2(
																				_user$project$Lang$replaceE__,
																				expA,
																				A5(
																					_user$project$Lang$EList,
																					_p1._0._0,
																					A2(
																						_user$project$Utils$zip,
																						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p14),
																						newEs),
																					_p1._0._2,
																					_elm_lang$core$Maybe$Just(
																						A2(merge, _p1._0._3._0, _p1._1._3._0)),
																					_p1._0._4));
																		}(
																			A2(
																				_elm_lang$core$List$map,
																				function (_p12) {
																					var _p13 = _p12;
																					return A2(merge, _p13._0, _p13._1);
																				},
																				_p11));
																	},
																	A2(
																		_user$project$Utils$maybeZip,
																		A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p14),
																		A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p1._1._1))));
														} else {
															break _v1_21;
														}
													}
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EApp':
											switch (_p1._1.ctor) {
												case 'EApp':
													return A2(
														_elm_lang$core$Maybe$withDefault,
														argVar,
														A2(
															_elm_lang$core$Maybe$map,
															function (_p15) {
																return function (newEs) {
																	return A2(
																		_user$project$Lang$replaceE__,
																		expA,
																		A5(
																			_user$project$Lang$EApp,
																			_p1._0._0,
																			A2(merge, _p1._0._1, _p1._1._1),
																			newEs,
																			_p1._0._3,
																			_p1._0._4));
																}(
																	A2(
																		_elm_lang$core$List$map,
																		function (_p16) {
																			var _p17 = _p16;
																			return A2(merge, _p17._0, _p17._1);
																		},
																		_p15));
															},
															A2(_user$project$Utils$maybeZip, _p1._0._2, _p1._1._2)));
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'ELet':
											switch (_p1._1.ctor) {
												case 'ELet':
													var _p19 = _p1._0._2;
													var _p18 = _p1._0._3;
													return (_elm_lang$core$Native_Utils.eq(_p19, _p1._1._2) && A2(_user$project$LangTools$patternsEqual, _p18, _p1._1._3)) ? A2(
														_user$project$Lang$replaceE__,
														expA,
														A9(
															_user$project$Lang$ELet,
															_p1._0._0,
															_p1._0._1,
															_p19,
															_p18,
															_p1._0._4,
															A2(merge, _p1._0._5, _p1._1._5),
															_p1._0._6,
															A2(merge, _p1._0._7, _p1._1._7),
															_p1._0._8)) : argVar;
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EIf':
											switch (_p1._1.ctor) {
												case 'EIf':
													return A2(
														_user$project$Lang$replaceE__,
														expA,
														A7(
															_user$project$Lang$EIf,
															_p1._0._0,
															A2(merge, _p1._0._1, _p1._1._1),
															_p1._0._2,
															A2(merge, _p1._0._3, _p1._1._3),
															_p1._0._4,
															A2(merge, _p1._0._5, _p1._1._5),
															_p1._0._6));
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'ECase':
											switch (_p1._1.ctor) {
												case 'ECase':
													return A2(
														_elm_lang$core$Maybe$withDefault,
														argVar,
														A2(
															_elm_lang$core$Maybe$andThen,
															function (branchPairs) {
																var bValPairs = A2(
																	_elm_lang$core$List$map,
																	function (_p20) {
																		var _p21 = _p20;
																		return {ctor: '_Tuple2', _0: _p21._0.val, _1: _p21._1.val};
																	},
																	branchPairs);
																return A2(
																	_elm_lang$core$List$all,
																	function (_p22) {
																		var _p23 = _p22;
																		return A2(_user$project$LangTools$patternsEqual, _p23._0._1, _p23._1._1);
																	},
																	bValPairs) ? _elm_lang$core$Maybe$Just(
																	A2(
																		_user$project$Lang$replaceE__,
																		expA,
																		A4(
																			_user$project$Lang$ECase,
																			_p1._0._0,
																			A2(merge, _p1._0._1, _p1._1._1),
																			A2(
																				_elm_lang$core$List$map,
																				function (_p24) {
																					var _p25 = _p24;
																					return _elm_lang$core$Native_Utils.update(
																						_p25._0._0,
																						{
																							val: A4(
																								_user$project$Lang$Branch_,
																								_p25._1._0._0,
																								_p25._1._0._1,
																								A2(merge, _p25._1._0._2, _p25._1._1._2),
																								_p25._1._0._3)
																						});
																				},
																				A2(_user$project$Utils$zip, branchPairs, bValPairs)),
																			_p1._0._3))) : _elm_lang$core$Maybe$Nothing;
															},
															A2(_user$project$Utils$maybeZip, _p1._0._2, _p1._1._2)));
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'ETypeCase':
											switch (_p1._1.ctor) {
												case 'ETypeCase':
													return A2(
														_elm_lang$core$Maybe$withDefault,
														argVar,
														A2(
															_elm_lang$core$Maybe$andThen,
															function (tbranchPairs) {
																var tbValPairs = A2(
																	_elm_lang$core$List$map,
																	function (_p26) {
																		var _p27 = _p26;
																		return {ctor: '_Tuple2', _0: _p27._0.val, _1: _p27._1.val};
																	},
																	tbranchPairs);
																return A2(
																	_elm_lang$core$List$all,
																	function (_p28) {
																		var _p29 = _p28;
																		return A2(_user$project$Types$equal, _p29._0._1, _p29._1._1);
																	},
																	tbValPairs) ? _elm_lang$core$Maybe$Just(
																	A2(
																		_user$project$Lang$replaceE__,
																		expA,
																		A4(
																			_user$project$Lang$ETypeCase,
																			_p1._0._0,
																			A2(merge, _p1._0._1, _p1._1._1),
																			A2(
																				_elm_lang$core$List$map,
																				function (_p30) {
																					var _p31 = _p30;
																					return _elm_lang$core$Native_Utils.update(
																						_p31._0._0,
																						{
																							val: A4(
																								_user$project$Lang$TBranch_,
																								_p31._1._0._0,
																								_p31._1._0._1,
																								A2(merge, _p31._1._0._2, _p31._1._1._2),
																								_p31._1._0._3)
																						});
																				},
																				A2(_user$project$Utils$zip, tbranchPairs, tbValPairs)),
																			_p1._0._3))) : _elm_lang$core$Maybe$Nothing;
															},
															A2(_user$project$Utils$maybeZip, _p1._0._2, _p1._1._2)));
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EComment':
											return A2(
												_user$project$Lang$replaceE__,
												expA,
												A3(
													_user$project$Lang$EComment,
													_p1._0._0,
													_p1._0._1,
													A2(merge, _p1._0._2, expB)));
										case 'EOption':
											switch (_p1._1.ctor) {
												case 'EComment':
													break _v1_13;
												case 'EOption':
													return argVar;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'ETyp':
											switch (_p1._1.ctor) {
												case 'EComment':
													break _v1_13;
												case 'ETyp':
													var _p33 = _p1._0._2;
													var _p32 = _p1._0._1;
													return (A2(_user$project$LangTools$patternsEqual, _p32, _p1._1._1) && A2(_user$project$Types$equal, _p33, _p1._1._2)) ? A2(
														_user$project$Lang$replaceE__,
														expA,
														A5(
															_user$project$Lang$ETyp,
															_p1._0._0,
															_p32,
															_p33,
															A2(merge, _p1._0._3, _p1._1._3),
															_p1._0._4)) : argVar;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EColonType':
											switch (_p1._1.ctor) {
												case 'EComment':
													break _v1_13;
												case 'EColonType':
													var _p34 = _p1._0._3;
													return A2(_user$project$Types$equal, _p34, _p1._1._3) ? A2(
														_user$project$Lang$replaceE__,
														expA,
														A5(
															_user$project$Lang$EColonType,
															_p1._0._0,
															A2(merge, _p1._0._1, _p1._1._1),
															_p1._0._2,
															_p34,
															_p1._0._4)) : argVar;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'ETypeAlias':
											switch (_p1._1.ctor) {
												case 'EComment':
													break _v1_13;
												case 'ETypeAlias':
													var _p36 = _p1._0._2;
													var _p35 = _p1._0._1;
													return (A2(_user$project$LangTools$patternsEqual, _p35, _p1._1._1) && A2(_user$project$Types$equal, _p36, _p1._1._2)) ? A2(
														_user$project$Lang$replaceE__,
														expA,
														A5(
															_user$project$Lang$ETypeAlias,
															_p1._0._0,
															_p35,
															_p36,
															A2(merge, _p1._0._3, _p1._1._3),
															_p1._0._4)) : argVar;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
										case 'EParens':
											switch (_p1._1.ctor) {
												case 'EComment':
													break _v1_13;
												case 'EParens':
													return A2(
														_user$project$Lang$replaceE__,
														expA,
														A4(
															_user$project$Lang$EParens,
															_p1._0._0,
															A2(merge, _p1._0._1, _p1._1._1),
															_p1._0._2,
															_p1._0._3));
												default:
													return A2(
														_user$project$Lang$replaceE__,
														expA,
														A4(
															_user$project$Lang$EParens,
															_p1._0._0,
															A2(merge, _p1._0._1, expB),
															_p1._0._2,
															_p1._0._3));
											}
										default:
											switch (_p1._1.ctor) {
												case 'EComment':
													break _v1_13;
												case 'EParens':
													break _v1_20;
												default:
													break _v1_21;
											}
									}
								} else {
									break _v1_21;
								}
							} while(false);
							var _v12 = expA,
								_v13 = _p1._1._2;
							expA = _v12;
							expB = _v13;
							continue merge;
						} while(false);
						return A2(
							_user$project$Lang$replaceE__,
							expB,
							A4(
								_user$project$Lang$EParens,
								_p1._1._0,
								A2(merge, expA, _p1._1._1),
								_p1._1._2,
								_p1._1._3));
					} while(false);
					return argVar;
				}
			});
		var mergeSingleArg = F2(
			function (expA, expB) {
				mergeSingleArg:
				while (true) {
					var retArgVar = {ctor: '_Tuple2', _0: argVar, _1: true};
					var retSame = {ctor: '_Tuple2', _0: expA, _1: false};
					var generalizedMerge = F6(
						function (precondition, maybeE1Pair, maybeE2Pair, maybeE3Pair, maybePairOfEs, newE__Func) {
							if (precondition) {
								var _p39 = function (_p37) {
									var _p38 = _p37;
									return A2(_user$project$Utils$maybeZip, _p38._0, _p38._1);
								}(
									A2(
										_elm_lang$core$Maybe$withDefault,
										{
											ctor: '_Tuple2',
											_0: {ctor: '[]'},
											_1: {ctor: '[]'}
										},
										maybePairOfEs));
								if (_p39.ctor === 'Nothing') {
									return retArgVar;
								} else {
									var _p40 = A2(
										_elm_lang$core$Maybe$withDefault,
										{
											ctor: '_Tuple2',
											_0: _user$project$Lang$eVar('ignored'),
											_1: false
										},
										A2(
											_elm_lang$core$Maybe$map,
											function (_p41) {
												var _p42 = _p41;
												return A2(mergeSingleArg, _p42._0, _p42._1);
											},
											maybeE1Pair));
									var e1Merged = _p40._0;
									var e1HasArgVar = _p40._1;
									var _p43 = A2(
										_elm_lang$core$Maybe$withDefault,
										{
											ctor: '_Tuple2',
											_0: _user$project$Lang$eVar('ignored'),
											_1: false
										},
										A2(
											_elm_lang$core$Maybe$map,
											function (_p44) {
												var _p45 = _p44;
												return A2(mergeSingleArg, _p45._0, _p45._1);
											},
											maybeE2Pair));
									var e2Merged = _p43._0;
									var e2HasArgVar = _p43._1;
									var _p46 = A2(
										_elm_lang$core$Maybe$withDefault,
										{
											ctor: '_Tuple2',
											_0: _user$project$Lang$eVar('ignored'),
											_1: false
										},
										A2(
											_elm_lang$core$Maybe$map,
											function (_p47) {
												var _p48 = _p47;
												return A2(mergeSingleArg, _p48._0, _p48._1);
											},
											maybeE3Pair));
									var e3Merged = _p46._0;
									var e3HasArgVar = _p46._1;
									var _p49 = _elm_lang$core$List$unzip(
										A2(
											_elm_lang$core$List$map,
											function (_p50) {
												var _p51 = _p50;
												return A2(mergeSingleArg, _p51._0, _p51._1);
											},
											_p39._0));
									var esMergers = _p49._0;
									var esHasArgVarBools = _p49._1;
									var argVarCount = A2(
										_user$project$Utils$count,
										F2(
											function (x, y) {
												return _elm_lang$core$Native_Utils.eq(x, y);
											})(true),
										{
											ctor: '::',
											_0: e1HasArgVar,
											_1: {
												ctor: '::',
												_0: e2HasArgVar,
												_1: {ctor: '::', _0: e3HasArgVar, _1: esHasArgVarBools}
											}
										});
									if (_elm_lang$core$Native_Utils.cmp(argVarCount, 1) < 1) {
										var newE__ = A4(newE__Func, e1Merged, e2Merged, e3Merged, esMergers);
										return {
											ctor: '_Tuple2',
											_0: A2(_user$project$Lang$replaceE__, expA, newE__),
											_1: _elm_lang$core$Native_Utils.eq(argVarCount, 1)
										};
									} else {
										return retArgVar;
									}
								}
							} else {
								return retArgVar;
							}
						});
					var _p52 = {ctor: '_Tuple2', _0: expA.val.e__, _1: expB.val.e__};
					_v20_21:
					do {
						_v20_20:
						do {
							_v20_13:
							do {
								if (_p52.ctor === '_Tuple2') {
									switch (_p52._0.ctor) {
										case 'EConst':
											switch (_p52._1.ctor) {
												case 'EConst':
													return _elm_lang$core$Native_Utils.eq(_p52._0._1, _p52._1._1) ? retSame : retArgVar;
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EBase':
											switch (_p52._1.ctor) {
												case 'EBase':
													return A2(_user$project$Lang$eBaseValsEqual, _p52._0._1, _p52._1._1) ? retSame : retArgVar;
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EVar':
											switch (_p52._1.ctor) {
												case 'EVar':
													return _elm_lang$core$Native_Utils.eq(_p52._0._1, _p52._1._1) ? retSame : retArgVar;
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EFun':
											switch (_p52._1.ctor) {
												case 'EFun':
													var _p56 = _p52._0._1;
													return A6(
														generalizedMerge,
														A2(_user$project$LangTools$patternListsEqual, _p56, _p52._1._1),
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._2, _1: _p52._1._2}),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														F4(
															function (mergedBody, _p55, _p54, _p53) {
																return A4(_user$project$Lang$EFun, _p52._0._0, _p56, mergedBody, _p52._0._3);
															}));
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EOp':
											switch (_p52._1.ctor) {
												case 'EOp':
													var _p60 = _p52._0._1;
													return A6(
														generalizedMerge,
														_elm_lang$core$Native_Utils.eq(_p60.val, _p52._1._1.val),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._2, _1: _p52._1._2}),
														F4(
															function (_p59, _p58, _p57, mergedEs) {
																return A4(_user$project$Lang$EOp, _p52._0._0, _p60, mergedEs, _p52._0._3);
															}));
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EList':
											switch (_p52._1.ctor) {
												case 'EList':
													if (_p52._0._3.ctor === 'Nothing') {
														if (_p52._1._3.ctor === 'Nothing') {
															var _p64 = _p52._0._1;
															return A6(
																generalizedMerge,
																true,
																_elm_lang$core$Maybe$Nothing,
																_elm_lang$core$Maybe$Nothing,
																_elm_lang$core$Maybe$Nothing,
																_elm_lang$core$Maybe$Just(
																	{
																		ctor: '_Tuple2',
																		_0: A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p64),
																		_1: A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p52._1._1)
																	}),
																F4(
																	function (_p63, _p62, _p61, headMergers) {
																		return A5(
																			_user$project$Lang$EList,
																			_p52._0._0,
																			A2(
																				_user$project$Utils$zip,
																				A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p64),
																				headMergers),
																			_p52._0._2,
																			_elm_lang$core$Maybe$Nothing,
																			_p52._0._4);
																	}));
														} else {
															break _v20_21;
														}
													} else {
														if (_p52._1._3.ctor === 'Just') {
															var _p67 = _p52._0._1;
															return A6(
																generalizedMerge,
																true,
																_elm_lang$core$Maybe$Just(
																	{ctor: '_Tuple2', _0: _p52._0._3._0, _1: _p52._1._3._0}),
																_elm_lang$core$Maybe$Nothing,
																_elm_lang$core$Maybe$Nothing,
																_elm_lang$core$Maybe$Just(
																	{
																		ctor: '_Tuple2',
																		_0: A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p67),
																		_1: A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p52._1._1)
																	}),
																F4(
																	function (tailMerged, _p66, _p65, headMergers) {
																		return A5(
																			_user$project$Lang$EList,
																			_p52._0._0,
																			A2(
																				_user$project$Utils$zip,
																				A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p67),
																				headMergers),
																			_p52._0._2,
																			_elm_lang$core$Maybe$Just(tailMerged),
																			_p52._0._4);
																	}));
														} else {
															break _v20_21;
														}
													}
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EApp':
											switch (_p52._1.ctor) {
												case 'EApp':
													return A6(
														generalizedMerge,
														true,
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._1, _1: _p52._1._1}),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._2, _1: _p52._1._2}),
														F4(
															function (fMerged, _p69, _p68, argMergers) {
																return A5(_user$project$Lang$EApp, _p52._0._0, fMerged, argMergers, _p52._0._3, _p52._0._4);
															}));
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'ELet':
											switch (_p52._1.ctor) {
												case 'ELet':
													var _p73 = _p52._0._2;
													var _p72 = _p52._0._3;
													return A6(
														generalizedMerge,
														_elm_lang$core$Native_Utils.eq(_p73, _p52._1._2) && A2(_user$project$LangTools$patternsEqual, _p72, _p52._1._3),
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._5, _1: _p52._1._5}),
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._7, _1: _p52._1._7}),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														F4(
															function (e1Merged, e2Merged, _p71, _p70) {
																return A9(_user$project$Lang$ELet, _p52._0._0, _p52._0._1, _p73, _p72, _p52._0._4, e1Merged, _p52._0._6, e2Merged, _p52._0._8);
															}));
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EIf':
											switch (_p52._1.ctor) {
												case 'EIf':
													return A6(
														generalizedMerge,
														true,
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._1, _1: _p52._1._1}),
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._3, _1: _p52._1._3}),
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._5, _1: _p52._1._5}),
														_elm_lang$core$Maybe$Nothing,
														F4(
															function (e1Merged, e2Merged, e3Merged, _p74) {
																return A7(_user$project$Lang$EIf, _p52._0._0, e1Merged, _p52._0._2, e2Merged, _p52._0._4, e3Merged, _p52._0._6);
															}));
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'ECase':
											switch (_p52._1.ctor) {
												case 'ECase':
													var _p78 = _p52._1._2;
													var _p77 = _p52._0._2;
													var precondition = A3(
														_user$project$Utils$listsEqualBy,
														_user$project$LangTools$patternsEqual,
														_user$project$Lang$branchPats(_p77),
														_user$project$Lang$branchPats(_p78));
													return A6(
														generalizedMerge,
														precondition,
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._1, _1: _p52._1._1}),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Just(
															{
																ctor: '_Tuple2',
																_0: _user$project$Lang$branchExps(_p77),
																_1: _user$project$Lang$branchExps(_p78)
															}),
														F4(
															function (eMerged, _p76, _p75, branchExpsMerged) {
																return A4(
																	_user$project$Lang$ECase,
																	_p52._0._0,
																	eMerged,
																	A3(_elm_lang$core$List$map2, _user$project$Lang$replaceBranchExp, _p77, branchExpsMerged),
																	_p52._0._3);
															}));
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'ETypeCase':
											switch (_p52._1.ctor) {
												case 'ETypeCase':
													var _p82 = _p52._1._2;
													var _p81 = _p52._0._2;
													var precondition = A3(
														_user$project$Utils$listsEqualBy,
														_user$project$Types$equal,
														_user$project$Lang$tbranchTypes(_p81),
														_user$project$Lang$tbranchTypes(_p82));
													return A6(
														generalizedMerge,
														precondition,
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._1, _1: _p52._1._1}),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Just(
															{
																ctor: '_Tuple2',
																_0: _user$project$Lang$tbranchExps(_p81),
																_1: _user$project$Lang$tbranchExps(_p82)
															}),
														F4(
															function (eMerged, _p80, _p79, tbranchExpsMerged) {
																return A4(
																	_user$project$Lang$ETypeCase,
																	_p52._0._0,
																	eMerged,
																	A3(_elm_lang$core$List$map2, _user$project$Lang$replaceTBranchExp, _p81, tbranchExpsMerged),
																	_p52._0._3);
															}));
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EComment':
											return function (_p83) {
												var _p84 = _p83;
												return {
													ctor: '_Tuple2',
													_0: A2(
														_user$project$Lang$replaceE__,
														expA,
														A3(_user$project$Lang$EComment, _p52._0._0, _p52._0._1, _p84._0)),
													_1: _p84._1
												};
											}(
												A2(mergeSingleArg, _p52._0._2, expB));
										case 'EOption':
											switch (_p52._1.ctor) {
												case 'EComment':
													break _v20_13;
												case 'EOption':
													return retArgVar;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'ETyp':
											switch (_p52._1.ctor) {
												case 'EComment':
													break _v20_13;
												case 'ETyp':
													var _p89 = _p52._0._2;
													var _p88 = _p52._0._1;
													return A6(
														generalizedMerge,
														A2(_user$project$LangTools$patternsEqual, _p88, _p52._1._1) && A2(_user$project$Types$equal, _p89, _p52._1._2),
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._3, _1: _p52._1._3}),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														F4(
															function (mergedE, _p87, _p86, _p85) {
																return A5(_user$project$Lang$ETyp, _p52._0._0, _p88, _p89, mergedE, _p52._0._4);
															}));
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EColonType':
											switch (_p52._1.ctor) {
												case 'EComment':
													break _v20_13;
												case 'EColonType':
													var _p93 = _p52._0._3;
													return A6(
														generalizedMerge,
														A2(_user$project$Types$equal, _p93, _p52._1._3),
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._1, _1: _p52._1._1}),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														F4(
															function (mergedE, _p92, _p91, _p90) {
																return A5(_user$project$Lang$EColonType, _p52._0._0, mergedE, _p52._0._2, _p93, _p52._0._4);
															}));
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'ETypeAlias':
											switch (_p52._1.ctor) {
												case 'EComment':
													break _v20_13;
												case 'ETypeAlias':
													var _p98 = _p52._0._2;
													var _p97 = _p52._0._1;
													return A6(
														generalizedMerge,
														A2(_user$project$LangTools$patternsEqual, _p97, _p52._1._1) && A2(_user$project$Types$equal, _p98, _p52._1._2),
														_elm_lang$core$Maybe$Just(
															{ctor: '_Tuple2', _0: _p52._0._3, _1: _p52._1._3}),
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														_elm_lang$core$Maybe$Nothing,
														F4(
															function (mergedE, _p96, _p95, _p94) {
																return A5(_user$project$Lang$ETypeAlias, _p52._0._0, _p97, _p98, mergedE, _p52._0._4);
															}));
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
										case 'EParens':
											switch (_p52._1.ctor) {
												case 'EComment':
													break _v20_13;
												case 'EParens':
													return function (_p99) {
														var _p100 = _p99;
														return {
															ctor: '_Tuple2',
															_0: A2(
																_user$project$Lang$replaceE__,
																expA,
																A4(_user$project$Lang$EParens, _p52._0._0, _p100._0, _p52._0._2, _p52._0._3)),
															_1: _p100._1
														};
													}(
														A2(mergeSingleArg, _p52._0._1, _p52._1._1));
												default:
													return function (_p101) {
														var _p102 = _p101;
														return {
															ctor: '_Tuple2',
															_0: A2(
																_user$project$Lang$replaceE__,
																expA,
																A4(_user$project$Lang$EParens, _p52._0._0, _p102._0, _p52._0._2, _p52._0._3)),
															_1: _p102._1
														};
													}(
														A2(mergeSingleArg, _p52._0._1, expB));
											}
										default:
											switch (_p52._1.ctor) {
												case 'EComment':
													break _v20_13;
												case 'EParens':
													break _v20_20;
												default:
													break _v20_21;
											}
									}
								} else {
									break _v20_21;
								}
							} while(false);
							var _v24 = expA,
								_v25 = _p52._1._2;
							expA = _v24;
							expB = _v25;
							continue mergeSingleArg;
						} while(false);
						return function (_p103) {
							var _p104 = _p103;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_user$project$Lang$replaceE__,
									expB,
									A4(_user$project$Lang$EParens, _p52._1._0, _p104._0, _p52._1._2, _p52._1._3)),
								_1: _p104._1
							};
						}(
							A2(mergeSingleArg, expA, _p52._1._1));
					} while(false);
					return retArgVar;
				}
			});
		var goThroughMergedAndMakeParentArgIfAllChildrenAreArgs = function (merged) {
			return A2(
				_user$project$Lang$mapExp,
				function (e) {
					var _p105 = _user$project$Lang$childExps(e);
					if (_p105.ctor === '[]') {
						return e;
					} else {
						if (_p105._1.ctor === '[]') {
							return e;
						} else {
							return A2(
								_elm_lang$core$List$all,
								function (_p106) {
									return isArgVarPlaceholder(
										_user$project$Lang$expEffectiveExp(_p106));
								},
								_p105) ? argVar : e;
						}
					}
				},
				merged);
		};
		var mergeFunc = _elm_lang$core$Native_Utils.eq(argCount, 1) ? F2(
			function (eA, eB) {
				return _elm_lang$core$Tuple$first(
					A2(mergeSingleArg, eA, eB));
			}) : merge;
		var argVarCount = function (exp) {
			return A2(
				_user$project$Utils$count,
				isArgVarPlaceholder,
				_user$project$Lang$flattenExpTree(exp));
		};
		return A2(
			_elm_lang$core$List$map,
			function (_p107) {
				var _p108 = _p107;
				var _p128 = _p108._1;
				var _p127 = _p108._2;
				var _p126 = _p108._0;
				var eidsToReplace = A2(
					_elm_lang$core$List$map,
					function (_p109) {
						return function (_) {
							return _.eid;
						}(
							function (_) {
								return _.val;
							}(_p109));
					},
					_p128);
				var commonScope = A2(
					_user$project$LangTools$deepestCommonAncestorWithNewline,
					originalExp,
					function (exp) {
						return A2(_elm_lang$core$List$member, exp.val.eid, eidsToReplace);
					});
				var funcSuggestedName = function () {
					var defaultName = _elm_lang$core$Native_Utils.eq(
						_user$project$LangTools$simpleExpName(_p126),
						'INSERT_ARGUMENT_HERE') ? 'thing' : _user$project$LangTools$simpleExpName(_p126);
					return A3(_user$project$LangTools$commonNameForEIdsWithDefault, defaultName, originalExp, eidsToReplace);
				}();
				var _p110 = A3(
					_user$project$Lang$mapFoldExp,
					F2(
						function (e, argN) {
							var _p111 = e.val.e__;
							if ((_p111.ctor === 'EVar') && (_p111._1 === 'INSERT_ARGUMENT_HERE')) {
								return {
									ctor: '_Tuple2',
									_0: A2(
										_user$project$Lang$replaceE__,
										e,
										A2(
											_user$project$Lang$EVar,
											_p111._0,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'INSERT_ARGUMENT',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(argN),
													'_HERE')))),
									_1: argN - 1
								};
							} else {
								return {ctor: '_Tuple2', _0: e, _1: argN};
							}
						}),
					argCount,
					_p126);
				var mergedArgUsesEnumerated = _p110._0;
				var funcWithPlaceholders = function () {
					var argList = A2(
						_elm_lang$core$List$map,
						function (n) {
							return (_elm_lang$core$Native_Utils.eq(n, 1) ? _user$project$Lang$pVar0 : _user$project$Lang$pVar)(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'INSERT_ARGUMENT',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(n),
										'_HERE')));
						},
						A2(_elm_lang$core$List$range, 1, argCount));
					var fBody = _user$project$Lang$unindent(
						_user$project$LangSimplify$removeUnusedLetPats(
							_user$project$LangSimplify$changeRenamedVarsToOuter(mergedArgUsesEnumerated)));
					var fBodyReflowed = function () {
						var multipleLinesForFunction = (!A2(
							_elm_lang$core$String$contains,
							'\n',
							_user$project$LangUnparser$unparse(fBody))) && (_elm_lang$core$Native_Utils.cmp(
							_user$project$LangTools$longLineLength,
							_elm_lang$core$String$length(
								A3(
									_user$project$LangUnparser$unparseWithUniformWhitespace,
									true,
									true,
									A2(_user$project$Lang$eFun, argList, fBody)))) < 0);
						return multipleLinesForFunction ? A2(_user$project$Lang$replacePrecedingWhitespace, '\n', fBody) : _user$project$Lang$ensureWhitespaceExp(fBody);
					}();
					var explicitFunc = A2(_user$project$Lang$eFun, argList, fBodyReflowed);
					if ((!allowCurrying) || (_elm_lang$core$Native_Utils.cmp(argCount, 2) > -1)) {
						return explicitFunc;
					} else {
						var _p112 = fBody.val.e__;
						if (_p112.ctor === 'EApp') {
							var _p116 = _p112._1;
							var _p115 = _p112._2;
							var _p113 = A2(_user$project$Utils$takeLast, 1, _p115);
							if ((_p113.ctor === '::') && (_p113._1.ctor === '[]')) {
								var _p114 = _p113._0.val.e__;
								if ((_p114.ctor === 'EVar') && (_p114._1 === 'INSERT_ARGUMENT1_HERE')) {
									return (_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$List$length(_p115),
										2) > -1) ? A2(
										_user$project$Lang$replacePrecedingWhitespace,
										' ',
										A2(
											_user$project$Lang$replaceE__,
											fBody,
											A5(
												_user$project$Lang$EApp,
												_p112._0,
												_p116,
												A2(
													_elm_lang$core$List$take,
													_elm_lang$core$List$length(_p115) - 1,
													_p115),
												_p112._3,
												_p112._4))) : A2(_user$project$Lang$replacePrecedingWhitespace, ' ', _p116);
								} else {
									return explicitFunc;
								}
							} else {
								return explicitFunc;
							}
						} else {
							return explicitFunc;
						}
					}
				}();
				var _p117 = A3(
					_user$project$Utils$foldli1,
					F2(
						function (_p119, _p118) {
							var _p120 = _p119;
							var _p124 = _p120._0;
							var _p121 = _p118;
							var _p123 = _p121._1;
							var argBaseName = function () {
								var defaultName = _elm_lang$core$Native_Utils.eq(argCount, 0) ? 'arg' : A2(
									_elm_lang$core$Basics_ops['++'],
									'arg',
									_elm_lang$core$Basics$toString(_p124));
								return A3(
									_user$project$LangTools$commonNameForEIdsWithDefault,
									defaultName,
									originalExp,
									A2(
										_elm_lang$core$List$map,
										function (_p122) {
											return function (_) {
												return _.eid;
											}(
												function (_) {
													return _.val;
												}(_p122));
										},
										_p120._1));
							}();
							var argName = A3(_user$project$LangTools$nonCollidingName, argBaseName, 2, _p123);
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									_p121._0,
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: A2(
												_elm_lang$core$Basics_ops['++'],
												'INSERT_ARGUMENT',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(_p124),
													'_HERE')),
											_1: argName
										},
										_1: {ctor: '[]'}
									}),
								_1: A2(_elm_lang$core$Set$insert, argName, _p123)
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: _user$project$LangTools$identifiersSet(funcWithPlaceholders)
					},
					A2(
						_user$project$Utils$fromJust_,
						'ExpressionBasedTransform.detectClones maybeZipN',
						_user$project$Utils$maybeZipN(_p127)));
				var argRenamingsList = _p117._0;
				var _p125 = _elm_lang$core$List$unzip(argRenamingsList);
				var argNames = _p125._1;
				var abstractedFunc = A2(
					_user$project$LangTools$renameIdentifiers,
					_elm_lang$core$Dict$fromList(argRenamingsList),
					funcWithPlaceholders);
				return {
					ctor: '_Tuple5',
					_0: A3(_user$project$Utils$zip3, eidsToReplace, _p128, _p127),
					_1: abstractedFunc,
					_2: commonScope,
					_3: funcSuggestedName,
					_4: argNames
				};
			},
			A2(
				_user$project$Utils$dedupBy,
				function (_p129) {
					var _p130 = _p129;
					return A3(_user$project$LangUnparser$unparseWithUniformWhitespace, false, false, _p130._0);
				},
				A2(
					_elm_lang$core$List$sortBy,
					function (_p131) {
						var _p132 = _p131;
						return 0 - _elm_lang$core$List$length(_p132._1);
					},
					A2(
						_elm_lang$core$List$filter,
						function (_p133) {
							var _p134 = _p133;
							return A2(
								_elm_lang$core$List$all,
								function (e) {
									return _user$project$LangTools$isLiteral(e) || (_elm_lang$core$Native_Utils.cmp(
										_user$project$LangTools$nodeCount(e),
										3) < 1);
								},
								_elm_lang$core$List$concat(_p134._2));
						},
						A2(
							_elm_lang$core$List$map,
							function (_p135) {
								var _p136 = _p135;
								var _p138 = _p136._1;
								var _p137 = _p136._0;
								return {
									ctor: '_Tuple3',
									_0: _p137,
									_1: _p138,
									_2: A2(
										_elm_lang$core$List$map,
										function (exp) {
											return A2(_user$project$LangTools$extraExpsDiff, _p137, exp);
										},
										_p138)
								};
							},
							A2(
								_elm_lang$core$List$map,
								function (_p139) {
									var _p140 = _p139;
									return {
										ctor: '_Tuple2',
										_0: _p140._0,
										_1: A2(_elm_lang$core$List$sortBy, _user$project$Info$parsedThingToLocation, _p140._1)
									};
								},
								A2(
									_elm_lang$core$List$filter,
									function (_p141) {
										var _p142 = _p141;
										return _elm_lang$core$Native_Utils.eq(
											argVarCount(_p142._0),
											argCount);
									},
									A2(
										_elm_lang$core$List$concatMap,
										function (_p143) {
											var _p144 = _p143;
											var _p145 = _p144._0;
											return A2(
												_elm_lang$core$List$map,
												function (newMerged) {
													return {ctor: '_Tuple2', _0: newMerged, _1: _p144._1};
												},
												_user$project$Utils$dedup(
													{
														ctor: '::',
														_0: _p145,
														_1: {
															ctor: '::',
															_0: goThroughMergedAndMakeParentArgIfAllChildrenAreArgs(_p145),
															_1: {ctor: '[]'}
														}
													}));
										},
										A2(
											_elm_lang$core$List$filter,
											function (_p146) {
												var _p147 = _p146;
												return _elm_lang$core$Native_Utils.cmp(
													_elm_lang$core$List$length(_p147._1),
													minCloneCount) > -1;
											},
											A3(
												_elm_lang$core$List$foldl,
												F2(
													function (exp, mergeGroups) {
														var addedMergeGroups = A2(
															_elm_lang$core$List$filterMap,
															function (_p148) {
																var _p149 = _p148;
																var newMerged = A2(mergeFunc, _p149._0, exp);
																return (_elm_lang$core$Native_Utils.cmp(
																	_user$project$LangTools$nodeCount(newMerged),
																	minCloneSize) > -1) ? _elm_lang$core$Maybe$Just(
																	{
																		ctor: '_Tuple2',
																		_0: newMerged,
																		_1: {ctor: '::', _0: exp, _1: _p149._1}
																	}) : _elm_lang$core$Maybe$Nothing;
															},
															mergeGroups);
														return {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: exp,
																_1: {
																	ctor: '::',
																	_0: exp,
																	_1: {ctor: '[]'}
																}
															},
															_1: A2(_elm_lang$core$Basics_ops['++'], mergeGroups, addedMergeGroups)
														};
													}),
												{ctor: '[]'},
												A2(
													_elm_lang$core$List$filter,
													candidateExpFilter,
													A2(
														_elm_lang$core$List$filter,
														function (e) {
															return !(_user$project$Lang$isComment(e) || _user$project$Lang$isOption(e));
														},
														A2(_user$project$LangTools$subExpsOfSizeAtLeast, minCloneSize, originalExp)))))))))))));
	});
var _user$project$ExpressionBasedTransform$detectClonesOfVariousSizes = F6(
	function (candidateExpFilter, minCloneCount, minCloneSizeToArgumentRatio, sizes, allowCurrying, originalExp) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p150) {
				var _p151 = _p150;
				var _p152 = _user$project$Utils$unzip3(_p151._0);
				var cloneExps = _p152._1;
				return A2(_user$project$ExpressionBasedTransform$noExtraneousFreeVarsInRemovedClones, cloneExps, _p151._2);
			},
			A2(
				_elm_lang$core$List$concatMap,
				function (size) {
					return A6(_user$project$ExpressionBasedTransform$detectClones, originalExp, candidateExpFilter, minCloneCount, minCloneSizeToArgumentRatio * size, size, allowCurrying);
				},
				sizes));
	});
var _user$project$ExpressionBasedTransform$cloneEliminationSythesisResults = F4(
	function (candidateExpFilter, minCloneCount, minCloneSizeToArgumentRatio, originalExp) {
		return A2(
			_elm_lang$core$List$map,
			function (_p153) {
				var _p154 = _p153;
				var _p159 = _p154._2;
				var _p158 = _p154._0;
				var funcName = A3(
					_user$project$LangTools$nonCollidingName,
					_p154._3,
					2,
					_user$project$LangTools$identifiersSet(_p159));
				var oldIndentation = _user$project$Lang$indentationOf(_p159);
				var abstractedFuncIndented = A2(
					_user$project$Lang$replaceIndentation,
					A2(_elm_lang$core$Basics_ops['++'], '  ', oldIndentation),
					_p154._1);
				var eidToNewE__ = _elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$map,
						function (_p155) {
							var _p156 = _p155;
							return {
								ctor: '_Tuple2',
								_0: _p156._0,
								_1: A5(
									_user$project$Lang$EApp,
									_user$project$Lang$space1,
									_user$project$Lang$eVar0(funcName),
									A2(
										_elm_lang$core$List$map,
										_user$project$Lang$replacePrecedingWhitespace(' '),
										_p156._2),
									_user$project$Lang$SpaceApp,
									_user$project$Lang$space0)
							};
						},
						_p158));
				var usagesReplaced = A2(_user$project$Lang$applyESubstPreservingPrecedingWhitespace, eidToNewE__, _p159);
				var wrapped = A6(
					_user$project$LangTools$newLetFancyWhitespace,
					-1,
					false,
					_user$project$Lang$pVar(funcName),
					abstractedFuncIndented,
					usagesReplaced,
					originalExp);
				var newProgram = A3(_user$project$Lang$replaceExpNode, _p159.val.eid, wrapped, originalExp);
				var clonesName = function () {
					var _p157 = _user$project$Utils$unzip3(_p158);
					var eidsToReplace = _p157._0;
					var name = A2(_user$project$LangTools$commonNameForEIds, originalExp, eidsToReplace);
					return _elm_lang$core$Native_Utils.eq(name, '') ? _user$project$Utils$toSentence(
						A2(
							_elm_lang$core$List$map,
							_user$project$LangTools$expNameForEId(originalExp),
							eidsToReplace)) : A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							_elm_lang$core$List$length(_p158)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(_elm_lang$core$Basics_ops['++'], name, 's')));
				}();
				return A2(
					_user$project$InterfaceModel$synthesisResult,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Merge ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							clonesName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' by abstracting over ',
								_user$project$Utils$toSentence(_p154._4)))),
					newProgram);
			},
			A6(
				_user$project$ExpressionBasedTransform$detectClonesOfVariousSizes,
				candidateExpFilter,
				minCloneCount,
				minCloneSizeToArgumentRatio,
				A2(_elm_lang$core$List$range, 1, 8),
				false,
				originalExp));
	});
var _user$project$ExpressionBasedTransform$mapAbstractSynthesisResults = function (originalExp) {
	return A2(
		_elm_lang$core$List$map,
		function (_p160) {
			var _p161 = _p160;
			var _p167 = _p161._2;
			var _p166 = _p161._0;
			var _p165 = _p161._1;
			var _p162 = _user$project$Utils$unzip3(_p166);
			var eidsToReplace = _p162._0;
			var sortedExps = _p162._1;
			var parameterExpLists = _p162._2;
			var oldIndentation = _user$project$Lang$indentationOf(_p167);
			var mapCall = function () {
				var parameterExps = _elm_lang$core$List$concat(parameterExpLists);
				if (A2(
					_elm_lang$core$String$contains,
					'\n',
					_user$project$LangUnparser$unparse(_p165))) {
					var newLineIndent = F2(
						function (extraIndent, exp) {
							return A2(
								_user$project$Lang$replacePrecedingWhitespace,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\n',
									A2(_elm_lang$core$Basics_ops['++'], extraIndent, oldIndentation)),
								exp);
						});
					return A2(
						newLineIndent,
						'  ',
						A2(
							_user$project$Lang$eApp,
							_user$project$Lang$eVar0('map'),
							{
								ctor: '::',
								_0: A2(
									_user$project$Lang$replacePrecedingWhitespace,
									' ',
									A2(
										_user$project$Lang$indent,
										A2(_elm_lang$core$Basics_ops['++'], '      ', oldIndentation),
										_p165)),
								_1: {
									ctor: '::',
									_0: A2(
										newLineIndent,
										'    ',
										_user$project$Lang$eTuple(
											A3(_user$project$Lang$setExpListWhitespace, '', ' ', parameterExps))),
									_1: {ctor: '[]'}
								}
							}));
				} else {
					return A2(
						_user$project$Lang$eApp,
						_user$project$Lang$eVar0('map'),
						{
							ctor: '::',
							_0: _p165,
							_1: {
								ctor: '::',
								_0: _user$project$Lang$eTuple(
									A3(_user$project$Lang$setExpListWhitespace, '', ' ', parameterExps)),
								_1: {ctor: '[]'}
							}
						});
				}
			}();
			var namesToAvoid = _user$project$LangTools$identifiersSet(_p167);
			var varNames = A2(
				_user$project$Utils$mapi1,
				function (_p163) {
					var _p164 = _p163;
					return A3(
						_user$project$LangTools$nonCollidingName,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p161._3,
							_elm_lang$core$Basics$toString(_p164._0)),
						2,
						namesToAvoid);
				},
				sortedExps);
			var eidToVarE__ = _elm_lang$core$Dict$fromList(
				A2(
					_user$project$Utils$zip,
					eidsToReplace,
					A2(
						_elm_lang$core$List$map,
						function (name) {
							return A2(_user$project$Lang$EVar, _user$project$Lang$space1, name);
						},
						varNames)));
			var usagesReplaced = A2(_user$project$Lang$applyESubstPreservingPrecedingWhitespace, eidToVarE__, _p167);
			var wrapped = A6(
				_user$project$LangTools$newLetFancyWhitespace,
				-1,
				false,
				_user$project$Lang$pListOfPVars(varNames),
				mapCall,
				usagesReplaced,
				originalExp);
			var newProgram = A3(_user$project$Lang$replaceExpNode, _p167.val.eid, wrapped, originalExp);
			var clonesName = (!_elm_lang$core$Native_Utils.eq(
				_user$project$Utils$commonPrefixString(varNames),
				'')) ? A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					_elm_lang$core$List$length(_p166)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Utils$commonPrefixString(varNames),
						's'))) : _user$project$Utils$toSentence(
				A2(
					_elm_lang$core$List$map,
					_user$project$LangTools$expNameForEId(originalExp),
					eidsToReplace));
			return A2(
				_user$project$InterfaceModel$synthesisResult,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Merge ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						clonesName,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' by mapping over ',
							A2(_elm_lang$core$String$join, ' ', _p161._4)))),
				newProgram);
		},
		A6(
			_user$project$ExpressionBasedTransform$detectClonesOfVariousSizes,
			_elm_lang$core$Basics$always(true),
			3,
			1,
			{
				ctor: '::',
				_0: 1,
				_1: {ctor: '[]'}
			},
			true,
			originalExp));
};
var _user$project$ExpressionBasedTransform$inlineListSynthesisResults = function (originalExp) {
	var candidatesAndDescription = A2(
		_elm_lang$core$List$concatMap,
		function (exp) {
			var _p168 = exp.val.e__;
			if ((_p168.ctor === 'ELet') && (_p168._2 === false)) {
				var _p196 = _p168._3;
				var _p195 = _p168._7;
				var letExp = exp;
				var _p169 = _p196.val.p__;
				if (((((_p169.ctor === 'PList') && (_p169._1.ctor === '::')) && (_p169._1._1.ctor === '::')) && (_p169._1._1._1.ctor === '::')) && (_p169._3.ctor === 'Nothing')) {
					var pats = {
						ctor: '::',
						_0: _p169._1._0,
						_1: {
							ctor: '::',
							_0: _p169._1._1._0,
							_1: {ctor: '::', _0: _p169._1._1._1._0, _1: _p169._1._1._1._1}
						}
					};
					var maybeIdents = _user$project$Utils$projJusts(
						A2(_elm_lang$core$List$map, _user$project$LangTools$patToMaybePVarIdent, pats));
					var _p170 = maybeIdents;
					if (_p170.ctor === 'Just') {
						var _p194 = _p170._0;
						var usages = A2(
							_user$project$LangTools$identifierSetUses,
							_elm_lang$core$Set$fromList(_p194),
							_p195);
						if (_elm_lang$core$Native_Utils.eq(
							A2(_elm_lang$core$List$map, _user$project$LangTools$expToIdent, usages),
							_p194)) {
							var usagesExpanded = A2(
								_elm_lang$core$List$map,
								_user$project$LangTools$outerSameValueExp(_p195),
								usages);
							var usagesExpandedAncestors = A2(
								_elm_lang$core$List$map,
								_user$project$Utils$dropLast(1),
								A2(
									_user$project$Lang$findAllWithAncestors,
									function (e) {
										return A2(_elm_lang$core$List$member, e, usagesExpanded);
									},
									_p195));
							var maybeParents = A2(_elm_lang$core$List$map, _user$project$Utils$maybeLast, usagesExpandedAncestors);
							var maybeParentSingletonParents = A2(
								_elm_lang$core$List$map,
								function (ancestors) {
									return A2(
										F2(
											function (x, y) {
												return _elm_lang$core$Native_Utils.eq(x, y);
											}),
										_elm_lang$core$Maybe$Just(true),
										A2(
											_elm_lang$core$Maybe$map,
											_user$project$Lang$isSingletonList,
											_user$project$Utils$maybeLast(ancestors))) ? _user$project$Utils$maybeLast(
										A2(_user$project$Utils$dropLast, 1, ancestors)) : _elm_lang$core$Maybe$Nothing;
								},
								usagesExpandedAncestors);
							var maybeSingleParentAndEffectiveUsages = function () {
								var _p171 = _user$project$Utils$dedup(maybeParents);
								if (((_p171.ctor === '::') && (_p171._0.ctor === 'Just')) && (_p171._1.ctor === '[]')) {
									return _elm_lang$core$Maybe$Just(
										{ctor: '_Tuple2', _0: _p171._0._0, _1: usagesExpanded});
								} else {
									var _p172 = A2(
										_elm_lang$core$Maybe$map,
										_user$project$Utils$dedup,
										_user$project$Utils$projJusts(maybeParentSingletonParents));
									if (((_p172.ctor === 'Just') && (_p172._0.ctor === '::')) && (_p172._0._1.ctor === '[]')) {
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '_Tuple2',
												_0: _p172._0._0,
												_1: _user$project$Utils$filterJusts(maybeParents)
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							}();
							var _p173 = maybeSingleParentAndEffectiveUsages;
							if ((_p173.ctor === 'Just') && (_p173._0.ctor === '_Tuple2')) {
								var _p193 = _p173._0._0;
								var _p192 = _p173._0._1;
								var _p174 = _p193.val.e__;
								if (_p174.ctor === 'EList') {
									var _p191 = _p174._3;
									var listName = function () {
										var listBaseName = function () {
											var prefix = _user$project$Utils$commonPrefixString(_p194);
											return _elm_lang$core$Native_Utils.eq(prefix, '') ? 'list' : A2(_elm_lang$core$Basics_ops['++'], prefix, 's');
										}();
										return A3(
											_user$project$LangTools$nonCollidingName,
											listBaseName,
											2,
											_user$project$LangTools$identifiersSet(_p195));
									}();
									var eConcatExp = function (listExp) {
										return A2(
											_user$project$Lang$eApp,
											_user$project$Lang$eVar0('concat'),
											{
												ctor: '::',
												_0: listExp,
												_1: {ctor: '[]'}
											});
									};
									var eConcat = function (listExps) {
										return A2(
											_user$project$Lang$eApp,
											_user$project$Lang$eVar0('concat'),
											{
												ctor: '::',
												_0: _user$project$Lang$eTuple(listExps),
												_1: {ctor: '[]'}
											});
									};
									var eAppend = F2(
										function (listExpA, listExpB) {
											return A2(
												_user$project$Lang$eApp,
												_user$project$Lang$eVar0('append'),
												A2(
													_elm_lang$core$List$map,
													_user$project$Lang$replacePrecedingWhitespace(' '),
													{
														ctor: '::',
														_0: listExpA,
														_1: {
															ctor: '::',
															_0: listExpB,
															_1: {ctor: '[]'}
														}
													}));
										});
									var usagePrecedingWhitespace = _user$project$Lang$precedingWhitespace(
										A2(_user$project$Utils$head, 'ExpressionBasedTransform.inlineListSynthesisResults effectiveUsages', _p192));
									var useOldWs = function (e) {
										return A2(_user$project$Lang$replacePrecedingWhitespace, usagePrecedingWhitespace, e);
									};
									var newListExpCandidates = function () {
										var _p175 = A2(
											_user$project$Utils$splitBy,
											_p192,
											A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p174._1));
										if (((_p175.ctor === '::') && (_p175._1.ctor === '::')) && (_p175._1._1.ctor === '[]')) {
											if (_p175._0.ctor === '[]') {
												if (_p175._1._0.ctor === '[]') {
													var _p176 = _p191;
													if (_p176.ctor === 'Nothing') {
														return {
															ctor: '::',
															_0: _user$project$Lang$eVar(listName),
															_1: {
																ctor: '::',
																_0: _user$project$Lang$eTuple(
																	{
																		ctor: '::',
																		_0: useOldWs(
																			eConcatExp(
																				_user$project$Lang$eVar(listName))),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _user$project$Lang$eTuple(
																		{
																			ctor: '::',
																			_0: useOldWs(
																				_user$project$Lang$eVar(listName)),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														};
													} else {
														var _p177 = _p176._0;
														return {
															ctor: '::',
															_0: A2(
																eAppend,
																_user$project$Lang$eVar(listName),
																_p177),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$Lang$eList,
																	{
																		ctor: '::',
																		_0: useOldWs(
																			eConcatExp(
																				_user$project$Lang$eVar(listName))),
																		_1: {ctor: '[]'}
																	},
																	_elm_lang$core$Maybe$Just(_p177)),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_user$project$Lang$eList,
																		{
																			ctor: '::',
																			_0: useOldWs(
																				_user$project$Lang$eVar(listName)),
																			_1: {ctor: '[]'}
																		},
																		_elm_lang$core$Maybe$Just(_p177)),
																	_1: {ctor: '[]'}
																}
															}
														};
													}
												} else {
													var _p180 = _p175._1._0;
													var _p178 = _p191;
													if (_p178.ctor === 'Nothing') {
														return {
															ctor: '::',
															_0: A2(
																eAppend,
																_user$project$Lang$eVar(listName),
																_user$project$Lang$eTuple(_p180)),
															_1: {
																ctor: '::',
																_0: _user$project$Lang$eTuple(
																	{
																		ctor: '::',
																		_0: useOldWs(
																			eConcatExp(
																				_user$project$Lang$eVar(listName))),
																		_1: _p180
																	}),
																_1: {
																	ctor: '::',
																	_0: _user$project$Lang$eTuple(
																		{
																			ctor: '::',
																			_0: useOldWs(
																				_user$project$Lang$eVar(listName)),
																			_1: _p180
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_user$project$Lang$eList,
																			{
																				ctor: '::',
																				_0: useOldWs(
																					eConcatExp(
																						_user$project$Lang$eVar(listName))),
																				_1: {ctor: '[]'}
																			},
																			_elm_lang$core$Maybe$Just(
																				_user$project$Lang$eTuple(_p180))),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_user$project$Lang$eList,
																				{
																					ctor: '::',
																					_0: useOldWs(
																						_user$project$Lang$eVar(listName)),
																					_1: {ctor: '[]'}
																				},
																				_elm_lang$core$Maybe$Just(
																					_user$project$Lang$eTuple(_p180))),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														};
													} else {
														var _p179 = _p178._0;
														return {
															ctor: '::',
															_0: eConcat(
																{
																	ctor: '::',
																	_0: _user$project$Lang$eVar(listName),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Lang$eTuple(_p180),
																		_1: {
																			ctor: '::',
																			_0: _p179,
																			_1: {ctor: '[]'}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	eAppend,
																	_user$project$Lang$eVar(listName),
																	A2(
																		_user$project$Lang$eList,
																		_p180,
																		_elm_lang$core$Maybe$Just(_p179))),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_user$project$Lang$eList,
																		{
																			ctor: '::',
																			_0: useOldWs(
																				eConcatExp(
																					_user$project$Lang$eVar(listName))),
																			_1: _p180
																		},
																		_elm_lang$core$Maybe$Just(_p179)),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_user$project$Lang$eList,
																			{
																				ctor: '::',
																				_0: useOldWs(
																					_user$project$Lang$eVar(listName)),
																				_1: _p180
																			},
																			_elm_lang$core$Maybe$Just(_p179)),
																		_1: {ctor: '[]'}
																	}
																}
															}
														};
													}
												}
											} else {
												if (_p175._1._0.ctor === '[]') {
													var _p183 = _p175._0;
													var _p181 = _p191;
													if (_p181.ctor === 'Nothing') {
														return {
															ctor: '::',
															_0: A2(
																eAppend,
																_user$project$Lang$eTuple(_p183),
																_user$project$Lang$eVar(listName)),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$Lang$eList,
																	_p183,
																	_elm_lang$core$Maybe$Just(
																		_user$project$Lang$eVar(listName))),
																_1: {
																	ctor: '::',
																	_0: _user$project$Lang$eTuple(
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_p183,
																			{
																				ctor: '::',
																				_0: useOldWs(
																					eConcatExp(
																						_user$project$Lang$eVar(listName))),
																				_1: {ctor: '[]'}
																			})),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Lang$eTuple(
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				_p183,
																				{
																					ctor: '::',
																					_0: useOldWs(
																						_user$project$Lang$eVar(listName)),
																					_1: {ctor: '[]'}
																				})),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_user$project$Lang$eList,
																				_p183,
																				_elm_lang$core$Maybe$Just(
																					eConcatExp(
																						_user$project$Lang$eVar(listName)))),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														};
													} else {
														var _p182 = _p181._0;
														return {
															ctor: '::',
															_0: eConcat(
																{
																	ctor: '::',
																	_0: _user$project$Lang$eTuple(_p183),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Lang$eVar(listName),
																		_1: {
																			ctor: '::',
																			_0: _p182,
																			_1: {ctor: '[]'}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$Lang$eList,
																	_p183,
																	_elm_lang$core$Maybe$Just(
																		A2(
																			eAppend,
																			_user$project$Lang$eVar(listName),
																			_p182))),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_user$project$Lang$eList,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_p183,
																			{
																				ctor: '::',
																				_0: useOldWs(
																					eConcatExp(
																						_user$project$Lang$eVar(listName))),
																				_1: {ctor: '[]'}
																			}),
																		_elm_lang$core$Maybe$Just(_p182)),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_user$project$Lang$eList,
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				_p183,
																				{
																					ctor: '::',
																					_0: useOldWs(
																						_user$project$Lang$eVar(listName)),
																					_1: {ctor: '[]'}
																				}),
																			_elm_lang$core$Maybe$Just(_p182)),
																		_1: {ctor: '[]'}
																	}
																}
															}
														};
													}
												} else {
													var _p187 = _p175._0;
													var _p186 = _p175._1._0;
													var _p184 = _p191;
													if (_p184.ctor === 'Nothing') {
														return {
															ctor: '::',
															_0: eConcat(
																{
																	ctor: '::',
																	_0: _user$project$Lang$eTuple(_p187),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Lang$eVar(listName),
																		_1: {
																			ctor: '::',
																			_0: _user$project$Lang$eTuple(_p186),
																			_1: {ctor: '[]'}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: _user$project$Lang$eTuple(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_p187,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: useOldWs(
																					eConcatExp(
																						_user$project$Lang$eVar(listName))),
																				_1: {ctor: '[]'}
																			},
																			_p186))),
																_1: {
																	ctor: '::',
																	_0: _user$project$Lang$eTuple(
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_p187,
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: useOldWs(
																						_user$project$Lang$eVar(listName)),
																					_1: {ctor: '[]'}
																				},
																				_p186))),
																	_1: {ctor: '[]'}
																}
															}
														};
													} else {
														var _p185 = _p184._0;
														return {
															ctor: '::',
															_0: eConcat(
																{
																	ctor: '::',
																	_0: _user$project$Lang$eTuple(_p187),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Lang$eVar(listName),
																		_1: {
																			ctor: '::',
																			_0: _user$project$Lang$eTuple(_p186),
																			_1: {
																				ctor: '::',
																				_0: _p185,
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$Lang$eList,
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_p187,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: useOldWs(
																					eConcatExp(
																						_user$project$Lang$eVar(listName))),
																				_1: {ctor: '[]'}
																			},
																			_p186)),
																	_elm_lang$core$Maybe$Just(_p185)),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_user$project$Lang$eList,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_p187,
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: useOldWs(
																						_user$project$Lang$eVar(listName)),
																					_1: {ctor: '[]'}
																				},
																				_p186)),
																		_elm_lang$core$Maybe$Just(_p185)),
																	_1: {ctor: '[]'}
																}
															}
														};
													}
												}
											}
										} else {
											return {ctor: '[]'};
										}
									}();
									return A2(
										_elm_lang$core$List$map,
										function (newListExp) {
											var prettyNewListExp = function () {
												var _p188 = newListExp.val.e__;
												if (_p188.ctor === 'EList') {
													return A2(_user$project$LangTools$copyListWhitespace, _p193, newListExp);
												} else {
													return newListExp;
												}
											}();
											var newLetBody = A3(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, _p193.val.eid, prettyNewListExp, _p195);
											var newLet = A2(
												_user$project$Lang$replaceE__,
												letExp,
												A9(
													_user$project$Lang$ELet,
													_p168._0,
													_p168._1,
													false,
													_user$project$Lang$pVar(listName),
													_p168._4,
													_p168._5,
													_p168._6,
													newLetBody,
													_p168._8));
											return {
												ctor: '_Tuple2',
												_0: A3(_user$project$Lang$replaceExpNode, newLet.val.eid, newLet, originalExp),
												_1: A2(
													_elm_lang$core$Basics_ops['++'],
													'Inline ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														function (_p189) {
															return _user$project$Utils$squish(
																_user$project$LangUnparser$unparsePat(_p189));
														}(_p196),
														A2(
															_elm_lang$core$Basics_ops['++'],
															' into ',
															function (_p190) {
																return _user$project$Utils$squish(
																	_user$project$LangUnparser$unparse(_p190));
															}(newListExp))))
											};
										},
										newListExpCandidates);
								} else {
									return {ctor: '[]'};
								}
							} else {
								return {ctor: '[]'};
							}
						} else {
							return {ctor: '[]'};
						}
					} else {
						return {ctor: '[]'};
					}
				} else {
					return {ctor: '[]'};
				}
			} else {
				return {ctor: '[]'};
			}
		},
		_user$project$Lang$flattenExpTree(originalExp));
	return A2(
		_elm_lang$core$List$map,
		function (_p197) {
			var _p198 = _p197;
			return A2(_user$project$InterfaceModel$synthesisResult, _p198._1, _p198._0);
		},
		candidatesAndDescription);
};
var _user$project$ExpressionBasedTransform$repeatByIndexedMerge = F5(
	function (model, candidateExpFilter, minCloneCount, minCloneSizeToArgumentRatio, originalExp) {
		var _p199 = function () {
			var _p200 = A2(_user$project$InterfaceModel$runAndResolveAtContext, model, originalExp);
			if (((_p200.ctor === 'Ok') && (_p200._0.ctor === '_Tuple5')) && (_p200._0._2.ctor === '_Tuple2')) {
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Maybe$withDefault,
						1,
						A2(
							_elm_lang$core$Maybe$map,
							_elm_lang$core$List$length,
							_user$project$Lang$vListToMaybeValsExcludingPoint(_p200._0._0))),
					_1: _p200._0._2._1
				};
			} else {
				return {ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Dict$empty};
			}
		}();
		var oldListItemsCount = _p199._0;
		var oldShapeTree = _p199._1;
		return A2(
			_elm_lang$core$List$concatMap,
			function (_p201) {
				var _p202 = _p201;
				var _p214 = _p202._2;
				var _p213 = _p202._0;
				var _p212 = _p202._1;
				var _p203 = _user$project$Utils$unzip3(_p213);
				var eidsToReplace = _p203._0;
				var sortedExps = _p203._1;
				var parameterExpLists = _p203._2;
				var oldIndentation = _user$project$Lang$indentationOf(_p214);
				var itemCount = _elm_lang$core$List$length(eidsToReplace);
				var mapCallOptionAndDescs = function () {
					var abstractedFuncWithPBEHoles = function () {
						var parameterExpsTransposed = A2(
							_user$project$Utils$fromJust_,
							'ExpressionBasedTransform.repeatByIndexedMerge parameterExpsTransposed = Utils.maybeZipN parameterExpLists failed',
							_user$project$Utils$maybeZipN(parameterExpLists));
						var varSubst = _elm_lang$core$Dict$fromList(
							A2(
								_elm_lang$core$List$map,
								function (_p204) {
									var _p205 = _p204;
									var pbeHole = _user$project$Lang$eHolePBE(
										A2(
											_elm_lang$core$List$map,
											_user$project$Lang$replacePrecedingWhitespace(' '),
											_p205._1));
									var targetIdent = A2(
										_user$project$Utils$fromJust_,
										'ExpressionBasedTransform.repeatByIndexedMerge expected func pats from clone detection to only be pVars',
										_user$project$LangTools$patToMaybePVarIdent(_p205._0));
									return {
										ctor: '_Tuple2',
										_0: targetIdent,
										_1: _elm_lang$core$Basics$always(pbeHole)
									};
								},
								A2(
									_user$project$Utils$zip,
									_user$project$LangTools$expToFuncPats(_p212),
									parameterExpsTransposed)));
						var freeVarsInFunc = _user$project$LangTools$freeVars(
							_user$project$LangTools$expToFuncBody(_p212));
						return A2(
							_user$project$LangTools$mapFuncPats,
							_elm_lang$core$Basics$always(
								{
									ctor: '::',
									_0: _user$project$Lang$pVar0('i'),
									_1: {ctor: '[]'}
								}),
							A2(
								_user$project$LangTools$mapFuncBody,
								_user$project$LangTools$transformVarsUntilBound(varSubst),
								_p212));
					}();
					var rangeExpOptions = function () {
						var zeroToN = A2(
							_user$project$Lang$eCall,
							'zeroTo',
							{
								ctor: '::',
								_0: _user$project$Lang$withDummyExpInfo(
									A4(
										_user$project$Lang$EConst,
										_user$project$Lang$space1,
										_elm_lang$core$Basics$toFloat(itemCount),
										_user$project$Lang$dummyLoc_(_user$project$Lang$unann),
										A2(_user$project$Lang$intSlider, 0, 5 * itemCount))),
								_1: {ctor: '[]'}
							});
						return {
							ctor: '::',
							_0: zeroToN,
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$Lang$eCall,
									'reverse',
									{
										ctor: '::',
										_0: zeroToN,
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						};
					}();
					var newLineIndent = F2(
						function (extraIndent, exp) {
							return A2(
								_user$project$Lang$replacePrecedingWhitespace,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\n',
									A2(_elm_lang$core$Basics_ops['++'], extraIndent, oldIndentation)),
								exp);
						});
					return A2(
						_elm_lang$core$List$map,
						function (rangeExp) {
							return function (mapCall) {
								return {
									ctor: '_Tuple2',
									_0: mapCall,
									_1: _user$project$Utils$squish(
										A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, rangeExp))
								};
							}(
								A2(
									newLineIndent,
									'  ',
									A2(
										_user$project$Lang$eApp,
										_user$project$Lang$eVar0('map'),
										{
											ctor: '::',
											_0: A2(
												_user$project$Lang$replacePrecedingWhitespace,
												' ',
												A2(
													_user$project$Lang$indent,
													A2(_elm_lang$core$Basics_ops['++'], '      ', oldIndentation),
													_user$project$Lang$eParens(
														_user$project$Lang$removePrecedingWhitespace(abstractedFuncWithPBEHoles)))),
											_1: {
												ctor: '::',
												_0: A2(newLineIndent, '    ', rangeExp),
												_1: {ctor: '[]'}
											}
										})));
						},
						rangeExpOptions);
				}();
				var namesToAvoid = _user$project$LangTools$identifiersSet(_p214);
				var varNames = A2(
					_user$project$Utils$mapi1,
					function (_p206) {
						var _p207 = _p206;
						return A3(
							_user$project$LangTools$nonCollidingName,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p202._3,
								_elm_lang$core$Basics$toString(_p207._0)),
							2,
							namesToAvoid);
					},
					sortedExps);
				var eidToVarE__ = _elm_lang$core$Dict$fromList(
					A2(
						_user$project$Utils$zip,
						eidsToReplace,
						A2(
							_elm_lang$core$List$map,
							function (name) {
								return A2(_user$project$Lang$EVar, _user$project$Lang$space1, name);
							},
							varNames)));
				var usagesReplaced = A2(_user$project$Lang$applyESubstPreservingPrecedingWhitespace, eidToVarE__, _p214);
				return A2(
					_elm_lang$core$List$concatMap,
					function (_p208) {
						var _p209 = _p208;
						var _p211 = _p209._0;
						var wrapped = A6(
							_user$project$LangTools$newLetFancyWhitespace,
							-1,
							false,
							_user$project$Lang$pListOfPVars(varNames),
							_p211,
							usagesReplaced,
							originalExp);
						var newProgram = A3(_user$project$Lang$replaceExpNode, _p214.val.eid, wrapped, originalExp);
						var clonesName = (!_elm_lang$core$Native_Utils.eq(
							_user$project$Utils$commonPrefixString(varNames),
							'')) ? A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(
								_elm_lang$core$List$length(_p213)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Utils$commonPrefixString(varNames),
									's'))) : _user$project$Utils$toSentence(
							A2(
								_elm_lang$core$List$map,
								_user$project$LangTools$expNameForEId(originalExp),
								eidsToReplace));
						return A2(
							_elm_lang$core$List$map,
							_user$project$InterfaceModel$mapResultDescription(
								_elm_lang$core$Basics$always(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'Repeat ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											clonesName,
											A2(
												_elm_lang$core$Basics_ops['++'],
												' by mapping over ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_p209._1,
													A2(
														_elm_lang$core$Basics_ops['++'],
														' producing ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(
																A2(
																	_user$project$Utils$count,
																	_user$project$Lang$isPBEHole,
																	_user$project$Lang$flattenExpTree(_p211))),
															' holes')))))))),
							A2(
								_elm_lang$core$List$filter,
								function (result) {
									var newProgram = _user$project$InterfaceModel$resultExp(result);
									var _p210 = A2(_user$project$InterfaceModel$runAndResolveAtContext, model, newProgram);
									if (_p210.ctor === 'Ok') {
										return (_elm_lang$core$Native_Utils.cmp(
											_elm_lang$core$Dict$size(oldShapeTree),
											_elm_lang$core$Dict$size(_p210._0._2._1)) < 1) && (_elm_lang$core$Native_Utils.cmp(
											oldListItemsCount,
											A2(
												_elm_lang$core$Maybe$withDefault,
												1,
												A2(
													_elm_lang$core$Maybe$map,
													_elm_lang$core$List$length,
													_user$project$Lang$vListToMaybeValsExcludingPoint(_p210._0._0)))) < 1);
									} else {
										return false;
									}
								},
								_user$project$ExpressionBasedTransform$inlineListSynthesisResults(
									_user$project$LangSimplify$simplify(newProgram))));
					},
					mapCallOptionAndDescs);
			},
			A6(
				_user$project$ExpressionBasedTransform$detectClonesOfVariousSizes,
				candidateExpFilter,
				minCloneCount,
				minCloneSizeToArgumentRatio,
				A2(_elm_lang$core$List$range, 1, 8),
				false,
				originalExp));
	});
var _user$project$ExpressionBasedTransform$rangeSynthesisResults = function (originalExp) {
	var eidAndRangeLists = A2(
		_elm_lang$core$List$filterMap,
		function (exp) {
			var _p215 = exp.val.e__;
			if ((_p215.ctor === 'EList') && (_p215._3.ctor === 'Nothing')) {
				var _p219 = _p215._1;
				var maybeNums = _user$project$Utils$projJusts(
					A2(
						_elm_lang$core$List$map,
						_user$project$LangTools$expToMaybeNum,
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p219)));
				var _p216 = maybeNums;
				if ((((_p216.ctor === 'Just') && (_p216._0.ctor === '::')) && (_p216._0._1.ctor === '::')) && (_p216._0._1._1.ctor === '::')) {
					var nums = {
						ctor: '::',
						_0: _p216._0._0,
						_1: {
							ctor: '::',
							_0: _p216._0._1._0,
							_1: {ctor: '::', _0: _p216._0._1._1._0, _1: _p216._0._1._1._1}
						}
					};
					var _p217 = {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Basics$round(
							A2(
								_user$project$Utils$fromJust_,
								'ExpressionBasedTransform.rangeSynthesisResults min',
								_elm_lang$core$List$minimum(nums))),
						_1: _elm_lang$core$Basics$round(
							A2(
								_user$project$Utils$fromJust_,
								'ExpressionBasedTransform.rangeSynthesisResults max',
								_elm_lang$core$List$maximum(nums)))
					};
					var min = _p217._0;
					var max = _p217._1;
					var _p218 = _elm_lang$core$Native_Utils.eq(
						nums,
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Basics$toFloat,
							A2(_elm_lang$core$List$range, min, max))) ? {ctor: '_Tuple2', _0: 'ascending', _1: nums} : (_elm_lang$core$Native_Utils.eq(
						_elm_lang$core$List$reverse(nums),
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$Basics$toFloat,
							A2(_elm_lang$core$List$range, min, max))) ? {
						ctor: '_Tuple2',
						_0: 'descending',
						_1: _elm_lang$core$List$reverse(nums)
					} : {
						ctor: '_Tuple2',
						_0: 'none',
						_1: {ctor: '[]'}
					});
					var characterization = _p218._0;
					var ascending = _p218._1;
					if (!_elm_lang$core$Native_Utils.eq(characterization, 'none')) {
						var insertedLoc = _user$project$Lang$dummyLoc_(
							A2(
								_elm_lang$core$List$all,
								_user$project$Lang$isFrozenNumber,
								A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p219)) ? _user$project$Lang$frozen : _user$project$Lang$unann);
						var maybeReverse = function (e) {
							return _elm_lang$core$Native_Utils.eq(characterization, 'descending') ? A2(
								_user$project$Lang$eApp,
								_user$project$Lang$eVar0('reverse'),
								{
									ctor: '::',
									_0: e,
									_1: {ctor: '[]'}
								}) : e;
						};
						return _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$head(ascending),
							_elm_lang$core$Maybe$Just(0.0)) ? _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: exp.val.eid,
								_1: maybeReverse(
									A2(
										_user$project$Lang$eApp,
										_user$project$Lang$eVar0('zeroTo'),
										{
											ctor: '::',
											_0: _user$project$Lang$withDummyExpInfo(
												A4(
													_user$project$Lang$EConst,
													_user$project$Lang$space1,
													_elm_lang$core$Basics$toFloat(max) + 1,
													insertedLoc,
													A2(_user$project$Lang$intSlider, 0, 5 * (max + 1)))),
											_1: {ctor: '[]'}
										}))
							}) : (_elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$head(ascending),
							_elm_lang$core$Maybe$Just(1.0)) ? _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: exp.val.eid,
								_1: maybeReverse(
									A2(
										_user$project$Lang$eApp,
										_user$project$Lang$eVar0('list1N'),
										{
											ctor: '::',
											_0: _user$project$Lang$withDummyExpInfo(
												A4(
													_user$project$Lang$EConst,
													_user$project$Lang$space1,
													_elm_lang$core$Basics$toFloat(max),
													insertedLoc,
													A2(_user$project$Lang$intSlider, 0, (5 * (max + 1)) - 1))),
											_1: {ctor: '[]'}
										}))
							}) : _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: exp.val.eid,
								_1: maybeReverse(
									A2(
										_user$project$Lang$eApp,
										_user$project$Lang$eVar0('range'),
										{
											ctor: '::',
											_0: A2(
												_user$project$Lang$eConst,
												_elm_lang$core$Basics$toFloat(min),
												insertedLoc),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$Lang$eConst,
													_elm_lang$core$Basics$toFloat(max),
													insertedLoc),
												_1: {ctor: '[]'}
											}
										}))
							}));
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		},
		_user$project$Lang$flattenExpTree(originalExp));
	return A2(
		_elm_lang$core$List$map,
		function (_p220) {
			var _p221 = _p220;
			var _p224 = _p221._1;
			var _p223 = _p221._0;
			return A2(
				_user$project$InterfaceModel$synthesisResult,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Replace ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						function (_p222) {
							return _user$project$Utils$squish(
								_user$project$LangUnparser$unparse(_p222));
						}(
							A2(_user$project$LangTools$justFindExpByEId, originalExp, _p223)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' with ',
							_user$project$LangUnparser$unparse(_p224)))),
				A3(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, _p223, _p224, originalExp));
		},
		eidAndRangeLists);
};
var _user$project$ExpressionBasedTransform$passiveSynthesisSearch = F2(
	function (model, originalExp) {
		return A2(
			_elm_lang$core$List$filter,
			function (synthesisResult) {
				return _user$project$Utils$resultToBool(
					A2(
						_user$project$InterfaceModel$runAndResolve,
						model,
						_user$project$InterfaceModel$resultExp(synthesisResult)));
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				A4(
					_user$project$ExpressionBasedTransform$cloneEliminationSythesisResults,
					_elm_lang$core$Basics$always(true),
					2,
					5,
					originalExp),
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$ExpressionBasedTransform$mapAbstractSynthesisResults(originalExp),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$ExpressionBasedTransform$rangeSynthesisResults(originalExp),
						_user$project$ExpressionBasedTransform$inlineListSynthesisResults(originalExp)))));
	});

var _user$project$Results$toMaybe = function (results) {
	var _p0 = results;
	if (_p0.ctor === 'Oks') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Results$withDefault = F2(
	function (def, results) {
		var _p1 = results;
		if (_p1.ctor === 'Oks') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _user$project$Results$findFirst = F2(
	function (pred, l) {
		findFirst:
		while (true) {
			var _p2 = l;
			if (_p2.ctor === 'LazyNil') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p3 = _p2._0;
				if (pred(_p3)) {
					return _elm_lang$core$Maybe$Just(_p3);
				} else {
					var _v3 = pred,
						_v4 = _elm_lang$lazy$Lazy$force(_p2._1);
					pred = _v3;
					l = _v4;
					continue findFirst;
				}
			}
		}
	});
var _user$project$Results$isLazyNil = function (l) {
	var _p4 = l;
	if (_p4.ctor === 'LazyNil') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Results$LazyCons = F2(
	function (a, b) {
		return {ctor: 'LazyCons', _0: a, _1: b};
	});
var _user$project$Results$lazyCons2 = F2(
	function (head, tail) {
		return A2(
			_user$project$Results$LazyCons,
			head,
			_elm_lang$lazy$Lazy$lazy(
				function (_p5) {
					var _p6 = _p5;
					return tail;
				}));
	});
var _user$project$Results$appendLazy = F2(
	function (l1, l2) {
		var _p7 = l1;
		if (_p7.ctor === 'LazyNil') {
			return l2;
		} else {
			return A2(
				_user$project$Results$LazyCons,
				_p7._0,
				A2(
					_elm_lang$lazy$Lazy$map,
					function (v) {
						return A2(_user$project$Results$appendLazy, v, l2);
					},
					_p7._1));
		}
	});
var _user$project$Results$appendLazyLazy = F2(
	function (l1, l2) {
		var _p8 = l1;
		if (_p8.ctor === 'LazyNil') {
			return _elm_lang$lazy$Lazy$force(l2);
		} else {
			return A2(
				_user$project$Results$LazyCons,
				_p8._0,
				A2(
					_elm_lang$lazy$Lazy$map,
					function (v) {
						return A2(_user$project$Results$appendLazyLazy, v, l2);
					},
					_p8._1));
		}
	});
var _user$project$Results$LazyNil = {ctor: 'LazyNil'};
var _user$project$Results$mapLazy = F2(
	function (f, l) {
		var _p9 = l;
		if (_p9.ctor === 'LazyNil') {
			return _user$project$Results$LazyNil;
		} else {
			return A2(
				_user$project$Results$LazyCons,
				f(_p9._0),
				A2(
					_elm_lang$lazy$Lazy$map,
					_user$project$Results$mapLazy(f),
					_p9._1));
		}
	});
var _user$project$Results$andThenLazy = F2(
	function (f, l) {
		var _p10 = l;
		if (_p10.ctor === 'LazyNil') {
			return _user$project$Results$LazyNil;
		} else {
			return A2(
				_user$project$Results$appendLazyLazy,
				f(_p10._0),
				A2(
					_elm_lang$lazy$Lazy$map,
					function (v) {
						return A2(_user$project$Results$andThenLazy, f, v);
					},
					_p10._1));
		}
	});
var _user$project$Results$flattenLazy = function (l) {
	var _p11 = l;
	if (_p11.ctor === 'LazyNil') {
		return _user$project$Results$LazyNil;
	} else {
		return A2(
			_user$project$Results$appendLazyLazy,
			_p11._0,
			A2(_elm_lang$lazy$Lazy$map, _user$project$Results$flattenLazy, _p11._1));
	}
};
var _user$project$Results$lazyCartProd = F2(
	function (xs, ys) {
		return _user$project$Results$flattenLazy(
			A2(
				_user$project$Results$mapLazy,
				function (x) {
					return A2(
						_user$project$Results$mapLazy,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})(x),
						ys);
				},
				xs));
	});
var _user$project$Results$lazyFromList = function (l) {
	var _p12 = l;
	if (_p12.ctor === '[]') {
		return _user$project$Results$LazyNil;
	} else {
		return A2(
			_user$project$Results$LazyCons,
			_p12._0,
			_elm_lang$lazy$Lazy$lazy(
				function (_p13) {
					var _p14 = _p13;
					return _user$project$Results$lazyFromList(_p12._1);
				}));
	}
};
var _user$project$Results$keepOks = function (l) {
	keepOks:
	while (true) {
		var _p15 = l;
		if (_p15.ctor === 'LazyNil') {
			return _user$project$Results$LazyNil;
		} else {
			if (_p15._0.ctor === 'Errs') {
				var _v15 = _elm_lang$lazy$Lazy$force(_p15._1);
				l = _v15;
				continue keepOks;
			} else {
				return A2(
					_user$project$Results$appendLazyLazy,
					_p15._0._0,
					A2(_elm_lang$lazy$Lazy$map, _user$project$Results$keepOks, _p15._1));
			}
		}
	}
};
var _user$project$Results$Errs = function (a) {
	return {ctor: 'Errs', _0: a};
};
var _user$project$Results$errs = function (msg) {
	return _user$project$Results$Errs(msg);
};
var _user$project$Results$Oks = function (a) {
	return {ctor: 'Oks', _0: a};
};
var _user$project$Results$ok1 = function (a) {
	return _user$project$Results$Oks(
		A2(_user$project$Results$lazyCons2, a, _user$project$Results$LazyNil));
};
var _user$project$Results$fromResult = function (res) {
	var _p16 = res;
	if (_p16.ctor === 'Err') {
		return _user$project$Results$Errs(_p16._0);
	} else {
		return _user$project$Results$ok1(_p16._0);
	}
};
var _user$project$Results$oks = function (a) {
	return _user$project$Results$Oks(
		_user$project$Results$lazyFromList(a));
};
var _user$project$Results$okLazy = F2(
	function (head, tailLazy) {
		return _user$project$Results$Oks(
			A2(
				_user$project$Results$LazyCons,
				head,
				_elm_lang$lazy$Lazy$lazy(tailLazy)));
	});
var _user$project$Results$projOks = function (l) {
	projOks:
	while (true) {
		var _p17 = l;
		if (_p17.ctor === 'LazyNil') {
			return _user$project$Results$Oks(_user$project$Results$LazyNil);
		} else {
			if (_p17._0.ctor === 'Oks') {
				if (_p17._0._0.ctor === 'LazyNil') {
					var _v18 = _elm_lang$lazy$Lazy$force(_p17._1);
					l = _v18;
					continue projOks;
				} else {
					return _user$project$Results$Oks(
						A2(
							_user$project$Results$LazyCons,
							_p17._0._0._0,
							A2(_elm_lang$lazy$Lazy$map, _user$project$Results$keepOks, _p17._1)));
				}
			} else {
				var _p19 = _p17._0._0;
				var _p18 = _user$project$Results$projOks(
					_elm_lang$lazy$Lazy$force(_p17._1));
				if (_p18.ctor === 'Errs') {
					return _user$project$Results$Errs(_p19);
				} else {
					if (_p18._0.ctor === 'LazyNil') {
						return _user$project$Results$Errs(_p19);
					} else {
						return _p18;
					}
				}
			}
		}
	}
};
var _user$project$Results$flatten = function (r) {
	var _p20 = r;
	if (_p20.ctor === 'Errs') {
		return _user$project$Results$Errs(_p20._0);
	} else {
		return _user$project$Results$projOks(_p20._0);
	}
};
var _user$project$Results$andThen = F2(
	function (callback, results) {
		var _p21 = results;
		if (_p21.ctor === 'Oks') {
			return _user$project$Results$projOks(
				A2(_user$project$Results$mapLazy, callback, _p21._0));
		} else {
			return _user$project$Results$Errs(_p21._0);
		}
	});
var _user$project$Results$map = F2(
	function (func, ra) {
		var _p22 = ra;
		if (_p22.ctor === 'Oks') {
			return _user$project$Results$Oks(
				A2(_user$project$Results$mapLazy, func, _p22._0));
		} else {
			return _user$project$Results$Errs(_p22._0);
		}
	});
var _user$project$Results$map2 = F3(
	function (func, ra, rb) {
		var _p23 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p23._0.ctor === 'Oks') {
			if (_p23._1.ctor === 'Oks') {
				return _user$project$Results$Oks(
					A2(
						_user$project$Results$mapLazy,
						func,
						A2(_user$project$Results$lazyCartProd, _p23._0._0, _p23._1._0)));
			} else {
				return _user$project$Results$Errs(_p23._1._0);
			}
		} else {
			return _user$project$Results$Errs(_p23._0._0);
		}
	});
var _user$project$Results$map2withError = F4(
	function (errorFunc, func, ra, rb) {
		var _p24 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p24._0.ctor === 'Errs') {
			if (_p24._1.ctor === 'Errs') {
				return _user$project$Results$Errs(
					errorFunc(
						{ctor: '_Tuple2', _0: _p24._0._0, _1: _p24._1._0}));
			} else {
				return _user$project$Results$Errs(_p24._0._0);
			}
		} else {
			if (_p24._1.ctor === 'Errs') {
				return _user$project$Results$Errs(_p24._1._0);
			} else {
				return _user$project$Results$Oks(
					A2(
						_user$project$Results$mapLazy,
						func,
						A2(_user$project$Results$lazyCartProd, _p24._0._0, _p24._1._0)));
			}
		}
	});
var _user$project$Results$mapErrors = F2(
	function (f, results) {
		var _p25 = results;
		if (_p25.ctor === 'Oks') {
			return _user$project$Results$Oks(_p25._0);
		} else {
			return _user$project$Results$Errs(
				f(_p25._0));
		}
	});
var _user$project$Results$fromMaybe = F2(
	function (err, maybe) {
		var _p26 = maybe;
		if (_p26.ctor === 'Just') {
			return _user$project$Results$Oks(_p26._0);
		} else {
			return _user$project$Results$Errs(err);
		}
	});

var _user$project$Native_MissingNumberMethods = {
  exp: Math.exp,
  power: function(a) { return function(b) { return Math.pow(a, b); }},
  modulo: function(a) { return function(b) { return a % b; }},
};
var _user$project$MissingNumberMethods_ops = _user$project$MissingNumberMethods_ops || {};
_user$project$MissingNumberMethods_ops['%%'] = F2(
	function (a, b) {
		return A2(_user$project$Native_MissingNumberMethods.modulo, a, b);
	});
var _user$project$MissingNumberMethods_ops = _user$project$MissingNumberMethods_ops || {};
_user$project$MissingNumberMethods_ops['**'] = F2(
	function (a, b) {
		return A2(_user$project$Native_MissingNumberMethods.power, a, b);
	});
var _user$project$MissingNumberMethods$exp = function (a) {
	return _user$project$Native_MissingNumberMethods.exp(a);
};

var _user$project$Update$listForAll2 = F3(
	function (f, l1, l2) {
		listForAll2:
		while (true) {
			var _p0 = l1;
			if (_p0.ctor === '[]') {
				var _p1 = l2;
				if (_p1.ctor === '[]') {
					return true;
				} else {
					return false;
				}
			} else {
				var _p2 = l2;
				if (_p2.ctor === '[]') {
					return false;
				} else {
					if (A2(f, _p0._0, _p2._0)) {
						var _v3 = f,
							_v4 = _p0._1,
							_v5 = _p2._1;
						f = _v3;
						l1 = _v4;
						l2 = _v5;
						continue listForAll2;
					} else {
						return false;
					}
				}
			}
		}
	});
var _user$project$Update$wsEqual = F2(
	function (ws1, ws2) {
		return _elm_lang$core$Native_Utils.eq(ws1.val, ws2.val);
	});
var _user$project$Update$typeEqual = F2(
	function (ty1, ty2) {
		var _p3 = {ctor: '_Tuple2', _0: ty1.val.t__, _1: ty2.val.t__};
		_v6_13:
		do {
			if (_p3.ctor === '_Tuple2') {
				switch (_p3._0.ctor) {
					case 'TNum':
						if (_p3._1.ctor === 'TNum') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0);
						} else {
							break _v6_13;
						}
					case 'TBool':
						if (_p3._1.ctor === 'TBool') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0);
						} else {
							break _v6_13;
						}
					case 'TString':
						if (_p3._1.ctor === 'TString') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0);
						} else {
							break _v6_13;
						}
					case 'TNull':
						if (_p3._1.ctor === 'TNull') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0);
						} else {
							break _v6_13;
						}
					case 'TList':
						if (_p3._1.ctor === 'TList') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0) && (A2(_user$project$Update$wsEqual, _p3._0._2, _p3._1._2) && A2(_user$project$Update$typeEqual, _p3._0._1, _p3._1._1));
						} else {
							break _v6_13;
						}
					case 'TDict':
						if (_p3._1.ctor === 'TDict') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0) && (A2(_user$project$Update$wsEqual, _p3._0._3, _p3._1._3) && (A2(_user$project$Update$typeEqual, _p3._0._1, _p3._1._1) && A2(_user$project$Update$typeEqual, _p3._0._2, _p3._1._2)));
						} else {
							break _v6_13;
						}
					case 'TTuple':
						if (_p3._1.ctor === 'TTuple') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0) && (A2(_user$project$Update$wsEqual, _p3._0._2, _p3._1._2) && (A2(_user$project$Update$wsEqual, _p3._0._4, _p3._1._4) && (A3(_user$project$Update$listForAll2, _user$project$Update$typeEqual, _p3._0._1, _p3._1._1) && function () {
								var _p4 = {ctor: '_Tuple2', _0: _p3._0._3, _1: _p3._1._3};
								_v7_2:
								do {
									if (_p4.ctor === '_Tuple2') {
										if (_p4._0.ctor === 'Nothing') {
											if (_p4._1.ctor === 'Nothing') {
												return true;
											} else {
												break _v7_2;
											}
										} else {
											if (_p4._1.ctor === 'Just') {
												return A2(_user$project$Update$typeEqual, _p4._0._0, _p4._1._0);
											} else {
												break _v7_2;
											}
										}
									} else {
										break _v7_2;
									}
								} while(false);
								return false;
							}())));
						} else {
							break _v6_13;
						}
					case 'TArrow':
						if (_p3._1.ctor === 'TArrow') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0) && (A2(_user$project$Update$wsEqual, _p3._0._2, _p3._1._2) && A3(_user$project$Update$listForAll2, _user$project$Update$typeEqual, _p3._0._1, _p3._1._1));
						} else {
							break _v6_13;
						}
					case 'TUnion':
						if (_p3._1.ctor === 'TUnion') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0) && (A2(_user$project$Update$wsEqual, _p3._0._2, _p3._1._2) && A3(_user$project$Update$listForAll2, _user$project$Update$typeEqual, _p3._0._1, _p3._1._1));
						} else {
							break _v6_13;
						}
					case 'TNamed':
						if (_p3._1.ctor === 'TNamed') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0) && _elm_lang$core$Native_Utils.eq(_p3._0._1, _p3._1._1);
						} else {
							break _v6_13;
						}
					case 'TVar':
						if (_p3._1.ctor === 'TVar') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0) && _elm_lang$core$Native_Utils.eq(_p3._0._1, _p3._1._1);
						} else {
							break _v6_13;
						}
					case 'TForall':
						if (_p3._1.ctor === 'TForall') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0) && (A2(_user$project$Update$wsEqual, _p3._0._3, _p3._1._3) && (function () {
								var _p5 = {ctor: '_Tuple2', _0: _p3._0._1, _1: _p3._1._1};
								_v8_2:
								do {
									if (_p5.ctor === '_Tuple2') {
										if (_p5._0.ctor === 'One') {
											if (((_p5._0._0.ctor === '_Tuple2') && (_p5._1.ctor === 'One')) && (_p5._1._0.ctor === '_Tuple2')) {
												return A2(_user$project$Update$wsEqual, _p5._0._0._0, _p5._1._0._0) && _elm_lang$core$Native_Utils.eq(_p5._0._0._1, _p5._1._0._1);
											} else {
												break _v8_2;
											}
										} else {
											if (_p5._1.ctor === 'Many') {
												return A2(_user$project$Update$wsEqual, _p5._0._0, _p5._1._0) && (A2(_user$project$Update$wsEqual, _p5._0._2, _p5._1._2) && A3(
													_user$project$Update$listForAll2,
													F2(
														function (_p7, _p6) {
															var _p8 = _p7;
															var _p9 = _p6;
															return A2(_user$project$Update$wsEqual, _p8._0, _p9._0) && _elm_lang$core$Native_Utils.eq(_p8._1, _p9._1);
														}),
													_p5._0._1,
													_p5._1._1));
											} else {
												break _v8_2;
											}
										}
									} else {
										break _v8_2;
									}
								} while(false);
								return false;
							}() && A2(_user$project$Update$typeEqual, _p3._0._2, _p3._1._2)));
						} else {
							break _v6_13;
						}
					default:
						if (_p3._1.ctor === 'TWildcard') {
							return A2(_user$project$Update$wsEqual, _p3._0._0, _p3._1._0);
						} else {
							break _v6_13;
						}
				}
			} else {
				break _v6_13;
			}
		} while(false);
		return false;
	});
var _user$project$Update$pruneEnv = F2(
	function (exp, env) {
		var freeVars = _user$project$LangTools$freeIdentifiers(exp);
		return A2(
			_elm_lang$core$List$filter,
			function (_p10) {
				var _p11 = _p10;
				return A2(_elm_lang$core$Set$member, _p11._0, freeVars);
			},
			env);
	});
var _user$project$Update$removeCommonPrefix = F2(
	function (l1, l2) {
		removeCommonPrefix:
		while (true) {
			var _p12 = {ctor: '_Tuple2', _0: l1, _1: l2};
			if (_p12._0.ctor === '[]') {
				return {ctor: '_Tuple2', _0: l1, _1: l2};
			} else {
				if (_p12._1.ctor === '[]') {
					return {ctor: '_Tuple2', _0: l1, _1: l2};
				} else {
					if (_elm_lang$core$Native_Utils.eq(_p12._0._0, _p12._1._0)) {
						var _v13 = _p12._0._1,
							_v14 = _p12._1._1;
						l1 = _v13;
						l2 = _v14;
						continue removeCommonPrefix;
					} else {
						return {ctor: '_Tuple2', _0: l1, _1: l2};
					}
				}
			}
		}
	});
var _user$project$Update$eBaseToVBase = function (eBaseVal) {
	var _p13 = eBaseVal;
	switch (_p13.ctor) {
		case 'EBool':
			return _user$project$Lang$VBool(_p13._0);
		case 'EString':
			return _user$project$Lang$VString(_p13._1);
		default:
			return _user$project$Lang$VNull;
	}
};
var _user$project$Update$getNum = function (v) {
	var _p14 = v.v_;
	if ((_p14.ctor === 'VConst') && (_p14._1.ctor === '_Tuple2')) {
		return _p14._1._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Update',
			{
				start: {line: 845, column: 3},
				end: {line: 847, column: 62}
			},
			_p14)(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Espected VConst, got ',
				_elm_lang$core$Basics$toString(v)));
	}
};
var _user$project$Update$val_to_exp = F2(
	function (ws, v) {
		return _user$project$Lang$withDummyExpInfo(
			function () {
				var _p16 = v.v_;
				switch (_p16.ctor) {
					case 'VConst':
						return A4(
							_user$project$Lang$EConst,
							ws,
							_elm_lang$core$Tuple$first(_p16._1),
							_user$project$Lang$dummyLoc,
							_user$project$Lang$noWidgetDecl);
					case 'VBase':
						switch (_p16._0.ctor) {
							case 'VBool':
								return A2(
									_user$project$Lang$EBase,
									ws,
									_user$project$Lang$EBool(_p16._0._0));
							case 'VString':
								return A2(
									_user$project$Lang$EBase,
									ws,
									A2(_user$project$Lang$EString, _user$project$Lang$defaultQuoteChar, _p16._0._0));
							default:
								return A2(_user$project$Lang$EBase, ws, _user$project$Lang$ENull);
						}
					case 'VList':
						return A5(
							_user$project$Lang$EList,
							ws,
							A2(
								_elm_lang$core$List$map,
								function (_p17) {
									return A2(
										F2(
											function (v0, v1) {
												return {ctor: '_Tuple2', _0: v0, _1: v1};
											}),
										_user$project$Lang$space0,
										A2(_user$project$Update$val_to_exp, ws, _p17));
								},
								_p16._0),
							ws,
							_elm_lang$core$Maybe$Nothing,
							ws);
					case 'VClosure':
						return A4(_user$project$Lang$EFun, ws, _p16._1, _p16._2, ws);
					default:
						return _elm_lang$core$Native_Utils.crashCase(
							'Update',
							{
								start: {line: 833, column: 23},
								end: {line: 840, column: 75}
							},
							_p16)(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Trying to get an exp of the value ',
								_elm_lang$core$Basics$toString(v)));
				}
			}());
	});
var _user$project$Update$commonPrefix = function () {
	var aux = F3(
		function (prefix, s1, s2) {
			aux:
			while (true) {
				var _p19 = {
					ctor: '_Tuple2',
					_0: _elm_lang$core$String$uncons(s1),
					_1: _elm_lang$core$String$uncons(s2)
				};
				if (_p19._0.ctor === 'Nothing') {
					return prefix;
				} else {
					if (_p19._1.ctor === 'Nothing') {
						return prefix;
					} else {
						var _p20 = _p19._0._0._0;
						if (_elm_lang$core$Native_Utils.eq(_p20, _p19._1._0._0)) {
							var _v19 = A2(
								_elm_lang$core$Basics_ops['++'],
								prefix,
								_elm_lang$core$String$fromChar(_p20)),
								_v20 = _p19._0._0._1,
								_v21 = _p19._1._0._1;
							prefix = _v19;
							s1 = _v20;
							s2 = _v21;
							continue aux;
						} else {
							return prefix;
						}
					}
				}
			}
		});
	return aux('');
}();
var _user$project$Update$commonSuffix = F2(
	function (s1, s2) {
		return _elm_lang$core$String$reverse(
			A2(
				_user$project$Update$commonPrefix,
				_elm_lang$core$String$reverse(s1),
				_elm_lang$core$String$reverse(s2)));
	});
var _user$project$Update$angleUpdate = F3(
	function ($new, old, n) {
		var increment = $new - old;
		return ((_elm_lang$core$Native_Utils.cmp(increment, _elm_lang$core$Basics$pi) < 1) && (_elm_lang$core$Native_Utils.cmp(increment, 0 - _elm_lang$core$Basics$pi) > -1)) ? _user$project$Results$ok1(
			{
				ctor: '::',
				_0: n + increment,
				_1: {ctor: '[]'}
			}) : ((_elm_lang$core$Native_Utils.cmp(increment, _elm_lang$core$Basics$pi) > 0) ? _user$project$Results$ok1(
			{
				ctor: '::',
				_0: (n + increment) - (2 * _elm_lang$core$Basics$pi),
				_1: {ctor: '[]'}
			}) : _user$project$Results$ok1(
			{
				ctor: '::',
				_0: (n + increment) + (2 * _elm_lang$core$Basics$pi),
				_1: {ctor: '[]'}
			}));
	});
var _user$project$Update$listEqual = F3(
	function (pred, l1, l2) {
		listEqual:
		while (true) {
			var _p21 = l1;
			if (_p21.ctor === '[]') {
				var _p22 = l2;
				if (_p22.ctor === '[]') {
					return true;
				} else {
					return false;
				}
			} else {
				var _p23 = l2;
				if (_p23.ctor === '[]') {
					return false;
				} else {
					if (A2(pred, _p21._0, _p23._0)) {
						var _v25 = pred,
							_v26 = _p21._1,
							_v27 = _p23._1;
						pred = _v25;
						l1 = _v26;
						l2 = _v27;
						continue listEqual;
					} else {
						return false;
					}
				}
			}
		}
	});
var _user$project$Update$listPrefixEqual = F4(
	function (n, pred, l1, l2) {
		listPrefixEqual:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(n, 0)) {
				return true;
			} else {
				var _p24 = l1;
				if (_p24.ctor === '[]') {
					return false;
				} else {
					var _p25 = l2;
					if (_p25.ctor === '[]') {
						return false;
					} else {
						if (A2(pred, _p24._0, _p25._0)) {
							var _v30 = n - 1,
								_v31 = pred,
								_v32 = _p24._1,
								_v33 = _p25._1;
							n = _v30;
							pred = _v31;
							l1 = _v32;
							l2 = _v33;
							continue listPrefixEqual;
						} else {
							return false;
						}
					}
				}
			}
		}
	});
var _user$project$Update$indicesOfModification = F3(
	function (equalTest, input, output) {
		var test = function (sup) {
			test:
			while (true) {
				var potentialWithSuppression = function () {
					var insLength = (_elm_lang$core$List$length(output) - _elm_lang$core$List$length(input)) + sup;
					return A2(
						_user$project$Results$andThenLazy,
						function (index) {
							return (((_elm_lang$core$Native_Utils.cmp(sup, 0) > 0) || ((_elm_lang$core$Native_Utils.cmp(insLength, 0) > 0) || _elm_lang$core$Native_Utils.eq(index, 0))) && (A4(_user$project$Update$listPrefixEqual, index, equalTest, output, input) && A3(
								_user$project$Update$listEqual,
								equalTest,
								A2(
									_elm_lang$core$List$drop,
									_elm_lang$core$List$length(output) - (_elm_lang$core$List$length(input) - (index + sup)),
									output),
								A2(_elm_lang$core$List$drop, index + sup, input)))) ? _user$project$Results$lazyFromList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple3',
										_0: index,
										_1: sup,
										_2: A2(
											_elm_lang$core$List$take,
											insLength,
											A2(_elm_lang$core$List$drop, index, output))
									},
									_1: {ctor: '[]'}
								}) : _user$project$Results$LazyNil;
						},
						_user$project$Results$lazyFromList(
							A2(
								_elm_lang$core$List$range,
								0,
								_elm_lang$core$List$length(input) - sup)));
				}();
				if (_user$project$Results$isLazyNil(potentialWithSuppression)) {
					var _v34 = sup + 1;
					sup = _v34;
					continue test;
				} else {
					return potentialWithSuppression;
				}
			}
		};
		return test(0);
	});
var _user$project$Update$updateEnv = F3(
	function (env, k, value) {
		var _p26 = env;
		if (_p26.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Update',
				{
					start: {line: 44, column: 3},
					end: {line: 47, column: 72}
				},
				_p26)(
				A2(_elm_lang$core$Basics_ops['++'], k, ' not found in environment '));
		} else {
			var _p29 = _p26._1;
			var _p28 = _p26._0._0;
			return _elm_lang$core$Native_Utils.eq(_p28, k) ? {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _p28, _1: value},
				_1: _p29
			} : {
				ctor: '::',
				_0: _p26._0,
				_1: A3(_user$project$Update$updateEnv, _p29, k, value)
			};
		}
	});
var _user$project$Update$unparsePattern = _user$project$Syntax$patternUnparser(_user$project$Syntax$Elm);
var _user$project$Update$patEqual = F2(
	function (p1_, p2_) {
		return _elm_lang$core$Native_Utils.eq(
			_user$project$Update$unparsePattern(p1_),
			_user$project$Update$unparsePattern(p2_));
	});
var _user$project$Update$unparse = _user$project$Syntax$unparser(_user$project$Syntax$Elm);
var _user$project$Update$valToString = function (v) {
	var _p30 = v.v_;
	if (_p30.ctor === 'VClosure') {
		if (_p30._0.ctor === 'Nothing') {
			if (_p30._3.ctor === '[]') {
				return function (_p31) {
					return _user$project$Update$unparse(
						A2(
							_user$project$Update$val_to_exp,
							_user$project$Lang$ws(' '),
							_p31));
				}(v);
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Update$envToString(
							A2(_user$project$Update$pruneEnv, _p30._2, _p30._3)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'|-',
							A2(
								_elm_lang$core$Basics_ops['++'],
								function (_p33) {
									return _user$project$Update$unparse(
										A2(
											_user$project$Update$val_to_exp,
											_user$project$Lang$ws(' '),
											_p33));
								}(v),
								')'))));
			}
		} else {
			if (_p30._3.ctor === '[]') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p30._0._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'~',
							A2(
								_elm_lang$core$Basics_ops['++'],
								function (_p32) {
									return _user$project$Update$unparse(
										A2(
											_user$project$Update$val_to_exp,
											_user$project$Lang$ws(' '),
											_p32));
								}(v),
								')'))));
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Update$envToString(
							A2(_user$project$Update$pruneEnv, _p30._2, _p30._3)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'|',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p30._0._0,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'~',
									A2(
										_elm_lang$core$Basics_ops['++'],
										function (_p34) {
											return _user$project$Update$unparse(
												A2(
													_user$project$Update$val_to_exp,
													_user$project$Lang$ws(' '),
													_p34));
										}(v),
										')'))))));
			}
		}
	} else {
		return function (_p35) {
			return _user$project$Update$unparse(
				A2(
					_user$project$Update$val_to_exp,
					_user$project$Lang$ws(''),
					_p35));
		}(v);
	}
};
var _user$project$Update$envToString = function (env) {
	var _p36 = env;
	if (_p36.ctor === '[]') {
		return '';
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_p36._0._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'->',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Update$valToString(_p36._0._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						_user$project$Update$envToString(_p36._1)))));
	}
};
var _user$project$Update$maybeUpdateMathOp = F4(
	function (op, operandVals, oldOutVal, newOutVal) {
		var _p37 = {ctor: '_Tuple2', _0: oldOutVal.v_, _1: newOutVal.v_};
		_v38_2:
		do {
			if (_p37.ctor === '_Tuple2') {
				switch (_p37._0.ctor) {
					case 'VBase':
						if (((_p37._0._0.ctor === 'VString') && (_p37._1.ctor === 'VBase')) && (_p37._1._0.ctor === 'VString')) {
							var operandsStr = _user$project$Utils$projJusts(
								A2(
									_elm_lang$core$List$map,
									function (operand) {
										var _p38 = operand.v_;
										if (_p38.ctor === 'VBase') {
											return _elm_lang$core$Maybe$Just(_p38);
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									},
									operandVals));
							var _p39 = operandsStr;
							if ((((((((_p39.ctor === 'Just') && (_p39._0.ctor === '::')) && (_p39._0._0.ctor === 'VBase')) && (_p39._0._0._0.ctor === 'VString')) && (_p39._0._1.ctor === '::')) && (_p39._0._1._0.ctor === 'VBase')) && (_p39._0._1._0._0.ctor === 'VString')) && (_p39._0._1._1.ctor === '[]')) {
								var _p46 = _p39._0._1._0;
								var _p45 = _p39._0._0;
								var _p44 = _p39._0._1._0._0._0;
								var _p43 = _p39._0._0._0._0;
								var _p40 = op.val;
								if (_p40.ctor === 'Plus') {
									var result = function () {
										var _p41 = newOutVal.v_;
										if ((_p41.ctor === 'VBase') && (_p41._0.ctor === 'VString')) {
											var _p42 = _p41._0._0;
											var saIsPrefix = A2(_elm_lang$core$String$startsWith, _p43, _p42);
											var sbIsSuffix = A2(_elm_lang$core$String$endsWith, _p44, _p42);
											if (saIsPrefix && sbIsSuffix) {
												var newsa = A3(
													_elm_lang$core$String$slice,
													0,
													_elm_lang$core$String$length(_p42) - _elm_lang$core$String$length(_p44),
													_p42);
												var newsb = A2(
													_elm_lang$core$String$dropLeft,
													_elm_lang$core$String$length(_p43),
													_p42);
												var newva = _user$project$Lang$VBase(
													_user$project$Lang$VString(newsa));
												var newvb = _user$project$Lang$VBase(
													_user$project$Lang$VString(newsb));
												if (_elm_lang$core$Native_Utils.cmp(
													_elm_lang$core$String$length(newsa),
													_elm_lang$core$String$length(_p43)) > 0) {
													var insertion = A3(
														_elm_lang$core$String$slice,
														_elm_lang$core$String$length(_p43),
														_elm_lang$core$String$length(newsa),
														newsa);
													if (_elm_lang$core$Native_Utils.eq(
														_elm_lang$core$String$length(_p43),
														0)) {
														return _user$project$LangParserUtils$isOnlySpaces(insertion) ? _user$project$Results$oks(
															{
																ctor: '::',
																_0: {
																	ctor: '::',
																	_0: newva,
																	_1: {
																		ctor: '::',
																		_0: _p46,
																		_1: {ctor: '[]'}
																	}
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '::',
																		_0: _p45,
																		_1: {
																			ctor: '::',
																			_0: newvb,
																			_1: {ctor: '[]'}
																		}
																	},
																	_1: {ctor: '[]'}
																}
															}) : _user$project$Results$oks(
															{
																ctor: '::',
																_0: {
																	ctor: '::',
																	_0: _p45,
																	_1: {
																		ctor: '::',
																		_0: newvb,
																		_1: {ctor: '[]'}
																	}
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '::',
																		_0: newva,
																		_1: {
																			ctor: '::',
																			_0: _p46,
																			_1: {ctor: '[]'}
																		}
																	},
																	_1: {ctor: '[]'}
																}
															});
													} else {
														if (_elm_lang$core$Native_Utils.eq(
															_elm_lang$core$String$length(_p44),
															0)) {
															return _user$project$LangParserUtils$isOnlySpaces(insertion) ? _user$project$Results$oks(
																{
																	ctor: '::',
																	_0: {
																		ctor: '::',
																		_0: _p45,
																		_1: {
																			ctor: '::',
																			_0: newvb,
																			_1: {ctor: '[]'}
																		}
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: newva,
																			_1: {
																				ctor: '::',
																				_0: _p46,
																				_1: {ctor: '[]'}
																			}
																		},
																		_1: {ctor: '[]'}
																	}
																}) : _user$project$Results$oks(
																{
																	ctor: '::',
																	_0: {
																		ctor: '::',
																		_0: newva,
																		_1: {
																			ctor: '::',
																			_0: _p46,
																			_1: {ctor: '[]'}
																		}
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: _p45,
																			_1: {
																				ctor: '::',
																				_0: newvb,
																				_1: {ctor: '[]'}
																			}
																		},
																		_1: {ctor: '[]'}
																	}
																});
														} else {
															var aEndIsSspace = _user$project$LangParserUtils$isOnlySpaces(
																A3(
																	_elm_lang$core$String$slice,
																	-1,
																	_elm_lang$core$String$length(_p43),
																	_p43));
															var bStartIsSspace = _user$project$LangParserUtils$isOnlySpaces(
																A3(_elm_lang$core$String$slice, 0, 1, _p44));
															var insertedStartIsSspace = _user$project$LangParserUtils$isOnlySpaces(
																A3(_elm_lang$core$String$slice, 0, 1, insertion));
															var insertedEndIsSspace = _user$project$LangParserUtils$isOnlySpaces(
																A3(
																	_elm_lang$core$String$slice,
																	-1,
																	_elm_lang$core$String$length(insertion),
																	insertion));
															return (_elm_lang$core$Native_Utils.eq(bStartIsSspace, insertedEndIsSspace) && A2(_elm_lang$core$Basics$xor, aEndIsSspace, insertedStartIsSspace)) ? _user$project$Results$oks(
																{
																	ctor: '::',
																	_0: {
																		ctor: '::',
																		_0: _p45,
																		_1: {
																			ctor: '::',
																			_0: newvb,
																			_1: {ctor: '[]'}
																		}
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: newva,
																			_1: {
																				ctor: '::',
																				_0: _p46,
																				_1: {ctor: '[]'}
																			}
																		},
																		_1: {ctor: '[]'}
																	}
																}) : _user$project$Results$oks(
																{
																	ctor: '::',
																	_0: {
																		ctor: '::',
																		_0: newva,
																		_1: {
																			ctor: '::',
																			_0: _p46,
																			_1: {ctor: '[]'}
																		}
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: _p45,
																			_1: {
																				ctor: '::',
																				_0: newvb,
																				_1: {ctor: '[]'}
																			}
																		},
																		_1: {ctor: '[]'}
																	}
																});
														}
													}
												} else {
													return _user$project$Results$oks(
														{
															ctor: '::',
															_0: {
																ctor: '::',
																_0: newva,
																_1: {
																	ctor: '::',
																	_0: _p46,
																	_1: {ctor: '[]'}
																}
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '::',
																	_0: _p45,
																	_1: {
																		ctor: '::',
																		_0: newvb,
																		_1: {ctor: '[]'}
																	}
																},
																_1: {ctor: '[]'}
															}
														});
												}
											} else {
												if (saIsPrefix) {
													var newvb = _user$project$Lang$VBase(
														_user$project$Lang$VString(
															A2(
																_elm_lang$core$String$dropLeft,
																_elm_lang$core$String$length(_p43),
																_p42)));
													return _user$project$Results$ok1(
														{
															ctor: '::',
															_0: _p45,
															_1: {
																ctor: '::',
																_0: newvb,
																_1: {ctor: '[]'}
															}
														});
												} else {
													if (sbIsSuffix) {
														var newva = _user$project$Lang$VBase(
															_user$project$Lang$VString(
																A3(
																	_elm_lang$core$String$slice,
																	0,
																	_elm_lang$core$String$length(_p42) - _elm_lang$core$String$length(_p44),
																	_p42)));
														return _user$project$Results$ok1(
															{
																ctor: '::',
																_0: newva,
																_1: {
																	ctor: '::',
																	_0: _p46,
																	_1: {ctor: '[]'}
																}
															});
													} else {
														var newsa = A2(_user$project$Update$commonPrefix, _p43, _p42);
														var newsb = A2(_user$project$Update$commonSuffix, _p44, _p42);
														var newva = function (s) {
															return _user$project$Lang$VBase(
																_user$project$Lang$VString(
																	A2(_elm_lang$core$Basics_ops['++'], newsa, s)));
														};
														var newvb = function (s) {
															return _user$project$Lang$VBase(
																_user$project$Lang$VString(
																	A2(_elm_lang$core$Basics_ops['++'], s, newsb)));
														};
														var insertion = A3(
															_elm_lang$core$String$slice,
															_elm_lang$core$String$length(newsa),
															_elm_lang$core$String$length(_p42) - _elm_lang$core$String$length(newsb),
															_p42);
														if (_elm_lang$core$Native_Utils.eq(
															_elm_lang$core$String$length(newsa),
															0)) {
															return _user$project$Results$oks(
																{
																	ctor: '::',
																	_0: {
																		ctor: '::',
																		_0: newva(insertion),
																		_1: {
																			ctor: '::',
																			_0: newvb(''),
																			_1: {ctor: '[]'}
																		}
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: newva(''),
																			_1: {
																				ctor: '::',
																				_0: newvb(insertion),
																				_1: {ctor: '[]'}
																			}
																		},
																		_1: {ctor: '[]'}
																	}
																});
														} else {
															if (_elm_lang$core$Native_Utils.eq(
																_elm_lang$core$String$length(newsb),
																0)) {
																return _user$project$Results$oks(
																	{
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: newva(''),
																			_1: {
																				ctor: '::',
																				_0: newvb(insertion),
																				_1: {ctor: '[]'}
																			}
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: newva(insertion),
																				_1: {
																					ctor: '::',
																					_0: newvb(''),
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {ctor: '[]'}
																		}
																	});
															} else {
																var aEndIsSspace = _user$project$LangParserUtils$isOnlySpaces(
																	A3(
																		_elm_lang$core$String$slice,
																		-1,
																		_elm_lang$core$String$length(newsa),
																		newsa));
																var bStartIsSspace = _user$project$LangParserUtils$isOnlySpaces(
																	A3(_elm_lang$core$String$slice, 0, 1, newsb));
																var insertedStartIsSspace = _user$project$LangParserUtils$isOnlySpaces(
																	A3(_elm_lang$core$String$slice, 0, 1, insertion));
																var insertedEndIsSspace = _user$project$LangParserUtils$isOnlySpaces(
																	A3(
																		_elm_lang$core$String$slice,
																		-1,
																		_elm_lang$core$String$length(insertion),
																		insertion));
																return (_elm_lang$core$Native_Utils.eq(bStartIsSspace, insertedEndIsSspace) && A2(_elm_lang$core$Basics$xor, aEndIsSspace, insertedStartIsSspace)) ? _user$project$Results$oks(
																	{
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: newva(''),
																			_1: {
																				ctor: '::',
																				_0: newvb(insertion),
																				_1: {ctor: '[]'}
																			}
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: newva(insertion),
																				_1: {
																					ctor: '::',
																					_0: newvb(''),
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {ctor: '[]'}
																		}
																	}) : _user$project$Results$oks(
																	{
																		ctor: '::',
																		_0: {
																			ctor: '::',
																			_0: newva(insertion),
																			_1: {
																				ctor: '::',
																				_0: newvb(''),
																				_1: {ctor: '[]'}
																			}
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: newva(''),
																				_1: {
																					ctor: '::',
																					_0: newvb(insertion),
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {ctor: '[]'}
																		}
																	});
															}
														}
													}
												}
											}
										} else {
											return _user$project$Results$Errs(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'Cannot yet update with non-string',
													_user$project$Update$valToString(newOutVal)));
										}
									}();
									return A2(
										_user$project$Results$map,
										A2(
											_elm_lang$core$List$map2,
											F2(
												function (original, newString) {
													return A2(_user$project$Lang$replaceV_, original, newString);
												}),
											operandVals),
										result);
								} else {
									return _user$project$Results$Errs(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'This operation is not supported for strings : ',
											_elm_lang$core$Basics$toString(_p40)));
								}
							} else {
								return _user$project$Results$Errs(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'Expected strings, got ',
										_elm_lang$core$Basics$toString(_p39)));
							}
						} else {
							break _v38_2;
						}
					case 'VConst':
						if (((_p37._0._1.ctor === '_Tuple2') && (_p37._1.ctor === 'VConst')) && (_p37._1._1.ctor === '_Tuple2')) {
							var _p67 = _p37._0._1._0;
							var _p66 = _p37._1._1._0;
							if (_elm_lang$core$Native_Utils.eq(_p67, _p66)) {
								return _user$project$Results$ok1(operandVals);
							} else {
								var operands = _user$project$Utils$projJusts(
									A2(
										_elm_lang$core$List$map,
										function (operand) {
											var _p47 = operand.v_;
											if ((_p47.ctor === 'VConst') && (_p47._1.ctor === '_Tuple2')) {
												return _elm_lang$core$Maybe$Just(_p47._1._0);
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										},
										operandVals));
								var _p48 = operands;
								if (_p48.ctor === 'Nothing') {
									return _user$project$Results$Errs(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Operands do not form a list of numbers: ',
											_elm_lang$core$Basics$toString(operandVals)));
								} else {
									var result = function () {
										var _p49 = {ctor: '_Tuple2', _0: op.val, _1: _p48._0};
										_v45_17:
										do {
											if (_p49.ctor === '_Tuple2') {
												if (_p49._1.ctor === '::') {
													if (_p49._1._1.ctor === '::') {
														if (_p49._1._1._1.ctor === '[]') {
															switch (_p49._0.ctor) {
																case 'Plus':
																	var _p51 = _p49._1._1._0;
																	var _p50 = _p49._1._0;
																	return _user$project$Results$oks(
																		{
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: _p66 - _p51,
																				_1: {
																					ctor: '::',
																					_0: _p51,
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '::',
																					_0: _p50,
																					_1: {
																						ctor: '::',
																						_0: _p66 - _p50,
																						_1: {ctor: '[]'}
																					}
																				},
																				_1: {ctor: '[]'}
																			}
																		});
																case 'Minus':
																	var _p53 = _p49._1._1._0;
																	var _p52 = _p49._1._0;
																	return _user$project$Results$oks(
																		{
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: _p53 + _p66,
																				_1: {
																					ctor: '::',
																					_0: _p53,
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '::',
																					_0: _p52,
																					_1: {
																						ctor: '::',
																						_0: _p52 - _p66,
																						_1: {ctor: '[]'}
																					}
																				},
																				_1: {ctor: '[]'}
																			}
																		});
																case 'Mult':
																	var _p55 = _p49._1._1._0;
																	var _p54 = _p49._1._0;
																	return _user$project$Results$oks(
																		{
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: _p54,
																				_1: {
																					ctor: '::',
																					_0: _p66 / _p54,
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '::',
																					_0: _p66 / _p55,
																					_1: {
																						ctor: '::',
																						_0: _p55,
																						_1: {ctor: '[]'}
																					}
																				},
																				_1: {ctor: '[]'}
																			}
																		});
																case 'Div':
																	var _p57 = _p49._1._1._0;
																	var _p56 = _p49._1._0;
																	return (!_elm_lang$core$Native_Utils.eq(_p66, 0)) ? _user$project$Results$oks(
																		{
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: _p57 * _p66,
																				_1: {
																					ctor: '::',
																					_0: _p57,
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '::',
																					_0: _p56,
																					_1: {
																						ctor: '::',
																						_0: _p56 / _p66,
																						_1: {ctor: '[]'}
																					}
																				},
																				_1: {ctor: '[]'}
																			}
																		}) : _user$project$Results$ok1(
																		{
																			ctor: '::',
																			_0: _p57 * _p66,
																			_1: {
																				ctor: '::',
																				_0: _p57,
																				_1: {ctor: '[]'}
																			}
																		});
																case 'Pow':
																	var _p59 = _p49._1._1._0;
																	var _p58 = _p49._1._0;
																	return ((_elm_lang$core$Native_Utils.cmp(_p58, 0) < 0) && ((_elm_lang$core$Native_Utils.cmp(_p59, 0) > -1) && _elm_lang$core$Native_Utils.eq(
																		_elm_lang$core$Basics$floor(_p59),
																		_elm_lang$core$Basics$ceiling(_p59)))) ? (_elm_lang$core$Native_Utils.eq(
																		A2(
																			_elm_lang$core$Basics_ops['%'],
																			_elm_lang$core$Basics$floor(_p59),
																			2),
																		0) ? ((_elm_lang$core$Native_Utils.cmp(_p66, 0) > -1) ? _user$project$Results$ok1(
																		{
																			ctor: '::',
																			_0: 0 - A2(_user$project$MissingNumberMethods_ops['**'], _p66, 1 / _p59),
																			_1: {
																				ctor: '::',
																				_0: _p59,
																				_1: {ctor: '[]'}
																			}
																		}) : ((_elm_lang$core$Native_Utils.eq(_p66, -1) && _elm_lang$core$Native_Utils.eq(_p58, -1)) ? ((_elm_lang$core$Native_Utils.cmp(_p59, 0) > 0) ? _user$project$Results$oks(
																		{
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: _p58,
																				_1: {
																					ctor: '::',
																					_0: _p59 - 1,
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '::',
																					_0: _p58,
																					_1: {
																						ctor: '::',
																						_0: _p59 + 1,
																						_1: {ctor: '[]'}
																					}
																				},
																				_1: {ctor: '[]'}
																			}
																		}) : _user$project$Results$ok1(
																		{
																			ctor: '::',
																			_0: _p58,
																			_1: {
																				ctor: '::',
																				_0: _p59 + 1,
																				_1: {ctor: '[]'}
																			}
																		})) : _user$project$Results$Errs('No way to invert l^r <-- out where l < 0, r is even, out < 0 and out /= -1'))) : ((_elm_lang$core$Native_Utils.cmp(_p66, 0) > -1) ? _user$project$Results$ok1(
																		{
																			ctor: '::',
																			_0: A2(_user$project$MissingNumberMethods_ops['**'], _p66, 1 / _p59),
																			_1: {
																				ctor: '::',
																				_0: _p59,
																				_1: {ctor: '[]'}
																			}
																		}) : _user$project$Results$ok1(
																		{
																			ctor: '::',
																			_0: 0 - A2(_user$project$MissingNumberMethods_ops['**'], 0 - _p66, 1 / _p59),
																			_1: {
																				ctor: '::',
																				_0: _p59,
																				_1: {ctor: '[]'}
																			}
																		}))) : ((_elm_lang$core$Native_Utils.cmp(_p58, 0) > -1) ? ((_elm_lang$core$Native_Utils.cmp(_p66, 0) > 0) ? _user$project$Results$oks(
																		{
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: A2(_user$project$MissingNumberMethods_ops['**'], _p66, 1 / _p59),
																				_1: {
																					ctor: '::',
																					_0: _p59,
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '::',
																					_0: _p58,
																					_1: {
																						ctor: '::',
																						_0: A2(_elm_lang$core$Basics$logBase, _p58, _p66),
																						_1: {ctor: '[]'}
																					}
																				},
																				_1: {ctor: '[]'}
																			}
																		}) : ((_elm_lang$core$Native_Utils.eq(
																		_elm_lang$core$Basics$floor(1 / _p59),
																		_elm_lang$core$Basics$ceiling(1 / _p59)) && (_elm_lang$core$Native_Utils.cmp(1 / _p59, 0) < 0)) ? _user$project$Results$oks(
																		{
																			ctor: '::',
																			_0: {
																				ctor: '::',
																				_0: 0 - A2(_user$project$MissingNumberMethods_ops['**'], 0 - _p66, 1 / _p59),
																				_1: {
																					ctor: '::',
																					_0: _p59,
																					_1: {ctor: '[]'}
																				}
																			},
																			_1: {ctor: '[]'}
																		}) : _user$project$Results$Errs('No way to invert l^r <-- out where l >= 0, out < 0 and 1/r not an integer or not < 0'))) : _user$project$Results$Errs('No way to invert l^r <-- out where l < 0 and r < 0 or r is not an integer'));
																case 'Mod':
																	return _user$project$Results$ok1(
																		{
																			ctor: '::',
																			_0: (_p49._1._0 + _p66) - _p67,
																			_1: {
																				ctor: '::',
																				_0: _p49._1._1._0,
																				_1: {ctor: '[]'}
																			}
																		});
																case 'ArcTan2':
																	var _p60 = _elm_lang$core$Basics$toPolar(
																		{ctor: '_Tuple2', _0: _p49._1._1._0, _1: _p49._1._0});
																	var radius = _p60._0;
																	var theta = _p60._1;
																	var _p61 = _elm_lang$core$Basics$fromPolar(
																		{ctor: '_Tuple2', _0: radius, _1: (theta + _p66) - _p67});
																	var newR = _p61._0;
																	var newL = _p61._1;
																	return _user$project$Results$ok1(
																		{
																			ctor: '::',
																			_0: newL,
																			_1: {
																				ctor: '::',
																				_0: newR,
																				_1: {ctor: '[]'}
																			}
																		});
																default:
																	break _v45_17;
															}
														} else {
															break _v45_17;
														}
													} else {
														switch (_p49._0.ctor) {
															case 'Cos':
																var _p62 = _p49._1._0;
																var newOutClamped = A3(_elm_lang$core$Basics$clamp, -1, 1, _p66);
																var moved = _elm_lang$core$Basics$acos(newOutClamped);
																var movedAbsolute = (_elm_lang$core$Native_Utils.cmp(
																	A2(
																		_user$project$MissingNumberMethods_ops['%%'],
																		A2(_user$project$MissingNumberMethods_ops['%%'], _p62, 2 * _elm_lang$core$Basics$pi) + (3 * _elm_lang$core$Basics$pi),
																		2 * _elm_lang$core$Basics$pi) - _elm_lang$core$Basics$pi,
																	0) > -1) ? moved : ((2 * _elm_lang$core$Basics$pi) - moved);
																var original = A2(
																	_user$project$MissingNumberMethods_ops['%%'],
																	A2(_user$project$MissingNumberMethods_ops['%%'], _p62, 2 * _elm_lang$core$Basics$pi) + (2 * _elm_lang$core$Basics$pi),
																	2 * _elm_lang$core$Basics$pi);
																return A3(_user$project$Update$angleUpdate, movedAbsolute, original, _p62);
															case 'Sin':
																var _p63 = _p49._1._0;
																var newOutClamped = A3(_elm_lang$core$Basics$clamp, -1, 1, _p66);
																var moved = _elm_lang$core$Basics$asin(newOutClamped);
																var movedAbsolute = (_elm_lang$core$Native_Utils.cmp(
																	A2(
																		_user$project$MissingNumberMethods_ops['%%'],
																		(A2(_user$project$MissingNumberMethods_ops['%%'], _p63, 2 * _elm_lang$core$Basics$pi) + (2 * _elm_lang$core$Basics$pi)) + (_elm_lang$core$Basics$pi / 2),
																		2 * _elm_lang$core$Basics$pi) - _elm_lang$core$Basics$pi,
																	0) < 1) ? moved : ((_elm_lang$core$Native_Utils.cmp(moved, 0) > 0) ? (_elm_lang$core$Basics$pi - moved) : ((0 - _elm_lang$core$Basics$pi) - moved));
																var original = A2(
																	_user$project$MissingNumberMethods_ops['%%'],
																	A2(_user$project$MissingNumberMethods_ops['%%'], _p63, 2 * _elm_lang$core$Basics$pi) + (3 * _elm_lang$core$Basics$pi),
																	2 * _elm_lang$core$Basics$pi) - _elm_lang$core$Basics$pi;
																return A3(_user$project$Update$angleUpdate, movedAbsolute, original, _p63);
															case 'ArcCos':
																return _user$project$Results$ok1(
																	{
																		ctor: '::',
																		_0: _elm_lang$core$Basics$cos(_p66),
																		_1: {ctor: '[]'}
																	});
															case 'ArcSin':
																return _user$project$Results$ok1(
																	{
																		ctor: '::',
																		_0: _elm_lang$core$Basics$sin(_p66),
																		_1: {ctor: '[]'}
																	});
															case 'Floor':
																return _user$project$Results$ok1(
																	{
																		ctor: '::',
																		_0: (_p49._1._0 + _p66) - _p67,
																		_1: {ctor: '[]'}
																	});
															case 'Ceil':
																return _user$project$Results$ok1(
																	{
																		ctor: '::',
																		_0: (_p49._1._0 + _p66) - _p67,
																		_1: {ctor: '[]'}
																	});
															case 'Round':
																return _user$project$Results$ok1(
																	{
																		ctor: '::',
																		_0: (_p49._1._0 + _p66) - _p67,
																		_1: {ctor: '[]'}
																	});
															case 'Sqrt':
																return _user$project$Results$ok1(
																	{
																		ctor: '::',
																		_0: _p66 * _p66,
																		_1: {ctor: '[]'}
																	});
															case 'Ln':
																return _user$project$Results$ok1(
																	{
																		ctor: '::',
																		_0: Math.pow(_elm_lang$core$Basics$e, _p66),
																		_1: {ctor: '[]'}
																	});
															default:
																break _v45_17;
														}
													}
												} else {
													if (_p49._0.ctor === 'Pi') {
														return _elm_lang$core$Native_Utils.eq(_p66, _elm_lang$core$Basics$pi) ? _user$project$Results$ok1(
															{ctor: '[]'}) : _user$project$Results$Errs('Pi\'s value is 3.14159... and cannot be changed');
													} else {
														break _v45_17;
													}
												}
											} else {
												break _v45_17;
											}
										} while(false);
										return _user$project$Results$Errs(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Not the correct number of arguments for ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(op),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'(',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(operandVals),
															')')))));
									}();
									return A2(
										_user$project$Results$map,
										A2(
											_elm_lang$core$List$map2,
											F2(
												function (original, newNumber) {
													var _p64 = original.v_;
													if ((_p64.ctor === 'VConst') && (_p64._1.ctor === '_Tuple2')) {
														return A2(
															_user$project$Lang$replaceV_,
															original,
															A2(
																_user$project$Lang$VConst,
																_p64._0,
																{ctor: '_Tuple2', _0: newNumber, _1: _p64._1._1}));
													} else {
														return _elm_lang$core$Native_Utils.crashCase(
															'Update',
															{
																start: {line: 658, column: 15},
																end: {line: 660, column: 92}
															},
															_p64)(
															A2(
																_elm_lang$core$Basics_ops['++'],
																'[internal error] Did not get a VConst: ',
																_elm_lang$core$Basics$toString(_p64)));
													}
												}),
											operandVals),
										result);
								}
							}
						} else {
							break _v38_2;
						}
					default:
						break _v38_2;
				}
			} else {
				break _v38_2;
			}
		} while(false);
		return _user$project$Results$Errs(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Do not know how to revert computation ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(op),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(operandVals),
							A2(
								_elm_lang$core$Basics_ops['++'],
								') <-- ',
								_elm_lang$core$Basics$toString(newOutVal)))))));
	});
var _user$project$Update$valEqual = F2(
	function (v1, v2) {
		return _elm_lang$core$Native_Utils.eq(
			_user$project$Update$valToString(v1),
			_user$project$Update$valToString(v2));
	});
var _user$project$Update$triCombine = F4(
	function (origExp, originalEnv, newEnv1, newEnv2) {
		var fv = _user$project$LangTools$freeIdentifiers(origExp);
		var aux = F4(
			function (acc, originalEnv, newEnv1, newEnv2) {
				aux:
				while (true) {
					var _p68 = {ctor: '_Tuple3', _0: originalEnv, _1: newEnv1, _2: newEnv2};
					_v47_2:
					do {
						if (_p68.ctor === '_Tuple3') {
							if (_p68._0.ctor === '[]') {
								if ((_p68._1.ctor === '[]') && (_p68._2.ctor === '[]')) {
									return acc;
								} else {
									break _v47_2;
								}
							} else {
								if (((((_p68._0._0.ctor === '_Tuple2') && (_p68._1.ctor === '::')) && (_p68._1._0.ctor === '_Tuple2')) && (_p68._2.ctor === '::')) && (_p68._2._0.ctor === '_Tuple2')) {
									var _p77 = _p68._2._0._0;
									var _p76 = _p68._1._0._0;
									var _p75 = _p68._0._0._0;
									var _p74 = _p68._2._0._1;
									var _p73 = _p68._1._0._1;
									var _p72 = _p68._0._0._1;
									var _p71 = _p68._0._1;
									var _p70 = _p68._2._1;
									var _p69 = _p68._1._1;
									if ((!_elm_lang$core$Native_Utils.eq(_p75, _p76)) || ((!_elm_lang$core$Native_Utils.eq(_p76, _p77)) || (!_elm_lang$core$Native_Utils.eq(_p75, _p77)))) {
										return _elm_lang$core$Native_Utils.crash(
											'Update',
											{
												start: {line: 688, column: 11},
												end: {line: 688, column: 22}
											})(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Expected environments to have the same variables, got\n',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(_p75),
													A2(
														_elm_lang$core$Basics_ops['++'],
														' = ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(_p72),
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\n',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(_p76),
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		' = ',
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_elm_lang$core$Basics$toString(_p73),
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'\n',
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					_elm_lang$core$Basics$toString(_p77),
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						' = ',
																						_elm_lang$core$Basics$toString(_p74)))))))))))));
									} else {
										if ((!A2(_elm_lang$core$Set$member, _p75, fv)) || (!A2(_user$project$Update$valEqual, _p73, _p72))) {
											var _v48 = A2(
												_elm_lang$core$Basics_ops['++'],
												acc,
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: _p75, _1: _p73},
													_1: {ctor: '[]'}
												}),
												_v49 = _p71,
												_v50 = _p69,
												_v51 = _p70;
											acc = _v48;
											originalEnv = _v49;
											newEnv1 = _v50;
											newEnv2 = _v51;
											continue aux;
										} else {
											var _v52 = A2(
												_elm_lang$core$Basics_ops['++'],
												acc,
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: _p75, _1: _p74},
													_1: {ctor: '[]'}
												}),
												_v53 = _p71,
												_v54 = _p69,
												_v55 = _p70;
											acc = _v52;
											originalEnv = _v53;
											newEnv1 = _v54;
											newEnv2 = _v55;
											continue aux;
										}
									}
								} else {
									break _v47_2;
								}
							}
						} else {
							break _v47_2;
						}
					} while(false);
					return _elm_lang$core$Native_Utils.crashCase(
						'Update',
						{
							start: {line: 684, column: 5},
							end: {line: 696, column: 88}
						},
						_p68)(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Expected environments to have the same size, got\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(originalEnv),
								A2(
									_elm_lang$core$Basics_ops['++'],
									', ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(newEnv1),
										A2(
											_elm_lang$core$Basics_ops['++'],
											', ',
											_elm_lang$core$Basics$toString(newEnv2)))))));
				}
			});
		return A4(
			aux,
			{ctor: '[]'},
			originalEnv,
			newEnv1,
			newEnv2);
	});
var _user$project$Update$matchWithInversion = function (_p79) {
	var _p80 = _p79;
	var _p120 = _p80._1;
	var _p119 = _p80._0;
	var _p81 = {ctor: '_Tuple2', _0: _p119.val.p__, _1: _p120.v_};
	_v57_8:
	do {
		_v57_4:
		do {
			if (_p81.ctor === '_Tuple2') {
				switch (_p81._0.ctor) {
					case 'PVar':
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p81._0._1, _1: _p120},
									_1: {ctor: '[]'}
								},
								_1: function (newEnv) {
									var _p82 = newEnv;
									if (((_p82.ctor === '::') && (_p82._0.ctor === '_Tuple2')) && (_p82._1.ctor === '[]')) {
										return {ctor: '_Tuple2', _0: _p119, _1: _p82._0._1};
									} else {
										return _elm_lang$core$Native_Utils.crashCase(
											'Update',
											{
												start: {line: 746, column: 6},
												end: {line: 748, column: 124}
											},
											_p82)(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Not the same shape before/after pattern update: ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(newEnv),
													' should have length 1')));
									}
								}
							});
					case 'PAs':
						var _p95 = _p81._0._1;
						var _p94 = _p81._0._2;
						var _p93 = _p81._0._0;
						return A2(
							_elm_lang$core$Maybe$map,
							function (_p84) {
								var _p85 = _p84;
								var _p92 = _p85._1;
								return {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p95, _1: _p120},
										_1: _p85._0
									},
									_1: function (newEnv) {
										var _p86 = newEnv;
										if ((_p86.ctor === '::') && (_p86._0.ctor === '_Tuple2')) {
											var _p90 = _p86._0._1;
											var _p89 = _p86._1;
											if (A2(_user$project$Update$valEqual, _p90, _p120)) {
												var _p87 = _p92(_p89);
												return {
													ctor: '_Tuple2',
													_0: A2(
														_user$project$Lang$replaceP__,
														_p119,
														A4(_user$project$Lang$PAs, _p93, _p95, _p94, _p87._0)),
													_1: _p87._1
												};
											} else {
												var _p88 = _p92(_p89);
												return {
													ctor: '_Tuple2',
													_0: A2(
														_user$project$Lang$replaceP__,
														_p119,
														A4(_user$project$Lang$PAs, _p93, _p95, _p94, _p88._0)),
													_1: _p90
												};
											}
										} else {
											return _elm_lang$core$Native_Utils.crashCase(
												'Update',
												{
													start: {line: 753, column: 9},
													end: {line: 762, column: 130}
												},
												_p86)(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'Not the same shape before/after pattern update: ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(newEnv),
														' should have length >= 1')));
										}
									}
								};
							},
							_user$project$Update$matchWithInversion(
								{ctor: '_Tuple2', _0: _p81._0._3, _1: _p120}));
					case 'PList':
						if (_p81._0._3.ctor === 'Nothing') {
							if (_p81._1.ctor === 'VList') {
								var _p102 = _p81._1._0;
								var _p101 = _p81._0._1;
								return A2(
									_elm_lang$core$Maybe$map,
									function (_p96) {
										var _p97 = _p96;
										return {
											ctor: '_Tuple2',
											_0: _p97._0,
											_1: function (_p98) {
												return function (_p99) {
													var _p100 = _p99;
													return {
														ctor: '_Tuple2',
														_0: A2(
															_user$project$Lang$replaceP__,
															_p119,
															A5(_user$project$Lang$PList, _p81._0._0, _p100._0, _p81._0._2, _elm_lang$core$Maybe$Nothing, _p81._0._4)),
														_1: A2(
															_user$project$Lang$replaceV_,
															_p120,
															_user$project$Lang$VList(_p100._1))
													};
												}(
													_p97._1(_p98));
											}
										};
									},
									A2(
										_elm_lang$core$Maybe$andThen,
										_user$project$Update$matchListWithInversion,
										_elm_lang$core$Native_Utils.eq(
											_elm_lang$core$List$length(_p101),
											_elm_lang$core$List$length(_p102)) ? _elm_lang$core$Maybe$Just(
											{ctor: '_Tuple2', _0: _p101, _1: _p102}) : _elm_lang$core$Maybe$Nothing));
							} else {
								break _v57_4;
							}
						} else {
							if (_p81._1.ctor === 'VList') {
								var _p114 = _p81._1._0;
								var _p113 = _p81._0._1;
								var _p103 = {
									ctor: '_Tuple2',
									_0: _elm_lang$core$List$length(_p113),
									_1: _elm_lang$core$List$length(_p114)
								};
								var n = _p103._0;
								var m = _p103._1;
								if (_elm_lang$core$Native_Utils.cmp(n, m) > 0) {
									return _elm_lang$core$Maybe$Nothing;
								} else {
									var _p104 = A2(_user$project$Utils$split, n, _p114);
									var vs1 = _p104._0;
									var vs2 = _p104._1;
									return A2(
										_elm_lang$core$Maybe$map,
										function (_p105) {
											var _p106 = _p105;
											return {
												ctor: '_Tuple2',
												_0: _p106._0,
												_1: function (_p107) {
													return function (_p108) {
														var _p109 = _p108;
														var _p112 = _p109._0._1;
														var _p110 = _p112.v_;
														if (_p110.ctor === 'VList') {
															return {
																ctor: '_Tuple2',
																_0: A2(
																	_user$project$Lang$replaceP__,
																	_p119,
																	A5(
																		_user$project$Lang$PList,
																		_p81._0._0,
																		_p109._1._0,
																		_p81._0._2,
																		_elm_lang$core$Maybe$Just(_p109._0._0),
																		_p81._0._4)),
																_1: A2(
																	_user$project$Lang$replaceV_,
																	_p120,
																	_user$project$Lang$VList(
																		A2(_elm_lang$core$Basics_ops['++'], _p109._1._1, _p110._0)))
															};
														} else {
															return _elm_lang$core$Native_Utils.crashCase(
																'Update',
																{
																	start: {line: 783, column: 11},
																	end: {line: 786, column: 89}
																},
																_p110)(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'RHS of list pattern is not a list: ',
																	_elm_lang$core$Basics$toString(_p112)));
														}
													}(
														_p106._1(_p107));
												}
											};
										},
										A2(
											_user$project$Update$consWithInversion,
											{
												ctor: '_Tuple2',
												_0: _p81._0._3._0,
												_1: A2(
													_user$project$Lang$replaceV_,
													_p120,
													_user$project$Lang$VList(vs2))
											},
											_user$project$Update$matchListWithInversion(
												{ctor: '_Tuple2', _0: _p113, _1: vs1})));
								}
							} else {
								break _v57_4;
							}
						}
					case 'PConst':
						if ((_p81._1.ctor === 'VConst') && (_p81._1._1.ctor === '_Tuple2')) {
							return _elm_lang$core$Native_Utils.eq(_p81._0._1, _p81._1._1._0) ? _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: {ctor: '[]'},
									_1: function (newEnv) {
										return {ctor: '_Tuple2', _0: _p119, _1: _p120};
									}
								}) : _elm_lang$core$Maybe$Nothing;
						} else {
							break _v57_8;
						}
					case 'PBase':
						if (_p81._1.ctor === 'VBase') {
							return _elm_lang$core$Native_Utils.eq(
								_user$project$Update$eBaseToVBase(_p81._0._1),
								_p81._1._0) ? _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: {ctor: '[]'},
									_1: function (newEnv) {
										return {ctor: '_Tuple2', _0: _p119, _1: _p120};
									}
								}) : _elm_lang$core$Maybe$Nothing;
						} else {
							break _v57_8;
						}
					case 'PParens':
						return A2(
							_elm_lang$core$Maybe$map,
							function (_p115) {
								var _p116 = _p115;
								return {
									ctor: '_Tuple2',
									_0: _p116._0,
									_1: function (newEnv) {
										var _p117 = _p116._1(newEnv);
										return {
											ctor: '_Tuple2',
											_0: A2(
												_user$project$Lang$replaceP__,
												_p119,
												A3(_user$project$Lang$PParens, _p81._0._0, _p117._0, _p81._0._2)),
											_1: _p117._1
										};
									}
								};
							},
							_user$project$Update$matchWithInversion(
								{ctor: '_Tuple2', _0: _p81._0._1, _1: _p120}));
					default:
						break _v57_8;
				}
			} else {
				break _v57_8;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	} while(false);
	return _elm_lang$core$Native_Utils.crashCase(
		'Update',
		{
			start: {line: 744, column: 28},
			end: {line: 800, column: 111}
		},
		_p81)(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Little evaluator bug: Eval.match ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p119.val.p__),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' vs ',
					_elm_lang$core$Basics$toString(_p120.v_)))));
};
var _user$project$Update$consWithInversion = F2(
	function (pv, menv) {
		var _p121 = {
			ctor: '_Tuple2',
			_0: menv,
			_1: _user$project$Update$matchWithInversion(pv)
		};
		if (((((_p121.ctor === '_Tuple2') && (_p121._0.ctor === 'Just')) && (_p121._0._0.ctor === '_Tuple2')) && (_p121._1.ctor === 'Just')) && (_p121._1._0.ctor === '_Tuple2')) {
			var _p123 = _p121._1._0._0;
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Basics_ops['++'], _p123, _p121._0._0._0),
					_1: function (newEnv) {
						var _p122 = A2(
							_user$project$Utils$split,
							_elm_lang$core$List$length(_p123),
							newEnv);
						var newEnv_ = _p122._0;
						var newEnvTail = _p122._1;
						return {
							ctor: '_Tuple2',
							_0: _p121._1._0._1(newEnv_),
							_1: _p121._0._0._1(newEnvTail)
						};
					}
				});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Update$matchListWithInversion = function (_p124) {
	var _p125 = _p124;
	return A2(
		_elm_lang$core$Maybe$map,
		function (_p126) {
			var _p127 = _p126;
			return {
				ctor: '_Tuple2',
				_0: _p127._0,
				_1: function (newEnv) {
					var _p128 = A3(
						_elm_lang$core$List$foldl,
						F2(
							function (eToPVE, _p129) {
								var _p130 = _p129;
								var _p131 = eToPVE(_p130._2);
								var p = _p131._0;
								var v = _p131._1;
								var e = _p131._2;
								return {
									ctor: '_Tuple3',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: p,
											_1: {ctor: '[]'}
										},
										_p130._0),
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: v,
											_1: {ctor: '[]'}
										},
										_p130._1),
									_2: e
								};
							}),
						{
							ctor: '_Tuple3',
							_0: {ctor: '[]'},
							_1: {ctor: '[]'},
							_2: newEnv
						},
						_p127._1);
					var newPats = _p128._0;
					var newVals = _p128._1;
					return {ctor: '_Tuple2', _0: newPats, _1: newVals};
				}
			};
		},
		A3(
			_elm_lang$core$List$foldl,
			F2(
				function (pv, acc) {
					var _p132 = {
						ctor: '_Tuple2',
						_0: acc,
						_1: _user$project$Update$matchWithInversion(pv)
					};
					if (((((_p132.ctor === '_Tuple2') && (_p132._0.ctor === 'Just')) && (_p132._0._0.ctor === '_Tuple2')) && (_p132._1.ctor === 'Just')) && (_p132._1._0.ctor === '_Tuple2')) {
						var _p135 = _p132._1._0._0;
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: A2(_elm_lang$core$Basics_ops['++'], _p135, _p132._0._0._0),
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: function (newEnv) {
											var _p133 = A2(
												_user$project$Utils$split,
												_elm_lang$core$List$length(_p135),
												newEnv);
											var headNewEnv = _p133._0;
											var tailNewEnv = _p133._1;
											var _p134 = _p132._1._0._1(headNewEnv);
											var newPat = _p134._0;
											var newVal = _p134._1;
											return {ctor: '_Tuple3', _0: newPat, _1: newVal, _2: tailNewEnv};
										},
										_1: {ctor: '[]'}
									},
									_p132._0._0._1)
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}),
			_elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: {ctor: '[]'}
				}),
			A2(_user$project$Utils$zip, _p125._0, _p125._1)));
};
var _user$project$Update$branchWithInversion = F3(
	function (env, input, branches) {
		var _p136 = branches;
		if (_p136.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p148 = _p136._1;
			var _p147 = _p136._0;
			var _p137 = _p147.val;
			var _p138 = A2(
				_user$project$Update$consWithInversion,
				{ctor: '_Tuple2', _0: _p137._1, _1: input},
				_elm_lang$core$Maybe$Just(
					{
						ctor: '_Tuple2',
						_0: env,
						_1: function (newEnv) {
							return newEnv;
						}
					}));
			if (_p138.ctor === 'Nothing') {
				return A2(
					_elm_lang$core$Maybe$map,
					function (_p139) {
						var _p140 = _p139;
						return {
							ctor: '_Tuple2',
							_0: {ctor: '_Tuple2', _0: _p140._0._0, _1: _p140._0._1},
							_1: function (_p141) {
								var _p142 = _p141;
								var _p143 = _p140._1(
									{ctor: '_Tuple2', _0: _p142._0, _1: _p142._1});
								var updatedEnv = _p143._0;
								var updatedVal = _p143._1;
								var newTailBranches = _p143._2;
								return {
									ctor: '_Tuple3',
									_0: updatedEnv,
									_1: updatedVal,
									_2: {ctor: '::', _0: _p147, _1: newTailBranches}
								};
							}
						};
					},
					A3(_user$project$Update$branchWithInversion, env, input, _p148));
			} else {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: _p138._0._0, _1: _p137._2},
						_1: function (_p144) {
							var _p145 = _p144;
							var _p146 = _p138._0._1(_p145._0);
							var newPat = _p146._0._0;
							var newVal = _p146._0._1;
							var newEnv = _p146._1;
							return {
								ctor: '_Tuple3',
								_0: newEnv,
								_1: newVal,
								_2: {
									ctor: '::',
									_0: A2(
										_user$project$Lang$replaceB__,
										_p147,
										A4(_user$project$Lang$Branch_, _p137._0, newPat, _p145._1, _p137._3)),
									_1: _p148
								}
							};
						}
					});
			}
		}
	});
var _user$project$Update$conssWithInversion = F2(
	function (pvs, menv) {
		var _p149 = {
			ctor: '_Tuple2',
			_0: menv,
			_1: _user$project$Update$matchListWithInversion(pvs)
		};
		if (((((_p149.ctor === '_Tuple2') && (_p149._0.ctor === 'Just')) && (_p149._0._0.ctor === '_Tuple2')) && (_p149._1.ctor === 'Just')) && (_p149._1._0.ctor === '_Tuple2')) {
			var _p151 = _p149._1._0._0;
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Basics_ops['++'], _p151, _p149._0._0._0),
					_1: function (newEnv) {
						var _p150 = A2(
							_user$project$Utils$split,
							_elm_lang$core$List$length(_p151),
							newEnv);
						var newEnv_ = _p150._0;
						var newEnvTail = _p150._1;
						return {
							ctor: '_Tuple2',
							_0: _p149._1._0._1(newEnv_),
							_1: _p149._0._0._1(newEnvTail)
						};
					}
				});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Update$envEqual = F2(
	function (env1, env2) {
		return A3(
			_user$project$Update$listForAll2,
			F2(
				function (_p153, _p152) {
					var _p154 = _p153;
					var _p155 = _p152;
					return _elm_lang$core$Native_Utils.eq(_p154._0, _p155._0) && A2(_user$project$Update$valEqual, _p154._1, _p155._1);
				}),
			env1,
			env2);
	});
var _user$project$Update$expEqual = F2(
	function (e1_, e2_) {
		return _elm_lang$core$Native_Utils.eq(
			_user$project$Update$unparse(e1_),
			_user$project$Update$unparse(e2_));
	});
var _user$project$Update$branchEqual = F2(
	function (b1, b2) {
		var _p156 = {ctor: '_Tuple2', _0: b1.val, _1: b2.val};
		return A2(_user$project$Update$wsEqual, _p156._0._0, _p156._1._0) && (A2(_user$project$Update$wsEqual, _p156._0._3, _p156._1._3) && (A2(_user$project$Update$expEqual, _p156._0._2, _p156._1._2) && A2(_user$project$Update$patEqual, _p156._0._1, _p156._1._1)));
	});
var _user$project$Update$tbranchEqual = F2(
	function (t1, t2) {
		var _p157 = {ctor: '_Tuple2', _0: t1.val, _1: t2.val};
		return A2(_user$project$Update$wsEqual, _p157._0._0, _p157._1._0) && (A2(_user$project$Update$wsEqual, _p157._0._3, _p157._1._3) && (A2(_user$project$Update$expEqual, _p157._0._2, _p157._1._2) && A2(_user$project$Update$typeEqual, _p157._0._1, _p157._1._1)));
	});
var _user$project$Update$Fork = F5(
	function (a, b, c, d, e) {
		return {ctor: 'Fork', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Update$HandlePreviousResult = function (a) {
	return {ctor: 'HandlePreviousResult', _0: a};
};
var _user$project$Update$UpdateError = function (a) {
	return {ctor: 'UpdateError', _0: a};
};
var _user$project$Update$UpdateAlternative = F8(
	function (a, b, c, d, e, f, g, h) {
		return {ctor: 'UpdateAlternative', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g, _7: h};
	});
var _user$project$Update$UpdateRestart = F5(
	function (a, b, c, d, e) {
		return {ctor: 'UpdateRestart', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Update$UpdateContinue = F5(
	function (a, b, c, d, e) {
		return {ctor: 'UpdateContinue', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Update$UpdateIdem = F4(
	function (a, b, c, d) {
		return {ctor: 'UpdateIdem', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Update$UpdateResults = F3(
	function (a, b, c) {
		return {ctor: 'UpdateResults', _0: a, _1: b, _2: c};
	});
var _user$project$Update$UpdateResult = F2(
	function (a, b) {
		return {ctor: 'UpdateResult', _0: a, _1: b};
	});
var _user$project$Update$Program = function (a) {
	return {ctor: 'Program', _0: a};
};
var _user$project$Update$Raw = function (a) {
	return {ctor: 'Raw', _0: a};
};
var _user$project$Update$getUpdateStackOp = F5(
	function (env, e, oldVal, out, nextToUpdate) {
		var _p158 = e.val.e__;
		switch (_p158.ctor) {
			case 'EHole':
				var _p159 = out;
				if (_p159.ctor === 'Program') {
					return A2(_user$project$Update$UpdateResult, env, _p159._0);
				} else {
					return A2(
						_user$project$Update$UpdateResult,
						env,
						A2(_user$project$Update$val_to_exp, _p158._0, _p159._0));
				}
			case 'EConst':
				var _p160 = out;
				if (_p160.ctor === 'Program') {
					return A2(_user$project$Update$UpdateResult, env, _p160._0);
				} else {
					return A2(
						_user$project$Update$UpdateResult,
						env,
						A2(
							_user$project$Lang$replaceE__,
							e,
							A4(
								_user$project$Lang$EConst,
								_p158._0,
								_user$project$Update$getNum(_p160._0),
								_p158._2,
								_p158._3)));
				}
			case 'EBase':
				var _p165 = _p158._0;
				var _p161 = out;
				if (_p161.ctor === 'Program') {
					return A2(_user$project$Update$UpdateResult, env, _p161._0);
				} else {
					var _p164 = _p161._0;
					var _p162 = _p158._1;
					if (_p162.ctor === 'EString') {
						var _p163 = _p164.v_;
						if ((_p163.ctor === 'VBase') && (_p163._0.ctor === 'VString')) {
							return A2(
								_user$project$Update$UpdateResult,
								env,
								A2(
									_user$project$Lang$replaceE__,
									e,
									A2(
										_user$project$Lang$EBase,
										_p165,
										A2(_user$project$Lang$EString, _p162._0, _p163._0._0))));
						} else {
							return A2(
								_user$project$Update$UpdateResult,
								env,
								A2(_user$project$Update$val_to_exp, _p165, _p164));
						}
					} else {
						return A2(
							_user$project$Update$UpdateResult,
							env,
							A2(_user$project$Update$val_to_exp, _p165, _p164));
					}
				}
			case 'EFun':
				var _p166 = out;
				if (_p166.ctor === 'Program') {
					return A2(_user$project$Update$UpdateResult, env, _p166._0);
				} else {
					var _p168 = _p166._0;
					var _p167 = _p168.v_;
					if ((_p167.ctor === 'VClosure') && (_p167._0.ctor === 'Nothing')) {
						return A2(
							_user$project$Update$UpdateResult,
							_p167._3,
							A2(
								_user$project$Lang$replaceE__,
								_p158._2,
								A4(_user$project$Lang$EFun, _p158._0, _p167._1, _p167._2, _p158._3)));
					} else {
						return A2(
							_elm_lang$core$Native_Utils.crash(
								'Update',
								{
									start: {line: 123, column: 16},
									end: {line: 123, column: 27}
								}),
							'Trying to update a function with non-closure ',
							_user$project$Update$valToString(_p168));
					}
				}
			case 'EVar':
				var _p169 = out;
				if (_p169.ctor === 'Program') {
					return _elm_lang$core$Native_Utils.crashCase(
						'Update',
						{
							start: {line: 125, column: 7},
							end: {line: 130, column: 90}
						},
						_p169)(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Don\'t know how to update an environment with a program: ',
							_user$project$Update$unparse(_p169._0)));
				} else {
					var newEnv = A3(_user$project$Update$updateEnv, env, _p158._1, _p169._0);
					return A4(
						_user$project$Update$UpdateIdem,
						newEnv,
						A2(
							_user$project$Lang$replaceE__,
							e,
							A2(
								_user$project$Lang$EHole,
								_user$project$Lang$ws(''),
								_user$project$Lang$HoleEmpty)),
						oldVal,
						_user$project$Update$Program(e));
				}
			case 'EList':
				if (_p158._3.ctor === 'Nothing') {
					var _p196 = _p158._4;
					var _p195 = _p158._2;
					var _p194 = _p158._0;
					var _p193 = _p158._1;
					var _p171 = out;
					if (_p171.ctor === 'Program') {
						return _elm_lang$core$Native_Utils.crashCase(
							'Update',
							{
								start: {line: 133, column: 7},
								end: {line: 179, column: 112}
							},
							_p171)(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'??? Don\'t know how to update a list with a program ',
								_user$project$Update$unparse(_p171._0)));
					} else {
						var _p192 = _p171._0;
						var _p173 = {ctor: '_Tuple2', _0: oldVal.v_, _1: _p192.v_};
						if (((_p173.ctor === '_Tuple2') && (_p173._0.ctor === 'VList')) && (_p173._1.ctor === 'VList')) {
							var _p191 = _p173._0._0;
							var _p190 = _p173._1._0;
							if (_elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(_p191),
								_elm_lang$core$List$length(_p190))) {
								var _p174 = {ctor: '_Tuple3', _0: _p193, _1: _p191, _2: _p190};
								_v97_2:
								do {
									if (_p174.ctor === '_Tuple3') {
										if (_p174._0.ctor === '[]') {
											if ((_p174._1.ctor === '[]') && (_p174._2.ctor === '[]')) {
												return A4(
													_user$project$Update$UpdateIdem,
													env,
													A2(
														_user$project$Lang$replaceE__,
														e,
														A2(
															_user$project$Lang$EHole,
															_user$project$Lang$ws(''),
															_user$project$Lang$HoleEmpty)),
													oldVal,
													_user$project$Update$Program(e));
											} else {
												break _v97_2;
											}
										} else {
											if ((_p174._1.ctor === '::') && (_p174._2.ctor === '::')) {
												var _p181 = _p174._0._0;
												return A5(
													_user$project$Update$UpdateContinue,
													env,
													_elm_lang$core$Tuple$second(_p181),
													_p174._1._0,
													_user$project$Update$Raw(_p174._2._0),
													_user$project$Update$HandlePreviousResult(
														function (_p175) {
															var _p176 = _p175;
															return A5(
																_user$project$Update$UpdateContinue,
																env,
																A2(
																	_user$project$Lang$replaceE__,
																	e,
																	A5(_user$project$Lang$EList, _p194, _p174._0._1, _p195, _elm_lang$core$Maybe$Nothing, _p196)),
																A2(
																	_user$project$Lang$replaceV_,
																	oldVal,
																	_user$project$Lang$VList(_p174._1._1)),
																_user$project$Update$Raw(
																	A2(
																		_user$project$Lang$replaceV_,
																		_p192,
																		_user$project$Lang$VList(_p174._2._1))),
																_user$project$Update$HandlePreviousResult(
																	function (_p177) {
																		var _p178 = _p177;
																		var _p179 = _p178._1.val.e__;
																		if (_p179.ctor === 'EList') {
																			var newEnv = A4(_user$project$Update$triCombine, e, env, _p176._0, _p178._0);
																			return A2(
																				_user$project$Update$UpdateResult,
																				newEnv,
																				A2(
																					_user$project$Lang$replaceE__,
																					e,
																					A5(
																						_user$project$Lang$EList,
																						_p194,
																						{
																							ctor: '::',
																							_0: {
																								ctor: '_Tuple2',
																								_0: _elm_lang$core$Tuple$first(_p181),
																								_1: _p176._1
																							},
																							_1: _p179._1
																						},
																						_p195,
																						_elm_lang$core$Maybe$Nothing,
																						_p196)));
																		} else {
																			return _elm_lang$core$Native_Utils.crashCase(
																				'Update',
																				{
																					start: {line: 148, column: 29},
																					end: {line: 152, column: 88}
																				},
																				_p179)('Internal error: Should get a list back');
																		}
																	}));
														}));
											} else {
												break _v97_2;
											}
										}
									} else {
										break _v97_2;
									}
								} while(false);
								return _elm_lang$core$Native_Utils.crashCase(
									'Update',
									{
										start: {line: 139, column: 17},
										end: {line: 153, column: 85}
									},
									_p174)('The list\'s length were checked, what happened??');
							} else {
								var results = A2(
									_user$project$Results$mapLazy,
									function (_p183) {
										var _p184 = _p183;
										var _p188 = _p184._0;
										var valtoexpWhitespace = function () {
											if (_elm_lang$core$Native_Utils.cmp(
												_p188,
												_elm_lang$core$List$length(_p193)) < 0) {
												var _p185 = A2(
													_elm_lang$core$List$take,
													1,
													A2(_elm_lang$core$List$drop, _p188, _p193));
												if (((_p185.ctor === '::') && (_p185._0.ctor === '_Tuple2')) && (_p185._1.ctor === '[]')) {
													return function (v) {
														return A2(
															_user$project$Lang$copyPrecedingWhitespace,
															_p185._0._1,
															A2(
																_user$project$Update$val_to_exp,
																_user$project$Lang$ws(' '),
																v));
													};
												} else {
													return function (v) {
														return A2(
															_user$project$Update$val_to_exp,
															_user$project$Lang$ws(' '),
															v);
													};
												}
											} else {
												if (_elm_lang$core$Native_Utils.cmp(
													_elm_lang$core$List$length(_p193),
													0) > 0) {
													var _p186 = A2(
														_elm_lang$core$List$drop,
														_elm_lang$core$List$length(_p193) - 1,
														_p193);
													if (((_p186.ctor === '::') && (_p186._0.ctor === '_Tuple2')) && (_p186._1.ctor === '[]')) {
														return function (v) {
															return A2(
																_user$project$Lang$copyPrecedingWhitespace,
																_p186._0._1,
																A2(
																	_user$project$Update$val_to_exp,
																	_user$project$Lang$ws(' '),
																	v));
														};
													} else {
														return function (v) {
															return A2(
																_user$project$Update$val_to_exp,
																_user$project$Lang$ws(' '),
																v);
														};
													}
												} else {
													return function (v) {
														return A2(
															_user$project$Update$val_to_exp,
															_user$project$Lang$ws(' '),
															v);
													};
												}
											}
										}();
										var insertedExp = A2(
											_elm_lang$core$List$map,
											function (_p187) {
												return A2(
													F2(
														function (v0, v1) {
															return {ctor: '_Tuple2', _0: v0, _1: v1};
														}),
													_user$project$Lang$space0,
													valtoexpWhitespace(_p187));
											},
											_p184._2);
										return {
											ctor: '_Tuple2',
											_0: env,
											_1: A2(
												_user$project$Lang$replaceE__,
												e,
												A5(
													_user$project$Lang$EList,
													_p194,
													A2(
														_elm_lang$core$Basics_ops['++'],
														A2(_elm_lang$core$List$take, _p188, _p193),
														A2(
															_elm_lang$core$Basics_ops['++'],
															insertedExp,
															A2(_elm_lang$core$List$drop, _p188 + _p184._1, _p193))),
													_p195,
													_elm_lang$core$Maybe$Nothing,
													_p196))
										};
									},
									A3(_user$project$Update$indicesOfModification, _user$project$Update$valEqual, _p191, _p190));
								var _p189 = results;
								if (_p189.ctor === 'LazyNil') {
									return _user$project$Update$UpdateError('Internal error: there should have been at least one solution');
								} else {
									return A3(_user$project$Update$UpdateResults, _p189._0._0, _p189._0._1, _p189._1);
								}
							}
						} else {
							return _user$project$Update$UpdateError(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Cannot update a list ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Update$unparse(e),
										A2(
											_elm_lang$core$Basics_ops['++'],
											' with non-list ',
											_user$project$Update$valToString(_p192)))));
						}
					}
				} else {
					var _p212 = _p158._4;
					var _p211 = _p158._2;
					var _p210 = _p158._0;
					var _p209 = _p158._1;
					var _p197 = out;
					if (_p197.ctor === 'Program') {
						return _elm_lang$core$Native_Utils.crashCase(
							'Update',
							{
								start: {line: 182, column: 7},
								end: {line: 206, column: 112}
							},
							_p197)(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'??? Don\'t know how to update a list with a program ',
								_user$project$Update$unparse(_p197._0)));
					} else {
						var _p208 = _p197._0;
						var _p199 = {ctor: '_Tuple2', _0: oldVal.v_, _1: _p208.v_};
						if (((_p199.ctor === '_Tuple2') && (_p199._0.ctor === 'VList')) && (_p199._1.ctor === 'VList')) {
							var _p207 = _p199._0._0;
							var _p206 = _p199._1._0;
							var elemsLength = _elm_lang$core$List$length(_p209);
							if ((_elm_lang$core$Native_Utils.cmp(
								elemsLength,
								_elm_lang$core$List$length(_p206)) < 1) && (_elm_lang$core$Native_Utils.cmp(elemsLength, 1) > -1)) {
								var elemOrigVals = A2(_elm_lang$core$List$take, elemsLength, _p207);
								var elemNewVals = A2(_elm_lang$core$List$take, elemsLength, _p206);
								var tailOrigVals = A2(_elm_lang$core$List$drop, elemsLength, _p207);
								var tailNewVals = A2(_elm_lang$core$List$drop, elemsLength, _p206);
								var toEList = function (eles) {
									return A2(
										_user$project$Lang$replaceE__,
										e,
										A5(_user$project$Lang$EList, _p210, eles, _p211, _elm_lang$core$Maybe$Nothing, _p212));
								};
								var toVList = function (elvs) {
									return A2(
										_user$project$Lang$replaceV_,
										_p208,
										_user$project$Lang$VList(elvs));
								};
								return A5(
									_user$project$Update$UpdateContinue,
									env,
									toEList(_p209),
									toVList(elemOrigVals),
									_user$project$Update$Raw(
										toVList(elemNewVals)),
									_user$project$Update$HandlePreviousResult(
										function (_p200) {
											var _p201 = _p200;
											var newElems = function () {
												var _p202 = _p201._1.val.e__;
												if (_p202.ctor === 'EList') {
													return _p202._1;
												} else {
													return _elm_lang$core$Native_Utils.crashCase(
														'Update',
														{
															start: {line: 197, column: 36},
															end: {line: 199, column: 80}
														},
														_p202)(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'Expected a list, got ',
															_elm_lang$core$Basics$toString(_p202)));
												}
											}();
											return A5(
												_user$project$Update$UpdateContinue,
												env,
												_p158._3._0,
												toVList(tailOrigVals),
												_user$project$Update$Raw(
													toVList(tailNewVals)),
												_user$project$Update$HandlePreviousResult(
													function (_p204) {
														var _p205 = _p204;
														var finalEnv = A4(_user$project$Update$triCombine, e, env, _p201._0, _p205._0);
														return A2(
															_user$project$Update$UpdateResult,
															finalEnv,
															A2(
																_user$project$Lang$replaceE__,
																e,
																A5(
																	_user$project$Lang$EList,
																	_p210,
																	newElems,
																	_p211,
																	_elm_lang$core$Maybe$Just(_p205._1),
																	_p212)));
													}));
										}));
							} else {
								return _user$project$Update$UpdateError(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'Cannot (yet) update a list concatenation ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Update$unparse(e),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' with ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(elemsLength),
													A2(
														_elm_lang$core$Basics_ops['++'],
														' heads by list of smaller length: ',
														_user$project$Update$valToString(_p208)))))));
							}
						} else {
							return _user$project$Update$UpdateError(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Cannot update a list ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Update$unparse(e),
										A2(
											_elm_lang$core$Basics_ops['++'],
											' with non-list ',
											_user$project$Update$valToString(_p208)))));
						}
					}
				}
			case 'EApp':
				var _p244 = _p158._4;
				var _p243 = _p158._0;
				var _p242 = _p158._2;
				var _p241 = _p158._1;
				var _p240 = _p158._3;
				var _p213 = A4(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, env, _p241);
				if (_p213.ctor === 'Err') {
					return _user$project$Update$UpdateError(_p213._0);
				} else {
					var _p239 = _p213._0._0._0;
					var _p214 = _user$project$Utils$projOk(
						A2(
							_elm_lang$core$List$map,
							A3(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, env),
							_p242));
					if (_p214.ctor === 'Err') {
						return _user$project$Update$UpdateError(_p214._0);
					} else {
						var v2s = A2(
							_elm_lang$core$List$map,
							function (_p215) {
								var _p216 = _p215;
								return _p216._0._0;
							},
							_p214._0);
						var _p217 = _p239.v_;
						if (_p217.ctor === 'VClosure') {
							if (_p217._0.ctor === 'Nothing') {
								var _p218 = A2(
									_user$project$Update$conssWithInversion,
									{ctor: '_Tuple2', _0: _p217._1, _1: v2s},
									_elm_lang$core$Maybe$Just(
										{
											ctor: '_Tuple2',
											_0: _p217._3,
											_1: F3(
												function (newEnv_, newPs, newBody) {
													return A2(
														_user$project$Lang$replaceV_,
														_p239,
														A4(_user$project$Lang$VClosure, _elm_lang$core$Maybe$Nothing, newPs, newBody, newEnv_));
												})
										}));
								if ((_p218.ctor === 'Just') && (_p218._0.ctor === '_Tuple2')) {
									return A5(
										_user$project$Update$UpdateContinue,
										_p218._0._0,
										_p217._2,
										oldVal,
										out,
										_user$project$Update$HandlePreviousResult(
											function (_p219) {
												var _p220 = _p219;
												var _p221 = _p218._0._1(_p220._0);
												var newPats = _p221._0._0;
												var newArgs = _p221._0._1;
												var patsBodyToClosure = _p221._1;
												var newClosure = A2(patsBodyToClosure, newPats, _p220._1);
												return A5(
													_user$project$Update$UpdateContinue,
													env,
													_p241,
													_p239,
													_user$project$Update$Raw(newClosure),
													_user$project$Update$HandlePreviousResult(
														function (_p222) {
															var _p223 = _p222;
															return A5(
																_user$project$Update$UpdateContinue,
																env,
																A2(
																	_user$project$Lang$replaceE__,
																	e,
																	A5(
																		_user$project$Lang$EList,
																		_p243,
																		A2(
																			_elm_lang$core$List$map,
																			F2(
																				function (v0, v1) {
																					return {ctor: '_Tuple2', _0: v0, _1: v1};
																				})(_user$project$Lang$space0),
																			_p242),
																		_p244,
																		_elm_lang$core$Maybe$Nothing,
																		_p244)),
																A2(
																	_user$project$Lang$replaceV_,
																	oldVal,
																	_user$project$Lang$VList(v2s)),
																_user$project$Update$Raw(
																	A2(
																		_user$project$Lang$replaceV_,
																		oldVal,
																		_user$project$Lang$VList(newArgs))),
																_user$project$Update$HandlePreviousResult(
																	function (_p224) {
																		var _p225 = _p224;
																		var _p226 = _p225._1.val.e__;
																		if (_p226.ctor === 'EList') {
																			var finalEnv = A4(_user$project$Update$triCombine, e, env, _p223._0, _p225._0);
																			return A2(
																				_user$project$Update$UpdateResult,
																				finalEnv,
																				A2(
																					_user$project$Lang$replaceE__,
																					e,
																					A5(
																						_user$project$Lang$EApp,
																						_p243,
																						_p223._1,
																						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p226._1),
																						_p240,
																						_p244)));
																		} else {
																			return _elm_lang$core$Native_Utils.crashCase(
																				'Update',
																				{
																					start: {line: 227, column: 31},
																					end: {line: 231, column: 113}
																				},
																				_p226)(
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					'Internal error, should have get a list, got ',
																					_elm_lang$core$Basics$toString(_p226)));
																		}
																	}));
														}));
											}));
								} else {
									return _user$project$Update$UpdateError(
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Lang$strPos(_p241.start),
											'bad environment'));
								}
							} else {
								var _p238 = _p217._0._0;
								var _p228 = A2(
									_user$project$Update$consWithInversion,
									{
										ctor: '_Tuple2',
										_0: _user$project$Lang$pVar(_p238),
										_1: _p239
									},
									A2(
										_user$project$Update$conssWithInversion,
										{ctor: '_Tuple2', _0: _p217._1, _1: v2s},
										_elm_lang$core$Maybe$Just(
											{
												ctor: '_Tuple2',
												_0: _p217._3,
												_1: F3(
													function (newEnv_, newPs, newBody) {
														return A2(
															_user$project$Lang$replaceV_,
															_p239,
															A4(
																_user$project$Lang$VClosure,
																_elm_lang$core$Maybe$Just(_p238),
																newPs,
																newBody,
																newEnv_));
													})
											})));
								if ((_p228.ctor === 'Just') && (_p228._0.ctor === '_Tuple2')) {
									return A5(
										_user$project$Update$UpdateContinue,
										_p228._0._0,
										_p217._2,
										oldVal,
										out,
										_user$project$Update$HandlePreviousResult(
											function (_p229) {
												var _p230 = _p229;
												var _p231 = _p228._0._1(_p230._0);
												var newPatFun = _p231._0._0;
												var newArgFun = _p231._0._1;
												var newPats = _p231._1._0._0;
												var newArgs = _p231._1._0._1;
												var patsBodytoClosure = _p231._1._1;
												var newClosure = (!_elm_lang$core$Native_Utils.eq(newArgFun, _p239)) ? newArgFun : A2(patsBodytoClosure, newPats, _p230._1);
												return A5(
													_user$project$Update$UpdateContinue,
													env,
													_p241,
													_p239,
													_user$project$Update$Raw(newClosure),
													_user$project$Update$HandlePreviousResult(
														function (_p232) {
															var _p233 = _p232;
															return A5(
																_user$project$Update$UpdateContinue,
																env,
																A2(
																	_user$project$Lang$replaceE__,
																	e,
																	A5(
																		_user$project$Lang$EList,
																		_p243,
																		A2(
																			_elm_lang$core$List$map,
																			F2(
																				function (v0, v1) {
																					return {ctor: '_Tuple2', _0: v0, _1: v1};
																				})(_user$project$Lang$space0),
																			_p242),
																		_p244,
																		_elm_lang$core$Maybe$Nothing,
																		_p244)),
																A2(
																	_user$project$Lang$replaceV_,
																	oldVal,
																	_user$project$Lang$VList(v2s)),
																_user$project$Update$Raw(
																	A2(
																		_user$project$Lang$replaceV_,
																		oldVal,
																		_user$project$Lang$VList(newArgs))),
																_user$project$Update$HandlePreviousResult(
																	function (_p234) {
																		var _p235 = _p234;
																		var _p236 = _p235._1.val.e__;
																		if (_p236.ctor === 'EList') {
																			var finalEnv = A4(_user$project$Update$triCombine, e, env, _p233._0, _p235._0);
																			return A2(
																				_user$project$Update$UpdateResult,
																				finalEnv,
																				A2(
																					_user$project$Lang$replaceE__,
																					e,
																					A5(
																						_user$project$Lang$EApp,
																						_p243,
																						_p233._1,
																						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p236._1),
																						_p240,
																						_p244)));
																		} else {
																			return _elm_lang$core$Native_Utils.crashCase(
																				'Update',
																				{
																					start: {line: 246, column: 31},
																					end: {line: 250, column: 106}
																				},
																				_p236)(
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					'Unexpected result of updating a list ',
																					_elm_lang$core$Basics$toString(_p236)));
																		}
																	}));
														}));
											}));
								} else {
									return _user$project$Update$UpdateError(
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Lang$strPos(_p241.start),
											'bad environment'));
								}
							}
						} else {
							return _user$project$Update$UpdateError(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Lang$strPos(_p241.start),
									' not a function'));
						}
					}
				}
			case 'EIf':
				var _p258 = _p158._3;
				var _p257 = _p158._6;
				var _p256 = _p158._4;
				var _p255 = _p158._2;
				var _p254 = _p158._0;
				var _p253 = _p158._5;
				var _p252 = _p158._1;
				var _p245 = A4(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, env, _p252);
				if (_p245.ctor === 'Ok') {
					var _p251 = _p245._0._0._0;
					var _p246 = _p251.v_;
					if ((_p246.ctor === 'VBase') && (_p246._0.ctor === 'VBool')) {
						return _p246._0._0 ? A5(
							_user$project$Update$UpdateContinue,
							env,
							_p258,
							oldVal,
							out,
							_user$project$Update$HandlePreviousResult(
								function (_p247) {
									var _p248 = _p247;
									return A2(
										_user$project$Update$UpdateResult,
										_p248._0,
										A2(
											_user$project$Lang$replaceE__,
											e,
											A7(_user$project$Lang$EIf, _p254, _p252, _p255, _p248._1, _p256, _p253, _p257)));
								})) : A5(
							_user$project$Update$UpdateContinue,
							env,
							_p253,
							oldVal,
							out,
							_user$project$Update$HandlePreviousResult(
								function (_p249) {
									var _p250 = _p249;
									return A2(
										_user$project$Update$UpdateResult,
										_p250._0,
										A2(
											_user$project$Lang$replaceE__,
											e,
											A7(_user$project$Lang$EIf, _p254, _p252, _p255, _p258, _p256, _p250._1, _p257)));
								}));
					} else {
						return _user$project$Update$UpdateError(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Expected boolean condition, got ',
								_user$project$Update$valToString(_p251)));
					}
				} else {
					return _user$project$Update$UpdateError(_p245._0);
				}
			case 'EOp':
				var _p302 = _p158._3;
				var _p301 = _p158._0;
				var _p300 = _p158._2;
				var _p299 = _p158._1;
				var _p259 = {ctor: '_Tuple2', _0: _p299.val, _1: _p300};
				if ((((_p259.ctor === '_Tuple2') && (_p259._0.ctor === 'NoWidgets')) && (_p259._1.ctor === '::')) && (_p259._1._1.ctor === '[]')) {
					return A5(
						_user$project$Update$UpdateContinue,
						env,
						_p259._1._0,
						oldVal,
						out,
						_user$project$Update$HandlePreviousResult(
							function (_p260) {
								var _p261 = _p260;
								return A2(
									_user$project$Update$UpdateResult,
									_p261._0,
									A2(
										_user$project$Lang$replaceE__,
										e,
										A4(
											_user$project$Lang$EOp,
											_p301,
											_p299,
											{
												ctor: '::',
												_0: _p261._1,
												_1: {ctor: '[]'}
											},
											_p302)));
							}));
				} else {
					var _p262 = _user$project$Utils$projOk(
						A2(
							_elm_lang$core$List$map,
							A3(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, env),
							_p300));
					if (_p262.ctor === 'Err') {
						return _user$project$Update$UpdateError(_p262._0);
					} else {
						var _p263 = A2(
							_user$project$Utils$mapFst3,
							_elm_lang$core$List$unzip,
							_user$project$Utils$unzip3(_p262._0));
						var vs = _p263._0._0;
						var wss = _p263._0._1;
						var envs = _p263._1;
						var args = A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.v_;
							},
							vs);
						var argList = A2(
							_user$project$Lang$replaceE__,
							e,
							A5(
								_user$project$Lang$EList,
								_user$project$Lang$ws(''),
								A2(
									_elm_lang$core$List$map,
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										})(_user$project$Lang$space0),
									_p300),
								_user$project$Lang$ws(''),
								_elm_lang$core$Maybe$Nothing,
								_user$project$Lang$ws('')));
						var handleRemainingResults = F2(
							function (lazyTail, nextToUpdate) {
								return A2(
									_user$project$Results$lazyCons2,
									_user$project$Update$HandlePreviousResult(
										function (_p264) {
											var _p265 = _p264;
											var _p269 = _p265._0;
											var _p266 = _p265._1.val.e__;
											if (_p266.ctor === 'EList') {
												var finalExp = A2(
													_user$project$Lang$replaceE__,
													e,
													A4(
														_user$project$Lang$EOp,
														_p301,
														_p299,
														A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p266._1),
														_p302));
												var _p267 = _elm_lang$lazy$Lazy$force(lazyTail);
												if (_p267.ctor === 'LazyNil') {
													return A2(_user$project$Update$UpdateResult, _p269, finalExp);
												} else {
													return A8(
														_user$project$Update$UpdateAlternative,
														_p269,
														finalExp,
														oldVal,
														env,
														argList,
														A2(
															_user$project$Lang$replaceV_,
															oldVal,
															_user$project$Lang$VList(vs)),
														_user$project$Update$Raw(
															A2(
																_user$project$Lang$replaceV_,
																oldVal,
																_user$project$Lang$VList(_p267._0))),
														A2(handleRemainingResults, _p267._1, nextToUpdate));
												}
											} else {
												return _elm_lang$core$Native_Utils.crashCase(
													'Update',
													{
														start: {line: 283, column: 19},
														end: {line: 290, column: 95}
													},
													_p266)(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'Unexpected return of updating a list: ',
														_elm_lang$core$Basics$toString(_p266)));
											}
										}),
									nextToUpdate);
							});
						var _p270 = _p299.val;
						switch (_p270.ctor) {
							case 'Explode':
								return _elm_lang$core$Native_Utils.crashCase(
									'Update',
									{
										start: {line: 293, column: 15},
										end: {line: 356, column: 73}
									},
									_p270)('Not implemented: update Explode ');
							case 'DebugLog':
								return _elm_lang$core$Native_Utils.crashCase(
									'Update',
									{
										start: {line: 293, column: 15},
										end: {line: 356, column: 73}
									},
									_p270)('Not implemented: update DebugLog ');
							case 'OptNumToString':
								var _p273 = out;
								if (_p273.ctor === 'Program') {
									return _user$project$Update$UpdateError('Don\'t know how to update a OptNumToString with a program');
								} else {
									var $default = function (_p274) {
										var _p275 = _p274;
										var _p276 = _p273._0.v_;
										if ((_p276.ctor === 'VBase') && (_p276._0.ctor === 'VString')) {
											var _p282 = _p276._0._0;
											var _p277 = A2(_user$project$Syntax$parser, _user$project$Syntax$Elm, _p282);
											if (_p277.ctor === 'Err') {
												return _user$project$Update$UpdateError(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'Could not parse new output value \'',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_p282,
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\' for ToStr expression ',
																_elm_lang$core$Basics$toString(_p277._0)))));
											} else {
												var _p278 = A4(
													_user$project$Eval$doEval,
													false,
													_user$project$Syntax$Elm,
													{ctor: '[]'},
													_p277._0);
												if (_p278.ctor === 'Err') {
													return _user$project$Update$UpdateError(_p278._0);
												} else {
													var _p279 = {ctor: '_Tuple2', _0: _p300, _1: vs};
													if (((((_p279.ctor === '_Tuple2') && (_p279._0.ctor === '::')) && (_p279._0._1.ctor === '[]')) && (_p279._1.ctor === '::')) && (_p279._1._1.ctor === '[]')) {
														return A5(
															_user$project$Update$UpdateContinue,
															env,
															_p279._0._0,
															_p279._1._0,
															_user$project$Update$Raw(_p278._0._0._0),
															_user$project$Update$HandlePreviousResult(
																function (_p280) {
																	var _p281 = _p280;
																	return A2(
																		_user$project$Update$UpdateResult,
																		_p281._0,
																		A2(
																			_user$project$Lang$replaceE__,
																			e,
																			A4(
																				_user$project$Lang$EOp,
																				_p301,
																				_p299,
																				{
																					ctor: '::',
																					_0: _p281._1,
																					_1: {ctor: '[]'}
																				},
																				_p302)));
																}));
													} else {
														return _user$project$Update$UpdateError(
															A2(
																_elm_lang$core$Basics_ops['++'],
																'[internal error] Wrong number of arguments in update OptNumToString: ',
																_elm_lang$core$Basics$toString(_p279)));
													}
												}
											}
										} else {
											return _user$project$Update$UpdateError(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'Expected string, got ',
													_elm_lang$core$Basics$toString(_p276)));
										}
									};
									var _p283 = vs;
									if ((_p283.ctor === '::') && (_p283._1.ctor === '[]')) {
										var _p288 = _p283._0;
										var _p284 = _p288.v_;
										if ((_p284.ctor === 'VBase') && (_p284._0.ctor === 'VString')) {
											var _p285 = _p300;
											if ((_p285.ctor === '::') && (_p285._1.ctor === '[]')) {
												return A5(
													_user$project$Update$UpdateContinue,
													env,
													_p285._0,
													_p288,
													out,
													_user$project$Update$HandlePreviousResult(
														function (_p286) {
															var _p287 = _p286;
															return A2(
																_user$project$Update$UpdateResult,
																_p287._0,
																A2(
																	_user$project$Lang$replaceE__,
																	e,
																	A4(
																		_user$project$Lang$EOp,
																		_p301,
																		_p299,
																		{
																			ctor: '::',
																			_0: _p287._1,
																			_1: {ctor: '[]'}
																		},
																		_p302)));
														}));
											} else {
												return _user$project$Update$UpdateError(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'[internal error] Wrong number of argument values in update OptNumToString: ',
														_elm_lang$core$Basics$toString(_p285)));
											}
										} else {
											return $default(
												{ctor: '_Tuple0'});
										}
									} else {
										return _user$project$Update$UpdateError(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'[internale error] Wrong number or arguments in updateOptNumtoString: ',
												_elm_lang$core$Basics$toString(e)));
									}
								}
							case 'ToStr':
								var _p289 = out;
								if (_p289.ctor === 'Program') {
									return _user$project$Update$UpdateError('Don\'t know how to update a ToStr with a program');
								} else {
									var _p290 = _p289._0.v_;
									if ((_p290.ctor === 'VBase') && (_p290._0.ctor === 'VString')) {
										var _p296 = _p290._0._0;
										var _p291 = A2(_user$project$Syntax$parser, _user$project$Syntax$Elm, _p296);
										if (_p291.ctor === 'Err') {
											return _user$project$Update$UpdateError(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'Could not parse new output value \'',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_p296,
														A2(
															_elm_lang$core$Basics_ops['++'],
															'\' for ToStr expression ',
															_elm_lang$core$Basics$toString(_p291._0)))));
										} else {
											var _p292 = A4(
												_user$project$Eval$doEval,
												false,
												_user$project$Syntax$Elm,
												{ctor: '[]'},
												_p291._0);
											if (_p292.ctor === 'Err') {
												return _user$project$Update$UpdateError(_p292._0);
											} else {
												var _p293 = {ctor: '_Tuple2', _0: _p300, _1: vs};
												if (((((_p293.ctor === '_Tuple2') && (_p293._0.ctor === '::')) && (_p293._0._1.ctor === '[]')) && (_p293._1.ctor === '::')) && (_p293._1._1.ctor === '[]')) {
													return A5(
														_user$project$Update$UpdateContinue,
														env,
														_p293._0._0,
														_p293._1._0,
														_user$project$Update$Raw(_p292._0._0._0),
														_user$project$Update$HandlePreviousResult(
															function (_p294) {
																var _p295 = _p294;
																return A2(
																	_user$project$Update$UpdateResult,
																	_p295._0,
																	A2(
																		_user$project$Lang$replaceE__,
																		e,
																		A4(
																			_user$project$Lang$EOp,
																			_p301,
																			_p299,
																			{
																				ctor: '::',
																				_0: _p295._1,
																				_1: {ctor: '[]'}
																			},
																			_p302)));
															}));
												} else {
													return _user$project$Update$UpdateError(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'[internal error] Wrong number of arguments in update: ',
															_elm_lang$core$Basics$toString(_p293)));
												}
											}
										}
									} else {
										return _user$project$Update$UpdateError(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Expected string, got ',
												_elm_lang$core$Basics$toString(_p290)));
									}
								}
							default:
								var _p297 = out;
								if (_p297.ctor === 'Program') {
									return _user$project$Update$UpdateError('Don\'t know how to update an operation with a program');
								} else {
									var _p298 = A4(_user$project$Update$maybeUpdateMathOp, _p299, vs, oldVal, _p297._0);
									if (_p298.ctor === 'Errs') {
										return _user$project$Update$UpdateError(_p298._0);
									} else {
										if (_p298._0.ctor === 'LazyNil') {
											return _user$project$Update$UpdateError('[Internal error] No result for updating.');
										} else {
											return A5(
												_user$project$Update$UpdateRestart,
												env,
												argList,
												A2(
													_user$project$Lang$replaceV_,
													oldVal,
													_user$project$Lang$VList(vs)),
												_user$project$Update$Raw(
													A2(
														_user$project$Lang$replaceV_,
														oldVal,
														_user$project$Lang$VList(_p298._0._0))),
												A2(handleRemainingResults, _p298._0._1, nextToUpdate));
										}
									}
								}
						}
					}
				}
			case 'ECase':
				var _p311 = _p158._1;
				var _p303 = A4(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, env, _p311);
				if (_p303.ctor === 'Err') {
					return _user$project$Update$UpdateError(_p303._0);
				} else {
					var _p310 = _p303._0._0._0;
					var _p304 = A3(_user$project$Update$branchWithInversion, env, _p310, _p158._2);
					if (_p304.ctor === 'Nothing') {
						return _user$project$Update$UpdateError(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Match error: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Update$valToString(_p310),
									A2(
										_elm_lang$core$Basics_ops['++'],
										' on branches ',
										A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, e)))));
					} else {
						return A5(
							_user$project$Update$UpdateContinue,
							_p304._0._0._0,
							_p304._0._0._1,
							oldVal,
							out,
							_user$project$Update$HandlePreviousResult(
								function (_p305) {
									var _p306 = _p305;
									var _p307 = _p304._0._1(
										{ctor: '_Tuple2', _0: _p306._0, _1: _p306._1});
									var newBranchEnv = _p307._0;
									var newInputVal = _p307._1;
									var nBranches = _p307._2;
									return A5(
										_user$project$Update$UpdateContinue,
										env,
										_p311,
										_p310,
										_user$project$Update$Raw(newInputVal),
										_user$project$Update$HandlePreviousResult(
											function (_p308) {
												var _p309 = _p308;
												var finalEnv = A4(_user$project$Update$triCombine, e, env, _p309._0, newBranchEnv);
												var finalExp = A2(
													_user$project$Lang$replaceE__,
													e,
													A4(_user$project$Lang$ECase, _p158._0, _p309._1, nBranches, _p158._3));
												return A2(_user$project$Update$UpdateResult, finalEnv, finalExp);
											}));
								}));
					}
				}
			case 'ELet':
				if (_p158._2 === false) {
					var _p322 = _p158._3;
					var _p321 = _p158._5;
					var _p312 = A4(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, env, _p321);
					if (_p312.ctor === 'Err') {
						return _user$project$Update$UpdateError(_p312._0);
					} else {
						var _p320 = _p312._0._0._0;
						var _p313 = A2(
							_user$project$Update$consWithInversion,
							{ctor: '_Tuple2', _0: _p322, _1: _p320},
							_elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: env,
									_1: function (newEnv) {
										return newEnv;
									}
								}));
						if (_p313.ctor === 'Just') {
							return A5(
								_user$project$Update$UpdateContinue,
								_p313._0._0,
								_p158._7,
								oldVal,
								out,
								_user$project$Update$HandlePreviousResult(
									function (_p314) {
										var _p315 = _p314;
										var _p316 = _p313._0._1(_p315._0);
										return A5(
											_user$project$Update$UpdateContinue,
											env,
											_p321,
											_p320,
											_user$project$Update$Raw(_p316._0._1),
											_user$project$Update$HandlePreviousResult(
												function (_p317) {
													var _p318 = _p317;
													var finalEnv = A4(_user$project$Update$triCombine, e, env, _p318._0, _p316._1);
													var finalExp = A2(
														_user$project$Lang$replaceE__,
														e,
														A9(_user$project$Lang$ELet, _p158._0, _p158._1, false, _p316._0._0, _p158._4, _p318._1, _p158._6, _p315._1, _p158._8));
													return A2(_user$project$Update$UpdateResult, finalEnv, finalExp);
												}));
									}));
						} else {
							return _user$project$Update$UpdateError(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Lang$strPos(e.start),
									A2(
										_elm_lang$core$Basics_ops['++'],
										' could not match pattern ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											function (_p319) {
												return _user$project$Utils$squish(
													A2(_user$project$Syntax$patternUnparser, _user$project$Syntax$Elm, _p319));
											}(_p322),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' with ',
												_user$project$ValUnparser$strVal(_p320))))));
						}
					}
				} else {
					var _p337 = _p158._3;
					var _p336 = _p158._5;
					var _p323 = A4(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, env, _p336);
					if (_p323.ctor === 'Err') {
						return _user$project$Update$UpdateError(_p323._0);
					} else {
						var _p335 = _p323._0._0._0;
						var _p324 = {ctor: '_Tuple2', _0: _p337.val.p__, _1: _p335.v_};
						_v164_2:
						do {
							if (_p324.ctor === '_Tuple2') {
								switch (_p324._0.ctor) {
									case 'PVar':
										if ((_p324._1.ctor === 'VClosure') && (_p324._1._0.ctor === 'Nothing')) {
											var oldE1ValNamed = _elm_lang$core$Native_Utils.update(
												_p335,
												{
													v_: A4(
														_user$project$Lang$VClosure,
														_elm_lang$core$Maybe$Just(_p324._0._1),
														_p324._1._1,
														_p324._1._2,
														env)
												});
											var _p325 = A2(
												_user$project$Update$consWithInversion,
												{ctor: '_Tuple2', _0: _p337, _1: oldE1ValNamed},
												_elm_lang$core$Maybe$Just(
													{
														ctor: '_Tuple2',
														_0: env,
														_1: function (newEnv) {
															return newEnv;
														}
													}));
											if (_p325.ctor === 'Just') {
												return A5(
													_user$project$Update$UpdateContinue,
													_p325._0._0,
													_p158._7,
													oldVal,
													out,
													_user$project$Update$HandlePreviousResult(
														function (_p326) {
															var _p327 = _p326;
															var _p328 = _p325._0._1(_p327._0);
															var _p333 = _p328._0._1;
															var newE1Val = function () {
																var _p329 = _p333.v_;
																if ((_p329.ctor === 'VClosure') && (_p329._0.ctor === 'Just')) {
																	return _elm_lang$core$Native_Utils.update(
																		_p333,
																		{
																			v_: A4(_user$project$Lang$VClosure, _elm_lang$core$Maybe$Nothing, _p329._1, _p329._2, _p329._3)
																		});
																} else {
																	return _elm_lang$core$Native_Utils.crashCase(
																		'Update',
																		{
																			start: {line: 400, column: 43},
																			end: {line: 402, column: 106}
																		},
																		_p329)('[internal error] This should have been a recursive method');
																}
															}();
															return A5(
																_user$project$Update$UpdateContinue,
																env,
																_p336,
																_p335,
																_user$project$Update$Raw(newE1Val),
																_user$project$Update$HandlePreviousResult(
																	function (_p331) {
																		var _p332 = _p331;
																		var finalEnv = A4(_user$project$Update$triCombine, e, env, _p332._0, _p328._1);
																		var finalExp = A2(
																			_user$project$Lang$replaceE__,
																			e,
																			A9(_user$project$Lang$ELet, _p158._0, _p158._1, true, _p328._0._0, _p158._4, _p332._1, _p158._6, _p327._1, _p158._8));
																		return A2(_user$project$Update$UpdateResult, finalEnv, finalExp);
																	}));
														}));
											} else {
												return _user$project$Update$UpdateError(
													A2(
														_elm_lang$core$Basics_ops['++'],
														_user$project$Lang$strPos(e.start),
														A2(
															_elm_lang$core$Basics_ops['++'],
															' could not match pattern ',
															A2(
																_elm_lang$core$Basics_ops['++'],
																function (_p334) {
																	return _user$project$Utils$squish(
																		A2(_user$project$Syntax$patternUnparser, _user$project$Syntax$Elm, _p334));
																}(_p337),
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	' with ',
																	_user$project$ValUnparser$strVal(_p335))))));
											}
										} else {
											break _v164_2;
										}
									case 'PList':
										return _user$project$Update$UpdateError(
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Lang$strPos(_p336.start),
												'mutually recursive functions (i.e. letrec [...] [...] e) \\n                       not yet implemented'));
									default:
										break _v164_2;
								}
							} else {
								break _v164_2;
							}
						} while(false);
						return _user$project$Update$UpdateError(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Lang$strPos(e.start),
								' bad letrec'));
					}
				}
			case 'EComment':
				return A5(
					_user$project$Update$UpdateContinue,
					env,
					_p158._2,
					oldVal,
					out,
					_user$project$Update$HandlePreviousResult(
						function (_p338) {
							var _p339 = _p338;
							return A2(
								_user$project$Update$UpdateResult,
								_p339._0,
								A2(
									_user$project$Lang$replaceE__,
									e,
									A3(_user$project$Lang$EComment, _p158._0, _p158._1, _p339._1)));
						}));
			case 'EOption':
				return A5(
					_user$project$Update$UpdateContinue,
					env,
					_p158._4,
					oldVal,
					out,
					_user$project$Update$HandlePreviousResult(
						function (_p340) {
							var _p341 = _p340;
							return A2(
								_user$project$Update$UpdateResult,
								_p341._0,
								A2(
									_user$project$Lang$replaceE__,
									e,
									A5(_user$project$Lang$EOption, _p158._0, _p158._1, _p158._2, _p158._3, _p341._1)));
						}));
			case 'ETyp':
				return A5(
					_user$project$Update$UpdateContinue,
					env,
					_p158._3,
					oldVal,
					out,
					_user$project$Update$HandlePreviousResult(
						function (_p342) {
							var _p343 = _p342;
							return A2(
								_user$project$Update$UpdateResult,
								_p343._0,
								A2(
									_user$project$Lang$replaceE__,
									e,
									A5(_user$project$Lang$ETyp, _p158._0, _p158._1, _p158._2, _p343._1, _p158._4)));
						}));
			case 'EColonType':
				return A5(
					_user$project$Update$UpdateContinue,
					env,
					_p158._1,
					oldVal,
					out,
					_user$project$Update$HandlePreviousResult(
						function (_p344) {
							var _p345 = _p344;
							return A2(
								_user$project$Update$UpdateResult,
								_p345._0,
								A2(
									_user$project$Lang$replaceE__,
									e,
									A5(_user$project$Lang$EColonType, _p158._0, _p345._1, _p158._2, _p158._3, _p158._4)));
						}));
			case 'ETypeAlias':
				return A5(
					_user$project$Update$UpdateContinue,
					env,
					_p158._3,
					oldVal,
					out,
					_user$project$Update$HandlePreviousResult(
						function (_p346) {
							var _p347 = _p346;
							return A2(
								_user$project$Update$UpdateResult,
								_p347._0,
								A2(
									_user$project$Lang$replaceE__,
									e,
									A5(_user$project$Lang$ETypeAlias, _p158._0, _p158._1, _p158._2, _p347._1, _p158._4)));
						}));
			case 'EParens':
				return A5(
					_user$project$Update$UpdateContinue,
					env,
					_p158._1,
					oldVal,
					out,
					_user$project$Update$HandlePreviousResult(
						function (_p348) {
							var _p349 = _p348;
							return A2(
								_user$project$Update$UpdateResult,
								_p349._0,
								A2(
									_user$project$Lang$replaceE__,
									e,
									A4(_user$project$Lang$EParens, _p158._0, _p349._1, _p158._2, _p158._3)));
						}));
			default:
				var outStr = function () {
					var _p350 = out;
					if (_p350.ctor === 'Program') {
						return _user$project$Update$unparse(_p350._0);
					} else {
						return _user$project$Update$valToString(_p350._0);
					}
				}();
				return _user$project$Update$UpdateError(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Non-supported update ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Update$envToString(
								A2(_user$project$Update$pruneEnv, e, env)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'|-',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Update$unparse(e),
									A2(
										_elm_lang$core$Basics_ops['++'],
										' <-- ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											outStr,
											A2(
												_elm_lang$core$Basics_ops['++'],
												' (was ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$Update$valToString(oldVal),
													')')))))))));
		}
	});
var _user$project$Update$update = F5(
	function (env, e, oldVal, out, nextToUpdate) {
		update:
		while (true) {
			var updateStack = A5(_user$project$Update$getUpdateStackOp, env, e, oldVal, out, nextToUpdate);
			var _p351 = updateStack;
			switch (_p351.ctor) {
				case 'UpdateError':
					return _user$project$Results$Errs(_p351._0);
				case 'UpdateIdem':
					var _v178 = _p351._0,
						_v179 = _p351._1,
						_v180 = _p351._2,
						_v181 = _p351._3,
						_v182 = nextToUpdate;
					env = _v178;
					e = _v179;
					oldVal = _v180;
					out = _v181;
					nextToUpdate = _v182;
					continue update;
				case 'UpdateContinue':
					var _v183 = _p351._0,
						_v184 = _p351._1,
						_v185 = _p351._2,
						_v186 = _p351._3,
						_v187 = A2(_user$project$Results$lazyCons2, _p351._4, nextToUpdate);
					env = _v183;
					e = _v184;
					oldVal = _v185;
					out = _v186;
					nextToUpdate = _v187;
					continue update;
				case 'UpdateRestart':
					var _v188 = _p351._0,
						_v189 = _p351._1,
						_v190 = _p351._2,
						_v191 = _p351._3,
						_v192 = _p351._4;
					env = _v188;
					e = _v189;
					oldVal = _v190;
					out = _v191;
					nextToUpdate = _v192;
					continue update;
				case 'UpdateAlternative':
					var _v193 = _p351._0,
						_v194 = e,
						_v195 = _p351._2,
						_v196 = _user$project$Update$Program(_p351._1),
						_v197 = A2(
						_user$project$Results$appendLazy,
						nextToUpdate,
						_user$project$Results$lazyFromList(
							{
								ctor: '::',
								_0: A5(_user$project$Update$Fork, _p351._3, _p351._4, _p351._5, _p351._6, _p351._7),
								_1: {ctor: '[]'}
							}));
					env = _v193;
					e = _v194;
					oldVal = _v195;
					out = _v196;
					nextToUpdate = _v197;
					continue update;
				case 'UpdateResults':
					var _v199 = _p351._0,
						_v200 = A2(
						_user$project$Lang$replaceE__,
						e,
						A2(
							_user$project$Lang$EHole,
							_user$project$Lang$ws(''),
							_user$project$Lang$HoleEmpty)),
						_v201 = oldVal,
						_v202 = _user$project$Update$Program(_p351._1),
						_v203 = A2(
						_user$project$Results$appendLazy,
						nextToUpdate,
						A2(
							_user$project$Results$mapLazy,
							function (_p352) {
								var _p353 = _p352;
								return A5(
									_user$project$Update$Fork,
									_p353._0,
									A2(
										_user$project$Lang$replaceE__,
										e,
										A2(
											_user$project$Lang$EHole,
											_user$project$Lang$ws(''),
											_user$project$Lang$HoleEmpty)),
									oldVal,
									_user$project$Update$Program(_p353._1),
									nextToUpdate);
							},
							_elm_lang$lazy$Lazy$force(_p351._2)));
					env = _v199;
					e = _v200;
					oldVal = _v201;
					out = _v202;
					nextToUpdate = _v203;
					continue update;
				default:
					var _p363 = _p351._1;
					var _p362 = _p351._0;
					var _p354 = nextToUpdate;
					if (_p354.ctor === 'LazyNil') {
						return _user$project$Results$ok1(
							{ctor: '_Tuple2', _0: _p362, _1: _p363});
					} else {
						var _p361 = _p354._1;
						var _p355 = _p354._0;
						if (_p355.ctor === 'Fork') {
							return A2(
								_user$project$Results$okLazy,
								{ctor: '_Tuple2', _0: _p362, _1: _p363},
								function (_p356) {
									var _p357 = _p356;
									return A5(
										_user$project$Update$updateRec,
										_p355._0,
										_p355._1,
										_p355._2,
										_p355._3,
										A2(_user$project$Results$appendLazyLazy, _p355._4, _p361));
								});
						} else {
							var _p358 = _p355._0(
								{ctor: '_Tuple2', _0: _p362, _1: _p363});
							switch (_p358.ctor) {
								case 'UpdateError':
									return _user$project$Results$Errs(_p358._0);
								case 'UpdateResult':
									var _v208 = _p358._0,
										_v209 = e,
										_v210 = oldVal,
										_v211 = _user$project$Update$Program(_p358._1),
										_v212 = _elm_lang$lazy$Lazy$force(_p361);
									env = _v208;
									e = _v209;
									oldVal = _v210;
									out = _v211;
									nextToUpdate = _v212;
									continue update;
								case 'UpdateResults':
									var _v214 = _p358._0,
										_v215 = A2(
										_user$project$Lang$replaceE__,
										e,
										A2(
											_user$project$Lang$EHole,
											_user$project$Lang$ws(''),
											_user$project$Lang$HoleEmpty)),
										_v216 = oldVal,
										_v217 = _user$project$Update$Program(_p358._1),
										_v218 = A2(
										_user$project$Results$appendLazy,
										_elm_lang$lazy$Lazy$force(_p361),
										A2(
											_user$project$Results$mapLazy,
											function (_p359) {
												var _p360 = _p359;
												return A5(
													_user$project$Update$Fork,
													_p360._0,
													A2(
														_user$project$Lang$replaceE__,
														e,
														A2(
															_user$project$Lang$EHole,
															_user$project$Lang$ws(''),
															_user$project$Lang$HoleEmpty)),
													oldVal,
													_user$project$Update$Program(_p360._1),
													_elm_lang$lazy$Lazy$force(_p361));
											},
											_elm_lang$lazy$Lazy$force(_p358._2)));
									env = _v214;
									e = _v215;
									oldVal = _v216;
									out = _v217;
									nextToUpdate = _v218;
									continue update;
								case 'UpdateIdem':
									var _v219 = _p358._0,
										_v220 = _p358._1,
										_v221 = _p358._2,
										_v222 = _p358._3,
										_v223 = _elm_lang$lazy$Lazy$force(_p361);
									env = _v219;
									e = _v220;
									oldVal = _v221;
									out = _v222;
									nextToUpdate = _v223;
									continue update;
								case 'UpdateContinue':
									var _v224 = _p358._0,
										_v225 = _p358._1,
										_v226 = _p358._2,
										_v227 = _p358._3,
										_v228 = A2(_user$project$Results$LazyCons, _p358._4, _p361);
									env = _v224;
									e = _v225;
									oldVal = _v226;
									out = _v227;
									nextToUpdate = _v228;
									continue update;
								case 'UpdateRestart':
									var _v229 = _p358._0,
										_v230 = _p358._1,
										_v231 = _p358._2,
										_v232 = _p358._3,
										_v233 = _p358._4;
									env = _v229;
									e = _v230;
									oldVal = _v231;
									out = _v232;
									nextToUpdate = _v233;
									continue update;
								default:
									var _v234 = _p358._0,
										_v235 = e,
										_v236 = _p358._2,
										_v237 = _user$project$Update$Program(_p358._1),
										_v238 = A2(
										_user$project$Results$appendLazy,
										_elm_lang$lazy$Lazy$force(_p361),
										_user$project$Results$lazyFromList(
											{
												ctor: '::',
												_0: A5(_user$project$Update$Fork, _p358._3, _p358._4, _p358._5, _p358._6, _p358._7),
												_1: {ctor: '[]'}
											}));
									env = _v234;
									e = _v235;
									oldVal = _v236;
									out = _v237;
									nextToUpdate = _v238;
									continue update;
							}
						}
					}
			}
		}
	});
var _user$project$Update$updateRec = F5(
	function (env, e, oldVal, newVal, nextToUpdate) {
		var _p364 = A5(_user$project$Update$update, env, e, oldVal, newVal, nextToUpdate);
		if (_p364.ctor === 'Oks') {
			return _p364._0;
		} else {
			return _user$project$Results$LazyNil;
		}
	});

var _user$project$FillPBEHole$two = _user$project$Lang$eConstFrozen(2);
var _user$project$FillPBEHole$zero = _user$project$Lang$eConstFrozen(0);
var _user$project$FillPBEHole$valFromVarDomain = _user$project$Lang$eHoleNamed('valFromVarDomain');
var _user$project$FillPBEHole$num3 = _user$project$Lang$eVar('num 3');
var _user$project$FillPBEHole$num2 = _user$project$Lang$eVar('num 2');
var _user$project$FillPBEHole$num1 = _user$project$Lang$eVar('num 1');
var _user$project$FillPBEHole$var = _user$project$Lang$eVar('env var');
var _user$project$FillPBEHole$exampleVal2 = _user$project$Lang$eHoleNamed('exampleVal2');
var _user$project$FillPBEHole$exampleVal1 = _user$project$Lang$eHoleNamed('exampleVal1');
var _user$project$FillPBEHole$isSketchFilled = function (sketchExp) {
	return !A2(
		_user$project$Lang$containsNode,
		function (e) {
			return A2(
				_elm_lang$core$List$member,
				e,
				{
					ctor: '::',
					_0: _user$project$FillPBEHole$exampleVal1,
					_1: {
						ctor: '::',
						_0: _user$project$FillPBEHole$exampleVal2,
						_1: {
							ctor: '::',
							_0: _user$project$FillPBEHole$var,
							_1: {
								ctor: '::',
								_0: _user$project$FillPBEHole$num1,
								_1: {
									ctor: '::',
									_0: _user$project$FillPBEHole$num2,
									_1: {
										ctor: '::',
										_0: _user$project$FillPBEHole$num3,
										_1: {
											ctor: '::',
											_0: _user$project$FillPBEHole$valFromVarDomain,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				});
		},
		sketchExp);
};
var _user$project$FillPBEHole$sketches = A2(
	_elm_lang$core$Basics_ops['++'],
	{
		ctor: '::',
		_0: _user$project$FillPBEHole$var,
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Lang$eOp,
				_user$project$Lang$Plus,
				{
					ctor: '::',
					_0: _user$project$FillPBEHole$var,
					_1: {
						ctor: '::',
						_0: _user$project$FillPBEHole$num1,
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$Lang$eOp,
					_user$project$Lang$Minus,
					{
						ctor: '::',
						_0: _user$project$FillPBEHole$var,
						_1: {
							ctor: '::',
							_0: _user$project$FillPBEHole$num1,
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Lang$eOp,
						_user$project$Lang$Minus,
						{
							ctor: '::',
							_0: _user$project$FillPBEHole$num1,
							_1: {
								ctor: '::',
								_0: _user$project$FillPBEHole$var,
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Lang$eOp,
							_user$project$Lang$Mult,
							{
								ctor: '::',
								_0: _user$project$FillPBEHole$var,
								_1: {
									ctor: '::',
									_0: _user$project$FillPBEHole$num1,
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Lang$eOp,
								_user$project$Lang$Div,
								{
									ctor: '::',
									_0: _user$project$FillPBEHole$var,
									_1: {
										ctor: '::',
										_0: _user$project$FillPBEHole$num1,
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$Lang$eOp,
									_user$project$Lang$Div,
									{
										ctor: '::',
										_0: _user$project$FillPBEHole$num1,
										_1: {
											ctor: '::',
											_0: _user$project$FillPBEHole$var,
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$Lang$eOp,
										_user$project$Lang$Plus,
										{
											ctor: '::',
											_0: _user$project$FillPBEHole$num1,
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$Lang$eOp,
													_user$project$Lang$Mult,
													{
														ctor: '::',
														_0: _user$project$FillPBEHole$var,
														_1: {
															ctor: '::',
															_0: _user$project$FillPBEHole$num2,
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: _user$project$FillPBEHole$exampleVal1,
		_1: {
			ctor: '::',
			_0: A3(
				_user$project$Lang$eIfSingleLine,
				A2(
					_user$project$Lang$eOp,
					_user$project$Lang$Eq,
					{
						ctor: '::',
						_0: _user$project$FillPBEHole$var,
						_1: {
							ctor: '::',
							_0: _user$project$FillPBEHole$valFromVarDomain,
							_1: {ctor: '[]'}
						}
					}),
				_user$project$FillPBEHole$exampleVal1,
				_user$project$FillPBEHole$exampleVal2),
			_1: {
				ctor: '::',
				_0: A3(
					_user$project$Lang$eIfSingleLine,
					A2(
						_user$project$Lang$eOp,
						_user$project$Lang$Lt,
						{
							ctor: '::',
							_0: _user$project$FillPBEHole$var,
							_1: {
								ctor: '::',
								_0: _user$project$FillPBEHole$valFromVarDomain,
								_1: {ctor: '[]'}
							}
						}),
					_user$project$FillPBEHole$exampleVal1,
					_user$project$FillPBEHole$exampleVal2),
				_1: {
					ctor: '::',
					_0: A3(
						_user$project$Lang$eIfSingleLine,
						A2(
							_user$project$Lang$eOp,
							_user$project$Lang$Eq,
							{
								ctor: '::',
								_0: A2(
									_user$project$Lang$eOp,
									_user$project$Lang$Mod,
									{
										ctor: '::',
										_0: _user$project$FillPBEHole$var,
										_1: {
											ctor: '::',
											_0: _user$project$FillPBEHole$two,
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$FillPBEHole$zero,
									_1: {ctor: '[]'}
								}
							}),
						_user$project$FillPBEHole$exampleVal1,
						_user$project$FillPBEHole$exampleVal2),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$FillPBEHole$pbeHoleFillings = F2(
	function (solutionsCache, pbeHolesSeen) {
		var _p0 = _user$project$Utils$unzip3(pbeHolesSeen);
		var envs = _p0._1;
		var results = _p0._2;
		var _p1 = _user$project$Utils$projOk(results);
		if (_p1.ctor === 'Ok') {
			if (_p1._0.ctor === '::') {
				var _p38 = _p1._0;
				var filledSketches = function () {
					var possiblyRelevantVariables = A2(
						_elm_lang$core$List$filter,
						function (_p2) {
							var _p3 = _p2;
							var _p4 = _p3._1;
							return (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$List$length(
									A2(_user$project$Utils$dedupBy, _user$project$Update$valToString, _p4)),
								0) > 0) && A2(
								F2(
									function (x, y) {
										return _elm_lang$core$Native_Utils.eq(x, y);
									}),
								_elm_lang$core$Maybe$Nothing,
								A2(
									_elm_lang$core$Maybe$andThen,
									_user$project$Lang$valToMaybeFuncBodyExp,
									_elm_lang$core$List$head(_p4)));
						},
						_elm_lang$core$Dict$toList(
							_user$project$Utils$pairsToDictOfLists(
								_elm_lang$core$List$concat(
									_user$project$Utils$removeCommonSuffix(
										A2(_elm_lang$core$List$map, _user$project$Utils$removeShadowedKeys, envs))))));
					return A2(
						_elm_lang$core$List$concatMap,
						function (sketch) {
							if (A2(
								_user$project$Lang$containsNode,
								F2(
									function (x, y) {
										return _elm_lang$core$Native_Utils.eq(x, y);
									})(_user$project$FillPBEHole$var),
								sketch)) {
								return A2(
									_elm_lang$core$List$concatMap,
									function (_p5) {
										var _p6 = _p5;
										var _p26 = _p6._1;
										var _p25 = _p6._0;
										var varDomain = A2(_user$project$Utils$dedupBy, _user$project$Update$valToString, _p26);
										var initialSketches = A2(
											_user$project$Lang$containsNode,
											F2(
												function (x, y) {
													return _elm_lang$core$Native_Utils.eq(x, y);
												})(_user$project$FillPBEHole$valFromVarDomain),
											sketch) ? A2(
											_elm_lang$core$List$map,
											function (val) {
												return A3(
													_user$project$Lang$mapExpNodesMatching,
													F2(
														function (x, y) {
															return _elm_lang$core$Native_Utils.eq(x, y);
														})(_user$project$FillPBEHole$valFromVarDomain),
													_elm_lang$core$Basics$always(
														_user$project$Lang$eHoleVal(val)),
													sketch);
											},
											varDomain) : {
											ctor: '::',
											_0: sketch,
											_1: {ctor: '[]'}
										};
										return A2(
											_elm_lang$core$List$concatMap,
											function (initialSketch) {
												var _p7 = {
													ctor: '_Tuple3',
													_0: _user$project$MathExp$expToMaybeMathExp(initialSketch),
													_1: _user$project$Utils$projJusts(
														A2(_elm_lang$core$List$map, _user$project$Lang$valToMaybeNum, _p38)),
													_2: _user$project$Utils$projJusts(
														A2(_elm_lang$core$List$map, _user$project$Lang$valToMaybeNum, _p26))
												};
												if ((_p7.ctor === '_Tuple3') && (_p7._0.ctor === 'Just')) {
													if (((_p7._0._0.ctor === '_Tuple2') && (_p7._1.ctor === 'Just')) && (_p7._2.ctor === 'Just')) {
														var _p18 = _p7._2._0;
														var _p17 = _p7._0._0._0;
														var _p16 = _p7._0._0._1;
														var _p15 = _p7._1._0;
														if (A2(
															_user$project$Lang$containsNode,
															F2(
																function (x, y) {
																	return _elm_lang$core$Native_Utils.eq(x, y);
																})(_user$project$FillPBEHole$num1),
															initialSketch) && (A2(
															_user$project$Lang$containsNode,
															F2(
																function (x, y) {
																	return _elm_lang$core$Native_Utils.eq(x, y);
																})(_user$project$FillPBEHole$num2),
															initialSketch) && A2(
															_user$project$Lang$containsNode,
															F2(
																function (x, y) {
																	return _elm_lang$core$Native_Utils.eq(x, y);
																})(_user$project$FillPBEHole$num3),
															initialSketch))) {
															var _p8 = _user$project$Utils$dedup(
																A2(_user$project$Utils$zip, _p15, _p18));
															if ((((((_p8.ctor === '::') && (_p8._0.ctor === '_Tuple2')) && (_p8._1.ctor === '::')) && (_p8._1._0.ctor === '_Tuple2')) && (_p8._1._1.ctor === '::')) && (_p8._1._1._0.ctor === '_Tuple2')) {
																var num3VarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'num 3', _p16);
																var num2VarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'num 2', _p16);
																var num1VarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'num 1', _p16);
																var targetVarIds = {
																	ctor: '::',
																	_0: num1VarId,
																	_1: {
																		ctor: '::',
																		_0: num2VarId,
																		_1: {
																			ctor: '::',
																			_0: num3VarId,
																			_1: {ctor: '[]'}
																		}
																	}
																};
																var envVarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'env var', _p16);
																var eqns = {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: _user$project$Lang$MathNum(_p8._0._0),
																		_1: A2(
																			_user$project$MathExp$applySubst,
																			A2(_elm_lang$core$Dict$singleton, envVarId, _p8._0._1),
																			_p17)
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: _user$project$Lang$MathNum(_p8._1._0._0),
																			_1: A2(
																				_user$project$MathExp$applySubst,
																				A2(_elm_lang$core$Dict$singleton, envVarId, _p8._1._0._1),
																				_p17)
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: _user$project$Lang$MathNum(_p8._1._1._0._0),
																				_1: A2(
																					_user$project$MathExp$applySubst,
																					A2(_elm_lang$core$Dict$singleton, envVarId, _p8._1._1._0._1),
																					_p17)
																			},
																			_1: {ctor: '[]'}
																		}
																	}
																};
																return A2(
																	_elm_lang$core$List$concatMap,
																	function (solution) {
																		var _p9 = {
																			ctor: '_Tuple3',
																			_0: A2(
																				_user$project$Utils$maybeFind,
																				num1VarId,
																				A2(_elm_lang$core$List$map, _user$project$Utils$flip, solution)),
																			_1: A2(
																				_user$project$Utils$maybeFind,
																				num2VarId,
																				A2(_elm_lang$core$List$map, _user$project$Utils$flip, solution)),
																			_2: A2(
																				_user$project$Utils$maybeFind,
																				num3VarId,
																				A2(_elm_lang$core$List$map, _user$project$Utils$flip, solution))
																		};
																		if (((((((_p9.ctor === '_Tuple3') && (_p9._0.ctor === 'Just')) && (_p9._0._0.ctor === 'MathNum')) && (_p9._1.ctor === 'Just')) && (_p9._1._0.ctor === 'MathNum')) && (_p9._2.ctor === 'Just')) && (_p9._2._0.ctor === 'MathNum')) {
																			return {
																				ctor: '::',
																				_0: A3(
																					_user$project$Lang$mapExpNodesMatching,
																					F2(
																						function (x, y) {
																							return _elm_lang$core$Native_Utils.eq(x, y);
																						})(_user$project$FillPBEHole$num3),
																					_elm_lang$core$Basics$always(
																						_user$project$Lang$eConstDummyLoc(_p9._2._0._0)),
																					A3(
																						_user$project$Lang$mapExpNodesMatching,
																						F2(
																							function (x, y) {
																								return _elm_lang$core$Native_Utils.eq(x, y);
																							})(_user$project$FillPBEHole$num2),
																						_elm_lang$core$Basics$always(
																							_user$project$Lang$eConstDummyLoc(_p9._1._0._0)),
																						A3(
																							_user$project$Lang$mapExpNodesMatching,
																							F2(
																								function (x, y) {
																									return _elm_lang$core$Native_Utils.eq(x, y);
																								})(_user$project$FillPBEHole$num1),
																							_elm_lang$core$Basics$always(
																								_user$project$Lang$eConstDummyLoc(_p9._0._0._0)),
																							A3(
																								_user$project$Lang$mapExpNodesMatching,
																								F2(
																									function (x, y) {
																										return _elm_lang$core$Native_Utils.eq(x, y);
																									})(_user$project$FillPBEHole$var),
																								_elm_lang$core$Basics$always(
																									_user$project$Lang$eVar(_p25)),
																								initialSketch)))),
																				_1: {ctor: '[]'}
																			};
																		} else {
																			return {ctor: '[]'};
																		}
																	},
																	A3(_user$project$Solver$solve, solutionsCache, eqns, targetVarIds));
															} else {
																return {ctor: '[]'};
															}
														} else {
															if (A2(
																_user$project$Lang$containsNode,
																F2(
																	function (x, y) {
																		return _elm_lang$core$Native_Utils.eq(x, y);
																	})(_user$project$FillPBEHole$num1),
																initialSketch) && A2(
																_user$project$Lang$containsNode,
																F2(
																	function (x, y) {
																		return _elm_lang$core$Native_Utils.eq(x, y);
																	})(_user$project$FillPBEHole$num2),
																initialSketch)) {
																var _p10 = _user$project$Utils$dedup(
																	A2(_user$project$Utils$zip, _p15, _p18));
																if ((((_p10.ctor === '::') && (_p10._0.ctor === '_Tuple2')) && (_p10._1.ctor === '::')) && (_p10._1._0.ctor === '_Tuple2')) {
																	var num2VarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'num 2', _p16);
																	var num1VarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'num 1', _p16);
																	var targetVarIds = {
																		ctor: '::',
																		_0: num1VarId,
																		_1: {
																			ctor: '::',
																			_0: num2VarId,
																			_1: {ctor: '[]'}
																		}
																	};
																	var envVarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'env var', _p16);
																	var eqns = {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: _user$project$Lang$MathNum(_p10._0._0),
																			_1: A2(
																				_user$project$MathExp$applySubst,
																				A2(_elm_lang$core$Dict$singleton, envVarId, _p10._0._1),
																				_p17)
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: _user$project$Lang$MathNum(_p10._1._0._0),
																				_1: A2(
																					_user$project$MathExp$applySubst,
																					A2(_elm_lang$core$Dict$singleton, envVarId, _p10._1._0._1),
																					_p17)
																			},
																			_1: {ctor: '[]'}
																		}
																	};
																	return A2(
																		_elm_lang$core$List$concatMap,
																		function (solution) {
																			var _p11 = {
																				ctor: '_Tuple2',
																				_0: A2(
																					_user$project$Utils$maybeFind,
																					num1VarId,
																					A2(_elm_lang$core$List$map, _user$project$Utils$flip, solution)),
																				_1: A2(
																					_user$project$Utils$maybeFind,
																					num2VarId,
																					A2(_elm_lang$core$List$map, _user$project$Utils$flip, solution))
																			};
																			if (((((_p11.ctor === '_Tuple2') && (_p11._0.ctor === 'Just')) && (_p11._0._0.ctor === 'MathNum')) && (_p11._1.ctor === 'Just')) && (_p11._1._0.ctor === 'MathNum')) {
																				return {
																					ctor: '::',
																					_0: A3(
																						_user$project$Lang$mapExpNodesMatching,
																						F2(
																							function (x, y) {
																								return _elm_lang$core$Native_Utils.eq(x, y);
																							})(_user$project$FillPBEHole$num2),
																						_elm_lang$core$Basics$always(
																							_user$project$Lang$eConstDummyLoc(_p11._1._0._0)),
																						A3(
																							_user$project$Lang$mapExpNodesMatching,
																							F2(
																								function (x, y) {
																									return _elm_lang$core$Native_Utils.eq(x, y);
																								})(_user$project$FillPBEHole$num1),
																							_elm_lang$core$Basics$always(
																								_user$project$Lang$eConstDummyLoc(_p11._0._0._0)),
																							A3(
																								_user$project$Lang$mapExpNodesMatching,
																								F2(
																									function (x, y) {
																										return _elm_lang$core$Native_Utils.eq(x, y);
																									})(_user$project$FillPBEHole$var),
																								_elm_lang$core$Basics$always(
																									_user$project$Lang$eVar(_p25)),
																								initialSketch))),
																					_1: {ctor: '[]'}
																				};
																			} else {
																				return {ctor: '[]'};
																			}
																		},
																		A3(_user$project$Solver$solve, solutionsCache, eqns, targetVarIds));
																} else {
																	return {ctor: '[]'};
																}
															} else {
																if (A2(
																	_user$project$Lang$containsNode,
																	F2(
																		function (x, y) {
																			return _elm_lang$core$Native_Utils.eq(x, y);
																		})(_user$project$FillPBEHole$num1),
																	initialSketch)) {
																	var _p12 = {ctor: '_Tuple2', _0: _p15, _1: _p18};
																	if (((_p12.ctor === '_Tuple2') && (_p12._0.ctor === '::')) && (_p12._1.ctor === '::')) {
																		var num1VarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'num 1', _p16);
																		var targetVarIds = {
																			ctor: '::',
																			_0: num1VarId,
																			_1: {ctor: '[]'}
																		};
																		var envVarId = A3(_user$project$Utils$justGet_, 'PBE hole filling identToVarId shouldn\'t happen', 'env var', _p16);
																		var eqns = {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: _user$project$Lang$MathNum(_p12._0._0),
																				_1: A2(
																					_user$project$MathExp$applySubst,
																					A2(_elm_lang$core$Dict$singleton, envVarId, _p12._1._0),
																					_p17)
																			},
																			_1: {ctor: '[]'}
																		};
																		return A2(
																			_elm_lang$core$List$concatMap,
																			function (solution) {
																				var _p13 = solution;
																				if ((((_p13.ctor === '::') && (_p13._0.ctor === '_Tuple2')) && (_p13._0._0.ctor === 'MathNum')) && (_p13._1.ctor === '[]')) {
																					return {
																						ctor: '::',
																						_0: A3(
																							_user$project$Lang$mapExpNodesMatching,
																							F2(
																								function (x, y) {
																									return _elm_lang$core$Native_Utils.eq(x, y);
																								})(_user$project$FillPBEHole$num1),
																							_elm_lang$core$Basics$always(
																								_user$project$Lang$eConstDummyLoc(_p13._0._0._0)),
																							A3(
																								_user$project$Lang$mapExpNodesMatching,
																								F2(
																									function (x, y) {
																										return _elm_lang$core$Native_Utils.eq(x, y);
																									})(_user$project$FillPBEHole$var),
																								_elm_lang$core$Basics$always(
																									_user$project$Lang$eVar(_p25)),
																								initialSketch)),
																						_1: {ctor: '[]'}
																					};
																				} else {
																					return {ctor: '[]'};
																				}
																			},
																			A3(_user$project$Solver$solve, solutionsCache, eqns, targetVarIds));
																	} else {
																		return {ctor: '[]'};
																	}
																} else {
																	if (_elm_lang$core$Native_Utils.eq(initialSketch, _user$project$FillPBEHole$var)) {
																		return {
																			ctor: '::',
																			_0: _user$project$Lang$eVar(_p25),
																			_1: {ctor: '[]'}
																		};
																	} else {
																		var _p14 = _user$project$Utils$log('fillPBEHoles did not expect to hit this branch');
																		return {ctor: '[]'};
																	}
																}
															}
														}
													} else {
														return _elm_lang$core$Native_Utils.eq(initialSketch, _user$project$FillPBEHole$var) ? {
															ctor: '::',
															_0: _user$project$Lang$eVar(_p25),
															_1: {ctor: '[]'}
														} : {ctor: '[]'};
													}
												} else {
													var filledSketch = A3(
														_user$project$Utils$foldl,
														A3(
															_user$project$Lang$mapExpNodesMatching,
															F2(
																function (x, y) {
																	return _elm_lang$core$Native_Utils.eq(x, y);
																})(_user$project$FillPBEHole$var),
															_elm_lang$core$Basics$always(
																_user$project$Lang$eVar(_p25)),
															initialSketch),
														F2(
															function (_p19, sketchSoFar) {
																var _p20 = _p19;
																var _p24 = _p20._1;
																var env = {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: _p25, _1: _p20._0},
																	_1: {ctor: '[]'}
																};
																var _p21 = A4(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, env, sketchSoFar);
																if (_p21.ctor === 'Err') {
																	var _p23 = _p21._0;
																	if (A2(_elm_lang$core$String$contains, 'empty hole exampleVal1!', _p23)) {
																		return A3(
																			_user$project$Lang$mapExpNodesMatching,
																			F2(
																				function (x, y) {
																					return _elm_lang$core$Native_Utils.eq(x, y);
																				})(_user$project$FillPBEHole$exampleVal1),
																			_elm_lang$core$Basics$always(
																				_user$project$Lang$eHoleVal(_p24)),
																			sketchSoFar);
																	} else {
																		if (A2(_elm_lang$core$String$contains, 'empty hole exampleVal2!', _p23)) {
																			return A3(
																				_user$project$Lang$mapExpNodesMatching,
																				F2(
																					function (x, y) {
																						return _elm_lang$core$Native_Utils.eq(x, y);
																					})(_user$project$FillPBEHole$exampleVal2),
																				_elm_lang$core$Basics$always(
																					_user$project$Lang$eHoleVal(_p24)),
																				sketchSoFar);
																		} else {
																			var _p22 = _user$project$Utils$log(
																				A2(_elm_lang$core$Basics_ops['++'], 'Unexpected error during PBE sketch filling: ', _p23));
																			return sketchSoFar;
																		}
																	}
																} else {
																	return sketchSoFar;
																}
															}),
														A2(_user$project$Utils$zip, _p26, _p38));
													return _user$project$FillPBEHole$isSketchFilled(filledSketch) ? {
														ctor: '::',
														_0: filledSketch,
														_1: {ctor: '[]'}
													} : {ctor: '[]'};
												}
											},
											initialSketches);
									},
									possiblyRelevantVariables);
							} else {
								if (_elm_lang$core$Native_Utils.eq(sketch, _user$project$FillPBEHole$exampleVal1)) {
									return {
										ctor: '::',
										_0: _user$project$Lang$eHoleVal(_p1._0._0),
										_1: {ctor: '[]'}
									};
								} else {
									var _p27 = _user$project$Utils$log(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Unexpected sketch that doesn\'t use env var: ',
											A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, sketch)));
									return {ctor: '[]'};
								}
							}
						},
						_user$project$FillPBEHole$sketches);
				}();
				var filteredAndFinalizedFilledSketches = A2(
					_elm_lang$core$List$filter,
					function (sketch) {
						var leaves = _user$project$LangTools$effectiveBranches(sketch);
						return _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$length(leaves),
							_elm_lang$core$List$length(
								_user$project$Utils$dedup(leaves)));
					},
					A2(
						_elm_lang$core$List$map,
						function (filteredSketch) {
							return A2(
								_user$project$Lang$mapExp,
								function (e) {
									var _p28 = e.val.e__;
									if ((_p28.ctor === 'EHole') && (_p28._1.ctor === 'HoleVal')) {
										return A2(_user$project$Update$val_to_exp, _user$project$Lang$space1, _p28._1._0);
									} else {
										return e;
									}
								},
								filteredSketch);
						},
						A2(
							_elm_lang$core$List$filter,
							function (sketch) {
								return A2(
									_elm_lang$core$List$all,
									function (_p29) {
										var _p30 = _p29;
										var _p37 = _p30._1;
										var _p31 = A4(_user$project$Eval$doEval, false, _user$project$Syntax$Elm, _p30._0, sketch);
										if (_p31.ctor === 'Ok') {
											var _p36 = _p31._0._0._0;
											return _elm_lang$core$Native_Utils.eq(
												_user$project$Types$valToMaybeType(_p37),
												_user$project$Types$valToMaybeType(_p36)) && A2(
												_elm_lang$core$Maybe$withDefault,
												false,
												A2(
													_elm_lang$core$Maybe$map,
													_elm_lang$core$List$all(
														function (_p32) {
															var _p33 = _p32;
															var _p35 = _p33._0;
															var _p34 = _p33._1;
															var diff = _p34 - _p35;
															return _elm_lang$core$Native_Utils.eq(_p34, 0) ? _elm_lang$core$Native_Utils.eq(diff, 0) : (_elm_lang$core$Native_Utils.cmp(
																_elm_lang$core$Basics$abs(diff / _p35),
																0.2) < 0);
														}),
													A2(
														_user$project$Utils$maybeZip,
														A2(
															_elm_lang$core$List$filterMap,
															_user$project$Lang$valToMaybeNum,
															_user$project$Lang$flattenValTree(_p37)),
														A2(
															_elm_lang$core$List$filterMap,
															_user$project$Lang$valToMaybeNum,
															_user$project$Lang$flattenValTree(_p36)))));
										} else {
											return false;
										}
									},
									A2(_user$project$Utils$zip, envs, _p38));
							},
							filledSketches)));
				return filteredAndFinalizedFilledSketches;
			} else {
				var _p39 = _user$project$Utils$log('Can\'t fill PBE hole because no examples');
				return {ctor: '[]'};
			}
		} else {
			var _p40 = _user$project$Utils$log(
				A2(_elm_lang$core$Basics_ops['++'], 'Can\'t fill PBE hole because not all examples evaluated\n', _p1._0));
			return {ctor: '[]'};
		}
	});

var _user$project$OutputCanvas$outputCanvasCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'outputCanvasCmd',
	function (v) {
		return {message: v.message};
	});
var _user$project$OutputCanvas$sendCmd = function (message) {
	return _user$project$OutputCanvas$outputCanvasCmd(
		{message: message});
};
var _user$project$OutputCanvas$initialize = _user$project$OutputCanvas$sendCmd('initialize');
var _user$project$OutputCanvas$resetScroll = _user$project$OutputCanvas$sendCmd('resetScroll');
var _user$project$OutputCanvas$receiveOutputCanvasState = _elm_lang$core$Native_Platform.incomingPort(
	'receiveOutputCanvasState',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (scrollTop) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (scrollLeft) {
					return _elm_lang$core$Json_Decode$succeed(
						{scrollTop: scrollTop, scrollLeft: scrollLeft});
				},
				A2(_elm_lang$core$Json_Decode$field, 'scrollLeft', _elm_lang$core$Json_Decode$float));
		},
		A2(_elm_lang$core$Json_Decode$field, 'scrollTop', _elm_lang$core$Json_Decode$float)));
var _user$project$OutputCanvas$OutputCanvasCmd = function (a) {
	return {message: a};
};

var _user$project$FileHandler$externalFileMessage = _elm_lang$core$Native_Platform.outgoingPort(
	'externalFileMessage',
	function (v) {
		return {tag: v.tag, data: v.data};
	});
var _user$project$FileHandler$sendMessage = function (em) {
	var _p0 = em;
	switch (_p0.ctor) {
		case 'Write':
			return _user$project$FileHandler$externalFileMessage(
				{
					tag: 'Write',
					data: _elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'filename',
								_1: _user$project$File$encodeFilename(_p0._0)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'contents',
									_1: _elm_lang$core$Json_Encode$string(_p0._1)
								},
								_1: {ctor: '[]'}
							}
						})
				});
		case 'Delete':
			return _user$project$FileHandler$externalFileMessage(
				{
					tag: 'Delete',
					data: _user$project$File$encodeFilename(_p0._0)
				});
		case 'Download':
			return _user$project$FileHandler$externalFileMessage(
				{
					tag: 'Download',
					data: _elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'title',
								_1: _elm_lang$core$Json_Encode$string(_p0._0)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'contents',
									_1: _elm_lang$core$Json_Encode$string(_p0._1)
								},
								_1: {ctor: '[]'}
							}
						})
				});
		case 'RequestFile':
			return _user$project$FileHandler$externalFileMessage(
				{
					tag: 'RequestFile',
					data: _user$project$File$encodeFilename(_p0._0)
				});
		case 'RequestIcon':
			return _user$project$FileHandler$externalFileMessage(
				{
					tag: 'RequestIcon',
					data: _elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'iconName',
								_1: _elm_lang$core$Json_Encode$string(_p0._0)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'iconExtensionPrecedences',
									_1: _elm_lang$core$Json_Encode$list(
										A2(_elm_lang$core$List$map, _user$project$File$encodeFileExtension, _user$project$File$iconExtensionPrecedences))
								},
								_1: {ctor: '[]'}
							}
						})
				});
		case 'RequestUploadedFile':
			return _user$project$FileHandler$externalFileMessage(
				{
					tag: 'RequestUploadedFile',
					data: _elm_lang$core$Json_Encode$string(_p0._0)
				});
		default:
			return _user$project$FileHandler$externalFileMessage(
				{tag: 'RequestFileIndex', data: _elm_lang$core$Json_Encode$null});
	}
};
var _user$project$FileHandler$internalFileMessage = _elm_lang$core$Native_Platform.incomingPort(
	'internalFileMessage',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (tag) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (data) {
					return _elm_lang$core$Json_Decode$succeed(
						{tag: tag, data: data});
				},
				A2(_elm_lang$core$Json_Decode$field, 'data', _elm_lang$core$Json_Decode$value));
		},
		A2(_elm_lang$core$Json_Decode$field, 'tag', _elm_lang$core$Json_Decode$string)));
var _user$project$FileHandler$ExternalData = F2(
	function (a, b) {
		return {tag: a, data: b};
	});
var _user$project$FileHandler$RequestFileIndex = {ctor: 'RequestFileIndex'};
var _user$project$FileHandler$RequestUploadedFile = function (a) {
	return {ctor: 'RequestUploadedFile', _0: a};
};
var _user$project$FileHandler$RequestIcon = function (a) {
	return {ctor: 'RequestIcon', _0: a};
};
var _user$project$FileHandler$RequestFile = function (a) {
	return {ctor: 'RequestFile', _0: a};
};
var _user$project$FileHandler$Download = F2(
	function (a, b) {
		return {ctor: 'Download', _0: a, _1: b};
	});
var _user$project$FileHandler$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _user$project$FileHandler$Write = F2(
	function (a, b) {
		return {ctor: 'Write', _0: a, _1: b};
	});
var _user$project$FileHandler$ReceiveFileIndex = function (a) {
	return {ctor: 'ReceiveFileIndex', _0: a};
};
var _user$project$FileHandler$ReceiveIcon = function (a) {
	return {ctor: 'ReceiveIcon', _0: a};
};
var _user$project$FileHandler$ReceiveFile = F2(
	function (a, b) {
		return {ctor: 'ReceiveFile', _0: a, _1: b};
	});
var _user$project$FileHandler$ConfirmDelete = function (a) {
	return {ctor: 'ConfirmDelete', _0: a};
};
var _user$project$FileHandler$ConfirmWrite = function (a) {
	return {ctor: 'ConfirmWrite', _0: a};
};
var _user$project$FileHandler$receiveMessage = F2(
	function (tagger, onError) {
		var handler = function (externalData) {
			var _p1 = externalData.tag;
			switch (_p1) {
				case 'ConfirmWrite':
					var _p2 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$File$filenameDecoder, externalData.data);
					if (_p2.ctor === 'Ok') {
						return tagger(
							_user$project$FileHandler$ConfirmWrite(_p2._0));
					} else {
						return onError(_p2._0);
					}
				case 'ConfirmDelete':
					var _p3 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$File$filenameDecoder, externalData.data);
					if (_p3.ctor === 'Ok') {
						return tagger(
							_user$project$FileHandler$ConfirmDelete(_p3._0));
					} else {
						return onError(_p3._0);
					}
				case 'ReceiveFile':
					var _p4 = A2(
						_elm_lang$core$Json_Decode$decodeValue,
						A3(
							_elm_lang$core$Json_Decode$map2,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							A2(_elm_lang$core$Json_Decode$field, 'file', _user$project$File$fileDecoder),
							A2(_elm_lang$core$Json_Decode$field, 'needsSave', _elm_lang$core$Json_Decode$bool)),
						externalData.data);
					if (_p4.ctor === 'Ok') {
						return tagger(
							A2(_user$project$FileHandler$ReceiveFile, _p4._0._0, _p4._0._1));
					} else {
						return onError(_p4._0);
					}
				case 'ReceiveIcon':
					var _p5 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$File$fileDecoder, externalData.data);
					if (_p5.ctor === 'Ok') {
						return tagger(
							_user$project$FileHandler$ReceiveIcon(_p5._0));
					} else {
						return onError(_p5._0);
					}
				case 'ReceiveFileIndex':
					var _p6 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$File$fileIndexDecoder, externalData.data);
					if (_p6.ctor === 'Ok') {
						return tagger(
							_user$project$FileHandler$ReceiveFileIndex(_p6._0));
					} else {
						return onError(_p6._0);
					}
				default:
					return onError(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Unknown internal file message \'',
							A2(
								_elm_lang$core$Basics_ops['++'],
								externalData.tag,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\' with data: ',
									_elm_lang$core$Basics$toString(externalData.data)))));
			}
		};
		return _user$project$FileHandler$internalFileMessage(handler);
	});

var _user$project$DeucePopupPanelInfo$requestDeucePopupPanelInfo = _elm_lang$core$Native_Platform.outgoingPort(
	'requestDeucePopupPanelInfo',
	function (v) {
		return null;
	});
var _user$project$DeucePopupPanelInfo$receiveDeucePopupPanelInfo = _elm_lang$core$Native_Platform.incomingPort(
	'receiveDeucePopupPanelInfo',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (height) {
			return _elm_lang$core$Json_Decode$succeed(
				{height: height});
		},
		A2(_elm_lang$core$Json_Decode$field, 'height', _elm_lang$core$Json_Decode$int)));
var _user$project$DeucePopupPanelInfo$DeucePopupPanelInfo = function (a) {
	return {height: a};
};

var _user$project$ColorScheme$encodeToName = function (colorScheme) {
	var _p0 = colorScheme;
	if (_p0.ctor === 'Light') {
		return 'light';
	} else {
		return 'dark';
	}
};
var _user$project$ColorScheme$updateColorSchemeByName = _elm_lang$core$Native_Platform.outgoingPort(
	'updateColorSchemeByName',
	function (v) {
		return v;
	});
var _user$project$ColorScheme$updateColorScheme = function (_p1) {
	return _user$project$ColorScheme$updateColorSchemeByName(
		_user$project$ColorScheme$encodeToName(_p1));
};

var _user$project$SyntaxHighlight$externalSyntaxHighlightMessage = _elm_lang$core$Native_Platform.outgoingPort(
	'externalSyntaxHighlightMessage',
	function (v) {
		return {tag: v.tag, data: v.data};
	});
var _user$project$SyntaxHighlight$sendMessage = function (em) {
	var _p0 = em;
	return _user$project$SyntaxHighlight$externalSyntaxHighlightMessage(
		{
			tag: 'SetSyntax',
			data: _user$project$Syntax$encode(_p0._0)
		});
};
var _user$project$SyntaxHighlight$ExternalData = F2(
	function (a, b) {
		return {tag: a, data: b};
	});
var _user$project$SyntaxHighlight$SetSyntax = function (a) {
	return {ctor: 'SetSyntax', _0: a};
};

var _user$project$DeuceTools$isRenamer = function (_p0) {
	return A2(
		_elm_lang$core$String$startsWith,
		'Rename',
		function (_) {
			return _.name;
		}(_p0));
};
var _user$project$DeuceTools$isActive = function (deuceTool) {
	return !_elm_lang$core$Native_Utils.eq(deuceTool.func, _elm_lang$core$Maybe$Nothing);
};
var _user$project$DeuceTools$runTool = function (deuceTool) {
	var _p1 = deuceTool.func;
	if (_p1.ctor === 'Just') {
		return _elm_lang$core$Result$toMaybe(
			A2(
				_user$project$Utils$perhapsLogError,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Deuce Tool Crash \"',
					A2(_elm_lang$core$Basics_ops['++'], deuceTool.name, '\"')),
				_user$project$ImpureGoodies$crashToError(_p1._0)));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$DeuceTools$reselectDeuceTool = function (model) {
	var newSelectedDeuceTool = function () {
		var _p2 = model.selectedDeuceTool;
		if (_p2.ctor === 'Just') {
			return A2(
				_user$project$Utils$findFirst,
				function (_p3) {
					var _p4 = _p3;
					return _elm_lang$core$Native_Utils.eq(_p4._0.id, _p2._0._0.id);
				},
				_elm_lang$core$List$concat(model.deuceToolsAndResults));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}();
	return _elm_lang$core$Native_Utils.update(
		model,
		{selectedDeuceTool: newSelectedDeuceTool});
};
var _user$project$DeuceTools$alignExpressionsTool = F2(
	function (model, selections) {
		return {
			name: 'Align Expressions',
			func: function () {
				var _p5 = selections;
				if (((((((_p5.ctor === '_Tuple7') && (_p5._2.ctor === '::')) && (_p5._2._1.ctor === '::')) && (_p5._3.ctor === '[]')) && (_p5._4.ctor === '[]')) && (_p5._5.ctor === '[]')) && (_p5._6.ctor === '[]')) {
					var eids = {
						ctor: '::',
						_0: _p5._2._0,
						_1: {ctor: '::', _0: _p5._2._1._0, _1: _p5._2._1._1}
					};
					var exps = A2(
						_elm_lang$core$List$map,
						_user$project$LangTools$justFindExpByEId(model.inputExp),
						eids);
					var lineNums = A2(
						_elm_lang$core$List$map,
						function (_p6) {
							return function (_) {
								return _.line;
							}(
								function (_) {
									return _.start;
								}(_p6));
						},
						exps);
					return (!_elm_lang$core$Native_Utils.eq(
						lineNums,
						_user$project$Utils$dedup(lineNums))) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
						function (_p7) {
							var _p8 = _p7;
							var maxCol = A2(
								_user$project$Utils$fromJust_,
								'DeuceTools.alignExpressionsTool maxCol',
								_elm_lang$core$List$maximum(
									A2(
										_elm_lang$core$List$map,
										function (_p9) {
											return function (_) {
												return _.col;
											}(
												function (_) {
													return _.start;
												}(_p9));
										},
										exps)));
							return _elm_lang$core$List$singleton(
								A2(
									_user$project$InterfaceModel$synthesisResult,
									'Align Expressions',
									A2(
										_user$project$Lang$mapExp,
										function (e) {
											if (A2(_elm_lang$core$List$member, e.val.eid, eids)) {
												var wsDelta = maxCol - e.start.col;
												return A2(
													_user$project$Lang$pushRight,
													A2(_elm_lang$core$String$repeat, wsDelta, ' '),
													e);
											} else {
												return e;
											}
										},
										model.inputExp)));
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}(),
			reqs: {
				ctor: '::',
				_0: {
					description: 'Select two or more expressions',
					value: function () {
						var _p10 = selections;
						_v5_2:
						do {
							if (_p10.ctor === '_Tuple7') {
								if (_p10._2.ctor === '[]') {
									if ((((((_p10._0.ctor === '[]') && (_p10._1.ctor === '[]')) && (_p10._3.ctor === '[]')) && (_p10._4.ctor === '[]')) && (_p10._5.ctor === '[]')) && (_p10._6.ctor === '[]')) {
										return _user$project$InterfaceModel$Possible;
									} else {
										break _v5_2;
									}
								} else {
									if (((((_p10._2._1.ctor === '::') && (_p10._3.ctor === '[]')) && (_p10._4.ctor === '[]')) && (_p10._5.ctor === '[]')) && (_p10._6.ctor === '[]')) {
										return _user$project$InterfaceModel$Satisfied;
									} else {
										break _v5_2;
									}
								}
							} else {
								break _v5_2;
							}
						} while(false);
						return _user$project$InterfaceModel$Impossible;
					}()
				},
				_1: {ctor: '[]'}
			},
			id: 'alignExpressions'
		};
	});
var _user$project$DeuceTools$makeMultiLineTool = F2(
	function (model, selections) {
		return {
			name: 'Make Multi-line',
			func: function () {
				var _p11 = selections;
				if (((((((_p11.ctor === '_Tuple7') && (_p11._2.ctor === '::')) && (_p11._2._1.ctor === '[]')) && (_p11._3.ctor === '[]')) && (_p11._4.ctor === '[]')) && (_p11._5.ctor === '[]')) && (_p11._6.ctor === '[]')) {
					var _p22 = _p11._2._0;
					var exp = A2(_user$project$LangTools$justFindExpByEId, model.inputExp, _p22);
					var _p12 = exp.val.e__;
					_v7_2:
					do {
						switch (_p12.ctor) {
							case 'EList':
								if (_p12._3.ctor === 'Nothing') {
									var _p16 = _p12._1;
									return A2(
										_elm_lang$core$List$all,
										function (_p13) {
											return A2(
												_elm_lang$core$String$contains,
												'\n',
												_user$project$Lang$precedingWhitespace(_p13));
										},
										A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p16)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
										function (_p14) {
											var _p15 = _p14;
											var indentation = A2(_user$project$Lang$indentationAt, _p22, model.inputExp);
											return _elm_lang$core$List$singleton(
												A2(
													_user$project$InterfaceModel$synthesisResult,
													'Make Multi-line',
													A3(
														_user$project$Lang$replaceExpNodeE__ByEId,
														_p22,
														A5(
															_user$project$Lang$EList,
															_p12._0,
															A2(
																_user$project$Utils$zip,
																A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p16),
																A3(
																	_user$project$Lang$setExpListWhitespace,
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'\n',
																		A2(_elm_lang$core$Basics_ops['++'], indentation, '  ')),
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'\n',
																		A2(_elm_lang$core$Basics_ops['++'], indentation, '  ')),
																	A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p16))),
															_p12._2,
															_elm_lang$core$Maybe$Nothing,
															_user$project$Lang$ws(
																A2(_elm_lang$core$Basics_ops['++'], '\n', indentation))),
														model.inputExp)));
										});
								} else {
									break _v7_2;
								}
							case 'EApp':
								var _p21 = _p12._2;
								var _p20 = _p12._1;
								return A2(
									_elm_lang$core$List$all,
									function (_p17) {
										return A2(
											_elm_lang$core$String$contains,
											'\n',
											_user$project$Lang$precedingWhitespace(_p17));
									},
									_p21) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
									function (_p18) {
										var _p19 = _p18;
										var indentation = A2(_elm_lang$core$String$repeat, _p20.end.col, ' ');
										return _elm_lang$core$List$singleton(
											A2(
												_user$project$InterfaceModel$synthesisResult,
												'Make Multi-line',
												A3(
													_user$project$Lang$replaceExpNodeE__ByEId,
													_p22,
													A5(
														_user$project$Lang$EApp,
														_p12._0,
														_p20,
														A3(
															_user$project$Lang$setExpListWhitespace,
															' ',
															A2(_elm_lang$core$Basics_ops['++'], '\n', indentation),
															_p21),
														_p12._3,
														_user$project$Lang$space0),
													model.inputExp)));
									});
							default:
								break _v7_2;
						}
					} while(false);
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}(),
			reqs: {
				ctor: '::',
				_0: {
					description: 'Select one expression',
					value: function () {
						var _p23 = selections;
						_v10_2:
						do {
							if (_p23.ctor === '_Tuple7') {
								if (_p23._2.ctor === '[]') {
									if ((((((_p23._0.ctor === '[]') && (_p23._1.ctor === '[]')) && (_p23._3.ctor === '[]')) && (_p23._4.ctor === '[]')) && (_p23._5.ctor === '[]')) && (_p23._6.ctor === '[]')) {
										return _user$project$InterfaceModel$Possible;
									} else {
										break _v10_2;
									}
								} else {
									if (((((_p23._2._1.ctor === '[]') && (_p23._3.ctor === '[]')) && (_p23._4.ctor === '[]')) && (_p23._5.ctor === '[]')) && (_p23._6.ctor === '[]')) {
										return _user$project$InterfaceModel$FullySatisfied;
									} else {
										break _v10_2;
									}
								}
							} else {
								break _v10_2;
							}
						} while(false);
						return _user$project$InterfaceModel$Impossible;
					}()
				},
				_1: {ctor: '[]'}
			},
			id: 'makeMultiLine'
		};
	});
var _user$project$DeuceTools$makeSingleLineTool = F2(
	function (model, selections) {
		return {
			name: 'Make Single Line',
			func: function () {
				var maybeEIdToDeLineAndWhetherToPreservePrecedingWhitespace = function () {
					var _p24 = selections;
					_v11_2:
					do {
						if (_p24.ctor === '_Tuple7') {
							if (_p24._2.ctor === '::') {
								if (((((_p24._2._1.ctor === '[]') && (_p24._3.ctor === '[]')) && (_p24._4.ctor === '[]')) && (_p24._5.ctor === '[]')) && (_p24._6.ctor === '[]')) {
									return _elm_lang$core$Maybe$Just(
										{ctor: '_Tuple2', _0: _p24._2._0, _1: true});
								} else {
									break _v11_2;
								}
							} else {
								if (((((((_p24._0.ctor === '[]') && (_p24._1.ctor === '[]')) && (_p24._3.ctor === '[]')) && (_p24._4.ctor === '::')) && (_p24._4._1.ctor === '[]')) && (_p24._5.ctor === '[]')) && (_p24._6.ctor === '[]')) {
									return A2(
										_elm_lang$core$Maybe$map,
										function (letBoundExp) {
											return {ctor: '_Tuple2', _0: letBoundExp.val.eid, _1: false};
										},
										A2(
											_elm_lang$core$Maybe$andThen,
											_user$project$LangTools$expToMaybeLetBoundExp,
											A2(_user$project$Lang$findExpByEId, model.inputExp, _p24._4._0)));
								} else {
									break _v11_2;
								}
							}
						} else {
							break _v11_2;
						}
					} while(false);
					return _elm_lang$core$Maybe$Nothing;
				}();
				var _p25 = maybeEIdToDeLineAndWhetherToPreservePrecedingWhitespace;
				if (_p25.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _p32 = _p25._0._1;
					var _p31 = _p25._0._0;
					var perhapsLeftTrimmer = _p32 ? _elm_lang$core$String$trimLeft : _elm_lang$core$Basics$identity;
					return A2(
						_elm_lang$core$String$contains,
						'\n',
						perhapsLeftTrimmer(
							A2(
								_user$project$Syntax$unparser,
								model.syntax,
								A2(_user$project$LangTools$justFindExpByEId, model.inputExp, _p31)))) ? _elm_lang$core$Maybe$Just(
						function (_p26) {
							var _p27 = _p26;
							var deLine = function (ws) {
								return A2(_elm_lang$core$String$contains, '\n', ws.val) ? _user$project$Lang$space1 : ws;
							};
							var deLineP__ = function (p__) {
								var _p28 = p__;
								switch (_p28.ctor) {
									case 'PWildcard':
										return _user$project$Lang$PWildcard(
											deLine(_p28._0));
									case 'PVar':
										return A3(
											_user$project$Lang$PVar,
											deLine(_p28._0),
											_p28._1,
											_p28._2);
									case 'PConst':
										return A2(
											_user$project$Lang$PConst,
											deLine(_p28._0),
											_p28._1);
									case 'PBase':
										return A2(
											_user$project$Lang$PBase,
											deLine(_p28._0),
											_p28._1);
									case 'PList':
										return A5(
											_user$project$Lang$PList,
											deLine(_p28._0),
											A3(_user$project$Lang$setPatListWhitespace, '', ' ', _p28._1),
											deLine(_p28._2),
											_p28._3,
											_user$project$Lang$space0);
									case 'PAs':
										return A4(
											_user$project$Lang$PAs,
											deLine(_p28._0),
											_p28._1,
											_user$project$Lang$space1,
											_p28._3);
									default:
										return A3(
											_user$project$Lang$PParens,
											deLine(_p28._0),
											_p28._1,
											_p28._2);
								}
							};
							var deLinePat = function (p) {
								return A2(
									_user$project$Lang$mapPatTopDown,
									_user$project$Lang$mapNodeP__(deLineP__),
									p);
							};
							var deLineE__ = function (e__) {
								var _p29 = e__;
								switch (_p29.ctor) {
									case 'EBase':
										return A2(
											_user$project$Lang$EBase,
											deLine(_p29._0),
											_p29._1);
									case 'EConst':
										return A4(
											_user$project$Lang$EConst,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											_p29._3);
									case 'EVar':
										return A2(
											_user$project$Lang$EVar,
											deLine(_p29._0),
											_p29._1);
									case 'EFun':
										return A4(
											_user$project$Lang$EFun,
											deLine(_p29._0),
											A3(
												_user$project$Lang$setPatListWhitespace,
												'',
												' ',
												A2(_elm_lang$core$List$map, deLinePat, _p29._1)),
											_p29._2,
											_user$project$Lang$space0);
									case 'EApp':
										return A5(
											_user$project$Lang$EApp,
											deLine(_p29._0),
											A2(_user$project$Lang$replacePrecedingWhitespace, '', _p29._1),
											_p29._2,
											_p29._3,
											_user$project$Lang$space0);
									case 'EList':
										var _p30 = _p29._1;
										return A5(
											_user$project$Lang$EList,
											deLine(_p29._0),
											A2(
												_user$project$Utils$zip,
												A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p30),
												A3(
													_user$project$Lang$setExpListWhitespace,
													'',
													' ',
													A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p30))),
											deLine(_p29._2),
											_p29._3,
											_user$project$Lang$space0);
									case 'EOp':
										return A4(
											_user$project$Lang$EOp,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											_user$project$Lang$space0);
									case 'EIf':
										return A7(
											_user$project$Lang$EIf,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											_p29._3,
											_p29._4,
											_p29._5,
											_user$project$Lang$space0);
									case 'ELet':
										return A9(
											_user$project$Lang$ELet,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											_p29._3,
											_p29._4,
											_p29._5,
											_p29._6,
											_p29._7,
											_user$project$Lang$space0);
									case 'ECase':
										return A4(
											_user$project$Lang$ECase,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											_user$project$Lang$space0);
									case 'ETypeCase':
										return A4(
											_user$project$Lang$ETypeCase,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											_user$project$Lang$space0);
									case 'EComment':
										return A3(_user$project$Lang$EComment, _p29._0, _p29._1, _p29._2);
									case 'EOption':
										return A5(_user$project$Lang$EOption, _p29._0, _p29._1, _user$project$Lang$space1, _p29._3, _p29._4);
									case 'ETyp':
										return A5(
											_user$project$Lang$ETyp,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											_p29._3,
											_user$project$Lang$space0);
									case 'EColonType':
										return A5(
											_user$project$Lang$EColonType,
											deLine(_p29._0),
											_p29._1,
											deLine(_p29._2),
											_p29._3,
											_user$project$Lang$space0);
									case 'ETypeAlias':
										return A5(
											_user$project$Lang$ETypeAlias,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											_p29._3,
											_user$project$Lang$space0);
									case 'EParens':
										return A4(
											_user$project$Lang$EParens,
											deLine(_p29._0),
											_p29._1,
											_p29._2,
											deLine(_p29._3));
									default:
										return A2(
											_user$project$Lang$EHole,
											deLine(_p29._0),
											_p29._1);
								}
							};
							var deLineExp = function (e) {
								return A2(
									_user$project$Lang$mapExp,
									_user$project$Lang$mapNodeE__(deLineE__),
									e);
							};
							return _elm_lang$core$List$singleton(
								A2(
									_user$project$InterfaceModel$synthesisResult,
									'Make Single Line',
									A3(
										_user$project$Lang$mapExpNode,
										_p31,
										function (e) {
											return (_p32 ? _user$project$Lang$copyPrecedingWhitespace(e) : _user$project$Lang$replacePrecedingWhitespace(' '))(
												deLineExp(e));
										},
										model.inputExp)));
						}) : _elm_lang$core$Maybe$Nothing;
				}
			}(),
			reqs: {
				ctor: '::',
				_0: {
					description: 'Select one expression or definition',
					value: function () {
						var _p33 = selections;
						_v16_3:
						do {
							if (_p33.ctor === '_Tuple7') {
								if (_p33._2.ctor === '::') {
									if (((((_p33._2._1.ctor === '[]') && (_p33._3.ctor === '[]')) && (_p33._4.ctor === '[]')) && (_p33._5.ctor === '[]')) && (_p33._6.ctor === '[]')) {
										return _user$project$InterfaceModel$FullySatisfied;
									} else {
										break _v16_3;
									}
								} else {
									if (((_p33._0.ctor === '[]') && (_p33._1.ctor === '[]')) && (_p33._3.ctor === '[]')) {
										if (_p33._4.ctor === '[]') {
											if ((_p33._5.ctor === '[]') && (_p33._6.ctor === '[]')) {
												return _user$project$InterfaceModel$Possible;
											} else {
												break _v16_3;
											}
										} else {
											if (((_p33._4._1.ctor === '[]') && (_p33._5.ctor === '[]')) && (_p33._6.ctor === '[]')) {
												return _user$project$InterfaceModel$FullySatisfied;
											} else {
												break _v16_3;
											}
										}
									} else {
										break _v16_3;
									}
								}
							} else {
								break _v16_3;
							}
						} while(false);
						return _user$project$InterfaceModel$Impossible;
					}()
				},
				_1: {ctor: '[]'}
			},
			id: 'makeSingleLine'
		};
	});
var _user$project$DeuceTools$reorderExpressionsTool = F2(
	function (model, selections) {
		return {
			name: 'Reorder Expressions',
			func: A2(_user$project$CodeMotion$reorderExpressionsTransformation, model.inputExp, selections),
			reqs: {ctor: '[]'},
			id: 'reorderExpressions'
		};
	});
var _user$project$DeuceTools$reorderArgumentsTool = F2(
	function (model, selections) {
		var _p34 = function () {
			var _p35 = selections;
			_v17_5:
			do {
				if ((_p35.ctor === '_Tuple7') && (_p35._4.ctor === '[]')) {
					if (_p35._5.ctor === '[]') {
						if (_p35._6.ctor === '[]') {
							if (_p35._2.ctor === '[]') {
								if (_p35._3.ctor === '[]') {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
								} else {
									var scopeEIds = A2(_elm_lang$core$List$map, _user$project$Lang$pathedPatIdToScopeEId, _p35._3);
									return (_user$project$Utils$allSame(scopeEIds) && A2(
										_elm_lang$core$List$all,
										function (_p36) {
											return A2(
												F2(
													function (x, y) {
														return _elm_lang$core$Native_Utils.eq(x, y);
													}),
												_elm_lang$core$Maybe$Just(true),
												A2(
													_elm_lang$core$Maybe$map,
													_user$project$Lang$isFunc,
													A2(_user$project$Lang$findExpByEId, model.inputExp, _p36)));
										},
										scopeEIds)) ? {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible} : {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
								}
							} else {
								if (_p35._3.ctor === '[]') {
									var _p37 = _user$project$Utils$projJusts(
										A2(
											_elm_lang$core$List$map,
											_user$project$LangTools$eidToMaybeCorrespondingArgumentPathedPatId(model.inputExp),
											_p35._2));
									if (_p37.ctor === 'Just') {
										return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
									} else {
										return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
									}
								} else {
									break _v17_5;
								}
							}
						} else {
							if ((((_p35._0.ctor === '[]') && (_p35._1.ctor === '[]')) && (_p35._2.ctor === '[]')) && (_p35._6._1.ctor === '[]')) {
								var _p42 = _p35._3;
								var targetPathedPatId = _user$project$Lang$patTargetPositionToTargetPathedPatId(_p35._6._0);
								var scopeIds = A2(
									_elm_lang$core$List$map,
									_user$project$Lang$pathedPatIdToScopeId,
									{ctor: '::', _0: targetPathedPatId, _1: _p42});
								var targetScopeEId = _user$project$Lang$pathedPatIdToScopeEId(targetPathedPatId);
								var _p39 = {
									ctor: '_Tuple2',
									_0: _user$project$Utils$allSame(scopeIds),
									_1: A2(
										_elm_lang$core$Maybe$map,
										function (_p38) {
											return function (_) {
												return _.e__;
											}(
												function (_) {
													return _.val;
												}(_p38));
										},
										A2(_user$project$Lang$findExpByEId, model.inputExp, targetScopeEId))
								};
								if ((((_p39.ctor === '_Tuple2') && (_p39._0 === true)) && (_p39._1.ctor === 'Just')) && (_p39._1._0.ctor === 'EFun')) {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(
											function (_p40) {
												var _p41 = _p40;
												return A4(
													_user$project$CodeMotion$reorderFunctionArgs,
													targetScopeEId,
													A2(_elm_lang$core$List$map, _user$project$Lang$pathedPatIdToPath, _p42),
													_user$project$Lang$pathedPatIdToPath(targetPathedPatId),
													model.inputExp);
											}),
										_1: _user$project$InterfaceModel$Satisfied
									};
								} else {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
								}
							} else {
								break _v17_5;
							}
						}
					} else {
						if ((((_p35._3.ctor === '[]') && (_p35._5._0.ctor === '_Tuple2')) && (_p35._5._1.ctor === '[]')) && (_p35._6.ctor === '[]')) {
							var _p43 = _user$project$Utils$projJusts(
								A2(
									_elm_lang$core$List$map,
									_user$project$LangTools$eidToMaybeCorrespondingArgumentPathedPatId(model.inputExp),
									{ctor: '::', _0: _p35._5._0._1, _1: _p35._2}));
							if ((_p43.ctor === 'Just') && (_p43._0.ctor === '::')) {
								var _p48 = _p43._0._1;
								var targetPathedPatId = _user$project$Lang$patTargetPositionToTargetPathedPatId(
									{ctor: '_Tuple2', _0: _p35._5._0._0, _1: _p43._0._0});
								var scopeIds = A2(
									_elm_lang$core$List$map,
									_user$project$Lang$pathedPatIdToScopeId,
									{ctor: '::', _0: targetPathedPatId, _1: _p48});
								var targetEId = _user$project$Lang$pathedPatIdToScopeEId(targetPathedPatId);
								var _p45 = {
									ctor: '_Tuple2',
									_0: _user$project$Utils$allSame(scopeIds),
									_1: A2(
										_elm_lang$core$Maybe$map,
										function (_p44) {
											return function (_) {
												return _.e__;
											}(
												function (_) {
													return _.val;
												}(_p44));
										},
										A2(_user$project$Lang$findExpByEId, model.inputExp, targetEId))
								};
								if ((((_p45.ctor === '_Tuple2') && (_p45._0 === true)) && (_p45._1.ctor === 'Just')) && (_p45._1._0.ctor === 'EFun')) {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(
											function (_p46) {
												var _p47 = _p46;
												return A4(
													_user$project$CodeMotion$reorderFunctionArgs,
													targetEId,
													A2(_elm_lang$core$List$map, _user$project$Lang$pathedPatIdToPath, _p48),
													_user$project$Lang$pathedPatIdToPath(targetPathedPatId),
													model.inputExp);
											}),
										_1: _user$project$InterfaceModel$Satisfied
									};
								} else {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
								}
							} else {
								return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
							}
						} else {
							break _v17_5;
						}
					}
				} else {
					break _v17_5;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p34._0;
		var possibility = _p34._1;
		var makeReqs = function (predVal) {
			return {
				ctor: '::',
				_0: {description: 'Select one or more function arguments (either at the definition\n               or a call-site) and one target position (i.e. whitespace) in that list', value: predVal},
				_1: {ctor: '[]'}
			};
		};
		return {
			name: 'Reorder Arguments',
			func: func,
			reqs: makeReqs(possibility),
			id: 'reorderArguments'
		};
	});
var _user$project$DeuceTools$removeArgumentsTool = F2(
	function (model, selections) {
		var makeReqs = function (predVal) {
			return {
				ctor: '::',
				_0: {description: 'Select function arguments at definitions or call-sites', value: predVal},
				_1: {ctor: '[]'}
			};
		};
		var id = 'removeArguments';
		var toolName = 'Remove Argument';
		var defaultTool = function (predVal) {
			return {
				name: toolName,
				func: _elm_lang$core$Maybe$Nothing,
				reqs: makeReqs(predVal),
				id: id
			};
		};
		var disabledTool = defaultTool(_user$project$InterfaceModel$Impossible);
		var _p49 = selections;
		_v24_4:
		do {
			if (_p49.ctor === '_Tuple7') {
				if (_p49._2.ctor === '[]') {
					if (_p49._3.ctor === '[]') {
						if (((((_p49._4.ctor === '[]') && (_p49._5.ctor === '[]')) && (_p49._6.ctor === '[]')) && (_p49._0.ctor === '[]')) && (_p49._1.ctor === '[]')) {
							return defaultTool(_user$project$InterfaceModel$Possible);
						} else {
							return disabledTool;
						}
					} else {
						if (((((_p49._0.ctor === '[]') && (_p49._1.ctor === '[]')) && (_p49._4.ctor === '[]')) && (_p49._5.ctor === '[]')) && (_p49._6.ctor === '[]')) {
							var _p56 = _p49._3;
							var isAllArgumentSelected = A2(
								_elm_lang$core$List$all,
								function (pathedPatId) {
									var scopeExp = A2(
										_user$project$Lang$findExpByEId,
										model.inputExp,
										_user$project$Lang$pathedPatIdToScopeEId(pathedPatId));
									var _p51 = A2(
										_elm_lang$core$Maybe$map,
										function (_p50) {
											return function (_) {
												return _.e__;
											}(
												function (_) {
													return _.val;
												}(_p50));
										},
										scopeExp);
									if ((_p51.ctor === 'Just') && (_p51._0.ctor === 'EFun')) {
										return true;
									} else {
										return false;
									}
								},
								_p56);
							return (isAllArgumentSelected && _elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(_p56),
								1)) ? {
								name: 'Remove Argument',
								func: _elm_lang$core$Maybe$Just(
									function (_p52) {
										var _p53 = _p52;
										return A3(
											_user$project$CodeMotion$removeArg,
											model.syntax,
											_user$project$Utils$head_(_p56),
											model.inputExp);
									}),
								reqs: makeReqs(_user$project$InterfaceModel$Satisfied),
								id: id
							} : (isAllArgumentSelected ? {
								name: 'Remove Arguments',
								func: _elm_lang$core$Maybe$Just(
									function (_p54) {
										var _p55 = _p54;
										return A3(_user$project$CodeMotion$removeArgs, model.syntax, _p56, model.inputExp);
									}),
								reqs: makeReqs(_user$project$InterfaceModel$Satisfied),
								id: id
							} : disabledTool);
						} else {
							break _v24_4;
						}
					}
				} else {
					if ((((_p49._3.ctor === '[]') && (_p49._4.ctor === '[]')) && (_p49._5.ctor === '[]')) && (_p49._6.ctor === '[]')) {
						var _p57 = _user$project$Utils$projJusts(
							A2(
								_elm_lang$core$List$map,
								_user$project$LangTools$eidToMaybeCorrespondingArgumentPathedPatId(model.inputExp),
								_p49._2));
						if (_p57.ctor === 'Just') {
							if ((_p57._0.ctor === '::') && (_p57._0._1.ctor === '[]')) {
								return {
									name: 'Remove Argument',
									func: _elm_lang$core$Maybe$Just(
										function (_p58) {
											var _p59 = _p58;
											return A3(_user$project$CodeMotion$removeArg, model.syntax, _p57._0._0, model.inputExp);
										}),
									reqs: makeReqs(_user$project$InterfaceModel$Satisfied),
									id: id
								};
							} else {
								return {
									name: 'Remove Arguments',
									func: _elm_lang$core$Maybe$Just(
										function (_p60) {
											var _p61 = _p60;
											return A3(_user$project$CodeMotion$removeArgs, model.syntax, _p57._0, model.inputExp);
										}),
									reqs: makeReqs(_user$project$InterfaceModel$Satisfied),
									id: id
								};
							}
						} else {
							return disabledTool;
						}
					} else {
						break _v24_4;
					}
				}
			} else {
				break _v24_4;
			}
		} while(false);
		return disabledTool;
	});
var _user$project$DeuceTools$addArgumentsTool = F2(
	function (model, selections) {
		var makeReqs = function (predVal) {
			return {
				ctor: '::',
				_0: {description: 'Select one or more expressions in a function and, optionally,\n               one target position (i.e. whitespace) in the function\'s argument list', value: predVal},
				_1: {ctor: '[]'}
			};
		};
		var id = 'addArguments';
		var toolName = 'Add Argument';
		var defaultTool = function (predVal) {
			return {
				name: toolName,
				func: _elm_lang$core$Maybe$Nothing,
				reqs: makeReqs(predVal),
				id: id
			};
		};
		var disabledTool = defaultTool(_user$project$InterfaceModel$Impossible);
		var _p62 = selections;
		_v31_4:
		do {
			if (_p62.ctor === '_Tuple7') {
				if (_p62._2.ctor === '::') {
					if (((_p62._3.ctor === '[]') && (_p62._4.ctor === '[]')) && (_p62._5.ctor === '[]')) {
						var eids = {ctor: '::', _0: _p62._2._0, _1: _p62._2._1};
						var enclosingFuncs = A2(
							_elm_lang$core$List$filter,
							_user$project$Lang$isFunc,
							A2(
								_user$project$Lang$commonAncestors,
								function (e) {
									return A2(_elm_lang$core$List$member, e.val.eid, eids);
								},
								model.inputExp));
						var targetPPIdsWithValidity = A2(
							_elm_lang$core$List$map,
							function (targetPPId) {
								return {
									ctor: '_Tuple2',
									_0: targetPPId,
									_1: A2(
										_elm_lang$core$List$any,
										_user$project$Lang$eidIs(
											_user$project$Lang$pathedPatIdToScopeEId(targetPPId)),
										enclosingFuncs)
								};
							},
							A2(_elm_lang$core$List$map, _user$project$Lang$patTargetPositionToTargetPathedPatId, _p62._6));
						var targetPPIdsToTry = function () {
							var funcExpToArgPPId = function (funcExp) {
								return {
									ctor: '_Tuple2',
									_0: {ctor: '_Tuple2', _0: funcExp.val.eid, _1: 1},
									_1: {
										ctor: '::',
										_0: 1 + _elm_lang$core$List$length(
											_user$project$LangTools$expToFuncPats(funcExp)),
										_1: {ctor: '[]'}
									}
								};
							};
							var _p63 = targetPPIdsWithValidity;
							if (_p63.ctor === '[]') {
								return A2(_elm_lang$core$List$map, funcExpToArgPPId, enclosingFuncs);
							} else {
								if (((_p63._0.ctor === '_Tuple2') && (_p63._0._1 === true)) && (_p63._1.ctor === '[]')) {
									return {
										ctor: '::',
										_0: _p63._0._0,
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}
						}();
						var _p64 = {ctor: '_Tuple2', _0: eids, _1: targetPPIdsToTry};
						_v33_2:
						do {
							if ((_p64.ctor === '_Tuple2') && (_p64._0.ctor === '::')) {
								if (_p64._0._1.ctor === '[]') {
									if (_p64._1.ctor === '::') {
										return {
											name: 'Add Argument',
											func: _elm_lang$core$Maybe$Just(
												function (_p65) {
													var _p66 = _p65;
													return A2(
														_elm_lang$core$List$concatMap,
														function (targetPPId) {
															return A4(_user$project$CodeMotion$addArg, model.syntax, _p64._0._0, targetPPId, model.inputExp);
														},
														targetPPIdsToTry);
												}),
											reqs: makeReqs(_user$project$InterfaceModel$Satisfied),
											id: id
										};
									} else {
										break _v33_2;
									}
								} else {
									if (_p64._1.ctor === '::') {
										return {
											name: 'Add Arguments',
											func: _elm_lang$core$Maybe$Just(
												function (_p67) {
													var _p68 = _p67;
													return A2(
														_elm_lang$core$List$concatMap,
														function (targetPPId) {
															return A4(_user$project$CodeMotion$addArgs, model.syntax, eids, targetPPId, model.inputExp);
														},
														targetPPIdsToTry);
												}),
											reqs: makeReqs(_user$project$InterfaceModel$Satisfied),
											id: id
										};
									} else {
										break _v33_2;
									}
								}
							} else {
								break _v33_2;
							}
						} while(false);
						return disabledTool;
					} else {
						break _v31_4;
					}
				} else {
					if (_p62._3.ctor === '[]') {
						if ((_p62._4.ctor === '[]') && (_p62._5.ctor === '[]')) {
							if (_p62._6.ctor === '[]') {
								return defaultTool(_user$project$InterfaceModel$Possible);
							} else {
								if (_p62._6._1.ctor === '[]') {
									return defaultTool(_user$project$InterfaceModel$Possible);
								} else {
									break _v31_4;
								}
							}
						} else {
							break _v31_4;
						}
					} else {
						if ((_p62._4.ctor === '[]') && (_p62._5.ctor === '[]')) {
							var argSourcePathedPatIds = {ctor: '::', _0: _p62._3._0, _1: _p62._3._1};
							var argSourceScopeEIds = A2(_elm_lang$core$List$map, _user$project$Lang$pathedPatIdToScopeEId, argSourcePathedPatIds);
							var areSourcesAllLets = A2(
								_elm_lang$core$List$all,
								function (_p69) {
									return A2(
										F2(
											function (x, y) {
												return _elm_lang$core$Native_Utils.eq(x, y);
											}),
										_elm_lang$core$Maybe$Just(true),
										A2(
											_elm_lang$core$Maybe$map,
											_user$project$Lang$isLet,
											A2(_user$project$Lang$findExpByEId, model.inputExp, _p69)));
								},
								argSourceScopeEIds);
							var enclosingFuncs = A2(
								_elm_lang$core$List$filter,
								_user$project$Lang$isFunc,
								A2(
									_user$project$Lang$commonAncestors,
									function (e) {
										return A2(_elm_lang$core$List$member, e.val.eid, argSourceScopeEIds);
									},
									model.inputExp));
							var targetPPIdsWithValidity = A2(
								_elm_lang$core$List$map,
								function (targetPPId) {
									return {
										ctor: '_Tuple2',
										_0: targetPPId,
										_1: A2(
											_elm_lang$core$List$any,
											_user$project$Lang$eidIs(
												_user$project$Lang$pathedPatIdToScopeEId(targetPPId)),
											enclosingFuncs)
									};
								},
								A2(_elm_lang$core$List$map, _user$project$Lang$patTargetPositionToTargetPathedPatId, _p62._6));
							var targetPPIdsToTry = function () {
								var funcExpToArgPPId = function (funcExp) {
									return {
										ctor: '_Tuple2',
										_0: {ctor: '_Tuple2', _0: funcExp.val.eid, _1: 1},
										_1: {
											ctor: '::',
											_0: 1 + _elm_lang$core$List$length(
												_user$project$LangTools$expToFuncPats(funcExp)),
											_1: {ctor: '[]'}
										}
									};
								};
								var _p70 = targetPPIdsWithValidity;
								if (_p70.ctor === '[]') {
									return A2(_elm_lang$core$List$map, funcExpToArgPPId, enclosingFuncs);
								} else {
									if (((_p70._0.ctor === '_Tuple2') && (_p70._0._1 === true)) && (_p70._1.ctor === '[]')) {
										return {
											ctor: '::',
											_0: _p70._0._0,
											_1: {ctor: '[]'}
										};
									} else {
										return {ctor: '[]'};
									}
								}
							}();
							var _p71 = {ctor: '_Tuple3', _0: argSourcePathedPatIds, _1: targetPPIdsToTry, _2: areSourcesAllLets};
							_v37_2:
							do {
								if ((_p71.ctor === '_Tuple3') && (_p71._0.ctor === '::')) {
									if (_p71._0._1.ctor === '[]') {
										if ((_p71._1.ctor === '::') && (_p71._2 === true)) {
											return {
												name: 'Add Argument',
												func: _elm_lang$core$Maybe$Just(
													function (_p72) {
														var _p73 = _p72;
														return A2(
															_elm_lang$core$List$concatMap,
															function (targetPPId) {
																return A4(_user$project$CodeMotion$addArgFromPat, model.syntax, _p71._0._0, targetPPId, model.inputExp);
															},
															targetPPIdsToTry);
													}),
												reqs: makeReqs(_user$project$InterfaceModel$Satisfied),
												id: id
											};
										} else {
											break _v37_2;
										}
									} else {
										if ((_p71._1.ctor === '::') && (_p71._2 === true)) {
											return {
												name: 'Add Arguments',
												func: _elm_lang$core$Maybe$Just(
													function (_p74) {
														var _p75 = _p74;
														return A2(
															_elm_lang$core$List$concatMap,
															function (targetPPId) {
																return A4(_user$project$CodeMotion$addArgsFromPats, model.syntax, argSourcePathedPatIds, targetPPId, model.inputExp);
															},
															targetPPIdsToTry);
													}),
												reqs: makeReqs(_user$project$InterfaceModel$Satisfied),
												id: id
											};
										} else {
											break _v37_2;
										}
									}
								} else {
									break _v37_2;
								}
							} while(false);
							return disabledTool;
						} else {
							break _v31_4;
						}
					}
				}
			} else {
				break _v31_4;
			}
		} while(false);
		return disabledTool;
	});
var _user$project$DeuceTools$mergeTool = F2(
	function (model, selections) {
		var tryMerge = function (eids) {
			var mergeResults = function () {
				var minCloneCount = _elm_lang$core$List$length(eids);
				var candidateExpFilter = function (e) {
					return A2(_elm_lang$core$List$member, e.val.eid, eids);
				};
				return A4(_user$project$ExpressionBasedTransform$cloneEliminationSythesisResults, candidateExpFilter, minCloneCount, 2, model.inputExp);
			}();
			return (!_elm_lang$core$Native_Utils.eq(
				mergeResults,
				{ctor: '[]'})) ? {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Just(
					function (_p76) {
						var _p77 = _p76;
						return mergeResults;
					}),
				_1: _user$project$InterfaceModel$Satisfied
			} : {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		};
		var _p78 = function () {
			var _p79 = selections;
			_v41_5:
			do {
				if (_p79.ctor === '_Tuple7') {
					if (_p79._2.ctor === '[]') {
						if (_p79._3.ctor === '[]') {
							if (_p79._4.ctor === '[]') {
								if ((((_p79._0.ctor === '[]') && (_p79._1.ctor === '[]')) && (_p79._5.ctor === '[]')) && (_p79._6.ctor === '[]')) {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
								} else {
									break _v41_5;
								}
							} else {
								if (_p79._4._1.ctor === '[]') {
									if ((((_p79._0.ctor === '[]') && (_p79._1.ctor === '[]')) && (_p79._5.ctor === '[]')) && (_p79._6.ctor === '[]')) {
										return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
									} else {
										break _v41_5;
									}
								} else {
									if ((_p79._5.ctor === '[]') && (_p79._6.ctor === '[]')) {
										var boundExpEIds = A2(
											_elm_lang$core$List$map,
											function (_p80) {
												return function (_) {
													return _.eid;
												}(
													function (_) {
														return _.val;
													}(
														_user$project$LangTools$expToLetBoundExp(
															A2(_user$project$LangTools$justFindExpByEId, model.inputExp, _p80))));
											},
											{
												ctor: '::',
												_0: _p79._4._0,
												_1: {ctor: '::', _0: _p79._4._1._0, _1: _p79._4._1._1}
											});
										return tryMerge(boundExpEIds);
									} else {
										break _v41_5;
									}
								}
							}
						} else {
							break _v41_5;
						}
					} else {
						if (_p79._2._1.ctor === '[]') {
							if ((((((_p79._0.ctor === '[]') && (_p79._1.ctor === '[]')) && (_p79._3.ctor === '[]')) && (_p79._4.ctor === '[]')) && (_p79._5.ctor === '[]')) && (_p79._6.ctor === '[]')) {
								return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
							} else {
								break _v41_5;
							}
						} else {
							if ((((_p79._3.ctor === '[]') && (_p79._4.ctor === '[]')) && (_p79._5.ctor === '[]')) && (_p79._6.ctor === '[]')) {
								return tryMerge(
									{
										ctor: '::',
										_0: _p79._2._0,
										_1: {ctor: '::', _0: _p79._2._1._0, _1: _p79._2._1._1}
									});
							} else {
								break _v41_5;
							}
						}
					}
				} else {
					break _v41_5;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p78._0;
		var predVal = _p78._1;
		return {
			name: 'Create Function by Merging Definitions',
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select two or more expressions', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'merge'
		};
	});
var _user$project$DeuceTools$createFunctionFromArgsTool = F2(
	function (model, selections) {
		var _p81 = function () {
			var _p82 = selections;
			if ((((_p82.ctor === '_Tuple7') && (_p82._4.ctor === '[]')) && (_p82._5.ctor === '[]')) && (_p82._6.ctor === '[]')) {
				if ((((_p82._0.ctor === '[]') && (_p82._1.ctor === '[]')) && (_p82._2.ctor === '[]')) && (_p82._3.ctor === '[]')) {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
				} else {
					var _p83 = _user$project$Utils$projJusts(
						A2(
							_elm_lang$core$List$map,
							function (ppid) {
								return A2(_user$project$LangTools$findBoundExpByPathedPatternId, ppid, model.inputExp);
							},
							_p82._3));
					if (_p83.ctor === 'Just') {
						var argEIds = _user$project$Utils$dedup(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p82._2,
								A2(
									_elm_lang$core$List$map,
									function (_p84) {
										return function (_) {
											return _.eid;
										}(
											function (_) {
												return _.val;
											}(_p84));
									},
									_p83._0)));
						var enclosingPPIds = function () {
							var ancestors = A2(
								_user$project$Lang$commonAncestors,
								function (e) {
									return A2(_elm_lang$core$List$member, e.val.eid, argEIds);
								},
								model.inputExp);
							var ancestorEIds = A2(
								_elm_lang$core$List$map,
								function (_p85) {
									return function (_) {
										return _.eid;
									}(
										function (_) {
											return _.val;
										}(_p85));
								},
								ancestors);
							return A2(
								_elm_lang$core$List$concatMap,
								function (letExp) {
									return A2(
										_elm_lang$core$List$map,
										function (_p86) {
											var _p87 = _p86;
											return {
												ctor: '_Tuple2',
												_0: {ctor: '_Tuple2', _0: letExp.val.eid, _1: 1},
												_1: _p87._0
											};
										},
										A2(
											_elm_lang$core$List$filter,
											function (_p88) {
												var _p89 = _p88;
												return A2(_elm_lang$core$List$member, _p89._1.val.eid, ancestorEIds);
											},
											A2(
												_elm_lang$core$List$filter,
												function (_p90) {
													var _p91 = _p90;
													return !_user$project$Lang$isFunc(_p91._1);
												},
												A2(
													_user$project$LangTools$tryMatchExpPatToPaths,
													_user$project$LangTools$expToLetPat(letExp),
													_user$project$LangTools$expToLetBoundExp(letExp)))));
								},
								A2(
									_elm_lang$core$List$filter,
									function (_p92) {
										return A2(
											F2(
												function (x, y) {
													return !_elm_lang$core$Native_Utils.eq(x, y);
												}),
											_elm_lang$core$Maybe$Just('main'),
											_user$project$LangTools$patToMaybePVarIdent(
												_user$project$LangTools$expToLetPat(_p92)));
									},
									A2(_elm_lang$core$List$filter, _user$project$Lang$isLet, ancestors)));
						}();
						var _p93 = enclosingPPIds;
						if (_p93.ctor === '[]') {
							return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(
									function (_p94) {
										var _p95 = _p94;
										return A2(
											_elm_lang$core$List$concatMap,
											function (ppid) {
												return A4(_user$project$CodeMotion$abstractPVar, model.syntax, ppid, argEIds, model.inputExp);
											},
											enclosingPPIds);
									}),
								_1: _user$project$InterfaceModel$Satisfied
							};
						}
					} else {
						return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
					}
				}
			} else {
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
			}
		}();
		var func = _p81._0;
		var predVal = _p81._1;
		return {
			name: 'Create Function from Arguments',
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select expressions or patterns to become arguments to a new function.', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'createFunctionFromArguments'
		};
	});
var _user$project$DeuceTools$createFunctionTool = F2(
	function (model, selections) {
		var _p96 = function () {
			var _p97 = selections;
			_v49_4:
			do {
				if (_p97.ctor === '_Tuple7') {
					if (_p97._2.ctor === '::') {
						if (((((_p97._2._1.ctor === '[]') && (_p97._3.ctor === '[]')) && (_p97._4.ctor === '[]')) && (_p97._5.ctor === '[]')) && (_p97._6.ctor === '[]')) {
							var _p106 = _p97._2._0;
							var maybeExpToAbstract = A2(_user$project$Lang$findExpByEId, model.inputExp, _p106);
							var expToAbstractParts = A2(
								_elm_lang$core$Maybe$withDefault,
								{ctor: '[]'},
								A2(_elm_lang$core$Maybe$map, _user$project$Lang$flattenExpTree, maybeExpToAbstract));
							var parameterCount = A2(
								_user$project$Utils$count,
								function (e) {
									return A2(_user$project$CodeMotion$shouldBeParameterIsConstant, e, model.inputExp);
								},
								expToAbstractParts) + A2(
								_user$project$Utils$count,
								function (e) {
									return A2(_user$project$CodeMotion$shouldBeParameterIsNamedUnfrozenConstant, e, model.inputExp);
								},
								expToAbstractParts);
							var expSize = A2(
								_elm_lang$core$Maybe$withDefault,
								0,
								A2(_elm_lang$core$Maybe$map, _user$project$LangTools$nodeCount, maybeExpToAbstract));
							return ((_elm_lang$core$Native_Utils.cmp(parameterCount, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(expSize, 3) > -1)) ? {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(
									function (_p104) {
										var _p105 = _p104;
										return A3(_user$project$CodeMotion$abstractExp, model.syntax, _p106, model.inputExp);
									}),
								_1: _user$project$InterfaceModel$FullySatisfied
							} : {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
						} else {
							break _v49_4;
						}
					} else {
						if ((_p97._0.ctor === '[]') && (_p97._1.ctor === '[]')) {
							if (_p97._3.ctor === '::') {
								if ((((_p97._3._1.ctor === '[]') && (_p97._4.ctor === '[]')) && (_p97._5.ctor === '[]')) && (_p97._6.ctor === '[]')) {
									var _p103 = _p97._3._0;
									var _p100 = A2(
										_elm_lang$core$Maybe$map,
										function (_p98) {
											var _p99 = _p98;
											return {ctor: '_Tuple2', _0: _p99._0.val.e__, _1: _p99._1.val.p__};
										},
										A2(_user$project$LangTools$findScopeExpAndPatByPathedPatternId, _p103, model.inputExp));
									if ((((_p100.ctor === 'Just') && (_p100._0.ctor === '_Tuple2')) && (_p100._0._0.ctor === 'ELet')) && (_p100._0._1.ctor === 'PVar')) {
										return {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Maybe$Just(
												function (_p101) {
													var _p102 = _p101;
													return A4(
														_user$project$CodeMotion$abstractPVar,
														model.syntax,
														_p103,
														{ctor: '[]'},
														model.inputExp);
												}),
											_1: _user$project$InterfaceModel$FullySatisfied
										};
									} else {
										return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
									}
								} else {
									break _v49_4;
								}
							} else {
								if (_p97._4.ctor === '[]') {
									if ((_p97._5.ctor === '[]') && (_p97._6.ctor === '[]')) {
										return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
									} else {
										break _v49_4;
									}
								} else {
									if (((_p97._4._1.ctor === '[]') && (_p97._5.ctor === '[]')) && (_p97._6.ctor === '[]')) {
										var _p111 = _p97._4._0;
										var _p108 = A2(
											_elm_lang$core$Maybe$map,
											function (_p107) {
												return function (_) {
													return _.p__;
												}(
													function (_) {
														return _.val;
													}(_p107));
											},
											_user$project$LangTools$expToMaybeLetPat(
												A2(_user$project$LangTools$justFindExpByEId, model.inputExp, _p111)));
										if ((_p108.ctor === 'Just') && (_p108._0.ctor === 'PVar')) {
											return {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Maybe$Just(
													function (_p109) {
														var _p110 = _p109;
														var pathedPatId = {
															ctor: '_Tuple2',
															_0: {ctor: '_Tuple2', _0: _p111, _1: 1},
															_1: {ctor: '[]'}
														};
														return A4(
															_user$project$CodeMotion$abstractPVar,
															model.syntax,
															pathedPatId,
															{ctor: '[]'},
															model.inputExp);
													}),
												_1: _user$project$InterfaceModel$FullySatisfied
											};
										} else {
											return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
										}
									} else {
										break _v49_4;
									}
								}
							}
						} else {
							break _v49_4;
						}
					}
				} else {
					break _v49_4;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p96._0;
		var predVal = _p96._1;
		return {
			name: 'Create Function from Definition',
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one variable definition or expression', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'createFunction'
		};
	});
var _user$project$DeuceTools$convertColorStringTool = F2(
	function (model, selections) {
		var baseName = 'Convert Color String';
		var impossible = {ctor: '_Tuple3', _0: baseName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
		var _p112 = function () {
			var _p113 = selections;
			if ((((((_p113.ctor === '_Tuple7') && (_p113._0.ctor === '[]')) && (_p113._3.ctor === '[]')) && (_p113._4.ctor === '[]')) && (_p113._5.ctor === '[]')) && (_p113._6.ctor === '[]')) {
				if ((_p113._1.ctor === '[]') && (_p113._2.ctor === '[]')) {
					return {ctor: '_Tuple3', _0: baseName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
				} else {
					var _p124 = _p113._1;
					var literalCount = _elm_lang$core$List$length(_p124);
					var expCount = _elm_lang$core$List$length(_p113._2);
					if (!_elm_lang$core$Native_Utils.eq(expCount, literalCount)) {
						return impossible;
					} else {
						var idStringPairs = A2(
							_elm_lang$core$List$filterMap,
							function (_p114) {
								var _p115 = _p114;
								var _p116 = _p115._1._1;
								if (_p116.ctor === 'EString') {
									return _elm_lang$core$Maybe$Just(
										{ctor: '_Tuple2', _0: _p115._0, _1: _p116._1});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							},
							_p124);
						var idStringPairCount = _elm_lang$core$List$length(idStringPairs);
						if (!_elm_lang$core$Native_Utils.eq(literalCount, idStringPairCount)) {
							return impossible;
						} else {
							var convertedStrings = A2(_elm_lang$core$List$filterMap, _user$project$ColorNum$convertStringToRgbAndHue, idStringPairs);
							var convertedStringCount = _elm_lang$core$List$length(convertedStrings);
							if (!_elm_lang$core$Native_Utils.eq(idStringPairCount, convertedStringCount)) {
								return impossible;
							} else {
								var _p117 = A3(
									_elm_lang$core$List$foldl,
									F2(
										function (_p119, _p118) {
											var _p120 = _p119;
											var _p121 = _p118;
											var eColorNum = A2(_user$project$Lang$eConst, _p120._2, _user$project$Lang$dummyLoc);
											var eRgba = A2(
												_user$project$Lang$eList,
												_user$project$Lang$listOfNums(
													{
														ctor: '::',
														_0: _p120._1._0,
														_1: {
															ctor: '::',
															_0: _p120._1._1,
															_1: {
																ctor: '::',
																_0: _p120._1._2,
																_1: {
																	ctor: '::',
																	_0: 1.0,
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_elm_lang$core$Maybe$Nothing);
											var replaceString = _user$project$Lang$replaceExpNodePreservingPrecedingWhitespace(_p120._0);
											return {
												ctor: '_Tuple2',
												_0: A2(replaceString, eRgba, _p121._0),
												_1: A2(replaceString, eColorNum, _p121._1)
											};
										}),
									{ctor: '_Tuple2', _0: model.inputExp, _1: model.inputExp},
									convertedStrings);
								var newExp1 = _p117._0;
								var newExp2 = _p117._1;
								return {
									ctor: '_Tuple3',
									_0: A2(_user$project$Utils$perhapsPluralizeList, baseName, _p124),
									_1: _elm_lang$core$Maybe$Just(
										function (_p122) {
											var _p123 = _p122;
											return {
												ctor: '::',
												_0: A2(_user$project$InterfaceModel$synthesisResult, 'RGBA', newExp1),
												_1: {
													ctor: '::',
													_0: A2(
														_user$project$InterfaceModel$setResultSafe,
														false,
														A2(_user$project$InterfaceModel$synthesisResult, 'Color Number (Hue Only)', newExp2)),
													_1: {ctor: '[]'}
												}
											};
										}),
									_2: _user$project$InterfaceModel$Satisfied
								};
							}
						}
					}
				}
			} else {
				return impossible;
			}
		}();
		var name = _p112._0;
		var func = _p112._1;
		var predVal = _p112._2;
		return {
			name: name,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one or more color strings', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'convertColorString'
		};
	});
var _user$project$DeuceTools$rewriteOffsetTool = F2(
	function (model, selections) {
		var toolName = 'Rewrite as Offset';
		var _p125 = function () {
			var _p126 = selections;
			_v62_3:
			do {
				if (_p126.ctor === '_Tuple7') {
					if (_p126._0.ctor === '[]') {
						if ((((((_p126._1.ctor === '[]') && (_p126._3.ctor === '[]')) && (_p126._2.ctor === '[]')) && (_p126._4.ctor === '[]')) && (_p126._5.ctor === '[]')) && (_p126._6.ctor === '[]')) {
							return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
						} else {
							return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
						}
					} else {
						if ((((((_p126._1.ctor === '[]') && (_p126._3.ctor === '::')) && (_p126._3._1.ctor === '[]')) && (_p126._4.ctor === '[]')) && (_p126._5.ctor === '[]')) && (_p126._6.ctor === '[]')) {
							var _p129 = _p126._3._0;
							var _p128 = _p126._0;
							var _p127 = A2(
								_user$project$Lang$findExpByEId,
								model.inputExp,
								_user$project$Lang$pathedPatIdToScopeEId(_p129));
							if (_p127.ctor === 'Just') {
								return (_user$project$Lang$isLet(_p127._0) && _elm_lang$core$Native_Utils.eq(
									_elm_lang$core$List$length(_p128),
									_elm_lang$core$List$length(_p126._2))) ? {
									ctor: '_Tuple3',
									_0: A2(_user$project$Utils$perhapsPluralizeList, toolName, _p128),
									_1: A3(_user$project$CodeMotion$rewriteOffsetTransformation, model, _p129, _p128),
									_2: _user$project$InterfaceModel$Satisfied
								} : {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
							} else {
								return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
							}
						} else {
							break _v62_3;
						}
					}
				} else {
					break _v62_3;
				}
			} while(false);
			return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
		}();
		var name = _p125._0;
		var func = _p125._1;
		var predVal = _p125._2;
		return {
			name: name,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one variable and one or more numbers', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'rewriteOffset'
		};
	});
var _user$project$DeuceTools$rangeAround = function (n) {
	var i = n - (3 * n);
	var j = n + (3 * n);
	return {ctor: '_Tuple2', _0: i, _1: j};
};
var _user$project$DeuceTools$duplicateDefinitionTool = F2(
	function (model, selections) {
		var eidIsLet = function (eid) {
			return _elm_lang$core$Native_Utils.eq(
				A2(
					_elm_lang$core$Maybe$map,
					_user$project$Lang$isLet,
					A2(_user$project$Lang$findExpByEId, model.inputExp, eid)),
				_elm_lang$core$Maybe$Just(true));
		};
		var toolName = 'Duplicate Definition';
		var _p130 = function () {
			var _p131 = selections;
			_v64_4:
			do {
				_v64_1:
				do {
					if (_p131.ctor === '_Tuple7') {
						if ((((_p131._0.ctor === '[]') && (_p131._1.ctor === '[]')) && (_p131._2.ctor === '[]')) && (_p131._4.ctor === '[]')) {
							if (_p131._5.ctor === '::') {
								if (_p131._3.ctor === '[]') {
									break _v64_1;
								} else {
									if ((((_p131._5._0.ctor === '_Tuple2') && (_p131._5._0._0.ctor === 'Before')) && (_p131._5._1.ctor === '[]')) && (_p131._6.ctor === '[]')) {
										var _p135 = _p131._3;
										var allAreLets = A2(
											_elm_lang$core$List$all,
											function (_p132) {
												return eidIsLet(
													_user$project$Lang$pathedPatIdToScopeEId(_p132));
											},
											_p135);
										return allAreLets ? {
											ctor: '_Tuple3',
											_0: A2(_user$project$Utils$perhapsPluralizeList, toolName, _p135),
											_1: _elm_lang$core$Maybe$Just(
												function (_p133) {
													var _p134 = _p133;
													return A4(_user$project$CodeMotion$duplicateDefinitionsBeforeEId, model.syntax, _p135, _p131._5._0._1, model.inputExp);
												}),
											_2: _user$project$InterfaceModel$Satisfied
										} : {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
									} else {
										break _v64_4;
									}
								}
							} else {
								if (_p131._3.ctor === '[]') {
									if (_p131._6.ctor === '[]') {
										return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
									} else {
										break _v64_1;
									}
								} else {
									if ((_p131._6.ctor === '::') && (_p131._6._1.ctor === '[]')) {
										var _p139 = _p131._3;
										var targetPathedPatId = _user$project$Lang$patTargetPositionToTargetPathedPatId(_p131._6._0);
										var allAreLets = A2(
											_elm_lang$core$List$all,
											function (_p136) {
												return eidIsLet(
													_user$project$Lang$pathedPatIdToScopeEId(_p136));
											},
											_p139) && eidIsLet(
											_user$project$Lang$pathedPatIdToScopeEId(targetPathedPatId));
										return allAreLets ? {
											ctor: '_Tuple3',
											_0: A2(_user$project$Utils$perhapsPluralizeList, toolName, _p139),
											_1: _elm_lang$core$Maybe$Just(
												function (_p137) {
													var _p138 = _p137;
													return A4(_user$project$CodeMotion$duplicateDefinitionsPat, model.syntax, _p139, targetPathedPatId, model.inputExp);
												}),
											_2: _user$project$InterfaceModel$Satisfied
										} : {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
									} else {
										break _v64_4;
									}
								}
							}
						} else {
							if (_p131._3.ctor === '[]') {
								break _v64_1;
							} else {
								break _v64_4;
							}
						}
					} else {
						break _v64_4;
					}
				} while(false);
				return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
			} while(false);
			return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
		}();
		var name = _p130._0;
		var func = _p130._1;
		var predVal = _p130._2;
		return {
			name: toolName,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one or more patterns and one target position (i.e. whitespace)', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'duplicateDefinition'
		};
	});
var _user$project$DeuceTools$moveDefinitionTool = F2(
	function (model, selections) {
		var toolName = 'Move Definition';
		var _p140 = function () {
			var _p141 = selections;
			_v67_9:
			do {
				if ((((_p141.ctor === '_Tuple7') && (_p141._0.ctor === '[]')) && (_p141._1.ctor === '[]')) && (_p141._2.ctor === '[]')) {
					if (_p141._3.ctor === '::') {
						if (_p141._4.ctor === '[]') {
							if (_p141._5.ctor === '::') {
								if ((((_p141._5._0.ctor === '_Tuple2') && (_p141._5._0._0.ctor === 'Before')) && (_p141._5._1.ctor === '[]')) && (_p141._6.ctor === '[]')) {
									var pathedPatIds = {ctor: '::', _0: _p141._3._0, _1: _p141._3._1};
									return {
										ctor: '_Tuple3',
										_0: A2(_user$project$Utils$perhapsPluralizeList, toolName, pathedPatIds),
										_1: _elm_lang$core$Maybe$Just(
											function (_p142) {
												var _p143 = _p142;
												return A4(_user$project$CodeMotion$moveDefinitionsBeforeEId, model.syntax, pathedPatIds, _p141._5._0._1, model.inputExp);
											}),
										_2: _user$project$InterfaceModel$Satisfied
									};
								} else {
									break _v67_9;
								}
							} else {
								if (_p141._6.ctor === '[]') {
									return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
								} else {
									if (_p141._6._1.ctor === '[]') {
										var pathedPatIds = {ctor: '::', _0: _p141._3._0, _1: _p141._3._1};
										var targetPathedPatId = _user$project$Lang$patTargetPositionToTargetPathedPatId(_p141._6._0);
										var _p145 = A2(
											_elm_lang$core$Maybe$map,
											function (_p144) {
												return function (_) {
													return _.e__;
												}(
													function (_) {
														return _.val;
													}(_p144));
											},
											A2(
												_user$project$Lang$findExpByEId,
												model.inputExp,
												_user$project$Lang$pathedPatIdToScopeEId(targetPathedPatId)));
										if ((_p145.ctor === 'Just') && (_p145._0.ctor === 'ELet')) {
											return {
												ctor: '_Tuple3',
												_0: A2(_user$project$Utils$perhapsPluralizeList, toolName, pathedPatIds),
												_1: _elm_lang$core$Maybe$Just(
													function (_p146) {
														var _p147 = _p146;
														return A4(_user$project$CodeMotion$moveDefinitionsPat, model.syntax, pathedPatIds, targetPathedPatId, model.inputExp);
													}),
												_2: _user$project$InterfaceModel$Satisfied
											};
										} else {
											return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
										}
									} else {
										break _v67_9;
									}
								}
							}
						} else {
							break _v67_9;
						}
					} else {
						if (_p141._5.ctor === '[]') {
							if (_p141._4.ctor === '::') {
								if (_p141._6.ctor === '[]') {
									return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
								} else {
									break _v67_9;
								}
							} else {
								if (_p141._6.ctor === '[]') {
									return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
								} else {
									if (_p141._6._1.ctor === '[]') {
										return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
									} else {
										break _v67_9;
									}
								}
							}
						} else {
							if ((_p141._5._1.ctor === '[]') && (_p141._6.ctor === '[]')) {
								if (_p141._4.ctor === '[]') {
									return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
								} else {
									if ((_p141._5._0.ctor === '_Tuple2') && (_p141._5._0._0.ctor === 'Before')) {
										if (_p141._4._1.ctor === '[]') {
											return {
												ctor: '_Tuple3',
												_0: toolName,
												_1: _elm_lang$core$Maybe$Just(
													function (_p148) {
														var _p149 = _p148;
														return A4(
															_user$project$CodeMotion$moveDefinitionsBeforeEId,
															model.syntax,
															{
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: {ctor: '_Tuple2', _0: _p141._4._0, _1: 1},
																	_1: {ctor: '[]'}
																},
																_1: {ctor: '[]'}
															},
															_p141._5._0._1,
															model.inputExp);
													}),
												_2: _user$project$InterfaceModel$Satisfied
											};
										} else {
											var _p152 = _p141._4;
											return {
												ctor: '_Tuple3',
												_0: A2(_user$project$Utils$perhapsPluralizeList, toolName, _p152),
												_1: _elm_lang$core$Maybe$Just(
													function (_p150) {
														var _p151 = _p150;
														return A4(_user$project$CodeMotion$moveEquationsBeforeEId, model.syntax, _p152, _p141._5._0._1, model.inputExp);
													}),
												_2: _user$project$InterfaceModel$Satisfied
											};
										}
									} else {
										break _v67_9;
									}
								}
							} else {
								break _v67_9;
							}
						}
					}
				} else {
					break _v67_9;
				}
			} while(false);
			return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
		}();
		var name = _p140._0;
		var func = _p140._1;
		var predVal = _p140._2;
		return {
			name: toolName,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one or more variable definitions and one target position (i.e. whitespace)', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'moveDefinition'
		};
	});
var _user$project$DeuceTools$copyExpressionTool = F2(
	function (model, selections) {
		var _p153 = function () {
			var _p154 = selections;
			_v73_5:
			do {
				if (_p154.ctor === '_Tuple7') {
					if (_p154._3.ctor === '::') {
						return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
					} else {
						if (_p154._4.ctor === '::') {
							return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
						} else {
							if ((_p154._5.ctor === '[]') && (_p154._6.ctor === '[]')) {
								if (_p154._2.ctor === '[]') {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
								} else {
									if (_p154._2._1.ctor === '[]') {
										return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
									} else {
										return {
											ctor: '_Tuple2',
											_0: A3(_user$project$CodeMotion$copyExpressionTransformation, model.syntax, model.inputExp, _p154._2),
											_1: _user$project$InterfaceModel$Satisfied
										};
									}
								}
							} else {
								break _v73_5;
							}
						}
					}
				} else {
					break _v73_5;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p153._0;
		var predVal = _p153._1;
		return {
			name: 'Make Equal by Copying',
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select two or more expressions.', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'copyExpression'
		};
	});
var _user$project$DeuceTools$introduceVariableTool = F2(
	function (model, selections) {
		var toolName = 'Introduce Local Variable';
		var _p155 = function () {
			var _p156 = selections;
			_v74_5:
			do {
				_v74_1:
				do {
					if (_p156.ctor === '_Tuple7') {
						if ((_p156._3.ctor === '[]') && (_p156._4.ctor === '[]')) {
							if (_p156._5.ctor === '[]') {
								if (_p156._6.ctor === '[]') {
									if (_p156._2.ctor === '[]') {
										if ((_p156._0.ctor === '[]') && (_p156._1.ctor === '[]')) {
											return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
										} else {
											break _v74_1;
										}
									} else {
										var _p157 = _p156._2;
										return {
											ctor: '_Tuple3',
											_0: A2(_user$project$Utils$perhapsPluralizeList, 'Introduce Variable', _p157),
											_1: A3(_user$project$CodeMotion$introduceVarTransformation, model, _p157, _elm_lang$core$Maybe$Nothing),
											_2: _user$project$InterfaceModel$Satisfied
										};
									}
								} else {
									if (_p156._2.ctor === '[]') {
										break _v74_1;
									} else {
										if (_p156._6._1.ctor === '[]') {
											var _p158 = _p156._2;
											return {
												ctor: '_Tuple3',
												_0: A2(_user$project$Utils$perhapsPluralizeList, 'Introduce Variable', _p158),
												_1: A3(
													_user$project$CodeMotion$introduceVarTransformation,
													model,
													_p158,
													_elm_lang$core$Maybe$Just(
														_user$project$Lang$PatTargetPosition(_p156._6._0))),
												_2: _user$project$InterfaceModel$Satisfied
											};
										} else {
											break _v74_5;
										}
									}
								}
							} else {
								if (_p156._2.ctor === '[]') {
									break _v74_1;
								} else {
									if ((_p156._5._1.ctor === '[]') && (_p156._6.ctor === '[]')) {
										var _p159 = _p156._2;
										return {
											ctor: '_Tuple3',
											_0: A2(_user$project$Utils$perhapsPluralizeList, 'Introduce Variable', _p159),
											_1: A3(
												_user$project$CodeMotion$introduceVarTransformation,
												model,
												_p159,
												_elm_lang$core$Maybe$Just(
													_user$project$Lang$ExpTargetPosition(_p156._5._0))),
											_2: _user$project$InterfaceModel$Satisfied
										};
									} else {
										break _v74_5;
									}
								}
							}
						} else {
							if (_p156._2.ctor === '[]') {
								break _v74_1;
							} else {
								break _v74_5;
							}
						}
					} else {
						break _v74_5;
					}
				} while(false);
				return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
			} while(false);
			return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
		}();
		var name = _p155._0;
		var func = _p155._1;
		var predVal = _p155._2;
		return {
			name: name,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one or more expressions and, optionally, one target position (i.e. whitespace)', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'introduceVariable'
		};
	});
var _user$project$DeuceTools$inlineDefinitionTool = F2(
	function (model, selections) {
		var toolName = 'Inline Definition';
		var _p160 = function () {
			var _p161 = selections;
			_v75_4:
			do {
				_v75_1:
				do {
					if (_p161.ctor === '_Tuple7') {
						if (((_p161._0.ctor === '[]') && (_p161._1.ctor === '[]')) && (_p161._2.ctor === '[]')) {
							if (_p161._3.ctor === '[]') {
								if (_p161._4.ctor === '[]') {
									if ((_p161._5.ctor === '[]') && (_p161._6.ctor === '[]')) {
										return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
									} else {
										break _v75_1;
									}
								} else {
									if ((_p161._5.ctor === '[]') && (_p161._6.ctor === '[]')) {
										var _p167 = _p161._4;
										return {
											ctor: '_Tuple3',
											_0: A2(_user$project$Utils$perhapsPluralizeList, toolName, _p167),
											_1: _elm_lang$core$Maybe$Just(
												function (_p165) {
													var _p166 = _p165;
													return A3(
														_user$project$CodeMotion$inlineDefinitions,
														model.syntax,
														A2(
															_elm_lang$core$List$map,
															function (letEId) {
																return {
																	ctor: '_Tuple2',
																	_0: {ctor: '_Tuple2', _0: letEId, _1: 1},
																	_1: {ctor: '[]'}
																};
															},
															_p167),
														model.inputExp);
												}),
											_2: _user$project$InterfaceModel$Satisfied
										};
									} else {
										break _v75_4;
									}
								}
							} else {
								if (((_p161._4.ctor === '[]') && (_p161._5.ctor === '[]')) && (_p161._6.ctor === '[]')) {
									var _p164 = _p161._3;
									return {
										ctor: '_Tuple3',
										_0: A2(_user$project$Utils$perhapsPluralizeList, toolName, _p164),
										_1: _elm_lang$core$Maybe$Just(
											function (_p162) {
												var _p163 = _p162;
												return A3(_user$project$CodeMotion$inlineDefinitions, model.syntax, _p164, model.inputExp);
											}),
										_2: _user$project$InterfaceModel$Satisfied
									};
								} else {
									break _v75_4;
								}
							}
						} else {
							if ((_p161._3.ctor === '[]') && (_p161._4.ctor === '[]')) {
								break _v75_1;
							} else {
								break _v75_4;
							}
						}
					} else {
						break _v75_4;
					}
				} while(false);
				return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
			} while(false);
			return {ctor: '_Tuple3', _0: toolName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
		}();
		var name = _p160._0;
		var func = _p160._1;
		var predVal = _p160._2;
		return {
			name: name,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one or more variable definitions', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'inlineDefinition'
		};
	});
var _user$project$DeuceTools$swapDefinitionsTool = F2(
	function (model, selections) {
		var ppidIsInLet = function (ppid) {
			var _p168 = A2(_user$project$LangTools$findScopeExpAndPatByPathedPatternId, ppid, model.inputExp);
			if (_p168.ctor === 'Just') {
				return _user$project$Lang$isLet(_p168._0._0);
			} else {
				return false;
			}
		};
		var letEIdToTopPId = function (letEId) {
			return function (_) {
				return _.pid;
			}(
				function (_) {
					return _.val;
				}(
					_user$project$LangTools$expToLetPat(
						A2(_user$project$LangTools$justFindExpByEId, model.inputExp, letEId))));
		};
		var _p169 = function () {
			var _p170 = selections;
			_v79_5:
			do {
				if ((_p170.ctor === '_Tuple7') && (_p170._2.ctor === '[]')) {
					if (_p170._3.ctor === '::') {
						if (_p170._3._1.ctor === '[]') {
							if (((_p170._4.ctor === '[]') && (_p170._5.ctor === '[]')) && (_p170._6.ctor === '[]')) {
								return ppidIsInLet(_p170._3._0) ? {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible} : {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
							} else {
								break _v79_5;
							}
						} else {
							if ((((_p170._3._1._1.ctor === '[]') && (_p170._4.ctor === '[]')) && (_p170._5.ctor === '[]')) && (_p170._6.ctor === '[]')) {
								return {
									ctor: '_Tuple2',
									_0: A4(
										_user$project$CodeMotion$swapDefinitionsTransformation,
										model.syntax,
										model.inputExp,
										A2(
											_user$project$Utils$fromJust_,
											'CodeMotion.swapDefinitionsTool',
											A2(_user$project$LangTools$pathedPatternIdToPId, _p170._3._0, model.inputExp)),
										A2(
											_user$project$Utils$fromJust_,
											'CodeMotion.swapDefinitionsTool',
											A2(_user$project$LangTools$pathedPatternIdToPId, _p170._3._1._0, model.inputExp))),
									_1: _user$project$InterfaceModel$Satisfied
								};
							} else {
								break _v79_5;
							}
						}
					} else {
						if (_p170._4.ctor === '[]') {
							if ((_p170._5.ctor === '[]') && (_p170._6.ctor === '[]')) {
								return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
							} else {
								break _v79_5;
							}
						} else {
							if (_p170._4._1.ctor === '[]') {
								if ((_p170._5.ctor === '[]') && (_p170._6.ctor === '[]')) {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
								} else {
									break _v79_5;
								}
							} else {
								if (((_p170._4._1._1.ctor === '[]') && (_p170._5.ctor === '[]')) && (_p170._6.ctor === '[]')) {
									return {
										ctor: '_Tuple2',
										_0: A4(
											_user$project$CodeMotion$swapDefinitionsTransformation,
											model.syntax,
											model.inputExp,
											letEIdToTopPId(_p170._4._0),
											letEIdToTopPId(_p170._4._1._0)),
										_1: _user$project$InterfaceModel$Satisfied
									};
								} else {
									break _v79_5;
								}
							}
						}
					}
				} else {
					break _v79_5;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p169._0;
		var predVal = _p169._1;
		return {
			name: 'Swap Definitions',
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select two variable definitions.', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'swapDefinitions'
		};
	});
var _user$project$DeuceTools$swapExpressionsTool = F2(
	function (model, selections) {
		var _p171 = function () {
			var _p172 = selections;
			_v80_5:
			do {
				_v80_2:
				do {
					_v80_1:
					do {
						if (_p172.ctor === '_Tuple7') {
							if (_p172._2.ctor === '[]') {
								if (_p172._3.ctor === '[]') {
									if (_p172._4.ctor === '[]') {
										if ((_p172._5.ctor === '[]') && (_p172._6.ctor === '[]')) {
											return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
										} else {
											break _v80_5;
										}
									} else {
										break _v80_2;
									}
								} else {
									break _v80_1;
								}
							} else {
								if (_p172._3.ctor === '::') {
									break _v80_1;
								} else {
									if (_p172._4.ctor === '::') {
										break _v80_2;
									} else {
										if (_p172._2._1.ctor === '[]') {
											if ((_p172._5.ctor === '[]') && (_p172._6.ctor === '[]')) {
												return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
											} else {
												break _v80_5;
											}
										} else {
											if (((_p172._2._1._1.ctor === '[]') && (_p172._5.ctor === '[]')) && (_p172._6.ctor === '[]')) {
												return {
													ctor: '_Tuple2',
													_0: A4(_user$project$CodeMotion$swapExpressionsTransformation, model.syntax, model.inputExp, _p172._2._0, _p172._2._1._0),
													_1: _user$project$InterfaceModel$Satisfied
												};
											} else {
												break _v80_5;
											}
										}
									}
								}
							}
						} else {
							break _v80_5;
						}
					} while(false);
					return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
				} while(false);
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p171._0;
		var predVal = _p171._1;
		return {
			name: 'Swap Expressions',
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select two expressions.', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'swapExpressions'
		};
	});
var _user$project$DeuceTools$selectTwoVars = F5(
	function (toolName, toolId, makeThunk, model, selections) {
		var _p173 = function () {
			var _p174 = selections;
			_v81_3:
			do {
				if ((((_p174.ctor === '_Tuple7') && (_p174._0.ctor === '[]')) && (_p174._1.ctor === '[]')) && (_p174._2.ctor === '[]')) {
					if (_p174._3.ctor === '[]') {
						if (((_p174._4.ctor === '[]') && (_p174._5.ctor === '[]')) && (_p174._6.ctor === '[]')) {
							return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
						} else {
							break _v81_3;
						}
					} else {
						if (_p174._3._1.ctor === '[]') {
							if (((_p174._4.ctor === '[]') && (_p174._5.ctor === '[]')) && (_p174._6.ctor === '[]')) {
								return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
							} else {
								break _v81_3;
							}
						} else {
							if ((((_p174._3._1._1.ctor === '[]') && (_p174._4.ctor === '[]')) && (_p174._5.ctor === '[]')) && (_p174._6.ctor === '[]')) {
								var _p177 = _p174._3._1._0;
								var _p176 = _p174._3._0;
								var maybeNames = A2(
									_elm_lang$core$List$map,
									_elm_lang$core$Maybe$andThen(_user$project$LangTools$patToMaybeIdent),
									A2(
										_elm_lang$core$List$map,
										function (ppid) {
											return A2(_user$project$LangTools$findPatByPathedPatternId, ppid, model.inputExp);
										},
										{
											ctor: '::',
											_0: _p176,
											_1: {
												ctor: '::',
												_0: _p177,
												_1: {ctor: '[]'}
											}
										}));
								var _p175 = maybeNames;
								if (((((_p175.ctor === '::') && (_p175._0.ctor === 'Just')) && (_p175._1.ctor === '::')) && (_p175._1._0.ctor === 'Just')) && (_p175._1._1.ctor === '[]')) {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(
											A2(
												makeThunk,
												{ctor: '_Tuple2', _0: _p176, _1: _p175._0._0},
												{ctor: '_Tuple2', _0: _p177, _1: _p175._1._0._0})),
										_1: _user$project$InterfaceModel$FullySatisfied
									};
								} else {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
								}
							} else {
								break _v81_3;
							}
						}
					}
				} else {
					break _v81_3;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p173._0;
		var predVal = _p173._1;
		return {
			name: toolName,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select two variables', value: predVal},
				_1: {ctor: '[]'}
			},
			id: toolId
		};
	});
var _user$project$DeuceTools$swapUsagesTool = F2(
	function (model, selections) {
		var makeThunk = F3(
			function (_p180, _p179, _p178) {
				var _p181 = _p180;
				var _p182 = _p179;
				var _p183 = _p178;
				return A3(_user$project$CodeMotion$swapUsages, _p181._0, _p182._0, model.inputExp);
			});
		return A5(_user$project$DeuceTools$selectTwoVars, 'Swap Variable Usages', 'swapUsages', makeThunk, model, selections);
	});
var _user$project$DeuceTools$swapNamesAndUsagesTool = F2(
	function (model, selections) {
		var makeThunk = F3(
			function (_p186, _p185, _p184) {
				var _p187 = _p186;
				var _p192 = _p187._0;
				var _p191 = _p187._1;
				var _p188 = _p185;
				var _p190 = _p188._1;
				var _p189 = _p184;
				return A3(
					_user$project$CodeMotion$composeTransformations,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Swap names ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p191,
							A2(_elm_lang$core$Basics_ops['++'], ' and ', _p190))),
					{
						ctor: '::',
						_0: A2(_user$project$CodeMotion$renamePat, _p192, 'IMPROBABLE_TEMPORARY_NAME_FOR_SAFETY_CHECK!!!'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$CodeMotion$renamePat, _p188._0, _p191),
							_1: {
								ctor: '::',
								_0: A2(_user$project$CodeMotion$renamePat, _p192, _p190),
								_1: {ctor: '[]'}
							}
						}
					},
					model.inputExp);
			});
		return A5(_user$project$DeuceTools$selectTwoVars, 'Swap Variable Names and Usages', 'swapNamesAndUsages', makeThunk, model, selections);
	});
var _user$project$DeuceTools$renameVariableTool = F2(
	function (model, selections) {
		var nameMaker = function (s) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Rename \'',
				A2(_elm_lang$core$Basics_ops['++'], s, '\''));
		};
		var disabledName = 'Rename Variable';
		var _p193 = function () {
			var _p194 = selections;
			_v89_3:
			do {
				if (((_p194.ctor === '_Tuple7') && (_p194._0.ctor === '[]')) && (_p194._1.ctor === '[]')) {
					if (_p194._2.ctor === '::') {
						if (((((_p194._2._1.ctor === '[]') && (_p194._3.ctor === '[]')) && (_p194._4.ctor === '[]')) && (_p194._5.ctor === '[]')) && (_p194._6.ctor === '[]')) {
							var _p203 = _p194._2._0;
							var _p199 = A2(_user$project$Lang$findExpByEId, model.inputExp, _p203);
							if (_p199.ctor === 'Just') {
								var _p200 = _p199._0.val.e__;
								if (_p200.ctor === 'EVar') {
									var newName = model.deuceState.renameVarTextBox;
									return {
										ctor: '_Tuple3',
										_0: nameMaker(_p200._1),
										_1: _elm_lang$core$Maybe$Just(
											function (_p201) {
												var _p202 = _p201;
												return A3(_user$project$CodeMotion$renameVar, _p203, newName, model.inputExp);
											}),
										_2: _user$project$InterfaceModel$FullySatisfied
									};
								} else {
									return {ctor: '_Tuple3', _0: disabledName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
								}
							} else {
								return {ctor: '_Tuple3', _0: disabledName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
							}
						} else {
							break _v89_3;
						}
					} else {
						if (_p194._3.ctor === '::') {
							if ((((_p194._3._1.ctor === '[]') && (_p194._4.ctor === '[]')) && (_p194._5.ctor === '[]')) && (_p194._6.ctor === '[]')) {
								var _p198 = _p194._3._0;
								var _p195 = A2(
									_elm_lang$core$Maybe$andThen,
									_user$project$LangTools$patToMaybeIdent,
									A2(_user$project$LangTools$findPatByPathedPatternId, _p198, model.inputExp));
								if (_p195.ctor === 'Just') {
									var newName = model.deuceState.renameVarTextBox;
									return {
										ctor: '_Tuple3',
										_0: nameMaker(_p195._0),
										_1: _elm_lang$core$Maybe$Just(
											function (_p196) {
												var _p197 = _p196;
												return A3(_user$project$CodeMotion$renamePat, _p198, newName, model.inputExp);
											}),
										_2: _user$project$InterfaceModel$FullySatisfied
									};
								} else {
									return {ctor: '_Tuple3', _0: disabledName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
								}
							} else {
								break _v89_3;
							}
						} else {
							if (((_p194._4.ctor === '[]') && (_p194._5.ctor === '[]')) && (_p194._6.ctor === '[]')) {
								return {ctor: '_Tuple3', _0: disabledName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Possible};
							} else {
								break _v89_3;
							}
						}
					}
				} else {
					break _v89_3;
				}
			} while(false);
			return {ctor: '_Tuple3', _0: disabledName, _1: _elm_lang$core$Maybe$Nothing, _2: _user$project$InterfaceModel$Impossible};
		}();
		var name = _p193._0;
		var func = _p193._1;
		var predVal = _p193._2;
		return {
			name: name,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select a variable definition or use', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'renameVariable'
		};
	});
var _user$project$DeuceTools$flipBooleanTool = F2(
	function (model, selections) {
		var _p204 = function () {
			var _p205 = selections;
			_v95_2:
			do {
				if ((_p205.ctor === '_Tuple7') && (_p205._0.ctor === '[]')) {
					if (_p205._1.ctor === '::') {
						if (((((((_p205._1._1.ctor === '[]') && (_p205._2.ctor === '::')) && (_p205._2._1.ctor === '[]')) && (_p205._3.ctor === '[]')) && (_p205._4.ctor === '[]')) && (_p205._5.ctor === '[]')) && (_p205._6.ctor === '[]')) {
							var _p210 = _p205._2._0;
							var _p206 = A2(_user$project$Lang$findExpByEId, model.inputExp, _p210);
							if (_p206.ctor === 'Just') {
								var _p207 = _p206._0.val.e__;
								if ((_p207.ctor === 'EBase') && (_p207._1.ctor === 'EBool')) {
									var flipped = _user$project$Lang$withDummyExpInfo(
										A2(
											_user$project$Lang$EBase,
											_p207._0,
											_user$project$Lang$EBool(!_p207._1._0)));
									var newExp = A3(_user$project$Lang$replaceExpNode, _p210, flipped, model.inputExp);
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(
											function (_p208) {
												var _p209 = _p208;
												return _user$project$InterfaceModel$oneSafeResult(newExp);
											}),
										_1: _user$project$InterfaceModel$FullySatisfied
									};
								} else {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
								}
							} else {
								return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
							}
						} else {
							break _v95_2;
						}
					} else {
						if (((((_p205._2.ctor === '[]') && (_p205._3.ctor === '[]')) && (_p205._4.ctor === '[]')) && (_p205._5.ctor === '[]')) && (_p205._6.ctor === '[]')) {
							return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
						} else {
							break _v95_2;
						}
					}
				} else {
					break _v95_2;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p204._0;
		var boolPredVal = _p204._1;
		return {
			name: 'Flip Boolean',
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select a boolean value', value: boolPredVal},
				_1: {ctor: '[]'}
			},
			id: 'flipBoolean'
		};
	});
var _user$project$DeuceTools$makeEqualTool = F2(
	function (model, selections) {
		var _p211 = function () {
			var _p212 = selections;
			_v99_7:
			do {
				_v99_3:
				do {
					_v99_0:
					do {
						if (_p212.ctor === '_Tuple7') {
							if (_p212._3.ctor === '::') {
								return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
							} else {
								if (_p212._4.ctor === '::') {
									return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
								} else {
									if (_p212._5.ctor === '[]') {
										if (_p212._2.ctor === '[]') {
											break _v99_0;
										} else {
											if (_p212._6.ctor === '[]') {
												if (_p212._2._1.ctor === '[]') {
													break _v99_3;
												} else {
													return {
														ctor: '_Tuple2',
														_0: A3(_user$project$CodeMotion$makeEqualTransformation, model.inputExp, _p212._2, _elm_lang$core$Maybe$Nothing),
														_1: _user$project$InterfaceModel$Satisfied
													};
												}
											} else {
												if (_p212._2._1.ctor === '[]') {
													break _v99_3;
												} else {
													if (_p212._6._1.ctor === '[]') {
														return {
															ctor: '_Tuple2',
															_0: A3(
																_user$project$CodeMotion$makeEqualTransformation,
																model.inputExp,
																_p212._2,
																_elm_lang$core$Maybe$Just(
																	_user$project$Lang$PatTargetPosition(_p212._6._0))),
															_1: _user$project$InterfaceModel$Satisfied
														};
													} else {
														break _v99_7;
													}
												}
											}
										}
									} else {
										if (_p212._2.ctor === '[]') {
											break _v99_0;
										} else {
											if (_p212._2._1.ctor === '[]') {
												break _v99_3;
											} else {
												if ((_p212._5._1.ctor === '[]') && (_p212._6.ctor === '[]')) {
													return {
														ctor: '_Tuple2',
														_0: A3(
															_user$project$CodeMotion$makeEqualTransformation,
															model.inputExp,
															_p212._2,
															_elm_lang$core$Maybe$Just(
																_user$project$Lang$ExpTargetPosition(_p212._5._0))),
														_1: _user$project$InterfaceModel$Satisfied
													};
												} else {
													break _v99_7;
												}
											}
										}
									}
								}
							}
						} else {
							break _v99_7;
						}
					} while(false);
					return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
				} while(false);
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
		}();
		var func = _p211._0;
		var expsPredVal = _p211._1;
		return {
			name: 'Make Equal with Single Variable',
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select two or more expressions and, optionally, a target position (i.e. whitespace).', value: expsPredVal},
				_1: {ctor: '[]'}
			},
			id: 'makeEqual'
		};
	});
var _user$project$DeuceTools$oneOrMoreNumsOnly = function (selections) {
	var _p213 = selections;
	if ((((((_p213.ctor === '_Tuple7') && (_p213._1.ctor === '[]')) && (_p213._3.ctor === '[]')) && (_p213._4.ctor === '[]')) && (_p213._5.ctor === '[]')) && (_p213._6.ctor === '[]')) {
		var _p214 = _p213._0;
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(_p214),
			1) > -1) && _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(_p214),
			_elm_lang$core$List$length(_p213._2));
	} else {
		return false;
	}
};
var _user$project$DeuceTools$thawFreezeTool = F2(
	function (model, selections) {
		var _p215 = selections;
		var nums = _p215._0;
		var _p216 = function () {
			var freezeAnnotations = A2(
				_elm_lang$core$List$map,
				function (_p217) {
					var _p218 = _p217;
					return _p218._1._2._1;
				},
				nums);
			if (_elm_lang$core$Native_Utils.eq(
				selections,
				{
					ctor: '_Tuple7',
					_0: {ctor: '[]'},
					_1: {ctor: '[]'},
					_2: {ctor: '[]'},
					_3: {ctor: '[]'},
					_4: {ctor: '[]'},
					_5: {ctor: '[]'},
					_6: {ctor: '[]'}
				})) {
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Possible};
			} else {
				if (!_user$project$DeuceTools$oneOrMoreNumsOnly(selections)) {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _user$project$InterfaceModel$Impossible};
				} else {
					var mode_ = function () {
						var _p219 = _user$project$Utils$dedup(freezeAnnotations);
						if ((_p219.ctor === '::') && (_p219._1.ctor === '[]')) {
							var _p220 = _p219._0;
							return model.syncOptions.thawedByDefault ? (_elm_lang$core$Native_Utils.eq(_p220, _user$project$Lang$unann) ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: 'Freeze', _1: _user$project$Lang$frozen}) : (_elm_lang$core$Native_Utils.eq(_p220, _user$project$Lang$frozen) ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: 'Thaw', _1: _user$project$Lang$unann}) : (_elm_lang$core$Native_Utils.eq(_p220, _user$project$Lang$thawed) ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: 'Freeze', _1: _user$project$Lang$frozen}) : _elm_lang$core$Maybe$Nothing))) : (_elm_lang$core$Native_Utils.eq(_p220, _user$project$Lang$unann) ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: 'Thaw', _1: _user$project$Lang$thawed}) : (_elm_lang$core$Native_Utils.eq(_p220, _user$project$Lang$frozen) ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: 'Thaw', _1: _user$project$Lang$thawed}) : (_elm_lang$core$Native_Utils.eq(_p220, _user$project$Lang$thawed) ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: 'Freeze', _1: _user$project$Lang$unann}) : _elm_lang$core$Maybe$Nothing)));
						} else {
							return model.syncOptions.thawedByDefault ? _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: 'Freeze', _1: _user$project$Lang$frozen}) : _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: 'Thaw', _1: _user$project$Lang$thawed});
						}
					}();
					var _p221 = mode_;
					if (_p221.ctor === 'Just') {
						return {ctor: '_Tuple2', _0: mode_, _1: _user$project$InterfaceModel$Satisfied};
					} else {
						return {ctor: '_Tuple2', _0: mode_, _1: _user$project$InterfaceModel$Impossible};
					}
				}
			}
		}();
		var mode = _p216._0;
		var predVal = _p216._1;
		var _p222 = function () {
			var _p223 = mode;
			if (_p223.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: 'Thaw/Freeze', _1: _elm_lang$core$Maybe$Nothing};
			} else {
				var _p228 = _p223._0._0;
				return {
					ctor: '_Tuple2',
					_0: _p228,
					_1: _elm_lang$core$Maybe$Just(
						function (_p224) {
							var _p225 = _p224;
							var eSubst = A3(
								_elm_lang$core$List$foldl,
								F2(
									function (_p226, acc) {
										var _p227 = _p226;
										return A3(
											_elm_lang$core$Dict$insert,
											_p227._0,
											A4(
												_user$project$Lang$EConst,
												_p227._1._0,
												_p227._1._1,
												{ctor: '_Tuple3', _0: _p227._1._2._0, _1: _p223._0._1, _2: _p227._1._2._2},
												_p227._1._3),
											acc);
									}),
								_elm_lang$core$Dict$empty,
								nums);
							return {
								ctor: '::',
								_0: A2(
									_user$project$InterfaceModel$synthesisResult,
									_p228,
									A2(_user$project$Lang$applyESubst, eSubst, model.inputExp)),
								_1: {ctor: '[]'}
							};
						})
				};
			}
		}();
		var name = _p222._0;
		var func = _p222._1;
		return {
			name: name,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one or more numbers', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'thawFreeze'
		};
	});
var _user$project$DeuceTools$showHideRangeTool = F2(
	function (model, selections) {
		var _p229 = selections;
		var nums = _p229._0;
		var mode = function () {
			if (!_user$project$DeuceTools$oneOrMoreNumsOnly(selections)) {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var freezeAnnotations = A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$List$map,
					nums,
					function (_p230) {
						var _p231 = _p230;
						var _p232 = _p231._1._3.val;
						switch (_p232.ctor) {
							case 'IntSlider':
								return _elm_lang$core$Maybe$Just(_p232._4);
							case 'NumSlider':
								return _elm_lang$core$Maybe$Just(_p232._4);
							default:
								return _elm_lang$core$Maybe$Nothing;
						}
					});
				var _p233 = _user$project$Utils$dedup(freezeAnnotations);
				if (((_p233.ctor === '::') && (_p233._0.ctor === 'Just')) && (_p233._1.ctor === '[]')) {
					return _elm_lang$core$Maybe$Just(_p233._0._0);
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		}();
		var predVal = _elm_lang$core$Native_Utils.eq(
			selections,
			{
				ctor: '_Tuple7',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'},
				_2: {ctor: '[]'},
				_3: {ctor: '[]'},
				_4: {ctor: '[]'},
				_5: {ctor: '[]'},
				_6: {ctor: '[]'}
			}) ? _user$project$InterfaceModel$Possible : ((!_elm_lang$core$Native_Utils.eq(mode, _elm_lang$core$Maybe$Nothing)) ? _user$project$InterfaceModel$Satisfied : _user$project$InterfaceModel$Impossible);
		var _p234 = function () {
			var _p235 = mode;
			if (_p235.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: 'Show/Hide Sliders', _1: _elm_lang$core$Maybe$Nothing};
			} else {
				var _p243 = _p235._0;
				var toolName = function () {
					var _p236 = {
						ctor: '_Tuple2',
						_0: _p243,
						_1: _elm_lang$core$List$length(nums)
					};
					if (_p236._0 === true) {
						if (_p236._1 === 1) {
							return 'Show Slider';
						} else {
							return 'Show Sliders';
						}
					} else {
						if (_p236._1 === 1) {
							return 'Hide Slider';
						} else {
							return 'Hide Sliders';
						}
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: toolName,
					_1: _elm_lang$core$Maybe$Just(
						function (_p237) {
							var _p238 = _p237;
							var eSubst = A3(
								_elm_lang$core$List$foldl,
								F2(
									function (_p239, acc) {
										var _p240 = _p239;
										var _p242 = _p240._1._3;
										var wd_ = function () {
											var _p241 = _p242.val;
											switch (_p241.ctor) {
												case 'IntSlider':
													return A5(_user$project$Lang$IntSlider, _p241._0, _p241._1, _p241._2, _p241._3, !_p243);
												case 'NumSlider':
													return A5(_user$project$Lang$NumSlider, _p241._0, _p241._1, _p241._2, _p241._3, !_p243);
												default:
													return _p242.val;
											}
										}();
										return A3(
											_elm_lang$core$Dict$insert,
											_p240._0,
											A4(
												_user$project$Lang$EConst,
												_p240._1._0,
												_p240._1._1,
												_p240._1._2,
												_elm_lang$core$Native_Utils.update(
													_p242,
													{val: wd_})),
											acc);
									}),
								_elm_lang$core$Dict$empty,
								nums);
							return {
								ctor: '::',
								_0: A2(
									_user$project$InterfaceModel$synthesisResult,
									toolName,
									A2(_user$project$Lang$applyESubst, eSubst, model.inputExp)),
								_1: {ctor: '[]'}
							};
						})
				};
			}
		}();
		var name = _p234._0;
		var func = _p234._1;
		return {
			name: name,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one or more numbers with sliders', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'showHideRange'
		};
	});
var _user$project$DeuceTools$addRemoveRangeTool = F2(
	function (model, selections) {
		var predVal = _elm_lang$core$Native_Utils.eq(
			selections,
			{
				ctor: '_Tuple7',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'},
				_2: {ctor: '[]'},
				_3: {ctor: '[]'},
				_4: {ctor: '[]'},
				_5: {ctor: '[]'},
				_6: {ctor: '[]'}
			}) ? _user$project$InterfaceModel$Possible : (_user$project$DeuceTools$oneOrMoreNumsOnly(selections) ? _user$project$InterfaceModel$Satisfied : _user$project$InterfaceModel$Impossible);
		var _p244 = selections;
		var nums = _p244._0;
		var mode = function () {
			var freezeAnnotations = A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$core$List$map,
				nums,
				function (_p245) {
					var _p246 = _p245;
					var _p247 = _p246._1._3.val;
					if (_p247.ctor === 'NoWidgetDecl') {
						return true;
					} else {
						return false;
					}
				});
			return _user$project$Utils$maybeUnpackSingleton(
				_user$project$Utils$dedup(freezeAnnotations));
		}();
		var _p248 = function () {
			var _p249 = mode;
			if (_p249.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: 'Add/Remove Sliders', _1: _elm_lang$core$Maybe$Nothing};
			} else {
				var _p257 = _p249._0;
				var toolName = function () {
					var _p250 = {
						ctor: '_Tuple2',
						_0: _p257,
						_1: _elm_lang$core$List$length(nums)
					};
					if (_p250._0 === true) {
						if (_p250._1 === 1) {
							return 'Add Slider';
						} else {
							return 'Add Sliders';
						}
					} else {
						if (_p250._1 === 1) {
							return 'Remove Slider';
						} else {
							return 'Remove Sliders';
						}
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: toolName,
					_1: _elm_lang$core$Maybe$Just(
						function (_p251) {
							var _p252 = _p251;
							var eSubst = A3(
								_elm_lang$core$List$foldl,
								F2(
									function (_p253, acc) {
										var _p254 = _p253;
										var _p256 = _p254._1._1;
										var wd = function () {
											if (_p257) {
												if (A2(
													_user$project$Utils$between,
													_p256,
													{ctor: '_Tuple2', _0: 1.0e-3, _1: 1})) {
													return A2(_user$project$Lang$numSlider, 1.0e-3, 1);
												} else {
													var _p255 = _user$project$DeuceTools$rangeAround(_p256);
													var i = _p255._0;
													var j = _p255._1;
													return _elm_lang$core$Native_Utils.eq(
														_elm_lang$core$Basics$toFloat(
															_elm_lang$core$Basics$round(_p256)),
														_p256) ? A2(
														_user$project$Lang$intSlider,
														A2(
															_elm_lang$core$Basics$max,
															0,
															_elm_lang$core$Basics$round(i)),
														_elm_lang$core$Basics$round(j)) : A2(
														_user$project$Lang$numSlider,
														A2(_elm_lang$core$Basics$max, 0, i),
														j);
												}
											} else {
												return _user$project$Lang$withDummyRange(_user$project$Lang$NoWidgetDecl);
											}
										}();
										return A3(
											_elm_lang$core$Dict$insert,
											_p254._0,
											A4(_user$project$Lang$EConst, _p254._1._0, _p256, _p254._1._2, wd),
											acc);
									}),
								_elm_lang$core$Dict$empty,
								nums);
							return {
								ctor: '::',
								_0: A2(
									_user$project$InterfaceModel$synthesisResult,
									toolName,
									A2(_user$project$Lang$applyESubst, eSubst, model.inputExp)),
								_1: {ctor: '[]'}
							};
						})
				};
			}
		}();
		var name = _p248._0;
		var func = _p248._1;
		return {
			name: name,
			func: func,
			reqs: {
				ctor: '::',
				_0: {description: 'Select one or more numbers', value: predVal},
				_1: {ctor: '[]'}
			},
			id: 'addRemoveRange'
		};
	});
var _user$project$DeuceTools$toolList = {
	ctor: '::',
	_0: {
		ctor: '::',
		_0: _user$project$DeuceTools$createFunctionTool,
		_1: {
			ctor: '::',
			_0: _user$project$DeuceTools$createFunctionFromArgsTool,
			_1: {
				ctor: '::',
				_0: _user$project$DeuceTools$mergeTool,
				_1: {ctor: '[]'}
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '::',
			_0: _user$project$DeuceTools$addArgumentsTool,
			_1: {
				ctor: '::',
				_0: _user$project$DeuceTools$removeArgumentsTool,
				_1: {
					ctor: '::',
					_0: _user$project$DeuceTools$reorderArgumentsTool,
					_1: {ctor: '[]'}
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _user$project$DeuceTools$renameVariableTool,
				_1: {
					ctor: '::',
					_0: _user$project$DeuceTools$introduceVariableTool,
					_1: {
						ctor: '::',
						_0: _user$project$DeuceTools$swapNamesAndUsagesTool,
						_1: {
							ctor: '::',
							_0: _user$project$DeuceTools$swapUsagesTool,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: _user$project$DeuceTools$makeEqualTool,
					_1: {
						ctor: '::',
						_0: _user$project$DeuceTools$copyExpressionTool,
						_1: {ctor: '[]'}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _user$project$DeuceTools$moveDefinitionTool,
						_1: {
							ctor: '::',
							_0: _user$project$DeuceTools$swapDefinitionsTool,
							_1: {
								ctor: '::',
								_0: _user$project$DeuceTools$inlineDefinitionTool,
								_1: {
									ctor: '::',
									_0: _user$project$DeuceTools$duplicateDefinitionTool,
									_1: {ctor: '[]'}
								}
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _user$project$DeuceTools$reorderExpressionsTool,
							_1: {
								ctor: '::',
								_0: _user$project$DeuceTools$swapExpressionsTool,
								_1: {ctor: '[]'}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '::',
								_0: _user$project$DeuceTools$makeSingleLineTool,
								_1: {
									ctor: '::',
									_0: _user$project$DeuceTools$makeMultiLineTool,
									_1: {
										ctor: '::',
										_0: _user$project$DeuceTools$alignExpressionsTool,
										_1: {ctor: '[]'}
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: _user$project$DeuceTools$thawFreezeTool,
									_1: {
										ctor: '::',
										_0: _user$project$DeuceTools$addRemoveRangeTool,
										_1: {
											ctor: '::',
											_0: _user$project$DeuceTools$showHideRangeTool,
											_1: {
												ctor: '::',
												_0: _user$project$DeuceTools$rewriteOffsetTool,
												_1: {
													ctor: '::',
													_0: _user$project$DeuceTools$convertColorStringTool,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '::',
										_0: _user$project$DeuceTools$flipBooleanTool,
										_1: {ctor: '[]'}
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$DeuceTools$selectedPathedPatIdTargets = function (deuceWidgets) {
	return A3(
		_elm_lang$core$Basics$flip,
		_elm_lang$core$List$concatMap,
		deuceWidgets,
		function (deuceWidget) {
			var _p258 = deuceWidget;
			if (_p258.ctor === 'DeucePatTarget') {
				return {
					ctor: '::',
					_0: _p258._0,
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		});
};
var _user$project$DeuceTools$selectedEIdTargets = function (deuceWidgets) {
	return A3(
		_elm_lang$core$Basics$flip,
		_elm_lang$core$List$concatMap,
		deuceWidgets,
		function (deuceWidget) {
			var _p259 = deuceWidget;
			if (_p259.ctor === 'DeuceExpTarget') {
				return {
					ctor: '::',
					_0: _p259._0,
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		});
};
var _user$project$DeuceTools$selectedEquationEIds = function (deuceWidgets) {
	return A3(
		_elm_lang$core$Basics$flip,
		_elm_lang$core$List$concatMap,
		deuceWidgets,
		function (deuceWidget) {
			var _p260 = deuceWidget;
			if (_p260.ctor === 'DeuceLetBindingEquation') {
				return {
					ctor: '::',
					_0: _p260._0,
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		});
};
var _user$project$DeuceTools$selectedPathedPatIds = function (deuceWidgets) {
	return A3(
		_elm_lang$core$Basics$flip,
		_elm_lang$core$List$concatMap,
		deuceWidgets,
		function (deuceWidget) {
			var _p261 = deuceWidget;
			if (_p261.ctor === 'DeucePat') {
				return {
					ctor: '::',
					_0: _p261._0,
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		});
};
var _user$project$DeuceTools$selectedEIds = function (deuceWidgets) {
	return A3(
		_elm_lang$core$Basics$flip,
		_elm_lang$core$List$concatMap,
		deuceWidgets,
		function (deuceWidget) {
			var _p262 = deuceWidget;
			if (_p262.ctor === 'DeuceExp') {
				return {
					ctor: '::',
					_0: _p262._0,
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		});
};
var _user$project$DeuceTools$selectedNumsAndBaseVals = F2(
	function (program, selectedWidgets) {
		var noMatches = {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
		return function (_p263) {
			var _p264 = _p263;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$List$concat(_p264._0),
				_1: _elm_lang$core$List$concat(_p264._1)
			};
		}(
			_elm_lang$core$List$unzip(
				A2(
					_elm_lang$core$List$map,
					function (deuceWidget) {
						var _p265 = deuceWidget;
						if (_p265.ctor === 'DeuceExp') {
							var _p268 = _p265._0;
							var _p266 = A2(_user$project$Lang$findExpByEId, program, _p268);
							if (_p266.ctor === 'Just') {
								var _p267 = _p266._0.val.e__;
								switch (_p267.ctor) {
									case 'EConst':
										return {
											ctor: '_Tuple2',
											_0: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: _p268,
													_1: {ctor: '_Tuple4', _0: _p267._0, _1: _p267._1, _2: _p267._2, _3: _p267._3}
												},
												_1: {ctor: '[]'}
											},
											_1: {ctor: '[]'}
										};
									case 'EBase':
										return {
											ctor: '_Tuple2',
											_0: {ctor: '[]'},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: _p268,
													_1: {ctor: '_Tuple2', _0: _p267._0, _1: _p267._1}
												},
												_1: {ctor: '[]'}
											}
										};
									default:
										return noMatches;
								}
							} else {
								return noMatches;
							}
						} else {
							return noMatches;
						}
					},
					selectedWidgets)));
	});
var _user$project$DeuceTools$selectedNums = F2(
	function (program, selectedWidgets) {
		return _elm_lang$core$Tuple$first(
			A2(_user$project$DeuceTools$selectedNumsAndBaseVals, program, selectedWidgets));
	});
var _user$project$DeuceTools$selectedBaseVals = F2(
	function (program, selectedWidgets) {
		return _elm_lang$core$Tuple$second(
			A2(_user$project$DeuceTools$selectedNumsAndBaseVals, program, selectedWidgets));
	});
var _user$project$DeuceTools$selectionsTuple = F2(
	function (program, selectedWidgets) {
		return {
			ctor: '_Tuple7',
			_0: A2(_user$project$DeuceTools$selectedNums, program, selectedWidgets),
			_1: A2(_user$project$DeuceTools$selectedBaseVals, program, selectedWidgets),
			_2: _user$project$DeuceTools$selectedEIds(selectedWidgets),
			_3: _user$project$DeuceTools$selectedPathedPatIds(selectedWidgets),
			_4: _user$project$DeuceTools$selectedEquationEIds(selectedWidgets),
			_5: _user$project$DeuceTools$selectedEIdTargets(selectedWidgets),
			_6: _user$project$DeuceTools$selectedPathedPatIdTargets(selectedWidgets)
		};
	});
var _user$project$DeuceTools$deuceToolsOf = function (model) {
	var selections = A2(_user$project$DeuceTools$selectionsTuple, model.inputExp, model.deuceState.selectedWidgets);
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$List$map(
			function (tool) {
				return A2(tool, model, selections);
			}),
		_user$project$DeuceTools$toolList);
};
var _user$project$DeuceTools$createToolCache_ = function (model) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$List$map(
			function (deuceTool) {
				var _p269 = _user$project$DeuceTools$runTool(deuceTool);
				if (_p269.ctor === 'Just') {
					return {ctor: '_Tuple3', _0: deuceTool, _1: _p269._0, _2: false};
				} else {
					return {
						ctor: '_Tuple3',
						_0: deuceTool,
						_1: {ctor: '[]'},
						_2: true
					};
				}
			}),
		_user$project$DeuceTools$deuceToolsOf(model));
};
var _user$project$DeuceTools$createToolCache = function (model) {
	return _user$project$DeuceTools$createToolCache_(model);
};
var _user$project$DeuceTools$updateRenameToolsInCache = function (almostNewModel) {
	var cachedAndNewDeuceTools = A3(
		_user$project$Utils$zipWith,
		_user$project$Utils$zip,
		almostNewModel.deuceToolsAndResults,
		_user$project$DeuceTools$deuceToolsOf(almostNewModel));
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$List$map(
			function (_p270) {
				var _p271 = _p270;
				var _p274 = _p271._1;
				var _p273 = _p271._0._0;
				if (_user$project$DeuceTools$isRenamer(_p273)) {
					var _p272 = _user$project$DeuceTools$runTool(_p274);
					if (_p272.ctor === 'Just') {
						return {ctor: '_Tuple3', _0: _p274, _1: _p272._0, _2: false};
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p274,
							_1: {ctor: '[]'},
							_2: true
						};
					}
				} else {
					return {ctor: '_Tuple3', _0: _p273, _1: _p271._0._1, _2: _p271._0._2};
				}
			}),
		cachedAndNewDeuceTools);
};
var _user$project$DeuceTools$createToolCacheMultipleInterpretations = F2(
	function (model, interpretations) {
		var selectionInterpretations = A2(
			_elm_lang$core$List$map,
			_user$project$DeuceTools$selectionsTuple(model.inputExp),
			interpretations);
		var toolToCacheResults = function (tool) {
			var toolInterpretations = A2(
				_elm_lang$core$List$map,
				function (selections) {
					return A2(tool, model, selections);
				},
				selectionInterpretations);
			var toolResults = _elm_lang$core$List$concat(
				_user$project$Utils$filterJusts(
					A2(_elm_lang$core$List$map, _user$project$DeuceTools$runTool, toolInterpretations)));
			var deuceTool = A2(_user$project$Utils$head, 'createToolCacheMultipleInterpretations', toolInterpretations);
			return {
				ctor: '_Tuple3',
				_0: deuceTool,
				_1: toolResults,
				_2: _elm_lang$core$Native_Utils.eq(
					toolResults,
					{ctor: '[]'})
			};
		};
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$List$map(toolToCacheResults),
			_user$project$DeuceTools$toolList);
	});

var _user$project$InterfaceController$msgClearExtraMenuAmount = A2(
	_user$project$InterfaceModel$Msg,
	'Clear Extra Menu Amount',
	function (old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{extraMenuAmount: 0});
	});
var _user$project$InterfaceController$msgIncreaseExtraMenuAmount = function (delta) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Increase Extra Menu Amount',
		function (old) {
			var newAmount = old.extraMenuAmount + delta;
			return _elm_lang$core$Native_Utils.update(
				old,
				{extraMenuAmount: newAmount});
		});
};
var _user$project$InterfaceController$msgSetColorScheme = function (colorScheme) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Color Scheme',
		function (old) {
			return _elm_lang$core$Native_Utils.update(
				old,
				{colorScheme: colorScheme});
		});
};
var _user$project$InterfaceController$msgReceiveDeucePopupPanelInfo = function (dppi) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Receive Deuce Popup Panel Info',
		function (old) {
			var oldDeucePopupPanelAbove = old.deucePopupPanelAbove;
			var _p0 = old.popupPanelPositions.deuce;
			var oldX = _p0._0;
			var oldY = _p0._1;
			var newDeucePopupPanelAbove = _elm_lang$core$Native_Utils.cmp(oldY, dppi.height) > 0;
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					deucePopupPanelAbove: _user$project$InterfaceModel$deucePopupPanelShown(old) ? (oldDeucePopupPanelAbove && newDeucePopupPanelAbove) : true
				});
		});
};
var _user$project$InterfaceController$msgResetInterfaceLayout = A2(
	_user$project$InterfaceModel$Msg,
	'Reset Interface Layout',
	function (model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{mainResizerX: _elm_lang$core$Maybe$Nothing});
	});
var _user$project$InterfaceController$msgSetEnableTextEdits = function (bool) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Enable Text Edits',
		function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					enableTextEdits: _user$project$Updatable$create(bool)
				});
		});
};
var _user$project$InterfaceController$msgSetTextSelectMode = function (textSelectMode) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Text Select Mode',
		function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{textSelectMode: textSelectMode});
		});
};
var _user$project$InterfaceController$msgSetCodeToolsMenuMode = function (mode) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Code Tools Menu Mode',
		function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{codeToolsMenuMode: mode});
		});
};
var _user$project$InterfaceController$msgSetEnableDeuceTextSelection = function (bool) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Enable Deuce Text Selection',
		function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{enableDeuceTextSelection: bool});
		});
};
var _user$project$InterfaceController$msgSetEnableDeuceBoxSelection = function (bool) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Enable Deuce Box Selection',
		function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{enableDeuceBoxSelection: bool});
		});
};
var _user$project$InterfaceController$deltaMouse = F2(
	function (old, $new) {
		return {ctor: '_Tuple2', _0: $new.x - old.x, _1: $new.y - old.y};
	});
var _user$project$InterfaceController$msgDragMainResizer = function () {
	var updater = F3(
		function (oldPosition, newPosition, old) {
			var oldMainResizerX = _user$project$SleekLayout$mainResizer(old).x;
			var rightBound = _user$project$SleekLayout$mainResizerRightBound(old);
			var leftBound = _user$project$SleekLayout$mainResizerLeftBound(old);
			var newMainResizerX = A3(
				_user$project$Utils$clamp,
				leftBound,
				rightBound,
				oldMainResizerX + _elm_lang$core$Tuple$first(
					A2(_user$project$InterfaceController$deltaMouse, oldPosition, newPosition)));
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					mainResizerX: _elm_lang$core$Maybe$Just(newMainResizerX)
				});
		});
	return A2(
		_user$project$InterfaceModel$Msg,
		'Drag Main Resizer',
		function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					mouseMode: _user$project$InterfaceModel$MouseDrag(updater)
				});
		});
}();
var _user$project$InterfaceController$shift = F2(
	function (_p2, _p1) {
		var _p3 = _p2;
		var _p4 = _p1;
		return {ctor: '_Tuple2', _0: _p3._0 + _p4._0, _1: _p3._1 + _p4._1};
	});
var _user$project$InterfaceController$updatePopupPanelPosition = F3(
	function (get, set, model) {
		var updater = F3(
			function (oldPosition, newPosition, old) {
				var oldPopupPanelPosition = get(old.popupPanelPositions);
				var newPopupPanelPosition = A2(
					_user$project$InterfaceController$shift,
					oldPopupPanelPosition,
					A2(_user$project$InterfaceController$deltaMouse, oldPosition, newPosition));
				var oldPopupPanelPositions = old.popupPanelPositions;
				var newPopupPanelPositions = A2(set, oldPopupPanelPositions, newPopupPanelPosition);
				return _elm_lang$core$Native_Utils.update(
					old,
					{popupPanelPositions: newPopupPanelPositions});
			});
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				mouseMode: _user$project$InterfaceModel$MouseDrag(updater)
			});
	});
var _user$project$InterfaceController$msgDragDeucePopupPanel = A2(
	_user$project$InterfaceModel$Msg,
	'Drag Deuce Popup Panel',
	A2(
		_user$project$InterfaceController$updatePopupPanelPosition,
		function (_) {
			return _.deuce;
		},
		F2(
			function (ppp, pos) {
				return _elm_lang$core$Native_Utils.update(
					ppp,
					{deuce: pos});
			})));
var _user$project$InterfaceController$msgDragAutoOutputToolsPopupPanel = A2(
	_user$project$InterfaceModel$Msg,
	'Drag Auto Output Tools Popup Panel',
	A2(
		_user$project$InterfaceController$updatePopupPanelPosition,
		function (_) {
			return _.autoOutputTools;
		},
		F2(
			function (ppp, pos) {
				return _elm_lang$core$Native_Utils.update(
					ppp,
					{autoOutputTools: pos});
			})));
var _user$project$InterfaceController$msgDragEditCodePopupPanel = A2(
	_user$project$InterfaceModel$Msg,
	'Drag Edit Code Popup Panel',
	A2(
		_user$project$InterfaceController$updatePopupPanelPosition,
		function (_) {
			return _.editCode;
		},
		F2(
			function (ppp, pos) {
				return _elm_lang$core$Native_Utils.update(
					ppp,
					{editCode: pos});
			})));
var _user$project$InterfaceController$msgDragDeuceRightClickMenu = A2(
	_user$project$InterfaceModel$Msg,
	'Drag Deuce Right Click Menu',
	A2(
		_user$project$InterfaceController$updatePopupPanelPosition,
		function (_) {
			return _.deuceRightClickMenu;
		},
		F2(
			function (ppp, pos) {
				return _elm_lang$core$Native_Utils.update(
					ppp,
					{deuceRightClickMenu: pos});
			})));
var _user$project$InterfaceController$msgClearDrag = A2(
	_user$project$InterfaceModel$Msg,
	'Clear Drag',
	function (model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{mouseMode: _user$project$InterfaceModel$MouseNothing});
	});
var _user$project$InterfaceController$msgUpdateRenameVarTextBox = function (text) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(_elm_lang$core$Basics_ops['++'], 'Update Rename Var Text Box: ', text),
		function (model) {
			var oldDeuceState = model.deuceState;
			var almostNewModel = _elm_lang$core$Native_Utils.update(
				model,
				{
					deuceState: _elm_lang$core$Native_Utils.update(
						oldDeuceState,
						{
							renameVarTextBox: _user$project$FastParser$sanitizeVariableName(text)
						})
				});
			return _user$project$DeuceTools$reselectDeuceTool(
				_elm_lang$core$Native_Utils.update(
					almostNewModel,
					{
						deuceToolsAndResults: _user$project$DeuceTools$updateRenameToolsInCache(almostNewModel),
						deuceToolResultPreviews: _elm_lang$core$Dict$empty
					}));
		});
};
var _user$project$InterfaceController$msgLeaveDeuceResult = F2(
	function (_p5, path) {
		var _p6 = _p5;
		var clearPreview = function (m) {
			return _elm_lang$core$Native_Utils.update(
				m,
				{preview: _elm_lang$core$Maybe$Nothing});
		};
		return A2(
			_user$project$InterfaceModel$Msg,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Leave Deuce Result \"',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p6._0.description,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\" ',
						_elm_lang$core$Basics$toString(path)))),
			function (_p7) {
				return clearPreview(
					_user$project$DeuceWidgets$clearHoveredMenuPath(_p7));
			});
	});
var _user$project$InterfaceController$msgHoverDeuceResult = F3(
	function (isRenamer, _p8, path) {
		var _p9 = _p8;
		var _p18 = _p9._0;
		var maybeRunToolAndCachePreview = function (m) {
			var _p10 = {
				ctor: '_Tuple2',
				_0: isRenamer,
				_1: A2(_elm_lang$core$Dict$get, path, m.deuceToolResultPreviews)
			};
			if (_p10._0 === true) {
				return m;
			} else {
				if (_p10._1.ctor === 'Just') {
					return _elm_lang$core$Native_Utils.update(
						m,
						{preview: _p10._1._0._0});
				} else {
					var _p11 = function () {
						var _p12 = {
							ctor: '_Tuple2',
							_0: _p18.isSafe,
							_1: A2(_user$project$InterfaceModel$runAndResolve, m, _p18.exp)
						};
						if (_p12._0 === true) {
							if (_p12._1.ctor === 'Ok') {
								var _p13 = _p12._1._0._1;
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Maybe$Just(
										{
											ctor: '_Tuple2',
											_0: _p12._1._0._3,
											_1: _elm_lang$core$Result$Ok(
												{
													ctor: '_Tuple4',
													_0: _p12._1._0._0,
													_1: _p13,
													_2: _user$project$ShapeWidgets$computeAndRejiggerWidgetBounds(_p13),
													_3: _p12._1._0._2
												})
										}),
									_1: 'expected-safe'
								};
							} else {
								var _p15 = _p12._1._0;
								var _p14 = A2(_elm_lang$core$Debug$log, 'not safe after all!', _p15);
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Maybe$Just(
										{
											ctor: '_Tuple2',
											_0: A2(_user$project$Syntax$unparser, m.syntax, _p18.exp),
											_1: _elm_lang$core$Result$Err(_p15)
										}),
									_1: 'unexpected-unsafe'
								};
							}
						} else {
							if (_p12._1.ctor === 'Ok') {
								var _p16 = _p12._1._0._1;
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Maybe$Just(
										{
											ctor: '_Tuple2',
											_0: _p12._1._0._3,
											_1: _elm_lang$core$Result$Ok(
												{
													ctor: '_Tuple4',
													_0: _p12._1._0._0,
													_1: _p16,
													_2: _user$project$ShapeWidgets$computeAndRejiggerWidgetBounds(_p16),
													_3: _p12._1._0._2
												})
										}),
									_1: 'unexpected-safe'
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Maybe$Just(
										{
											ctor: '_Tuple2',
											_0: A2(_user$project$Syntax$unparser, m.syntax, _p18.exp),
											_1: _elm_lang$core$Result$Err(_p12._1._0)
										}),
									_1: 'expected-unsafe'
								};
							}
						}
					}();
					var preview = _p11._0;
					var $class = _p11._1;
					var deuceToolResultPreviews = A3(
						_elm_lang$core$Dict$insert,
						path,
						{ctor: '_Tuple2', _0: preview, _1: $class},
						m.deuceToolResultPreviews);
					return _elm_lang$core$Native_Utils.update(
						m,
						{preview: preview, deuceToolResultPreviews: deuceToolResultPreviews});
				}
			}
		};
		return A2(
			_user$project$InterfaceModel$Msg,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Hover Deuce Result \"',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p18.description,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\" ',
						_elm_lang$core$Basics$toString(path)))),
			function (_p17) {
				return maybeRunToolAndCachePreview(
					A2(_user$project$DeuceWidgets$setHoveredMenuPath, path, _p17));
			});
	});
var _user$project$InterfaceController$msgSetGhostsShown = function (shown) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Ghosts Shown',
		function (old) {
			var newMode = function () {
				var _p19 = old.outputMode;
				if (_p19.ctor === 'Print') {
					return _user$project$InterfaceModel$Print(
						A2(_user$project$LangSvg$printSvg, shown, old.slate));
				} else {
					return old.outputMode;
				}
			}();
			return _elm_lang$core$Native_Utils.update(
				old,
				{showGhosts: shown, outputMode: newMode});
		});
};
var _user$project$InterfaceController$msgUpdateFontSize = function (fontSize) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Update Font Size',
		function (old) {
			var oldCodeBoxInfo = old.codeBoxInfo;
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					codeBoxInfo: _elm_lang$core$Native_Utils.update(
						oldCodeBoxInfo,
						{fontSize: fontSize})
				});
		});
};
var _user$project$InterfaceController$setMenuActive = F2(
	function (isActive, model) {
		var oldViewState = model.viewState;
		var newViewState = _elm_lang$core$Native_Utils.update(
			oldViewState,
			{menuActive: isActive});
		return _elm_lang$core$Native_Utils.update(
			model,
			{viewState: newViewState});
	});
var _user$project$InterfaceController$msgHideMenu = A2(
	_user$project$InterfaceModel$Msg,
	'Hide Menu',
	_user$project$InterfaceController$setMenuActive(false));
var _user$project$InterfaceController$msgToggleMenu = A2(
	_user$project$InterfaceModel$Msg,
	'Toggle Menu',
	function (old) {
		return A2(_user$project$InterfaceController$setMenuActive, !old.viewState.menuActive, old);
	});
var _user$project$InterfaceController$msgReceiveDotImage = function (s) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Receive Image',
		function (m) {
			return _elm_lang$core$Native_Utils.update(
				m,
				{
					outputMode: _user$project$InterfaceModel$PrintScopeGraph(
						_elm_lang$core$Maybe$Just(s))
				});
		});
};
var _user$project$InterfaceController$msgMouseLeaveDeuceWidget = function (widget) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'msgMouseLeaveDeuceWidget ',
			_elm_lang$core$Basics$toString(widget)),
		function (old) {
			var deuceState = old.deuceState;
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					deuceState: _elm_lang$core$Native_Utils.update(
						deuceState,
						{
							hoveredWidgets: {ctor: '[]'}
						})
				});
		});
};
var _user$project$InterfaceController$msgMouseEnterDeuceWidget = function (widget) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'msgMouseEnterDeuceWidget ',
			_elm_lang$core$Basics$toString(widget)),
		function (old) {
			var deuceState = old.deuceState;
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					deuceState: _elm_lang$core$Native_Utils.update(
						deuceState,
						{
							hoveredWidgets: {
								ctor: '::',
								_0: widget,
								_1: {ctor: '[]'}
							}
						})
				});
		});
};
var _user$project$InterfaceController$toggleDeuceWidget = F2(
	function (widget, model) {
		var multipleTargetPositionsFilter = model.allowMultipleTargetPositions ? _elm_lang$core$Basics$identity : _elm_lang$core$List$filter(
			function (w) {
				return !(_user$project$DeuceWidgets$isTargetPosition(w) && _user$project$DeuceWidgets$isTargetPosition(widget));
			});
		var oldDeuceState = model.deuceState;
		var oldSelectedWidgets = oldDeuceState.selectedWidgets;
		var newSelectedWidgets = A2(_elm_lang$core$List$member, widget, oldSelectedWidgets) ? A2(_user$project$Utils$removeAsSet, widget, oldSelectedWidgets) : A2(
			_user$project$Utils$addAsSet,
			widget,
			multipleTargetPositionsFilter(
				A2(
					_elm_lang$core$List$filter,
					function (w) {
						return !(A3(_user$project$DeuceWidgets$isSubWidget, model.inputExp, w, widget) || A3(_user$project$DeuceWidgets$isSubWidget, model.inputExp, widget, w));
					},
					oldSelectedWidgets)));
		var newSelectedWidgetsEmpty = _elm_lang$core$List$isEmpty(newSelectedWidgets);
		var newDeuceRightClickMenuMode = newSelectedWidgetsEmpty ? _elm_lang$core$Maybe$Nothing : model.deuceRightClickMenuMode;
		var newDeuceState = _elm_lang$core$Native_Utils.update(
			oldDeuceState,
			{selectedWidgets: newSelectedWidgets});
		var almostNewModel = _elm_lang$core$Native_Utils.update(
			model,
			{deuceState: newDeuceState, deuceRightClickMenuMode: newDeuceRightClickMenuMode});
		return _user$project$DeuceTools$reselectDeuceTool(
			_elm_lang$core$Native_Utils.update(
				almostNewModel,
				{
					deuceToolsAndResults: _user$project$DeuceTools$createToolCache(almostNewModel),
					deuceToolResultPreviews: _elm_lang$core$Dict$empty
				}));
	});
var _user$project$InterfaceController$msgMouseClickDeuceWidget = function (widget) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'msgMouseClickDeuceWidget ',
			_elm_lang$core$Basics$toString(widget)),
		function (old) {
			return A2(_user$project$InterfaceController$toggleDeuceWidget, widget, old);
		});
};
var _user$project$InterfaceController$textSelect = F2(
	function (allowSingleSelection, old) {
		var patMap = _user$project$Lang$computePatMap(old.inputExp);
		var _p20 = A2(
			_elm_lang$core$Maybe$andThen,
			_user$project$DeuceWidgets$toDeuceWidget(patMap),
			A2(_user$project$InterfaceModel$codeObjectFromSelection, allowSingleSelection, old));
		if (_p20.ctor === 'Just') {
			return A2(_user$project$InterfaceController$toggleDeuceWidget, _p20._0, old);
		} else {
			return old;
		}
	});
var _user$project$InterfaceController$msgTextSelect = function (allowSingleSelection) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Text Select',
		_user$project$InterfaceController$textSelect(allowSingleSelection));
};
var _user$project$InterfaceController$msgMouseLeaveCodeBox = A2(
	_user$project$InterfaceModel$Msg,
	'Mouse Leave CodeBox',
	function (m) {
		var codeBoxInfo = m.codeBoxInfo;
		return _elm_lang$core$Native_Utils.update(
			m,
			{hoveringCodeBox: false});
	});
var _user$project$InterfaceController$msgMouseEnterCodeBox = A2(
	_user$project$InterfaceModel$Msg,
	'Mouse Enter CodeBox',
	function (m) {
		var codeBoxInfo = m.codeBoxInfo;
		return _elm_lang$core$Native_Utils.update(
			m,
			{hoveringCodeBox: true});
	});
var _user$project$InterfaceController$resetDeuceState = function (m) {
	var layoutOffsets = m.layoutOffsets;
	return _elm_lang$core$Native_Utils.update(
		m,
		{
			deuceState: _user$project$DeuceWidgets$emptyDeuceState,
			deuceToolsAndResults: _user$project$DeuceTools$createToolCache(_user$project$InterfaceModel$initModel),
			deuceToolResultPreviews: _elm_lang$core$Dict$empty,
			selectedDeuceTool: _elm_lang$core$Maybe$Nothing,
			preview: _elm_lang$core$Maybe$Nothing,
			layoutOffsets: _elm_lang$core$Native_Utils.update(
				layoutOffsets,
				{
					deuceToolBox: {
						pinned: layoutOffsets.deuceToolBox.pinned,
						offsets: layoutOffsets.deuceToolBox.pinned ? layoutOffsets.deuceToolBox.offsets : {dx: 0, dy: 0}
					}
				})
		});
};
var _user$project$InterfaceController$msgSetAllowMultipleTargetPositions = function (bool) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Allow Multiple Target Positions',
		function (model) {
			return _user$project$InterfaceController$resetDeuceState(
				_elm_lang$core$Native_Utils.update(
					model,
					{allowMultipleTargetPositions: bool}));
		});
};
var _user$project$InterfaceController$msgImportCode = A2(
	_user$project$InterfaceModel$Msg,
	'Import Code',
	_user$project$InterfaceModel$closeDialogBox(_user$project$InterfaceModel$ImportCode));
var _user$project$InterfaceController$msgExportSvg = A2(_user$project$InterfaceModel$Msg, 'Export SVG', _elm_lang$core$Basics$identity);
var _user$project$InterfaceController$msgExportCode = A2(_user$project$InterfaceModel$Msg, 'Export Code', _elm_lang$core$Basics$identity);
var _user$project$InterfaceController$msgToggleAutosave = A2(
	_user$project$InterfaceModel$Msg,
	'Toggle Autosave',
	function (old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{autosave: !old.autosave});
	});
var _user$project$InterfaceController$msgConfirmFileOperation = A2(
	_user$project$InterfaceModel$Msg,
	'Confirm File Operation',
	function (_p21) {
		return A2(
			_user$project$InterfaceModel$closeDialogBox,
			_user$project$InterfaceModel$AlertSave,
			function (old) {
				return _elm_lang$core$Native_Utils.update(
					old,
					{fileOperationConfirmed: true});
			}(_p21));
	});
var _user$project$InterfaceController$msgCancelFileOperation = A2(_user$project$InterfaceModel$Msg, 'Cancel File Operation', _user$project$InterfaceModel$cancelFileOperation);
var _user$project$InterfaceController$msgDelete = function (filename) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Delete',
		function (old) {
			return _elm_lang$core$Native_Utils.eq(filename, old.filename) ? _elm_lang$core$Native_Utils.update(
				old,
				{fileToDelete: filename, needsSave: true, lastSaveState: _elm_lang$core$Maybe$Nothing}) : _elm_lang$core$Native_Utils.update(
				old,
				{fileToDelete: filename});
		});
};
var _user$project$InterfaceController$msgSave = A2(
	_user$project$InterfaceModel$Msg,
	'Save',
	function (old) {
		return _elm_lang$core$Native_Utils.eq(old.filename.name, _user$project$InterfaceModel$bufferName) ? A2(_user$project$InterfaceModel$openDialogBox, _user$project$InterfaceModel$SaveAs, old) : old;
	});
var _user$project$InterfaceController$msgSaveAs = function () {
	var closeDialogBoxIfNecessary = function (old) {
		return (!_elm_lang$core$Native_Utils.eq(old.filename.name, _user$project$InterfaceModel$bufferName)) ? A2(_user$project$InterfaceModel$closeDialogBox, _user$project$InterfaceModel$SaveAs, old) : old;
	};
	var switchFilenameToInput = function (old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				filename: _user$project$File$parseFilename(old.filenameInput)
			});
	};
	return A2(
		_user$project$InterfaceModel$Msg,
		'Save As',
		function (_p22) {
			return closeDialogBoxIfNecessary(
				switchFilenameToInput(_p22));
		});
}();
var _user$project$InterfaceController$updateFileIndex = F2(
	function (fileIndex, old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{fileIndex: fileIndex});
	});
var _user$project$InterfaceController$wrapIconWithSvg = F2(
	function (computeViewBox, svgElements) {
		var subPadding = function (x) {
			return x - 10;
		};
		var viewBoxAttrs = function () {
			if (computeViewBox) {
				var _p23 = _user$project$LangSvg$estimatedBounds(
					A2(
						_elm_lang$svg$Svg$svg,
						{ctor: '[]'},
						svgElements));
				if (_p23.ctor === 'Nothing') {
					return {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 50 50'),
						_1: {ctor: '[]'}
					};
				} else {
					var _p24 = _p23._0;
					return _elm_lang$core$List$singleton(
						_elm_lang$svg$Svg_Attributes$viewBox(
							A2(
								_elm_lang$core$String$join,
								' ',
								A2(
									_elm_lang$core$List$map,
									_elm_lang$core$Basics$toString,
									{
										ctor: '::',
										_0: _p24.left,
										_1: {
											ctor: '::',
											_0: _p24.top,
											_1: {
												ctor: '::',
												_0: _p24.right - _p24.left,
												_1: {
													ctor: '::',
													_0: _p24.bot - _p24.top,
													_1: {ctor: '[]'}
												}
											}
										}
									}))));
				}
			} else {
				return {ctor: '[]'};
			}
		}();
		return A2(
			_elm_lang$svg$Svg$svg,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$width(
						function (_p25) {
							return _user$project$SleekLayout$px(
								subPadding(
									function (_) {
										return _.iconWidth;
									}(_p25)));
						}(_user$project$SleekLayout$iconButton)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height(
							function (_p26) {
								return _user$project$SleekLayout$px(
									subPadding(
										function (_) {
											return _.iconHeight;
										}(_p26)));
							}(_user$project$SleekLayout$iconButton)),
						_1: {ctor: '[]'}
					}
				},
				viewBoxAttrs),
			svgElements);
	});
var _user$project$InterfaceController$loadDrawingToolsAndIcons = function (old) {
	var iconUpdater = F2(
		function (_p27, accModel) {
			var _p28 = _p27;
			var _p33 = _p28._0;
			var callExp = A4(
				_user$project$Draw$newFunctionCallExp,
				_p33,
				accModel,
				{
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: 0, _1: _user$project$InterfaceModel$NoSnap},
					_1: {ctor: '_Tuple2', _0: 0, _1: _user$project$InterfaceModel$NoSnap}
				},
				{
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: 1, _1: _user$project$InterfaceModel$NoSnap},
					_1: {ctor: '_Tuple2', _0: 1, _1: _user$project$InterfaceModel$NoSnap}
				});
			var biggestNumber = _elm_lang$core$Basics$round(
				A2(
					_elm_lang$core$Maybe$withDefault,
					10,
					_elm_lang$core$List$maximum(
						A2(
							F2(
								function (x, y) {
									return {ctor: '::', _0: x, _1: y};
								}),
							10,
							A2(
								_elm_lang$core$List$filterMap,
								_user$project$LangTools$expToMaybeNum,
								_user$project$Lang$flattenExpTree(
									A2(
										_elm_lang$core$Maybe$withDefault,
										_user$project$Lang$eConstDummyLoc(10),
										A2(
											_elm_lang$core$Maybe$map,
											function (_p29) {
												var _p30 = _p29;
												return _p30._0;
											},
											callExp))))))));
			var _p31 = {ctor: '_Tuple2', _0: biggestNumber * 3, _1: biggestNumber * 3};
			var startX = _p31._0;
			var startY = _p31._1;
			var _p32 = {ctor: '_Tuple2', _0: biggestNumber * 6, _1: biggestNumber * 6};
			var endX = _p32._0;
			var endY = _p32._1;
			var dotScalingFactor = Math.pow(
				_elm_lang$core$Basics$toFloat(biggestNumber) / 10,
				0.7);
			var iconHtml = A2(
				_user$project$InterfaceController$wrapIconWithSvg,
				true,
				A5(
					_user$project$Draw$drawNewFunction,
					dotScalingFactor,
					_p33,
					accModel,
					{
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: startX, _1: _user$project$InterfaceModel$NoSnap},
						_1: {ctor: '_Tuple2', _0: startY, _1: _user$project$InterfaceModel$NoSnap}
					},
					{
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: endX, _1: _user$project$InterfaceModel$NoSnap},
						_1: {ctor: '_Tuple2', _0: endY, _1: _user$project$InterfaceModel$NoSnap}
					}));
			return _elm_lang$core$Native_Utils.update(
				accModel,
				{
					icons: A3(_elm_lang$core$Dict$insert, _p33, iconHtml, accModel.icons)
				});
		});
	var drawableFunctions = _user$project$Draw$getDrawableFunctions(old);
	var oldWithDrawableFunctions = _elm_lang$core$Native_Utils.update(
		old,
		{drawableFunctions: drawableFunctions});
	return A3(_elm_lang$core$List$foldl, iconUpdater, oldWithDrawableFunctions, drawableFunctions);
};
var _user$project$InterfaceController$iconify = F3(
	function (syntax, env, code) {
		var exp = A2(
			_user$project$Utils$fromOkay,
			'Error parsing icon',
			A2(_user$project$Syntax$parser, syntax, code));
		var svgElement = A2(
			_user$project$Utils$fromOkay,
			'Error creating icon',
			A3(_user$project$LangSvg$evalToSvg, syntax, env, exp));
		return A2(
			_user$project$InterfaceController$wrapIconWithSvg,
			false,
			{
				ctor: '::',
				_0: svgElement,
				_1: {ctor: '[]'}
			});
	});
var _user$project$InterfaceController$loadIconFromFile = F3(
	function (env, icon, old) {
		var oldIcons = old.icons;
		var _p34 = function () {
			if (!_elm_lang$core$Native_Utils.eq(icon.contents, '')) {
				return {
					ctor: '_Tuple2',
					_0: icon.contents,
					_1: _user$project$Syntax$fromFileExtension(icon.filename.extension)
				};
			} else {
				var _p35 = A2(_elm_lang$core$Dict$get, icon.filename.name, _user$project$DefaultIconTheme$icons);
				if (_p35.ctor === 'Just') {
					return {ctor: '_Tuple2', _0: _p35._0, _1: _user$project$Syntax$Little};
				} else {
					return {ctor: '_Tuple2', _0: '(blobs [])', _1: _user$project$Syntax$Little};
				}
			}
		}();
		var actualCode = _p34._0;
		var syntax = _p34._1;
		var iconHtml = A3(_user$project$InterfaceController$iconify, syntax, env, actualCode);
		var newIcons = A3(_elm_lang$core$Dict$insert, icon.filename.name, iconHtml, oldIcons);
		return _elm_lang$core$Native_Utils.update(
			old,
			{icons: newIcons});
	});
var _user$project$InterfaceController$msgLoadIcon = function (file) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Load Icon',
		A2(_user$project$InterfaceController$loadIconFromFile, _user$project$Eval$initEnv, file));
};
var _user$project$InterfaceController$readFile = F3(
	function (file, needsSave, old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				filename: file.filename,
				code: file.contents,
				syntax: _user$project$Syntax$fromFileExtension(file.filename.extension),
				history: _user$project$History$begin(
					{
						code: file.contents,
						selectedDeuceWidgets: {ctor: '[]'}
					}),
				lastSaveState: _elm_lang$core$Maybe$Just(file.contents),
				needsSave: needsSave
			});
	});
var _user$project$InterfaceController$requestFile = F2(
	function (requestedFilename, old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{filename: requestedFilename});
	});
var _user$project$InterfaceController$msgOpen = function (filename) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Open',
		function (_p36) {
			return A2(
				_user$project$InterfaceModel$closeDialogBox,
				_user$project$InterfaceModel$Open,
				A2(_user$project$InterfaceController$requestFile, filename, _p36));
		});
};
var _user$project$InterfaceController$confirmDelete = function (deletedFilename) {
	return _elm_lang$core$Basics$identity;
};
var _user$project$InterfaceController$confirmWrite = F2(
	function (savedFilename, old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				needsSave: false,
				lastSaveState: _elm_lang$core$Maybe$Just(old.code)
			});
	});
var _user$project$InterfaceController$msgUpdateFilenameInput = function (str) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Update Filename Input',
		function (old) {
			return _elm_lang$core$Native_Utils.update(
				old,
				{filenameInput: str});
		});
};
var _user$project$InterfaceController$msgCloseDialogBox = function (db) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Close Dialog Box \"',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(db),
				'\"')),
		_user$project$InterfaceModel$closeDialogBox(db));
};
var _user$project$InterfaceController$msgOpenDialogBox = function (db) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Open Dialog Box \"',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(db),
				'\"')),
		_user$project$InterfaceModel$openDialogBox(db));
};
var _user$project$InterfaceController$requireSaveAsker = F2(
	function (msg, needsSave) {
		var _p37 = msg;
		if (_p37.ctor === 'Msg') {
			return needsSave ? A2(
				_user$project$InterfaceModel$Msg,
				A2(_elm_lang$core$Basics_ops['++'], 'Ask ', _p37._0),
				function (_p38) {
					return A2(
						_user$project$InterfaceModel$openDialogBox,
						_user$project$InterfaceModel$AlertSave,
						function (old) {
							return _elm_lang$core$Native_Utils.update(
								old,
								{
									pendingFileOperation: _elm_lang$core$Maybe$Just(msg),
									fileOperationConfirmed: false
								});
						}(_p38));
				}) : msg;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'InterfaceController',
				{
					start: {line: 2725, column: 3},
					end: {line: 2736, column: 99}
				},
				_p37)('InterfaceController.requireSaveAsker shouldn\'t get a solver response message!!');
		}
	});
var _user$project$InterfaceController$msgAskOpen = function (filename) {
	return _user$project$InterfaceController$requireSaveAsker(
		_user$project$InterfaceController$msgOpen(filename));
};
var _user$project$InterfaceController$msgAskImportCode = _user$project$InterfaceController$requireSaveAsker(_user$project$InterfaceController$msgImportCode);
var _user$project$InterfaceController$msgAddArg = A2(
	_user$project$InterfaceModel$Msg,
	'Add Arg to Focused Function in Output',
	function (old) {
		var _p40 = A2(_user$project$FocusedEditingContext$maybeFocusedExp, old.editingContext, old.inputExp);
		if (_p40.ctor === 'Just') {
			var _p49 = _p40._0;
			var _p41 = _p49.val.e__;
			if (_p41.ctor === 'EFun') {
				var funcExp = _p49;
				var targetPPId = {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: funcExp.val.eid, _1: 1},
					_1: {
						ctor: '::',
						_0: 1 + _elm_lang$core$List$length(_p41._1),
						_1: {ctor: '[]'}
					}
				};
				var possibleArgEIds = function () {
					var domain = _elm_lang$core$Set$fromList(
						A2(
							_elm_lang$core$List$map,
							function (_p42) {
								return function (_) {
									return _.eid;
								}(
									function (_) {
										return _.val;
									}(_p42));
							},
							_user$project$Lang$flattenExpTree(_p41._2)));
					var expFilter = function (_p43) {
						return A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$core$Set$member,
							domain,
							function (_) {
								return _.eid;
							}(
								function (_) {
									return _.val;
								}(_p43)));
					};
					return A7(_user$project$ShapeWidgets$selectionsEIdsTouched, old.inputExp, old.slate, old.widgets, old.selectedFeatures, old.selectedShapes, old.selectedBlobs, expFilter);
				}();
				var results = A2(
					_elm_lang$core$List$sortBy,
					function (_p44) {
						var _p45 = _p44;
						var _p46 = _p45._0;
						return {
							ctor: '_Tuple2',
							_0: _p46.isSafe ? 0 : 1,
							_1: _p46.sortKey
						};
					},
					A2(
						_elm_lang$core$List$concatMap,
						function (eid) {
							var _p47 = A2(_user$project$LangTools$locationInProgram, old.inputExp, eid);
							var line = _p47._0;
							var col = _p47._1;
							return A2(
								_elm_lang$core$List$map,
								_user$project$InterfaceModel$setResultSortKey(
									{
										ctor: '::',
										_0: _elm_lang$core$Basics$toFloat(line),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Basics$toFloat(col),
											_1: {ctor: '[]'}
										}
									}),
								A4(_user$project$CodeMotion$addArg, old.syntax, eid, targetPPId, old.inputExp));
						},
						possibleArgEIds));
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						synthesisResultsDict: A3(_elm_lang$core$Dict$insert, 'Add Argument', results, old.synthesisResultsDict)
					});
			} else {
				var _p48 = _user$project$Utils$log('could not find func to add argument to, not focused on a function');
				return old;
			}
		} else {
			var _p50 = _user$project$Utils$log('could not find func to add argument to, not focused on a function');
			return old;
		}
	});
var _user$project$InterfaceController$msgUpdateRenameInOutputTextBox = function (newText) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(_elm_lang$core$Basics_ops['++'], 'Update Rename In Output: ', newText),
		function (old) {
			var _p51 = old.renamingInOutput;
			if (_p51.ctor === 'Just') {
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						renamingInOutput: _elm_lang$core$Maybe$Just(
							{ctor: '_Tuple4', _0: _p51._0._0, _1: _p51._0._1, _2: _p51._0._2, _3: newText})
					});
			} else {
				return old;
			}
		});
};
var _user$project$InterfaceController$msgActivateRenameInOutput = F3(
	function (pid, shapes, features) {
		return A2(
			_user$project$InterfaceModel$Msg,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Active Rename Box for PId ',
				_elm_lang$core$Basics$toString(pid)),
			function (old) {
				var oldPatStr = A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					A2(
						_elm_lang$core$Maybe$map,
						function (_p52) {
							return _user$project$Utils$squish(
								A2(_user$project$Syntax$patternUnparser, _user$project$Syntax$Elm, _p52));
						},
						A2(_user$project$Lang$findPatByPId, old.inputExp, pid)));
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						renamingInOutput: _elm_lang$core$Maybe$Just(
							{ctor: '_Tuple4', _0: pid, _1: shapes, _2: features, _3: oldPatStr})
					});
			});
	});
var _user$project$InterfaceController$msgDeselectList = function (idAsShape) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Deselect List',
		function (old) {
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					selectedShapes: A2(_user$project$Utils$removeAsSet, idAsShape, old.selectedShapes)
				});
		});
};
var _user$project$InterfaceController$msgClearPreview = A2(
	_user$project$InterfaceModel$Msg,
	'Clear Preview',
	function (old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{preview: _elm_lang$core$Maybe$Nothing});
	});
var _user$project$InterfaceController$showExpPreview = F2(
	function (old, exp) {
		var code = A2(_user$project$Syntax$unparser, old.syntax, exp);
		var reparsed = A2(
			_elm_lang$core$Maybe$withDefault,
			exp,
			_elm_lang$core$Result$toMaybe(
				A2(_user$project$Syntax$parser, old.syntax, code)));
		var _p53 = A2(_user$project$InterfaceModel$runAndResolve, old, reparsed);
		if (_p53.ctor === 'Ok') {
			var _p54 = _p53._0._1;
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					preview: _elm_lang$core$Maybe$Just(
						{
							ctor: '_Tuple2',
							_0: code,
							_1: _elm_lang$core$Result$Ok(
								{
									ctor: '_Tuple4',
									_0: _p53._0._0,
									_1: _p54,
									_2: _user$project$ShapeWidgets$computeAndRejiggerWidgetBounds(_p54),
									_3: _p53._0._2
								})
						})
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					preview: _elm_lang$core$Maybe$Just(
						{
							ctor: '_Tuple2',
							_0: code,
							_1: _elm_lang$core$Result$Err(_p53._0)
						})
				});
		}
	});
var _user$project$InterfaceController$showCodePreview = F2(
	function (old, code) {
		var _p55 = A2(_user$project$Syntax$parser, old.syntax, code);
		if (_p55.ctor === 'Ok') {
			return A2(_user$project$InterfaceController$showExpPreview, old, _p55._0);
		} else {
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					preview: _elm_lang$core$Maybe$Just(
						{
							ctor: '_Tuple2',
							_0: code,
							_1: _elm_lang$core$Result$Err(
								_user$project$ParserUtils$showError(_p55._0))
						})
				});
		}
	});
var _user$project$InterfaceController$msgPreview = function (expOrCode) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Preview',
		function (old) {
			var _p56 = expOrCode;
			if (_p56.ctor === 'Left') {
				return A2(_user$project$InterfaceController$showExpPreview, old, _p56._0);
			} else {
				return A2(_user$project$InterfaceController$showCodePreview, old, _p56._0);
			}
		});
};
var _user$project$InterfaceController$msgPauseResumeMovie = A2(
	_user$project$InterfaceModel$Msg,
	'Pause/Resume Movie',
	function (old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{runAnimation: !old.runAnimation});
	});
var _user$project$InterfaceController$msgRedraw = A2(
	_user$project$InterfaceModel$Msg,
	'Redraw',
	function (old) {
		var _p57 = A6(_user$project$LangSvg$fetchEverything, old.showPreludeOffsets, old.syntax, old.slideNumber, old.movieNumber, old.movieTime, old.inputVal);
		if (_p57.ctor === 'Ok') {
			return _elm_lang$core$Native_Utils.update(
				old,
				{slideCount: _p57._0._0, movieCount: _p57._0._1, movieDuration: _p57._0._2, movieContinue: _p57._0._3, slate: _p57._0._4});
		} else {
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					errorBox: _elm_lang$core$Maybe$Just(_p57._0)
				});
		}
	});
var _user$project$InterfaceController$msgSetLiveSyncDelay = function (b) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Live',
		function (m) {
			return _elm_lang$core$Native_Utils.update(
				m,
				{liveSyncDelay: b});
		});
};
var _user$project$InterfaceController$updateHeuristics = F2(
	function (heuristic, old) {
		var oldSyncOptions = old.syncOptions;
		var newSyncOptions = _elm_lang$core$Native_Utils.update(
			oldSyncOptions,
			{heuristicsMode: heuristic});
		var _p58 = old.outputMode;
		if (_p58.ctor === 'Live') {
			var _p59 = A7(
				_user$project$InterfaceModel$mkLive,
				old.syntax,
				newSyncOptions,
				old.slideNumber,
				old.movieNumber,
				old.movieTime,
				old.inputExp,
				{ctor: '_Tuple2', _0: old.inputVal, _1: old.widgets});
			if (_p59.ctor === 'Ok') {
				return _elm_lang$core$Native_Utils.update(
					old,
					{syncOptions: newSyncOptions, liveSyncInfo: _p59._0});
			} else {
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						syncOptions: newSyncOptions,
						errorBox: _elm_lang$core$Maybe$Just(_p59._0)
					});
			}
		} else {
			return _elm_lang$core$Native_Utils.update(
				old,
				{syncOptions: newSyncOptions});
		}
	});
var _user$project$InterfaceController$msgSetHeuristicsBiased = A2(
	_user$project$InterfaceModel$Msg,
	'Set Heuristics Biased',
	_user$project$InterfaceController$updateHeuristics(_user$project$Sync$HeuristicsBiased));
var _user$project$InterfaceController$msgSetHeuristicsNone = A2(
	_user$project$InterfaceModel$Msg,
	'Set Heuristics None',
	_user$project$InterfaceController$updateHeuristics(_user$project$Sync$HeuristicsNone));
var _user$project$InterfaceController$msgSetHeuristicsFair = A2(
	_user$project$InterfaceModel$Msg,
	'Set Heuristics Fair',
	_user$project$InterfaceController$updateHeuristics(_user$project$Sync$HeuristicsFair));
var _user$project$InterfaceController$msgSetOutputPrint = A2(
	_user$project$InterfaceModel$Msg,
	'Set Output Print',
	function (old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				outputMode: _user$project$InterfaceModel$Print(
					A2(_user$project$LangSvg$printSvg, old.showGhosts, old.slate))
			});
	});
var _user$project$InterfaceController$msgSetOutputLive = A2(
	_user$project$InterfaceModel$Msg,
	'Set Output Live',
	function (old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{outputMode: _user$project$InterfaceModel$Live});
	});
var _user$project$InterfaceController$msgToggleCodeBox = A2(
	_user$project$InterfaceModel$Msg,
	'Toggle Code Box',
	function (old) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{basicCodeBox: !old.basicCodeBox});
	});
var _user$project$InterfaceController$clearSynthesisResults = function (old) {
	return _elm_lang$core$Native_Utils.update(
		old,
		{preview: _elm_lang$core$Maybe$Nothing, synthesisResultsDict: _elm_lang$core$Dict$empty});
};
var _user$project$InterfaceController$msgSetAutoSynthesis = function (shouldBeOn) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Auto Synthesis',
		function (old) {
			return _user$project$InterfaceController$clearSynthesisResults(
				_elm_lang$core$Native_Utils.update(
					old,
					{autoSynthesis: shouldBeOn}));
		});
};
var _user$project$InterfaceController$cleanDedupSortSynthesisResults = F2(
	function (model, synthesisResults) {
		return A2(
			_elm_lang$core$List$sortBy,
			function (_p60) {
				var _p61 = _p60;
				return {
					ctor: '_Tuple3',
					_0: _user$project$LangTools$nodeCount(_p61._0.exp),
					_1: _p61._0.sortKey,
					_2: _p61._0.description
				};
			},
			A2(
				_user$project$Utils$dedupBy,
				function (_p62) {
					var _p63 = _p62;
					return A2(_user$project$Syntax$unparser, model.syntax, _p63._0.exp);
				},
				synthesisResults));
	});
var _user$project$InterfaceController$perhapsRunAutoSynthesis = F2(
	function (model, program) {
		return model.autoSynthesis ? A2(
			_user$project$InterfaceController$cleanDedupSortSynthesisResults,
			model,
			A2(_user$project$ExpressionBasedTransform$passiveSynthesisSearch, model, program)) : {ctor: '[]'};
	});
var _user$project$InterfaceController$doMakeEqual = function (old) {
	var synthesisResults = A8(_user$project$ValueBasedTransform$makeEqual, old.syntax, old.solutionsCache, old.inputExp, old.maybeEnv, old.selectedFeatures, old.slate, old.widgets, old.syncOptions);
	return _elm_lang$core$Native_Utils.update(
		old,
		{
			synthesisResultsDict: A3(
				_elm_lang$core$Dict$insert,
				'Make Equal',
				A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
				old.synthesisResultsDict)
		});
};
var _user$project$InterfaceController$msgMakeEqual = A2(_user$project$InterfaceModel$Msg, 'Make Equal', _user$project$InterfaceController$doMakeEqual);
var _user$project$InterfaceController$msgRelate = A2(
	_user$project$InterfaceModel$Msg,
	'Relate',
	function (old) {
		var synthesisResults = A8(_user$project$ValueBasedTransform$relate, old.syntax, old.solutionsCache, old.inputExp, old.maybeEnv, old.selectedFeatures, old.slate, old.widgets, old.syncOptions);
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				synthesisResultsDict: A3(
					_elm_lang$core$Dict$insert,
					'Relate',
					A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
					old.synthesisResultsDict)
			});
	});
var _user$project$InterfaceController$msgIndexedRelate = A2(
	_user$project$InterfaceModel$Msg,
	'Indexed Relate',
	function (old) {
		var synthesisResults = A7(_user$project$ValueBasedTransform$indexedRelate, old.syntax, old.inputExp, old.selectedFeatures, old.selectedShapes, old.slate, old.widgets, old.syncOptions);
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				synthesisResultsDict: A3(
					_elm_lang$core$Dict$insert,
					'Indexed Relate',
					A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
					old.synthesisResultsDict)
			});
	});
var _user$project$InterfaceController$msgAbstract = A2(
	_user$project$InterfaceModel$Msg,
	'Abstract',
	function (old) {
		var synthesisResults = _user$project$ValueBasedTransform$abstract(old.inputExp)(old.idToTypeAndContextThunk)(old.showPreludeOffsets)(old.editingContext)(old.selectedFeatures)(old.selectedShapes)(old.selectedBlobs)(old.slideNumber)(old.movieNumber)(old.movieTime)(old.syncOptions);
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				synthesisResultsDict: A3(
					_elm_lang$core$Dict$insert,
					'Abstract',
					A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
					old.synthesisResultsDict)
			});
	});
var _user$project$InterfaceController$msgFillPBEHole = F2(
	function (pbeHoleEId, synthesisResultsDictKey) {
		return A2(
			_user$project$InterfaceModel$Msg,
			synthesisResultsDictKey,
			function (old) {
				var synthesisResults = function () {
					var _p64 = A2(_user$project$InterfaceModel$runAndResolveAtContext, old, old.inputExp);
					if (_p64.ctor === 'Ok') {
						var relevantPBEHolesSeen = A2(
							_elm_lang$core$List$filter,
							function (_p65) {
								var _p66 = _p65;
								return _elm_lang$core$Native_Utils.eq(_p66._0.val.eid, pbeHoleEId);
							},
							_p64._0._4);
						return A2(
							_elm_lang$core$List$map,
							function (filledHole) {
								return A2(
									_user$project$InterfaceModel$synthesisResult,
									A2(_user$project$Syntax$unparser, old.syntax, filledHole),
									A3(_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace, pbeHoleEId, filledHole, old.inputExp));
							},
							A2(_user$project$FillPBEHole$pbeHoleFillings, old.solutionsCache, relevantPBEHolesSeen));
					} else {
						return {ctor: '[]'};
					}
				}();
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						synthesisResultsDict: A3(
							_elm_lang$core$Dict$insert,
							synthesisResultsDictKey,
							A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
							old.synthesisResultsDict)
					});
			});
	});
var _user$project$InterfaceController$msgRepeatByIndexedMerge = A2(
	_user$project$InterfaceModel$Msg,
	'Repeat by Indexed Merge',
	function (old) {
		var synthesisResults = function () {
			var eidSet = _elm_lang$core$Set$fromList(
				A7(
					_user$project$ShapeWidgets$selectionsEIdsTouched,
					old.inputExp,
					old.slate,
					old.widgets,
					old.selectedFeatures,
					old.selectedShapes,
					old.selectedBlobs,
					function (e) {
						return !_elm_lang$core$Native_Utils.eq(
							_user$project$Lang$childExps(e),
							{ctor: '[]'});
					}));
			var minCloneCount = A2(
				_elm_lang$core$Basics$max,
				2,
				_elm_lang$core$List$length(old.selectedShapes));
			return A5(
				_user$project$ExpressionBasedTransform$repeatByIndexedMerge,
				old,
				function (e) {
					return A2(_elm_lang$core$Set$member, e.val.eid, eidSet);
				},
				minCloneCount,
				2,
				old.inputExp);
		}();
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				synthesisResultsDict: A3(
					_elm_lang$core$Dict$insert,
					'Repeat by Indexed Merge',
					A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
					old.synthesisResultsDict)
			});
	});
var _user$project$InterfaceController$msgRepeatUsingFunction = F2(
	function (repeatFuncName, synthesisResultsDictKey) {
		return A2(
			_user$project$InterfaceModel$Msg,
			synthesisResultsDictKey,
			function (old) {
				var synthesisResults = _user$project$ValueBasedTransform$repeatUsingFunction(old.inputExp)(old.idToTypeAndContextThunk)(old.showPreludeOffsets)(old.editingContext)(old.maybeEnv)(repeatFuncName)(old.selectedFeatures)(old.selectedShapes)(old.selectedBlobs)(old.slideNumber)(old.movieNumber)(old.movieTime)(old.solutionsCache)(old.syncOptions);
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						synthesisResultsDict: A3(
							_elm_lang$core$Dict$insert,
							synthesisResultsDictKey,
							A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
							old.synthesisResultsDict)
					});
			});
	});
var _user$project$InterfaceController$msgRepeatUsingPointList = F2(
	function (pointListVal, synthesisResultsDictKey) {
		return A2(
			_user$project$InterfaceModel$Msg,
			synthesisResultsDictKey,
			function (old) {
				var synthesisResults = _user$project$ValueBasedTransform$repeatUsingPointList(old.inputExp)(old.showPreludeOffsets)(old.editingContext)(old.maybeEnv)(pointListVal)(old.selectedFeatures)(old.selectedShapes)(old.selectedBlobs)(old.slideNumber)(old.movieNumber)(old.movieTime)(old.solutionsCache)(old.syncOptions);
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						synthesisResultsDict: A3(
							_elm_lang$core$Dict$insert,
							synthesisResultsDictKey,
							A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
							old.synthesisResultsDict)
					});
			});
	});
var _user$project$InterfaceController$msgShowTerminationConditionOptions = F2(
	function (funcEId, scrutineeEId) {
		return A2(
			_user$project$InterfaceModel$Msg,
			'Show Termination Condition Options',
			function (old) {
				var synthesisResults = function () {
					var funcToIsSafePatToInsertArgValExpAndNewFuncBody = F2(
						function (func, fBody) {
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple4',
									_0: true,
									_1: _user$project$Lang$pVar('* NEW ARG *'),
									_2: _user$project$Lang$eHoleNamed('* NEW ARG *'),
									_3: fBody
								});
						});
					return A2(
						_elm_lang$core$List$map,
						function (result) {
							var program = _user$project$InterfaceModel$resultExp(result);
							var funcExp = A2(_user$project$LangTools$justFindExpByEId, program, funcEId);
							var argName = A3(
								_user$project$LangTools$nonCollidingName,
								'depth',
								1,
								_user$project$LangTools$identifiersSet(funcExp));
							var newFuncExp = A3(
								_user$project$Lang$replaceExpNodePreservingPrecedingWhitespace,
								scrutineeEId,
								A2(
									_user$project$Lang$eOp,
									_user$project$Lang$Lt,
									{
										ctor: '::',
										_0: _user$project$Lang$eVar(argName),
										_1: {
											ctor: '::',
											_0: _user$project$Lang$eConstDummyLoc(2),
											_1: {ctor: '[]'}
										}
									}),
								A3(
									_user$project$LangTools$renameIdentifier,
									'* NEW ARG *',
									argName,
									A2(
										_user$project$Lang$mapExp,
										function (e) {
											return _elm_lang$core$Native_Utils.eq(
												_user$project$LangTools$expToMaybeHoleName(e),
												_elm_lang$core$Maybe$Just('* NEW ARG *')) ? _user$project$Lang$eParens(
												A2(
													_user$project$Lang$eOp,
													_user$project$Lang$Minus,
													{
														ctor: '::',
														_0: _user$project$Lang$eVar0(argName),
														_1: {
															ctor: '::',
															_0: _user$project$Lang$eConstDummyLoc(1),
															_1: {ctor: '[]'}
														}
													})) : e;
										},
										funcExp)));
							var newProgram = A2(
								_user$project$Lang$mapExp,
								function (exp) {
									return _elm_lang$core$Native_Utils.eq(
										_user$project$LangTools$expToMaybeHoleName(exp),
										_elm_lang$core$Maybe$Just('* NEW ARG *')) ? A2(
										_user$project$Lang$replaceE__PreservingPrecedingWhitespace,
										exp,
										A4(
											_user$project$Lang$EConst,
											_user$project$Lang$space1,
											2,
											_user$project$Lang$dummyLoc,
											A3(_user$project$Lang$rangeSlider, _user$project$Lang$IntSlider, 1, 5))) : exp;
								},
								A3(_user$project$Lang$replaceExpNode, funcEId, newFuncExp, program));
							return A2(
								_user$project$InterfaceModel$setResultDescription,
								'Fixed depth',
								A2(_user$project$InterfaceModel$setResultExp, newProgram, result));
						},
						A4(
							_user$project$CodeMotion$addArg_,
							old.syntax,
							{
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple2', _0: funcEId, _1: 1},
								_1: {
									ctor: '::',
									_0: 1,
									_1: {ctor: '[]'}
								}
							},
							funcToIsSafePatToInsertArgValExpAndNewFuncBody,
							old.inputExp));
				}();
				var resultsKey = 'Termination Condition Options';
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						synthesisResultsDict: A3(
							_elm_lang$core$Dict$insert,
							resultsKey,
							A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
							old.synthesisResultsDict)
					});
			});
	});
var _user$project$InterfaceController$msgReorderInList = A2(
	_user$project$InterfaceModel$Msg,
	'Reorder in List',
	function (old) {
		var originalProgram = old.inputExp;
		var eidsInNonSingletonLists = _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				function (_p67) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(_p67));
				},
				_elm_lang$core$List$concat(
					A2(
						_elm_lang$core$List$filter,
						function (_p68) {
							return A2(
								F2(
									function (x, y) {
										return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
									}),
								2,
								_elm_lang$core$List$length(_p68));
						},
						A2(
							_elm_lang$core$List$filterMap,
							_user$project$LangTools$expToMaybeListHeads,
							_user$project$Lang$flattenExpTree(originalProgram))))));
		var interpretationsInsideLists = A7(
			_user$project$ShapeWidgets$selectionsSingleEIdInterpretations,
			originalProgram,
			old.slate,
			old.widgets,
			old.selectedFeatures,
			old.selectedShapes,
			old.selectedBlobs,
			function (_p69) {
				return A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$Set$member,
					eidsInNonSingletonLists,
					function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(_p69)));
			});
		var results = A2(
			_elm_lang$core$List$concatMap,
			function (eidInList) {
				var _p70 = A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$core$List$reverse,
					A2(_user$project$Lang$findWithAncestorsByEId, originalProgram, eidInList));
				if (((_p70.ctor === 'Just') && (_p70._0.ctor === '::')) && (_p70._0._1.ctor === '::')) {
					var _p86 = _p70._0._1._0;
					var _p71 = _p86.val.e__;
					if (_p71.ctor === 'EList') {
						var _p84 = _p71._1;
						var _p73 = A2(
							_user$project$Utils$findi,
							function (_p72) {
								return A2(
									F2(
										function (x, y) {
											return _elm_lang$core$Native_Utils.eq(x, y);
										}),
									eidInList,
									function (_) {
										return _.eid;
									}(
										function (_) {
											return _.val;
										}(
											_elm_lang$core$Tuple$second(_p72))));
							},
							_p84);
						if (_p73.ctor === 'Just') {
							var _p82 = _p73._0;
							var itemStr = _user$project$Utils$squish(
								A2(_user$project$Syntax$unparser, old.syntax, _p70._0._0));
							var itemCount = _elm_lang$core$List$length(_p84);
							var positions = A2(
								_user$project$Utils$dedupBy,
								function (_p74) {
									var _p75 = _p74;
									return _p75._0;
								},
								A2(
									_elm_lang$core$List$filter,
									function (_p76) {
										var _p77 = _p76;
										var _p78 = _p77._0;
										return (_elm_lang$core$Native_Utils.cmp(_p78, 1) > -1) && ((_elm_lang$core$Native_Utils.cmp(_p78, itemCount) < 1) && (!_elm_lang$core$Native_Utils.eq(_p78, _p82)));
									},
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 1, _1: 'to head'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: itemCount, _1: 'to end'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: _p82 - 1, _1: 'towards head'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: _p82 + 1, _1: 'towards end'},
													_1: {ctor: '[]'}
												}
											}
										}
									}));
							var _p79 = A2(_user$project$Utils$getRemovei1, _p82, _p84);
							var wsItem = _p79._0;
							var remaining = _p79._1;
							return A2(
								_elm_lang$core$List$map,
								function (_p80) {
									var _p81 = _p80;
									var newHeads = A3(_user$project$Utils$inserti, _p81._0, wsItem, remaining);
									var newList = A2(
										_user$project$LangTools$copyListWhitespace,
										_p86,
										A2(
											_user$project$Lang$replaceE__,
											_p86,
											A5(_user$project$Lang$EList, _p71._0, newHeads, _p71._2, _p71._3, _p71._4)));
									var newListStr = _user$project$Utils$squish(
										A2(_user$project$Syntax$unparser, old.syntax, newList));
									return A2(
										_user$project$InterfaceModel$synthesisResult,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Move ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												itemStr,
												A2(
													_elm_lang$core$Basics_ops['++'],
													' ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_p81._1,
														A2(_elm_lang$core$Basics_ops['++'], ': ', newListStr))))),
										A3(_user$project$Lang$replaceExpNode, _p86.val.eid, newList, originalProgram));
								},
								positions);
						} else {
							var _p83 = A2(_elm_lang$core$Debug$log, 'Reorder in List: Could not find item in parent list!!! (Should not happen!)', _p86);
							return {ctor: '[]'};
						}
					} else {
						var _p85 = A2(_elm_lang$core$Debug$log, 'Reorder in List: parent was not a list!!! (Should not happen!)', _p86);
						return {ctor: '[]'};
					}
				} else {
					var _p87 = _user$project$Utils$log('Reorder in List: didn\'t find interpretation and parent list!!! (Should not happen!)');
					return {ctor: '[]'};
				}
			},
			interpretationsInsideLists);
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				synthesisResultsDict: A3(
					_elm_lang$core$Dict$insert,
					'Reorder in List',
					A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, results),
					old.synthesisResultsDict)
			});
	});
var _user$project$InterfaceController$doGroup = function (old) {
	var originalProgram = old.inputExp;
	var maxId = _user$project$FastParser$maxId(originalProgram);
	var _p88 = {ctor: '_Tuple2', _0: maxId + 1, _1: maxId + 2};
	var insertedLetEId = _p88._0;
	var insertedBoundExpEId = _p88._1;
	var _p89 = A2(_user$project$FocusedEditingContext$contextExpAndEndOfDrawingContextExp, old.editingContext, originalProgram);
	var contextExp = _p89._0;
	var endOfDrawingContextExp = _p89._1;
	var logProgram = _user$project$LangTools$logProgram;
	var valsToGroup = A5(_user$project$ShapeWidgets$selectedValsInterpretingPoints, old.slate, old.widgets, old.selectedFeatures, old.selectedShapes, old.selectedBlobs);
	var groupTuple = A2(
		_user$project$Lang$setEId,
		insertedBoundExpEId,
		_user$project$Lang$eTuple(
			A3(
				_user$project$Lang$setExpListWhitespace,
				'',
				' ',
				A2(_elm_lang$core$List$map, _user$project$Lang$eHoleVal, valsToGroup))));
	var listsToTry = function () {
		var areAllHomogenousListsOfTheSameType = A2(
			_elm_lang$core$Debug$log,
			'doGroup, areAllHomogenousListsOfTheSameType',
			A2(
				_elm_lang$core$Maybe$withDefault,
				false,
				A2(
					_elm_lang$core$Maybe$map,
					_user$project$Types$allListsOrHomogenousTuplesOfSameTipe,
					A2(
						_elm_lang$core$Maybe$map,
						function (types) {
							var _p90 = A2(
								_elm_lang$core$List$map,
								function (_p91) {
									return _user$project$Utils$log(
										A2(_user$project$Syntax$typeUnparser, _user$project$Syntax$Elm, _p91));
								},
								types);
							return types;
						},
						_user$project$Utils$projJusts(
							A2(_elm_lang$core$List$map, _user$project$Types$valToMaybeType, valsToGroup))))));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: groupTuple,
				_1: {ctor: '[]'}
			},
			areAllHomogenousListsOfTheSameType ? {
				ctor: '::',
				_0: A2(
					_user$project$Lang$setEId,
					insertedBoundExpEId,
					A2(
						_user$project$Lang$eCall,
						'concat',
						{
							ctor: '::',
							_0: _user$project$Lang$clearEId(groupTuple),
							_1: {ctor: '[]'}
						})),
				_1: {ctor: '[]'}
			} : {ctor: '[]'});
	}();
	var synthesisResults = A2(
		_elm_lang$core$List$concatMap,
		function (initialGroupListWithHoles) {
			var _p92 = A6(
				_user$project$LangTools$newVariableVisibleTo,
				insertedLetEId,
				'group',
				1,
				initialGroupListWithHoles,
				{
					ctor: '::',
					_0: endOfDrawingContextExp.val.eid,
					_1: {ctor: '[]'}
				},
				originalProgram);
			var groupInitialName = _p92._0;
			var programWithList = _p92._1;
			var programWithListHolesFilled = A2(
				_elm_lang$core$Maybe$withDefault,
				originalProgram,
				_elm_lang$core$List$head(
					A5(_user$project$CodeMotion$resolveValueAndLocHoles, false, old.solutionsCache, old.syncOptions, old.maybeEnv, programWithList)));
			var programsWithListInOutput = A2(
				_elm_lang$core$List$map,
				_user$project$FastParser$freshen,
				_user$project$DrawAddShape$addShape(old)(
					_elm_lang$core$Basics$always(true))(_elm_lang$core$Maybe$Nothing)(
					_user$project$Lang$eVar(groupInitialName))(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(false)(programWithListHolesFilled));
			var programsPerhapsWithListInOutput = _elm_lang$core$Native_Utils.eq(
				programsWithListInOutput,
				{ctor: '[]'}) ? {
				ctor: '::',
				_0: _user$project$FastParser$freshen(programWithListHolesFilled),
				_1: {ctor: '[]'}
			} : programsWithListInOutput;
			return A2(
				_elm_lang$core$List$concatMap,
				function (programPerhapsWithListInOutput) {
					var groupBoundExp = A2(_user$project$LangTools$justFindExpByEId, programPerhapsWithListInOutput, insertedBoundExpEId);
					var insertedTuple = A2(
						_elm_lang$core$Maybe$withDefault,
						groupBoundExp,
						A2(
							_elm_lang$core$Maybe$andThen,
							_user$project$Utils$maybeUnwrap1,
							_user$project$LangTools$expToMaybeAppArgs(groupBoundExp)));
					var programWithOriginalUsesRemoved = function () {
						var _p93 = A2(
							_elm_lang$core$Maybe$withDefault,
							{ctor: '_Tuple2', _0: 0, _1: 0},
							A2(_user$project$DrawAddShape$maybeShapeCountAndListItemCountInContextOutput, old, programPerhapsWithListInOutput));
						var oldShapeCount = _p93._0;
						var oldListItemsCount = _p93._1;
						return A3(
							_user$project$Utils$foldl,
							programPerhapsWithListInOutput,
							F2(
								function (varEIdInTuple, program) {
									var possibleUsageEIdsToRemove = A2(
										_user$project$Utils$removeAsSet,
										varEIdInTuple,
										A2(
											_elm_lang$core$List$map,
											function (_p94) {
												return function (_) {
													return _.eid;
												}(
													function (_) {
														return _.val;
													}(_p94));
											},
											A2(_user$project$LangTools$allVarUsages, varEIdInTuple, program)));
									var maybeProgramWithItemRemovedFromOutput = A2(
										_user$project$Utils$mapFirstSuccess,
										function (varEIdToRemove) {
											var _p95 = A2(_user$project$CodeMotion$maybeDeleteEId, varEIdToRemove, program);
											if (_p95.ctor === 'Just') {
												var _p97 = _p95._0;
												var _p96 = A2(_user$project$DrawAddShape$maybeShapeCountAndListItemCountInContextOutput, old, _p97);
												if (_p96.ctor === 'Just') {
													return ((_elm_lang$core$Native_Utils.cmp(_p96._0._0, oldShapeCount) < 0) || (_elm_lang$core$Native_Utils.cmp(_p96._0._1, oldListItemsCount) < 0)) ? _elm_lang$core$Maybe$Just(_p97) : _elm_lang$core$Maybe$Nothing;
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										},
										possibleUsageEIdsToRemove);
									return A2(_elm_lang$core$Maybe$withDefault, program, maybeProgramWithItemRemovedFromOutput);
								}),
							A2(
								_elm_lang$core$List$map,
								function (_p98) {
									return function (_) {
										return _.eid;
									}(
										function (_) {
											return _.val;
										}(_p98));
								},
								A2(
									_elm_lang$core$List$filter,
									_user$project$Lang$isVar,
									A2(
										_elm_lang$core$List$map,
										_user$project$Lang$expEffectiveExp,
										_user$project$Lang$childExps(insertedTuple)))));
					}();
					var newGroupName = A3(
						_user$project$LangTools$nonCollidingName,
						A2(_user$project$LangTools$expNameForExp, insertedTuple, insertedTuple),
						1,
						A2(
							_user$project$LangTools$visibleIdentifiersAtEIds,
							programWithOriginalUsesRemoved,
							_elm_lang$core$Set$singleton(endOfDrawingContextExp.val.eid)));
					var programWithOriginalUsesRemovedGroupRenamed = A3(
						_user$project$Lang$mapExpNode,
						insertedLetEId,
						function (letExp) {
							var oldName = A2(
								_elm_lang$core$Maybe$withDefault,
								'grumblecakes',
								_user$project$LangTools$patToMaybeIdent(
									_user$project$LangTools$expToLetPat(letExp)));
							return A3(
								_user$project$LangTools$renameVarUntilBound,
								oldName,
								newGroupName,
								A3(
									_user$project$LangTools$setPatName,
									{
										ctor: '_Tuple2',
										_0: {ctor: '_Tuple2', _0: insertedLetEId, _1: 1},
										_1: {ctor: '[]'}
									},
									newGroupName,
									letExp));
						},
						programWithOriginalUsesRemoved);
					var resultBaseDescription = _user$project$Utils$squish(
						A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, groupBoundExp));
					var groupWithDefinitionsGatheredResults = A4(
						_user$project$CodeMotion$gatherUniqueDependencies,
						A2(_elm_lang$core$Basics_ops['++'], resultBaseDescription, ' with dependencies gathered'),
						insertedBoundExpEId,
						programWithOriginalUsesRemovedGroupRenamed,
						F2(
							function (pat, boundExp) {
								return true;
							}));
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(_user$project$InterfaceModel$synthesisResult, resultBaseDescription, programWithOriginalUsesRemovedGroupRenamed),
							_1: {ctor: '[]'}
						},
						groupWithDefinitionsGatheredResults);
				},
				programsPerhapsWithListInOutput);
		},
		listsToTry);
	return _elm_lang$core$Native_Utils.update(
		old,
		{
			synthesisResultsDict: A3(
				_elm_lang$core$Dict$insert,
				'Group',
				A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
				old.synthesisResultsDict)
		});
};
var _user$project$InterfaceController$msgGroup = A2(_user$project$InterfaceModel$Msg, 'Group', _user$project$InterfaceController$doGroup);
var _user$project$InterfaceController$msgMerge = A2(
	_user$project$InterfaceModel$Msg,
	'Merge',
	function (old) {
		var synthesisResults = function () {
			var eidSet = _elm_lang$core$Set$fromList(
				A7(
					_user$project$ShapeWidgets$selectionsEIdsTouched,
					old.inputExp,
					old.slate,
					old.widgets,
					old.selectedFeatures,
					old.selectedShapes,
					old.selectedBlobs,
					function (e) {
						return !_elm_lang$core$Native_Utils.eq(
							_user$project$Lang$childExps(e),
							{ctor: '[]'});
					}));
			var minCloneCount = A2(
				_elm_lang$core$Basics$max,
				2,
				_elm_lang$core$List$length(old.selectedShapes));
			return A4(
				_user$project$ExpressionBasedTransform$cloneEliminationSythesisResults,
				function (e) {
					return A2(
						_user$project$Utils$anyOverlapListSet,
						_user$project$Lang$expEffectiveEIds(e),
						eidSet);
				},
				minCloneCount,
				2,
				old.inputExp);
		}();
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				synthesisResultsDict: A3(
					_elm_lang$core$Dict$insert,
					'Merge',
					A2(_user$project$InterfaceController$cleanDedupSortSynthesisResults, old, synthesisResults),
					old.synthesisResultsDict)
			});
	});
var _user$project$InterfaceController$msgHoverSynthesisResult = F2(
	function (resultsKey, pathByIndices) {
		return A2(
			_user$project$InterfaceModel$Msg,
			'Hover SynthesisResult',
			function (old) {
				var maybeFindResult = F2(
					function (path, results) {
						var _p99 = path;
						if (_p99.ctor === '[]') {
							return _elm_lang$core$Maybe$Nothing;
						} else {
							if (_p99._1.ctor === '[]') {
								return A2(_user$project$Utils$maybeGeti0, _p99._0, results);
							} else {
								return A2(
									_elm_lang$core$Maybe$andThen,
									function (_p100) {
										var _p101 = _p100;
										return A2(
											_elm_lang$core$Maybe$andThen,
											maybeFindResult(_p99._1),
											_p101._0.children);
									},
									A2(_user$project$Utils$maybeGeti0, _p99._0, results));
							}
						}
					});
				var setResultChildren = F3(
					function (path, childResults, oldResults) {
						var _p102 = path;
						if (_p102.ctor === '[]') {
							return oldResults;
						} else {
							if (_p102._1.ctor === '[]') {
								return A3(
									_user$project$Utils$getReplacei0,
									_p102._0,
									function (_p103) {
										var _p104 = _p103;
										return _user$project$InterfaceModel$SynthesisResult(
											_elm_lang$core$Native_Utils.update(
												_p104._0,
												{
													children: _elm_lang$core$Maybe$Just(childResults)
												}));
									},
									oldResults);
							} else {
								return A3(
									_user$project$Utils$getReplacei0,
									_p102._0,
									function (_p105) {
										var _p106 = _p105;
										var _p107 = _p106._0;
										return _user$project$InterfaceModel$SynthesisResult(
											_elm_lang$core$Native_Utils.update(
												_p107,
												{
													children: _elm_lang$core$Maybe$Just(
														A3(
															setResultChildren,
															_p102._1,
															childResults,
															A2(
																_elm_lang$core$Maybe$withDefault,
																{ctor: '[]'},
																_p107.children)))
												}));
									},
									oldResults);
							}
						}
					});
				var oldResults = A3(
					_user$project$Utils$getWithDefault,
					resultsKey,
					{ctor: '[]'},
					old.synthesisResultsDict);
				var _p108 = A2(maybeFindResult, pathByIndices, oldResults);
				if (_p108.ctor === 'Just') {
					var _p110 = _p108._0._0.exp;
					var newModel = _elm_lang$core$Native_Utils.update(
						old,
						{hoveredSynthesisResultPathByIndices: pathByIndices});
					var newModel2 = function () {
						var _p109 = {ctor: '_Tuple2', _0: old.autoSynthesis, _1: _p108._0._0.children};
						_v41_2:
						do {
							if (_p109.ctor === '_Tuple2') {
								if (_p109._1.ctor === 'Just') {
									return newModel;
								} else {
									if (_p109._0 === false) {
										return newModel;
									} else {
										break _v41_2;
									}
								}
							} else {
								break _v41_2;
							}
						} while(false);
						var childResults = A2(
							_user$project$InterfaceController$cleanDedupSortSynthesisResults,
							newModel,
							A2(_user$project$ExpressionBasedTransform$passiveSynthesisSearch, newModel, _p110));
						var newTopLevelResults = A3(
							_elm_lang$core$Dict$insert,
							resultsKey,
							A3(setResultChildren, pathByIndices, childResults, oldResults),
							old.synthesisResultsDict);
						return _elm_lang$core$Native_Utils.update(
							newModel,
							{synthesisResultsDict: newTopLevelResults, hoveredSynthesisResultPathByIndices: pathByIndices});
					}();
					return A2(_user$project$InterfaceController$showExpPreview, newModel2, _p110);
				} else {
					return _elm_lang$core$Native_Utils.update(
						old,
						{
							preview: _elm_lang$core$Maybe$Nothing,
							hoveredSynthesisResultPathByIndices: {ctor: '[]'}
						});
				}
			});
	});
var _user$project$InterfaceController$cleanSynthesisResult = function (_p111) {
	var _p112 = _p111;
	return _user$project$InterfaceModel$SynthesisResult(
		{
			description: A2(_elm_lang$core$Basics_ops['++'], _p112._0.description, ' → Cleaned'),
			exp: _user$project$LangSimplify$cleanCode(_p112._0.exp),
			isSafe: _p112._0.isSafe,
			sortKey: _p112._0.sortKey,
			children: _p112._0.children
		});
};
var _user$project$InterfaceController$msgKeyUp = function (keyCode) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Key Up ',
			_elm_lang$core$Basics$toString(keyCode)),
		function (old) {
			return _user$project$Keys$isCommandKey(keyCode) ? _elm_lang$core$Native_Utils.update(
				old,
				{
					keysDown: A2(
						_elm_lang$core$List$filter,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							})(_user$project$Keys$keyShift),
						old.keysDown)
				}) : _elm_lang$core$Native_Utils.update(
				old,
				{
					keysDown: A2(_user$project$Utils$removeAsSet, keyCode, old.keysDown)
				});
		});
};
var _user$project$InterfaceController$msgKeyPress = function (keyCode) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Key Press ',
			_elm_lang$core$Basics$toString(keyCode)),
		function (old) {
			return old;
		});
};
var _user$project$InterfaceController$isKeyDown = F2(
	function (keyCode, model) {
		return A2(_elm_lang$core$List$member, keyCode, model.keysDown);
	});
var _user$project$InterfaceController$refreshInputExp = function (old) {
	var parseResult = A2(_user$project$Syntax$parser, old.syntax, old.code);
	var _p113 = function () {
		var _p114 = parseResult;
		if (_p114.ctor === 'Ok') {
			return {ctor: '_Tuple2', _0: _p114._0, _1: true};
		} else {
			return {ctor: '_Tuple2', _0: old.inputExp, _1: false};
		}
	}();
	var newInputExp = _p113._0;
	var codeClean = _p113._1;
	return _elm_lang$core$Native_Utils.update(
		old,
		{inputExp: newInputExp, codeClean: codeClean});
};
var _user$project$InterfaceController$msgSetSelectedDeuceTool = F2(
	function (useTextSelect, cachedDeuceTool) {
		var maybeTextSelect = useTextSelect ? function (_p115) {
			return A2(
				_user$project$InterfaceController$textSelect,
				false,
				_user$project$InterfaceController$refreshInputExp(_p115));
		} : _elm_lang$core$Basics$identity;
		var selectedDeuceToolUpdater = function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					selectedDeuceTool: _elm_lang$core$Maybe$Just(cachedDeuceTool),
					deuceRightClickMenuMode: _elm_lang$core$Maybe$Nothing
				});
		};
		return A2(
			_user$project$InterfaceModel$Msg,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Set Selected Deuce Tool ',
				_elm_lang$core$Basics$toString(
					function (_) {
						return _.name;
					}(
						_user$project$Utils$fst3(cachedDeuceTool)))),
			function (_p116) {
				return maybeTextSelect(
					selectedDeuceToolUpdater(_p116));
			});
	});
var _user$project$InterfaceController$msgDeuceRightClick = function (menuMode) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Deuce Right Click',
		function (model) {
			if (model.enableDeuceTextSelection && _user$project$InterfaceModel$noCodeWidgetsSelected(model)) {
				var modelAfterTextSelection = A2(
					_user$project$InterfaceController$textSelect,
					true,
					_user$project$InterfaceController$refreshInputExp(model));
				return _user$project$InterfaceModel$noCodeWidgetsSelected(modelAfterTextSelection) ? model : A4(_user$project$InterfaceModel$showDeuceRightClickMenu, _user$project$SleekLayout$deuceRightClickMenuMouseOffset.x, _user$project$SleekLayout$deuceRightClickMenuMouseOffset.y, menuMode, modelAfterTextSelection);
			} else {
				return model;
			}
		});
};
var _user$project$InterfaceController$resetDeucePopupPanelPosition = function (m) {
	var oldPopupPanelPositions = m.popupPanelPositions;
	var newPopupPanelPositions = _elm_lang$core$Native_Utils.update(
		oldPopupPanelPositions,
		{
			deuce: {ctor: '_Tuple2', _0: 400, _1: 400}
		});
	return _elm_lang$core$Native_Utils.update(
		m,
		{popupPanelPositions: newPopupPanelPositions});
};
var _user$project$InterfaceController$msgOutputCanvasUpdate = function (outputCanvasInfo) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Output Canvas Update',
		function (old) {
			return _elm_lang$core$Native_Utils.update(
				old,
				{outputCanvasInfo: outputCanvasInfo});
		});
};
var _user$project$InterfaceController$msgUserHasTyped = A2(
	_user$project$InterfaceModel$Msg,
	'User Has Typed',
	function (model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{deuceState: _user$project$DeuceWidgets$emptyDeuceState});
	});
var _user$project$InterfaceController$msgAceUpdate = function (aceCodeBoxInfo) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Ace Update',
		function (old) {
			if (!_elm_lang$core$Native_Utils.eq(old.preview, _elm_lang$core$Maybe$Nothing)) {
				return old;
			} else {
				var needsSave = !_elm_lang$core$Native_Utils.eq(
					old.lastSaveState,
					_elm_lang$core$Maybe$Just(aceCodeBoxInfo.code));
				return _elm_lang$core$Native_Utils.update(
					old,
					{code: aceCodeBoxInfo.code, codeBoxInfo: aceCodeBoxInfo.codeBoxInfo, needsSave: needsSave});
			}
		});
};
var _user$project$InterfaceController$msgVisibilityChange = function (visibility) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Visibility Change',
		function (model) {
			var _p117 = visibility;
			if (_p117.ctor === 'Visible') {
				return model;
			} else {
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						keysDown: {ctor: '[]'}
					});
			}
		});
};
var _user$project$InterfaceController$msgCodeUpdate = function (s) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Code Update',
		function (old) {
			return _elm_lang$core$Native_Utils.update(
				old,
				{code: s});
		});
};
var _user$project$InterfaceController$msgWindowDimensions = function (wh) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Window Dimensions',
		function (old) {
			return _elm_lang$core$Native_Utils.update(
				old,
				{dimensions: wh});
		});
};
var _user$project$InterfaceController$msgNoop = A2(_user$project$InterfaceModel$Msg, 'Noop', _elm_lang$core$Basics$identity);
var _user$project$InterfaceController$fileMessageError = function (err) {
	return A2(_elm_lang$core$Debug$log, err, _user$project$InterfaceController$msgNoop);
};
var _user$project$InterfaceController$iconCommand = function (filename) {
	var potentialIconName = filename.name;
	return A2(_elm_lang$core$List$member, potentialIconName, _user$project$InterfaceModel$iconNames) ? {
		ctor: '::',
		_0: _user$project$FileHandler$sendMessage(
			_user$project$FileHandler$RequestIcon(potentialIconName)),
		_1: {ctor: '[]'}
	} : {ctor: '[]'};
};
var _user$project$InterfaceController$issueCommand = F3(
	function (msg, oldModel, newModel) {
		var _p118 = msg;
		if (_p118.ctor === 'Msg') {
			var _p120 = _p118._0;
			var _p119 = _p120;
			switch (_p119) {
				case 'Toggle Code Box':
					return newModel.basicCodeBox ? _elm_lang$core$Platform_Cmd$none : _user$project$AceCodeBox$initializeAndDisplay(newModel);
				case 'Save As':
					return (!_elm_lang$core$Native_Utils.eq(newModel.filename.name, _user$project$InterfaceModel$bufferName)) ? _user$project$FileHandler$sendMessage(
						A2(_user$project$FileHandler$Write, newModel.filename, newModel.code)) : _elm_lang$core$Platform_Cmd$none;
				case 'Save':
					return (!_elm_lang$core$Native_Utils.eq(newModel.filename.name, _user$project$InterfaceModel$bufferName)) ? _user$project$FileHandler$sendMessage(
						A2(_user$project$FileHandler$Write, newModel.filename, newModel.code)) : _user$project$FileHandler$sendMessage(_user$project$FileHandler$RequestFileIndex);
				case 'Confirm Write':
					return _elm_lang$core$Platform_Cmd$batch(
						_user$project$InterfaceController$iconCommand(newModel.filename));
				case 'Open':
					return _user$project$FileHandler$sendMessage(
						_user$project$FileHandler$RequestFile(newModel.filename));
				case 'Delete':
					return _user$project$FileHandler$sendMessage(
						_user$project$FileHandler$Delete(newModel.fileToDelete));
				case 'Confirm Delete':
					return _elm_lang$core$Platform_Cmd$batch(
						_user$project$InterfaceController$iconCommand(newModel.fileToDelete));
				case 'Export Code':
					return _user$project$FileHandler$sendMessage(
						A2(
							_user$project$FileHandler$Download,
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$InterfaceModel$prettyFilename, _user$project$InterfaceModel$WithoutExtension, newModel),
								'.little'),
							newModel.code));
				case 'Export SVG':
					return _user$project$FileHandler$sendMessage(
						A2(
							_user$project$FileHandler$Download,
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$InterfaceModel$prettyFilename, _user$project$InterfaceModel$WithoutExtension, newModel),
								'.svg'),
							A2(_user$project$LangSvg$printSvg, newModel.showGhosts, newModel.slate)));
				case 'Import Code':
					return _user$project$FileHandler$sendMessage(
						_user$project$FileHandler$RequestUploadedFile(_user$project$InterfaceModel$importCodeFileInputId));
				case 'Ace Update':
					return (newModel.autosave && newModel.needsSave) ? _user$project$FileHandler$sendMessage(
						A2(_user$project$FileHandler$Write, newModel.filename, newModel.code)) : _elm_lang$core$Platform_Cmd$none;
				case 'Enable Text Edits':
					return _user$project$AceCodeBox$setReadOnly(false);
				case 'Disable Text Edits':
					return _user$project$AceCodeBox$setReadOnly(true);
				default:
					return _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(_p120, 'Update Font Size') ? _user$project$AceCodeBox$updateFontSize(newModel) : (((!_elm_lang$core$Native_Utils.eq(newModel.code, oldModel.code)) || ((!_elm_lang$core$Native_Utils.eq(newModel.codeBoxInfo, oldModel.codeBoxInfo)) || ((!_elm_lang$core$Native_Utils.eq(newModel.preview, oldModel.preview)) || (_elm_lang$core$Native_Utils.eq(_p120, 'Turn Off Caption') || (_elm_lang$core$Native_Utils.eq(_p120, 'Mouse Enter CodeBox') || (_elm_lang$core$Native_Utils.eq(_p120, 'Mouse Leave CodeBox') || _elm_lang$core$Native_Utils.eq(_p120, 'Call Update'))))))) ? _user$project$AceCodeBox$display(newModel) : (_elm_lang$core$Native_Utils.eq(_p120, 'Drag Layout Widget Trigger') ? _user$project$AceCodeBox$resize(newModel) : ((_elm_lang$core$Native_Utils.eq(_p120, 'Toggle Output') && _elm_lang$core$Native_Utils.eq(
								newModel.outputMode,
								_user$project$InterfaceModel$PrintScopeGraph(_elm_lang$core$Maybe$Nothing))) ? _user$project$DependenceGraph$render(
								_user$project$DependenceGraph$compute(newModel.inputExp)) : (newModel.runAnimation ? _user$project$AnimationLoop$requestFrame(
								{ctor: '_Tuple0'}) : _elm_lang$core$Platform_Cmd$none)))),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$String$startsWith, 'New', _p120) ? _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: _user$project$AceCodeBox$resetScroll(newModel),
										_1: {
											ctor: '::',
											_0: _user$project$OutputCanvas$resetScroll,
											_1: {ctor: '[]'}
										}
									}) : _elm_lang$core$Platform_Cmd$none,
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$core$String$startsWith, 'Read File', _p120) ? _user$project$OutputCanvas$resetScroll : _elm_lang$core$Platform_Cmd$none,
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$core$String$startsWith, 'msgMouseClickDeuceWidget', _p120) ? _user$project$DeucePopupPanelInfo$requestDeucePopupPanelInfo(
											{ctor: '_Tuple0'}) : _elm_lang$core$Platform_Cmd$none,
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$core$String$startsWith, 'Open Dialog Box', _p120) ? _user$project$FileHandler$sendMessage(_user$project$FileHandler$RequestFileIndex) : _elm_lang$core$Platform_Cmd$none,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.eq(_p120, 'Set Color Scheme') ? _user$project$ColorScheme$updateColorScheme(newModel.colorScheme) : _elm_lang$core$Platform_Cmd$none,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						});
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'InterfaceController',
				{
					start: {line: 1019, column: 3},
					end: {line: 1146, column: 95}
				},
				_p118)('InterfaceController.issueCommand shouldn\'t get a solver response message!!');
		}
	});
var _user$project$InterfaceController$updateCommands = function (model) {
	var ifNeedsUpdate = F2(
		function (get, f) {
			var up = get(model);
			return _user$project$Updatable$needsUpdate(up) ? {
				ctor: '::',
				_0: f(
					_user$project$Updatable$extract(up)),
				_1: {ctor: '[]'}
			} : {ctor: '[]'};
		});
	return _elm_lang$core$List$concat(
		{
			ctor: '::',
			_0: A2(
				ifNeedsUpdate,
				function (_) {
					return _.enableTextEdits;
				},
				function (_p122) {
					return _user$project$AceCodeBox$setReadOnly(!_p122);
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$InterfaceController$debugModel = F3(
	function (get, old, $new) {
		var returnValue = {ctor: '_Tuple2', _0: $new, _1: _elm_lang$core$Platform_Cmd$none};
		var newProperty = get($new);
		var oldProperty = get(old);
		if (!_elm_lang$core$Native_Utils.eq(oldProperty, newProperty)) {
			var _p123 = A2(_elm_lang$core$Debug$log, '', newProperty);
			return returnValue;
		} else {
			return returnValue;
		}
	});
var _user$project$InterfaceController$handleOutputSelectionChanges = F2(
	function (oldModel, newModel) {
		if (_elm_lang$core$Native_Utils.eq(oldModel.selectedFeatures, newModel.selectedFeatures) && (_elm_lang$core$Native_Utils.eq(oldModel.selectedShapes, newModel.selectedShapes) && _elm_lang$core$Native_Utils.eq(oldModel.selectedBlobs, newModel.selectedBlobs))) {
			return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			var finalModel = _elm_lang$core$Native_Utils.update(
				newModel,
				{synthesisResultsDict: _elm_lang$core$Dict$empty});
			return {ctor: '_Tuple2', _0: finalModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$InterfaceController$handleSyntaxHook = F2(
	function (oldModel, newModel) {
		var cmd = (!_elm_lang$core$Native_Utils.eq(newModel.syntax, oldModel.syntax)) ? _user$project$SyntaxHighlight$sendMessage(
			_user$project$SyntaxHighlight$SetSyntax(newModel.syntax)) : _elm_lang$core$Platform_Cmd$none;
		return {ctor: '_Tuple2', _0: newModel, _1: cmd};
	});
var _user$project$InterfaceController$handleSavedSelectionsHook = F2(
	function (oldModel, newModel) {
		if (_elm_lang$core$Native_Utils.eq(oldModel.preview, _elm_lang$core$Maybe$Nothing) && (!_elm_lang$core$Native_Utils.eq(newModel.preview, _elm_lang$core$Maybe$Nothing))) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					newModel,
					{
						savedSelections: _elm_lang$core$Maybe$Just(newModel.codeBoxInfo.selections)
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			if ((!_elm_lang$core$Native_Utils.eq(oldModel.preview, _elm_lang$core$Maybe$Nothing)) && _elm_lang$core$Native_Utils.eq(newModel.preview, _elm_lang$core$Maybe$Nothing)) {
				var _p124 = newModel.savedSelections;
				if (_p124.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							newModel,
							{savedSelections: _elm_lang$core$Maybe$Nothing}),
						_1: _user$project$AceCodeBox$setSelections(_p124._0)
					};
				} else {
					return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
			} else {
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			}
		}
	});
var _user$project$InterfaceController$onClickPrimaryZone = F4(
	function (i, k, realZone, old) {
		var hoveredCrosshairs_ = function () {
			var _p125 = _user$project$ShapeWidgets$zoneToMaybePointFeature(realZone);
			if (_p125.ctor === 'Just') {
				return A2(
					_elm_lang$core$Set$insert,
					{ctor: '_Tuple2', _0: i, _1: _p125._0},
					old.hoveredCrosshairs);
			} else {
				return old.hoveredCrosshairs;
			}
		}();
		var _p126 = function () {
			if (_elm_lang$core$Native_Utils.cmp(i, -2) < 0) {
				if (_elm_lang$core$Native_Utils.eq(realZone, _user$project$ShapeWidgets$ZOffset1D)) {
					var selectableFeatureToToggle = A2(
						_user$project$ShapeWidgets$ShapeFeature,
						i,
						_user$project$ShapeWidgets$DFeat(_user$project$ShapeWidgets$Offset));
					var update = A2(_elm_lang$core$List$member, selectableFeatureToToggle, old.selectedFeatures) ? _user$project$Utils$removeAsSet : _user$project$Utils$addAsSet;
					return {
						ctor: '_Tuple3',
						_0: A2(update, selectableFeatureToToggle, old.selectedFeatures),
						_1: old.selectedShapes,
						_2: old.selectedBlobs
					};
				} else {
					return {ctor: '_Tuple3', _0: old.selectedFeatures, _1: old.selectedShapes, _2: old.selectedBlobs};
				}
			} else {
				var toggleThisShape = function (_p127) {
					var _p128 = _p127;
					return A2(_elm_lang$core$List$member, i, old.selectedShapes) ? (_elm_lang$core$Native_Utils.eq(
						old.keysDown,
						{
							ctor: '::',
							_0: _user$project$Keys$keyShift,
							_1: {ctor: '[]'}
						}) ? A2(_user$project$Utils$removeAsSet, i, old.selectedShapes) : old.selectedShapes) : (_elm_lang$core$Native_Utils.eq(
						old.keysDown,
						{
							ctor: '::',
							_0: _user$project$Keys$keyShift,
							_1: {ctor: '[]'}
						}) ? A2(_user$project$Utils$addAsSet, i, old.selectedShapes) : {
						ctor: '::',
						_0: i,
						_1: {ctor: '[]'}
					});
				};
				var selectBlob = function (blobId) {
					return A2(_elm_lang$core$Dict$member, blobId, old.selectedBlobs) ? (_elm_lang$core$Native_Utils.eq(
						old.keysDown,
						{
							ctor: '::',
							_0: _user$project$Keys$keyShift,
							_1: {ctor: '[]'}
						}) ? A2(_elm_lang$core$Dict$remove, blobId, old.selectedBlobs) : old.selectedBlobs) : (_elm_lang$core$Native_Utils.eq(
						old.keysDown,
						{
							ctor: '::',
							_0: _user$project$Keys$keyShift,
							_1: {ctor: '[]'}
						}) ? A3(_elm_lang$core$Dict$insert, blobId, i, old.selectedBlobs) : A2(_elm_lang$core$Dict$singleton, blobId, i));
				};
				var maybeBlobId = function () {
					var _p129 = A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.interpreted;
						},
						A2(
							_elm_lang$core$Dict$get,
							i,
							_elm_lang$core$Tuple$second(old.slate)));
					if ((_p129.ctor === 'Just') && (_p129._0.ctor === 'SvgNode')) {
						return _user$project$LangSvg$maybeFindBlobId(_p129._0._1);
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'InterfaceController',
							{
								start: {line: 414, column: 9},
								end: {line: 416, column: 75}
							},
							_p129)('onClickPrimaryZone');
					}
				}();
				var _p131 = {ctor: '_Tuple3', _0: k, _1: realZone, _2: maybeBlobId};
				_v51_4:
				do {
					if (_p131.ctor === '_Tuple3') {
						if (_p131._2.ctor === 'Just') {
							switch (_p131._1.ctor) {
								case 'ZLineEdge':
									if (_p131._0 === 'line') {
										return {
											ctor: '_Tuple3',
											_0: old.selectedFeatures,
											_1: toggleThisShape(
												{ctor: '_Tuple0'}),
											_2: selectBlob(_p131._2._0)
										};
									} else {
										break _v51_4;
									}
								case 'ZInterior':
									return {
										ctor: '_Tuple3',
										_0: old.selectedFeatures,
										_1: toggleThisShape(
											{ctor: '_Tuple0'}),
										_2: selectBlob(_p131._2._0)
									};
								default:
									break _v51_4;
							}
						} else {
							switch (_p131._1.ctor) {
								case 'ZLineEdge':
									if (_p131._0 === 'line') {
										return {
											ctor: '_Tuple3',
											_0: old.selectedFeatures,
											_1: toggleThisShape(
												{ctor: '_Tuple0'}),
											_2: old.selectedBlobs
										};
									} else {
										break _v51_4;
									}
								case 'ZInterior':
									return {
										ctor: '_Tuple3',
										_0: old.selectedFeatures,
										_1: toggleThisShape(
											{ctor: '_Tuple0'}),
										_2: old.selectedBlobs
									};
								default:
									break _v51_4;
							}
						}
					} else {
						break _v51_4;
					}
				} while(false);
				return {ctor: '_Tuple3', _0: old.selectedFeatures, _1: old.selectedShapes, _2: old.selectedBlobs};
			}
		}();
		var selectedFeatures_ = _p126._0;
		var selectedShapes_ = _p126._1;
		var selectedBlobs_ = _p126._2;
		return _elm_lang$core$Native_Utils.update(
			old,
			{hoveredCrosshairs: hoveredCrosshairs_, selectedFeatures: selectedFeatures_, selectedShapes: selectedShapes_, selectedBlobs: selectedBlobs_});
	});
var _user$project$InterfaceController$maybeClickableToPointWithSnap = F2(
	function (_p132, maybeClickable) {
		var _p133 = _p132;
		var _p134 = maybeClickable;
		if (_p134.ctor === 'Just') {
			var _p136 = _p134._0._1;
			var _p135 = _p134._0._0;
			return {
				ctor: '_Tuple2',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$round(
						_user$project$Lang$valToNum(_p135)),
					_1: _user$project$InterfaceModel$SnapVal(_p135)
				},
				_1: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$round(
						_user$project$Lang$valToNum(_p136)),
					_1: _user$project$InterfaceModel$SnapVal(_p136)
				}
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: _p133._0, _1: _user$project$InterfaceModel$NoSnap},
				_1: {ctor: '_Tuple2', _0: _p133._1, _1: _user$project$InterfaceModel$NoSnap}
			};
		}
	});
var _user$project$InterfaceController$rewriteInnerMostExpToMain = function (exp) {
	rewriteInnerMostExpToMain:
	while (true) {
		var _p137 = exp.val.e__;
		switch (_p137.ctor) {
			case 'EComment':
				var _v55 = _p137._2;
				exp = _v55;
				continue rewriteInnerMostExpToMain;
			case 'EOption':
				var _v56 = _p137._4;
				exp = _v56;
				continue rewriteInnerMostExpToMain;
			case 'ETyp':
				var _v57 = _p137._3;
				exp = _v57;
				continue rewriteInnerMostExpToMain;
			case 'ETypeAlias':
				var _v58 = _p137._3;
				exp = _v58;
				continue rewriteInnerMostExpToMain;
			case 'ELet':
				return A2(
					_user$project$Lang$replaceE__,
					exp,
					A9(
						_user$project$Lang$ELet,
						_p137._0,
						_p137._1,
						_p137._2,
						_p137._3,
						_p137._4,
						_p137._5,
						_p137._6,
						_user$project$InterfaceController$rewriteInnerMostExpToMain(_p137._7),
						_p137._8));
			default:
				return A2(
					_user$project$Lang$eLets,
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'main', _1: exp},
						_1: {ctor: '[]'}
					},
					_user$project$Lang$eVar('main'));
		}
	}
};
var _user$project$InterfaceController$switchToCursorTool = function (old) {
	return _elm_lang$core$Native_Utils.update(
		old,
		{mouseMode: _user$project$InterfaceModel$MouseNothing, tool: _user$project$InterfaceModel$Cursor});
};
var _user$project$InterfaceController$updateCodeBoxWithParseError = F2(
	function (annot, codeBoxInfo) {
		return _elm_lang$core$Native_Utils.update(
			codeBoxInfo,
			{
				annotations: {
					ctor: '::',
					_0: annot,
					_1: {ctor: '[]'}
				},
				highlights: {ctor: '[]'},
				tooltips: {ctor: '[]'}
			});
	});
var _user$project$InterfaceController$updateCodeBoxInfo = F2(
	function (ati, m) {
		var codeBoxInfo = m.codeBoxInfo;
		return _elm_lang$core$Native_Utils.update(
			codeBoxInfo,
			{annotations: ati.annotations, highlights: ati.highlights, tooltips: ati.tooltips});
	});
var _user$project$InterfaceController$handleError = F2(
	function (oldModel, result) {
		var _p138 = result;
		if (_p138.ctor === 'Ok') {
			return _p138._0;
		} else {
			return _elm_lang$core$Native_Utils.update(
				oldModel,
				{
					errorBox: _elm_lang$core$Maybe$Just(_p138._0)
				});
		}
	});
var _user$project$InterfaceController$applyTrigger = F6(
	function (solutionsCache, zoneKey, trigger, _p140, _p139, old) {
		var _p141 = _p140;
		var _p149 = _p141._1;
		var _p148 = _p141._0;
		var _p142 = _p139;
		var dx = _elm_lang$core$Native_Utils.eq(old.keysDown, _user$project$Keys$y) ? 0 : (_p142._0 - _p148);
		var dy = _elm_lang$core$Native_Utils.eq(old.keysDown, _user$project$Keys$x) ? 0 : (_p142._1 - _p149);
		var _p143 = A3(
			trigger,
			solutionsCache,
			{ctor: '_Tuple2', _0: _p148, _1: _p149},
			{ctor: '_Tuple2', _0: dx, _1: dy});
		var newExp = _p143._0;
		var highlights = _p143._1;
		var codeBoxInfo_ = function () {
			var codeBoxInfo = old.codeBoxInfo;
			return _elm_lang$core$Native_Utils.update(
				codeBoxInfo,
				{highlights: highlights});
		}();
		var dragInfo_ = {
			ctor: '_Tuple3',
			_0: trigger,
			_1: {ctor: '_Tuple2', _0: _p148, _1: _p149},
			_2: true
		};
		return A2(
			_user$project$InterfaceController$handleError,
			old,
			A2(
				_elm_lang$core$Result$andThen,
				function (_p144) {
					var _p145 = _p144;
					var _p147 = _p145._0._0;
					var _p146 = _p145._1;
					return A2(
						_elm_lang$core$Result$map,
						function (newSlate) {
							var newCode = A2(_user$project$Syntax$unparser, old.syntax, newExp);
							return _elm_lang$core$Native_Utils.update(
								old,
								{
									code: newCode,
									lastRunCode: newCode,
									inputExp: newExp,
									inputVal: _p147,
									maybeEnv: _p146,
									contextInputVals: A3(_user$project$FocusedEditingContext$contextInputVals, old.editingContext, _p146, newExp),
									slate: newSlate,
									widgets: _p145._0._1,
									codeBoxInfo: codeBoxInfo_,
									mouseMode: A2(
										_user$project$InterfaceModel$MouseDragZone,
										zoneKey,
										_elm_lang$core$Maybe$Just(dragInfo_))
								});
						},
						A6(_user$project$LangSvg$resolveToRootedIndexedTree, old.showPreludeOffsets, old.syntax, old.slideNumber, old.movieNumber, old.movieTime, _p147));
				},
				A4(_user$project$FocusedEditingContext$evalAtContext, old.showPreludeOffsets, old.syntax, old.editingContext, newExp)));
	});
var _user$project$InterfaceController$onMouseDrag = F3(
	function (lastPosition, newPosition, old) {
		var _p150 = {ctor: '_Tuple2', _0: newPosition.x, _1: newPosition.y};
		var mx0 = _p150._0;
		var my0 = _p150._1;
		var _p151 = A2(_user$project$SleekLayout$clickToCanvasPoint, old, newPosition);
		var isOnCanvas = _p151._0;
		var mx = _p151._1._0;
		var my = _p151._1._1;
		var _p152 = A2(_user$project$SleekLayout$clickToCanvasPoint, old, lastPosition);
		var mxLast = _p152._1._0;
		var myLast = _p152._1._1;
		var selectableShapeFeaturesAndPositions = function (shapeTree) {
			return A2(
				_elm_lang$core$List$concatMap,
				function (_p153) {
					var _p154 = _p153;
					var _p161 = _p154._0;
					var _p155 = _p154._1.interpreted;
					if (_p155.ctor === 'TextNode') {
						return {ctor: '[]'};
					} else {
						var _p160 = _p155._0;
						var _p159 = _p155._1;
						return A2(
							_elm_lang$core$List$concatMap,
							function (pf) {
								var _p156 = A3(_user$project$ShapeWidgets$maybeEvaluateShapePointFeatureXYVals, _p160, _p159, pf);
								if (_p156.ctor === 'Just') {
									var _p158 = _p156._0._1;
									var _p157 = _p156._0._0;
									return {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: {
												ctor: '_Tuple2',
												_0: _p161,
												_1: _user$project$ShapeWidgets$XFeat(pf)
											},
											_1: {ctor: '_Tuple2', _0: _p157, _1: _p158}
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: {
													ctor: '_Tuple2',
													_0: _p161,
													_1: _user$project$ShapeWidgets$YFeat(pf)
												},
												_1: {ctor: '_Tuple2', _0: _p157, _1: _p158}
											},
											_1: {ctor: '[]'}
										}
									};
								} else {
									return {ctor: '[]'};
								}
							},
							A2(_user$project$ShapeWidgets$pointFeaturesOfShape, _p160, _p159));
					}
				},
				_elm_lang$core$Dict$toList(shapeTree));
		};
		var selectableWidgetFeaturesAndPositions = function (widgets) {
			return A2(
				_elm_lang$core$List$concatMap,
				function (_p162) {
					var _p163 = _p162;
					var _p167 = _p163._1;
					var idAsShape = -2 - _p163._0;
					return A2(
						_elm_lang$core$List$concatMap,
						function (pf) {
							var _p164 = A2(_user$project$ShapeWidgets$maybeEvaluateWidgetPointFeatureXYVals, _p167, pf);
							if (_p164.ctor === 'Just') {
								var _p166 = _p164._0._1;
								var _p165 = _p164._0._0;
								return {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: {
											ctor: '_Tuple2',
											_0: idAsShape,
											_1: _user$project$ShapeWidgets$XFeat(pf)
										},
										_1: {ctor: '_Tuple2', _0: _p165, _1: _p166}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: {
												ctor: '_Tuple2',
												_0: idAsShape,
												_1: _user$project$ShapeWidgets$YFeat(pf)
											},
											_1: {ctor: '_Tuple2', _0: _p165, _1: _p166}
										},
										_1: {ctor: '[]'}
									}
								};
							} else {
								return {ctor: '[]'};
							}
						},
						_user$project$ShapeWidgets$pointFeaturesOfWidget(_p167));
				},
				_user$project$Utils$zipi1(widgets));
		};
		var _p168 = old.mouseMode;
		switch (_p168.ctor) {
			case 'MouseNothing':
				return old;
			case 'MouseDragLayoutWidget':
				return A2(
					_p168._0,
					{ctor: '_Tuple2', _0: mx0, _1: my0},
					old);
			case 'MouseDrag':
				return A3(_p168._0, lastPosition, newPosition, old);
			case 'MouseDragZone':
				if (_p168._1.ctor === 'Nothing') {
					return old;
				} else {
					var _p169 = old.liveSyncDelay;
					if (_p169 === false) {
						return A6(
							_user$project$InterfaceController$applyTrigger,
							old.solutionsCache,
							_p168._0,
							_p168._1._0._0,
							{ctor: '_Tuple2', _0: _p168._1._0._1._0, _1: _p168._1._0._1._1},
							{ctor: '_Tuple2', _0: mx, _1: my},
							old);
					} else {
						return old;
					}
				}
			case 'MouseDragSelect':
				var pos1 = A2(_user$project$SleekLayout$canvasPosition, old, _p168._0);
				var pos2 = A2(
					_user$project$SleekLayout$canvasPosition,
					old,
					_user$project$InterfaceModel$mousePosition(old));
				var selectTop = A2(_elm_lang$core$Basics$min, pos1.y, pos2.y);
				var selectLeft = A2(_elm_lang$core$Basics$min, pos1.x, pos2.x);
				var selectBot = A2(_elm_lang$core$Basics$max, pos1.y, pos2.y);
				var selectRight = A2(_elm_lang$core$Basics$max, pos1.x, pos2.x);
				var _p170 = old.slate;
				var root = _p170._0;
				var shapeTree = _p170._1;
				var blobsAndBounds = {ctor: '[]'};
				var blobsToSelect = {ctor: '[]'};
				var shapesToSelect = _elm_lang$core$Dict$keys(
					A2(
						_elm_lang$core$Dict$filter,
						F2(
							function (nodeId, svgNode) {
								var _p171 = _user$project$ShapeWidgets$maybeShapeBounds(svgNode);
								if (_p171.ctor === 'Just') {
									return (_elm_lang$core$Native_Utils.cmp(
										selectLeft,
										_elm_lang$core$Basics$round(_p171._0._0)) < 1) && ((_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$Basics$round(_p171._0._2),
										selectRight) < 1) && ((_elm_lang$core$Native_Utils.cmp(
										selectTop,
										_elm_lang$core$Basics$round(_p171._0._1)) < 1) && (_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$Basics$round(_p171._0._3),
										selectBot) < 1)));
								} else {
									return false;
								}
							}),
						shapeTree));
				var featuresToSelect = A2(
					_elm_lang$core$List$map,
					function (_p172) {
						var _p173 = _p172;
						return A2(_user$project$ShapeWidgets$ShapeFeature, _p173._0._0, _p173._0._1);
					},
					A2(
						_elm_lang$core$List$filter,
						function (_p174) {
							var _p175 = _p174;
							var _p177 = _p175._1._1;
							var _p176 = _p175._1._0;
							return (!A2(_elm_lang$core$List$member, _p175._0._0, shapesToSelect)) && ((_elm_lang$core$Native_Utils.cmp(
								selectLeft,
								_elm_lang$core$Basics$round(
									_user$project$Lang$valToNum(_p176))) < 1) && ((_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$Basics$round(
									_user$project$Lang$valToNum(_p176)),
								selectRight) < 1) && ((_elm_lang$core$Native_Utils.cmp(
								selectTop,
								_elm_lang$core$Basics$round(
									_user$project$Lang$valToNum(_p177))) < 1) && (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$Basics$round(
									_user$project$Lang$valToNum(_p177)),
								selectBot) < 1))));
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							selectableShapeFeaturesAndPositions(shapeTree),
							selectableWidgetFeaturesAndPositions(old.widgets))));
				return _elm_lang$core$Native_Utils.eq(
					old.keysDown,
					{
						ctor: '::',
						_0: _user$project$Keys$keyShift,
						_1: {ctor: '[]'}
					}) ? _elm_lang$core$Native_Utils.update(
					old,
					{
						selectedShapes: A2(
							_user$project$Utils$multiToggleAsSet,
							_user$project$Utils$dedup(shapesToSelect),
							_p168._1),
						selectedFeatures: A2(
							_user$project$Utils$multiToggleAsSet,
							_user$project$Utils$dedup(featuresToSelect),
							_p168._2),
						selectedBlobs: _p168._3
					}) : _elm_lang$core$Native_Utils.update(
					old,
					{
						selectedShapes: _user$project$Utils$dedup(shapesToSelect),
						selectedFeatures: _user$project$Utils$dedup(featuresToSelect),
						selectedBlobs: _elm_lang$core$Dict$fromList(blobsToSelect)
					});
			case 'MouseDrawNew':
				var _p178 = {ctor: '_Tuple2', _0: old.tool, _1: _p168._0};
				_v73_5:
				do {
					_v73_1:
					do {
						_v73_0:
						do {
							if (_p178.ctor === '_Tuple2') {
								switch (_p178._1.ctor) {
									case 'DrawJustStarted':
										switch (_p178._0.ctor) {
											case 'Poly':
												break _v73_0;
											case 'Path':
												break _v73_1;
											default:
												var lastPointOnCanvas = A2(
													_user$project$InterfaceController$maybeClickableToPointWithSnap,
													{ctor: '_Tuple2', _0: mxLast, _1: myLast},
													_p178._1._0);
												var pointOnCanvas = {
													ctor: '_Tuple2',
													_0: {ctor: '_Tuple2', _0: mx, _1: _user$project$InterfaceModel$NoSnap},
													_1: {ctor: '_Tuple2', _0: my, _1: _user$project$InterfaceModel$NoSnap}
												};
												var _p179 = old.tool;
												if (_p179.ctor === 'PointOrOffset') {
													return _elm_lang$core$Native_Utils.update(
														old,
														{
															mouseMode: _user$project$InterfaceModel$MouseDrawNew(
																A3(
																	_user$project$InterfaceModel$Offset1D,
																	lastPointOnCanvas,
																	_user$project$InterfaceModel$NoSnap,
																	{ctor: '_Tuple2', _0: mx, _1: my}))
														});
												} else {
													return _elm_lang$core$Native_Utils.update(
														old,
														{
															mouseMode: _user$project$InterfaceModel$MouseDrawNew(
																A2(_user$project$InterfaceModel$TwoPoints, lastPointOnCanvas, pointOnCanvas))
														});
												}
										}
									case 'TwoPoints':
										switch (_p178._0.ctor) {
											case 'Poly':
												break _v73_0;
											case 'Path':
												break _v73_1;
											default:
												var pointPerhapsWithSnap = function () {
													var _p180 = old.slate;
													var root = _p180._0;
													var shapeTree = _p180._1;
													return A2(
														_elm_lang$core$Maybe$withDefault,
														{
															ctor: '_Tuple2',
															_0: {ctor: '_Tuple2', _0: mx, _1: _user$project$InterfaceModel$NoSnap},
															_1: {ctor: '_Tuple2', _0: my, _1: _user$project$InterfaceModel$NoSnap}
														},
														A2(
															_user$project$Utils$mapFirstSuccess,
															function (_p181) {
																var _p182 = _p181;
																var _p184 = _p182._1._1;
																var _p183 = _p182._1._0;
																return (_elm_lang$core$Native_Utils.cmp(
																	A2(
																		_user$project$Utils$distance,
																		{
																			ctor: '_Tuple2',
																			_0: _user$project$Lang$valToNum(_p183),
																			_1: _user$project$Lang$valToNum(_p184)
																		},
																		{
																			ctor: '_Tuple2',
																			_0: _elm_lang$core$Basics$toFloat(mx),
																			_1: _elm_lang$core$Basics$toFloat(my)
																		}),
																	7.0) < 1) ? _elm_lang$core$Maybe$Just(
																	{
																		ctor: '_Tuple2',
																		_0: {
																			ctor: '_Tuple2',
																			_0: _user$project$Lang$valToInt(_p183),
																			_1: _user$project$InterfaceModel$SnapVal(_p183)
																		},
																		_1: {
																			ctor: '_Tuple2',
																			_0: _user$project$Lang$valToInt(_p184),
																			_1: _user$project$InterfaceModel$SnapVal(_p184)
																		}
																	}) : _elm_lang$core$Maybe$Nothing;
															},
															A2(
																_elm_lang$core$Basics_ops['++'],
																selectableWidgetFeaturesAndPositions(old.widgets),
																selectableShapeFeaturesAndPositions(shapeTree))));
												}();
												return _elm_lang$core$Native_Utils.update(
													old,
													{
														mouseMode: _user$project$InterfaceModel$MouseDrawNew(
															A2(_user$project$InterfaceModel$TwoPoints, _p178._1._0, pointPerhapsWithSnap))
													});
										}
									case 'Offset1D':
										switch (_p178._0.ctor) {
											case 'Poly':
												break _v73_0;
											case 'Path':
												break _v73_1;
											default:
												if (((_p178._1._0.ctor === '_Tuple2') && (_p178._1._0._0.ctor === '_Tuple2')) && (_p178._1._0._1.ctor === '_Tuple2')) {
													var _p201 = _p178._1._0._1._0;
													var _p200 = _p178._1._0._0._0;
													var _p185 = function () {
														var _p186 = {ctor: '_Tuple2', _0: mx - _p200, _1: my - _p201};
														var dxRaw = _p186._0;
														var dyRaw = _p186._1;
														var _p187 = A2(
															_user$project$Draw$horizontalVerticalSnap,
															{ctor: '_Tuple2', _0: 0, _1: 0},
															{ctor: '_Tuple2', _0: dxRaw, _1: dyRaw});
														var axis = _p187._0;
														var sign = _p187._1;
														var amount = _p187._2;
														var possibleSnaps = A2(
															_elm_lang$core$List$sortBy,
															_elm_lang$core$Tuple$first,
															A2(
																_elm_lang$core$List$filterMap,
																function (widget) {
																	var _p188 = widget;
																	if ((_p188.ctor === 'WOffset1D') && (_p188._4.ctor === '_Tuple2')) {
																		return _elm_lang$core$Maybe$Just(
																			{
																				ctor: '_Tuple2',
																				_0: _elm_lang$core$Basics$round(_p188._4._0),
																				_1: _p188._5
																			});
																	} else {
																		return _elm_lang$core$Maybe$Nothing;
																	}
																},
																old.widgets));
														var pixelsPerSnap = 20;
														var snapRanges = A2(
															_user$project$Utils$mapi0,
															function (_p189) {
																var _p190 = _p189;
																var _p192 = _p190._1._0;
																var _p191 = _p190._0;
																return {
																	ctor: '_Tuple3',
																	_0: {ctor: '_Tuple2', _0: _p192 + (pixelsPerSnap * _p191), _1: _p192 + (pixelsPerSnap * (_p191 + 1))},
																	_1: _p192,
																	_2: _p190._1._1
																};
															},
															possibleSnaps);
														var maybeInSnapRange = A2(
															_user$project$Utils$findFirst,
															function (_p193) {
																var _p194 = _p193;
																return (_elm_lang$core$Native_Utils.cmp(amount, _p194._0._0) > -1) && (_elm_lang$core$Native_Utils.cmp(amount, _p194._0._1) < 0);
															},
															snapRanges);
														var _p195 = maybeInSnapRange;
														if (_p195.ctor === 'Just') {
															var _p197 = _p195._0._2;
															var _p196 = _p195._0._1;
															return (_elm_lang$core$Native_Utils.eq(axis, _user$project$Lang$X) && _elm_lang$core$Native_Utils.eq(sign, _user$project$Lang$Positive)) ? {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple2', _0: _p200 + _p196, _1: my},
																_1: _user$project$InterfaceModel$SnapVal(_p197)
															} : ((_elm_lang$core$Native_Utils.eq(axis, _user$project$Lang$X) && _elm_lang$core$Native_Utils.eq(sign, _user$project$Lang$Negative)) ? {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple2', _0: _p200 - _p196, _1: my},
																_1: _user$project$InterfaceModel$SnapVal(_p197)
															} : ((_elm_lang$core$Native_Utils.eq(axis, _user$project$Lang$Y) && _elm_lang$core$Native_Utils.eq(sign, _user$project$Lang$Positive)) ? {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple2', _0: mx, _1: _p201 + _p196},
																_1: _user$project$InterfaceModel$SnapVal(_p197)
															} : {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple2', _0: mx, _1: _p201 - _p196},
																_1: _user$project$InterfaceModel$SnapVal(_p197)
															}));
														} else {
															var numberOfSnapsPassed = A2(
																_user$project$Utils$count,
																function (_p198) {
																	var _p199 = _p198;
																	return _elm_lang$core$Native_Utils.cmp(amount, _p199._0._1) > -1;
																},
																snapRanges);
															return (_elm_lang$core$Native_Utils.eq(axis, _user$project$Lang$X) && _elm_lang$core$Native_Utils.eq(sign, _user$project$Lang$Positive)) ? {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple2', _0: mx - (numberOfSnapsPassed * pixelsPerSnap), _1: my},
																_1: _user$project$InterfaceModel$NoSnap
															} : ((_elm_lang$core$Native_Utils.eq(axis, _user$project$Lang$X) && _elm_lang$core$Native_Utils.eq(sign, _user$project$Lang$Negative)) ? {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple2', _0: mx + (numberOfSnapsPassed * pixelsPerSnap), _1: my},
																_1: _user$project$InterfaceModel$NoSnap
															} : ((_elm_lang$core$Native_Utils.eq(axis, _user$project$Lang$Y) && _elm_lang$core$Native_Utils.eq(sign, _user$project$Lang$Positive)) ? {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple2', _0: mx, _1: my - (numberOfSnapsPassed * pixelsPerSnap)},
																_1: _user$project$InterfaceModel$NoSnap
															} : {
																ctor: '_Tuple2',
																_0: {ctor: '_Tuple2', _0: mx, _1: my + (numberOfSnapsPassed * pixelsPerSnap)},
																_1: _user$project$InterfaceModel$NoSnap
															}));
														}
													}();
													var effectiveMX = _p185._0._0;
													var effectiveMY = _p185._0._1;
													var amountSnap = _p185._1;
													return _elm_lang$core$Native_Utils.update(
														old,
														{
															mouseMode: _user$project$InterfaceModel$MouseDrawNew(
																A3(
																	_user$project$InterfaceModel$Offset1D,
																	_p178._1._0,
																	amountSnap,
																	{ctor: '_Tuple2', _0: effectiveMX, _1: effectiveMY}))
														});
												} else {
													break _v73_5;
												}
										}
									default:
										switch (_p178._0.ctor) {
											case 'Poly':
												break _v73_0;
											case 'Path':
												break _v73_1;
											default:
												break _v73_5;
										}
								}
							} else {
								break _v73_5;
							}
						} while(false);
						return old;
					} while(false);
					return old;
				} while(false);
				return old;
			default:
				return old;
		}
	});
var _user$project$InterfaceController$msgMousePosition = function (pos_) {
	var deHoverBoundedWidgets = function (old) {
		if (_user$project$InterfaceModel$isMouseDown(old) || (!_elm_lang$core$Native_Utils.eq(old.renamingInOutput, _elm_lang$core$Maybe$Nothing))) {
			return old;
		} else {
			var hoveredBoundsWidgets = function () {
				var _p202 = A2(
					_user$project$SleekLayout$canvasPosition,
					old,
					_user$project$InterfaceModel$mousePosition(old));
				var x = _p202.x;
				var y = _p202.y;
				var extraMargin = 15;
				return A2(
					_elm_lang$core$List$filter,
					function (_p203) {
						var _p204 = _p203;
						return (_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$Basics$round(_p204._0._0) - extraMargin,
							x) < 1) && ((_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$Basics$round(_p204._0._1) - extraMargin,
							y) < 1) && ((_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$Basics$round(_p204._0._2) + extraMargin,
							x) > -1) && (_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$Basics$round(_p204._0._3) + extraMargin,
							y) > -1)));
					},
					old.hoveredBoundsWidgets);
			}();
			return _elm_lang$core$Native_Utils.update(
				old,
				{hoveredBoundsWidgets: hoveredBoundsWidgets});
		}
	};
	var deucePopupPanelPositionUpdater = function (old) {
		if (_user$project$InterfaceModel$noCodeWidgetsSelected(old)) {
			var oldPopupPanelPositions = old.popupPanelPositions;
			var newDeucePopupPanelPosition = {ctor: '_Tuple2', _0: pos_.x + _user$project$SleekLayout$deucePopupPanelMouseOffset.x, _1: pos_.y + _user$project$SleekLayout$deucePopupPanelMouseOffset.y};
			var newPopupPanelPositions = _elm_lang$core$Native_Utils.update(
				oldPopupPanelPositions,
				{deuce: newDeucePopupPanelPosition});
			return _elm_lang$core$Native_Utils.update(
				old,
				{popupPanelPositions: newPopupPanelPositions});
		} else {
			return old;
		}
	};
	var mouseStateUpdater = function (old) {
		var _p205 = old.mouseState;
		if (_p205._0.ctor === 'Nothing') {
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					mouseState: {ctor: '_Tuple3', _0: _elm_lang$core$Maybe$Nothing, _1: pos_, _2: _elm_lang$core$Maybe$Nothing}
				});
		} else {
			return A3(
				_user$project$InterfaceController$onMouseDrag,
				_p205._1,
				pos_,
				_elm_lang$core$Native_Utils.update(
					old,
					{
						mouseState: {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Maybe$Just(true),
							_1: pos_,
							_2: _p205._2
						}
					}));
		}
	};
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'MousePosition ',
			_elm_lang$core$Basics$toString(pos_)),
		function (_p206) {
			return deHoverBoundedWidgets(
				deucePopupPanelPositionUpdater(
					mouseStateUpdater(_p206)));
		});
};
var _user$project$InterfaceController$discardErrorAnnotations = function (result) {
	return A2(
		_elm_lang$core$Result$mapError,
		function (_p207) {
			var _p208 = _p207;
			return _p208._0;
		},
		result);
};
var _user$project$InterfaceController$clearSelections = function (old) {
	return _elm_lang$core$Native_Utils.update(
		old,
		{
			selectedFeatures: {ctor: '[]'},
			selectedShapes: {ctor: '[]'},
			selectedBlobs: _elm_lang$core$Dict$empty
		});
};
var _user$project$InterfaceController$between1 = F2(
	function (i, _p209) {
		var _p210 = _p209;
		return A2(
			_user$project$Utils$between,
			i,
			{ctor: '_Tuple2', _0: _p210._0 + 1, _1: _p210._1 + 1});
	});
var _user$project$InterfaceController$refreshHighlights = F2(
	function (zoneKey, model) {
		var codeBoxInfo = model.codeBoxInfo;
		var hi = A2(_user$project$InterfaceModel$liveInfoToHighlights, zoneKey, model);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				codeBoxInfo: _elm_lang$core$Native_Utils.update(
					codeBoxInfo,
					{highlights: hi})
			});
	});
var _user$project$InterfaceController$refreshLiveInfo = function (m) {
	var _p211 = A7(
		_user$project$InterfaceModel$mkLive,
		m.syntax,
		m.syncOptions,
		m.slideNumber,
		m.movieNumber,
		m.movieTime,
		m.inputExp,
		{ctor: '_Tuple2', _0: m.inputVal, _1: m.widgets});
	if (_p211.ctor === 'Ok') {
		return _p211._0;
	} else {
		var _p212 = A2(
			_elm_lang$core$Debug$log,
			'refreshLiveInfo Error',
			_elm_lang$core$Basics$toString(_p211._0));
		return {
			initSubstPlus: _user$project$FastParser$substPlusOf(m.inputExp),
			triggers: _elm_lang$core$Dict$empty
		};
	}
};
var _user$project$InterfaceController$finishTrigger = F2(
	function (zoneKey, old) {
		var old_ = old;
		return A2(
			_user$project$InterfaceController$refreshHighlights,
			zoneKey,
			_elm_lang$core$Native_Utils.update(
				old_,
				{
					mouseMode: _user$project$InterfaceModel$MouseNothing,
					liveSyncInfo: _user$project$InterfaceController$refreshLiveInfo(old_),
					history: A3(
						_user$project$InterfaceModel$modelCommit,
						old.code,
						{ctor: '[]'},
						old_.history),
					synthesisResultsDict: _elm_lang$core$Dict$empty,
					widgetBounds: _user$project$ShapeWidgets$computeAndRejiggerWidgetBounds(old_.widgets)
				}));
	});
var _user$project$InterfaceController$tryRun = function (old) {
	var oldWithUpdatedHistory = function () {
		var updatedHistory = A3(
			_user$project$InterfaceModel$modelCommit,
			old.code,
			{ctor: '[]'},
			old.history);
		return _elm_lang$core$Native_Utils.update(
			old,
			{history: updatedHistory, lastRunCode: old.code});
	}();
	var _p213 = A2(_user$project$Syntax$parser, old.syntax, old.code);
	if (_p213.ctor === 'Err') {
		return _elm_lang$core$Result$Err(
			{
				ctor: '_Tuple3',
				_0: oldWithUpdatedHistory,
				_1: _user$project$ParserUtils$showError(_p213._0),
				_2: _elm_lang$core$Maybe$Nothing
			});
	} else {
		var _p237 = _p213._0;
		var resultThunk = function (_p214) {
			var _p215 = _p214;
			var editingContext = _user$project$FocusedEditingContext$editingContextFromMarkers(_p237);
			return A2(
				_elm_lang$core$Result$andThen,
				function (_p216) {
					var _p217 = _p216;
					var _p234 = _p217._0._1;
					var _p233 = _p217._0._0;
					var _p232 = _p217._1;
					return A2(
						_elm_lang$core$Result$map,
						function (_p218) {
							var _p219 = _p218;
							var _p231 = _p219._2;
							var newCode = A2(_user$project$Syntax$unparser, old.syntax, _p237);
							var $new = _user$project$InterfaceController$loadDrawingToolsAndIcons(
								_elm_lang$core$Native_Utils.update(
									old,
									{
										inputExp: _p237,
										inputVal: _p233,
										maybeEnv: _p232,
										contextInputVals: A3(_user$project$FocusedEditingContext$contextInputVals, editingContext, _p232, _p237),
										code: newCode,
										lastRunCode: newCode,
										slideCount: _p219._0,
										movieCount: _p219._1,
										movieTime: 0,
										movieDuration: _p231,
										movieContinue: _p219._3,
										runAnimation: _elm_lang$core$Native_Utils.cmp(_p231, 0) > 0,
										slate: _p219._4,
										widgets: _p234,
										widgetBounds: _user$project$ShapeWidgets$computeAndRejiggerWidgetBounds(_p234),
										idToTypeAndContextThunk: _user$project$AlgorithmJish$inferTypes(_p237),
										editingContext: editingContext,
										history: A3(
											_user$project$InterfaceModel$modelCommit,
											newCode,
											{ctor: '[]'},
											old.history),
										caption: _elm_lang$core$Maybe$Nothing,
										syncOptions: A2(_user$project$Sync$syncOptionsOf, old.syncOptions, _p237),
										errorBox: _elm_lang$core$Maybe$Nothing,
										preview: _elm_lang$core$Maybe$Nothing,
										synthesisResultsDict: A2(
											_elm_lang$core$Dict$singleton,
											'Auto-Synthesis',
											A2(_user$project$InterfaceController$perhapsRunAutoSynthesis, old, _p237))
									}));
							var taskProgressAnnotation = function () {
								var _p220 = A2(
									_elm_lang$core$List$map,
									_elm_lang$core$String$trimRight,
									A2(_elm_lang$core$String$split, '; The final program should look something like:\n', newCode));
								if (((_p220.ctor === '::') && (_p220._1.ctor === '::')) && (_p220._1._1.ctor === '[]')) {
									var normalize = function (str) {
										return A4(
											_elm_lang$core$Regex$replace,
											_elm_lang$core$Regex$All,
											_elm_lang$core$Regex$regex('[\\s\\(\\)\\[\\]]+'),
											function (_p221) {
												return '';
											},
											str);
									};
									var targetCode = normalize(
										A3(
											_user$project$Utils$stringReplace,
											';\n',
											'\n',
											A3(_user$project$Utils$stringReplace, '\n;', '\n', _p220._1._0)));
									var givenLines = A2(_elm_lang$core$String$split, '\n', _p220._0);
									var singleLineGoodness = A2(
										_elm_lang$core$List$map,
										function (givenLine) {
											return A2(_elm_lang$core$String$contains, givenLine, targetCode);
										},
										A2(_elm_lang$core$List$map, normalize, givenLines));
									var multiLineGoodness = function () {
										var targetCodeWithBeginEndMarkers = A2(
											_elm_lang$core$Basics_ops['++'],
											'BOC',
											A2(_elm_lang$core$Basics_ops['++'], targetCode, 'EOC'));
										var lineTriples = A3(
											_user$project$Utils$zip3,
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: '',
													_1: {
														ctor: '::',
														_0: 'BOC',
														_1: {ctor: '[]'}
													}
												},
												givenLines),
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: 'BOC',
													_1: {ctor: '[]'}
												},
												A2(
													_elm_lang$core$Basics_ops['++'],
													givenLines,
													{
														ctor: '::',
														_0: 'EOC',
														_1: {ctor: '[]'}
													})),
											A2(
												_elm_lang$core$Basics_ops['++'],
												givenLines,
												{
													ctor: '::',
													_0: 'EOC',
													_1: {
														ctor: '::',
														_0: '',
														_1: {ctor: '[]'}
													}
												}));
										var lineGoodnessTriples = A3(
											_user$project$Utils$zip3,
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: true,
														_1: {ctor: '[]'}
													}
												},
												singleLineGoodness),
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: true,
													_1: {ctor: '[]'}
												},
												A2(
													_elm_lang$core$Basics_ops['++'],
													singleLineGoodness,
													{
														ctor: '::',
														_0: true,
														_1: {ctor: '[]'}
													})),
											A2(
												_elm_lang$core$Basics_ops['++'],
												singleLineGoodness,
												{
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: true,
														_1: {ctor: '[]'}
													}
												}));
										return A2(
											_elm_lang$core$List$map,
											function (_p222) {
												var _p223 = _p222;
												return (_p223._0._0 && (_p223._0._1 && _p223._0._2)) ? A2(
													_elm_lang$core$String$contains,
													normalize(
														A2(
															_elm_lang$core$Basics_ops['++'],
															_p223._1._0,
															A2(_elm_lang$core$Basics_ops['++'], _p223._1._1, _p223._1._2))),
													targetCodeWithBeginEndMarkers) : true;
											},
											A2(
												_user$project$Utils$dropLast,
												1,
												A2(
													_elm_lang$core$List$drop,
													1,
													A2(_user$project$Utils$zip, lineGoodnessTriples, lineTriples))));
									}();
									var singleLineAnnotataions = A2(
										_elm_lang$core$List$map,
										function (_p224) {
											var _p225 = _p224;
											return {row: _p225._0, type_: 'error', text: 'Does not match target code!'};
										},
										A2(
											_elm_lang$core$List$filter,
											function (_p226) {
												return !_elm_lang$core$Tuple$second(_p226);
											},
											_user$project$Utils$zipi0(singleLineGoodness)));
									var multiLineAnnotataions = A2(
										_elm_lang$core$List$map,
										function (_p227) {
											var _p228 = _p227;
											return {row: _p228._0, type_: 'error', text: 'Missing code or ordering problem!'};
										},
										A2(
											_elm_lang$core$List$filter,
											function (_p229) {
												return !_elm_lang$core$Tuple$second(_p229);
											},
											_user$project$Utils$zipi0(multiLineGoodness)));
									return {
										annotations: A2(_elm_lang$core$Basics_ops['++'], singleLineAnnotataions, multiLineAnnotataions),
										highlights: {ctor: '[]'},
										tooltips: {ctor: '[]'}
									};
								} else {
									return {
										annotations: {ctor: '[]'},
										highlights: {ctor: '[]'},
										tooltips: {ctor: '[]'}
									};
								}
							}();
							var new_ = _user$project$InterfaceController$resetDeuceState(
								_elm_lang$core$Native_Utils.update(
									$new,
									{
										liveSyncInfo: _user$project$InterfaceController$refreshLiveInfo($new),
										codeBoxInfo: A2(_user$project$InterfaceController$updateCodeBoxInfo, taskProgressAnnotation, $new)
									}));
							var _p230 = new_.editingContext;
							if (_p230.ctor === 'Just') {
								return _elm_lang$core$Native_Utils.update(
									new_,
									{
										deuceState: _elm_lang$core$Native_Utils.update(
											_user$project$DeuceWidgets$emptyDeuceState,
											{
												hoveredWidgets: {
													ctor: '::',
													_0: _user$project$DeuceWidgets$DeuceExp(_p230._0._0),
													_1: {ctor: '[]'}
												}
											})
									});
							} else {
								return new_;
							}
						},
						A6(_user$project$LangSvg$fetchEverything, old.showPreludeOffsets, old.syntax, old.slideNumber, old.movieNumber, 0.0, _p233));
				},
				A4(_user$project$FocusedEditingContext$evalAtContext, old.showPreludeOffsets, old.syntax, editingContext, _p237));
		};
		var _p236 = A2(
			_user$project$ImpureGoodies$logTimedRun,
			'tryRun',
			function (_p235) {
				return _user$project$ImpureGoodies$crashToError(resultThunk);
			});
		if (_p236.ctor === 'Err') {
			return _elm_lang$core$Result$Err(
				{ctor: '_Tuple3', _0: oldWithUpdatedHistory, _1: _p236._0, _2: _elm_lang$core$Maybe$Nothing});
		} else {
			if (_p236._0.ctor === 'Err') {
				return _elm_lang$core$Result$Err(
					{ctor: '_Tuple3', _0: oldWithUpdatedHistory, _1: _p236._0._0, _2: _elm_lang$core$Maybe$Nothing});
			} else {
				return _elm_lang$core$Result$Ok(_p236._0._0);
			}
		}
	}
};
var _user$project$InterfaceController$upstateRun = function (old) {
	var newFailuresInARowAfterFail = (_elm_lang$core$Native_Utils.cmp(old.runFailuresInARowCount, 0) < 0) ? 1 : (old.runFailuresInARowCount + 1);
	var newFailuresInARowAfterSuccess = (_elm_lang$core$Native_Utils.cmp(old.runFailuresInARowCount, 0) > 0) ? 0 : (old.runFailuresInARowCount - 1);
	var _p238 = _user$project$InterfaceController$tryRun(old);
	if (_p238.ctor === 'Err') {
		if (_p238._0._2.ctor === 'Just') {
			return _elm_lang$core$Native_Utils.update(
				_p238._0._0,
				{
					errorBox: _elm_lang$core$Maybe$Just(_p238._0._1),
					codeBoxInfo: A2(_user$project$InterfaceController$updateCodeBoxWithParseError, _p238._0._2._0, old.codeBoxInfo),
					runFailuresInARowCount: newFailuresInARowAfterFail
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				_p238._0._0,
				{
					errorBox: _elm_lang$core$Maybe$Just(_p238._0._1),
					runFailuresInARowCount: newFailuresInARowAfterFail
				});
		}
	} else {
		return _elm_lang$core$Native_Utils.update(
			_p238._0,
			{runFailuresInARowCount: newFailuresInARowAfterSuccess});
	}
};
var _user$project$InterfaceController$maybeDrawOnSelect = F2(
	function (selectedIdAsShape, old) {
		var _p239 = {
			ctor: '_Tuple5',
			_0: old.tool,
			_1: _elm_lang$core$List$length(old.selectedFeatures),
			_2: _elm_lang$core$List$length(old.selectedShapes),
			_3: _elm_lang$core$Dict$size(old.selectedBlobs),
			_4: A2(_user$project$Utils$maybeGeti1, -2 - selectedIdAsShape, old.widgets)
		};
		if (((((((_p239.ctor === '_Tuple5') && (_p239._0.ctor === 'Poly')) && (_p239._1 === 0)) && (_p239._2 === 0)) && (_p239._3 === 0)) && (_p239._4.ctor === 'Just')) && (_p239._4._0.ctor === 'WList')) {
			return _elm_lang$core$Maybe$Just(
				_user$project$InterfaceController$upstateRun(
					_user$project$InterfaceController$switchToCursorTool(
						A2(
							_user$project$Draw$addPolygonList,
							old,
							_user$project$Lang$eHoleVal(_p239._4._0._0)))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$InterfaceController$msgSelectList = function (idAsShape) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Select List',
		function (old) {
			var _p240 = A2(_user$project$InterfaceController$maybeDrawOnSelect, idAsShape, old);
			if (_p240.ctor === 'Just') {
				return _p240._0;
			} else {
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						selectedShapes: A2(_user$project$Utils$addAsSet, idAsShape, old.selectedShapes)
					});
			}
		});
};
var _user$project$InterfaceController$onMouseClick = F3(
	function (clickPos, old, maybeClickable) {
		var _p241 = A2(_user$project$SleekLayout$clickToCanvasPoint, old, clickPos);
		var isOnCanvas = _p241._0;
		var pointOnCanvas = _p241._1;
		var canvasX = _p241._1._0;
		var canvasY = _p241._1._1;
		var _p242 = {ctor: '_Tuple2', _0: old.tool, _1: old.mouseMode};
		_v99_8:
		do {
			_v99_2:
			do {
				if (_p242.ctor === '_Tuple2') {
					switch (_p242._0.ctor) {
						case 'Cursor':
							switch (_p242._1.ctor) {
								case 'MouseDragZone':
									if (_p242._1._0.ctor === '_Tuple3') {
										if (_p242._1._1.ctor === 'Nothing') {
											return A4(
												_user$project$InterfaceController$onClickPrimaryZone,
												_p242._1._0._0,
												_p242._1._0._1,
												_p242._1._0._2,
												_elm_lang$core$Native_Utils.update(
													old,
													{mouseMode: _user$project$InterfaceModel$MouseNothing}));
										} else {
											if ((_p242._1._1._0.ctor === '_Tuple3') && (_p242._1._1._0._2 === false)) {
												return A4(
													_user$project$InterfaceController$onClickPrimaryZone,
													_p242._1._0._0,
													_p242._1._0._1,
													_p242._1._0._2,
													_elm_lang$core$Native_Utils.update(
														old,
														{mouseMode: _user$project$InterfaceModel$MouseNothing}));
											} else {
												break _v99_2;
											}
										}
									} else {
										break _v99_2;
									}
								case 'MouseDrawNew':
									break _v99_2;
								default:
									break _v99_2;
							}
						case 'Poly':
							if (_p242._1.ctor === 'MouseDrawNew') {
								var pointToAdd = A2(
									_user$project$InterfaceController$maybeClickableToPointWithSnap,
									{ctor: '_Tuple2', _0: canvasX, _1: canvasY},
									maybeClickable);
								var _p243 = _p242._1._0;
								switch (_p243.ctor) {
									case 'DrawJustStarted':
										return _elm_lang$core$Native_Utils.update(
											old,
											{
												mouseMode: _user$project$InterfaceModel$MouseDrawNew(
													_user$project$InterfaceModel$PolyPoints(
														{
															ctor: '::',
															_0: pointToAdd,
															_1: {ctor: '[]'}
														}))
											});
									case 'PolyPoints':
										if (_p243._0.ctor === '[]') {
											return _elm_lang$core$Native_Utils.crashCase(
												'InterfaceController',
												{
													start: {line: 322, column: 7},
													end: {line: 332, column: 106}
												},
												_p243)('invalid state, PolyPoints should always be nonempty');
										} else {
											var _p247 = _p243._0;
											var _p245 = _user$project$Utils$last_(_p247);
											var initialX = _p245._0._0;
											var initialY = _p245._1._0;
											var _p246 = pointToAdd;
											var thisX = _p246._0._0;
											var thisY = _p246._1._0;
											return (_elm_lang$core$Native_Utils.cmp(
												A2(
													_user$project$Utils$distanceInt,
													{ctor: '_Tuple2', _0: thisX, _1: thisY},
													{ctor: '_Tuple2', _0: initialX, _1: initialY}),
												_user$project$Draw$drawDotSize) > 0) ? _elm_lang$core$Native_Utils.update(
												old,
												{
													mouseMode: _user$project$InterfaceModel$MouseDrawNew(
														_user$project$InterfaceModel$PolyPoints(
															{ctor: '::', _0: pointToAdd, _1: _p247}))
												}) : (_elm_lang$core$Native_Utils.eq(
												_elm_lang$core$List$length(_p247),
												2) ? _elm_lang$core$Native_Utils.update(
												old,
												{mouseMode: _user$project$InterfaceModel$MouseNothing}) : (_elm_lang$core$Native_Utils.eq(
												_elm_lang$core$List$length(_p247),
												1) ? _user$project$InterfaceController$switchToCursorTool(old) : _user$project$InterfaceController$upstateRun(
												_user$project$InterfaceController$switchToCursorTool(
													A2(_user$project$Draw$addPolygon, old, _p247)))));
										}
									default:
										return _elm_lang$core$Native_Utils.crashCase(
											'InterfaceController',
											{
												start: {line: 322, column: 7},
												end: {line: 332, column: 106}
											},
											_p243)('invalid state, points should be DrawJustStarted or PolyPoints for polygon tool');
								}
							} else {
								break _v99_8;
							}
						case 'Path':
							if (_p242._1.ctor === 'MouseDrawNew') {
								switch (_p242._1._0.ctor) {
									case 'PathPoints':
										var _p253 = _p242._1._0._0;
										var add = function ($new) {
											var points_ = {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: old.keysDown, _1: $new},
												_1: _p253
											};
											return {
												ctor: '_Tuple2',
												_0: points_,
												_1: _elm_lang$core$Native_Utils.update(
													old,
													{
														mouseMode: _user$project$InterfaceModel$MouseDrawNew(
															_user$project$InterfaceModel$PathPoints(points_))
													})
											};
										};
										var _p249 = _p253;
										if (_p249.ctor === '[]') {
											return _elm_lang$core$Native_Utils.crashCase(
												'InterfaceController',
												{
													start: {line: 342, column: 7},
													end: {line: 358, column: 47}
												},
												_p249)('invalid state, PathPoints should always be nonempty');
										} else {
											if (_p249._1.ctor === '[]') {
												return (_elm_lang$core$Native_Utils.cmp(
													A2(_user$project$Utils$distanceInt, pointOnCanvas, _p249._0._1),
													_user$project$Draw$drawDotSize) < 0) ? _user$project$InterfaceController$switchToCursorTool(old) : _elm_lang$core$Tuple$second(
													add(pointOnCanvas));
											} else {
												if (_elm_lang$core$Native_Utils.cmp(
													A2(_user$project$Utils$distanceInt, pointOnCanvas, _p249._0._1),
													_user$project$Draw$drawDotSize) < 0) {
													return _user$project$InterfaceController$upstateRun(
														A2(_user$project$Draw$addPath, old, _p253));
												} else {
													var _p251 = _user$project$Utils$last_(_p253);
													var firstClick = _p251._1;
													if (_elm_lang$core$Native_Utils.cmp(
														A2(_user$project$Utils$distanceInt, pointOnCanvas, firstClick),
														_user$project$Draw$drawDotSize) < 0) {
														var _p252 = add(firstClick);
														var points_ = _p252._0;
														var old_ = _p252._1;
														return _user$project$InterfaceController$upstateRun(
															_user$project$InterfaceController$switchToCursorTool(
																A2(_user$project$Draw$addPath, old_, points_)));
													} else {
														return _elm_lang$core$Tuple$second(
															add(pointOnCanvas));
													}
												}
											}
										}
									case 'DrawJustStarted':
										return _elm_lang$core$Native_Utils.update(
											old,
											{
												mouseMode: _user$project$InterfaceModel$MouseDrawNew(
													_user$project$InterfaceModel$PathPoints(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: old.keysDown, _1: pointOnCanvas},
															_1: {ctor: '[]'}
														}))
											});
									default:
										break _v99_8;
								}
							} else {
								break _v99_8;
							}
						case 'PointOrOffset':
							return isOnCanvas ? _user$project$InterfaceController$upstateRun(
								A2(_user$project$Draw$addPoint, old, pointOnCanvas)) : old;
						default:
							if ((_p242._1.ctor === 'MouseDrawNew') && (_p242._1._0.ctor === 'DrawJustStarted')) {
								return _user$project$InterfaceController$switchToCursorTool(old);
							} else {
								break _v99_8;
							}
					}
				} else {
					break _v99_8;
				}
			} while(false);
			return _elm_lang$core$Native_Utils.update(
				old,
				{mouseMode: _user$project$InterfaceModel$MouseNothing});
		} while(false);
		return old;
	});
var _user$project$InterfaceController$onMouseUp = function (old) {
	var _p254 = {ctor: '_Tuple2', _0: old.outputMode, _1: old.mouseMode};
	_v102_4:
	do {
		_v102_3:
		do {
			if (_p254.ctor === '_Tuple2') {
				switch (_p254._0.ctor) {
					case 'Print':
						return old;
					case 'PrintScopeGraph':
						return old;
					case 'Live':
						switch (_p254._1.ctor) {
							case 'MouseDragZone':
								if (((_p254._1._1.ctor === 'Just') && (_p254._1._1._0.ctor === '_Tuple3')) && (_p254._1._1._0._1.ctor === '_Tuple2')) {
									var _p257 = _p254._1._0;
									var _p255 = old.liveSyncDelay;
									if (_p255 === false) {
										return A2(_user$project$InterfaceController$finishTrigger, _p257, old);
									} else {
										var _p256 = A2(
											_user$project$SleekLayout$clickToCanvasPoint,
											old,
											_user$project$InterfaceModel$mousePosition(old));
										var isOnCanvas = _p256._0;
										var mx = _p256._1._0;
										var my = _p256._1._1;
										return A2(
											_user$project$InterfaceController$finishTrigger,
											_p257,
											A6(
												_user$project$InterfaceController$applyTrigger,
												old.solutionsCache,
												_p257,
												_p254._1._1._0._0,
												{ctor: '_Tuple2', _0: _p254._1._1._0._1._0, _1: _p254._1._1._0._1._1},
												{ctor: '_Tuple2', _0: mx, _1: my},
												old));
									}
								} else {
									break _v102_4;
								}
							case 'MouseDrawNew':
								break _v102_3;
							default:
								break _v102_4;
						}
					default:
						if (_p254._1.ctor === 'MouseDrawNew') {
							break _v102_3;
						} else {
							break _v102_4;
						}
				}
			} else {
				break _v102_4;
			}
		} while(false);
		var resetMouseMode = function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{mouseMode: _user$project$InterfaceModel$MouseNothing});
		};
		var _p258 = {
			ctor: '_Tuple3',
			_0: old.tool,
			_1: _p254._1._0,
			_2: _elm_lang$core$Native_Utils.eq(
				old.keysDown,
				{
					ctor: '::',
					_0: _user$project$Keys$keyShift,
					_1: {ctor: '[]'}
				})
		};
		_v104_4:
		do {
			_v104_3:
			do {
				if (_p258.ctor === '_Tuple3') {
					switch (_p258._0.ctor) {
						case 'Function':
							switch (_p258._1.ctor) {
								case 'TwoPoints':
									return _user$project$InterfaceController$upstateRun(
										resetMouseMode(
											A4(_user$project$Draw$addFunction, _p258._0._0, old, _p258._1._0, _p258._1._1)));
								case 'DrawJustStarted':
									break _v104_3;
								default:
									break _v104_4;
							}
						case 'Poly':
							return old;
						case 'PointOrOffset':
							switch (_p258._1.ctor) {
								case 'Offset1D':
									return _user$project$InterfaceController$upstateRun(
										resetMouseMode(
											A4(_user$project$Draw$addOffsetAndMaybePoint, old, _p258._1._0, _p258._1._1, _p258._1._2)));
								case 'DrawJustStarted':
									break _v104_3;
								default:
									break _v104_4;
							}
						default:
							if (_p258._1.ctor === 'DrawJustStarted') {
								break _v104_3;
							} else {
								break _v104_4;
							}
					}
				} else {
					break _v104_4;
				}
			} while(false);
			return _user$project$InterfaceController$switchToCursorTool(old);
		} while(false);
		return resetMouseMode(old);
	} while(false);
	return _elm_lang$core$Native_Utils.update(
		old,
		{
			mouseMode: _user$project$InterfaceModel$MouseNothing,
			liveSyncInfo: _user$project$InterfaceController$refreshLiveInfo(old)
		});
};
var _user$project$InterfaceController$msgRun = A2(
	_user$project$InterfaceModel$Msg,
	'Run',
	function (_p259) {
		return function (old) {
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					keysDown: {ctor: '[]'}
				});
		}(
			_user$project$InterfaceController$upstateRun(_p259));
	});
var _user$project$InterfaceController$updateTrackedValues = F3(
	function (newHistory, recent, old) {
		var toBeRun = _user$project$InterfaceController$resetDeuceState(
			_user$project$InterfaceModel$hideDeuceRightClickMenu(
				_elm_lang$core$Native_Utils.update(
					old,
					{code: recent.code})));
		var ran = _user$project$InterfaceController$upstateRun(toBeRun);
		var ranDeuceState = ran.deuceState;
		var newDeuceState = _elm_lang$core$Native_Utils.update(
			ranDeuceState,
			{selectedWidgets: recent.selectedDeuceWidgets});
		var almostNew = _elm_lang$core$Native_Utils.update(
			ran,
			{deuceState: newDeuceState, history: newHistory});
		return _user$project$InterfaceController$resetDeucePopupPanelPosition(
			_user$project$DeuceTools$reselectDeuceTool(
				_elm_lang$core$Native_Utils.update(
					almostNew,
					{
						deuceToolsAndResults: _user$project$DeuceTools$createToolCache(almostNew),
						deuceToolResultPreviews: _elm_lang$core$Dict$empty
					})));
	});
var _user$project$InterfaceController$doUndo = function (old) {
	var _p260 = _user$project$History$backward(old.history);
	if (_p260.ctor === 'Just') {
		var _p262 = _p260._0;
		var _p261 = _user$project$History$mostRecent(_p262);
		if (_p261.ctor === 'Just') {
			return A3(_user$project$InterfaceController$updateTrackedValues, _p262, _p261._0, old);
		} else {
			return old;
		}
	} else {
		return old;
	}
};
var _user$project$InterfaceController$msgUndo = A2(_user$project$InterfaceModel$Msg, 'Undo', _user$project$InterfaceController$doUndo);
var _user$project$InterfaceController$doRedo = function (old) {
	var _p263 = _user$project$History$forward(old.history);
	if (_p263.ctor === 'Just') {
		var _p265 = _p263._0;
		var _p264 = _user$project$History$mostRecent(_p265);
		if (_p264.ctor === 'Just') {
			return A3(_user$project$InterfaceController$updateTrackedValues, _p265, _p264._0, old);
		} else {
			return old;
		}
	} else {
		return old;
	}
};
var _user$project$InterfaceController$msgRedo = A2(_user$project$InterfaceModel$Msg, 'Redo', _user$project$InterfaceController$doRedo);
var _user$project$InterfaceController$hideWidgets = function (old) {
	if (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(old.selectedShapes),
		0) && _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Dict$size(old.selectedBlobs),
		0)) {
		var proximalInterpretation = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			_elm_lang$core$List$head(
				A7(
					_user$project$ShapeWidgets$selectionsUniqueProximalEIdInterpretations,
					old.inputExp,
					old.slate,
					old.widgets,
					old.selectedFeatures,
					old.selectedShapes,
					old.selectedBlobs,
					_elm_lang$core$Basics$always(true))));
		var _p266 = _elm_lang$core$List$unzip(
			A2(
				_elm_lang$core$List$filterMap,
				function (feature) {
					var _p267 = feature;
					if (((_p267.ctor === 'ShapeFeature') && (_p267._1.ctor === 'DFeat')) && (_p267._1._0.ctor === 'Offset')) {
						var _p268 = A2(_user$project$Utils$maybeGeti1, -2 - _p267._0, old.widgets);
						if ((_p268.ctor === 'Just') && (_p268._0.ctor === 'WOffset1D')) {
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: _user$project$Lang$valEId(_p268._0._5),
									_1: _user$project$Lang$valEId(
										_elm_lang$core$Native_Utils.eq(_p268._0._2, _user$project$Lang$X) ? _p268._0._6 : _p268._0._7)
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				},
				old.selectedFeatures));
		var offsetAmountEIds = _p266._0;
		var offsetExpressionEIds = _p266._1;
		var hideWidgetsAroundEIds = A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_user$project$Utils$removeAll, proximalInterpretation, offsetAmountEIds),
			offsetExpressionEIds);
		var newProgram = A2(
			_user$project$Lang$mapExp,
			function (exp) {
				return A2(_elm_lang$core$List$member, exp.val.eid, hideWidgetsAroundEIds) ? A2(
					_user$project$Lang$copyPrecedingWhitespace,
					exp,
					A2(
						_user$project$Lang$eOp,
						_user$project$Lang$NoWidgets,
						{
							ctor: '::',
							_0: A2(_user$project$Lang$replacePrecedingWhitespace, ' ', exp),
							_1: {ctor: '[]'}
						})) : exp;
			},
			old.inputExp);
		return _user$project$InterfaceController$upstateRun(
			_user$project$InterfaceController$clearSelections(
				_elm_lang$core$Native_Utils.update(
					old,
					{
						code: A2(_user$project$Syntax$unparser, old.syntax, newProgram)
					})));
	} else {
		return old;
	}
};
var _user$project$InterfaceController$msgHideWidgets = A2(_user$project$InterfaceModel$Msg, 'Hide Widget(s)', _user$project$InterfaceController$hideWidgets);
var _user$project$InterfaceController$addToOutput = function (old) {
	var valsToAdd = A5(_user$project$ShapeWidgets$selectedValsInterpretingPoints, old.slate, old.widgets, old.selectedFeatures, old.selectedShapes, old.selectedBlobs);
	var newCode = A2(
		_user$project$Syntax$unparser,
		old.syntax,
		A3(
			_user$project$Utils$foldl,
			old.inputExp,
			F2(
				function (val, program) {
					var maybeNumberOfNewListItemsExpectedIfListInlined = A2(
						_elm_lang$core$Maybe$map,
						_elm_lang$core$List$length,
						_user$project$Lang$vListToMaybeValsExcludingPoint(val));
					return _user$project$FastParser$freshen(
						A2(
							_elm_lang$core$Maybe$withDefault,
							program,
							_elm_lang$core$List$head(
								_user$project$DrawAddShape$addShape(old)(
									_elm_lang$core$Basics$always(true))(_elm_lang$core$Maybe$Nothing)(
									_user$project$Lang$eHoleVal(val))(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(
									_elm_lang$core$Maybe$Just(1))(maybeNumberOfNewListItemsExpectedIfListInlined)(false)(program))));
				}),
			valsToAdd));
	return (!_elm_lang$core$Native_Utils.eq(old.code, newCode)) ? _user$project$InterfaceController$upstateRun(
		_user$project$InterfaceController$clearSelections(
			_elm_lang$core$Native_Utils.update(
				old,
				{code: newCode}))) : old;
};
var _user$project$InterfaceController$msgAddToOutput = A2(_user$project$InterfaceModel$Msg, 'Add to Output', _user$project$InterfaceController$addToOutput);
var _user$project$InterfaceController$doDelete = function (old) {
	var proximalInterpretations = A7(
		_user$project$ShapeWidgets$selectionsUniqueProximalEIdInterpretations,
		old.inputExp,
		old.slate,
		old.widgets,
		old.selectedFeatures,
		old.selectedShapes,
		old.selectedBlobs,
		_elm_lang$core$Basics$always(true));
	var deleteResults = A2(
		_elm_lang$core$List$map,
		function (eids) {
			return A3(_elm_lang$core$List$foldl, _user$project$CodeMotion$deleteEId, old.inputExp, eids);
		},
		A2(_elm_lang$core$List$take, 1, proximalInterpretations));
	var _p269 = deleteResults;
	if (_p269.ctor === '[]') {
		return old;
	} else {
		return _user$project$InterfaceController$upstateRun(
			_user$project$InterfaceController$clearSelections(
				_elm_lang$core$Native_Utils.update(
					old,
					{
						code: A2(_user$project$Syntax$unparser, old.syntax, _p269._0)
					})));
	}
};
var _user$project$InterfaceController$msgSelectSynthesisResult = function (newExp) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Select Synthesis Result',
		function (old) {
			var newCode = A2(_user$project$Syntax$unparser, old.syntax, newExp);
			return _user$project$InterfaceController$upstateRun(
				_user$project$InterfaceController$clearSelections(
					_elm_lang$core$Native_Utils.update(
						old,
						{code: newCode})));
		});
};
var _user$project$InterfaceController$doDuplicate = function (old) {
	var uniqueSingleExpressionInterpretations = A7(
		_user$project$ShapeWidgets$uniqueNonVarSingleExpressionInterpretations,
		old.inputExp,
		old.slate,
		old.widgets,
		old.selectedFeatures,
		old.selectedShapes,
		old.selectedBlobs,
		_elm_lang$core$Basics$always(true));
	var maybeNewProgram = A2(
		_elm_lang$core$Maybe$map,
		function (expToDuplicate) {
			var name = _user$project$LangTools$removeTrailingDigits(
				A2(_user$project$LangTools$expNameForExp, old.inputExp, expToDuplicate));
			var expectedShapeCountIncrease = _elm_lang$core$List$sum(
				A2(
					_elm_lang$core$List$map,
					function (selectedNodeId) {
						var _p270 = A2(_user$project$Utils$maybeGeti1, -2 - selectedNodeId, old.widgets);
						if ((_p270.ctor === 'Just') && (_p270._0.ctor === 'WList')) {
							var _p271 = _user$project$LangSvg$vListToIndexedTree(_p270._0._0);
							if (_p271.ctor === 'Ok') {
								return _elm_lang$core$Dict$size(_p271._0._1) - 1;
							} else {
								return 1;
							}
						} else {
							return 1;
						}
					},
					old.selectedShapes));
			var newProgram = A2(
				_elm_lang$core$Maybe$withDefault,
				old.inputExp,
				_elm_lang$core$List$head(
					_user$project$DrawAddShape$addShape(old)(
						_elm_lang$core$Basics$always(true))(
						_elm_lang$core$Maybe$Just(name))(expToDuplicate)(
						_elm_lang$core$Maybe$Just(
							(expectedShapeCountIncrease + _elm_lang$core$List$length(old.selectedFeatures)) + _elm_lang$core$Dict$size(old.selectedBlobs)))(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(false)(old.inputExp)));
			if (!A2(_user$project$LangUnparser$expsEquivalent, newProgram, old.inputExp)) {
				return newProgram;
			} else {
				var _p272 = A6(
					_user$project$LangTools$newVariableVisibleTo,
					-1,
					name,
					1,
					expToDuplicate,
					{
						ctor: '::',
						_0: expToDuplicate.val.eid,
						_1: {
							ctor: '::',
							_0: A2(_user$project$FocusedEditingContext$eidAtEndOfDrawingContext, old.editingContext, old.inputExp),
							_1: {ctor: '[]'}
						}
					},
					old.inputExp);
				var newProgram = _p272._1;
				var eidToInsertBefore = function () {
					var _p273 = A2(_user$project$LangTools$findLetAndPatMatchingExpLoose, expToDuplicate.val.eid, old.inputExp);
					if (_p273.ctor === 'Nothing') {
						return expToDuplicate.val.eid;
					} else {
						return _p273._0._0.val.eid;
					}
				}();
				return newProgram;
			}
		},
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$sortBy,
				_user$project$Info$parsedThingToLocation,
				A2(
					_elm_lang$core$List$map,
					_user$project$LangTools$justFindExpByEId(old.inputExp),
					_user$project$Utils$dedup(
						A2(
							_elm_lang$core$List$map,
							function (_p274) {
								return function (_) {
									return _.eid;
								}(
									function (_) {
										return _.val;
									}(
										A2(_user$project$LangTools$outerSameValueExpByEId, old.inputExp, _p274)));
							},
							uniqueSingleExpressionInterpretations))))));
	return A2(
		_elm_lang$core$Maybe$withDefault,
		old,
		A2(
			_elm_lang$core$Maybe$map,
			function (newProgram) {
				return _user$project$InterfaceController$upstateRun(
					_user$project$InterfaceController$clearSelections(
						_elm_lang$core$Native_Utils.update(
							old,
							{
								code: A2(_user$project$Syntax$unparser, old.syntax, newProgram)
							})));
			},
			maybeNewProgram));
};
var _user$project$InterfaceController$msgDuplicate = A2(_user$project$InterfaceModel$Msg, 'Duplicate ', _user$project$InterfaceController$doDuplicate);
var _user$project$InterfaceController$doCallUpdate = function (m) {
	var updatedExp = A2(
		_user$project$Results$andThen,
		function (out) {
			return A5(_user$project$Update$update, _user$project$Eval$initEnv, m.inputExp, m.inputVal, out, _user$project$Results$LazyNil);
		},
		_user$project$Results$fromResult(
			A2(
				_elm_lang$core$Result$map,
				function (_p275) {
					var _p276 = _p275;
					return _user$project$Update$Raw(_p276._0._0);
				},
				A2(
					_elm_lang$core$Result$andThen,
					A3(
						_user$project$Eval$doEval,
						false,
						m.syntax,
						{ctor: '[]'}),
					A2(
						_elm_lang$core$Result$mapError,
						function (e) {
							return _elm_lang$core$Basics$toString(e);
						},
						A2(_user$project$Syntax$parser, m.syntax, m.valueEditorString))))));
	var _p277 = updatedExp;
	if (_p277.ctor === 'Errs') {
		return A2(
			_elm_lang$core$Debug$log,
			A2(_elm_lang$core$Basics_ops['++'], 'Could not update: ', _p277._0),
			m);
	} else {
		var _p285 = _p277._0;
		var firstValidSolution = A2(
			_user$project$Results$findFirst,
			function (_p278) {
				var _p279 = _p278;
				return _elm_lang$core$Native_Utils.eq(_p279._0, _user$project$Eval$initEnv);
			},
			_p285);
		var _p280 = firstValidSolution;
		if (_p280.ctor === 'Nothing') {
			var _p281 = A2(
				_elm_lang$core$Debug$log,
				'No updates not modifying the environment.',
				{ctor: '_Tuple0'});
			var _p282 = _p285;
			if (_p282.ctor === 'LazyNil') {
				var _p283 = A2(
					_elm_lang$core$Debug$log,
					'More precisely, there was no solution',
					{ctor: '_Tuple0'});
				return m;
			} else {
				var _p284 = A2(
					_elm_lang$core$Debug$log,
					'There was at least one solution, but the environments would have differed',
					{ctor: '_Tuple0'});
				return _user$project$InterfaceController$upstateRun(
					_elm_lang$core$Native_Utils.update(
						m,
						{
							code: A2(_user$project$Syntax$unparser, m.syntax, _p282._0._1)
						}));
			}
		} else {
			return _user$project$InterfaceController$upstateRun(
				_elm_lang$core$Native_Utils.update(
					m,
					{
						code: A2(_user$project$Syntax$unparser, m.syntax, _p280._0._1)
					}));
		}
	}
};
var _user$project$InterfaceController$msgCallUpdate = A2(_user$project$InterfaceModel$Msg, 'Call Update', _user$project$InterfaceController$doCallUpdate);
var _user$project$InterfaceController$msgSetEditingContext = F2(
	function (focusedEId, maybeExampleCallEId) {
		return A2(
			_user$project$InterfaceModel$Msg,
			'Set Editing Context',
			function (old) {
				var newProgram = A3(
					_user$project$FocusedEditingContext$setEditingContextMarkers,
					focusedEId,
					maybeExampleCallEId,
					_user$project$FocusedEditingContext$clearEditingContextMarkers(old.inputExp));
				return _user$project$InterfaceController$upstateRun(
					_user$project$InterfaceController$clearSelections(
						_elm_lang$core$Native_Utils.update(
							old,
							{
								code: A2(_user$project$Syntax$unparser, old.syntax, newProgram)
							})));
			});
	});
var _user$project$InterfaceController$doClearEditingContext = function (old) {
	return _user$project$InterfaceController$upstateRun(
		_user$project$InterfaceController$clearSelections(
			_elm_lang$core$Native_Utils.update(
				old,
				{
					code: A2(
						_user$project$Syntax$unparser,
						old.syntax,
						_user$project$FocusedEditingContext$clearEditingContextMarkers(old.inputExp))
				})));
};
var _user$project$InterfaceController$msgKeyDown = function (keyCode) {
	var func = function (old) {
		var currentKeyDown = A2(_user$project$InterfaceController$isKeyDown, keyCode, old);
		if (_elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyEsc)) {
			if (_user$project$InterfaceModel$anyDialogShown(old)) {
				return _user$project$InterfaceModel$closeAllDialogBoxes(old);
			} else {
				var $new = function (m) {
					return _elm_lang$core$Native_Utils.update(
						m,
						{deucePopupPanelAbove: true});
				}(
					_user$project$InterfaceController$resetDeuceState(
						_user$project$InterfaceModel$hideDeuceRightClickMenu(
							_elm_lang$core$Native_Utils.update(
								old,
								{renamingInOutput: _elm_lang$core$Maybe$Nothing}))));
				var _p286 = {
					ctor: '_Tuple4',
					_0: old.tool,
					_1: old.mouseMode,
					_2: _user$project$InterfaceModel$noCodeWidgetsSelected(old),
					_3: _user$project$InterfaceModel$nothingSelectedInOutput(old)
				};
				_v120_4:
				do {
					_v120_1:
					do {
						_v120_0:
						do {
							if (_p286.ctor === '_Tuple4') {
								if (_p286._0.ctor === 'Cursor') {
									switch (_p286._1.ctor) {
										case 'MouseNothing':
											if ((_p286._2 === true) && (_p286._3 === true)) {
												break _v120_0;
											} else {
												break _v120_1;
											}
										case 'MouseDrawNew':
											if ((_p286._2 === true) && (_p286._3 === true)) {
												break _v120_0;
											} else {
												break _v120_1;
											}
										default:
											if ((_p286._2 === true) && (_p286._3 === true)) {
												break _v120_0;
											} else {
												break _v120_1;
											}
									}
								} else {
									switch (_p286._1.ctor) {
										case 'MouseNothing':
											return _elm_lang$core$Native_Utils.update(
												$new,
												{tool: _user$project$InterfaceModel$Cursor});
										case 'MouseDrawNew':
											return _elm_lang$core$Native_Utils.update(
												$new,
												{mouseMode: _user$project$InterfaceModel$MouseNothing});
										default:
											break _v120_4;
									}
								}
							} else {
								break _v120_4;
							}
						} while(false);
						return _user$project$InterfaceController$doClearEditingContext($new);
					} while(false);
					return _user$project$InterfaceController$clearSelections($new);
				} while(false);
				return $new;
			}
		} else {
			if ((!_elm_lang$core$Native_Utils.eq(old.outputMode, _user$project$InterfaceModel$ShowValue)) && (_elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyE) && (A2(_elm_lang$core$List$any, _user$project$Keys$isCommandKey, old.keysDown) && _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(old.keysDown),
				1)))) {
				var newModel = _user$project$InterfaceController$doMakeEqual(old);
				return A2(
					_elm_lang$core$Maybe$withDefault,
					old,
					A2(
						_elm_lang$core$Maybe$map,
						function (synthesisResult) {
							return _user$project$InterfaceController$upstateRun(
								_user$project$InterfaceController$clearSynthesisResults(
									_elm_lang$core$Native_Utils.update(
										newModel,
										{
											code: A2(
												_user$project$Syntax$unparser,
												old.syntax,
												_user$project$InterfaceModel$resultExp(synthesisResult))
										})));
						},
						A2(
							_elm_lang$core$Maybe$andThen,
							_user$project$Utils$findFirst(_user$project$InterfaceModel$isResultSafe),
							A2(_elm_lang$core$Dict$get, 'Make Equal', newModel.synthesisResultsDict))));
			} else {
				if ((!_elm_lang$core$Native_Utils.eq(old.outputMode, _user$project$InterfaceModel$ShowValue)) && (_elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyBackspace) && _elm_lang$core$Native_Utils.eq(old.renamingInOutput, _elm_lang$core$Maybe$Nothing))) {
					return _user$project$InterfaceController$doDelete(old);
				} else {
					if ((!_elm_lang$core$Native_Utils.eq(old.outputMode, _user$project$InterfaceModel$ShowValue)) && (_elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyD) && (A2(_elm_lang$core$List$any, _user$project$Keys$isCommandKey, old.keysDown) && _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$List$length(old.keysDown),
						1)))) {
						return _user$project$InterfaceController$doDuplicate(old);
					} else {
						if ((!_elm_lang$core$Native_Utils.eq(old.outputMode, _user$project$InterfaceModel$ShowValue)) && (_elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyZ) && (A2(_elm_lang$core$List$any, _user$project$Keys$isCommandKey, old.keysDown) && _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$length(old.keysDown),
							1)))) {
							return _user$project$InterfaceController$doUndo(old);
						} else {
							if ((!_elm_lang$core$Native_Utils.eq(old.outputMode, _user$project$InterfaceModel$ShowValue)) && (_elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyZ) && (A2(_elm_lang$core$List$any, _user$project$Keys$isCommandKey, old.keysDown) && (A2(
								_elm_lang$core$List$any,
								F2(
									function (x, y) {
										return _elm_lang$core$Native_Utils.eq(x, y);
									})(_user$project$Keys$keyShift),
								old.keysDown) && _elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(old.keysDown),
								2))))) {
								return _user$project$InterfaceController$doRedo(old);
							} else {
								if (_elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyEnter) && (A2(_elm_lang$core$List$any, _user$project$Keys$isCommandKey, old.keysDown) && _elm_lang$core$Native_Utils.eq(
									_elm_lang$core$List$length(old.keysDown),
									1))) {
									var _p287 = old.outputMode;
									switch (_p287.ctor) {
										case 'Live':
											return _user$project$InterfaceController$upstateRun(old);
										case 'ShowValue':
											return _user$project$InterfaceController$doCallUpdate(old);
										default:
											return old;
									}
								} else {
									if (_elm_lang$core$Native_Utils.eq(old.outputMode, _user$project$InterfaceModel$ShowValue) && (_elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyUp) && (A2(_elm_lang$core$List$any, _user$project$Keys$isCommandKey, old.keysDown) && _elm_lang$core$Native_Utils.eq(
										_elm_lang$core$List$length(old.keysDown),
										1)))) {
										return _elm_lang$core$Native_Utils.update(
											old,
											{outputMode: _user$project$InterfaceModel$Live});
									} else {
										if ((!currentKeyDown) && _elm_lang$core$Native_Utils.eq(keyCode, _user$project$Keys$keyShift)) {
											return _user$project$InterfaceController$refreshInputExp(old);
										} else {
											return old;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
	var addKey = function (old) {
		var currentKeyDown = A2(_user$project$InterfaceController$isKeyDown, keyCode, old);
		return (!currentKeyDown) ? _elm_lang$core$Native_Utils.update(
			old,
			{
				keysDown: {ctor: '::', _0: keyCode, _1: old.keysDown}
			}) : old;
	};
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Key Down ',
			_elm_lang$core$Basics$toString(keyCode)),
		function (_p288) {
			return addKey(
				func(_p288));
		});
};
var _user$project$InterfaceController$msgClearEditingContext = A2(_user$project$InterfaceModel$Msg, 'Clear Editing Context', _user$project$InterfaceController$doClearEditingContext);
var _user$project$InterfaceController$msgDoRename = function (pid) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Rename PId ',
			_elm_lang$core$Basics$toString(pid)),
		function (old) {
			var _p289 = old.renamingInOutput;
			if (_p289.ctor === 'Just') {
				var _p295 = _p289._0._3;
				if (_elm_lang$core$Native_Utils.eq(_p289._0._0, pid)) {
					var pat = A2(_user$project$LangTools$justFindPatByPId, old.inputExp, pid);
					var identPatsInOrder = A2(
						_elm_lang$core$List$sortBy,
						_user$project$Info$parsedThingToLocation,
						A2(
							_elm_lang$core$List$filter,
							function (_p290) {
								return _user$project$Utils$maybeToBool(
									_user$project$LangTools$patToMaybeIdent(_p290));
							},
							_user$project$Lang$flattenPatTree(pat)));
					var _p291 = _user$project$ElmParser$parsePatternUnfresh(_p295);
					if (_p291.ctor === 'Ok') {
						var newIdentsInOrder = A2(
							_elm_lang$core$List$filterMap,
							_user$project$LangTools$patToMaybeIdent,
							A2(
								_elm_lang$core$List$sortBy,
								_user$project$Info$parsedThingToLocation,
								_user$project$Lang$flattenPatTree(_p291._0)));
						var newProgram = A3(
							_user$project$Utils$foldl,
							old.inputExp,
							F2(
								function (_p292, programSoFar) {
									var _p293 = _p292;
									return A2(
										_elm_lang$core$Maybe$withDefault,
										programSoFar,
										A2(
											_elm_lang$core$Maybe$map,
											_user$project$InterfaceModel$resultExp,
											_elm_lang$core$List$head(
												A2(
													_elm_lang$core$List$filter,
													_user$project$InterfaceModel$isResultSafe,
													A3(_user$project$CodeMotion$renamePatByPId, _p293._0.val.pid, _p293._1, programSoFar)))));
								}),
							A2(_user$project$Utils$zip, identPatsInOrder, newIdentsInOrder));
						return _user$project$InterfaceController$upstateRun(
							_elm_lang$core$Native_Utils.update(
								old,
								{
									code: A2(_user$project$Syntax$unparser, old.syntax, newProgram),
									renamingInOutput: _elm_lang$core$Maybe$Nothing
								}));
					} else {
						var _p294 = _user$project$Utils$log(
							A2(_elm_lang$core$Basics_ops['++'], 'Couldn\'t parse new pattern ', _p295));
						return _elm_lang$core$Native_Utils.update(
							old,
							{renamingInOutput: _elm_lang$core$Maybe$Nothing});
					}
				} else {
					return old;
				}
			} else {
				return old;
			}
		});
};
var _user$project$InterfaceController$msgRemoveArg = function (pid) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Remove Arg PId ',
			_elm_lang$core$Basics$toString(pid)),
		function (old) {
			var _p296 = A2(_user$project$Lang$pidToPathedPatternId, old.inputExp, pid);
			if (_p296.ctor === 'Nothing') {
				return old;
			} else {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					old,
					A2(
						_elm_lang$core$Maybe$map,
						function (result) {
							return _user$project$InterfaceController$upstateRun(
								_elm_lang$core$Native_Utils.update(
									old,
									{
										code: A2(
											_user$project$Syntax$unparser,
											old.syntax,
											_user$project$InterfaceModel$resultExp(result))
									}));
						},
						_elm_lang$core$List$head(
							A3(_user$project$CodeMotion$removeArg, old.syntax, _p296._0, old.inputExp))));
			}
		});
};
var _user$project$InterfaceController$msgMoveArgRelative = F2(
	function (amount, pid) {
		return A2(
			_user$project$InterfaceModel$Msg,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Move Arg PId ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(pid),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' by ',
						_elm_lang$core$Basics$toString(amount)))),
			function (old) {
				var _p297 = A2(_user$project$Lang$pidToPathedPatternId, old.inputExp, pid);
				if (_p297.ctor === 'Nothing') {
					var _p298 = _user$project$Utils$log(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Move Arg: could not find PId ',
							_elm_lang$core$Basics$toString(pid)));
					return old;
				} else {
					if (((((_p297._0.ctor === '_Tuple2') && (_p297._0._0.ctor === '_Tuple2')) && (_p297._0._0._1 === 1)) && (_p297._0._1.ctor === '::')) && (_p297._0._1._1.ctor === '[]')) {
						var _p303 = _p297._0._1._0;
						var _p299 = A2(_user$project$FocusedEditingContext$maybeFocusedExp, old.editingContext, old.inputExp);
						if (_p299.ctor === 'Just') {
							var _p300 = _p299._0.val.e__;
							if (_p300.ctor === 'EFun') {
								var targetPath = {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Basics$min,
										A2(_elm_lang$core$Basics$max, 1, _p303 + amount),
										_elm_lang$core$List$length(_p300._1) + 1),
									_1: {ctor: '[]'}
								};
								return A2(
									_elm_lang$core$Maybe$withDefault,
									old,
									A2(
										_elm_lang$core$Maybe$map,
										function (result) {
											return _user$project$InterfaceController$upstateRun(
												_elm_lang$core$Native_Utils.update(
													old,
													{
														code: A2(
															_user$project$Syntax$unparser,
															old.syntax,
															_user$project$InterfaceModel$resultExp(result))
													}));
										},
										_elm_lang$core$List$head(
											A4(
												_user$project$CodeMotion$reorderFunctionArgs,
												_p297._0._0._0,
												{
													ctor: '::',
													_0: {
														ctor: '::',
														_0: _p303,
														_1: {ctor: '[]'}
													},
													_1: {ctor: '[]'}
												},
												targetPath,
												old.inputExp))));
							} else {
								var _p301 = _user$project$Utils$log('Move Arg: focused expression is not a function');
								return old;
							}
						} else {
							var _p302 = _user$project$Utils$log('Move Arg: could not find focused function');
							return old;
						}
					} else {
						var _p304 = _user$project$Utils$log(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Unexpected PPId ',
								_elm_lang$core$Basics$toString(_p297._0)));
						return old;
					}
				}
			});
	});
var _user$project$InterfaceController$fileMessageHandler = function (ifm) {
	var _p305 = ifm;
	switch (_p305.ctor) {
		case 'ConfirmWrite':
			return A2(
				_user$project$InterfaceModel$Msg,
				'Confirm Write',
				_user$project$InterfaceController$confirmWrite(_p305._0));
		case 'ConfirmDelete':
			return A2(
				_user$project$InterfaceModel$Msg,
				'Confirm Delete',
				_user$project$InterfaceController$confirmDelete(_p305._0));
		case 'ReceiveFile':
			return A2(
				_user$project$InterfaceModel$Msg,
				'Read File',
				function (_p306) {
					return _user$project$InterfaceController$upstateRun(
						A3(_user$project$InterfaceController$readFile, _p305._0, _p305._1, _p306));
				});
		case 'ReceiveIcon':
			return _user$project$InterfaceController$msgLoadIcon(_p305._0);
		default:
			return A2(
				_user$project$InterfaceModel$Msg,
				'Update File Index',
				_user$project$InterfaceController$updateFileIndex(_p305._0));
	}
};
var _user$project$InterfaceController$handleNew = function (template) {
	return function (_p307) {
		return _user$project$InterfaceController$upstateRun(
			A2(
				_user$project$InterfaceModel$closeDialogBox,
				_user$project$InterfaceModel$New,
				function (old) {
					var _p308 = A2(_user$project$Utils$maybeFind, template, _user$project$ExamplesGenerated$list);
					if (_p308.ctor === 'Nothing') {
						var _p309 = A2(_elm_lang$core$Debug$log, 'WARN: not found:', template);
						return old;
					} else {
						var _p310 = _p308._0._1(
							{ctor: '_Tuple0'});
						var e = _p310.e;
						var v = _p310.v;
						var ws = _p310.ws;
						var ati = _p310.ati;
						var so = A2(_user$project$Sync$syncOptionsOf, old.syncOptions, e);
						var outputMode = A2(
							_user$project$Utils$fromOk,
							'SelectExample mkLive',
							A7(
								_user$project$InterfaceModel$mkLive,
								old.syntax,
								so,
								old.slideNumber,
								old.movieNumber,
								old.movieTime,
								e,
								{ctor: '_Tuple2', _0: v, _1: ws}));
						return A2(
							_user$project$InterfaceController$handleError,
							old,
							A2(
								_elm_lang$core$Result$map,
								function (_p311) {
									var _p312 = _p311;
									var _p313 = _p312._2;
									var code = A2(_user$project$Syntax$unparser, old.syntax, e);
									return _user$project$InterfaceController$resetDeuceState(
										_elm_lang$core$Native_Utils.update(
											_user$project$InterfaceModel$initModel,
											{
												inputExp: e,
												inputVal: v,
												valueEditorString: _user$project$Update$valToString(v),
												code: code,
												lastRunCode: code,
												history: _user$project$History$begin(
													{
														code: code,
														selectedDeuceWidgets: {ctor: '[]'}
													}),
												liveSyncInfo: outputMode,
												syncOptions: so,
												slideNumber: 1,
												slideCount: _p312._0,
												movieCount: _p312._1,
												movieTime: 0,
												movieDuration: _p313,
												movieContinue: _p312._3,
												runAnimation: _elm_lang$core$Native_Utils.cmp(_p313, 0) > 0,
												slate: _p312._4,
												widgets: ws,
												codeBoxInfo: A2(_user$project$InterfaceController$updateCodeBoxInfo, ati, old),
												filename: _user$project$InterfaceModel$bufferFilename(old),
												syntax: old.syntax,
												needsSave: true,
												lastSaveState: _elm_lang$core$Maybe$Nothing,
												lastSelectedTemplate: _elm_lang$core$Maybe$Just(template),
												dimensions: old.dimensions,
												localSaves: old.localSaves,
												basicCodeBox: old.basicCodeBox,
												randomColor: old.randomColor,
												layoutOffsets: old.layoutOffsets,
												fileIndex: old.fileIndex,
												icons: old.icons,
												enableDeuceBoxSelection: old.enableDeuceBoxSelection,
												enableDeuceTextSelection: old.enableDeuceTextSelection,
												codeToolsMenuMode: old.codeToolsMenuMode,
												textSelectMode: old.textSelectMode,
												enableTextEdits: old.enableTextEdits,
												allowMultipleTargetPositions: old.allowMultipleTargetPositions,
												mainResizerX: old.mainResizerX,
												colorScheme: old.colorScheme
											}));
								},
								A6(_user$project$LangSvg$fetchEverything, old.showPreludeOffsets, old.syntax, old.slideNumber, old.movieNumber, old.movieTime, v)));
					}
				}(_p307)));
	};
};
var _user$project$InterfaceController$msgNew = function (template) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'New',
		_user$project$InterfaceController$handleNew(template));
};
var _user$project$InterfaceController$msgAskNew = function (template) {
	return _user$project$InterfaceController$requireSaveAsker(
		_user$project$InterfaceController$msgNew(template));
};
var _user$project$InterfaceController$msgChooseDeuceExp = F2(
	function (name, exp) {
		return A2(
			_user$project$InterfaceModel$Msg,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Choose Deuce Exp \"',
				A2(_elm_lang$core$Basics_ops['++'], name, '\"')),
			function (m) {
				var modifiedHistory = A3(_user$project$InterfaceModel$modelModify, m.code, m.deuceState.selectedWidgets, m.history);
				var modelWithCorrectHistory = function () {
					var _p314 = modifiedHistory;
					if (_p314.ctor === 'Just') {
						return _elm_lang$core$Native_Utils.update(
							m,
							{history: _p314._0});
					} else {
						return m;
					}
				}();
				return _user$project$InterfaceController$upstateRun(
					_elm_lang$core$Native_Utils.update(
						modelWithCorrectHistory,
						{
							code: A2(_user$project$Syntax$unparser, m.syntax, exp)
						}));
			});
	});
var _user$project$InterfaceController$msgSetPreludeOffsetsShown = function (showPreludeOffsets) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Set Prelude Offsets Shown',
		function (old) {
			return _user$project$InterfaceController$upstateRun(
				_elm_lang$core$Native_Utils.update(
					old,
					{showPreludeOffsets: showPreludeOffsets}));
		});
};
var _user$project$InterfaceController$msgSetSyntax = function (newSyntax) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Set Syntax to ',
			_elm_lang$core$Basics$toString(newSyntax)),
		function (old) {
			var _p315 = A3(_user$project$Syntax$convertSyntax, old.syntax, newSyntax, old.code);
			if (_p315.ctor === 'Ok') {
				return _user$project$InterfaceController$upstateRun(
					_elm_lang$core$Native_Utils.update(
						old,
						{syntax: newSyntax, code: _p315._0}));
			} else {
				return old;
			}
		});
};
var _user$project$InterfaceController$msgTryParseRun = function (newModel) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Try Parse Run',
		function (old) {
			var _p316 = _user$project$InterfaceController$tryRun(newModel);
			if (_p316.ctor === 'Err') {
				if (_p316._0._2.ctor === 'Just') {
					return _elm_lang$core$Native_Utils.update(
						_p316._0._0,
						{
							caption: _elm_lang$core$Maybe$Just(
								_user$project$InterfaceModel$LangError(_p316._0._1)),
							codeBoxInfo: A2(_user$project$InterfaceController$updateCodeBoxWithParseError, _p316._0._2._0, old.codeBoxInfo)
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						_p316._0._0,
						{
							caption: _elm_lang$core$Maybe$Just(
								_user$project$InterfaceModel$LangError(_p316._0._1))
						});
				}
			} else {
				return _p316._0;
			}
		});
};
var _user$project$InterfaceController$debugLog = _user$project$Config$debugLog(_user$project$Config$debugController);
var _user$project$InterfaceController$upstate = F2(
	function (msg, old) {
		var _p317 = msg;
		if (_p317.ctor === 'Msg') {
			var _p318 = A2(_user$project$InterfaceController$debugLog, 'Msg', _p317._0);
			return _p317._1(old);
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'InterfaceController',
				{
					start: {line: 888, column: 3},
					end: {line: 897, column: 96}
				},
				_p317)('InterfaceController.upstate: solver response messages should never hit here');
		}
	});
var _user$project$InterfaceController$msgStartAnimation = A2(
	_user$project$InterfaceModel$Msg,
	'Start Animation',
	function (old) {
		return A2(
			_user$project$InterfaceController$upstate,
			_user$project$InterfaceController$msgRedraw,
			_elm_lang$core$Native_Utils.update(
				old,
				{movieTime: 0, runAnimation: true}));
	});
var _user$project$InterfaceController$msgNextSlide = A2(
	_user$project$InterfaceModel$Msg,
	'Next Slide',
	function (old) {
		return (_elm_lang$core$Native_Utils.cmp(old.slideNumber, old.slideCount) > -1) ? A2(
			_user$project$InterfaceController$upstate,
			_user$project$InterfaceController$msgStartAnimation,
			_elm_lang$core$Native_Utils.update(
				old,
				{slideNumber: old.slideNumber, movieNumber: old.movieCount})) : A2(
			_user$project$InterfaceController$upstate,
			_user$project$InterfaceController$msgStartAnimation,
			_elm_lang$core$Native_Utils.update(
				old,
				{slideNumber: old.slideNumber + 1, movieNumber: 1}));
	});
var _user$project$InterfaceController$msgPreviousSlide = A2(
	_user$project$InterfaceModel$Msg,
	'Previous Slide',
	function (old) {
		if (_elm_lang$core$Native_Utils.cmp(old.slideNumber, 1) < 1) {
			return A2(
				_user$project$InterfaceController$upstate,
				_user$project$InterfaceController$msgStartAnimation,
				_elm_lang$core$Native_Utils.update(
					old,
					{slideNumber: 1, movieNumber: 1}));
		} else {
			var previousSlideNumber = old.slideNumber - 1;
			var result = A2(
				_elm_lang$core$Result$andThen,
				function (_p320) {
					var _p321 = _p320;
					return A2(
						_elm_lang$core$Result$map,
						function (previousMovieCount) {
							return A2(
								_user$project$InterfaceController$upstate,
								_user$project$InterfaceController$msgStartAnimation,
								_elm_lang$core$Native_Utils.update(
									old,
									{slideNumber: previousSlideNumber, movieNumber: previousMovieCount}));
						},
						A4(_user$project$LangSvg$resolveToMovieCount, old.showPreludeOffsets, old.syntax, previousSlideNumber, _p321._0._0));
				},
				A4(_user$project$FocusedEditingContext$evalAtContext, old.showPreludeOffsets, old.syntax, old.editingContext, old.inputExp));
			return A2(_user$project$InterfaceController$handleError, old, result);
		}
	});
var _user$project$InterfaceController$msgNextMovie = A2(
	_user$project$InterfaceModel$Msg,
	'Next Movie',
	function (old) {
		return (_elm_lang$core$Native_Utils.eq(old.movieNumber, old.movieCount) && (_elm_lang$core$Native_Utils.cmp(old.slideNumber, old.slideCount) < 0)) ? A2(_user$project$InterfaceController$upstate, _user$project$InterfaceController$msgNextSlide, old) : ((_elm_lang$core$Native_Utils.cmp(old.movieNumber, old.movieCount) < 0) ? A2(
			_user$project$InterfaceController$upstate,
			_user$project$InterfaceController$msgStartAnimation,
			_elm_lang$core$Native_Utils.update(
				old,
				{movieNumber: old.movieNumber + 1})) : A2(
			_user$project$InterfaceController$upstate,
			_user$project$InterfaceController$msgRedraw,
			_elm_lang$core$Native_Utils.update(
				old,
				{movieTime: old.movieDuration, runAnimation: false})));
	});
var _user$project$InterfaceController$msgTickDelta = function (deltaT) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Tick Delta ',
			_elm_lang$core$Basics$toString(deltaT)),
		function (old) {
			if (_elm_lang$core$Native_Utils.cmp(old.movieTime, old.movieDuration) < 0) {
				var adjustedDeltaT = _elm_lang$core$Native_Utils.eq(old.movieTime, 0.0) ? A3(_elm_lang$core$Basics$clamp, 0.0, 50, deltaT) : deltaT;
				var newMovieTime = A3(_elm_lang$core$Basics$clamp, 0.0, old.movieDuration, old.movieTime + (adjustedDeltaT / 1000));
				return A2(
					_user$project$InterfaceController$upstate,
					_user$project$InterfaceController$msgRedraw,
					_elm_lang$core$Native_Utils.update(
						old,
						{movieTime: newMovieTime}));
			} else {
				if (_elm_lang$core$Native_Utils.eq(old.movieContinue, true)) {
					return A2(_user$project$InterfaceController$upstate, _user$project$InterfaceController$msgNextMovie, old);
				} else {
					return _elm_lang$core$Native_Utils.update(
						old,
						{runAnimation: false});
				}
			}
		});
};
var _user$project$InterfaceController$msgPreviousMovie = A2(
	_user$project$InterfaceModel$Msg,
	'Previous Movie',
	function (old) {
		return _elm_lang$core$Native_Utils.eq(old.movieNumber, 1) ? A2(_user$project$InterfaceController$upstate, _user$project$InterfaceController$msgPreviousSlide, old) : A2(
			_user$project$InterfaceController$upstate,
			_user$project$InterfaceController$msgStartAnimation,
			_elm_lang$core$Native_Utils.update(
				old,
				{movieNumber: old.movieNumber - 1}));
	});
var _user$project$InterfaceController$msgMouseIsDown = function (b) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'MouseIsDown ',
			_elm_lang$core$Basics$toString(b)),
		function (old) {
			var $new = function () {
				var _p322 = _user$project$InterfaceModel$mousePosition(old);
				var x = _p322.x;
				var y = _p322.y;
				var lightestColor = 470;
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						randomColor: A2(_elm_lang$core$Basics_ops['%'], (old.randomColor + x) + y, lightestColor)
					});
			}();
			var _p323 = {ctor: '_Tuple2', _0: b, _1: $new.mouseState};
			if (_p323._0 === false) {
				if (_p323._1._0.ctor === 'Just') {
					if (_p323._1._0._0 === false) {
						var _p327 = _p323._1._1;
						var _p326 = A2(
							_user$project$InterfaceController$debugLog,
							'mouse click',
							{ctor: '_Tuple0'});
						return A3(
							_user$project$InterfaceController$onMouseClick,
							_p327,
							_elm_lang$core$Native_Utils.update(
								$new,
								{
									mouseState: {ctor: '_Tuple3', _0: _elm_lang$core$Maybe$Nothing, _1: _p327, _2: _elm_lang$core$Maybe$Nothing}
								}),
							_p323._1._2);
					} else {
						var _p328 = A2(
							_user$project$InterfaceController$debugLog,
							'mouse up',
							{ctor: '_Tuple0'});
						return _user$project$InterfaceController$onMouseUp(
							_elm_lang$core$Native_Utils.update(
								$new,
								{
									mouseState: {ctor: '_Tuple3', _0: _elm_lang$core$Maybe$Nothing, _1: _p323._1._1, _2: _elm_lang$core$Maybe$Nothing}
								}));
					}
				} else {
					var _p329 = A2(
						_user$project$InterfaceController$debugLog,
						'mouse down was preempted by a handler in View',
						{ctor: '_Tuple0'});
					return $new;
				}
			} else {
				if (_p323._1._0.ctor === 'Nothing') {
					var _p325 = _p323._1._1;
					var _p324 = A2(
						_user$project$InterfaceController$debugLog,
						'mouse down',
						{ctor: '_Tuple0'});
					return old.hoveringCodeBox ? _elm_lang$core$Native_Utils.update(
						$new,
						{
							mouseState: {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Maybe$Just(false),
								_1: _p325,
								_2: _elm_lang$core$Maybe$Nothing
							}
						}) : _elm_lang$core$Native_Utils.update(
						$new,
						{
							mouseState: {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Maybe$Just(false),
								_1: _p325,
								_2: _elm_lang$core$Maybe$Nothing
							}
						});
				} else {
					var _p330 = A2(
						_elm_lang$core$Debug$log,
						'upstate MouseIsDown: impossible',
						{ctor: '_Tuple0'});
					return $new;
				}
			}
		});
};
var _user$project$InterfaceController$msgCleanCode = A2(
	_user$project$InterfaceModel$Msg,
	'Clean Code',
	function (old) {
		var _p331 = A2(_user$project$Syntax$parser, old.syntax, old.code);
		if (_p331.ctor === 'Err') {
			return _elm_lang$core$Native_Utils.update(
				old,
				{
					caption: _elm_lang$core$Maybe$Just(
						_user$project$InterfaceModel$LangError(
							_user$project$ParserUtils$showError(_p331._0)))
				});
		} else {
			var cleanedExp = _user$project$LangSimplify$cleanCode(_p331._0);
			var code_ = A2(_user$project$Syntax$unparser, old.syntax, cleanedExp);
			if (_elm_lang$core$Native_Utils.eq(old.code, code_)) {
				return old;
			} else {
				var _p332 = A2(_user$project$InterfaceController$debugLog, 'Cleaned: ', code_);
				return _user$project$InterfaceController$upstateRun(
					_elm_lang$core$Native_Utils.update(
						old,
						{inputExp: cleanedExp, code: code_}));
			}
		}
	});
var _user$project$InterfaceController$doFocusJustShownRenameBox = _elm_lang$core$Native_Platform.outgoingPort(
	'doFocusJustShownRenameBox',
	function (v) {
		return null;
	});
var _user$project$InterfaceController$focusJustShownRenameBox = F2(
	function (oldModel, newModel) {
		return (_elm_lang$core$Native_Utils.eq(oldModel.renamingInOutput, _elm_lang$core$Maybe$Nothing) && (!_elm_lang$core$Native_Utils.eq(newModel.renamingInOutput, _elm_lang$core$Maybe$Nothing))) ? {
			ctor: '_Tuple2',
			_0: newModel,
			_1: _user$project$InterfaceController$doFocusJustShownRenameBox(
				{ctor: '_Tuple0'})
		} : {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$InterfaceController$hooks = {
	ctor: '::',
	_0: _user$project$InterfaceController$handleSavedSelectionsHook,
	_1: {
		ctor: '::',
		_0: _user$project$InterfaceController$handleSyntaxHook,
		_1: {
			ctor: '::',
			_0: _user$project$InterfaceController$handleOutputSelectionChanges,
			_1: {
				ctor: '::',
				_0: _user$project$InterfaceController$focusJustShownRenameBox,
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$InterfaceController$applyAllHooks = F2(
	function (oldModel, newModel) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (f, _p333) {
					var _p334 = _p333;
					return A2(
						_elm_lang$core$Tuple$mapSecond,
						A2(
							_elm_lang$core$Basics$flip,
							F2(
								function (x, y) {
									return {ctor: '::', _0: x, _1: y};
								}),
							_p334._1),
						A2(f, oldModel, _p334._0));
				}),
			{
				ctor: '_Tuple2',
				_0: newModel,
				_1: {ctor: '[]'}
			},
			_user$project$InterfaceController$hooks);
	});
var _user$project$InterfaceController$update = F2(
	function (msg, oldModel) {
		update:
		while (true) {
			var _p335 = {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: oldModel.pendingFileOperation, _1: oldModel.fileOperationConfirmed},
				_1: {ctor: '_Tuple2', _0: oldModel.pendingGiveUpMsg, _1: oldModel.giveUpConfirmed}
			};
			_v140_2:
			do {
				if (_p335.ctor === '_Tuple2') {
					if (((_p335._0.ctor === '_Tuple2') && (_p335._0._0.ctor === 'Just')) && (_p335._0._1 === true)) {
						var _v141 = _p335._0._0._0,
							_v142 = _elm_lang$core$Native_Utils.update(
							oldModel,
							{pendingFileOperation: _elm_lang$core$Maybe$Nothing, fileOperationConfirmed: false});
						msg = _v141;
						oldModel = _v142;
						continue update;
					} else {
						if (((_p335._1.ctor === '_Tuple2') && (_p335._1._0.ctor === 'Just')) && (_p335._1._1 === true)) {
							var _v143 = _p335._1._0._0,
								_v144 = _elm_lang$core$Native_Utils.update(
								oldModel,
								{pendingGiveUpMsg: _elm_lang$core$Maybe$Nothing, giveUpConfirmed: false});
							msg = _v143;
							oldModel = _v144;
							continue update;
						} else {
							break _v140_2;
						}
					}
				} else {
					break _v140_2;
				}
			} while(false);
			var newModel = A2(_user$project$InterfaceController$upstate, msg, oldModel);
			var cmd = A3(_user$project$InterfaceController$issueCommand, msg, oldModel, newModel);
			var _p336 = A2(_user$project$InterfaceController$applyAllHooks, oldModel, newModel);
			var hookedModel = _p336._0;
			var hookedCommands = _p336._1;
			return {
				ctor: '_Tuple2',
				_0: _user$project$InterfaceModel$setAllUpdated(hookedModel),
				_1: _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: cmd,
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$InterfaceController$updateCommands(newModel),
							hookedCommands)
					})
			};
		}
	});

var _user$project$Canvas$turnOffCaptionAndHighlights = A2(
	_user$project$InterfaceModel$Msg,
	'Turn Off Caption',
	function (m) {
		var codeBoxInfo = m.codeBoxInfo;
		return _elm_lang$core$Native_Utils.update(
			m,
			{
				caption: _elm_lang$core$Maybe$Nothing,
				codeBoxInfo: _elm_lang$core$Native_Utils.update(
					codeBoxInfo,
					{
						highlights: {ctor: '[]'}
					})
			});
	});
var _user$project$Canvas$turnOnCaptionAndHighlights = function (zoneKey) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Turn On Caption ',
			_elm_lang$core$Basics$toString(zoneKey)),
		function (m) {
			var codeBoxInfo = m.codeBoxInfo;
			var hi = A2(_user$project$InterfaceModel$liveInfoToHighlights, zoneKey, m);
			return _elm_lang$core$Native_Utils.update(
				m,
				{
					caption: _elm_lang$core$Maybe$Just(
						_user$project$InterfaceModel$Hovering(zoneKey)),
					codeBoxInfo: _elm_lang$core$Native_Utils.update(
						codeBoxInfo,
						{highlights: hi})
				});
		});
};
var _user$project$Canvas$firstEqLast = function (xs) {
	return _elm_lang$core$Native_Utils.eq(
		_user$project$Utils$head_(xs),
		_user$project$Utils$head_(
			_elm_lang$core$List$reverse(xs)));
};
var _user$project$Canvas$boxyNumValsToNums = function (boxyNumVals) {
	return {
		left: _user$project$Lang$valToNum(boxyNumVals.left),
		top: _user$project$Lang$valToNum(boxyNumVals.top),
		right: _user$project$Lang$valToNum(boxyNumVals.right),
		bot: _user$project$Lang$valToNum(boxyNumVals.bot),
		cx: _user$project$Lang$valToNum(boxyNumVals.cx),
		cy: _user$project$Lang$valToNum(boxyNumVals.cy),
		width: _user$project$Lang$valToNum(boxyNumVals.width),
		height: _user$project$Lang$valToNum(boxyNumVals.height),
		rx: _user$project$Lang$valToNum(boxyNumVals.rx),
		ry: _user$project$Lang$valToNum(boxyNumVals.ry),
		r: _user$project$Lang$valToNum(boxyNumVals.r)
	};
};
var _user$project$Canvas$doToggleSelected = F2(
	function (selectableFeatures, model) {
		var deselect = A2(
			_elm_lang$core$List$all,
			A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, model.selectedFeatures),
			selectableFeatures);
		var updateSet = F2(
			function (selectableFeature, acc) {
				return deselect ? A2(_user$project$Utils$removeAsSet, selectableFeature, acc) : A2(_user$project$Utils$addAsSet, selectableFeature, acc);
			});
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				selectedFeatures: A3(_elm_lang$core$List$foldl, updateSet, model.selectedFeatures, selectableFeatures)
			});
	});
var _user$project$Canvas$toggleSelected = function (selectableFeatures) {
	return A2(
		_user$project$InterfaceModel$Msg,
		'Toggle Selected...',
		_user$project$Canvas$doToggleSelected(selectableFeatures));
};
var _user$project$Canvas$hairStrokeWidth = '11';
var _user$project$Canvas$zoneDelete_ = F5(
	function (id, shape, x, y, transform) {
		var _p0 = {ctor: '_Tuple4', _0: 20, _1: 20, _2: 'silver', _3: '2'};
		var w = _p0._0;
		var h = _p0._1;
		var stroke = _p0._2;
		var strokeWidth = _p0._3;
		var evt = function () {
			var foo = function (old) {
				return old;
			};
			return _elm_lang$svg$Svg_Events$onMouseDown(
				A2(_user$project$InterfaceModel$Msg, 'Delete...', foo));
		}();
		var lines = function () {
			var f = F4(
				function (x1, y1, x2, y2) {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$line,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'stroke', 'darkred'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'x1',
											_elm_lang$core$Basics$toString(x1)),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'y1',
												_elm_lang$core$Basics$toString(y1)),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$LangSvg$attr,
													'x2',
													_elm_lang$core$Basics$toString(x2)),
												_1: {
													ctor: '::',
													_0: A2(
														_user$project$LangSvg$attr,
														'y2',
														_elm_lang$core$Basics$toString(y2)),
													_1: {
														ctor: '::',
														_0: evt,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							},
							transform));
				});
			return {
				ctor: '::',
				_0: A4(f, x, y, x + w, y + h),
				_1: {
					ctor: '::',
					_0: A4(f, x, y + h, x + w, y),
					_1: {ctor: '[]'}
				}
			};
		}();
		var box = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$svg$Svg$rect,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'fill', 'white'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke', stroke),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'x',
									_elm_lang$core$Basics$toString(x)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'y',
										_elm_lang$core$Basics$toString(y)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'width',
											_elm_lang$core$Basics$toString(w)),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'height',
												_elm_lang$core$Basics$toString(h)),
											_1: {
												ctor: '::',
												_0: evt,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				},
				transform));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: box,
				_1: {ctor: '[]'}
			},
			lines);
	});
var _user$project$Canvas$zoneDelete = F5(
	function (id, shape, x, y, transform) {
		var b = false;
		return b ? A5(_user$project$Canvas$zoneDelete_, id, shape, x, y, transform) : {ctor: '[]'};
	});
var _user$project$Canvas$maybeStrokeWidthNumAttr = function (l) {
	var _p1 = A2(_user$project$Utils$maybeFind, 'stroke-width', l);
	if (_p1.ctor === 'Just') {
		var _p2 = _p1._0.interpreted;
		if (_p2.ctor === 'ANum') {
			return _elm_lang$core$Maybe$Just(_p2._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Canvas$wStrokeWidthBox = _user$project$ShapeWidgets$wStrokeWidthSlider;
var _user$project$Canvas$wOpacityBox = _user$project$ShapeWidgets$wOpacitySlider;
var _user$project$Canvas$maybeColorNumAttr = F2(
	function (k, l) {
		var _p3 = A2(_user$project$Utils$maybeFind, k, l);
		if (_p3.ctor === 'Just') {
			var _p4 = _p3._0.interpreted;
			if ((_p4.ctor === 'AColorNum') && (_p4._0.ctor === '_Tuple2')) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(_p4._0._0),
					_1: _p4._0._1
				};
			} else {
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Maybe$Nothing};
			}
		} else {
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Maybe$Nothing};
		}
	});
var _user$project$Canvas$hZoneColor = 20;
var _user$project$Canvas$wGradient = _user$project$ShapeWidgets$wColorSlider;
var _user$project$Canvas$transformAttr = function (cmds) {
	return {
		ctor: '::',
		_0: A2(
			_user$project$LangSvg$compileAttr,
			'transform',
			_user$project$LangSvg$aTransform(cmds)),
		_1: {ctor: '[]'}
	};
};
var _user$project$Canvas$maybeTransformCmds = function (l) {
	var _p5 = A2(_user$project$Utils$maybeFind, 'transform', l);
	if (_p5.ctor === 'Just') {
		var _p6 = _p5._0.interpreted;
		if (_p6.ctor === 'ATransform') {
			return _elm_lang$core$Maybe$Just(_p6._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Canvas$maybeTransformAttr = function (l) {
	var _p7 = _user$project$Canvas$maybeTransformCmds(l);
	if (_p7.ctor === 'Just') {
		return _user$project$Canvas$transformAttr(_p7._0);
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Canvas$rotZoneDelta = 20;
var _user$project$Canvas$pointZoneStylesFillSelected = F2(
	function (model, nodeId) {
		var d = A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (_p8, nodeId_) {
					return _elm_lang$core$Native_Utils.eq(nodeId, nodeId_);
				}),
			model.selectedBlobs);
		return _elm_lang$core$Dict$isEmpty(d) ? _user$project$Draw$pointZoneStyles.fill.selectedShape : _user$project$Draw$pointZoneStyles.fill.selectedBlob;
	});
var _user$project$Canvas$minLengthForMiddleZones = 30;
var _user$project$Canvas$objectZoneIsCurrentlyBeingManipulated = F3(
	function (model, nodeId, zonePred) {
		var _p9 = model.mouseMode;
		if ((_p9.ctor === 'MouseDragZone') && (_p9._0.ctor === '_Tuple3')) {
			return _elm_lang$core$Native_Utils.eq(nodeId, _p9._0._0) && zonePred(_p9._0._2);
		} else {
			return false;
		}
	});
var _user$project$Canvas$objectIsCurrentlyBeingManipulated = F2(
	function (model, nodeId) {
		return A3(
			_user$project$Canvas$objectZoneIsCurrentlyBeingManipulated,
			model,
			nodeId,
			_elm_lang$core$Basics$always(true));
	});
var _user$project$Canvas$hideBoundsWidgetsOnHover = _elm_lang$svg$Svg_Events$onMouseOver(
	A2(
		_user$project$InterfaceModel$Msg,
		'Hide Bounds Widgets',
		function (m) {
			return _elm_lang$core$Native_Utils.update(
				m,
				{
					hoveredBoundsWidgets: {ctor: '[]'}
				});
		}));
var _user$project$Canvas$isRotateZone = function (realZone) {
	var _p10 = realZone;
	if ((_p10.ctor === 'ZOther') && (_p10._0.ctor === 'Rotation')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Canvas$isFillStrokeZone = function (realZone) {
	var _p11 = realZone;
	_v9_5:
	do {
		if (_p11.ctor === 'ZOther') {
			switch (_p11._0.ctor) {
				case 'FillColor':
					return true;
				case 'StrokeColor':
					return true;
				case 'FillOpacity':
					return true;
				case 'StrokeOpacity':
					return true;
				case 'StrokeWidth':
					return true;
				default:
					break _v9_5;
			}
		} else {
			break _v9_5;
		}
	} while(false);
	return false;
};
var _user$project$Canvas$isPrimaryZone = function (realZone) {
	var _p12 = realZone;
	_v10_7:
	do {
		switch (_p12.ctor) {
			case 'ZOther':
				switch (_p12._0.ctor) {
					case 'FillColor':
						return false;
					case 'StrokeColor':
						return false;
					case 'FillOpacity':
						return false;
					case 'StrokeOpacity':
						return false;
					case 'StrokeWidth':
						return false;
					case 'Rotation':
						return false;
					default:
						break _v10_7;
				}
			case 'ZSlider':
				return false;
			default:
				break _v10_7;
		}
	} while(false);
	return true;
};
var _user$project$Canvas$cursorStyle = function (s) {
	return A2(_user$project$LangSvg$attr, 'cursor', s);
};
var _user$project$Canvas$cursorOfZone = F2(
	function (realZone, $default) {
		var _p13 = realZone;
		_v11_14:
		do {
			switch (_p13.ctor) {
				case 'ZInterior':
					return _user$project$Canvas$cursorStyle('move');
				case 'ZPoint':
					switch (_p13._0.ctor) {
						case 'LonePoint':
							return _user$project$Canvas$cursorStyle('move');
						case 'LeftEdge':
							return _user$project$Canvas$cursorStyle('ew-resize');
						case 'RightEdge':
							return _user$project$Canvas$cursorStyle('ew-resize');
						case 'TopLeft':
							return _user$project$Canvas$cursorStyle('nwse-resize');
						case 'BotRight':
							return _user$project$Canvas$cursorStyle('nwse-resize');
						case 'TopEdge':
							return _user$project$Canvas$cursorStyle('ns-resize');
						case 'BotEdge':
							return _user$project$Canvas$cursorStyle('ns-resize');
						case 'BotLeft':
							return _user$project$Canvas$cursorStyle('nesw-resize');
						case 'TopRight':
							return _user$project$Canvas$cursorStyle('nesw-resize');
						default:
							break _v11_14;
					}
				case 'ZLineEdge':
					return _user$project$Canvas$cursorStyle('pointer');
				case 'ZPolyEdge':
					return _user$project$Canvas$cursorStyle('pointer');
				case 'ZOther':
					return _user$project$Canvas$cursorStyle('pointer');
				case 'ZSlider':
					return _user$project$Canvas$cursorStyle('pointer');
				default:
					break _v11_14;
			}
		} while(false);
		return _user$project$Canvas$cursorStyle($default);
	});
var _user$project$Canvas$addHoveredShape = function (id) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Add Hovered Shape ',
			_elm_lang$core$Basics$toString(id)),
		function (m) {
			if (_user$project$InterfaceModel$isMouseDown(m)) {
				return m;
			} else {
				var _p14 = m.slate;
				var shapeTree = _p14._1;
				var extraTopPadding = 20;
				var _p15 = A3(_user$project$ShapeWidgets$shapeIdToMaybeVal, id, shapeTree, m.widgets);
				if (_p15.ctor === 'Just') {
					var _p36 = _p15._0;
					var moreHoveredBounds = A2(
						_elm_lang$core$List$filterMap,
						function (_p16) {
							var _p17 = _p16;
							var _p19 = _p17._0;
							var _p18 = {
								ctor: '_Tuple2',
								_0: _p17._1,
								_1: A2(_user$project$Utils$maybeGeti1, _p19, m.widgetBounds)
							};
							_v14_2:
							do {
								if ((((_p18.ctor === '_Tuple2') && (_p18._1.ctor === 'Just')) && (_p18._1._0.ctor === 'Just')) && (_p18._1._0._0.ctor === '_Tuple4')) {
									switch (_p18._0.ctor) {
										case 'WCall':
											return A2(
												_elm_lang$core$List$any,
												_user$project$Provenance$valsSame(_p36),
												_user$project$Lang$flattenValTree(_p18._0._3)) ? _elm_lang$core$Maybe$Just(
												{
													ctor: '_Tuple2',
													_0: {ctor: '_Tuple4', _0: _p18._1._0._0._0, _1: _p18._1._0._0._1 - extraTopPadding, _2: _p18._1._0._0._2, _3: _p18._1._0._0._3},
													_1: _elm_lang$core$Set$singleton(_p19)
												}) : _elm_lang$core$Maybe$Nothing;
										case 'WList':
											return A2(
												_elm_lang$core$List$any,
												_user$project$Provenance$valsSame(_p36),
												_user$project$Lang$flattenValTree(_p18._0._0)) ? _elm_lang$core$Maybe$Just(
												{
													ctor: '_Tuple2',
													_0: {ctor: '_Tuple4', _0: _p18._1._0._0._0, _1: _p18._1._0._0._1 - extraTopPadding, _2: _p18._1._0._0._2, _3: _p18._1._0._0._3},
													_1: _elm_lang$core$Set$singleton(_p19)
												}) : _elm_lang$core$Maybe$Nothing;
										default:
											break _v14_2;
									}
								} else {
									break _v14_2;
								}
							} while(false);
							return _elm_lang$core$Maybe$Nothing;
						},
						_user$project$Utils$zipi1(m.widgets));
					var hoveredOffsetBounds = function () {
						var widgetId = -2 - id;
						var _p20 = A2(_user$project$Utils$maybeGeti1, widgetId, m.widgets);
						if ((((_p20.ctor === 'Just') && (_p20._0.ctor === 'WPoint')) && (_p20._0._0.ctor === '_Tuple2')) && (_p20._0._2.ctor === '_Tuple2')) {
							var _p35 = _p20._0._3;
							var _p34 = _p20._0._1;
							var _p33 = _p20._0._2._0;
							var _p32 = _p20._0._0._0;
							return A2(
								_elm_lang$core$List$filterMap,
								function (_p21) {
									var _p22 = _p21;
									var _p23 = _p22._1;
									if ((((_p23.ctor === 'WOffset1D') && (_p23._0.ctor === '_Tuple2')) && (_p23._1.ctor === '_Tuple2')) && (_p23._4.ctor === '_Tuple2')) {
										var _p31 = _p23._7;
										var _p30 = _p23._6;
										var _p29 = _p23._1._0;
										var _p28 = _p23._0._0;
										var _p27 = _p23._4._0;
										var _p24 = function () {
											var multiplier = function () {
												var _p25 = _p23._3;
												if (_p25.ctor === 'Positive') {
													return 1;
												} else {
													return -1;
												}
											}();
											var _p26 = _p23._2;
											if (_p26.ctor === 'X') {
												return {
													ctor: '_Tuple5',
													_0: _p34,
													_1: _p30,
													_2: _p35,
													_3: _p31,
													_4: A3(
														_user$project$ShapeWidgets$expandBounds,
														20,
														20,
														A2(
															_user$project$Utils$fromJust_,
															'',
															_user$project$ShapeWidgets$maybeEnclosureOfAllPoints(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: _p32, _1: _p33},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: _p28, _1: _p29},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: _p28 + 100, _1: _p29},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: _p28 + (multiplier * _p27), _1: _p29},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																})))
												};
											} else {
												return {
													ctor: '_Tuple5',
													_0: _p35,
													_1: _p31,
													_2: _p34,
													_3: _p30,
													_4: A3(
														_user$project$ShapeWidgets$expandBounds,
														20,
														20,
														A2(
															_user$project$Utils$fromJust_,
															'',
															_user$project$ShapeWidgets$maybeEnclosureOfAllPoints(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: _p32, _1: _p33},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: _p28, _1: _p29},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: _p28 + 100, _1: _p29},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: _p28, _1: _p29 + (multiplier * _p27)},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																})))
												};
											}
										}();
										var pointCoordinateVal = _p24._0;
										var offsetEndCoordinateVal = _p24._1;
										var otherPointCoordinateVal = _p24._2;
										var otherOffsetCoordinateVal = _p24._3;
										var bounds = _p24._4;
										return (A2(_user$project$Provenance$valsSame, otherPointCoordinateVal, otherOffsetCoordinateVal) && A2(
											_user$project$Provenance$didAffect,
											_user$project$Provenance$valToDistalSameVal(pointCoordinateVal),
											offsetEndCoordinateVal)) ? _elm_lang$core$Maybe$Just(
											{
												ctor: '_Tuple2',
												_0: bounds,
												_1: _elm_lang$core$Set$singleton(_p22._0)
											}) : _elm_lang$core$Maybe$Nothing;
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								},
								_user$project$Utils$zipi1(m.widgets));
						} else {
							return {ctor: '[]'};
						}
					}();
					return _elm_lang$core$Native_Utils.update(
						m,
						{
							hoveredShapes: _elm_lang$core$Set$singleton(id),
							hoveredBoundsWidgets: A2(
								_user$project$Utils$addAllAsSet,
								A2(_elm_lang$core$Basics_ops['++'], moreHoveredBounds, hoveredOffsetBounds),
								m.hoveredBoundsWidgets)
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						m,
						{
							hoveredShapes: _elm_lang$core$Set$singleton(id)
						});
				}
			}
		});
};
var _user$project$Canvas$removeHoveredShape = function (id) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Remove Hovered Shape ',
			_elm_lang$core$Basics$toString(id)),
		function (m) {
			return _elm_lang$core$Native_Utils.update(
				m,
				{
					hoveredShapes: A2(_elm_lang$core$Set$remove, id, m.hoveredShapes)
				});
		});
};
var _user$project$Canvas$onMouseDownAndStop = _user$project$HtmlUtils$handleEventAndStop('mousedown');
var _user$project$Canvas$attrNum = F2(
	function (k, n) {
		return A2(
			_user$project$LangSvg$attr,
			k,
			_elm_lang$core$Basics$toString(n));
	});
var _user$project$Canvas$drawSelectBox = function (model) {
	var _p37 = model.mouseMode;
	if (_p37.ctor === 'MouseDragSelect') {
		var pos1 = A2(_user$project$SleekLayout$canvasPosition, model, _p37._0);
		var pos2 = A2(
			_user$project$SleekLayout$canvasPosition,
			model,
			_user$project$InterfaceModel$mousePosition(model));
		var top = A2(_elm_lang$core$Basics$min, pos1.y, pos2.y);
		var left = A2(_elm_lang$core$Basics$min, pos1.x, pos2.x);
		var bot = A2(_elm_lang$core$Basics$max, pos1.y, pos2.y);
		var right = A2(_elm_lang$core$Basics$max, pos1.x, pos2.x);
		return _elm_lang$core$List$singleton(
			A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$svg$Svg$rect,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'fill', 'none'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'stroke-width', '2px'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'stroke-dasharray', '5,5'),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'x',
										_elm_lang$core$Basics$toString(left)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'y',
											_elm_lang$core$Basics$toString(top)),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'width',
												_elm_lang$core$Basics$toString(right - left)),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$LangSvg$attr,
													'height',
													_elm_lang$core$Basics$toString(bot - top)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}));
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Canvas$featuresShapesAndMaybeInterpretationForItem = function (item) {
	var _p38 = function () {
		var _p39 = item;
		switch (_p39.ctor) {
			case 'SelectedShape':
				return {
					ctor: '_Tuple3',
					_0: {ctor: '[]'},
					_1: {
						ctor: '::',
						_0: _p39._0,
						_1: {ctor: '[]'}
					},
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'SelectedFeature':
				return {
					ctor: '_Tuple3',
					_0: {
						ctor: '::',
						_0: _p39._0,
						_1: {ctor: '[]'}
					},
					_1: {ctor: '[]'},
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'SelectedPoint':
				return {
					ctor: '_Tuple3',
					_0: {
						ctor: '::',
						_0: _p39._0,
						_1: {
							ctor: '::',
							_0: _p39._1,
							_1: {ctor: '[]'}
						}
					},
					_1: {ctor: '[]'},
					_2: _elm_lang$core$Maybe$Nothing
				};
			default:
				return {
					ctor: '_Tuple3',
					_0: {ctor: '[]'},
					_1: {ctor: '[]'},
					_2: _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: {
								ctor: '::',
								_0: _p39._0,
								_1: {ctor: '[]'}
							},
							_1: {ctor: '[]'}
						})
				};
		}
	}();
	var features = _p38._0;
	var shapes = _p38._1;
	var maybeInterpretations = _p38._2;
	return {ctor: '_Tuple3', _0: features, _1: shapes, _2: maybeInterpretations};
};
var _user$project$Canvas$interpretationsForSelectedItem = F4(
	function (program, slate, widgets, item) {
		var _p40 = _user$project$Canvas$featuresShapesAndMaybeInterpretationForItem(item);
		var features = _p40._0;
		var shapes = _p40._1;
		var maybeInterpretations = _p40._2;
		var interpretations = function () {
			var _p41 = maybeInterpretations;
			if (_p41.ctor === 'Just') {
				return _p41._0;
			} else {
				return A7(
					_user$project$ShapeWidgets$selectionsUniqueProximalEIdInterpretations,
					program,
					slate,
					widgets,
					features,
					shapes,
					_elm_lang$core$Dict$empty,
					_elm_lang$core$Basics$always(true));
			}
		}();
		return interpretations;
	});
var _user$project$Canvas$expInOutput_ = F6(
	function (prefix, exp, left, top, hoverPadding, extraAttrs) {
		var textNode = _elm_lang$virtual_dom$VirtualDom$text(
			A2(
				_elm_lang$core$Basics_ops['++'],
				prefix,
				_user$project$Utils$squish(
					A2(_user$project$Syntax$unparser, _user$project$Syntax$Elm, exp))));
		var coreTextAttrs = A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(_user$project$LangSvg$attr, 'font-family', _user$project$Config$params.mainSection.uiWidgets.font),
				_1: {
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'font-size', _user$project$Config$params.mainSection.uiWidgets.fontSize),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'x',
							_elm_lang$core$Basics$toString(left - 2)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'y',
								_elm_lang$core$Basics$toString(top - 11)),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			extraAttrs);
		var perhapsHoverArea = function () {
			var _p42 = hoverPadding;
			if (_p42.ctor === 'NoHoverPadding') {
				return {ctor: '[]'};
			} else {
				return {
					ctor: '::',
					_0: A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$text_,
						{
							ctor: '::',
							_0: textNode,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							coreTextAttrs,
							{
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'fill', 'transparent'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'stroke', 'transparent'),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'stroke-width',
											_elm_lang$core$Basics$toString(_p42._0)),
										_1: {ctor: '[]'}
									}
								}
							})),
					_1: {ctor: '[]'}
				};
			}
		}();
		return A2(
			_elm_lang$svg$Svg$g,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				perhapsHoverArea,
				{
					ctor: '::',
					_0: A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$text_,
						{
							ctor: '::',
							_0: textNode,
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							coreTextAttrs,
							{
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'fill', 'white'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'stroke', 'white'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'stroke-width', '0.3em'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'opacity', '0.6'),
											_1: {ctor: '[]'}
										}
									}
								}
							})),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$svg$Svg$text_,
							{
								ctor: '::',
								_0: textNode,
								_1: {ctor: '[]'}
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								coreTextAttrs,
								{
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'fill', 'black'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'font-family', _user$project$Config$params.mainSection.uiWidgets.font),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'font-size', _user$project$Config$params.mainSection.uiWidgets.fontSize),
											_1: {
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'opacity', '0.6'),
												_1: {ctor: '[]'}
											}
										}
									}
								})),
						_1: {ctor: '[]'}
					}
				}));
	});
var _user$project$Canvas$patAsHTML = F6(
	function (modelRenamingInOutput, showRemoverAndReorderers, pat, associatedShapes, associatedFeatures, hoverPadding) {
		var pid = pat.val.pid;
		var nameCurrentlyInCode = _user$project$Utils$squish(
			A2(_user$project$Syntax$patternUnparser, _user$project$Syntax$Elm, pat));
		var nameWidth = function (nameStr) {
			return 10 + (_elm_lang$core$String$length(nameStr) * 10);
		};
		var maybeRenamingInOutput = A2(
			_user$project$Utils$filterMaybe,
			function (_p43) {
				var _p44 = _p43;
				return _elm_lang$core$Native_Utils.eq(_p44._0, pid) && (_elm_lang$core$Native_Utils.eq(_p44._1, associatedShapes) && _elm_lang$core$Native_Utils.eq(_p44._2, associatedFeatures));
			},
			modelRenamingInOutput);
		var _p45 = maybeRenamingInOutput;
		if (_p45.ctor === 'Just') {
			var _p46 = _p45._0._3;
			var width = A2(
				_elm_lang$core$Basics$max,
				nameWidth(_p46),
				nameWidth(nameCurrentlyInCode));
			var renameBox = A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$html$Html$input,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$defaultValue(_p46),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('rename-box'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('pat'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'width',
											_1: A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(width),
												'px')
										},
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$InterfaceController$msgUpdateRenameInOutputTextBox),
									_1: {
										ctor: '::',
										_0: _user$project$HtmlUtils$onClickWithoutPropagation(_user$project$InterfaceController$msgNoop),
										_1: {
											ctor: '::',
											_0: _user$project$HtmlUtils$onKeyDown(
												function (keyCode) {
													return _elm_lang$core$Native_Utils.eq(keyCode, _user$project$HtmlUtils$enterKeyCode) ? _user$project$InterfaceController$msgDoRename(_p45._0._0) : _user$project$InterfaceController$msgNoop;
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				});
			return {ctor: '_Tuple2', _0: renameBox, _1: width};
		} else {
			var nameStr = nameCurrentlyInCode;
			var width = nameWidth(nameStr) + (showRemoverAndReorderers ? 28 : 0);
			var perhapsHoverPaddingAttr = function () {
				var _p47 = hoverPadding;
				if (_p47.ctor === 'NoHoverPadding') {
					return {ctor: '[]'};
				} else {
					var _p48 = _p47._0;
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'padding',
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_p48),
										'px')
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'margin-left',
										_1: A2(
											_elm_lang$core$Basics_ops['++'],
											'-',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p48),
												'px'))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'margin-top',
											_1: A2(
												_elm_lang$core$Basics_ops['++'],
												'-',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(_p48),
													'px'))
										},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					};
				}
			}();
			var textAndPerhapsRemover = A2(
				_elm_lang$html$Html$span,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('pat'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'width',
										_1: A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(width),
											'px')
									},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$title(
									A2(_elm_lang$core$Basics_ops['++'], 'Click to rename ', nameStr)),
								_1: {
									ctor: '::',
									_0: _user$project$Canvas$onMouseDownAndStop(
										A3(_user$project$InterfaceController$msgActivateRenameInOutput, pid, associatedShapes, associatedFeatures)),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					perhapsHoverPaddingAttr),
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom$text(nameStr),
						_1: {ctor: '[]'}
					},
					showRemoverAndReorderers ? {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('remove-arg'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$title(
										A2(_elm_lang$core$Basics_ops['++'], 'Remove arg ', nameStr)),
									_1: {
										ctor: '::',
										_0: _user$project$Canvas$onMouseDownAndStop(
											_user$project$InterfaceController$msgRemoveArg(pid)),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom$text('❌'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('reorder-arg'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$title(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Move arg ',
												A2(_elm_lang$core$Basics_ops['++'], nameStr, ' leftwards'))),
										_1: {
											ctor: '::',
											_0: _user$project$Canvas$onMouseDownAndStop(
												A2(_user$project$InterfaceController$msgMoveArgRelative, -1, pid)),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom$text('◀︎'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('reorder-arg'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'Move arg ',
													A2(_elm_lang$core$Basics_ops['++'], nameStr, ' rightwards'))),
											_1: {
												ctor: '::',
												_0: _user$project$Canvas$onMouseDownAndStop(
													A2(_user$project$InterfaceController$msgMoveArgRelative, 2, pid)),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$virtual_dom$VirtualDom$text('▶'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					} : {ctor: '[]'}));
			return {ctor: '_Tuple2', _0: textAndPerhapsRemover, _1: width};
		}
	});
var _user$project$Canvas$patsInOutput = F6(
	function (modelRenamingInOutput, showRemoverAndReorderers, patAndAssociatedSelectables, left, top, hoverPadding) {
		var paddingBetweenPats = 10;
		var _p49 = A3(
			_user$project$Utils$foldl,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: 0
			},
			F2(
				function (_p51, _p50) {
					var _p52 = _p51;
					var _p53 = _p50;
					var _p55 = _p53._1;
					var _p54 = A6(_user$project$Canvas$patAsHTML, modelRenamingInOutput, showRemoverAndReorderers, _p52._0, _p52._1, _p52._2, hoverPadding);
					var htmlPat = _p54._0;
					var patWidth = _p54._1;
					var htmlForeignObjectPat = A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$foreignObject,
						{
							ctor: '::',
							_0: htmlPat,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'x',
								_elm_lang$core$Basics$toString(
									(left - 2) + _elm_lang$core$Basics$toFloat(_p55))),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'y',
									_elm_lang$core$Basics$toString((top - 10) - 17)),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'style', 'overflow: visible;'),
									_1: {ctor: '[]'}
								}
							}
						});
					return {
						ctor: '_Tuple2',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							_p53._0,
							{
								ctor: '::',
								_0: htmlForeignObjectPat,
								_1: {ctor: '[]'}
							}),
						_1: (_p55 + patWidth) + paddingBetweenPats
					};
				}),
			patAndAssociatedSelectables);
		var htmlForeignObjectPats = _p49._0;
		return htmlForeignObjectPats;
	});
var _user$project$Canvas$patInOutput = F8(
	function (modelRenamingInOutput, showRemoverAndReorderers, pat, associatedShapes, associatedFeatures, left, top, hoverPadding) {
		return A2(
			_user$project$Utils$fromJust_,
			'Canvas.patInOutput expected exactly 1 SVG when giving a single pat to patsInOutput',
			_user$project$Utils$maybeUnwrap1(
				A6(
					_user$project$Canvas$patsInOutput,
					modelRenamingInOutput,
					showRemoverAndReorderers,
					{
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: pat, _1: associatedShapes, _2: associatedFeatures},
						_1: {ctor: '[]'}
					},
					left,
					top,
					hoverPadding)));
	});
var _user$project$Canvas$perhapsPatOrExpInOutput = F9(
	function (program, slate, widgets, modelRenamingInOutput, item, left, top, hoverPadding, shouldShow) {
		var _p56 = _user$project$Canvas$featuresShapesAndMaybeInterpretationForItem(item);
		var features = _p56._0;
		var shapes = _p56._1;
		var showLabelWidget = function (_p57) {
			var _p58 = _p57;
			var varEIdToMaybePat = _user$project$LangTools$allVarEIdsToBindingPat(program);
			var interpretations = A4(_user$project$Canvas$interpretationsForSelectedItem, program, slate, widgets, item);
			var singleEIdEffectiveInterpretations = A2(
				_elm_lang$core$List$map,
				function (_p59) {
					return function (_) {
						return _.eid;
					}(
						function (_) {
							return _.val;
						}(
							_user$project$Lang$expEffectiveExp(
								A2(_user$project$LangTools$justFindExpByEId, program, _p59))));
				},
				A2(_elm_lang$core$List$filterMap, _user$project$Utils$maybeUnwrap1, interpretations));
			var maybePat = A2(
				_user$project$Utils$firstOrLazySecond,
				A2(
					_user$project$Utils$mapFirstSuccess,
					function (_p60) {
						return A2(
							_elm_lang$core$Maybe$withDefault,
							_elm_lang$core$Maybe$Nothing,
							A3(_elm_lang$core$Basics$flip, _elm_lang$core$Dict$get, varEIdToMaybePat, _p60));
					},
					singleEIdEffectiveInterpretations),
				function (_p61) {
					var _p62 = _p61;
					return A2(
						_user$project$Utils$mapFirstSuccess,
						function (_p63) {
							var _p64 = _p63;
							return A2(
								_elm_lang$core$List$any,
								F2(
									function (x, y) {
										return _elm_lang$core$Native_Utils.eq(x, y);
									})(
									_user$project$Lang$expEffectiveExp(_p64._1).val.eid),
								singleEIdEffectiveInterpretations) ? _elm_lang$core$Maybe$Just(_p64._0) : _elm_lang$core$Maybe$Nothing;
						},
						_user$project$LangTools$allSimplyResolvableLetPatBindings(program));
				});
			var _p65 = maybePat;
			if (_p65.ctor === 'Just') {
				return {
					ctor: '::',
					_0: A8(_user$project$Canvas$patInOutput, modelRenamingInOutput, false, _p65._0, shapes, features, left, top, hoverPadding),
					_1: {ctor: '[]'}
				};
			} else {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(
						_elm_lang$core$Maybe$map,
						function (exp) {
							return {
								ctor: '::',
								_0: A6(
									_user$project$Canvas$expInOutput_,
									'',
									exp,
									left,
									top,
									hoverPadding,
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							};
						},
						A2(
							_elm_lang$core$Maybe$andThen,
							_elm_lang$core$List$head,
							A2(
								_user$project$Utils$filterMaybe,
								function (_p66) {
									return A2(
										F2(
											function (x, y) {
												return _elm_lang$core$Native_Utils.eq(x, y);
											}),
										1,
										_elm_lang$core$List$length(_p66));
								},
								A2(
									_elm_lang$core$Maybe$andThen,
									function (_p67) {
										return _user$project$Utils$projJusts(
											A2(
												_elm_lang$core$List$map,
												_user$project$Lang$findExpByEId(program),
												_p67));
									},
									_elm_lang$core$List$head(interpretations))))));
			}
		};
		var _p68 = {ctor: '_Tuple2', _0: shouldShow, _1: modelRenamingInOutput};
		if (_p68._0 === true) {
			return showLabelWidget(
				{ctor: '_Tuple0'});
		} else {
			if (_p68._1.ctor === 'Nothing') {
				return {ctor: '[]'};
			} else {
				return (_elm_lang$core$Native_Utils.eq(_p68._1._0._1, shapes) && _elm_lang$core$Native_Utils.eq(_p68._1._0._2, features)) ? showLabelWidget(
					{ctor: '_Tuple0'}) : {ctor: '[]'};
			}
		}
	});
var _user$project$Canvas$isRenamingMaybePat = F2(
	function (maybePat, modelRenamingInOutput) {
		return (!_elm_lang$core$Native_Utils.eq(maybePat, _elm_lang$core$Maybe$Nothing)) && _elm_lang$core$Native_Utils.eq(
			A2(
				_elm_lang$core$Maybe$map,
				function (_p69) {
					return function (_) {
						return _.pid;
					}(
						function (_) {
							return _.val;
						}(_p69));
				},
				maybePat),
			_user$project$InterfaceModel$maybeRenamingPId(modelRenamingInOutput));
	});
var _user$project$Canvas$dummyVal = {
	v_: _user$project$Lang$VList(
		{ctor: '[]'}),
	provenance: _user$project$Lang$dummyProvenance,
	parents: _user$project$Lang$Parents(
		{ctor: '[]'})
};
var _user$project$Canvas$startDrawing = F2(
	function (old, maybeClickable) {
		return _elm_lang$core$Native_Utils.update(
			old,
			{
				mouseMode: _user$project$InterfaceModel$MouseDrawNew(
					_user$project$InterfaceModel$DrawJustStarted(maybeClickable)),
				selectedShapes: {ctor: '[]'},
				selectedBlobs: _elm_lang$core$Dict$empty
			});
	});
var _user$project$Canvas$msgMouseDownOnCanvas = A2(
	_user$project$InterfaceModel$Msg,
	'MouseDownOnCanvas',
	function (old) {
		var _p70 = {ctor: '_Tuple2', _0: old.tool, _1: old.mouseMode};
		_v34_3:
		do {
			if (_p70.ctor === '_Tuple2') {
				switch (_p70._1.ctor) {
					case 'MouseDragZone':
						if (_p70._0.ctor === 'Cursor') {
							return old;
						} else {
							break _v34_3;
						}
					case 'MouseNothing':
						if (_p70._0.ctor === 'Cursor') {
							var dragMode = A4(
								_user$project$InterfaceModel$MouseDragSelect,
								_user$project$InterfaceModel$mousePosition(old),
								old.selectedShapes,
								old.selectedFeatures,
								old.selectedBlobs);
							return _elm_lang$core$Native_Utils.eq(
								old.keysDown,
								{
									ctor: '::',
									_0: _user$project$Keys$keyShift,
									_1: {ctor: '[]'}
								}) ? _elm_lang$core$Native_Utils.update(
								old,
								{mouseMode: dragMode}) : _elm_lang$core$Native_Utils.update(
								old,
								{
									mouseMode: dragMode,
									selectedShapes: {ctor: '[]'},
									selectedFeatures: {ctor: '[]'},
									selectedBlobs: _elm_lang$core$Dict$empty
								});
						} else {
							return A2(_user$project$Canvas$startDrawing, old, _elm_lang$core$Maybe$Nothing);
						}
					default:
						break _v34_3;
				}
			} else {
				break _v34_3;
			}
		} while(false);
		return old;
	});
var _user$project$Canvas$msgClickZone = function (zoneKey) {
	return A2(
		_user$project$InterfaceModel$Msg,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Click Zone',
			_elm_lang$core$Basics$toString(zoneKey)),
		function (old) {
			var _p71 = old.outputMode;
			if (_p71.ctor === 'Live') {
				var _p72 = A2(
					_user$project$SleekLayout$clickToCanvasPoint,
					old,
					_user$project$InterfaceModel$mousePosition(old));
				var mx = _p72._1._0;
				var my = _p72._1._1;
				var trigger = A3(_user$project$Sync$prepareLiveTrigger, old.liveSyncInfo, old.inputExp, zoneKey);
				var dragInfo = {
					ctor: '_Tuple3',
					_0: trigger,
					_1: {ctor: '_Tuple2', _0: mx, _1: my},
					_2: false
				};
				return _elm_lang$core$Native_Utils.update(
					old,
					{
						mouseMode: A2(
							_user$project$InterfaceModel$MouseDragZone,
							zoneKey,
							_elm_lang$core$Maybe$Just(dragInfo))
					});
			} else {
				return old;
			}
		});
};
var _user$project$Canvas$dragZoneEvents = F3(
	function (id, shapeKind, realZone) {
		var zoneKey = {ctor: '_Tuple3', _0: id, _1: shapeKind, _2: realZone};
		return {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Events$onMouseDown(
				_user$project$Canvas$msgClickZone(zoneKey)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Events$onMouseOver(
					_user$project$Canvas$turnOnCaptionAndHighlights(zoneKey)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Events$onMouseOut(_user$project$Canvas$turnOffCaptionAndHighlights),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _user$project$Canvas$draggableZone = F7(
	function (svgFunc, addStroke, model, id, shape, realZone, attrs) {
		var showStroke = false;
		return A3(
			_elm_lang$core$Basics$flip,
			svgFunc,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				attrs,
				A2(
					_elm_lang$core$Basics_ops['++'],
					A3(_user$project$Canvas$dragZoneEvents, id, shape, realZone),
					{
						ctor: '::',
						_0: A2(_user$project$Canvas$cursorOfZone, realZone, 'default'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'fill', 'rgba(0,0,0,0.0)'),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'stroke-width',
									addStroke ? '10' : '0'),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'stroke',
										showStroke ? 'rgba(255,0,0,0.5)' : 'rgba(0,0,0,0.0)'),
									_1: {ctor: '[]'}
								}
							}
						}
					})));
	});
var _user$project$Canvas$zoneLine2 = F7(
	function (model, id, shape, realZone, _p74, _p73, attrs) {
		var _p75 = _p74;
		var _p76 = _p73;
		return A7(
			_user$project$Canvas$draggableZone,
			_elm_lang$svg$Svg$line,
			true,
			model,
			id,
			shape,
			realZone,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$Canvas$attrNum, 'x1', _p75._0),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Canvas$attrNum, 'y1', _p75._1),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Canvas$attrNum, 'x2', _p76._0),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Canvas$attrNum, 'y2', _p76._1),
								_1: {
									ctor: '::',
									_0: _user$project$Canvas$cursorStyle('pointer'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				attrs));
	});
var _user$project$Canvas$zoneRotate_ = F7(
	function (model, id, shape, cx, cy, r, cmds) {
		var _p77 = {ctor: '_Tuple4', _0: 26, _1: 'rgba(192,192,192,0.5)', _2: '5', _3: '7'};
		var a = _p77._0;
		var stroke = _p77._1;
		var strokeWidth = _p77._2;
		var rBall = _p77._3;
		var _p78 = {ctor: '_Tuple2', _0: 'silver', _1: '2'};
		var fillBall = _p78._0;
		var swBall = _p78._1;
		var transform = _user$project$Canvas$transformAttr(cmds);
		var circle = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$svg$Svg$circle,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(_user$project$LangSvg$attr, 'fill', 'none'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'stroke', stroke),
					_1: {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'cx',
								_elm_lang$core$Basics$toString(cx)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'cy',
									_elm_lang$core$Basics$toString(cy)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'r',
										_elm_lang$core$Basics$toString(r)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
		var ball = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$svg$Svg$circle,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke-width', swBall),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'fill', fillBall),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'cx',
									_elm_lang$core$Basics$toString(cx)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'cy',
										_elm_lang$core$Basics$toString(cy - r)),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'r', rBall),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$Canvas$cursorOfZone,
												_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$Rotation),
												'default'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					transform,
					A3(
						_user$project$Canvas$dragZoneEvents,
						id,
						shape,
						_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$Rotation)))));
		var line = function () {
			var _p79 = function () {
				var _p80 = {ctor: '_Tuple2', _0: cmds, _1: model.tool};
				if ((((((_p80.ctor === '_Tuple2') && (_p80._0.ctor === '::')) && (_p80._0._0.ctor === 'Rot')) && (_p80._0._0._0.ctor === '_Tuple2')) && (_p80._0._1.ctor === '[]')) && (_p80._1.ctor === 'Cursor')) {
					var selectableFeature = A2(
						_user$project$ShapeWidgets$ShapeFeature,
						id,
						_user$project$ShapeWidgets$OFeat(_user$project$ShapeWidgets$Rotation));
					var handler = {
						ctor: '::',
						_0: _user$project$Canvas$onMouseDownAndStop(
							_user$project$Canvas$toggleSelected(
								{
									ctor: '::',
									_0: selectableFeature,
									_1: {ctor: '[]'}
								})),
						_1: {ctor: '[]'}
					};
					return A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures) ? {ctor: '_Tuple2', _0: _user$project$Draw$colorPointSelected, _1: handler} : {ctor: '_Tuple2', _0: _user$project$Draw$colorPointNotSelected, _1: handler};
				} else {
					return {
						ctor: '_Tuple2',
						_0: stroke,
						_1: {ctor: '[]'}
					};
				}
			}();
			var strokeColor = _p79._0;
			var maybeEventHandler = _p79._1;
			return A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$svg$Svg$line,
				{ctor: '[]'},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke', strokeColor),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'x1',
									_elm_lang$core$Basics$toString(cx)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'y1',
										_elm_lang$core$Basics$toString(cy)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'x2',
											_elm_lang$core$Basics$toString(cx)),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'y2',
												_elm_lang$core$Basics$toString(cy - r)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					A2(_elm_lang$core$Basics_ops['++'], transform, maybeEventHandler)));
		}();
		return {
			ctor: '::',
			_0: circle,
			_1: {
				ctor: '::',
				_0: line,
				_1: {
					ctor: '::',
					_0: ball,
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _user$project$Canvas$zoneRotate = F6(
	function (model, id, shape, _p81, r, maybeCmds) {
		var _p82 = _p81;
		var pred = function (z) {
			return _user$project$Canvas$isPrimaryZone(z) || _user$project$Canvas$isFillStrokeZone(z);
		};
		var _p83 = {
			ctor: '_Tuple3',
			_0: A2(_elm_lang$core$List$member, id, model.selectedShapes),
			_1: A3(_user$project$Canvas$objectZoneIsCurrentlyBeingManipulated, model, id, pred),
			_2: maybeCmds
		};
		if ((((_p83.ctor === '_Tuple3') && (_p83._0 === true)) && (_p83._1 === false)) && (_p83._2.ctor === 'Just')) {
			return A7(_user$project$Canvas$zoneRotate_, model, id, shape, _p82._0, _p82._1, r, _p83._2._0);
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Canvas$zoneRotatePolyOrPath = F5(
	function (model, id, kind, pts, nodeAttrs) {
		var _p84 = _user$project$Draw$boundingBoxOfPoints_(
			A2(
				_elm_lang$core$List$map,
				function (_p85) {
					var _p86 = _p85;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Tuple$first(_p86._0),
						_1: _elm_lang$core$Tuple$first(_p86._1)
					};
				},
				pts));
		var xMin = _p84._0;
		var xMax = _p84._1;
		var yMin = _p84._2;
		var yMax = _p84._3;
		var _p87 = {ctor: '_Tuple2', _0: xMax - xMin, _1: yMax - yMin};
		var w = _p87._0;
		var h = _p87._1;
		var _p88 = {ctor: '_Tuple2', _0: xMin + (0.5 * w), _1: yMin + (0.5 * h)};
		var xMiddle = _p88._0;
		var yMiddle = _p88._1;
		var r = (A2(_elm_lang$core$Basics$max, w, h) / 2) + _user$project$Canvas$rotZoneDelta;
		return A6(
			_user$project$Canvas$zoneRotate,
			model,
			id,
			kind,
			{ctor: '_Tuple2', _0: xMiddle, _1: yMiddle},
			r,
			_user$project$Canvas$maybeTransformCmds(nodeAttrs));
	});
var _user$project$Canvas$zoneColor_ = F8(
	function (realZone, shapeFeature, model, id, shape, x, y, _p89) {
		var _p90 = _p89;
		var _p91 = {ctor: '_Tuple6', _0: _user$project$Canvas$wGradient, _1: _user$project$Canvas$hZoneColor, _2: 26, _3: 'silver', _4: '2', _5: '7'};
		var w = _p91._0;
		var h = _p91._1;
		var a = _p91._2;
		var stroke = _p91._3;
		var strokeWidth = _p91._4;
		var rBall = _p91._5;
		var yOff = a + _user$project$Canvas$rotZoneDelta;
		var selectableFeature = A2(_user$project$ShapeWidgets$ShapeFeature, id, shapeFeature);
		var ball = function () {
			var cx = x + ((_p90._0 / _user$project$ColorNum$maxColorNum) * _user$project$Canvas$wGradient);
			var cy = (y - yOff) + (h / 2);
			return A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$svg$Svg$circle,
				{ctor: '[]'},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'fill', stroke),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'cx',
										_elm_lang$core$Basics$toString(cx)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'cy',
											_elm_lang$core$Basics$toString(cy)),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'r', rBall),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Canvas$cursorOfZone, realZone, 'default'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					A3(_user$project$Canvas$dragZoneEvents, id, shape, realZone)));
		}();
		var box = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$svg$Svg$rect,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_user$project$LangSvg$attr,
					'fill',
					A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures) ? _user$project$Draw$colorPointSelected : 'none'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'stroke', stroke),
					_1: {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'x',
								_elm_lang$core$Basics$toString(x)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'y',
									_elm_lang$core$Basics$toString(y - yOff)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'width',
										_elm_lang$core$Basics$toString(w)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'height',
											_elm_lang$core$Basics$toString(h)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
		var checkeredBg = {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$pattern,
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'id', 'checker'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'width', '6'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'height', '6'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'patternUnits', 'userSpaceOnUse'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$rect,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'fill', 'lightgray'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'width', '3'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'height', '3'),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$svg$Svg$rect,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'fill', 'lightgray'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'x', '3'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'y', '3'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'width', '3'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'height', '3'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$svg$Svg$rect,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'fill', 'url(#checker)'),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'x',
								_elm_lang$core$Basics$toString(x)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'y',
									_elm_lang$core$Basics$toString(y - yOff)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'width',
										_elm_lang$core$Basics$toString(w)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'height',
											_elm_lang$core$Basics$toString(h)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		};
		var gradient = function (_p92) {
			var _p93 = _p92;
			return A2(
				_elm_lang$core$List$map,
				function (i) {
					var _p94 = A2(_user$project$ColorNum$numToColorScaled, w, i);
					var r = _p94._0;
					var g = _p94._1;
					var b = _p94._2;
					var o = _p94._3;
					var fill = A2(
						_elm_lang$core$Basics_ops['++'],
						'rgba',
						_user$project$Utils$parens(
							A2(
								_elm_lang$core$String$join,
								',',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(
										_elm_lang$core$List$map,
										_elm_lang$core$Basics$toString,
										{
											ctor: '::',
											_0: r,
											_1: {
												ctor: '::',
												_0: g,
												_1: {
													ctor: '::',
													_0: b,
													_1: {ctor: '[]'}
												}
											}
										}),
									{
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(o),
										_1: {ctor: '[]'}
									}))));
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$rect,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'fill', fill),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'x',
									_elm_lang$core$Basics$toString(x + i)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'y',
										_elm_lang$core$Basics$toString(y - yOff)),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'width', '1'),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'height',
												_elm_lang$core$Basics$toString(h)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						});
				},
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Basics$toFloat,
					A2(_elm_lang$core$List$range, 0, w)));
		};
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _user$project$Canvas$onMouseDownAndStop(
						_user$project$Canvas$toggleSelected(
							{
								ctor: '::',
								_0: selectableFeature,
								_1: {ctor: '[]'}
							})),
					_1: {
						ctor: '::',
						_0: _user$project$Canvas$hideBoundsWidgetsOnHover,
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					checkeredBg,
					A2(
						_elm_lang$core$Basics_ops['++'],
						gradient(
							{ctor: '_Tuple0'}),
						{
							ctor: '::',
							_0: box,
							_1: {ctor: '[]'}
						}))),
			_1: {
				ctor: '::',
				_0: ball,
				_1: {ctor: '[]'}
			}
		};
	});
var _user$project$Canvas$zoneColor = F8(
	function (realZone, shapeFeature, model, id, shape, x, y, maybeColor) {
		var pred = function (z) {
			return _user$project$Canvas$isPrimaryZone(z) || _user$project$Canvas$isRotateZone(z);
		};
		var shapeSelected = A2(_elm_lang$core$List$member, id, model.selectedShapes);
		var selectableFeature = A2(_user$project$ShapeWidgets$ShapeFeature, id, shapeFeature);
		var featureSelected = A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures);
		var _p95 = {
			ctor: '_Tuple3',
			_0: shapeSelected || featureSelected,
			_1: A3(_user$project$Canvas$objectZoneIsCurrentlyBeingManipulated, model, id, pred),
			_2: maybeColor
		};
		if ((((_p95.ctor === '_Tuple3') && (_p95._0 === true)) && (_p95._1 === false)) && (_p95._2.ctor === 'Just')) {
			return A8(_user$project$Canvas$zoneColor_, realZone, shapeFeature, model, id, shape, x, y, _p95._2._0);
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Canvas$zoneFillColor = A2(
	_user$project$Canvas$zoneColor,
	_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$FillColor),
	_user$project$ShapeWidgets$OFeat(_user$project$ShapeWidgets$FillColor));
var _user$project$Canvas$zoneStrokeColor = A2(
	_user$project$Canvas$zoneColor,
	_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$StrokeColor),
	_user$project$ShapeWidgets$OFeat(_user$project$ShapeWidgets$StrokeColor));
var _user$project$Canvas$zoneOpacity_ = F8(
	function (realZone, shapeFeature, model, id, shape, x, y, _p96) {
		var _p97 = _p96;
		var _p98 = {ctor: '_Tuple6', _0: _user$project$Canvas$wOpacityBox, _1: 20, _2: 26, _3: 'silver', _4: '2', _5: '7'};
		var w = _p98._0;
		var h = _p98._1;
		var a = _p98._2;
		var stroke = _p98._3;
		var strokeWidth = _p98._4;
		var rBall = _p98._5;
		var yOff = a + _user$project$Canvas$rotZoneDelta;
		var selectableFeature = A2(_user$project$ShapeWidgets$ShapeFeature, id, shapeFeature);
		var ball = function () {
			var cx = x + (_p97._0 * _user$project$Canvas$wOpacityBox);
			var cy = (y - yOff) + (h / 2);
			return A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$svg$Svg$circle,
				{ctor: '[]'},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'fill', stroke),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'cx',
										_elm_lang$core$Basics$toString(cx)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'cy',
											_elm_lang$core$Basics$toString(cy)),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'r', rBall),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Canvas$cursorOfZone, realZone, 'default'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					A3(_user$project$Canvas$dragZoneEvents, id, shape, realZone)));
		}();
		var box = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$svg$Svg$rect,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_user$project$LangSvg$attr,
					'fill',
					A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures) ? _user$project$Draw$colorPointSelected : 'white'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'stroke', stroke),
					_1: {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'x',
								_elm_lang$core$Basics$toString(x)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'y',
									_elm_lang$core$Basics$toString(y - yOff)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'width',
										_elm_lang$core$Basics$toString(w)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'height',
											_elm_lang$core$Basics$toString(h)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _user$project$Canvas$onMouseDownAndStop(
						_user$project$Canvas$toggleSelected(
							{
								ctor: '::',
								_0: selectableFeature,
								_1: {ctor: '[]'}
							})),
					_1: {
						ctor: '::',
						_0: _user$project$Canvas$hideBoundsWidgetsOnHover,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: box,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: ball,
				_1: {ctor: '[]'}
			}
		};
	});
var _user$project$Canvas$zoneOpacity = F8(
	function (realZone, shapeFeature, model, id, shape, x, y, maybeOpacity) {
		var pred = function (z) {
			return _user$project$Canvas$isPrimaryZone(z) || _user$project$Canvas$isRotateZone(z);
		};
		var shapeSelected = A2(_elm_lang$core$List$member, id, model.selectedShapes);
		var selectableFeature = A2(_user$project$ShapeWidgets$ShapeFeature, id, shapeFeature);
		var featureSelected = A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures);
		var _p99 = {
			ctor: '_Tuple3',
			_0: shapeSelected || featureSelected,
			_1: A3(_user$project$Canvas$objectZoneIsCurrentlyBeingManipulated, model, id, pred),
			_2: maybeOpacity
		};
		if ((((_p99.ctor === '_Tuple3') && (_p99._0 === true)) && (_p99._1 === false)) && (_p99._2.ctor === 'Just')) {
			return A8(_user$project$Canvas$zoneOpacity_, realZone, shapeFeature, model, id, shape, x, y, _p99._2._0);
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Canvas$zoneFillOpacity = A2(
	_user$project$Canvas$zoneOpacity,
	_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$FillOpacity),
	_user$project$ShapeWidgets$OFeat(_user$project$ShapeWidgets$FillOpacity));
var _user$project$Canvas$zonesFill = F6(
	function (model, id, shape, x, y, l) {
		var _p100 = A2(_user$project$Canvas$maybeColorNumAttr, 'fill', l);
		var maybeColor = _p100._0;
		var maybeOpacity = _p100._1;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A6(_user$project$Canvas$zoneFillOpacity, model, id, shape, (x - _user$project$Canvas$wOpacityBox) - 5, y, maybeOpacity),
			A6(_user$project$Canvas$zoneFillColor, model, id, shape, x, y, maybeColor));
	});
var _user$project$Canvas$zoneStrokeOpacity = A2(
	_user$project$Canvas$zoneOpacity,
	_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$StrokeOpacity),
	_user$project$ShapeWidgets$OFeat(_user$project$ShapeWidgets$StrokeOpacity));
var _user$project$Canvas$svgPath = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$path,
	{ctor: '[]'});
var _user$project$Canvas$zoneStrokeWidth_ = F6(
	function (model, id, shape, x, y, _p101) {
		var _p102 = _p101;
		var _p103 = {ctor: '_Tuple6', _0: _user$project$Canvas$wStrokeWidthBox, _1: _user$project$LangSvg$maxStrokeWidthNum, _2: 26, _3: 'silver', _4: '2', _5: '7'};
		var w = _p103._0;
		var h = _p103._1;
		var a = _p103._2;
		var stroke = _p103._3;
		var strokeWidth = _p103._4;
		var rBall = _p103._5;
		var yOff = a + _user$project$Canvas$rotZoneDelta;
		var selectableFeature = A2(
			_user$project$ShapeWidgets$ShapeFeature,
			id,
			_user$project$ShapeWidgets$OFeat(_user$project$ShapeWidgets$StrokeWidth));
		var box = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$svg$Svg$rect,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_user$project$LangSvg$attr,
					'fill',
					A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures) ? _user$project$Draw$colorPointSelected : 'white'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'stroke', stroke),
					_1: {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'x',
								_elm_lang$core$Basics$toString(x)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'y',
									_elm_lang$core$Basics$toString(y - yOff)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'width',
										_elm_lang$core$Basics$toString(w)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'height',
											_elm_lang$core$Basics$toString(h)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
		var ball = function () {
			var cx = x + ((_p102._0 / _user$project$LangSvg$maxStrokeWidthNum) * _user$project$Canvas$wStrokeWidthBox);
			var cy = (y - yOff) + (h / 2);
			return A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$svg$Svg$circle,
				{ctor: '[]'},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'stroke-width', strokeWidth),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'fill', stroke),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'cx',
										_elm_lang$core$Basics$toString(cx)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'cy',
											_elm_lang$core$Basics$toString(cy)),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'r', rBall),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$Canvas$cursorOfZone,
													_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$StrokeWidth),
													'default'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					A3(
						_user$project$Canvas$dragZoneEvents,
						id,
						shape,
						_user$project$ShapeWidgets$ZOther(_user$project$ShapeWidgets$StrokeWidth))));
		}();
		var triangle = function () {
			var _p104 = {ctor: '_Tuple2', _0: x, _1: (y - yOff) + (h / 2)};
			var x0 = _p104._0;
			var y0 = _p104._1;
			var _p105 = {ctor: '_Tuple2', _0: x + _user$project$Canvas$wStrokeWidthBox, _1: y - yOff};
			var x1 = _p105._0;
			var y1 = _p105._1;
			var _p106 = {ctor: '_Tuple2', _0: x + _user$project$Canvas$wStrokeWidthBox, _1: (y - yOff) + h};
			var x2 = _p106._0;
			var y2 = _p106._1;
			return _user$project$Canvas$svgPath(
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'fill', 'darkgray'),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'd',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'M ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(x0),
									A2(
										_elm_lang$core$Basics_ops['++'],
										' ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(y0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' L ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(x1),
													A2(
														_elm_lang$core$Basics_ops['++'],
														' ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(y1),
															A2(
																_elm_lang$core$Basics_ops['++'],
																' L ',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(x2),
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		' ',
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_elm_lang$core$Basics$toString(y2),
																			' Z'))))))))))))),
						_1: {ctor: '[]'}
					}
				});
		}();
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _user$project$Canvas$onMouseDownAndStop(
						_user$project$Canvas$toggleSelected(
							{
								ctor: '::',
								_0: selectableFeature,
								_1: {ctor: '[]'}
							})),
					_1: {
						ctor: '::',
						_0: _user$project$Canvas$hideBoundsWidgetsOnHover,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: box,
					_1: {
						ctor: '::',
						_0: triangle,
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: ball,
				_1: {ctor: '[]'}
			}
		};
	});
var _user$project$Canvas$zoneStrokeWidth = F6(
	function (model, id, shape, x, y, maybeStrokeWidth) {
		var pred = function (z) {
			return _user$project$Canvas$isPrimaryZone(z) || _user$project$Canvas$isRotateZone(z);
		};
		var shapeSelected = A2(_elm_lang$core$List$member, id, model.selectedShapes);
		var selectableFeature = A2(
			_user$project$ShapeWidgets$ShapeFeature,
			id,
			_user$project$ShapeWidgets$OFeat(_user$project$ShapeWidgets$StrokeWidth));
		var featureSelected = A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures);
		var _p107 = {
			ctor: '_Tuple3',
			_0: shapeSelected || featureSelected,
			_1: A3(_user$project$Canvas$objectZoneIsCurrentlyBeingManipulated, model, id, pred),
			_2: maybeStrokeWidth
		};
		if ((((_p107.ctor === '_Tuple3') && (_p107._0 === true)) && (_p107._1 === false)) && (_p107._2.ctor === 'Just')) {
			return A6(_user$project$Canvas$zoneStrokeWidth_, model, id, shape, x, y, _p107._2._0);
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Canvas$zonesStroke = F6(
	function (model, id, shape, x, y, l) {
		var _p108 = A2(_user$project$Canvas$maybeColorNumAttr, 'stroke', l);
		var maybeColor = _p108._0;
		var maybeOpacity = _p108._1;
		var maybeStrokeWidth = _user$project$Canvas$maybeStrokeWidthNumAttr(l);
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A6(_user$project$Canvas$zoneStrokeOpacity, model, id, shape, (x - _user$project$Canvas$wOpacityBox) - 5, y, maybeOpacity),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A6(_user$project$Canvas$zoneStrokeColor, model, id, shape, x, y, maybeColor),
				A6(_user$project$Canvas$zoneStrokeWidth, model, id, shape, (x + _user$project$Canvas$wGradient) + 5, y, maybeStrokeWidth)));
	});
var _user$project$Canvas$zonesFillAndStroke = F6(
	function (model, id, shape, x, y, l) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A6(_user$project$Canvas$zonesFill, model, id, shape, x, y, l),
			A6(_user$project$Canvas$zonesStroke, model, id, shape, x, (y - _user$project$Canvas$hZoneColor) - 5, l));
	});
var _user$project$Canvas$svgPolygon = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$polygon,
	{ctor: '[]'});
var _user$project$Canvas$svgEllipse = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$ellipse,
	{ctor: '[]'});
var _user$project$Canvas$svgCircle = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$circle,
	{ctor: '[]'});
var _user$project$Canvas$zonePoint = F7(
	function (model, alwaysShow, id, shapeKind, realZone, transform, _p109) {
		var _p110 = _p109;
		var maybeStyles = function () {
			var maybeStyles_ = function (_p111) {
				var _p112 = _p111;
				return A3(
					_user$project$Canvas$objectZoneIsCurrentlyBeingManipulated,
					model,
					id,
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						})(realZone)) ? _elm_lang$core$Maybe$Just(
					A2(_user$project$Canvas$pointZoneStylesFillSelected, model, id)) : (A2(_user$project$Canvas$objectIsCurrentlyBeingManipulated, model, id) ? _elm_lang$core$Maybe$Nothing : (A2(_elm_lang$core$List$member, id, model.selectedShapes) ? _elm_lang$core$Maybe$Just(
					A2(_user$project$Canvas$pointZoneStylesFillSelected, model, id)) : ((A2(_elm_lang$core$Set$member, id, model.hoveredShapes) || alwaysShow) ? _elm_lang$core$Maybe$Just(_user$project$Draw$pointZoneStyles.fill.shown) : _elm_lang$core$Maybe$Nothing)));
			};
			var _p113 = _user$project$ShapeWidgets$zoneToMaybePointFeature(realZone);
			if (_p113.ctor === 'Nothing') {
				return maybeStyles_(
					{ctor: '_Tuple0'});
			} else {
				return A2(
					_elm_lang$core$Set$member,
					{ctor: '_Tuple2', _0: id, _1: _p113._0},
					model.hoveredCrosshairs) ? _elm_lang$core$Maybe$Nothing : maybeStyles_(
					{ctor: '_Tuple0'});
			}
		}();
		var _p114 = maybeStyles;
		if (_p114.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return _elm_lang$core$List$singleton(
				_user$project$Canvas$svgCircle(
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(_user$project$Canvas$attrNum, 'cx', _p110._0),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Canvas$attrNum, 'cy', _p110._1),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'r',
										_elm_lang$core$Basics$toString(_user$project$Draw$pointZoneStyles.radius)),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'fill', 'transparent'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'stroke', 'transparent'),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$LangSvg$attr,
													'stroke-width',
													_elm_lang$core$Basics$toString(_user$project$Draw$pointZoneStyles.strokeWidth)),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Canvas$cursorOfZone, realZone, 'pointer'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A3(_user$project$Canvas$dragZoneEvents, id, shapeKind, realZone),
							transform))));
		}
	});
var _user$project$Canvas$eightCardinalZones = F5(
	function (model, id, shape, transform, _p115) {
		var _p116 = _p115;
		var _p121 = _p116._1;
		var _p120 = _p116._2;
		var _p119 = _p116._0;
		var _p118 = _p116._3;
		var _p117 = {ctor: '_Tuple2', _0: _p120 - _p119, _1: _p118 - _p121};
		var width = _p117._0;
		var height = _p117._1;
		var ifEnoughSpace = F2(
			function (len, xs) {
				return (_elm_lang$core$Native_Utils.cmp(len, _user$project$Canvas$minLengthForMiddleZones) < 0) ? {ctor: '[]'} : xs;
			});
		var mkPoint = F3(
			function (realZone, cx, cy) {
				return A7(
					_user$project$Canvas$zonePoint,
					model,
					false,
					id,
					shape,
					realZone,
					transform,
					{ctor: '_Tuple2', _0: cx, _1: cy});
			});
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A3(
				mkPoint,
				_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopLeft),
				_p119,
				_p121),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A3(
					mkPoint,
					_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopRight),
					_p120,
					_p121),
				A2(
					_elm_lang$core$Basics_ops['++'],
					A3(
						mkPoint,
						_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotLeft),
						_p119,
						_p118),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A3(
							mkPoint,
							_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotRight),
							_p120,
							_p118),
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								ifEnoughSpace,
								height,
								A3(
									mkPoint,
									_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$LeftEdge),
									_p119,
									_p121 + (height / 2))),
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									ifEnoughSpace,
									height,
									A3(
										mkPoint,
										_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$RightEdge),
										_p120,
										_p121 + (height / 2))),
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(
										ifEnoughSpace,
										width,
										A3(
											mkPoint,
											_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$TopEdge),
											_p119 + (width / 2),
											_p121)),
									A2(
										ifEnoughSpace,
										width,
										A3(
											mkPoint,
											_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$BotEdge),
											_p119 + (width / 2),
											_p118)))))))));
	});
var _user$project$Canvas$zonePoints = F5(
	function (model, id, shape, transform, pts) {
		return _elm_lang$core$List$concat(
			A3(
				_elm_lang$core$Basics$flip,
				_user$project$Utils$mapi1,
				pts,
				function (_p122) {
					var _p123 = _p122;
					return A7(
						_user$project$Canvas$zonePoint,
						model,
						false,
						id,
						shape,
						_user$project$ShapeWidgets$ZPoint(
							_user$project$ShapeWidgets$Point(_p123._0)),
						transform,
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Tuple$first(_p123._1._0),
							_1: _elm_lang$core$Tuple$first(_p123._1._1)
						});
				}));
	});
var _user$project$Canvas$zonePoints2 = F5(
	function (model, id, shape, transform, pts) {
		return _elm_lang$core$List$concat(
			A3(
				_elm_lang$core$Basics$flip,
				_user$project$Utils$mapi1,
				pts,
				function (_p124) {
					var _p125 = _p124;
					return A7(
						_user$project$Canvas$zonePoint,
						model,
						false,
						id,
						shape,
						_user$project$ShapeWidgets$ZPoint(
							_user$project$ShapeWidgets$Point(_p125._0)),
						transform,
						{ctor: '_Tuple2', _0: _p125._1._0, _1: _p125._1._1});
				}));
	});
var _user$project$Canvas$svgRect = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$rect,
	{ctor: '[]'});
var _user$project$Canvas$groupWithInvisibleBoxForRemovingHoveredShape = F4(
	function (model, id, _p126, shapeWidgets) {
		var _p127 = _p126;
		var _p129 = _p127._1;
		var _p128 = _p127._0;
		var pad = 10;
		var perhapsBackgroundBox = A2(_user$project$Canvas$objectIsCurrentlyBeingManipulated, model, id) ? {ctor: '[]'} : ((!A2(_elm_lang$core$Set$member, id, model.hoveredShapes)) ? {ctor: '[]'} : _elm_lang$core$List$singleton(
			_user$project$Canvas$svgRect(
				{
					ctor: '::',
					_0: A2(
						_user$project$LangSvg$attr,
						'x',
						_elm_lang$core$Basics$toString(_p128 - pad)),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'y',
							_elm_lang$core$Basics$toString(_p129 - pad)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'width',
								_elm_lang$core$Basics$toString((_p127._2 - _p128) + (2 * pad))),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'height',
									_elm_lang$core$Basics$toString((_p127._3 - _p129) + (2 * pad))),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'fill', 'rgba(100,100,100,0.0)'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'stroke', 'lightgray'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'stroke-width', '1'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				})));
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onMouseLeave(
					_user$project$Canvas$removeHoveredShape(id)),
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$Basics_ops['++'], perhapsBackgroundBox, shapeWidgets));
	});
var _user$project$Canvas$svgLine = A2(
	_elm_lang$core$Basics$flip,
	_elm_lang$svg$Svg$line,
	{ctor: '[]'});
var _user$project$Canvas$buildDistances = F3(
	function (model, slate, widgets) {
		var selectedPoints = _user$project$ShapeWidgets$featuresToSelectablePoints(model.selectedFeatures);
		var pointsAtEndOfSelectedDistances = A2(
			_elm_lang$core$List$concatMap,
			function (selectedFeature) {
				var _p130 = selectedFeature;
				if (_p130.ctor === 'DistanceBetweenFeatures') {
					return _elm_lang$core$Set$toList(_p130._0);
				} else {
					return {ctor: '[]'};
				}
			},
			model.selectedFeatures);
		var candidateEndpoints = _user$project$Utils$dedup(
			A2(_elm_lang$core$Basics_ops['++'], selectedPoints, pointsAtEndOfSelectedDistances));
		return A2(
			_elm_lang$core$List$concatMap,
			function (pointPairSet) {
				var _p131 = _user$project$ShapeWidgets$extractSelectablePoints(pointPairSet);
				var selectablePoint1 = _p131._0;
				var selectablePoint2 = _p131._1;
				var _p132 = {
					ctor: '_Tuple2',
					_0: A3(_user$project$ShapeWidgets$selectablePointToMaybeXY, selectablePoint1, slate, widgets),
					_1: A3(_user$project$ShapeWidgets$selectablePointToMaybeXY, selectablePoint2, slate, widgets)
				};
				if (((((_p132.ctor === '_Tuple2') && (_p132._0.ctor === 'Just')) && (_p132._0._0.ctor === '_Tuple2')) && (_p132._1.ctor === 'Just')) && (_p132._1._0.ctor === '_Tuple2')) {
					var selectableFeature = _user$project$ShapeWidgets$DistanceBetweenFeatures(
						_elm_lang$core$Set$fromList(
							{
								ctor: '::',
								_0: selectablePoint1,
								_1: {
									ctor: '::',
									_0: selectablePoint2,
									_1: {ctor: '[]'}
								}
							}));
					var isSelected = A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures);
					var color = isSelected ? _user$project$Draw$colorPointSelected : _user$project$Draw$colorLineNotSelected;
					var deselectEndPoints = function (model) {
						if (isSelected) {
							return model;
						} else {
							var featuresToDeselect = A2(
								_elm_lang$core$List$concatMap,
								function (_p133) {
									return _user$project$Utils$pairToList(
										_user$project$ShapeWidgets$selectablePointToSelectableFeatures(_p133));
								},
								{
									ctor: '::',
									_0: selectablePoint1,
									_1: {
										ctor: '::',
										_0: selectablePoint2,
										_1: {ctor: '[]'}
									}
								});
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									selectedFeatures: A2(
										_elm_lang$core$List$filter,
										function (selectedFeature) {
											return !A2(_elm_lang$core$List$member, selectedFeature, featuresToDeselect);
										},
										model.selectedFeatures)
								});
						}
					};
					var line = _user$project$Canvas$svgLine(
						{
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'stroke', color),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'stroke-width', _user$project$Canvas$hairStrokeWidth),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'x1',
										_elm_lang$core$Basics$toString(_p132._0._0._0)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'y1',
											_elm_lang$core$Basics$toString(_p132._0._0._1)),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'x2',
												_elm_lang$core$Basics$toString(_p132._1._0._0)),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$LangSvg$attr,
													'y2',
													_elm_lang$core$Basics$toString(_p132._1._0._1)),
												_1: {
													ctor: '::',
													_0: _user$project$Canvas$onMouseDownAndStop(
														A2(
															_user$project$InterfaceModel$Msg,
															'Toggle Selected Distance...',
															function (_p134) {
																return deselectEndPoints(
																	A2(
																		_user$project$Canvas$doToggleSelected,
																		{
																			ctor: '::',
																			_0: selectableFeature,
																			_1: {ctor: '[]'}
																		},
																		_p134));
															})),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						});
					return {
						ctor: '::',
						_0: line,
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			},
			A2(
				_elm_lang$core$List$sortBy,
				function (pointPairSet) {
					return A2(
						_elm_lang$core$List$member,
						_user$project$ShapeWidgets$DistanceBetweenFeatures(pointPairSet),
						model.selectedFeatures) ? 1 : 0;
				},
				_user$project$Utils$dedup(
					A2(
						_elm_lang$core$List$filter,
						function (_p135) {
							return A2(
								F2(
									function (x, y) {
										return _elm_lang$core$Native_Utils.eq(x, y);
									}),
								2,
								_elm_lang$core$Set$size(_p135));
						},
						A2(
							_elm_lang$core$List$map,
							function (_p136) {
								var _p137 = _p136;
								return _elm_lang$core$Set$fromList(
									{
										ctor: '::',
										_0: _p137._0,
										_1: {
											ctor: '::',
											_0: _p137._1,
											_1: {ctor: '[]'}
										}
									});
							},
							A2(_user$project$Utils$cartProd, candidateEndpoints, candidateEndpoints))))));
	});
var _user$project$Canvas$pixels = function (n) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(n),
		'px');
};
var _user$project$Canvas$strOldButtonTopColor = 'rgba(231,76,60,1.0)';
var _user$project$Canvas$strOldInterfaceColor = 'rgba(52,73,94,1.0)';
var _user$project$Canvas$HoverPadding = function (a) {
	return {ctor: 'HoverPadding', _0: a};
};
var _user$project$Canvas$NoHoverPadding = {ctor: 'NoHoverPadding'};
var _user$project$Canvas$svgOffsetWidget1DArrowParts = function (program) {
	return function (modelRenamingInOutput) {
		return function (idAsShape) {
			return function (_p138) {
				return function (axis) {
					return function (sign) {
						return function (amount) {
							return function (amountVal) {
								return function (isSelected) {
									return function (extraStyles) {
										var _p139 = _p138;
										var _p147 = _p139._1;
										var _p146 = _p139._0;
										var _p140 = A4(
											_user$project$Lang$offsetWidget1DEffectiveAmountAndEndPoint,
											{ctor: '_Tuple2', _0: _p146, _1: _p147},
											axis,
											sign,
											amount);
										var effectiveAmount = _p140._0;
										var endX = _p140._1._0;
										var endY = _p140._1._1;
										var lineStyle = isSelected ? {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'stroke', _user$project$Draw$colorPointSelected),
											_1: {
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'stroke-width', '5px'),
												_1: {ctor: '[]'}
											}
										} : {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'stroke-width', '1px'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$LangSvg$attr, 'stroke-dasharray', '1,1'),
													_1: {ctor: '[]'}
												}
											}
										};
										var clickRegionLineStyle = {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'stroke', 'transparent'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'stroke-width', '9px'),
												_1: {ctor: '[]'}
											}
										};
										var line = A3(
											_elm_lang$core$Basics$flip,
											_elm_lang$svg$Svg$line,
											{ctor: '[]'},
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: A2(_user$project$Canvas$attrNum, 'x1', _p146),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Canvas$attrNum, 'y1', _p147),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Canvas$attrNum, 'x2', endX),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Canvas$attrNum, 'y2', endY),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												A2(_elm_lang$core$Basics_ops['++'], lineStyle, extraStyles)));
										var clickRegionLine = A3(
											_elm_lang$core$Basics$flip,
											_elm_lang$svg$Svg$line,
											{ctor: '[]'},
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: A2(_user$project$Canvas$attrNum, 'x1', _p146),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Canvas$attrNum, 'y1', _p147),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Canvas$attrNum, 'x2', endX),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Canvas$attrNum, 'y2', endY),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												A2(_elm_lang$core$Basics_ops['++'], clickRegionLineStyle, extraStyles)));
										var endArrow = function () {
											var arrowOffset = 16;
											var _p141 = function () {
												var _p142 = {
													ctor: '_Tuple2',
													_0: axis,
													_1: _user$project$Utils$sgn(effectiveAmount)
												};
												_v61_3:
												do {
													if (_p142.ctor === '_Tuple2') {
														if (_p142._0.ctor === 'X') {
															switch (_p142._1) {
																case 1:
																	return {
																		ctor: '_Tuple4',
																		_0: F2(
																			function (x, y) {
																				return x - y;
																			}),
																		_1: F2(
																			function (x, y) {
																				return x - y;
																			}),
																		_2: F2(
																			function (x, y) {
																				return x - y;
																			}),
																		_3: F2(
																			function (x, y) {
																				return x + y;
																			})
																	};
																case -1:
																	return {
																		ctor: '_Tuple4',
																		_0: F2(
																			function (x, y) {
																				return x + y;
																			}),
																		_1: F2(
																			function (x, y) {
																				return x - y;
																			}),
																		_2: F2(
																			function (x, y) {
																				return x + y;
																			}),
																		_3: F2(
																			function (x, y) {
																				return x + y;
																			})
																	};
																default:
																	break _v61_3;
															}
														} else {
															if (_p142._1 === 1) {
																return {
																	ctor: '_Tuple4',
																	_0: F2(
																		function (x, y) {
																			return x - y;
																		}),
																	_1: F2(
																		function (x, y) {
																			return x - y;
																		}),
																	_2: F2(
																		function (x, y) {
																			return x + y;
																		}),
																	_3: F2(
																		function (x, y) {
																			return x - y;
																		})
																};
															} else {
																break _v61_3;
															}
														}
													} else {
														break _v61_3;
													}
												} while(false);
												return {
													ctor: '_Tuple4',
													_0: F2(
														function (x, y) {
															return x - y;
														}),
													_1: F2(
														function (x, y) {
															return x + y;
														}),
													_2: F2(
														function (x, y) {
															return x + y;
														}),
													_3: F2(
														function (x, y) {
															return x + y;
														})
												};
											}();
											var opX1 = _p141._0;
											var opY1 = _p141._1;
											var opX2 = _p141._2;
											var opY2 = _p141._3;
											return A3(
												_elm_lang$core$Basics$flip,
												_elm_lang$svg$Svg$polyline,
												{ctor: '[]'},
												A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: A2(_user$project$LangSvg$attr, 'fill', 'rgba(0,0,0,0.0)'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$LangSvg$attr, 'cursor', 'pointer'),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$LangSvg$attr,
																	'points',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_elm_lang$core$Basics$toString(
																			A2(opX1, endX, arrowOffset)),
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			',',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				_elm_lang$core$Basics$toString(
																					A2(opY1, endY, arrowOffset)),
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					' ',
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						_elm_lang$core$Basics$toString(endX),
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							',',
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								_elm_lang$core$Basics$toString(endY),
																								A2(
																									_elm_lang$core$Basics_ops['++'],
																									' ',
																									A2(
																										_elm_lang$core$Basics_ops['++'],
																										_elm_lang$core$Basics$toString(
																											A2(opX2, endX, arrowOffset)),
																										A2(
																											_elm_lang$core$Basics_ops['++'],
																											',',
																											A2(
																												_elm_lang$core$Basics_ops['++'],
																												_elm_lang$core$Basics$toString(
																													A2(opY2, endY, arrowOffset)),
																												' ')))))))))))),
																_1: {ctor: '[]'}
															}
														}
													},
													A2(_elm_lang$core$Basics_ops['++'], lineStyle, extraStyles)));
										}();
										var caption = function () {
											var _p143 = function () {
												var _p144 = axis;
												if (_p144.ctor === 'X') {
													return {ctor: '_Tuple5', _0: (_p146 + endX) / 2, _1: _p147 - 10, _2: ((_p146 + endX) / 2) - 25, _3: _p147, _4: 'middle'};
												} else {
													return {ctor: '_Tuple5', _0: _p146 + 10, _1: (_p147 + endY) / 2, _2: _p146 + 10, _3: ((_p147 + endY) / 2) + 10, _4: 'start'};
												}
											}();
											var x = _p143._0;
											var y = _p143._1;
											var left = _p143._2;
											var top = _p143._3;
											var textAnchor = _p143._4;
											var maybeBold = isSelected ? {
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'font-weight', 'bold'),
												_1: {ctor: '[]'}
											} : {ctor: '[]'};
											var _p145 = A2(_user$project$Provenance$valToMaybeLetPat, program, amountVal);
											if (_p145.ctor === 'Just') {
												return A8(
													_user$project$Canvas$patInOutput,
													modelRenamingInOutput,
													false,
													_p145._0,
													{
														ctor: '::',
														_0: idAsShape,
														_1: {ctor: '[]'}
													},
													{ctor: '[]'},
													left,
													top,
													_user$project$Canvas$NoHoverPadding);
											} else {
												var string = _elm_lang$core$Basics$toString(amount);
												return A3(
													_elm_lang$core$Basics$flip,
													_elm_lang$svg$Svg$text_,
													{
														ctor: '::',
														_0: _elm_lang$virtual_dom$VirtualDom$text(string),
														_1: {ctor: '[]'}
													},
													A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: A2(_user$project$LangSvg$attr, 'font-family', _user$project$Config$params.mainSection.uiWidgets.font),
															_1: {
																ctor: '::',
																_0: A2(_user$project$LangSvg$attr, 'font-size', _user$project$Config$params.mainSection.uiWidgets.fontSize),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$LangSvg$attr, 'text-anchor', textAnchor),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_user$project$LangSvg$attr,
																			'x',
																			_elm_lang$core$Basics$toString(x)),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_user$project$LangSvg$attr,
																				'y',
																				_elm_lang$core$Basics$toString(y)),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														A2(_elm_lang$core$Basics_ops['++'], maybeBold, extraStyles)));
											}
										}();
										return {
											ctor: '::',
											_0: clickRegionLine,
											_1: {
												ctor: '::',
												_0: line,
												_1: {
													ctor: '::',
													_0: caption,
													_1: {
														ctor: '::',
														_0: endArrow,
														_1: {ctor: '[]'}
													}
												}
											}
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Canvas$drawNewPointAndOffset = F4(
	function (model, shouldHighlight, _p149, _p148) {
		var _p150 = _p149;
		var _p154 = _p150._1;
		var _p153 = _p150._0;
		var _p151 = _p148;
		var _p152 = A2(
			_user$project$Draw$horizontalVerticalSnap,
			{ctor: '_Tuple2', _0: _p153, _1: _p154},
			{ctor: '_Tuple2', _0: _p151._0, _1: _p151._1});
		var axis = _p152._0;
		var sign = _p152._1;
		var amount = _p152._2;
		var xyDot = A5(
			_user$project$Draw$svgXYDot,
			1,
			{ctor: '_Tuple2', _0: _p153, _1: _p154},
			_user$project$Draw$pointZoneStyles.fill.shown,
			true,
			{ctor: '[]'});
		var arrowParts = _user$project$Canvas$svgOffsetWidget1DArrowParts(model.inputExp)(_elm_lang$core$Maybe$Nothing)(0)(
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toFloat(_p153),
				_1: _elm_lang$core$Basics$toFloat(_p154)
			})(axis)(sign)(amount)(_user$project$Canvas$dummyVal)(shouldHighlight)(
			{ctor: '[]'});
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: xyDot,
				_1: {ctor: '[]'}
			},
			arrowParts);
	});
var _user$project$Canvas$drawNewShape = function (model) {
	return A2(
		_elm_lang$svg$Svg$g,
		{
			ctor: '::',
			_0: A2(_user$project$LangSvg$attr, 'opacity', '0.4'),
			_1: {ctor: '[]'}
		},
		function () {
			var _p155 = {ctor: '_Tuple2', _0: model.tool, _1: model.mouseMode};
			_v66_3:
			do {
				if ((_p155.ctor === '_Tuple2') && (_p155._1.ctor === 'MouseDrawNew')) {
					switch (_p155._0.ctor) {
						case 'Poly':
							if ((_p155._1._0.ctor === 'PolyPoints') && (_p155._1._0._0.ctor === '::')) {
								return A2(_user$project$Draw$drawNewPolygon, _p155._1._0._0._0, _p155._1._0._0._1);
							} else {
								break _v66_3;
							}
						case 'PointOrOffset':
							if (((((_p155._1._0.ctor === 'Offset1D') && (_p155._1._0._0.ctor === '_Tuple2')) && (_p155._1._0._0._0.ctor === '_Tuple2')) && (_p155._1._0._0._1.ctor === '_Tuple2')) && (_p155._1._0._2.ctor === '_Tuple2')) {
								return A4(
									_user$project$Canvas$drawNewPointAndOffset,
									model,
									!_elm_lang$core$Native_Utils.eq(_p155._1._0._1, _user$project$InterfaceModel$NoSnap),
									{ctor: '_Tuple2', _0: _p155._1._0._0._0._0, _1: _p155._1._0._0._1._0},
									{ctor: '_Tuple2', _0: _p155._1._0._2._0, _1: _p155._1._0._2._1});
							} else {
								break _v66_3;
							}
						case 'Function':
							if (_p155._1._0.ctor === 'TwoPoints') {
								return A5(_user$project$Draw$drawNewFunction, 1, _p155._0._0, model, _p155._1._0._0, _p155._1._0._1);
							} else {
								break _v66_3;
							}
						default:
							break _v66_3;
					}
				} else {
					break _v66_3;
				}
			} while(false);
			return {ctor: '[]'};
		}());
};
var _user$project$Canvas$SelectedEIdOnly = function (a) {
	return {ctor: 'SelectedEIdOnly', _0: a};
};
var _user$project$Canvas$SelectedPoint = F2(
	function (a, b) {
		return {ctor: 'SelectedPoint', _0: a, _1: b};
	});
var _user$project$Canvas$SelectedFeature = function (a) {
	return {ctor: 'SelectedFeature', _0: a};
};
var _user$project$Canvas$zoneSelectCrossDot = F6(
	function (model, alwaysShowDot, _p156, xVal, yVal, pairVal) {
		var _p157 = _p156;
		var _p168 = _p157._2;
		var _p167 = _p157._0;
		var x = _elm_lang$core$Basics$round(
			_user$project$Lang$valToNum(xVal));
		var y = _elm_lang$core$Basics$round(
			_user$project$Lang$valToNum(yVal));
		var thisCrosshair = {ctor: '_Tuple2', _0: _p167, _1: _p168};
		var len = 24;
		var color = function (selectableFeatures) {
			return A2(
				_elm_lang$core$List$all,
				A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, model.selectedFeatures),
				selectableFeatures) ? _user$project$Draw$colorPointSelected : _user$project$Draw$colorPointNotSelected;
		};
		var ySelectableFeature = A2(
			_user$project$ShapeWidgets$ShapeFeature,
			_p167,
			_user$project$ShapeWidgets$YFeat(_p168));
		var xSelectableFeature = A2(
			_user$project$ShapeWidgets$ShapeFeature,
			_p167,
			_user$project$ShapeWidgets$XFeat(_p168));
		var _p158 = {
			ctor: '_Tuple2',
			_0: color(
				{
					ctor: '::',
					_0: xSelectableFeature,
					_1: {ctor: '[]'}
				}),
			_1: color(
				{
					ctor: '::',
					_0: ySelectableFeature,
					_1: {ctor: '[]'}
				})
		};
		var xColor = _p158._0;
		var yColor = _p158._1;
		var isHovered = A2(_elm_lang$core$Set$member, thisCrosshair, model.hoveredCrosshairs) && _elm_lang$core$Native_Utils.eq(model.tool, _user$project$InterfaceModel$Cursor);
		var shouldShowX = isHovered || A2(_elm_lang$core$List$member, xSelectableFeature, model.selectedFeatures);
		var shouldShowY = isHovered || A2(_elm_lang$core$List$member, ySelectableFeature, model.selectedFeatures);
		var _p159 = function () {
			var r = isHovered ? _elm_lang$core$Basics$toString(len) : '0';
			var backDisc = _user$project$Canvas$svgCircle(
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'r', r),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'cx',
							_elm_lang$core$Basics$toString(x)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'cy',
								_elm_lang$core$Basics$toString(y)),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'fill', 'rgba(255,255,255,1.0)'),
								_1: {ctor: '[]'}
							}
						}
					}
				});
			var frontDisc = _user$project$Canvas$svgCircle(
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'r', r),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'cx',
							_elm_lang$core$Basics$toString(x)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'cy',
								_elm_lang$core$Basics$toString(y)),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'fill', 'none'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'stroke-width',
											_elm_lang$core$Basics$toString(_user$project$Draw$pointZoneStyles.strokeWidth)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				});
			return {ctor: '_Tuple2', _0: backDisc, _1: frontDisc};
		}();
		var backDisc = _p159._0;
		var frontDisc = _p159._1;
		var dotIsVisible = (_elm_lang$core$Native_Utils.eq(_p157._1, 'point') || (!A2(_user$project$Canvas$objectIsCurrentlyBeingManipulated, model, _p167))) && (alwaysShowDot || (A2(_elm_lang$core$List$member, _p167, model.selectedShapes) || (A2(_elm_lang$core$Set$member, _p167, model.hoveredShapes) || (A2(_elm_lang$core$Set$member, thisCrosshair, model.hoveredCrosshairs) || (!_elm_lang$core$Native_Utils.eq(model.tool, _user$project$InterfaceModel$Cursor))))));
		var xyDot = function () {
			var isContextOutputPoint = F3(
				function (model, xVal, yVal) {
					return A2(
						_elm_lang$core$List$any,
						function (_p160) {
							var _p161 = _p160;
							return A2(_user$project$Provenance$valsSame, xVal, _p161._0) && A2(_user$project$Provenance$valsSame, yVal, _p161._1);
						},
						A2(
							_elm_lang$core$List$filterMap,
							_user$project$Lang$valToMaybeXYVals,
							_user$project$Lang$flattenValTree(model.inputVal)));
				});
			var isContextInputPoint = F3(
				function (model, xVal, yVal) {
					return (A2(
						_elm_lang$core$List$any,
						_user$project$Provenance$valsSame(xVal),
						model.contextInputVals) && A2(
						_elm_lang$core$List$any,
						_user$project$Provenance$valsSame(yVal),
						model.contextInputVals)) || A2(
						_elm_lang$core$List$any,
						function (_p162) {
							return A2(
								_elm_lang$core$Maybe$withDefault,
								false,
								A2(
									_elm_lang$core$Maybe$map,
									function (_p163) {
										var _p164 = _p163;
										return A2(_user$project$Provenance$valsSame, xVal, _p164._0) && A2(_user$project$Provenance$valsSame, yVal, _p164._1);
									},
									_user$project$Lang$valToMaybeXYVals(_p162)));
						},
						model.contextInputVals);
				});
			var dotFill = function () {
				var _p165 = {
					ctor: '_Tuple3',
					_0: A3(_user$project$InterfaceModel$isShapeBeingDrawnSnappingToPoint, model, xVal, yVal),
					_1: A3(isContextInputPoint, model, xVal, yVal),
					_2: A3(isContextOutputPoint, model, xVal, yVal)
				};
				_v70_4:
				do {
					_v70_0:
					do {
						if (_p165.ctor === '_Tuple3') {
							if (_p165._1 === true) {
								if (_p165._2 === true) {
									if (_p165._0 === true) {
										break _v70_0;
									} else {
										return _user$project$Draw$colorInputAndOutput;
									}
								} else {
									if (_p165._0 === true) {
										break _v70_0;
									} else {
										return _user$project$Draw$colorInput;
									}
								}
							} else {
								if (_p165._0 === true) {
									break _v70_0;
								} else {
									if (_p165._2 === true) {
										return _user$project$Draw$colorOutput;
									} else {
										break _v70_4;
									}
								}
							}
						} else {
							break _v70_4;
						}
					} while(false);
					return _user$project$Draw$colorPointSelected;
				} while(false);
				return _user$project$Draw$pointZoneStyles.fill.shown;
			}();
			var extraAttrs = _elm_lang$core$Native_Utils.eq(model.tool, _user$project$InterfaceModel$Cursor) ? {
				ctor: '::',
				_0: _user$project$Canvas$onMouseDownAndStop(
					A2(
						_user$project$InterfaceModel$Msg,
						'Toggle Selection of Hovered Cross Dot...',
						function (model) {
							return A2(_elm_lang$core$Set$member, thisCrosshair, model.hoveredCrosshairs) ? A2(
								_user$project$Canvas$doToggleSelected,
								{
									ctor: '::',
									_0: xSelectableFeature,
									_1: {
										ctor: '::',
										_0: ySelectableFeature,
										_1: {ctor: '[]'}
									}
								},
								model) : _elm_lang$core$Native_Utils.update(
								model,
								{
									hoveredCrosshairs: A2(_elm_lang$core$Set$insert, thisCrosshair, model.hoveredCrosshairs)
								});
						})),
				_1: {ctor: '[]'}
			} : {
				ctor: '::',
				_0: _user$project$Canvas$onMouseDownAndStop(
					A2(
						_user$project$InterfaceModel$Msg,
						'Mouse Down On Point...',
						function (model) {
							var maybeClickable = _elm_lang$core$Maybe$Just(
								A2(_user$project$InterfaceModel$PointWithProvenance, xVal, yVal));
							var newModel = _elm_lang$core$Native_Utils.eq(model.mouseMode, _user$project$InterfaceModel$MouseNothing) ? A2(_user$project$Canvas$startDrawing, model, maybeClickable) : model;
							return _elm_lang$core$Native_Utils.update(
								newModel,
								{
									mouseState: {
										ctor: '_Tuple3',
										_0: _elm_lang$core$Maybe$Just(false),
										_1: {x: x, y: y},
										_2: maybeClickable
									}
								});
						})),
				_1: {ctor: '[]'}
			};
			return A5(
				_user$project$Draw$svgXYDot,
				1,
				{ctor: '_Tuple2', _0: x, _1: y},
				dotFill,
				dotIsVisible,
				extraAttrs);
		}();
		var perhapsDotHalo = (dotIsVisible && A2(_elm_lang$core$List$member, _p167, model.selectedShapes)) ? {
			ctor: '::',
			_0: _user$project$Canvas$svgCircle(
				{
					ctor: '::',
					_0: A2(_user$project$Canvas$attrNum, 'cx', x),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Canvas$attrNum, 'cy', y),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'fill',
								A2(_user$project$Canvas$pointZoneStylesFillSelected, model, _p167)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'r',
									dotIsVisible ? _elm_lang$core$Basics$toString(_user$project$Draw$pointZoneStyles.radius + 6) : '0'),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		var perhapsPointPatWidget = A9(
			_user$project$Canvas$perhapsPatOrExpInOutput,
			model.inputExp,
			model.slate,
			model.widgets,
			model.renamingInOutput,
			A2(_user$project$Canvas$SelectedPoint, xSelectableFeature, ySelectableFeature),
			(_elm_lang$core$Basics$toFloat(x) - len) - 1,
			(_elm_lang$core$Basics$toFloat(y) - len) + 7,
			_user$project$Canvas$HoverPadding(3),
			shouldShowX || shouldShowY);
		var perhapsXPatWidget = A9(
			_user$project$Canvas$perhapsPatOrExpInOutput,
			model.inputExp,
			model.slate,
			model.widgets,
			model.renamingInOutput,
			_user$project$Canvas$SelectedFeature(xSelectableFeature),
			_elm_lang$core$Basics$toFloat(x) - (_user$project$Utils$parseFloat(_user$project$Canvas$hairStrokeWidth) / 2),
			(_elm_lang$core$Basics$toFloat(y) + len) + 25,
			_user$project$Canvas$HoverPadding(3),
			shouldShowX);
		var perhapsYPatWidget = A9(
			_user$project$Canvas$perhapsPatOrExpInOutput,
			model.inputExp,
			model.slate,
			model.widgets,
			model.renamingInOutput,
			_user$project$Canvas$SelectedFeature(ySelectableFeature),
			(_elm_lang$core$Basics$toFloat(x) + len) + 4,
			(_elm_lang$core$Basics$toFloat(y) + 11) + (_user$project$Utils$parseFloat(_user$project$Canvas$hairStrokeWidth) / 2),
			_user$project$Canvas$HoverPadding(3),
			shouldShowY);
		var xLine = _user$project$Canvas$svgLine(
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'stroke', xColor),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'stroke-width',
							shouldShowX ? _user$project$Canvas$hairStrokeWidth : '0'),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'y1',
								_elm_lang$core$Basics$toString(y - len)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'x1',
									_elm_lang$core$Basics$toString(x)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'y2',
										_elm_lang$core$Basics$toString(y + len)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'x2',
											_elm_lang$core$Basics$toString(x)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				(!_elm_lang$core$Native_Utils.eq(model.tool, _user$project$InterfaceModel$Cursor)) ? {ctor: '[]'} : {
					ctor: '::',
					_0: _user$project$Canvas$onMouseDownAndStop(
						_user$project$Canvas$toggleSelected(
							{
								ctor: '::',
								_0: xSelectableFeature,
								_1: {ctor: '[]'}
							})),
					_1: {ctor: '[]'}
				}));
		var yLine = _user$project$Canvas$svgLine(
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'stroke', yColor),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'stroke-width',
							shouldShowY ? _user$project$Canvas$hairStrokeWidth : '0'),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'x1',
								_elm_lang$core$Basics$toString(x - len)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'y1',
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'x2',
										_elm_lang$core$Basics$toString(x + len)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'y2',
											_elm_lang$core$Basics$toString(y)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				(!_elm_lang$core$Native_Utils.eq(model.tool, _user$project$InterfaceModel$Cursor)) ? {ctor: '[]'} : {
					ctor: '::',
					_0: _user$project$Canvas$onMouseDownAndStop(
						_user$project$Canvas$toggleSelected(
							{
								ctor: '::',
								_0: ySelectableFeature,
								_1: {ctor: '[]'}
							})),
					_1: {ctor: '[]'}
				}));
		var valNotFromProgram = function (val) {
			return A2(
				_elm_lang$core$List$all,
				function (_p166) {
					return !_user$project$FastParser$isProgramEId(
						_user$project$Lang$valEId(_p166));
				},
				_user$project$Provenance$valToSameVals(val));
		};
		var isFromOutsideProgram = (valNotFromProgram(xVal) || valNotFromProgram(yVal)) && valNotFromProgram(pairVal);
		var isDerivedFeature = (!_user$project$FastParser$isActualEId(
			_user$project$Lang$valEId(xVal))) || (!_user$project$FastParser$isActualEId(
			_user$project$Lang$valEId(yVal)));
		var perhapsFaded = (isFromOutsideProgram && (!isDerivedFeature)) ? {
			ctor: '::',
			_0: A2(_user$project$LangSvg$attr, 'opacity', '0.4'),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return _elm_lang$core$List$singleton(
			A2(
				_elm_lang$svg$Svg$g,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseLeave(
							A2(
								_user$project$InterfaceModel$Msg,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Remove Hovered Crosshair ',
									_elm_lang$core$Basics$toString(thisCrosshair)),
								function (model) {
									return _elm_lang$core$Native_Utils.update(
										model,
										{
											hoveredCrosshairs: A2(_elm_lang$core$Set$remove, thisCrosshair, model.hoveredCrosshairs),
											deuceState: _user$project$DeuceWidgets$emptyDeuceState
										});
								})),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onMouseEnter(
								A2(
									_user$project$InterfaceModel$Msg,
									'Hover Point',
									function (model) {
										var maybeHoveredEId = A2(
											_elm_lang$core$Maybe$andThen,
											_user$project$Utils$maybeUnwrap1,
											_elm_lang$core$List$head(
												A4(
													_user$project$Canvas$interpretationsForSelectedItem,
													model.inputExp,
													model.slate,
													model.widgets,
													A2(_user$project$Canvas$SelectedPoint, xSelectableFeature, ySelectableFeature))));
										return _elm_lang$core$Native_Utils.update(
											model,
											{
												deuceState: _elm_lang$core$Native_Utils.update(
													_user$project$DeuceWidgets$emptyDeuceState,
													{
														hoveredWidgets: A2(
															_elm_lang$core$List$map,
															_user$project$DeuceWidgets$DeuceExp,
															_user$project$Utils$maybeToList(maybeHoveredEId))
													})
											});
									})),
							_1: {ctor: '[]'}
						}
					},
					perhapsFaded),
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: backDisc,
						_1: {
							ctor: '::',
							_0: xLine,
							_1: {
								ctor: '::',
								_0: yLine,
								_1: {
									ctor: '::',
									_0: frontDisc,
									_1: {ctor: '[]'}
								}
							}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						perhapsPointPatWidget,
						A2(
							_elm_lang$core$Basics_ops['++'],
							perhapsXPatWidget,
							A2(
								_elm_lang$core$Basics_ops['++'],
								perhapsYPatWidget,
								A2(
									_elm_lang$core$Basics_ops['++'],
									perhapsDotHalo,
									{
										ctor: '::',
										_0: xyDot,
										_1: {ctor: '[]'}
									})))))));
	});
var _user$project$Canvas$buildSvgWidgets = F5(
	function (wCanvas, hCanvas, widgets, widgetBounds, model) {
		var maybeFocusedExp = A2(_user$project$FocusedEditingContext$maybeFocusedExp, model.editingContext, model.inputExp);
		var numWidgets = _elm_lang$core$List$length(widgets);
		var wCaption = _user$project$Config$params.mainSection.uiWidgets.wCaption;
		var hSlider = _user$project$Config$params.mainSection.uiWidgets.hSlider;
		var wSlider = _user$project$Config$params.mainSection.uiWidgets.wSlider;
		var pad = _user$project$Config$params.mainSection.uiWidgets.pad;
		var wWidget = (wSlider + wCaption) + (2 * pad);
		var hWidget = hSlider + (2 * pad);
		var wToolBoxMax = _elm_lang$core$Basics$toFloat(wCanvas - (2 * pad));
		var numCols = _elm_lang$core$Basics$floor(wToolBoxMax / wWidget);
		var numRows = _elm_lang$core$Basics$ceiling(
			_elm_lang$core$Basics$toFloat(numWidgets) / _elm_lang$core$Basics$toFloat(numCols));
		var hToolBox = numRows * hWidget;
		var wToolBox = numCols * wWidget;
		var xL = pad;
		var yBL = (hCanvas - hWidget) - pad;
		var drawNumWidget = F8(
			function (i_, widget, locId, cap_, minVal, maxVal, curVal, val) {
				var i = i_ - 1;
				var idAsShape = -2 - i_;
				var _p169 = {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Basics_ops['%'], i, numRows),
					_1: (i / numRows) | 0
				};
				var r = _p169._0;
				var c = _p169._1;
				var xi = xL + (c * wWidget);
				var xi_ = xi + pad;
				var yi = yBL - (r * hWidget);
				var yi_ = yi + pad;
				var region = A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$svg$Svg$rect,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'fill', 'lightgray'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'stroke', _user$project$Canvas$strOldInterfaceColor),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'stroke-width', '3px'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'rx', '9px'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'ry', '9px'),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'x',
												_elm_lang$core$Basics$toString(xL + (c * wWidget))),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$LangSvg$attr,
													'y',
													_elm_lang$core$Basics$toString(yBL - (r * hWidget))),
												_1: {
													ctor: '::',
													_0: A2(
														_user$project$LangSvg$attr,
														'width',
														_elm_lang$core$Basics$toString(wWidget)),
													_1: {
														ctor: '::',
														_0: A2(
															_user$project$LangSvg$attr,
															'height',
															_elm_lang$core$Basics$toString(hWidget)),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					});
				var box = function () {
					var selectableFeature = A2(
						_user$project$ShapeWidgets$ShapeFeature,
						idAsShape,
						_user$project$ShapeWidgets$OFeat(_user$project$ShapeWidgets$Quantity));
					var color = function () {
						var _p170 = model.tool;
						if (_p170.ctor === 'Cursor') {
							return A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures) ? _user$project$Draw$colorPointSelected : _user$project$Canvas$strOldInterfaceColor;
						} else {
							return _user$project$Canvas$strOldInterfaceColor;
						}
					}();
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$rect,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'fill', color),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'stroke', '20px'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'stroke-width', '20px'),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'x',
											_elm_lang$core$Basics$toString((xL + (c * wWidget)) + pad)),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'y',
												_elm_lang$core$Basics$toString((yBL - (r * hWidget)) + pad)),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$LangSvg$attr,
													'width',
													_elm_lang$core$Basics$toString(wSlider)),
												_1: {
													ctor: '::',
													_0: A2(
														_user$project$LangSvg$attr,
														'height',
														_elm_lang$core$Basics$toString(hSlider)),
													_1: {
														ctor: '::',
														_0: _user$project$Canvas$onMouseDownAndStop(
															_user$project$Canvas$toggleSelected(
																{
																	ctor: '::',
																	_0: selectableFeature,
																	_1: {ctor: '[]'}
																})),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						});
				}();
				var ball = function () {
					var _p171 = {ctor: '_Tuple2', _0: maxVal - minVal, _1: curVal - minVal};
					var range = _p171._0;
					var diff = _p171._1;
					var pct = diff / range;
					var cx = (xi + pad) + _elm_lang$core$Basics$round(pct * wSlider);
					var cy = (yi + pad) + ((hSlider / 2) | 0);
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$circle,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'stroke-width', '2px'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'fill', _user$project$Canvas$strOldButtonTopColor),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'r', _user$project$Config$params.mainSection.uiWidgets.rBall),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$LangSvg$attr,
													'cx',
													_elm_lang$core$Basics$toString(cx)),
												_1: {
													ctor: '::',
													_0: A2(
														_user$project$LangSvg$attr,
														'cy',
														_elm_lang$core$Basics$toString(cy)),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Canvas$cursorOfZone, _user$project$ShapeWidgets$ZSlider, 'default'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							},
							A3(_user$project$Canvas$dragZoneEvents, idAsShape, 'slider', _user$project$ShapeWidgets$ZSlider)));
				}();
				var text = function () {
					var cap = A2(
						_elm_lang$core$Basics_ops['++'],
						cap_,
						A2(
							_elm_lang$core$Basics_ops['++'],
							': ',
							A2(_user$project$ValUnparser$strNumTrunc, 5, curVal)));
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$svg$Svg$text_,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom$text(cap),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'fill', 'black'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$LangSvg$attr, 'font-family', _user$project$Config$params.mainSection.uiWidgets.font),
								_1: {
									ctor: '::',
									_0: A2(_user$project$LangSvg$attr, 'font-size', _user$project$Config$params.mainSection.uiWidgets.fontSize),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$LangSvg$attr,
											'x',
											_elm_lang$core$Basics$toString((xi_ + wSlider) + 10)),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$LangSvg$attr,
												'y',
												_elm_lang$core$Basics$toString(yi_ + 18)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						});
				}();
				return {
					ctor: '::',
					_0: region,
					_1: {
						ctor: '::',
						_0: box,
						_1: {
							ctor: '::',
							_0: text,
							_1: {
								ctor: '::',
								_0: ball,
								_1: {ctor: '[]'}
							}
						}
					}
				};
			});
		var drawPointWidget = F5(
			function (i_, widget, xVal, yVal, pairVal) {
				var idAsShape = -2 - i_;
				var extraAttrs = {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseEnter(
						_user$project$Canvas$addHoveredShape(idAsShape)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseLeave(
							_user$project$Canvas$removeHoveredShape(idAsShape)),
						_1: {ctor: '[]'}
					}
				};
				var getShapeInterp = function (_p172) {
					var _p173 = _p172;
					var ySelectableFeature = A2(
						_user$project$ShapeWidgets$ShapeFeature,
						idAsShape,
						_user$project$ShapeWidgets$YFeat(_user$project$ShapeWidgets$LonePoint));
					var xSelectableFeature = A2(
						_user$project$ShapeWidgets$ShapeFeature,
						idAsShape,
						_user$project$ShapeWidgets$XFeat(_user$project$ShapeWidgets$LonePoint));
					var _p174 = A7(
						_user$project$ShapeWidgets$selectionsProximalDistalEIdInterpretations_,
						model.inputExp,
						model.slate,
						model.widgets,
						{
							ctor: '::',
							_0: xSelectableFeature,
							_1: {
								ctor: '::',
								_0: ySelectableFeature,
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'},
						_elm_lang$core$Dict$empty,
						_elm_lang$core$Basics$always(true));
					var proximalInterps = _p174._0;
					return A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						_elm_lang$core$List$head(proximalInterps));
				};
				var emptyDeuceState = _user$project$DeuceWidgets$emptyDeuceState;
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onMouseEnter(
								_user$project$Canvas$addHoveredShape(idAsShape)),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onMouseLeave(
									_user$project$Canvas$removeHoveredShape(idAsShape)),
								_1: {ctor: '[]'}
							}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A6(
								_user$project$Canvas$zoneSelectCrossDot,
								model,
								true,
								{ctor: '_Tuple3', _0: idAsShape, _1: 'point', _2: _user$project$ShapeWidgets$LonePoint},
								xVal,
								yVal,
								pairVal),
							(!_elm_lang$core$Native_Utils.eq(model.tool, _user$project$InterfaceModel$Cursor)) ? {ctor: '[]'} : A7(
								_user$project$Canvas$zonePoint,
								model,
								true,
								idAsShape,
								'point',
								_user$project$ShapeWidgets$ZPoint(_user$project$ShapeWidgets$LonePoint),
								{ctor: '[]'},
								{
									ctor: '_Tuple2',
									_0: _user$project$Lang$valToNum(xVal),
									_1: _user$project$Lang$valToNum(yVal)
								}))),
					_1: {ctor: '[]'}
				};
			});
		var drawOffsetWidget1D = F9(
			function (i_, baseX, baseY, axis, sign, amount, amountVal, endXVal, endYVal) {
				var idAsShape = -2 - i_;
				var isSelected = A2(
					_elm_lang$core$List$member,
					A2(
						_user$project$ShapeWidgets$ShapeFeature,
						idAsShape,
						_user$project$ShapeWidgets$DFeat(_user$project$ShapeWidgets$Offset)),
					model.selectedFeatures);
				var shouldHighlight = isSelected || A2(_user$project$InterfaceModel$isShapeBeingDrawnSnappingToVal, model, amountVal);
				var isUnused = function () {
					var endValExp = function () {
						var _p175 = axis;
						if (_p175.ctor === 'X') {
							return _user$project$Lang$valExp(endXVal);
						} else {
							return _user$project$Lang$valExp(endYVal);
						}
					}();
					var _p176 = A2(_user$project$LangTools$findLetAndPatMatchingExpLoose, endValExp.val.eid, model.inputExp);
					if (_p176.ctor === 'Just') {
						return !A2(
							_elm_lang$core$Dict$member,
							_p176._0._1.val.pid,
							_user$project$LangTools$usedPIdsToVarEIds(_p176._0._0));
					} else {
						return false;
					}
				}();
				if (!((!_elm_lang$core$Native_Utils.eq(model.tool, _user$project$InterfaceModel$Cursor)) || (shouldHighlight || (A2(
					_elm_lang$core$List$any,
					function (_p177) {
						var _p178 = _p177;
						return A2(_elm_lang$core$Set$member, i_, _p178._1);
					},
					model.hoveredBoundsWidgets) || isUnused)))) {
					return {ctor: '[]'};
				} else {
					var dragStyle = _elm_lang$core$Native_Utils.eq(model.tool, _user$project$InterfaceModel$Cursor) ? A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(_user$project$LangSvg$attr, 'cursor', 'pointer'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onMouseEnter(
									_user$project$Canvas$addHoveredShape(idAsShape)),
								_1: {ctor: '[]'}
							}
						},
						A3(_user$project$Canvas$dragZoneEvents, idAsShape, 'offset', _user$project$ShapeWidgets$ZOffset1D)) : {
						ctor: '::',
						_0: A2(_user$project$LangSvg$attr, 'cursor', 'default'),
						_1: {ctor: '[]'}
					};
					var arrowParts = _user$project$Canvas$svgOffsetWidget1DArrowParts(model.inputExp)(model.renamingInOutput)(idAsShape)(
						{ctor: '_Tuple2', _0: baseX, _1: baseY})(axis)(sign)(amount)(amountVal)(shouldHighlight)(dragStyle);
					var endPt = A6(
						_user$project$Canvas$zoneSelectCrossDot,
						model,
						false,
						{ctor: '_Tuple3', _0: idAsShape, _1: 'offset', _2: _user$project$ShapeWidgets$EndPoint},
						endXVal,
						endYVal,
						_user$project$Canvas$dummyVal);
					return (!_elm_lang$core$Native_Utils.eq(amount, 0)) ? {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onMouseLeave(
									_user$project$Canvas$removeHoveredShape(idAsShape)),
								_1: {ctor: '[]'}
							},
							A2(_elm_lang$core$Basics_ops['++'], arrowParts, endPt)),
						_1: {ctor: '[]'}
					} : {ctor: '[]'};
				}
			});
		var drawCallWidget = F8(
			function (i_, maybeBounds, callEId, funcVal, argVals, retVal, retWs, model) {
				var program = model.inputExp;
				var isCurrentContext = function () {
					var _p179 = model.editingContext;
					if (((_p179.ctor === 'Just') && (_p179._0.ctor === '_Tuple2')) && (_p179._0._1.ctor === 'Just')) {
						return _elm_lang$core$Native_Utils.eq(_p179._0._1._0, callEId);
					} else {
						return false;
					}
				}();
				if (!(isCurrentContext || A2(
					_elm_lang$core$List$any,
					function (_p180) {
						var _p181 = _p180;
						return A2(_elm_lang$core$Set$member, i_, _p181._1);
					},
					model.hoveredBoundsWidgets))) {
					return {ctor: '[]'};
				} else {
					if ((!_elm_lang$core$Native_Utils.eq(model.mouseMode, _user$project$InterfaceModel$MouseNothing)) && (!isCurrentContext)) {
						return {ctor: '[]'};
					} else {
						var _p182 = function () {
							var _p183 = funcVal.v_;
							if (_p183.ctor === 'VClosure') {
								var _p189 = _p183._0;
								var _p188 = _p183._2;
								var _p187 = _p183._1;
								var _p184 = A2(_user$project$Lang$parentByEId, program, _p188.val.eid);
								if ((_p184.ctor === 'Just') && (_p184._0.ctor === 'Just')) {
									var _p186 = _p184._0._0;
									var _p185 = A2(_user$project$LangTools$findLetAndPatMatchingExpLoose, _p186.val.eid, program);
									if ((_p185.ctor === 'Just') && (_p185._0.ctor === '_Tuple2')) {
										return {
											ctor: '_Tuple5',
											_0: _p189,
											_1: _elm_lang$core$Maybe$Just(_p188),
											_2: _elm_lang$core$Maybe$Just(_p185._0._1),
											_3: _elm_lang$core$Maybe$Just(_p187),
											_4: _elm_lang$core$Maybe$Just(_p186)
										};
									} else {
										return {
											ctor: '_Tuple5',
											_0: _p189,
											_1: _elm_lang$core$Maybe$Just(_p188),
											_2: _elm_lang$core$Maybe$Nothing,
											_3: _elm_lang$core$Maybe$Just(_p187),
											_4: _elm_lang$core$Maybe$Just(_p186)
										};
									}
								} else {
									return {
										ctor: '_Tuple5',
										_0: _p189,
										_1: _elm_lang$core$Maybe$Just(_p188),
										_2: _elm_lang$core$Maybe$Nothing,
										_3: _elm_lang$core$Maybe$Just(_p187),
										_4: _elm_lang$core$Maybe$Nothing
									};
								}
							} else {
								return {ctor: '_Tuple5', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Maybe$Nothing, _2: _elm_lang$core$Maybe$Nothing, _3: _elm_lang$core$Maybe$Nothing, _4: _elm_lang$core$Maybe$Nothing};
							}
						}();
						var maybeRecName = _p182._0;
						var maybeFuncBody = _p182._1;
						var maybeFuncPat = _p182._2;
						var maybeArgPats = _p182._3;
						var maybeFuncExp = _p182._4;
						var _p190 = maybeBounds;
						if (_p190.ctor === 'Nothing') {
							return {ctor: '[]'};
						} else {
							var _p203 = _p190._0._2;
							var _p202 = _p190._0._0;
							var boxTop = _p190._0._1 + _user$project$ShapeWidgets$heightForWCallFuncName;
							var _p191 = function () {
								var _p192 = {ctor: '_Tuple2', _0: isCurrentContext, _1: maybeFuncExp};
								_v82_2:
								do {
									if (_p192.ctor === '_Tuple2') {
										if (_p192._0 === true) {
											return {
												ctor: '_Tuple2',
												_0: {
													ctor: '::',
													_0: A2(_user$project$LangSvg$attr, 'cursor', 'pointer'),
													_1: {
														ctor: '::',
														_0: _user$project$Canvas$onMouseDownAndStop(_user$project$InterfaceController$msgClearEditingContext),
														_1: {ctor: '[]'}
													}
												},
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$title,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg$text('Click to leave editing this function.'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											};
										} else {
											if (_p192._1.ctor === 'Just') {
												return {
													ctor: '_Tuple2',
													_0: {
														ctor: '::',
														_0: A2(_user$project$LangSvg$attr, 'cursor', 'pointer'),
														_1: {
															ctor: '::',
															_0: _user$project$Canvas$onMouseDownAndStop(
																A2(
																	_user$project$InterfaceController$msgSetEditingContext,
																	_p192._1._0.val.eid,
																	_elm_lang$core$Maybe$Just(callEId))),
															_1: {ctor: '[]'}
														}
													},
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$title,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg$text('Click to edit this function.'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												};
											} else {
												break _v82_2;
											}
										}
									} else {
										break _v82_2;
									}
								} while(false);
								return {
									ctor: '_Tuple2',
									_0: {ctor: '[]'},
									_1: {ctor: '[]'}
								};
							}();
							var perhapsSetContextEvent = _p191._0;
							var perhapsTitleAttribute = _p191._1;
							var box = A3(
								_elm_lang$core$Basics$flip,
								_elm_lang$svg$Svg$rect,
								perhapsTitleAttribute,
								A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'fill', 'none'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'stroke', 'black'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'stroke-width', '7px'),
												_1: {
													ctor: '::',
													_0: A2(
														_user$project$LangSvg$attr,
														'opacity',
														isCurrentContext ? '0.6' : '0.1'),
													_1: {
														ctor: '::',
														_0: A2(
															_user$project$LangSvg$attr,
															'rx',
															_elm_lang$core$Basics$toString(_user$project$ShapeWidgets$widgetBoundsPadding)),
														_1: {
															ctor: '::',
															_0: A2(
																_user$project$LangSvg$attr,
																'ry',
																_elm_lang$core$Basics$toString(_user$project$ShapeWidgets$widgetBoundsPadding)),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$LangSvg$attr,
																	'x',
																	_elm_lang$core$Basics$toString(_p202)),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_user$project$LangSvg$attr,
																		'y',
																		_elm_lang$core$Basics$toString(boxTop)),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_user$project$LangSvg$attr,
																			'width',
																			_elm_lang$core$Basics$toString(_p203 - _p202)),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_user$project$LangSvg$attr,
																				'height',
																				_elm_lang$core$Basics$toString(_p190._0._3 - boxTop)),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onMouseEnter(
																					A2(
																						_user$project$InterfaceModel$Msg,
																						'Hover Call Widget',
																						function (old) {
																							return _elm_lang$core$Native_Utils.update(
																								old,
																								{
																									deuceState: _elm_lang$core$Native_Utils.update(
																										_user$project$DeuceWidgets$emptyDeuceState,
																										{
																											hoveredWidgets: {
																												ctor: '::',
																												_0: _user$project$DeuceWidgets$DeuceExp(callEId),
																												_1: {ctor: '[]'}
																											}
																										})
																								});
																						})),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Events$onMouseLeave(
																						A2(
																							_user$project$InterfaceModel$Msg,
																							'Leave Call Widget',
																							function (old) {
																								return _elm_lang$core$Native_Utils.update(
																									old,
																									{deuceState: _user$project$DeuceWidgets$emptyDeuceState});
																							})),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									},
									perhapsSetContextEvent));
							var isRecursiveFunction = A2(
								_elm_lang$core$Maybe$withDefault,
								false,
								A3(
									_elm_lang$core$Maybe$map2,
									F2(
										function (recName, funcExp) {
											return A2(
												_elm_lang$core$Set$member,
												recName,
												_user$project$LangTools$freeIdentifiers(funcExp));
										}),
									maybeRecName,
									maybeFuncExp));
							var isRecursiveCallWidget = function (widget) {
								return (!_elm_lang$core$Native_Utils.eq(maybeFuncBody, _elm_lang$core$Maybe$Nothing)) && function () {
									var _p193 = widget;
									if (_p193.ctor === 'WCall') {
										return _elm_lang$core$Native_Utils.eq(
											A2(
												_elm_lang$core$Maybe$map,
												function (_p194) {
													return function (_) {
														return _.eid;
													}(
														function (_) {
															return _.val;
														}(_p194));
												},
												_user$project$Lang$valToMaybeFuncBodyExp(_p193._1)),
											A2(
												_elm_lang$core$Maybe$map,
												function (_p195) {
													return function (_) {
														return _.eid;
													}(
														function (_) {
															return _.val;
														}(_p195));
												},
												maybeFuncBody));
									} else {
										return false;
									}
								}();
							};
							var isRecursiveCase = isRecursiveFunction && (isCurrentContext && A2(_elm_lang$core$List$any, isRecursiveCallWidget, retWs));
							var isBaseCase = isRecursiveFunction && (isCurrentContext && (!A2(_elm_lang$core$List$any, isRecursiveCallWidget, retWs)));
							var maybeRecOrBaseCaseLabel = function () {
								var maybeLabel = (isCurrentContext && isRecursiveCase) ? _elm_lang$core$Maybe$Just('Recursive Case') : ((isCurrentContext && isBaseCase) ? _elm_lang$core$Maybe$Just('Base Case') : _elm_lang$core$Maybe$Nothing);
								return A2(
									_elm_lang$core$Maybe$map,
									function (label) {
										return A3(
											_elm_lang$core$Basics$flip,
											_elm_lang$svg$Svg$text_,
											{
												ctor: '::',
												_0: _elm_lang$virtual_dom$VirtualDom$text(label),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'fill', 'black'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$LangSvg$attr, 'font-family', _user$project$Config$params.mainSection.uiWidgets.font),
													_1: {
														ctor: '::',
														_0: A2(_user$project$LangSvg$attr, 'font-size', _user$project$Config$params.mainSection.uiWidgets.fontSize),
														_1: {
															ctor: '::',
															_0: A2(
																_user$project$LangSvg$attr,
																'x',
																_elm_lang$core$Basics$toString(_p203)),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$LangSvg$attr,
																	'y',
																	_elm_lang$core$Basics$toString(boxTop - 52)),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$LangSvg$attr, 'text-anchor', 'end'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$LangSvg$attr, 'opacity', '0.5'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											});
									},
									maybeLabel);
							}();
							var maybeTerminationCondition = function () {
								var _p197 = {
									ctor: '_Tuple4',
									_0: isCurrentContext,
									_1: isRecursiveFunction,
									_2: maybeRecName,
									_3: A2(
										_elm_lang$core$Maybe$map,
										function (_p196) {
											return function (_) {
												return _.e__;
											}(
												function (_) {
													return _.val;
												}(
													_user$project$Lang$expEffectiveExp(_p196)));
										},
										maybeFuncBody)
								};
								if ((((((_p197.ctor === '_Tuple4') && (_p197._0 === true)) && (_p197._1 === true)) && (_p197._2.ctor === 'Just')) && (_p197._3.ctor === 'Just')) && (_p197._3._0.ctor === 'EIf')) {
									var _p201 = _p197._3._0._1;
									var _p200 = _p197._2._0;
									var branch2IsBaseCase = !A2(
										_elm_lang$core$Set$member,
										_p200,
										_user$project$LangTools$freeIdentifiers(_p197._3._0._5));
									var branch1IsBaseCase = !A2(
										_elm_lang$core$Set$member,
										_p200,
										_user$project$LangTools$freeIdentifiers(_p197._3._0._3));
									var prefix = function () {
										var _p198 = {ctor: '_Tuple3', _0: isRecursiveCase, _1: branch1IsBaseCase, _2: branch2IsBaseCase};
										if (_p198._0 === true) {
											if (_p198._1 === true) {
												if (_p198._2 === true) {
													return '😕(True,  True,  True) ';
												} else {
													return 'not <| ';
												}
											} else {
												if (_p198._2 === true) {
													return '';
												} else {
													return '';
												}
											}
										} else {
											if (_p198._1 === true) {
												if (_p198._2 === true) {
													return '';
												} else {
													return '';
												}
											} else {
												if (_p198._2 === true) {
													return 'not <| ';
												} else {
													return '😕(False, False, False) ';
												}
											}
										}
									}();
									return _elm_lang$core$Maybe$Just(
										A6(
											_user$project$Canvas$expInOutput_,
											prefix,
											_p201,
											_p203,
											boxTop - 21,
											_user$project$Canvas$NoHoverPadding,
											{
												ctor: '::',
												_0: A2(_user$project$LangSvg$attr, 'text-anchor', 'end'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$LangSvg$attr, 'cursor', 'pointer'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$LangSvg$attr, 'class', 'text-hover-highlight'),
														_1: {
															ctor: '::',
															_0: _user$project$Canvas$onMouseDownAndStop(
																A2(
																	_user$project$InterfaceController$msgShowTerminationConditionOptions,
																	A2(
																		_elm_lang$core$Maybe$withDefault,
																		-19283641,
																		A2(
																			_elm_lang$core$Maybe$map,
																			function (_p199) {
																				return function (_) {
																					return _.eid;
																				}(
																					function (_) {
																						return _.val;
																					}(_p199));
																			},
																			maybeFuncExp)),
																	_p201.val.eid)),
															_1: {ctor: '[]'}
														}
													}
												}
											}));
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}();
							return _user$project$Utils$filterJusts(
								A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: _elm_lang$core$Maybe$Just(box),
										_1: {
											ctor: '::',
											_0: maybeRecOrBaseCaseLabel,
											_1: {
												ctor: '::',
												_0: maybeTerminationCondition,
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$core$Maybe$map,
														function (funcPat) {
															return A8(
																_user$project$Canvas$patInOutput,
																model.renamingInOutput,
																false,
																funcPat,
																{ctor: '[]'},
																{ctor: '[]'},
																_p202,
																boxTop - (isCurrentContext ? 20 : 0),
																_user$project$Canvas$NoHoverPadding);
														},
														maybeFuncPat),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(
											_elm_lang$core$List$map,
											_elm_lang$core$Maybe$Just,
											A2(
												_elm_lang$core$Maybe$withDefault,
												{ctor: '[]'},
												A2(
													_elm_lang$core$Maybe$map,
													function (argPats) {
														return A6(
															_user$project$Canvas$patsInOutput,
															model.renamingInOutput,
															true,
															A2(
																_elm_lang$core$List$map,
																function (argPat) {
																	return {
																		ctor: '_Tuple3',
																		_0: argPat,
																		_1: {ctor: '[]'},
																		_2: {ctor: '[]'}
																	};
																},
																argPats),
															_p202,
															boxTop,
															_user$project$Canvas$NoHoverPadding);
													},
													A2(
														_user$project$Utils$filterMaybe,
														_elm_lang$core$Basics$always(isCurrentContext),
														maybeArgPats)))),
										{ctor: '[]'})));
						}
					}
				}
			});
		var drawListWidget = F4(
			function (i_, maybeBounds, listVal, model) {
				var program = model.inputExp;
				var idAsShape = -2 - i_;
				var isCurrentContext = function () {
					var _p204 = maybeFocusedExp;
					if (_p204.ctor === 'Just') {
						return _elm_lang$core$Native_Utils.eq(
							_user$project$Lang$expEffectiveExp(_p204._0).val.eid,
							_user$project$Lang$valEId(listVal));
					} else {
						return false;
					}
				}();
				var isSelected = A2(_elm_lang$core$List$member, idAsShape, model.selectedShapes);
				if (!(isCurrentContext || (isSelected || A2(
					_elm_lang$core$List$any,
					function (_p205) {
						var _p206 = _p205;
						return A2(_elm_lang$core$Set$member, i_, _p206._1);
					},
					model.hoveredBoundsWidgets)))) {
					return {ctor: '[]'};
				} else {
					if ((!_elm_lang$core$Native_Utils.eq(model.mouseMode, _user$project$InterfaceModel$MouseNothing)) && (!isCurrentContext)) {
						return {ctor: '[]'};
					} else {
						var _p207 = maybeBounds;
						if (_p207.ctor === 'Nothing') {
							return {ctor: '[]'};
						} else {
							var _p209 = _p207._0._0;
							var boxTop = _p207._0._1 + _user$project$ShapeWidgets$heightForWListExp;
							var _p208 = isCurrentContext ? {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$svg$Svg$title,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg$text('Click to leave editing this definition.'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Canvas$onMouseDownAndStop(_user$project$InterfaceController$msgClearEditingContext),
									_1: {ctor: '[]'}
								}
							} : (isSelected ? {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$svg$Svg$title,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg$text('Click to deselect this list.'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Canvas$onMouseDownAndStop(
										_user$project$InterfaceController$msgDeselectList(idAsShape)),
									_1: {ctor: '[]'}
								}
							} : {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$svg$Svg$title,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg$text('Click to select this list.'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Canvas$onMouseDownAndStop(
										_user$project$InterfaceController$msgSelectList(idAsShape)),
									_1: {ctor: '[]'}
								}
							});
							var titleAttribute = _p208._0;
							var events = _p208._1;
							var deuceWidget = _user$project$DeuceWidgets$DeuceExp(
								_user$project$Lang$valExp(listVal).val.eid);
							var edgeHoverEvents = {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onMouseEnter(
									A2(
										_user$project$InterfaceModel$Msg,
										'Hover List Widget',
										function (old) {
											return _elm_lang$core$Native_Utils.update(
												old,
												{
													deuceState: _elm_lang$core$Native_Utils.update(
														_user$project$DeuceWidgets$emptyDeuceState,
														{
															hoveredWidgets: {
																ctor: '::',
																_0: deuceWidget,
																_1: {ctor: '[]'}
															}
														})
												});
										})),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onMouseLeave(
										A2(
											_user$project$InterfaceModel$Msg,
											'Leave List Widget',
											function (old) {
												return _elm_lang$core$Native_Utils.update(
													old,
													{deuceState: _user$project$DeuceWidgets$emptyDeuceState});
											})),
									_1: {ctor: '[]'}
								}
							};
							var box = A3(
								_elm_lang$core$Basics$flip,
								_elm_lang$svg$Svg$rect,
								{
									ctor: '::',
									_0: titleAttribute,
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: A2(_user$project$LangSvg$attr, 'fill', 'none'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$LangSvg$attr, 'cursor', 'pointer'),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$LangSvg$attr,
													'stroke',
													isSelected ? _user$project$Draw$colorPointSelected : 'black'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$LangSvg$attr, 'stroke-width', '6px'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$LangSvg$attr, 'stroke-dasharray', '10,1'),
														_1: {
															ctor: '::',
															_0: A2(
																_user$project$LangSvg$attr,
																'opacity',
																isCurrentContext ? '0.6' : (isSelected ? '1.0' : '0.15')),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$LangSvg$attr,
																	'rx',
																	_elm_lang$core$Basics$toString(_user$project$ShapeWidgets$widgetBoundsPadding)),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_user$project$LangSvg$attr,
																		'ry',
																		_elm_lang$core$Basics$toString(_user$project$ShapeWidgets$widgetBoundsPadding)),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_user$project$LangSvg$attr,
																			'x',
																			_elm_lang$core$Basics$toString(_p209)),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_user$project$LangSvg$attr,
																				'y',
																				_elm_lang$core$Basics$toString(boxTop)),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_user$project$LangSvg$attr,
																					'width',
																					_elm_lang$core$Basics$toString(_p207._0._2 - _p209)),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_user$project$LangSvg$attr,
																						'height',
																						_elm_lang$core$Basics$toString(_p207._0._3 - boxTop)),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									},
									events));
							var shouldShowLabel = isCurrentContext || (isSelected || (A2(_elm_lang$core$List$member, deuceWidget, model.deuceState.hoveredWidgets) || _elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(model.hoveredBoundsWidgets),
								1)));
							return {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									edgeHoverEvents,
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: box,
											_1: {ctor: '[]'}
										},
										A9(
											_user$project$Canvas$perhapsPatOrExpInOutput,
											program,
											model.slate,
											widgets,
											model.renamingInOutput,
											_user$project$Canvas$SelectedEIdOnly(
												_user$project$Lang$valExp(listVal).val.eid),
											_p209,
											boxTop,
											_user$project$Canvas$HoverPadding(3),
											shouldShowLabel))),
								_1: {ctor: '[]'}
							};
						}
					}
				}
			});
		var draw = function (_p210) {
			var _p211 = _p210;
			var _p216 = _p211._1._0;
			var _p215 = _p211._1._1;
			var _p214 = _p211._0;
			var _p212 = _p216;
			switch (_p212.ctor) {
				case 'WNumSlider':
					if (_p212._6 === true) {
						return {ctor: '[]'};
					} else {
						return A8(drawNumWidget, _p214, _p216, _p212._5._0, _p212._2, _p212._0, _p212._1, _p212._3, _p212._4);
					}
				case 'WIntSlider':
					if (_p212._6 === true) {
						return {ctor: '[]'};
					} else {
						var _p213 = {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Basics$toFloat(_p212._0),
							_1: _elm_lang$core$Basics$toFloat(_p212._1),
							_2: _elm_lang$core$Basics$toFloat(_p212._3)
						};
						var minVal = _p213._0;
						var maxVal = _p213._1;
						var curVal = _p213._2;
						return A8(drawNumWidget, _p214, _p216, _p212._5._0, _p212._2, minVal, maxVal, curVal, _p212._4);
					}
				case 'WPoint':
					return A5(drawPointWidget, _p214, _p216, _p212._1, _p212._3, _p212._4);
				case 'WOffset1D':
					return A9(drawOffsetWidget1D, _p214, _p212._0._0, _p212._1._0, _p212._2, _p212._3, _p212._4._0, _p212._5, _p212._6, _p212._7);
				case 'WCall':
					return A8(drawCallWidget, _p214, _p215, _p212._0, _p212._1, _p212._2, _p212._3, _p212._4, model);
				default:
					return A4(drawListWidget, _p214, _p215, _p212._0, model);
			}
		};
		var zOrder = function (widget) {
			var _p217 = widget;
			switch (_p217.ctor) {
				case 'WNumSlider':
					return 5;
				case 'WIntSlider':
					return 5;
				case 'WPoint':
					return 4;
				case 'WOffset1D':
					return 3;
				case 'WCall':
					return 2;
				default:
					return 1;
			}
		};
		return A2(
			_elm_lang$core$List$concatMap,
			draw,
			A2(
				_elm_lang$core$List$sortBy,
				function (_p218) {
					var _p219 = _p218;
					return {
						ctor: '_Tuple3',
						_0: zOrder(_p219._1._0),
						_1: 0 - A2(
							_elm_lang$core$Maybe$withDefault,
							0,
							A2(_elm_lang$core$Maybe$map, _user$project$ShapeWidgets$boundsArea, _p219._1._1)),
						_2: _p219._0
					};
				},
				_user$project$Utils$zipi1(
					A2(_user$project$Utils$zip, widgets, widgetBounds))));
	});
var _user$project$Canvas$maybeZoneSelectCrossDot = F6(
	function (sideLength, model, thisCrosshair, xVal, yVal, pairVal) {
		return (_elm_lang$core$Native_Utils.cmp(sideLength, _user$project$Canvas$minLengthForMiddleZones) < 0) ? {ctor: '[]'} : A6(_user$project$Canvas$zoneSelectCrossDot, model, false, thisCrosshair, xVal, yVal, pairVal);
	});
var _user$project$Canvas$zoneSelectDistance = F5(
	function (model, nodeId, shapeFeature, _p221, _p220) {
		var _p222 = _p221;
		var _p226 = _p222._1;
		var _p225 = _p222._0;
		var _p223 = _p220;
		var selectableFeature = A2(_user$project$ShapeWidgets$ShapeFeature, nodeId, shapeFeature);
		var shouldShow = A2(_elm_lang$core$Set$member, nodeId, model.hoveredShapes) || A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures);
		var perhapsLabelWidget = A9(
			_user$project$Canvas$perhapsPatOrExpInOutput,
			model.inputExp,
			model.slate,
			model.widgets,
			model.renamingInOutput,
			_user$project$Canvas$SelectedFeature(selectableFeature),
			_p225 - (_user$project$Utils$parseFloat(_user$project$Canvas$hairStrokeWidth) / 2),
			_p226 + 1,
			_user$project$Canvas$HoverPadding(3),
			shouldShow);
		var _p224 = {
			ctor: '_Tuple2',
			_0: model.mouseMode,
			_1: shouldShow || (!_elm_lang$core$List$isEmpty(perhapsLabelWidget))
		};
		_v95_2:
		do {
			if (_p224.ctor === '_Tuple2') {
				if (_p224._0.ctor === 'MouseDragZone') {
					return {ctor: '[]'};
				} else {
					if (_p224._1 === false) {
						return {ctor: '[]'};
					} else {
						break _v95_2;
					}
				}
			} else {
				break _v95_2;
			}
		} while(false);
		var color = A2(_elm_lang$core$List$member, selectableFeature, model.selectedFeatures) ? _user$project$Draw$colorLineSelected : _user$project$Draw$colorLineNotSelected;
		var line = _user$project$Canvas$svgLine(
			{
				ctor: '::',
				_0: A2(_user$project$LangSvg$attr, 'stroke', color),
				_1: {
					ctor: '::',
					_0: A2(_user$project$LangSvg$attr, 'stroke-width', _user$project$Canvas$hairStrokeWidth),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$LangSvg$attr,
							'x1',
							_elm_lang$core$Basics$toString(_p225)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$LangSvg$attr,
								'y1',
								_elm_lang$core$Basics$toString(_p226)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$LangSvg$attr,
									'x2',
									_elm_lang$core$Basics$toString(_p223._0)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$LangSvg$attr,
										'y2',
										_elm_lang$core$Basics$toString(_p223._1)),
									_1: {
										ctor: '::',
										_0: _user$project$Canvas$onMouseDownAndStop(
											_user$project$Canvas$toggleSelected(
												{
													ctor: '::',
													_0: selectableFeature,
													_1: {ctor: '[]'}
												})),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
		return A2(
			_elm_lang$core$Basics_ops['++'],
			perhapsLabelWidget,
			{
				ctor: '::',
				_0: line,
				_1: {ctor: '[]'}
			});
	});
var _user$project$Canvas$perhapsZoneSelectDistance = F6(
	function (sideLength, model, nodeId, shapeFeature, pt1, pt2) {
		return (_elm_lang$core$Native_Utils.cmp(sideLength, _user$project$Canvas$minLengthForMiddleZones) < 0) ? {ctor: '[]'} : A5(_user$project$Canvas$zoneSelectDistance, model, nodeId, shapeFeature, pt1, pt2);
	});
var _user$project$Canvas$boxySelectZones = F4(
	function (model, id, kind, boxyNums) {
		var drawPoint = F4(
			function (maybeThreshold, feature, x, y) {
				var _p227 = maybeThreshold;
				if (_p227.ctor === 'Just') {
					return A6(
						_user$project$Canvas$maybeZoneSelectCrossDot,
						_p227._0,
						model,
						{ctor: '_Tuple3', _0: id, _1: kind, _2: feature},
						x,
						y,
						_user$project$Canvas$dummyVal);
				} else {
					return A6(
						_user$project$Canvas$zoneSelectCrossDot,
						model,
						false,
						{ctor: '_Tuple3', _0: id, _1: kind, _2: feature},
						x,
						y,
						_user$project$Canvas$dummyVal);
				}
			});
		var drawDistance = F4(
			function (threshold, feature, _p229, _p228) {
				var _p230 = _p229;
				var _p231 = _p228;
				return A6(
					_user$project$Canvas$perhapsZoneSelectDistance,
					threshold,
					model,
					id,
					feature,
					{
						ctor: '_Tuple2',
						_0: _user$project$Lang$valToNum(_p230._0),
						_1: _user$project$Lang$valToNum(_p230._1)
					},
					{
						ctor: '_Tuple2',
						_0: _user$project$Lang$valToNum(_p231._0),
						_1: _user$project$Lang$valToNum(_p231._1)
					});
			});
		var _p232 = boxyNums;
		var left = _p232.left;
		var top = _p232.top;
		var right = _p232.right;
		var bot = _p232.bot;
		var cx = _p232.cx;
		var cy = _p232.cy;
		var width = _p232.width;
		var height = _p232.height;
		var _p233 = {
			ctor: '_Tuple2',
			_0: _user$project$Lang$valToNum(width),
			_1: _user$project$Lang$valToNum(height)
		};
		var widthNum = _p233._0;
		var heightNum = _p233._1;
		var distanceSelect = function (f) {
			var _p234 = f;
			_v99_5:
			do {
				if (_p234.ctor === 'DistanceFeature') {
					switch (_p234._0.ctor) {
						case 'Width':
							return A4(
								drawDistance,
								heightNum,
								_user$project$ShapeWidgets$DFeat(_user$project$ShapeWidgets$Width),
								{ctor: '_Tuple2', _0: left, _1: cy},
								{ctor: '_Tuple2', _0: right, _1: cy});
						case 'Height':
							return A4(
								drawDistance,
								widthNum,
								_user$project$ShapeWidgets$DFeat(_user$project$ShapeWidgets$Height),
								{ctor: '_Tuple2', _0: cx, _1: top},
								{ctor: '_Tuple2', _0: cx, _1: bot});
						case 'Radius':
							return A4(
								drawDistance,
								widthNum,
								_user$project$ShapeWidgets$DFeat(_user$project$ShapeWidgets$Radius),
								{ctor: '_Tuple2', _0: cx, _1: cy},
								{ctor: '_Tuple2', _0: right, _1: cy});
						case 'RadiusX':
							return A4(
								drawDistance,
								heightNum,
								_user$project$ShapeWidgets$DFeat(_user$project$ShapeWidgets$RadiusX),
								{ctor: '_Tuple2', _0: cx, _1: cy},
								{ctor: '_Tuple2', _0: right, _1: cy});
						case 'RadiusY':
							return A4(
								drawDistance,
								widthNum,
								_user$project$ShapeWidgets$DFeat(_user$project$ShapeWidgets$RadiusY),
								{ctor: '_Tuple2', _0: cx, _1: top},
								{ctor: '_Tuple2', _0: cx, _1: cy});
						default:
							break _v99_5;
					}
				} else {
					break _v99_5;
				}
			} while(false);
			return {ctor: '[]'};
		};
		var pointSelect = function (f) {
			var _p235 = f;
			_v100_9:
			do {
				if (_p235.ctor === 'PointFeature') {
					switch (_p235._0.ctor) {
						case 'TopLeft':
							return A4(drawPoint, _elm_lang$core$Maybe$Nothing, _user$project$ShapeWidgets$TopLeft, left, top);
						case 'TopRight':
							return A4(drawPoint, _elm_lang$core$Maybe$Nothing, _user$project$ShapeWidgets$TopRight, right, top);
						case 'BotLeft':
							return A4(drawPoint, _elm_lang$core$Maybe$Nothing, _user$project$ShapeWidgets$BotLeft, left, bot);
						case 'BotRight':
							return A4(drawPoint, _elm_lang$core$Maybe$Nothing, _user$project$ShapeWidgets$BotRight, right, bot);
						case 'TopEdge':
							return A4(
								drawPoint,
								_elm_lang$core$Maybe$Just(widthNum),
								_user$project$ShapeWidgets$TopEdge,
								cx,
								top);
						case 'BotEdge':
							return A4(
								drawPoint,
								_elm_lang$core$Maybe$Just(widthNum),
								_user$project$ShapeWidgets$BotEdge,
								cx,
								bot);
						case 'LeftEdge':
							return A4(
								drawPoint,
								_elm_lang$core$Maybe$Just(heightNum),
								_user$project$ShapeWidgets$LeftEdge,
								left,
								cy);
						case 'RightEdge':
							return A4(
								drawPoint,
								_elm_lang$core$Maybe$Just(heightNum),
								_user$project$ShapeWidgets$RightEdge,
								right,
								cy);
						case 'Center':
							return A4(
								drawPoint,
								_elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics$min, widthNum, heightNum)),
								_user$project$ShapeWidgets$Center,
								cx,
								cy);
						default:
							break _v100_9;
					}
				} else {
					break _v100_9;
				}
			} while(false);
			return {ctor: '[]'};
		};
		var features = A3(_user$project$Utils$find, 'boxySelectZones error', _user$project$ShapeWidgets$simpleKindGenericFeatures, kind);
		var featuresHeightBeforeWidth = function () {
			var _p236 = A2(
				_user$project$Utils$findi,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(
					_user$project$ShapeWidgets$DistanceFeature(_user$project$ShapeWidgets$Width)),
				features);
			if (_p236.ctor === 'Just') {
				var _p237 = _p236._0;
				return A3(
					_user$project$Utils$inserti,
					_p237 + 1,
					_user$project$ShapeWidgets$DistanceFeature(_user$project$ShapeWidgets$Width),
					A2(_user$project$Utils$removei, _p237, features));
			} else {
				return features;
			}
		}();
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$List$concatMap, distanceSelect, featuresHeightBeforeWidth),
			A2(_elm_lang$core$List$concatMap, pointSelect, features));
	});
var _user$project$Canvas$SelectedShape = function (a) {
	return {ctor: 'SelectedShape', _0: a};
};
var _user$project$Canvas$perhapsLabelWidgetForShape = F4(
	function (model, nodeId, x, y) {
		var _p238 = model.mouseMode;
		if (_p238.ctor === 'MouseDragZone') {
			return {ctor: '[]'};
		} else {
			var shouldShow = A2(_elm_lang$core$Set$member, nodeId, model.hoveredShapes) || A2(_elm_lang$core$List$member, nodeId, model.selectedShapes);
			return A9(
				_user$project$Canvas$perhapsPatOrExpInOutput,
				model.inputExp,
				model.slate,
				model.widgets,
				model.renamingInOutput,
				_user$project$Canvas$SelectedShape(nodeId),
				x,
				y,
				_user$project$Canvas$HoverPadding(3),
				shouldShow);
		}
	});
var _user$project$Canvas$makeZonesLine = F3(
	function (model, id, l) {
		var transform = _user$project$Canvas$maybeTransformAttr(l);
		var _p239 = _user$project$ShapeWidgets$evaluateLineFeatures(l);
		var x1 = _p239._0;
		var y1 = _p239._1;
		var x2 = _p239._2;
		var y2 = _p239._3;
		var cx = _p239._4;
		var cy = _p239._5;
		var _p240 = {
			ctor: '_Tuple2',
			_0: {
				ctor: '_Tuple2',
				_0: _user$project$Lang$valToNum(x1),
				_1: _user$project$Lang$valToNum(y1)
			},
			_1: {
				ctor: '_Tuple2',
				_0: _user$project$Lang$valToNum(x2),
				_1: _user$project$Lang$valToNum(y2)
			}
		};
		var pt1 = _p240._0;
		var pt2 = _p240._1;
		var _p241 = A2(
			_user$project$Lang$minMax,
			_user$project$Lang$valToNum(x1),
			_user$project$Lang$valToNum(x2));
		var xMin = _p241._0;
		var xMax = _p241._1;
		var _p242 = A2(
			_user$project$Lang$minMax,
			_user$project$Lang$valToNum(y1),
			_user$project$Lang$valToNum(y2));
		var yMin = _p242._0;
		var yMax = _p242._1;
		var bounds = {ctor: '_Tuple4', _0: xMin, _1: yMin, _2: xMax, _3: yMax};
		var zLine = function () {
			var enter = {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onMouseEnter(
					_user$project$Canvas$addHoveredShape(id)),
				_1: {ctor: '[]'}
			};
			return A7(
				_user$project$Canvas$zoneLine2,
				model,
				id,
				'line',
				_user$project$ShapeWidgets$ZLineEdge,
				pt1,
				pt2,
				A2(_elm_lang$core$Basics_ops['++'], transform, enter));
		}();
		var zonesSelect = _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: A6(
					_user$project$Canvas$maybeZoneSelectCrossDot,
					A2(_user$project$Utils$distance, pt1, pt2),
					model,
					{ctor: '_Tuple3', _0: id, _1: 'line', _2: _user$project$ShapeWidgets$Center},
					cx,
					cy,
					_user$project$Canvas$dummyVal),
				_1: {
					ctor: '::',
					_0: A6(
						_user$project$Canvas$zoneSelectCrossDot,
						model,
						false,
						{
							ctor: '_Tuple3',
							_0: id,
							_1: 'line',
							_2: _user$project$ShapeWidgets$Point(1)
						},
						x1,
						y1,
						_user$project$Canvas$dummyVal),
					_1: {
						ctor: '::',
						_0: A6(
							_user$project$Canvas$zoneSelectCrossDot,
							model,
							false,
							{
								ctor: '_Tuple3',
								_0: id,
								_1: 'line',
								_2: _user$project$ShapeWidgets$Point(2)
							},
							x2,
							y2,
							_user$project$Canvas$dummyVal),
						_1: {ctor: '[]'}
					}
				}
			});
		var primaryWidgets = A4(
			_user$project$Canvas$groupWithInvisibleBoxForRemovingHoveredShape,
			model,
			id,
			bounds,
			A2(
				_elm_lang$core$Basics_ops['++'],
				A4(_user$project$Canvas$perhapsLabelWidgetForShape, model, id, xMin, yMin),
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: zLine,
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						zonesSelect,
						A5(
							_user$project$Canvas$zonePoints2,
							model,
							id,
							'line',
							transform,
							{
								ctor: '::',
								_0: pt1,
								_1: {
									ctor: '::',
									_0: pt2,
									_1: {ctor: '[]'}
								}
							})))));
		var extraWidgets = function () {
			var c = A2(_user$project$Utils$midpoint, pt1, pt2);
			var r = (A2(_user$project$Utils$distance, pt1, pt2) / 2) - _user$project$Canvas$rotZoneDelta;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				A6(
					_user$project$Canvas$zoneRotate,
					model,
					id,
					'line',
					{
						ctor: '_Tuple2',
						_0: _user$project$Lang$valToNum(cx),
						_1: _user$project$Lang$valToNum(cy)
					},
					r,
					_user$project$Canvas$maybeTransformCmds(l)),
				A6(
					_user$project$Canvas$zonesStroke,
					model,
					id,
					'line',
					_user$project$Lang$valToNum(x2),
					_user$project$Lang$valToNum(y2),
					l));
		}();
		return {ctor: '::', _0: primaryWidgets, _1: extraWidgets};
	});
var _user$project$Canvas$makeZonesRectOrBox = F4(
	function (model, id, shape, l) {
		var boxyNumVals = A2(_user$project$ShapeWidgets$evaluateBoxyNums, shape, l);
		var _p243 = _user$project$Canvas$boxyNumValsToNums(boxyNumVals);
		var left = _p243.left;
		var top = _p243.top;
		var right = _p243.right;
		var bot = _p243.bot;
		var cx = _p243.cx;
		var cy = _p243.cy;
		var width = _p243.width;
		var height = _p243.height;
		var bounds = {ctor: '_Tuple4', _0: left, _1: top, _2: right, _3: bot};
		var transform = _user$project$Canvas$maybeTransformAttr(l);
		var zoneInterior = A7(
			_user$project$Canvas$draggableZone,
			_elm_lang$svg$Svg$rect,
			false,
			model,
			id,
			shape,
			_user$project$ShapeWidgets$ZInterior,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$Canvas$attrNum, 'x', left),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Canvas$attrNum, 'y', top),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Canvas$attrNum, 'width', width),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Canvas$attrNum, 'height', height),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onMouseEnter(
										_user$project$Canvas$addHoveredShape(id)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				transform));
		var zonesSelect = A4(_user$project$Canvas$boxySelectZones, model, id, shape, boxyNumVals);
		var primaryWidgets = A4(
			_user$project$Canvas$groupWithInvisibleBoxForRemovingHoveredShape,
			model,
			id,
			bounds,
			A2(
				_elm_lang$core$Basics_ops['++'],
				A4(_user$project$Canvas$perhapsLabelWidgetForShape, model, id, left, top),
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: zoneInterior,
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						zonesSelect,
						A5(_user$project$Canvas$eightCardinalZones, model, id, shape, transform, bounds)))));
		var extraWidgets = function () {
			var r = _user$project$Canvas$rotZoneDelta + (height / 2);
			return A2(
				_elm_lang$core$Basics_ops['++'],
				A6(
					_user$project$Canvas$zoneRotate,
					model,
					id,
					shape,
					{ctor: '_Tuple2', _0: cx, _1: cy},
					r,
					_user$project$Canvas$maybeTransformCmds(l)),
				A6(_user$project$Canvas$zonesFillAndStroke, model, id, shape, left, top, l));
		}();
		return {ctor: '::', _0: primaryWidgets, _1: extraWidgets};
	});
var _user$project$Canvas$makeZonesCircle = F3(
	function (model, id, l) {
		var boxyNumVals = A2(_user$project$ShapeWidgets$evaluateBoxyNums, 'circle', l);
		var _p244 = _user$project$Canvas$boxyNumValsToNums(boxyNumVals);
		var left = _p244.left;
		var top = _p244.top;
		var right = _p244.right;
		var bot = _p244.bot;
		var cx = _p244.cx;
		var cy = _p244.cy;
		var r = _p244.r;
		var bounds = {ctor: '_Tuple4', _0: left, _1: top, _2: right, _3: bot};
		var transform = _user$project$Canvas$maybeTransformAttr(l);
		var zoneInterior = A7(
			_user$project$Canvas$draggableZone,
			_elm_lang$svg$Svg$circle,
			false,
			model,
			id,
			'circle',
			_user$project$ShapeWidgets$ZInterior,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$Canvas$attrNum, 'cx', cx),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Canvas$attrNum, 'cy', cy),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Canvas$attrNum, 'r', r),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onMouseEnter(
									_user$project$Canvas$addHoveredShape(id)),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				transform));
		var zonesSelect = A4(_user$project$Canvas$boxySelectZones, model, id, 'circle', boxyNumVals);
		var primaryWidgets = A4(
			_user$project$Canvas$groupWithInvisibleBoxForRemovingHoveredShape,
			model,
			id,
			bounds,
			A2(
				_elm_lang$core$Basics_ops['++'],
				A4(_user$project$Canvas$perhapsLabelWidgetForShape, model, id, left, top),
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: zoneInterior,
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						zonesSelect,
						A5(_user$project$Canvas$eightCardinalZones, model, id, 'circle', transform, bounds)))));
		var extraWidgets = A2(
			_elm_lang$core$Basics_ops['++'],
			A6(
				_user$project$Canvas$zoneRotate,
				model,
				id,
				'circle',
				{ctor: '_Tuple2', _0: cx, _1: cy},
				r + _user$project$Canvas$rotZoneDelta,
				_user$project$Canvas$maybeTransformCmds(l)),
			A6(_user$project$Canvas$zonesFillAndStroke, model, id, 'circle', cx - r, cy - r, l));
		return {ctor: '::', _0: primaryWidgets, _1: extraWidgets};
	});
var _user$project$Canvas$makeZonesEllipseOrOval = F4(
	function (model, id, shape, l) {
		var boxyNumVals = A2(_user$project$ShapeWidgets$evaluateBoxyNums, shape, l);
		var _p245 = _user$project$Canvas$boxyNumValsToNums(boxyNumVals);
		var left = _p245.left;
		var top = _p245.top;
		var right = _p245.right;
		var bot = _p245.bot;
		var width = _p245.width;
		var height = _p245.height;
		var cx = _p245.cx;
		var cy = _p245.cy;
		var rx = _p245.rx;
		var ry = _p245.ry;
		var bounds = {ctor: '_Tuple4', _0: left, _1: top, _2: right, _3: bot};
		var transform = _user$project$Canvas$maybeTransformAttr(l);
		var zoneInterior = A7(
			_user$project$Canvas$draggableZone,
			_elm_lang$svg$Svg$ellipse,
			false,
			model,
			id,
			shape,
			_user$project$ShapeWidgets$ZInterior,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$Canvas$attrNum, 'cx', cx),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Canvas$attrNum, 'cy', cy),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Canvas$attrNum, 'rx', rx),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Canvas$attrNum, 'ry', ry),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onMouseEnter(
										_user$project$Canvas$addHoveredShape(id)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				transform));
		var zonesSelect = A4(_user$project$Canvas$boxySelectZones, model, id, shape, boxyNumVals);
		var primaryWidgets = A4(
			_user$project$Canvas$groupWithInvisibleBoxForRemovingHoveredShape,
			model,
			id,
			bounds,
			A2(
				_elm_lang$core$Basics_ops['++'],
				A4(_user$project$Canvas$perhapsLabelWidgetForShape, model, id, left, top),
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: zoneInterior,
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						zonesSelect,
						A5(_user$project$Canvas$eightCardinalZones, model, id, shape, transform, bounds)))));
		var extraWidgets = A2(
			_elm_lang$core$Basics_ops['++'],
			A6(
				_user$project$Canvas$zoneRotate,
				model,
				id,
				shape,
				{ctor: '_Tuple2', _0: cx, _1: cy},
				ry + _user$project$Canvas$rotZoneDelta,
				_user$project$Canvas$maybeTransformCmds(l)),
			A6(_user$project$Canvas$zonesFillAndStroke, model, id, shape, left, top, l));
		return {ctor: '::', _0: primaryWidgets, _1: extraWidgets};
	});
var _user$project$Canvas$makeZonesPoly = F4(
	function (model, shape, id, l) {
		var _p246 = A2(
			_user$project$Utils$assert,
			'makeZonesPoly',
			_elm_lang$core$Native_Utils.eq(shape, 'polygon') || _elm_lang$core$Native_Utils.eq(shape, 'polyline'));
		var transform = _user$project$Canvas$maybeTransformAttr(l);
		var pts = _user$project$LangSvg$getPolyPoints(l);
		var zInterior = A7(
			_user$project$Canvas$draggableZone,
			_elm_lang$svg$Svg$polygon,
			false,
			model,
			id,
			shape,
			_user$project$ShapeWidgets$ZInterior,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_user$project$LangSvg$compileAttr,
						'points',
						_user$project$LangSvg$aPoints(pts)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseEnter(
							_user$project$Canvas$addHoveredShape(id)),
						_1: {ctor: '[]'}
					}
				},
				transform));
		var zRot = A5(_user$project$Canvas$zoneRotatePolyOrPath, model, id, 'polygon', pts, l);
		var zFillAndStroke = function () {
			var _p247 = pts;
			if ((((_p247.ctor === '::') && (_p247._0.ctor === '_Tuple2')) && (_p247._0._0.ctor === '_Tuple2')) && (_p247._0._1.ctor === '_Tuple2')) {
				return A6(_user$project$Canvas$zonesFillAndStroke, model, id, shape, _p247._0._0._0, _p247._0._1._0, l);
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'Canvas',
					{
						start: {line: 2230, column: 5},
						end: {line: 2234, column: 36}
					},
					_p247)('makeZonesPoly');
			}
		}();
		var perhapsPointAndEdgeZones = function () {
			if (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$length(pts),
				50) > 0) {
				return {ctor: '[]'};
			} else {
				var ptVals = function () {
					var _p249 = A2(_user$project$Utils$maybeFind, 'points', l);
					if (_p249.ctor === 'Just') {
						return A2(_user$project$Lang$vListToVals, 'makeZonesPoly ptVals', _p249._0.val);
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'Canvas',
							{
								start: {line: 2243, column: 9},
								end: {line: 2245, column: 58}
							},
							_p249)('makeZonesPoly ptVals');
					}
				}();
				var zPts = A5(_user$project$Canvas$zonePoints, model, id, shape, transform, pts);
				var zLines = function () {
					var pairs = A2(
						_user$project$Utils$overlappingAdjacentPairs_,
						_elm_lang$core$Native_Utils.eq(shape, 'polygon'),
						pts);
					var f = function (_p251) {
						var _p252 = _p251;
						return A7(
							_user$project$Canvas$zoneLine2,
							model,
							id,
							shape,
							_user$project$ShapeWidgets$ZPolyEdge(_p252._0),
							{ctor: '_Tuple2', _0: _p252._1._0._0._0, _1: _p252._1._0._1._0},
							{ctor: '_Tuple2', _0: _p252._1._1._0._0, _1: _p252._1._1._1._0},
							transform);
					};
					return A2(_user$project$Utils$mapi1, f, pairs);
				}();
				var zSelect = function () {
					var midptCrossDot = function (i1) {
						var midXVal = _user$project$ShapeWidgets$evaluateFeatureEquation_(
							A3(
								_user$project$ShapeWidgets$shapeFeatureEquation,
								_user$project$ShapeWidgets$XFeat(
									_user$project$ShapeWidgets$Midpoint(i1)),
								shape,
								l));
						var midYVal = _user$project$ShapeWidgets$evaluateFeatureEquation_(
							A3(
								_user$project$ShapeWidgets$shapeFeatureEquation,
								_user$project$ShapeWidgets$YFeat(
									_user$project$ShapeWidgets$Midpoint(i1)),
								shape,
								l));
						return A6(
							_user$project$Canvas$zoneSelectCrossDot,
							model,
							false,
							{
								ctor: '_Tuple3',
								_0: id,
								_1: shape,
								_2: _user$project$ShapeWidgets$Midpoint(i1)
							},
							midXVal,
							midYVal,
							_user$project$Canvas$dummyVal);
					};
					var ptCrossDot = function (_p253) {
						var _p254 = _p253;
						var _p256 = _p254._1;
						var _p255 = A2(
							_user$project$Utils$fromJust_,
							'makeZonesPoly ptCrossDot',
							_user$project$Lang$valToMaybeXYVals(_p256));
						var xVal = _p255._0;
						var yVal = _p255._1;
						return A6(
							_user$project$Canvas$zoneSelectCrossDot,
							model,
							false,
							{
								ctor: '_Tuple3',
								_0: id,
								_1: shape,
								_2: _user$project$ShapeWidgets$Point(_p254._0)
							},
							xVal,
							yVal,
							_p256);
					};
					var midptCrossDots = function () {
						var ptsI = _user$project$Utils$zipi1(ptVals);
						return A2(
							_elm_lang$core$List$concatMap,
							midptCrossDot,
							A2(
								_elm_lang$core$List$range,
								1,
								_elm_lang$core$List$length(ptVals)));
					}();
					var crossDots = _elm_lang$core$List$concat(
						A2(_user$project$Utils$mapi1, ptCrossDot, ptVals));
					return A2(_elm_lang$core$Basics_ops['++'], midptCrossDots, crossDots);
				}();
				return A2(
					_elm_lang$core$Basics_ops['++'],
					zLines,
					A2(_elm_lang$core$Basics_ops['++'], zSelect, zPts));
			}
		}();
		var primaryWidgets = function () {
			var _p257 = _user$project$Draw$boundingBoxOfPoints_(
				A2(
					_elm_lang$core$List$map,
					function (_p258) {
						var _p259 = _p258;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Tuple$first(_p259._0),
							_1: _elm_lang$core$Tuple$first(_p259._1)
						};
					},
					pts));
			var x1 = _p257._0;
			var x2 = _p257._1;
			var y1 = _p257._2;
			var y2 = _p257._3;
			return A4(
				_user$project$Canvas$groupWithInvisibleBoxForRemovingHoveredShape,
				model,
				id,
				{ctor: '_Tuple4', _0: x1, _1: y1, _2: x2, _3: y2},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A4(_user$project$Canvas$perhapsLabelWidgetForShape, model, id, x1, y1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: zInterior,
							_1: {ctor: '[]'}
						},
						perhapsPointAndEdgeZones)));
		}();
		return {
			ctor: '::',
			_0: primaryWidgets,
			_1: A2(_elm_lang$core$Basics_ops['++'], zRot, zFillAndStroke)
		};
	});
var _user$project$Canvas$makeZonesPath = F4(
	function (model, shape, id, nodeAttrs) {
		var _p260 = A2(
			_user$project$Utils$assert,
			'makeZonesPoly',
			_elm_lang$core$Native_Utils.eq(shape, 'path'));
		var transform = _user$project$Canvas$maybeTransformAttr(nodeAttrs);
		var cmds = _elm_lang$core$Tuple$first(
			_user$project$LangSvg$toPath(
				A2(_user$project$Utils$find_, nodeAttrs, 'd')));
		var add = F2(
			function (_p261, acc) {
				var _p262 = _p261;
				var _p264 = _p262._0;
				var _p263 = _p264;
				if (_p263.ctor === 'Nothing') {
					return acc;
				} else {
					return {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p264, _1: _p262._1},
						_1: acc
					};
				}
			});
		var listOfMaybeIndexWithPt = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (c, acc) {
					var _p265 = c;
					switch (_p265.ctor) {
						case 'CmdZ':
							return acc;
						case 'CmdMLT':
							return A2(add, _p265._1, acc);
						case 'CmdHV':
							return acc;
						case 'CmdC':
							return A2(
								add,
								_p265._1,
								A2(
									add,
									_p265._2,
									A2(add, _p265._3, acc)));
						case 'CmdSQ':
							return A2(
								add,
								_p265._1,
								A2(add, _p265._2, acc));
						default:
							return A2(add, _p265._6, acc);
					}
				}),
			{ctor: '[]'},
			cmds);
		var pts = A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, listOfMaybeIndexWithPt);
		var dots = A5(_user$project$Canvas$zonePoints, model, id, shape, transform, pts);
		var zRot = A5(_user$project$Canvas$zoneRotatePolyOrPath, model, id, 'path', pts, nodeAttrs);
		var zFillAndStroke = function () {
			var _p266 = pts;
			if ((((_p266.ctor === '::') && (_p266._0.ctor === '_Tuple2')) && (_p266._0._0.ctor === '_Tuple2')) && (_p266._0._1.ctor === '_Tuple2')) {
				return A6(_user$project$Canvas$zonesFillAndStroke, model, id, shape, _p266._0._0._0, _p266._0._1._0, nodeAttrs);
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'Canvas',
					{
						start: {line: 2302, column: 5},
						end: {line: 2306, column: 36}
					},
					_p266)('makeZonesPath');
			}
		}();
		var zInterior = A7(
			_user$project$Canvas$draggableZone,
			_elm_lang$svg$Svg$path,
			false,
			model,
			id,
			shape,
			_user$project$ShapeWidgets$ZInterior,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_user$project$LangSvg$compileAttr,
						'd',
						A2(_user$project$Utils$find_, nodeAttrs, 'd')),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseEnter(
							_user$project$Canvas$addHoveredShape(id)),
						_1: {ctor: '[]'}
					}
				},
				transform));
		var primaryWidgets = function () {
			var _p268 = _user$project$Draw$boundingBoxOfPoints_(
				A2(
					_elm_lang$core$List$map,
					function (_p269) {
						var _p270 = _p269;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Tuple$first(_p270._0),
							_1: _elm_lang$core$Tuple$first(_p270._1)
						};
					},
					pts));
			var x1 = _p268._0;
			var x2 = _p268._1;
			var y1 = _p268._2;
			var y2 = _p268._3;
			return A4(
				_user$project$Canvas$groupWithInvisibleBoxForRemovingHoveredShape,
				model,
				id,
				{ctor: '_Tuple4', _0: x1, _1: y1, _2: x2, _3: y2},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A4(_user$project$Canvas$perhapsLabelWidgetForShape, model, id, x1, y1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: zInterior,
							_1: {ctor: '[]'}
						},
						dots)));
		}();
		return {
			ctor: '::',
			_0: primaryWidgets,
			_1: A2(_elm_lang$core$Basics_ops['++'], zRot, zFillAndStroke)
		};
	});
var _user$project$Canvas$makeZones = F4(
	function (model, shape, id, l) {
		var _p271 = shape;
		switch (_p271) {
			case 'line':
				return A3(_user$project$Canvas$makeZonesLine, model, id, l);
			case 'rect':
				return A4(_user$project$Canvas$makeZonesRectOrBox, model, id, shape, l);
			case 'BOX':
				return A4(_user$project$Canvas$makeZonesRectOrBox, model, id, shape, l);
			case 'circle':
				return A3(_user$project$Canvas$makeZonesCircle, model, id, l);
			case 'ellipse':
				return A4(_user$project$Canvas$makeZonesEllipseOrOval, model, id, shape, l);
			case 'OVAL':
				return A4(_user$project$Canvas$makeZonesEllipseOrOval, model, id, shape, l);
			case 'polygon':
				return A4(_user$project$Canvas$makeZonesPoly, model, shape, id, l);
			case 'polyline':
				return A4(_user$project$Canvas$makeZonesPoly, model, shape, id, l);
			case 'path':
				return A4(_user$project$Canvas$makeZonesPath, model, shape, id, l);
			default:
				return {ctor: '[]'};
		}
	});
var _user$project$Canvas$buildHtml_ = F4(
	function (_p272, insideSvgNode, d, i) {
		var _p273 = _p272;
		var _p284 = _p273._0;
		var _p283 = _p273._1;
		var _p274 = function (_) {
			return _.interpreted;
		}(
			A3(
				_user$project$Utils$justGet_,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'buildHtml_ ',
					_elm_lang$core$Basics$toString(i)),
				i,
				d));
		if (_p274.ctor === 'TextNode') {
			return _elm_lang$virtual_dom$VirtualDom$text(_p274._0);
		} else {
			var _p282 = _p274._0;
			var _p281 = _p274._1;
			var _p275 = {
				ctor: '_Tuple2',
				_0: _p284.showGhosts,
				_1: A2(_user$project$Utils$maybeRemoveFirst, 'HIDDEN', _p281)
			};
			if (((_p275.ctor === '_Tuple2') && (_p275._0 === false)) && (_p275._1.ctor === 'Just')) {
				return A2(
					_elm_lang$svg$Svg$svg,
					{ctor: '[]'},
					{ctor: '[]'});
			} else {
				var _p276 = function () {
					var _p277 = {
						ctor: '_Tuple2',
						_0: _p283,
						_1: A2(_user$project$Utils$maybeRemoveFirst, 'ZONES', _p281)
					};
					if (_p277._0 === false) {
						if (_p277._1.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: {ctor: '[]'},
								_1: _p281
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: {ctor: '[]'},
								_1: _p277._1._0._1
							};
						}
					} else {
						if (_p277._1.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: A4(_user$project$Canvas$makeZones, _p284, _p282, i, _p281),
								_1: _p281
							};
						} else {
							var _p278 = _p277._1._0._0.interpreted;
							return {
								ctor: '_Tuple2',
								_0: A4(_user$project$Canvas$makeZones, _p284, _p282, i, _p281),
								_1: _p277._1._0._1
							};
						}
					}
				}();
				var zones = _p276._0;
				var attrs_ = _p276._1;
				var _p279 = function () {
					var canvasDim = _user$project$SleekLayout$outputCanvas(_p284);
					return A2(
						_elm_lang$core$Tuple$mapSecond,
						_user$project$LangSvg$compileAttrs,
						A4(_user$project$LangSvg$desugarShapeAttrs, canvasDim.x, canvasDim.y, _p282, attrs_));
				}();
				var rawKind = _p279._0;
				var compiledAttrs = _p279._1;
				var _p280 = _elm_lang$core$Native_Utils.eq(rawKind, 'svg') ? {ctor: '_Tuple2', _0: _elm_lang$svg$Svg$node, _1: true} : (insideSvgNode ? {ctor: '_Tuple2', _0: _elm_lang$svg$Svg$node, _1: true} : {ctor: '_Tuple2', _0: _elm_lang$html$Html$node, _1: false});
				var node = _p280._0;
				var isSvgNode = _p280._1;
				var children = A2(
					_elm_lang$core$List$map,
					A3(
						_user$project$Canvas$buildHtml_,
						{ctor: '_Tuple2', _0: _p284, _1: _p283},
						isSvgNode,
						d),
					_p274._2);
				var mainshape = A3(node, rawKind, compiledAttrs, children);
				return _elm_lang$core$Native_Utils.eq(
					zones,
					{ctor: '[]'}) ? mainshape : A2(
					_elm_lang$svg$Svg$svg,
					{ctor: '[]'},
					{ctor: '::', _0: mainshape, _1: zones});
			}
		}
	});
var _user$project$Canvas$buildHtml = F3(
	function (_p286, insideSvgNode, _p285) {
		var _p287 = _p286;
		var _p288 = _p285;
		return A4(
			_user$project$Canvas$buildHtml_,
			{ctor: '_Tuple2', _0: _p287._0, _1: _p287._1},
			insideSvgNode,
			_p288._1,
			_p288._0);
	});
var _user$project$Canvas$build = F2(
	function (dim, model) {
		var addZones = function () {
			var _p289 = {ctor: '_Tuple2', _0: model.outputMode, _1: model.preview};
			if (((_p289.ctor === '_Tuple2') && (_p289._0.ctor === 'Live')) && (_p289._1.ctor === 'Nothing')) {
				return true;
			} else {
				return false;
			}
		}();
		var _p290 = function () {
			var _p291 = model.preview;
			if ((((_p291.ctor === 'Just') && (_p291._0.ctor === '_Tuple2')) && (_p291._0._1.ctor === 'Ok')) && (_p291._0._1._0.ctor === '_Tuple4')) {
				var _p295 = _p291._0._1._0._1;
				var _p294 = _p291._0._1._0._2;
				var _p293 = _p291._0._1._0._3;
				var _p292 = _p291._0._0;
				return {
					ctor: '_Tuple4',
					_0: _p295,
					_1: _p294,
					_2: _p293,
					_3: _elm_lang$core$Native_Utils.update(
						model,
						{
							renamingInOutput: _elm_lang$core$Maybe$Nothing,
							widgets: _p295,
							widgetBounds: _p294,
							slate: _p293,
							inputVal: _p291._0._1._0._0,
							code: _p292,
							inputExp: A2(
								_elm_lang$core$Maybe$withDefault,
								model.inputExp,
								_elm_lang$core$Result$toMaybe(
									A2(_user$project$Syntax$parser, model.syntax, _p292)))
						})
				};
			} else {
				return {ctor: '_Tuple4', _0: model.widgets, _1: model.widgetBounds, _2: model.slate, _3: model};
			}
		}();
		var widgets = _p290._0;
		var widgetBounds = _p290._1;
		var slate = _p290._2;
		var pseudoModel = _p290._3;
		var outputIsSvg = _user$project$LangSvg$rootIsShapeOrText(slate);
		var outputElement = A3(
			_user$project$Canvas$buildHtml,
			{ctor: '_Tuple2', _0: pseudoModel, _1: addZones},
			outputIsSvg,
			slate);
		var newShape = _user$project$Canvas$drawNewShape(model);
		var widgetsAndDistances = function () {
			var _p296 = {ctor: '_Tuple3', _0: model.outputMode, _1: model.showGhosts, _2: model.preview};
			if (((_p296.ctor === '_Tuple3') && (_p296._0.ctor === 'Live')) && (_p296._1 === true)) {
				if (_p296._2.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A3(_user$project$Canvas$buildDistances, pseudoModel, slate, widgets),
						A5(_user$project$Canvas$buildSvgWidgets, dim.width, dim.height, widgets, widgetBounds, pseudoModel));
				} else {
					return A5(_user$project$Canvas$buildSvgWidgets, dim.width, dim.height, widgets, widgetBounds, pseudoModel);
				}
			} else {
				return {ctor: '[]'};
			}
		}();
		var selectBox = _user$project$Canvas$drawSelectBox(model);
		return outputIsSvg ? {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$svg,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Events$onMouseDown(_user$project$Canvas$msgMouseDownOnCanvas),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'width',
									_1: _user$project$Canvas$pixels(dim.width)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'height',
										_1: _user$project$Canvas$pixels(dim.height)
									},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: outputElement,
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						widgetsAndDistances,
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: newShape,
								_1: {ctor: '[]'}
							},
							selectBox)))),
			_1: {ctor: '[]'}
		} : {
			ctor: '::',
			_0: outputElement,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$svg,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('svgWidgetsLayer'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'left',
										_1: _user$project$Canvas$pixels(dim.x)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'top',
											_1: _user$project$Canvas$pixels(dim.y)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'width',
												_1: _user$project$Canvas$pixels(dim.width)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'height',
													_1: _user$project$Canvas$pixels(dim.height)
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						widgetsAndDistances,
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: newShape,
								_1: {ctor: '[]'}
							},
							selectBox))),
				_1: {ctor: '[]'}
			}
		};
	});

var _user$project$Deuce$whitespaceColor = function (colorScheme) {
	var _p0 = colorScheme;
	if (_p0.ctor === 'Light') {
		return {r: 0, g: 100, b: 255};
	} else {
		return {r: 0, g: 200, b: 200};
	}
};
var _user$project$Deuce$objectColor = function (colorScheme) {
	var _p1 = colorScheme;
	if (_p1.ctor === 'Light') {
		return {r: 255, g: 165, b: 0};
	} else {
		return {r: 200, g: 200, b: 100};
	}
};
var _user$project$Deuce$polygonOpacity = function (colorScheme) {
	return 0.2;
};
var _user$project$Deuce$strokeWidth = function (colorScheme) {
	return '2px';
};
var _user$project$Deuce$hullPoints = function () {
	var pairToString = function (_p2) {
		var _p3 = _p2;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(_p3._0),
			A2(
				_elm_lang$core$Basics_ops['++'],
				',',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p3._1),
					' ')));
	};
	return function (_p4) {
		return _elm_lang$core$String$concat(
			A2(_elm_lang$core$List$map, pairToString, _p4));
	};
}();
var _user$project$Deuce$specialEndFlag = -123456789;
var _user$project$Deuce$addBleed = function (_p5) {
	var _p6 = _p5;
	var _p8 = _p6._1;
	var _p7 = _p6._0;
	return _elm_lang$core$Native_Utils.eq(_p7, _user$project$Deuce$specialEndFlag) ? {ctor: '_Tuple2', _0: 0, _1: _p8} : ((_elm_lang$core$Native_Utils.cmp(_p7, 0) < 1) ? {ctor: '_Tuple2', _0: 0 - _user$project$SleekLayout$deuceOverlayBleed, _1: _p8} : {ctor: '_Tuple2', _0: _p7, _1: _p8});
};
var _user$project$Deuce$addFinalEndBleed = function (_p9) {
	var _p10 = _p9;
	var _p12 = _p10._1;
	var _p11 = _p10._0;
	return (_elm_lang$core$Native_Utils.cmp(_p11, 0) < 1) ? {ctor: '_Tuple2', _0: _user$project$Deuce$specialEndFlag, _1: _p12} : {ctor: '_Tuple2', _0: _p11, _1: _p12};
};
var _user$project$Deuce$affectedByBleed = _user$project$Lang$isTarget;
var _user$project$Deuce$zeroWidthPadding = 2;
var _user$project$Deuce$trimmedLine = _elm_lang$core$List$map(
	function (s) {
		var trimmedRightLen = function (_p13) {
			return _elm_lang$core$String$length(
				_elm_lang$core$String$trimRight(_p13));
		}(s);
		var trimmed = _elm_lang$core$String$trim(s);
		var trimmedLen = _elm_lang$core$String$length(trimmed);
		var startCol = trimmedRightLen - trimmedLen;
		var endCol = startCol + trimmedLen;
		return {startCol: startCol, endCol: endCol, val: trimmed};
	});
var _user$project$Deuce$untrimmedLine = F2(
	function (maxLen, strings) {
		var endCol = maxLen + 1;
		var startCol = 0;
		var lineMapper = function (s) {
			return {startCol: startCol, endCol: endCol, val: s};
		};
		return A2(_elm_lang$core$List$map, lineMapper, strings);
	});
var _user$project$Deuce$computeMaxLineLength = function (strings) {
	var lens = A2(_elm_lang$core$List$map, _elm_lang$core$String$length, strings);
	return A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		_elm_lang$core$List$maximum(lens));
};
var _user$project$Deuce$isBlankLine = function (line) {
	return _elm_lang$core$Native_Utils.eq(line.startCol, line.endCol);
};
var _user$project$Deuce$emptyLine = {startCol: 0, endCol: 0, val: ''};
var _user$project$Deuce$c2a = F2(
	function (di, _p14) {
		var _p15 = _p14;
		return {
			ctor: '_Tuple2',
			_0: di.characterWidth * _elm_lang$core$Basics$toFloat(_p15._0),
			_1: di.lineHeight * _elm_lang$core$Basics$toFloat(_p15._1)
		};
	});
var _user$project$Deuce$lineHull = F2(
	function (di, _p16) {
		var _p17 = _p16;
		var _p19 = _p17._0;
		var _p18 = _p17._1;
		return A2(
			_elm_lang$core$List$map,
			_user$project$Deuce$c2a(di),
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _p18.startCol, _1: _p19},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p18.startCol, _1: _p19 + 1},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p18.endCol, _1: _p19 + 1},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _p18.endCol, _1: _p19},
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$Deuce$hull = F7(
	function (codeInfo, useTrimmed, shouldAddBleed, startCol, startRow, endCol, endRow) {
		var _p20 = shouldAddBleed ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$List$map(_user$project$Deuce$addBleed),
			_1: _user$project$Deuce$addFinalEndBleed
		} : {ctor: '_Tuple2', _0: _elm_lang$core$Basics$identity, _1: _elm_lang$core$Basics$identity};
		var modifier = _p20._0;
		var finalEndModifier = _p20._1;
		var lineHulls = useTrimmed ? codeInfo.trimmedLineHulls : codeInfo.untrimmedLineHulls;
		var relevantLines = A3(_user$project$Utils$slice, startRow + 1, endRow, lineHulls);
		return modifier(
			function () {
				if (!_elm_lang$core$Native_Utils.eq(startRow, endRow)) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							_user$project$Deuce$c2a(codeInfo.displayInfo),
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: startCol, _1: startRow},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: startCol, _1: startRow + 1},
									_1: {ctor: '[]'}
								}
							}),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$List$concat(
								A2(
									_elm_lang$core$List$map,
									_elm_lang$core$List$take(2),
									relevantLines)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$List$take,
									2,
									A2(
										_elm_lang$core$Maybe$withDefault,
										{ctor: '[]'},
										A2(_user$project$Utils$maybeGeti0, endRow, lineHulls))),
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(
										_elm_lang$core$List$map,
										function (_p21) {
											return finalEndModifier(
												A2(_user$project$Deuce$c2a, codeInfo.displayInfo, _p21));
										},
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: endCol, _1: endRow + 1},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: endCol, _1: endRow},
												_1: {ctor: '[]'}
											}
										}),
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$List$concat(
											A2(
												_elm_lang$core$List$map,
												_elm_lang$core$List$drop(2),
												_elm_lang$core$List$reverse(relevantLines))),
										A2(
											_elm_lang$core$List$drop,
											2,
											A2(
												_elm_lang$core$Maybe$withDefault,
												{ctor: '[]'},
												A2(_user$project$Utils$maybeGeti0, startRow, lineHulls))))))));
				} else {
					if (_elm_lang$core$Native_Utils.eq(startCol, endCol)) {
						var _p22 = A2(
							_user$project$Deuce$c2a,
							codeInfo.displayInfo,
							{ctor: '_Tuple2', _0: startCol, _1: startRow + 1});
						var yBottom = _p22._1;
						var _p23 = A2(
							_user$project$Deuce$c2a,
							codeInfo.displayInfo,
							{ctor: '_Tuple2', _0: startCol, _1: startRow});
						var x = _p23._0;
						var yTop = _p23._1;
						return {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: x - _user$project$Deuce$zeroWidthPadding, _1: yTop},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: x - _user$project$Deuce$zeroWidthPadding, _1: yBottom},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: x + _user$project$Deuce$zeroWidthPadding, _1: yBottom},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: x + _user$project$Deuce$zeroWidthPadding, _1: yTop},
										_1: {ctor: '[]'}
									}
								}
							}
						};
					} else {
						return A2(
							_elm_lang$core$List$map,
							_user$project$Deuce$c2a(codeInfo.displayInfo),
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: startCol, _1: startRow},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: startCol, _1: startRow + 1},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: endCol, _1: startRow + 1},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: endCol, _1: startRow},
											_1: {ctor: '[]'}
										}
									}
								}
							});
					}
				}
			}());
	});
var _user$project$Deuce$index = _elm_lang$core$List$indexedMap(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _user$project$Deuce$lineHullsFromCode = F2(
	function (di, code) {
		var lines = _elm_lang$core$String$lines(code);
		var maxLineLength = _user$project$Deuce$computeMaxLineLength(lines);
		var pipeline = function (lineKind) {
			return A2(
				_elm_lang$core$List$map,
				_user$project$Deuce$lineHull(di),
				_user$project$Deuce$index(
					lineKind(lines)));
		};
		return {
			ctor: '_Tuple3',
			_0: pipeline(
				_user$project$Deuce$untrimmedLine(maxLineLength)),
			_1: pipeline(_user$project$Deuce$trimmedLine),
			_2: maxLineLength
		};
	});
var _user$project$Deuce$startEnd = F2(
	function (codeInfo, codeObject) {
		var info = _user$project$Lang$extractInfoFromCodeObject(codeObject);
		var infoTuple = {ctor: '_Tuple4', _0: info.start.col, _1: info.start.line, _2: info.end.col, _3: info.end.line};
		var _p24 = function () {
			var _p25 = codeObject;
			if (_p25.ctor === 'E') {
				var _p26 = _p25._0;
				var endExp = _user$project$Lang$firstNestedExp(_p26);
				return {ctor: '_Tuple4', _0: _p26.start.col, _1: _p26.start.line, _2: endExp.end.col, _3: endExp.end.line};
			} else {
				return infoTuple;
			}
		}();
		var startCol = _p24._0;
		var startLine = _p24._1;
		var endCol = _p24._2;
		var endLine = _p24._3;
		var _p27 = _elm_lang$core$Native_Utils.eq(endCol, 0) ? {ctor: '_Tuple4', _0: startLine, _1: startCol, _2: endLine - 1, _3: codeInfo.maxLineLength + 1} : (_user$project$Info$hasDummyInfo(info) ? {ctor: '_Tuple4', _0: -100, _1: -100, _2: -100, _3: -100} : {ctor: '_Tuple4', _0: startLine, _1: startCol, _2: endLine, _3: endCol});
		var realStartLine = _p27._0;
		var realStartCol = _p27._1;
		var realEndLine = _p27._2;
		var realEndCol = _p27._3;
		return {ctor: '_Tuple4', _0: realStartCol - 1, _1: realStartLine - 1, _2: realEndCol - 1, _3: realEndLine - 1};
	});
var _user$project$Deuce$codeObjectHull = F2(
	function (codeInfo, codeObject) {
		var _p28 = A2(_user$project$Deuce$startEnd, codeInfo, codeObject);
		var startCol = _p28._0;
		var startRow = _p28._1;
		var endCol = _p28._2;
		var endRow = _p28._3;
		var shouldAddBleed = _user$project$Deuce$affectedByBleed(codeObject);
		var useTrimmed = function (_p29) {
			return !_user$project$Lang$isTarget(_p29);
		}(codeObject);
		return A7(_user$project$Deuce$hull, codeInfo, useTrimmed, shouldAddBleed, startCol, startRow, endCol, endRow);
	});
var _user$project$Deuce$codeObjectHullPoints = F2(
	function (codeInfo, codeObject) {
		return _user$project$Deuce$hullPoints(
			A2(_user$project$Deuce$codeObjectHull, codeInfo, codeObject));
	});
var _user$project$Deuce$rgbaString = F2(
	function (c, a) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'rgba(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(c.r),
				A2(
					_elm_lang$core$Basics_ops['++'],
					',',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(c.g),
						A2(
							_elm_lang$core$Basics_ops['++'],
							',',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(c.b),
								A2(
									_elm_lang$core$Basics_ops['++'],
									',',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(a),
										')'))))))));
	});
var _user$project$Deuce$circleHandles = F5(
	function (codeInfo, codeObject, color, opacity, radius) {
		var _p30 = A2(_user$project$Deuce$startEnd, codeInfo, codeObject);
		var startCol = _p30._0;
		var startRow = _p30._1;
		var endCol = _p30._2;
		var endRow = _p30._3;
		var accountForBleed = F2(
			function (mightBleed, _p31) {
				var _p32 = _p31;
				var _p34 = _p32._1;
				var _p33 = _p32._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p33, 0) < 1) && (mightBleed && _user$project$Deuce$affectedByBleed(codeObject))) ? {ctor: '_Tuple2', _0: 0 - _user$project$SleekLayout$deuceOverlayBleed, _1: _p34} : {ctor: '_Tuple2', _0: _p33, _1: _p34};
			});
		var radiusString = _elm_lang$core$Basics$toString(radius);
		var handle = F3(
			function (mightBleed, col, row) {
				var _p35 = A2(
					_user$project$Utils$mapBoth,
					_elm_lang$core$Basics$toString,
					A2(
						accountForBleed,
						mightBleed,
						A2(
							_user$project$Deuce$c2a,
							codeInfo.displayInfo,
							{ctor: '_Tuple2', _0: col, _1: row})));
				var cx = _p35._0;
				var cy = _p35._1;
				return A2(
					_elm_lang$svg$Svg$circle,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cx(cx),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cy(cy),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$r(radiusString),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'});
			});
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill(
					A2(_user$project$Deuce$rgbaString, color, opacity)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
						_user$project$Deuce$strokeWidth(codeInfo.displayInfo.colorScheme)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke(
							A2(_user$project$Deuce$rgbaString, color, opacity)),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A3(handle, true, startCol, startRow),
				_1: {
					ctor: '::',
					_0: A3(handle, false, endCol, endRow + 1),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Deuce$blockerPolygon = F2(
	function (codeInfo, codeObject) {
		var color = {r: 255, g: 0, b: 0};
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$opacity('0'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$polygon,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$points(
								A2(_user$project$Deuce$codeObjectHullPoints, codeInfo, codeObject)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
									_user$project$Deuce$strokeWidth(codeInfo.displayInfo.colorScheme)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke(
										A2(_user$project$Deuce$rgbaString, color, 1)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill(
											A2(
												_user$project$Deuce$rgbaString,
												color,
												_user$project$Deuce$polygonOpacity(codeInfo.displayInfo.colorScheme))),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Deuce$codeObjectPolygon = F3(
	function (codeInfo, codeObject, color) {
		var _p36 = A2(_user$project$DeuceWidgets$toDeuceWidget, codeInfo.patMap, codeObject);
		if (_p36.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			var _p38 = _p36._0;
			var active = A2(_elm_lang$core$List$member, _p38, codeInfo.deuceState.selectedWidgets);
			var hovered = A2(_elm_lang$core$List$member, _p38, codeInfo.deuceState.hoveredWidgets);
			var baseAlpha = (active && hovered) ? 1 : (active ? 1 : (hovered ? 1 : 0));
			var cursorStyle = (hovered || active) ? 'pointer' : 'default';
			var onClick = _user$project$InterfaceController$msgMouseClickDeuceWidget(_p38);
			var onMouseOut = _user$project$InterfaceController$msgMouseLeaveDeuceWidget(_p38);
			var onMouseOver = _user$project$InterfaceController$msgMouseEnterDeuceWidget(_p38);
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: function (_p37) {
							return _elm_lang$svg$Svg_Attributes$style(
								_user$project$HtmlUtils$styleListToString(_p37));
						}(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'cursor', _1: cursorStyle},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Events$onMouseOver(onMouseOver),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Events$onMouseOut(onMouseOut),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Events$onClick(onClick),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$opacity(
											_elm_lang$core$Basics$toString(baseAlpha)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: A5(_user$project$Deuce$circleHandles, codeInfo, codeObject, color, 1, 3),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$polygon,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(
										A2(_user$project$Deuce$codeObjectHullPoints, codeInfo, codeObject)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
											_user$project$Deuce$strokeWidth(codeInfo.displayInfo.colorScheme)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke(
												A2(_user$project$Deuce$rgbaString, color, 1)),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill(
													A2(
														_user$project$Deuce$rgbaString,
														color,
														_user$project$Deuce$polygonOpacity(codeInfo.displayInfo.colorScheme))),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Deuce$expPolygon = F2(
	function (codeInfo, e) {
		var color = _user$project$Deuce$objectColor(codeInfo.displayInfo.colorScheme);
		var codeObject = _user$project$Lang$E(e);
		var _p39 = e.val.e__;
		if ((_p39.ctor === 'ELet') && (_p39._1.ctor === 'Def')) {
			return {ctor: '[]'};
		} else {
			return A3(_user$project$Deuce$codeObjectPolygon, codeInfo, codeObject, color);
		}
	});
var _user$project$Deuce$patPolygon = F3(
	function (codeInfo, e, p) {
		var color = _user$project$Deuce$objectColor(codeInfo.displayInfo.colorScheme);
		var codeObject = A2(_user$project$Lang$P, e, p);
		return A3(_user$project$Deuce$codeObjectPolygon, codeInfo, codeObject, color);
	});
var _user$project$Deuce$letBindingEquationPolygon = F2(
	function (codeInfo, eid) {
		var color = _user$project$Deuce$objectColor(codeInfo.displayInfo.colorScheme);
		var codeObject = _user$project$Lang$LBE(eid);
		return A3(_user$project$Deuce$codeObjectPolygon, codeInfo, codeObject, color);
	});
var _user$project$Deuce$expTargetPolygon = F4(
	function (codeInfo, ba, ws, et) {
		var color = _user$project$Deuce$whitespaceColor(codeInfo.displayInfo.colorScheme);
		var codeObject = A3(_user$project$Lang$ET, ba, ws, et);
		return A3(_user$project$Deuce$codeObjectPolygon, codeInfo, codeObject, color);
	});
var _user$project$Deuce$patTargetPolygon = F5(
	function (codeInfo, ba, ws, e, pt) {
		var color = _user$project$Deuce$whitespaceColor(codeInfo.displayInfo.colorScheme);
		var codeObject = A4(_user$project$Lang$PT, ba, ws, e, pt);
		return A3(_user$project$Deuce$codeObjectPolygon, codeInfo, codeObject, color);
	});
var _user$project$Deuce$polygons = F2(
	function (codeInfo, ast) {
		return _elm_lang$core$List$reverse(
			A3(
				_user$project$Lang$foldCode,
				F2(
					function (codeObject, acc) {
						if (_user$project$Lang$isSelectable(codeObject)) {
							var _p40 = codeObject;
							switch (_p40.ctor) {
								case 'E':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										A2(_user$project$Deuce$expPolygon, codeInfo, _p40._0),
										acc);
								case 'P':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										A3(_user$project$Deuce$patPolygon, codeInfo, _p40._0, _p40._1),
										acc);
								case 'T':
									return acc;
								case 'LBE':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										A2(_user$project$Deuce$letBindingEquationPolygon, codeInfo, _p40._0),
										acc);
								case 'ET':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										A4(_user$project$Deuce$expTargetPolygon, codeInfo, _p40._0, _p40._1, _p40._2),
										acc);
								case 'PT':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										A5(_user$project$Deuce$patTargetPolygon, codeInfo, _p40._0, _p40._1, _p40._2, _p40._3),
										acc);
								default:
									return acc;
							}
						} else {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$Deuce$blockerPolygon, codeInfo, codeObject),
								acc);
						}
					}),
				{ctor: '[]'},
				_user$project$Lang$E(ast)));
	});
var _user$project$Deuce$overlay = function (model) {
	var leftShift = model.codeBoxInfo.contentLeft + _user$project$SleekLayout$deuceOverlayBleed;
	var displayInfo = {lineHeight: model.codeBoxInfo.lineHeight, characterWidth: model.codeBoxInfo.characterWidth, colorScheme: model.colorScheme};
	var _p41 = A2(_user$project$Deuce$lineHullsFromCode, displayInfo, model.code);
	var untrimmedLineHulls = _p41._0;
	var trimmedLineHulls = _p41._1;
	var maxLineLength = _p41._2;
	var ast = model.inputExp;
	var patMap = _user$project$Lang$computePatMap(ast);
	var codeInfo = {displayInfo: displayInfo, untrimmedLineHulls: untrimmedLineHulls, trimmedLineHulls: trimmedLineHulls, deuceState: model.deuceState, patMap: patMap, maxLineLength: maxLineLength};
	return A2(
		_elm_lang$svg$Svg$g,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$transform(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'translate(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(leftShift),
						', 0)'))),
			_1: {ctor: '[]'}
		},
		A2(_user$project$Deuce$polygons, codeInfo, ast));
};
var _user$project$Deuce$Color = F3(
	function (a, b, c) {
		return {r: a, g: b, b: c};
	});
var _user$project$Deuce$Line = F3(
	function (a, b, c) {
		return {startCol: a, endCol: b, val: c};
	});
var _user$project$Deuce$DisplayInfo = F3(
	function (a, b, c) {
		return {lineHeight: a, characterWidth: b, colorScheme: c};
	});
var _user$project$Deuce$CodeInfo = F6(
	function (a, b, c, d, e, f) {
		return {displayInfo: a, untrimmedLineHulls: b, trimmedLineHulls: c, deuceState: d, patMap: e, maxLineLength: f};
	});

var _user$project$OutputTools$resultsCached = F2(
	function (_p0, resultsKey) {
		var _p1 = _p0;
		return {
			description: A2(
				_elm_lang$core$Basics_ops['++'],
				'You shouldn\'t see this description. (',
				A2(_elm_lang$core$Basics_ops['++'], resultsKey, ')')),
			value: A2(_elm_lang$core$Dict$member, resultsKey, _p1.synthesisResultsDict) ? _user$project$InterfaceModel$Satisfied : _user$project$InterfaceModel$Impossible
		};
	});
var _user$project$OutputTools$atLeastOneShapeNoFeatures = function (_p2) {
	var _p3 = _p2;
	var atLeastOneBlob = !_elm_lang$core$Dict$isEmpty(_p3.selectedBlobs);
	var atLeastOneShape = !_elm_lang$core$List$isEmpty(_p3.selectedShapes);
	var atLeastOneFeature = !_elm_lang$core$List$isEmpty(_p3.selectedFeatures);
	return {
		description: 'Select at least one shape or blob (and no features)',
		value: atLeastOneFeature ? _user$project$InterfaceModel$Impossible : ((atLeastOneShape || atLeastOneBlob) ? _user$project$InterfaceModel$Satisfied : _user$project$InterfaceModel$Possible)
	};
};
var _user$project$OutputTools$atLeastTwoSelections = function (_p4) {
	var _p5 = _p4;
	return {
		description: 'Select at least two features, shapes, or blobs',
		value: (_elm_lang$core$Native_Utils.cmp(
			(_elm_lang$core$List$length(_p5.selectedFeatures) + _elm_lang$core$List$length(_p5.selectedShapes)) + _elm_lang$core$Dict$size(_p5.selectedBlobs),
			2) > -1) ? _user$project$InterfaceModel$Satisfied : _user$project$InterfaceModel$Possible
	};
};
var _user$project$OutputTools$atLeastOneSelection = function (_p6) {
	var _p7 = _p6;
	var atLeastOneBlob = !_elm_lang$core$Dict$isEmpty(_p7.selectedBlobs);
	var atLeastOneShape = !_elm_lang$core$List$isEmpty(_p7.selectedShapes);
	var atLeastOneFeature = !_elm_lang$core$List$isEmpty(_p7.selectedFeatures);
	return {
		description: 'Select at least one feature, shape, or blob',
		value: (atLeastOneFeature || (atLeastOneShape || atLeastOneBlob)) ? _user$project$InterfaceModel$Satisfied : _user$project$InterfaceModel$Possible
	};
};
var _user$project$OutputTools$nOrMore = F2(
	function (n, xs) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(xs),
			n) > -1) ? _user$project$InterfaceModel$Satisfied : _user$project$InterfaceModel$Possible;
	});
var _user$project$OutputTools$atLeastOneFeature = function (selectedFeatures) {
	return {
		description: 'Select at least on feature',
		value: A2(_user$project$OutputTools$nOrMore, 1, selectedFeatures)
	};
};
var _user$project$OutputTools$atLeastTwoFeatures = function (selectedFeatures) {
	return {
		description: 'Select at least two features',
		value: A2(_user$project$OutputTools$nOrMore, 2, selectedFeatures)
	};
};
var _user$project$OutputTools$OutputTool = F6(
	function (a, b, c, d, e, f) {
		return {name: a, shortcut: b, kind: c, func: d, reqs: e, id: f};
	});
var _user$project$OutputTools$Multi = {ctor: 'Multi'};
var _user$project$OutputTools$chooseTerminationConditionTool = function (selections) {
	var name = 'Termination Condition Options';
	return {
		name: name,
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgNoop),
		reqs: {
			ctor: '::',
			_0: A2(_user$project$OutputTools$resultsCached, selections, name),
			_1: {ctor: '[]'}
		},
		id: 'terminationConditionOptions'
	};
};
var _user$project$OutputTools$perhapsAddArgumentTool = function (model) {
	var _p8 = A2(_user$project$FocusedEditingContext$maybeFocusedExp, model.editingContext, model.inputExp);
	if (_p8.ctor === 'Just') {
		return _user$project$Lang$isFunc(_p8._0) ? {
			ctor: '::',
			_0: function (_p9) {
				var _p10 = _p9;
				var name = 'Add Argument';
				return {
					name: name,
					shortcut: _elm_lang$core$Maybe$Nothing,
					kind: _user$project$OutputTools$Multi,
					func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgAddArg),
					reqs: {
						ctor: '::',
						_0: _user$project$OutputTools$atLeastOneFeature(_p10.selectedFeatures),
						_1: {ctor: '[]'}
					},
					id: 'addArgument'
				};
			},
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$OutputTools$reorderInListTool = function (selections) {
	return {
		name: 'Reorder in List',
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgReorderInList),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastOneSelection(selections),
			_1: {ctor: '[]'}
		},
		id: 'reorderInList'
	};
};
var _user$project$OutputTools$makeEqualTool = function (_p11) {
	var _p12 = _p11;
	return {
		name: 'Make Equal',
		shortcut: _elm_lang$core$Maybe$Just('E'),
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgMakeEqual),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastTwoFeatures(_p12.selectedFeatures),
			_1: {ctor: '[]'}
		},
		id: 'makeEqual'
	};
};
var _user$project$OutputTools$relateTool = function (_p13) {
	var _p14 = _p13;
	return {
		name: 'Relate',
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgRelate),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastTwoFeatures(_p14.selectedFeatures),
			_1: {ctor: '[]'}
		},
		id: 'relate'
	};
};
var _user$project$OutputTools$indexedRelateTool = function (_p15) {
	var _p16 = _p15;
	return {
		name: 'Indexed Relate',
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgIndexedRelate),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastTwoFeatures(_p16.selectedFeatures),
			_1: {ctor: '[]'}
		},
		id: 'indexedRelate'
	};
};
var _user$project$OutputTools$abstractTool = function (selections) {
	return {
		name: 'Abstract',
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgAbstract),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastOneSelection(selections),
			_1: {ctor: '[]'}
		},
		id: 'abstract'
	};
};
var _user$project$OutputTools$mergeTool = function (selections) {
	return {
		name: 'Merge',
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgMerge),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastTwoSelections(selections),
			_1: {ctor: '[]'}
		},
		id: 'merge'
	};
};
var _user$project$OutputTools$groupTool = function (selections) {
	return {
		name: 'Group',
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgGroup),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastOneSelection(selections),
			_1: {ctor: '[]'}
		},
		id: 'group'
	};
};
var _user$project$OutputTools$fillPBEHoleTools = function (model) {
	return A2(
		_user$project$Utils$mapi1,
		F2(
			function (_p17, selections) {
				var _p18 = _p17;
				var _p20 = _p18._1;
				var _p19 = _p18._0;
				var name = A2(
					_elm_lang$core$Basics_ops['++'],
					'Fill Hole ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p19),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' (',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$LangTools$expNameForEId, model.inputExp, _p20.val.eid),
								')'))));
				return {
					name: name,
					shortcut: _elm_lang$core$Maybe$Nothing,
					kind: _user$project$OutputTools$Multi,
					func: _elm_lang$core$Maybe$Just(
						A2(_user$project$InterfaceController$msgFillPBEHole, _p20.val.eid, name)),
					reqs: {ctor: '[]'},
					id: A2(
						_elm_lang$core$Basics_ops['++'],
						'fillPBEHole',
						_elm_lang$core$Basics$toString(_p19))
				};
			}),
		A2(
			_elm_lang$core$List$filter,
			_user$project$Lang$isPBEHole,
			_user$project$Lang$flattenExpTree(model.inputExp)));
};
var _user$project$OutputTools$repeatByIndexedMergeTool = function (selections) {
	return {
		name: 'Repeat by Indexed Merge',
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Multi,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgRepeatByIndexedMerge),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastTwoSelections(selections),
			_1: {ctor: '[]'}
		},
		id: 'merge'
	};
};
var _user$project$OutputTools$functionBasedRepeatTools = function (model) {
	return A2(
		_elm_lang$core$List$map,
		F2(
			function (_p21, selections) {
				var _p22 = _p21;
				var _p23 = _p22._0;
				var name = A2(_elm_lang$core$Basics_ops['++'], 'Repeat with Function ', _p23);
				return {
					name: name,
					shortcut: _elm_lang$core$Maybe$Nothing,
					kind: _user$project$OutputTools$Multi,
					func: _elm_lang$core$Maybe$Just(
						A2(_user$project$InterfaceController$msgRepeatUsingFunction, _p23, name)),
					reqs: {
						ctor: '::',
						_0: _user$project$OutputTools$atLeastOneSelection(selections),
						_1: {ctor: '[]'}
					},
					id: _p23
				};
			}),
		A3(_user$project$FindRepeatTools$getRepetitionFunctions, model.inputExp, model.idToTypeAndContextThunk, model.editingContext));
};
var _user$project$OutputTools$pointListBasedRepeatTools = function (model) {
	return A2(
		_user$project$Utils$mapi1,
		F2(
			function (_p24, selections) {
				var _p25 = _p24;
				var _p28 = _p25._1;
				var _p27 = _p25._0;
				var name = A2(
					_elm_lang$core$Basics_ops['++'],
					'Repeat Over List ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p27),
						A2(
							_elm_lang$core$Basics_ops['++'],
							': ',
							function () {
								var prefixes = A2(
									_user$project$Utils$dropLast,
									1,
									A2(
										_user$project$LangTools$expDescriptionParts,
										model.inputExp,
										_user$project$Lang$valEId(_p28)));
								var _p26 = A2(
									_user$project$LangTools$findLetAndIdentBindingExpLoose,
									_user$project$Lang$valEId(_p28),
									model.inputExp);
								if (_p26.ctor === 'Just') {
									return A2(
										_elm_lang$core$String$join,
										' ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											prefixes,
											{
												ctor: '::',
												_0: _p26._0._1,
												_1: {ctor: '[]'}
											}));
								} else {
									return A2(
										_elm_lang$core$String$join,
										' ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											prefixes,
											{
												ctor: '::',
												_0: _user$project$Utils$squish(
													A2(
														_user$project$Syntax$unparser,
														_user$project$Syntax$Elm,
														_user$project$Lang$valExp(_p28))),
												_1: {ctor: '[]'}
											}));
								}
							}())));
				return {
					name: name,
					shortcut: _elm_lang$core$Maybe$Nothing,
					kind: _user$project$OutputTools$Multi,
					func: _elm_lang$core$Maybe$Just(
						A2(_user$project$InterfaceController$msgRepeatUsingPointList, _p28, name)),
					reqs: {
						ctor: '::',
						_0: _user$project$OutputTools$atLeastOneSelection(selections),
						_1: {ctor: '[]'}
					},
					id: A2(
						_elm_lang$core$Basics_ops['++'],
						'repeatOverList',
						_elm_lang$core$Basics$toString(_p27))
				};
			}),
		A2(
			_user$project$Utils$dedupBy,
			_user$project$Lang$valEId,
			A2(
				_elm_lang$core$List$filter,
				function (_p29) {
					return !_user$project$Lang$isVar(
						_user$project$Lang$valExp(_p29));
				},
				A2(
					_elm_lang$core$List$filter,
					function (_p30) {
						return A2(
							F2(
								function (x, y) {
									return !_elm_lang$core$Native_Utils.eq(x, y);
								}),
							{ctor: '[]'},
							A2(
								_elm_lang$core$Maybe$withDefault,
								{ctor: '[]'},
								_user$project$Lang$vListToMaybePointVals(_p30)));
					},
					A2(_elm_lang$core$List$filterMap, _user$project$ValWidgets$widgetToMaybeVal, model.widgets)))));
};
var _user$project$OutputTools$Single = {ctor: 'Single'};
var _user$project$OutputTools$hideWidgetTool = function (_p31) {
	var _p32 = _p31;
	var _p34 = _p32.selectedFeatures;
	var onlyOffsetsSelected = function () {
		var allSelectedFeaturesAreOffsets = A2(
			_elm_lang$core$List$all,
			function (feature) {
				var _p33 = feature;
				if (((_p33.ctor === 'ShapeFeature') && (_p33._1.ctor === 'DFeat')) && (_p33._1._0.ctor === 'Offset')) {
					return _elm_lang$core$Native_Utils.cmp(_p33._0, -2) < 0;
				} else {
					return false;
				}
			},
			_p34);
		return {
			description: 'Select at least one offset widget',
			value: ((_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$length(_p34),
				0) > 0) && (allSelectedFeaturesAreOffsets && (_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(_p32.selectedShapes),
				0) && _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$Dict$size(_p32.selectedBlobs),
				0)))) ? _user$project$InterfaceModel$Satisfied : _user$project$InterfaceModel$Impossible
		};
	}();
	return {
		name: A2(
			_elm_lang$core$Basics_ops['++'],
			'Hide Widget',
			(_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$length(_p34),
				2) > -1) ? 's' : ''),
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Single,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgHideWidgets),
		reqs: {
			ctor: '::',
			_0: onlyOffsetsSelected,
			_1: {ctor: '[]'}
		},
		id: 'hideWidget'
	};
};
var _user$project$OutputTools$perhapsFocusDefinitionTool = function (model) {
	var selectedVals = A5(_user$project$ShapeWidgets$selectedValsInterpretingPoints, model.slate, model.widgets, model.selectedFeatures, model.selectedShapes, model.selectedBlobs);
	var referrantEIds = _elm_lang$core$Set$fromList(
		A2(
			_elm_lang$core$List$map,
			function (_p35) {
				return function (_) {
					return _.eid;
				}(
					function (_) {
						return _.val;
					}(
						_user$project$Lang$expEffectiveExp(
							_user$project$Lang$valExp(_p35))));
			},
			selectedVals));
	var maybeDefinition = A2(
		_user$project$Lang$findFirstNode,
		function (e) {
			return _user$project$Lang$isLet(e) && A2(
				_elm_lang$core$Maybe$withDefault,
				false,
				A2(
					_elm_lang$core$Maybe$map,
					function (boundExp) {
						return (_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$Set$size(referrantEIds),
							0) > 0) && A2(
							_user$project$Utils$isSubset,
							referrantEIds,
							_elm_lang$core$Set$fromList(
								_user$project$Lang$expEffectiveEIds(boundExp)));
					},
					_user$project$LangTools$expToMaybeLetBoundExp(e)));
		},
		model.inputExp);
	var _p36 = maybeDefinition;
	if (_p36.ctor === 'Just') {
		var _p37 = _p36._0;
		return {
			ctor: '::',
			_0: function (selections) {
				return {
					name: A2(
						_elm_lang$core$Basics_ops['++'],
						'Focus ',
						_user$project$Utils$squish(
							A2(
								_user$project$Syntax$patternUnparser,
								model.syntax,
								_user$project$LangTools$expToLetPat(_p37)))),
					shortcut: _elm_lang$core$Maybe$Nothing,
					kind: _user$project$OutputTools$Single,
					func: _elm_lang$core$Maybe$Just(
						A2(
							_user$project$InterfaceController$msgSetEditingContext,
							_user$project$LangTools$expToLetBoundExp(_p37).val.eid,
							_elm_lang$core$Maybe$Nothing)),
					reqs: {
						ctor: '::',
						_0: _user$project$OutputTools$atLeastOneSelection(selections),
						_1: {ctor: '[]'}
					},
					id: 'focusDefinition'
				};
			},
			_1: {ctor: '[]'}
		};
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$OutputTools$addToOutputTool = function (selections) {
	return {
		name: 'Add to Output',
		shortcut: _elm_lang$core$Maybe$Nothing,
		kind: _user$project$OutputTools$Single,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgAddToOutput),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastOneSelection(selections),
			_1: {ctor: '[]'}
		},
		id: 'addToOutput'
	};
};
var _user$project$OutputTools$dupeTool = function (selections) {
	return {
		name: 'Dupe',
		shortcut: _elm_lang$core$Maybe$Just('D'),
		kind: _user$project$OutputTools$Single,
		func: _elm_lang$core$Maybe$Just(_user$project$InterfaceController$msgDuplicate),
		reqs: {
			ctor: '::',
			_0: _user$project$OutputTools$atLeastOneSelection(selections),
			_1: {ctor: '[]'}
		},
		id: 'dupe'
	};
};
var _user$project$OutputTools$tools = function (model) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$List$map(
			function (tool) {
				return tool(model);
			}),
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _user$project$OutputTools$hideWidgetTool,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$OutputTools$perhapsFocusDefinitionTool(model),
					{
						ctor: '::',
						_0: _user$project$OutputTools$addToOutputTool,
						_1: {
							ctor: '::',
							_0: _user$project$OutputTools$chooseTerminationConditionTool,
							_1: {ctor: '[]'}
						}
					})),
			_1: {
				ctor: '::',
				_0: _user$project$OutputTools$perhapsAddArgumentTool(model),
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _user$project$OutputTools$reorderInListTool,
						_1: {ctor: '[]'}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _user$project$OutputTools$makeEqualTool,
							_1: {
								ctor: '::',
								_0: _user$project$OutputTools$relateTool,
								_1: {ctor: '[]'}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '::',
								_0: _user$project$OutputTools$dupeTool,
								_1: {
									ctor: '::',
									_0: _user$project$OutputTools$mergeTool,
									_1: {
										ctor: '::',
										_0: _user$project$OutputTools$groupTool,
										_1: {
											ctor: '::',
											_0: _user$project$OutputTools$abstractTool,
											_1: {ctor: '[]'}
										}
									}
								}
							},
							_1: {
								ctor: '::',
								_0: _user$project$OutputTools$fillPBEHoleTools(model),
								_1: {
									ctor: '::',
									_0: {
										ctor: '::',
										_0: _user$project$OutputTools$repeatByIndexedMergeTool,
										_1: {ctor: '[]'}
									},
									_1: {
										ctor: '::',
										_0: _user$project$OutputTools$pointListBasedRepeatTools(model),
										_1: {
											ctor: '::',
											_0: _user$project$OutputTools$functionBasedRepeatTools(model),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};

var _user$project$SleekView$noAvailableTools = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('no-available-tools'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('There are no available tools based on these selections. Press '),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$i,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Escape'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' to clear.'),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$SleekView$deuceOverlay = function (model) {
	var disabledFlag = function () {
		var _p0 = model.preview;
		if (_p0.ctor === 'Just') {
			return ' disabled';
		} else {
			return '';
		}
	}();
	var pointerEvents = _user$project$InterfaceModel$deuceActive(model) ? 'auto' : 'none';
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(_elm_lang$core$Basics_ops['++'], 'deuce-overlay-container', disabledFlag)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: pointerEvents},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'top',
								_1: _user$project$SleekLayout$px(model.codeBoxInfo.scrollerTop)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'left',
									_1: _user$project$SleekLayout$px(model.codeBoxInfo.scrollerLeft - _user$project$SleekLayout$deuceOverlayBleed)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'width',
										_1: _user$project$SleekLayout$px(model.codeBoxInfo.scrollerWidth + _user$project$SleekLayout$deuceOverlayBleed)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'height',
											_1: _user$project$SleekLayout$px(model.codeBoxInfo.scrollerHeight)
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$svg,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$class('deuce-overlay'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$width('10000000'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height('10000000'),
							_1: {
								ctor: '::',
								_0: function (_p1) {
									return _elm_lang$svg$Svg_Attributes$style(
										_user$project$HtmlUtils$styleListToString(_p1));
								}(
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'top',
											_1: _user$project$SleekLayout$px(0 - model.codeBoxInfo.scrollTop)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'left',
												_1: _user$project$SleekLayout$px(0 - model.codeBoxInfo.scrollLeft)
											},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: _user$project$Deuce$overlay(model),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$onbeforeunloadDataElement = function (model) {
	var needsSaveString = model.needsSave ? 'true' : 'false';
	return A2(
		_elm_lang$html$Html$input,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$type_('hidden'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('onbeforeunload-data'),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-needs-save', needsSaveString),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html_Attributes$attribute,
							'data-filename',
							A2(_user$project$InterfaceModel$prettyFilename, _user$project$InterfaceModel$WithExtension, model)),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$SleekView$subtleBackground = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('subtle-background'),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _user$project$SleekView$viewFileIndexEntry = function (filename) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('file-listing'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$b,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(filename.name),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'.',
								_user$project$File$fileExtensionToString(filename.extension))),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$toolHeader = function (title) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('tool-header'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(title),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$buttonSelectedColor = '#DDDDDD';
var _user$project$SleekView$buttonRegularColor = '#FFFFFF';
var _user$project$SleekView$iconButtonExtraAttrs = F7(
	function (model, iconName, maybeTitle, extraAttrs, onClickHandler, btnKind, disabled) {
		var iconHtml = function () {
			var _p2 = {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Dict$get,
					_user$project$Utils$naturalToCamelCase(iconName),
					model.icons),
				_1: A2(_elm_lang$core$Dict$get, iconName, model.icons)
			};
			_v1_2:
			do {
				if (_p2.ctor === '_Tuple2') {
					if (_p2._0.ctor === 'Just') {
						return _p2._0._0;
					} else {
						if (_p2._1.ctor === 'Just') {
							return _p2._1._0;
						} else {
							break _v1_2;
						}
					}
				} else {
					break _v1_2;
				}
			} while(false);
			return _elm_lang$html$Html$text('');
		}();
		var color = function () {
			var _p3 = btnKind;
			switch (_p3.ctor) {
				case 'Regular':
					return _user$project$SleekView$buttonRegularColor;
				case 'Unselected':
					return _user$project$SleekView$buttonRegularColor;
				default:
					return _user$project$SleekView$buttonSelectedColor;
			}
		}();
		var commonAttrs = {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$disabled(disabled),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('icon-button'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'word-wrap', _1: 'break-word'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background', _1: color},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'hidden'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		};
		return A2(
			_elm_lang$html$Html$button,
			A2(
				_elm_lang$core$Basics_ops['++'],
				commonAttrs,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(_user$project$HtmlUtils$handleEventAndStop, 'mousedown', _user$project$InterfaceController$msgNoop),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(onClickHandler),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$title(
									A2(_elm_lang$core$Maybe$withDefault, iconName, maybeTitle)),
								_1: {ctor: '[]'}
							}
						}
					},
					extraAttrs)),
			{
				ctor: '::',
				_0: iconHtml,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('icon-button-label'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(iconName),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SleekView$iconButton = F6(
	function (model, iconName, maybeTitle, onClickHandler, btnKind, disabled) {
		return A7(
			_user$project$SleekView$iconButtonExtraAttrs,
			model,
			iconName,
			maybeTitle,
			{ctor: '[]'},
			onClickHandler,
			btnKind,
			disabled);
	});
var _user$project$SleekView$textOutput = function (text) {
	return A2(
		_elm_lang$html$Html$textarea,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('text-output'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$readonly(true),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(text),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$outputPanel = function (model) {
	var outputPanelWarning = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('output-panel-warning'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'top',
							_1: function (_p4) {
								return _user$project$SleekLayout$px(
									_elm_lang$core$Basics$negate(_p4));
							}(_user$project$SleekLayout$panelBorderWidth)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'right',
								_1: function (_p5) {
									return _user$project$SleekLayout$px(
										_elm_lang$core$Basics$negate(_p5));
								}(_user$project$SleekLayout$panelBorderWidth)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'bottom',
									_1: function (_p6) {
										return _user$project$SleekLayout$px(
											_elm_lang$core$Basics$negate(_p6));
									}(_user$project$SleekLayout$panelBorderWidth)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'left',
										_1: function (_p7) {
											return _user$project$SleekLayout$px(
												_elm_lang$core$Basics$negate(_p7));
										}(_user$project$SleekLayout$panelBorderWidth)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
	var canvasDim = _user$project$SleekLayout$outputCanvas(model);
	var output = function () {
		var _p8 = {ctor: '_Tuple3', _0: model.errorBox, _1: model.outputMode, _2: model.preview};
		_v3_5:
		do {
			_v3_4:
			do {
				if (_p8._2.ctor === 'Just') {
					if (_p8._2._0.ctor === '_Tuple2') {
						if (_p8._2._0._1.ctor === 'Err') {
							return {
								ctor: '::',
								_0: _user$project$SleekView$textOutput(_p8._2._0._1._0),
								_1: {ctor: '[]'}
							};
						} else {
							return A2(_user$project$Canvas$build, canvasDim, model);
						}
					} else {
						if (_p8._1.ctor === 'ShowValue') {
							break _v3_4;
						} else {
							break _v3_5;
						}
					}
				} else {
					if (_p8._0.ctor === 'Just') {
						return {
							ctor: '::',
							_0: _user$project$SleekView$textOutput(_p8._0._0),
							_1: {ctor: '[]'}
						};
					} else {
						switch (_p8._1.ctor) {
							case 'Print':
								return {
									ctor: '::',
									_0: _user$project$SleekView$textOutput(_p8._1._0),
									_1: {ctor: '[]'}
								};
							case 'ShowValue':
								break _v3_4;
							default:
								break _v3_5;
						}
					}
				}
			} while(false);
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$textarea,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(
							function (s) {
								return A2(
									_user$project$InterfaceModel$Msg,
									'Update Value Editor',
									function (m) {
										return _elm_lang$core$Native_Utils.update(
											m,
											{valueEditorString: s});
									});
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '24px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '80%'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(model.valueEditorString),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$InterfaceController$msgCallUpdate),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '16px'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Update (⌘Enter)'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			};
		} while(false);
		return A2(_user$project$Canvas$build, canvasDim, model);
	}();
	var contextLabel = A2(
		_elm_lang$html$Html$b,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Context: '),
			_1: {ctor: '[]'}
		});
	var contextBreadCrumbs = function () {
		var _p9 = model.editingContext;
		if (_p9.ctor === 'Nothing') {
			return {
				ctor: '::',
				_0: contextLabel,
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Program'),
					_1: {ctor: '[]'}
				}
			};
		} else {
			var breadCrumbs = {
				ctor: '::',
				_0: 'Program',
				_1: A2(_user$project$LangTools$expDescriptionParts, model.inputExp, _p9._0._0)
			};
			return {
				ctor: '::',
				_0: contextLabel,
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_elm_lang$core$String$join, ' > ', breadCrumbs)),
					_1: {ctor: '[]'}
				}
			};
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('panel outlined output-panel'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'left',
							_1: function (_p10) {
								return _user$project$SleekLayout$px(
									function (_) {
										return _.x;
									}(_p10));
							}(
								_user$project$SleekLayout$outputPanel(model))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'top',
								_1: function (_p11) {
									return _user$project$SleekLayout$px(
										function (_) {
											return _.y;
										}(_p11));
								}(
									_user$project$SleekLayout$outputPanel(model))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'width',
									_1: function (_p12) {
										return _user$project$SleekLayout$px(
											function (_) {
												return _.width;
											}(_p12));
									}(
										_user$project$SleekLayout$outputPanel(model))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'height',
										_1: function (_p13) {
											return _user$project$SleekLayout$px(
												function (_) {
													return _.height;
												}(_p13));
										}(
											_user$project$SleekLayout$outputPanel(model))
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('context-bar'),
					_1: {ctor: '[]'}
				},
				contextBreadCrumbs),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('outputCanvas'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'width',
										_1: _user$project$SleekLayout$px(canvasDim.width)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'height',
											_1: _user$project$SleekLayout$px(canvasDim.height)
										},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					output),
				_1: {
					ctor: '::',
					_0: outputPanelWarning,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$SleekView$mainResizer = function (model) {
	var mainResizerBB = _user$project$SleekLayout$mainResizer(model);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('resizer main-resizer'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'width',
							_1: function (_p14) {
								return _user$project$SleekLayout$px(
									function (_) {
										return _.width;
									}(_p14));
							}(mainResizerBB)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'height',
								_1: function (_p15) {
									return _user$project$SleekLayout$px(
										function (_) {
											return _.height;
										}(_p15));
								}(mainResizerBB)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'line-height',
									_1: function (_p16) {
										return _user$project$SleekLayout$px(
											function (_) {
												return _.height;
											}(_p16));
									}(mainResizerBB)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'left',
										_1: function (_p17) {
											return _user$project$SleekLayout$px(
												function (_) {
													return _.x;
												}(_p17));
										}(mainResizerBB)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'top',
											_1: function (_p18) {
												return _user$project$SleekLayout$px(
													function (_) {
														return _.y;
													}(_p18));
											}(mainResizerBB)
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseDown(_user$project$InterfaceController$msgDragMainResizer),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseUp(_user$project$InterfaceController$msgClearDrag),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('⦀'),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$fileIndicator = function (model) {
	var filenameHtml = _elm_lang$html$Html$text(
		A2(_user$project$InterfaceModel$prettyFilename, _user$project$InterfaceModel$WithExtension, model));
	var wrapper = model.needsSave ? A2(
		_elm_lang$html$Html$i,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: filenameHtml,
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' *'),
				_1: {ctor: '[]'}
			}
		}) : filenameHtml;
	return A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('file-indicator'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: wrapper,
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$wrapSynthesisResultsSelect = _elm_lang$html$Html$div(
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('synthesis-results'),
		_1: {ctor: '[]'}
	});
var _user$project$SleekView$menuOptions = function (options) {
	var menuOptionDivider = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('menu-option-divider'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('menu-options'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'top',
							_1: function (_p19) {
								return _user$project$SleekLayout$px(
									function (_) {
										return _.height;
									}(_p19));
							}(_user$project$SleekLayout$menuBar)
						},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$intersperse,
				{
					ctor: '::',
					_0: menuOptionDivider,
					_1: {ctor: '[]'}
				},
				options)));
};
var _user$project$SleekView$currentMenuAmount = function (_p20) {
	var _p21 = _p20;
	return _p21.shown + _p21.extra;
};
var _user$project$SleekView$generalUiButton = F4(
	function (disabled, userClass, title, onClickHandler) {
		var disabledFlag = disabled ? 'disabled ' : '';
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'ui-button ',
						A2(_elm_lang$core$Basics_ops['++'], disabledFlag, userClass))),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(onClickHandler),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(title),
				_1: {ctor: '[]'}
			});
	});
var _user$project$SleekView$styledUiButton = _user$project$SleekView$generalUiButton(false);
var _user$project$SleekView$uiButton = _user$project$SleekView$styledUiButton('');
var _user$project$SleekView$closeUiButton = A2(_user$project$SleekView$styledUiButton, 'close', '');
var _user$project$SleekView$dialogBox = function (zIndex) {
	return function (width) {
		return function (height) {
			return function (closable) {
				return function (db) {
					return function (model) {
						return function (headerStyles) {
							return function (headerElements) {
								return function (parentStyles) {
									return function (elements) {
										var activeFlag = A2(_user$project$InterfaceModel$isDialogBoxShowing, db, model) ? ' active' : '';
										var closeDialogBoxButton = _user$project$SleekView$closeUiButton(
											_user$project$InterfaceController$msgCloseDialogBox(db));
										var closeButton = closable ? {
											ctor: '::',
											_0: closeDialogBoxButton,
											_1: {ctor: '[]'}
										} : {ctor: '[]'};
										return A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class(
													A2(_elm_lang$core$Basics_ops['++'], 'dialog-box', activeFlag)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: width},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: height},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'z-index', _1: zIndex},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$h1,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(headerStyles),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{ctor: '[]'},
															headerElements),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{ctor: '[]'},
																closeButton),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('content'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(parentStyles),
																_1: {ctor: '[]'}
															}
														},
														elements),
													_1: {ctor: '[]'}
												}
											});
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$SleekView$bigDialogBox = A3(_user$project$SleekView$dialogBox, '100', '85%', '85%');
var _user$project$SleekView$fileNewDialogBox = function (model) {
	var viewTemplate = function (_p22) {
		var _p23 = _p22;
		var _p24 = _p23._0;
		return A3(
			_user$project$SleekView$styledUiButton,
			'wide',
			_p24,
			A2(_user$project$InterfaceController$msgAskNew, _p24, model.needsSave));
	};
	var viewCategory = function (_p25) {
		var _p26 = _p25;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h2,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p26._0),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A2(_elm_lang$core$List$map, viewTemplate, _p26._1)));
	};
	return A7(
		_user$project$SleekView$bigDialogBox,
		true,
		_user$project$InterfaceModel$New,
		model,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('New From Template...'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, viewCategory, _user$project$ExamplesGenerated$templateCategories));
};
var _user$project$SleekView$fileSaveAsDialogBox = function (model) {
	var currentFilesHeader = A2(
		_elm_lang$html$Html$h2,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Current Files'),
			_1: {ctor: '[]'}
		});
	var saveAsInput = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('save-as-input'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$InterfaceController$msgUpdateFilenameInput),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('save-as-button'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(_user$project$SleekView$uiButton, 'Save', _user$project$InterfaceController$msgSaveAs),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
	var saveAsInputHeader = A2(
		_elm_lang$html$Html$h2,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Filename (default '),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$code,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('.elm'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(')'),
					_1: {ctor: '[]'}
				}
			}
		});
	return A7(
		_user$project$SleekView$bigDialogBox,
		true,
		_user$project$InterfaceModel$SaveAs,
		model,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Save As...'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: saveAsInputHeader,
				_1: {
					ctor: '::',
					_0: saveAsInput,
					_1: {
						ctor: '::',
						_0: currentFilesHeader,
						_1: {ctor: '[]'}
					}
				}
			},
			A2(_elm_lang$core$List$map, _user$project$SleekView$viewFileIndexEntry, model.fileIndex)));
};
var _user$project$SleekView$fileOpenDialogBox = function (model) {
	var fileOpenRow = function (filename) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('open-listing'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$b,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(filename.name),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'.',
									_user$project$File$fileExtensionToString(filename.extension))),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('file-open-delete-buttons'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_user$project$SleekView$uiButton,
								'Open',
								A2(_user$project$InterfaceController$msgAskOpen, filename, model.needsSave)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('file-delete-button'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_user$project$SleekView$uiButton,
											'Delete',
											_user$project$InterfaceController$msgDelete(filename)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	};
	return A7(
		_user$project$SleekView$bigDialogBox,
		true,
		_user$project$InterfaceModel$Open,
		model,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Open...'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, fileOpenRow, model.fileIndex));
};
var _user$project$SleekView$smallDialogBox = A3(_user$project$SleekView$dialogBox, '101', '35%', '35%');
var _user$project$SleekView$alertSaveDialogBox = function (model) {
	return A7(
		_user$project$SleekView$smallDialogBox,
		false,
		_user$project$InterfaceModel$AlertSave,
		model,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('alert-warning'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Warning'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '20px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'flex-grow', _1: '1'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'flex-direction', _1: 'column'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'space-between'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$i,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$InterfaceModel$prettyFilename, _user$project$InterfaceModel$WithExtension, model)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' has unsaved changes. Would you like to continue anyway?'),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(_user$project$SleekView$uiButton, 'Cancel', _user$project$InterfaceController$msgCancelFileOperation),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '30px'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(_user$project$SleekView$uiButton, 'Yes (Discard Changes)', _user$project$InterfaceController$msgConfirmFileOperation),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$importCodeDialogBox = function (model) {
	return A7(
		_user$project$SleekView$smallDialogBox,
		true,
		_user$project$InterfaceModel$ImportCode,
		model,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Import Code...'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('centered'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('file'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id(_user$project$InterfaceModel$importCodeFileInputId),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$SleekView$uiButton,
									'Import',
									_user$project$InterfaceController$msgAskImportCode(model.needsSave)),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$dialogBoxes = function (model) {
	return {
		ctor: '::',
		_0: _user$project$SleekView$fileNewDialogBox(model),
		_1: {
			ctor: '::',
			_0: _user$project$SleekView$fileSaveAsDialogBox(model),
			_1: {
				ctor: '::',
				_0: _user$project$SleekView$fileOpenDialogBox(model),
				_1: {
					ctor: '::',
					_0: _user$project$SleekView$alertSaveDialogBox(model),
					_1: {
						ctor: '::',
						_0: _user$project$SleekView$importCodeDialogBox(model),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
};
var _user$project$SleekView$smallWideDialogBox = A3(_user$project$SleekView$dialogBox, '101', '60%', '35%');
var _user$project$SleekView$popupPanel = function (args) {
	var _p27 = A2(_user$project$Utils$mapBoth, _user$project$SleekLayout$px, args.pos);
	var xString = _p27._0;
	var yString = _p27._1;
	var dragger = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('dragger'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseDown(args.dragHandler),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseUp(_user$project$InterfaceController$msgClearDrag),
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				args.title,
				{
					ctor: '::',
					_0: _user$project$SleekView$closeUiButton(
						_user$project$InterfaceController$msgKeyDown(_user$project$Keys$keyEsc)),
					_1: {ctor: '[]'}
				})),
		_1: {ctor: '[]'}
	};
	var disabledFlag = args.disabled ? 'disabled ' : '';
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'popup-panel panel outlined ',
					A2(_elm_lang$core$Basics_ops['++'], disabledFlag, args.$class))),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'left', _1: xString},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'top', _1: yString},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		A2(_elm_lang$core$Basics_ops['++'], dragger, args.content));
};
var _user$project$SleekView$logMouseOver = function (itemDescription) {
	return {
		ctor: '::',
		_0: _elm_lang$html$Html_Events$onMouseOver(
			A2(
				_user$project$InterfaceModel$Msg,
				A2(_elm_lang$core$Basics_ops['++'], 'Hover ', itemDescription),
				_elm_lang$core$Basics$identity)),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onMouseOut(
				A2(
					_user$project$InterfaceModel$Msg,
					A2(_elm_lang$core$Basics_ops['++'], 'Leave ', itemDescription),
					_elm_lang$core$Basics$identity)),
			_1: {ctor: '[]'}
		}
	};
};
var _user$project$SleekView$menuHeading = function (heading) {
	var attributes = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('menu-heading'),
			_1: {
				ctor: '::',
				_0: A3(
					_elm_lang$html$Html_Events$onWithOptions,
					'click',
					{stopPropagation: true, preventDefault: false},
					_elm_lang$core$Json_Decode$succeed(_user$project$InterfaceController$msgToggleMenu)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'height',
								_1: function (_p28) {
									return _user$project$SleekLayout$px(
										function (_) {
											return _.height;
										}(_p28));
								}(_user$project$SleekLayout$menuBar)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'line-height',
									_1: function (_p29) {
										return _user$project$SleekLayout$px(
											function (_) {
												return _.height;
											}(_p29));
									}(_user$project$SleekLayout$menuBar)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'padding',
										_1: A2(
											_elm_lang$core$Basics_ops['++'],
											'0 ',
											function (_p30) {
												return _user$project$SleekLayout$px(
													_user$project$SleekLayout$half(
														function (_) {
															return _.height;
														}(_p30)));
											}(_user$project$SleekLayout$menuBar))
									},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		_user$project$SleekView$logMouseOver(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Menu \"',
				A2(_elm_lang$core$Basics_ops['++'], heading, '\"'))));
	return A2(
		_elm_lang$html$Html$div,
		attributes,
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(heading),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$menu = F2(
	function (heading, options) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('menu'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _user$project$SleekView$menuHeading(heading),
				_1: {
					ctor: '::',
					_0: _user$project$SleekView$menuOptions(options),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SleekView$textButton = function (tb) {
	var _p31 = tb.disabled ? {ctor: '_Tuple3', _0: ' disabled', _1: _user$project$InterfaceController$msgNoop, _2: true} : {ctor: '_Tuple3', _0: '', _1: tb.onClick, _2: tb.stopPropagation};
	var disabledFlag = _p31._0;
	var realOnClick = _p31._1;
	var realStopPropagation = _p31._2;
	return A2(
		_elm_lang$html$Html$span,
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'text-button', disabledFlag)),
				_1: {
					ctor: '::',
					_0: A3(
						_elm_lang$html$Html_Events$onWithOptions,
						'click',
						{stopPropagation: realStopPropagation, preventDefault: false},
						_elm_lang$core$Json_Decode$succeed(realOnClick)),
					_1: {ctor: '[]'}
				}
			},
			tb.attributes),
		tb.content);
};
var _user$project$SleekView$defaultTb = {
	attributes: {ctor: '[]'},
	content: {ctor: '[]'},
	onClick: _user$project$InterfaceController$msgNoop,
	disabled: false,
	stopPropagation: false
};
var _user$project$SleekView$simpleHtmlTextButton = function (content) {
	return _user$project$SleekView$textButton(
		_elm_lang$core$Native_Utils.update(
			_user$project$SleekView$defaultTb,
			{content: content}));
};
var _user$project$SleekView$disableableTextButton = F3(
	function (disabled, title, onClick) {
		return _user$project$SleekView$textButton(
			_elm_lang$core$Native_Utils.update(
				_user$project$SleekView$defaultTb,
				{
					content: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(title),
						_1: {ctor: '[]'}
					},
					onClick: onClick,
					disabled: disabled,
					attributes: _user$project$SleekView$logMouseOver(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Button \"',
							A2(_elm_lang$core$Basics_ops['++'], title, '\"')))
				}));
	});
var _user$project$SleekView$simpleTextButton = _user$project$SleekView$disableableTextButton(false);
var _user$project$SleekView$simpleBooleanButton = F3(
	function (isOn, string, handler) {
		return A2(
			_user$project$SleekView$simpleTextButton,
			A2(
				_elm_lang$core$Basics_ops['++'],
				isOn ? '✔︎ ' : '',
				string),
			handler(!isOn));
	});
var _user$project$SleekView$simpleTextRadioButton = F3(
	function (active, title, onClick) {
		var _p32 = active ? {ctor: '_Tuple2', _0: 'radio-button-active', _1: '●'} : {ctor: '_Tuple2', _0: '', _1: '○'};
		var activeFlag = _p32._0;
		var radioButtonIcon = _p32._1;
		return _user$project$SleekView$textButton(
			_elm_lang$core$Native_Utils.update(
				_user$project$SleekView$defaultTb,
				{
					content: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('radio-button-icon'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(radioButtonIcon),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class(activeFlag),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(title),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					onClick: onClick,
					attributes: _user$project$SleekView$logMouseOver(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Radio Button \"',
							A2(
								_elm_lang$core$Basics_ops['++'],
								radioButtonIcon,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(_elm_lang$core$Basics_ops['++'], title, '\"')))))
				}));
	});
var _user$project$SleekView$codePanel = function (model) {
	var statusBar = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('status-bar'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$b,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Current file: '),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$SleekView$fileIndicator(model),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('needs-run-light'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
	var editor = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('editor'),
			_1: {
				ctor: '::',
				_0: _user$project$HtmlUtils$onRightClick(
					_user$project$InterfaceController$msgDeuceRightClick(_user$project$InterfaceModel$ShowPossible)),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
	var runButton = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('run'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(_user$project$InterfaceController$msgRun),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Run ▸'),
			_1: {ctor: '[]'}
		});
	var emoji = function () {
		var happinessEmoji = (_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, -40) < 1) ? '😎' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, -20) < 1) ? '😍' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, -10) < 1) ? '😁' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, -5) < 1) ? '😃' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 0) < 1) ? '🙂' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 1) < 1) ? '😐' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 2) < 1) ? '😬' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 3) < 1) ? '😕' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 4) < 1) ? '🙁' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 5) < 1) ? '☹️' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 6) < 1) ? '😔' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 7) < 1) ? '😣' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 8) < 1) ? '😖' : ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 9) < 1) ? '😫' : '😡')))))))))))));
		var emoji = ((_elm_lang$core$Native_Utils.cmp(model.runFailuresInARowCount, 3) < 1) && _user$project$InterfaceModel$needsRun(model)) ? '🤔' : happinessEmoji;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('emoji'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(emoji),
				_1: {ctor: '[]'}
			});
	}();
	var cleanButton = function () {
		var disabled = function () {
			var _p33 = model.outputMode;
			if (_p33.ctor === 'Live') {
				return false;
			} else {
				return true;
			}
		}();
		return A3(_user$project$SleekView$disableableTextButton, disabled, 'Clean Up', _user$project$InterfaceController$msgCleanCode);
	}();
	var redoButton = _user$project$SleekView$textButton(
		_elm_lang$core$Native_Utils.update(
			_user$project$SleekView$defaultTb,
			{
				attributes: _user$project$SleekView$logMouseOver('Redo'),
				content: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('⟳ Redo'),
					_1: {ctor: '[]'}
				},
				onClick: _user$project$InterfaceController$msgRedo,
				disabled: !_user$project$History$hasFuture(model.history)
			}));
	var undoButton = _user$project$SleekView$textButton(
		_elm_lang$core$Native_Utils.update(
			_user$project$SleekView$defaultTb,
			{
				attributes: _user$project$SleekView$logMouseOver('Undo'),
				content: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('⟲ Undo'),
					_1: {ctor: '[]'}
				},
				onClick: _user$project$InterfaceController$msgUndo,
				disabled: !_user$project$History$hasExtendedPast(model.history)
			}));
	var actionBar = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('action-bar'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: undoButton,
				_1: {
					ctor: '::',
					_0: redoButton,
					_1: {
						ctor: '::',
						_0: cleanButton,
						_1: {ctor: '[]'}
					}
				}
			},
			_user$project$Updatable$extract(model.enableTextEdits) ? {
				ctor: '::',
				_0: runButton,
				_1: {
					ctor: '::',
					_0: emoji,
					_1: {ctor: '[]'}
				}
			} : {ctor: '[]'}));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('panel outlined code-panel'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'left',
							_1: function (_p34) {
								return _user$project$SleekLayout$px(
									function (_) {
										return _.x;
									}(_p34));
							}(
								_user$project$SleekLayout$codePanel(model))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'top',
								_1: function (_p35) {
									return _user$project$SleekLayout$px(
										function (_) {
											return _.y;
										}(_p35));
								}(
									_user$project$SleekLayout$codePanel(model))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'width',
									_1: function (_p36) {
										return _user$project$SleekLayout$px(
											function (_) {
												return _.width;
											}(_p36));
									}(
										_user$project$SleekLayout$codePanel(model))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'height',
										_1: function (_p37) {
											return _user$project$SleekLayout$px(
												function (_) {
													return _.height;
												}(_p37));
										}(
											_user$project$SleekLayout$codePanel(model))
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: statusBar,
			_1: {
				ctor: '::',
				_0: actionBar,
				_1: {
					ctor: '::',
					_0: editor,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$SleekView$italicizeQuotes = F2(
	function (quoteString, text) {
		var mapper = function (_p38) {
			var _p39 = _p38;
			var _p40 = _p39._1;
			return _user$project$Utils$isEven(_p39._0) ? _elm_lang$html$Html$text(_p40) : A2(
				_elm_lang$html$Html$i,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p40),
					_1: {ctor: '[]'}
				});
		};
		var splitString = A2(_elm_lang$core$String$split, quoteString, text);
		return A2(_user$project$Utils$mapi0, mapper, splitString);
	});
var _user$project$SleekView$editCodeEntry = F2(
	function (model, _p41) {
		var _p42 = _p41;
		var _p43 = _p42._1._0;
		var disabled = A2(_elm_lang$core$List$any, _user$project$InterfaceModel$predicateImpossible, _p43.reqs) || (!_user$project$InterfaceModel$noCodeWidgetsSelected(model));
		var isRenamer = _user$project$DeuceTools$isRenamer(_p43);
		var name = A2(_elm_lang$core$Basics_ops['++'], _p43.name, '...');
		var title = isRenamer ? A2(_user$project$SleekView$italicizeQuotes, '\'', name) : {
			ctor: '::',
			_0: _elm_lang$html$Html$text(name),
			_1: {ctor: '[]'}
		};
		return _user$project$SleekView$textButton(
			_elm_lang$core$Native_Utils.update(
				_user$project$SleekView$defaultTb,
				{
					content: title,
					disabled: disabled,
					onClick: A2(_user$project$InterfaceController$msgSetSelectedDeuceTool, true, _p42._1),
					attributes: _user$project$SleekView$logMouseOver(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Edit Code Top Menu Item \"',
							A2(_elm_lang$core$Basics_ops['++'], name, '\"')))
				}));
	});
var _user$project$SleekView$deuceRightClickMenuEntry = F2(
	function (model, _p44) {
		var _p45 = _p44;
		var _p46 = _p45._1._0;
		var disabled = A2(_elm_lang$core$List$any, _user$project$InterfaceModel$predicateImpossible, _p46.reqs);
		var isRenamer = _user$project$DeuceTools$isRenamer(_p46);
		var name = A2(_elm_lang$core$Basics_ops['++'], _p46.name, '...');
		var title = isRenamer ? A2(_user$project$SleekView$italicizeQuotes, '\'', name) : {
			ctor: '::',
			_0: _elm_lang$html$Html$text(name),
			_1: {ctor: '[]'}
		};
		return disabled ? {ctor: '[]'} : {
			ctor: '::',
			_0: _user$project$SleekView$textButton(
				_elm_lang$core$Native_Utils.update(
					_user$project$SleekView$defaultTb,
					{
						content: title,
						onClick: A2(_user$project$InterfaceController$msgSetSelectedDeuceTool, false, _p45._1),
						attributes: _user$project$SleekView$logMouseOver(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Button (Deuce Right-Click Menu) \"',
								A2(_elm_lang$core$Basics_ops['++'], name, '\"')))
					})),
			_1: {ctor: '[]'}
		};
	});
var _user$project$SleekView$deuceRightClickMenu = function (model) {
	var content = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('deuce-right-click-menu'),
				_1: {ctor: '[]'}
			},
			_elm_lang$core$List$concat(
				A2(
					_elm_lang$core$List$concatMap,
					_user$project$Utils$mapi1(
						_user$project$SleekView$deuceRightClickMenuEntry(model)),
					model.deuceToolsAndResults))),
		_1: {ctor: '[]'}
	};
	var disabled = (!model.enableDeuceTextSelection) || (!_user$project$InterfaceModel$deuceRightClickMenuShown(model));
	return _user$project$SleekView$popupPanel(
		{
			pos: model.popupPanelPositions.deuceRightClickMenu,
			disabled: disabled,
			dragHandler: _user$project$InterfaceController$msgDragDeuceRightClickMenu,
			$class: '',
			title: {
				ctor: '::',
				_0: _elm_lang$html$Html$text('Code Tools'),
				_1: {ctor: '[]'}
			},
			content: content
		});
};
var _user$project$SleekView$groupDisabled = F2(
	function (disallowSelectedFeatures, model) {
		var noBlobs = _elm_lang$core$Dict$isEmpty(model.selectedBlobs);
		var noFeatures = _elm_lang$core$List$isEmpty(model.selectedFeatures);
		return noBlobs || (disallowSelectedFeatures && (!noFeatures));
	});
var _user$project$SleekView$relateDisabled = function (model) {
	return _user$project$InterfaceModel$nothingSelectedInOutput(model);
};
var _user$project$SleekView$allButLast = function (xs) {
	var len = _elm_lang$core$List$length(xs);
	return A2(_elm_lang$core$List$take, len - 1, xs);
};
var _user$project$SleekView$TextButtonOptions = F5(
	function (a, b, c, d, e) {
		return {attributes: a, content: b, onClick: c, disabled: d, stopPropagation: e};
	});
var _user$project$SleekView$RevealInfo = F3(
	function (a, b, c) {
		return {shown: a, extra: b, max: c};
	});
var _user$project$SleekView$RevealAll = {ctor: 'RevealAll'};
var _user$project$SleekView$revealer = function (revealInfo) {
	var remainingCount = revealInfo.max - _user$project$SleekView$currentMenuAmount(revealInfo);
	return A8(
		_user$project$SleekView$generalHtmlHoverMenu,
		'revealer',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Show ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(remainingCount),
								' More'))),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		_user$project$SleekView$RevealAll,
		_user$project$InterfaceController$msgNoop,
		_user$project$InterfaceController$msgNoop,
		_user$project$InterfaceController$msgIncreaseExtraMenuAmount(10),
		false,
		{ctor: '[]'});
};
var _user$project$SleekView$generalHtmlHoverMenu = F8(
	function ($class, titleHtml, revealAmount, onMouseEnter, onMouseLeave, onClick, disabled, dropdownContent) {
		var revealContent = function () {
			var _p47 = revealAmount;
			if (_p47.ctor === 'RevealAll') {
				return {ctor: '[]'};
			} else {
				var _p48 = _p47._0;
				return (_elm_lang$core$Native_Utils.cmp(
					_user$project$SleekView$currentMenuAmount(_p48),
					_p48.max) < 0) ? {
					ctor: '::',
					_0: _user$project$SleekView$revealer(_p48),
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
			}
		}();
		var _p49 = disabled ? {ctor: '_Tuple4', _0: 'disabled ', _1: _user$project$InterfaceController$msgNoop, _2: _user$project$InterfaceController$msgNoop, _3: _user$project$InterfaceController$msgNoop} : {ctor: '_Tuple4', _0: '', _1: onMouseEnter, _2: onMouseLeave, _3: onClick};
		var disabledFlag = _p49._0;
		var realOnMouseEnter = _p49._1;
		var realOnMouseLeave = _p49._2;
		var realOnClick = _p49._3;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'hover-menu ',
						A2(_elm_lang$core$Basics_ops['++'], disabledFlag, $class))),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseEnter(realOnMouseEnter),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseLeave(realOnMouseLeave),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('hover-menu-title'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$SleekView$textButton(
							_elm_lang$core$Native_Utils.update(
								_user$project$SleekView$defaultTb,
								{
									content: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('hover-menu-content'),
												_1: {ctor: '[]'}
											},
											titleHtml),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('hover-menu-indicator'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('▸'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									disabled: disabled,
									stopPropagation: true,
									onClick: realOnClick
								})),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dropdown-content'),
							_1: {ctor: '[]'}
						},
						A2(_elm_lang$core$Basics_ops['++'], dropdownContent, revealContent)),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SleekView$generalHoverMenu = function (titleString) {
	return A2(
		_user$project$SleekView$generalHtmlHoverMenu,
		'',
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(titleString),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$hoverMenu = F2(
	function (title, dropdownContent) {
		return A7(_user$project$SleekView$generalHoverMenu, title, _user$project$SleekView$RevealAll, _user$project$InterfaceController$msgNoop, _user$project$InterfaceController$msgNoop, _user$project$InterfaceController$msgNoop, false, dropdownContent);
	});
var _user$project$SleekView$deuceSynthesisResult = F4(
	function (model, path, isRenamer, _p50) {
		var _p51 = _p50;
		var _p53 = _p51._0;
		var renameInput = isRenamer ? {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('rename-input'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$InterfaceController$msgUpdateRenameVarTextBox),
							_1: {
								ctor: '::',
								_0: _user$project$HtmlUtils$onClickWithoutPropagation(_user$project$InterfaceController$msgNoop),
								_1: {
									ctor: '::',
									_0: _user$project$HtmlUtils$onKeyDown(
										function (code) {
											return _elm_lang$core$Native_Utils.eq(code, _user$project$HtmlUtils$enterKeyCode) ? A2(_user$project$InterfaceController$msgChooseDeuceExp, _p53.description, _p53.exp) : _user$project$InterfaceController$msgNoop;
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		var additionalInputs = renameInput;
		var $class = function () {
			var _p52 = A2(_elm_lang$core$Dict$get, path, model.deuceToolResultPreviews);
			if (_p52.ctor === 'Nothing') {
				return isRenamer ? '' : (_p53.isSafe ? 'expected-safe' : 'expected-unsafe');
			} else {
				return _p52._0._1;
			}
		}();
		var alreadyRun = A2(_elm_lang$core$Dict$member, path, model.deuceToolResultPreviews);
		var description = isRenamer ? A2(_user$project$SleekView$italicizeQuotes, '\'', _p53.description) : {
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				alreadyRun ? _p53.description : _p53.description),
			_1: {ctor: '[]'}
		};
		return A8(
			_user$project$SleekView$generalHtmlHoverMenu,
			$class,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						description),
					_1: {ctor: '[]'}
				},
				additionalInputs),
			_user$project$SleekView$RevealAll,
			A3(
				_user$project$InterfaceController$msgHoverDeuceResult,
				isRenamer,
				_user$project$InterfaceModel$SynthesisResult(_p53),
				path),
			A2(
				_user$project$InterfaceController$msgLeaveDeuceResult,
				_user$project$InterfaceModel$SynthesisResult(_p53),
				path),
			A2(_user$project$InterfaceController$msgChooseDeuceExp, _p53.description, _p53.exp),
			false,
			{ctor: '[]'});
	});
var _user$project$SleekView$deuceSynthesisResults = F4(
	function (model, path, isRenamer, results) {
		return _elm_lang$core$List$isEmpty(results) ? {
			ctor: '::',
			_0: A8(
				_user$project$SleekView$generalHtmlHoverMenu,
				'transformation-oops',
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Oops! Can\'t apply transformation after all.'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				_user$project$SleekView$RevealAll,
				_user$project$InterfaceController$msgNoop,
				_user$project$InterfaceController$msgNoop,
				_user$project$InterfaceController$msgNoop,
				true,
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		} : A2(
			_user$project$Utils$mapi1,
			function (_p54) {
				var _p55 = _p54;
				return A4(
					_user$project$SleekView$deuceSynthesisResult,
					model,
					A2(
						_elm_lang$core$Basics_ops['++'],
						path,
						{
							ctor: '::',
							_0: _p55._0,
							_1: {ctor: '[]'}
						}),
					isRenamer,
					_p55._1);
			},
			results);
	});
var _user$project$SleekView$editCodePopupPanel = function (model) {
	var _p56 = function () {
		var _p57 = model.selectedDeuceTool;
		if (_p57.ctor === 'Nothing') {
			return {
				ctor: '_Tuple3',
				_0: true,
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Configuration Panel'),
					_1: {ctor: '[]'}
				},
				_2: {ctor: '[]'}
			};
		} else {
			var _p61 = _p57._0._0;
			var isRenamer = _user$project$DeuceTools$isRenamer(_p61);
			var title = isRenamer ? A2(_user$project$SleekView$italicizeQuotes, '\'', _p61.name) : {
				ctor: '::',
				_0: _elm_lang$html$Html$text(_p61.name),
				_1: {ctor: '[]'}
			};
			var path = {
				ctor: '::',
				_0: 1,
				_1: {ctor: '[]'}
			};
			var content = A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h2,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Requirements'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$ul,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('requirements-list'),
								_1: {ctor: '[]'}
							},
							A2(
								_elm_lang$core$List$map,
								function (_p58) {
									var _p59 = _p58;
									var $class = function () {
										var _p60 = _p59.value;
										switch (_p60.ctor) {
											case 'FullySatisfied':
												return 'fully-satisfied';
											case 'Satisfied':
												return 'satisfied';
											case 'Possible':
												return 'possible';
											default:
												return 'impossible';
										}
									}();
									return A2(
										_elm_lang$html$Html$li,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class($class),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(_p59.description),
											_1: {ctor: '[]'}
										});
								},
								_p61.reqs)),
						_1: {ctor: '[]'}
					}
				},
				A2(_elm_lang$core$List$all, _user$project$InterfaceModel$predicateSatisfied, _p61.reqs) ? {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h2,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Code Updates'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('synthesis-results'),
								_1: {ctor: '[]'}
							},
							A4(_user$project$SleekView$deuceSynthesisResults, model, path, isRenamer, _p57._0._1)),
						_1: {ctor: '[]'}
					}
				} : {ctor: '[]'});
			return {ctor: '_Tuple3', _0: false, _1: title, _2: content};
		}
	}();
	var disabled = _p56._0;
	var title = _p56._1;
	var content = _p56._2;
	return _user$project$SleekView$popupPanel(
		{pos: model.popupPanelPositions.editCode, disabled: disabled, dragHandler: _user$project$InterfaceController$msgDragEditCodePopupPanel, $class: 'edit-code-popup-panel', title: title, content: content});
};
var _user$project$SleekView$deuceHoverMenu = F2(
	function (model, _p62) {
		var _p63 = _p62;
		var _p64 = _p63._1._0;
		var isRenamer = _user$project$DeuceTools$isRenamer(_p64);
		var title = isRenamer ? A2(_user$project$SleekView$italicizeQuotes, '\'', _p64.name) : {
			ctor: '::',
			_0: _elm_lang$html$Html$text(_p64.name),
			_1: {ctor: '[]'}
		};
		var path = {
			ctor: '::',
			_0: _p63._0,
			_1: {ctor: '[]'}
		};
		return A8(
			_user$project$SleekView$generalHtmlHoverMenu,
			'',
			title,
			_user$project$SleekView$RevealAll,
			_user$project$InterfaceController$msgNoop,
			_user$project$InterfaceController$msgNoop,
			_user$project$InterfaceController$msgNoop,
			_p63._1._2,
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('synthesis-results'),
						_1: {ctor: '[]'}
					},
					A4(_user$project$SleekView$deuceSynthesisResults, model, path, isRenamer, _p63._1._1)),
				_1: {ctor: '[]'}
			});
	});
var _user$project$SleekView$deucePopupPanel = function (model) {
	var appearDirectionFlag = model.deucePopupPanelAbove ? 'appear-above' : 'appear-below';
	return _user$project$SleekView$popupPanel(
		{
			pos: model.popupPanelPositions.deuce,
			disabled: !_user$project$InterfaceModel$deucePopupPanelShown(model),
			dragHandler: _user$project$InterfaceController$msgDragDeucePopupPanel,
			$class: A2(_elm_lang$core$Basics_ops['++'], 'deuce-popup-panel ', appearDirectionFlag),
			title: {
				ctor: '::',
				_0: _elm_lang$html$Html$text('Code Tools'),
				_1: {ctor: '[]'}
			},
			content: {
				ctor: '::',
				_0: function () {
					var maybeTypeString = function () {
						var _p65 = model.deuceState.selectedWidgets;
						_v20_2:
						do {
							if ((_p65.ctor === '::') && (_p65._1.ctor === '[]')) {
								switch (_p65._0.ctor) {
									case 'DeuceExp':
										return _elm_lang$core$Maybe$Just(
											A2(
												_elm_lang$core$Maybe$withDefault,
												'Type not found!',
												A2(
													_elm_lang$core$Maybe$map,
													function (_p66) {
														var _p67 = _p66;
														return A2(_user$project$Syntax$typeWithRolesUnparser, model.syntax, _p67._0);
													},
													A2(_elm_lang$core$Dict$get, _p65._0._0, model.idToTypeAndContextThunk))));
									case 'DeucePat':
										return _elm_lang$core$Maybe$Just(
											A2(
												_elm_lang$core$Maybe$withDefault,
												'Type not found!',
												A2(
													_elm_lang$core$Maybe$map,
													function (_p68) {
														var _p69 = _p68;
														return A2(_user$project$Syntax$typeWithRolesUnparser, model.syntax, _p69._0);
													},
													A2(
														_elm_lang$core$Maybe$andThen,
														function (pid) {
															return A2(_elm_lang$core$Dict$get, pid, model.idToTypeAndContextThunk);
														},
														A2(_user$project$LangTools$pathedPatternIdToPId, _p65._0._0, model.inputExp)))));
									default:
										break _v20_2;
								}
							} else {
								break _v20_2;
							}
						} while(false);
						return _elm_lang$core$Maybe$Nothing;
					}();
					var perhapsTypeMessage = _user$project$Utils$maybeToList(
						A2(
							_elm_lang$core$Maybe$map,
							function (typeString) {
								return A3(_user$project$SleekView$disableableTextButton, true, typeString, _user$project$InterfaceController$msgNoop);
							},
							maybeTypeString));
					var activeTools = A2(
						_user$project$Utils$mapi1,
						_user$project$SleekView$deuceHoverMenu(model),
						A2(
							_elm_lang$core$List$concatMap,
							_elm_lang$core$List$filter(
								function (_p70) {
									return _user$project$DeuceTools$isActive(
										_user$project$Utils$fst3(_p70));
								}),
							model.deuceToolsAndResults));
					return _elm_lang$core$List$isEmpty(activeTools) ? _user$project$SleekView$noAvailableTools : A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						A2(_elm_lang$core$Basics_ops['++'], perhapsTypeMessage, activeTools));
				}(),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SleekView$synthesisResultHoverMenu = F5(
	function (resultsKey, description, elementPath, exp, nextMenu) {
		return A7(
			_user$project$SleekView$generalHoverMenu,
			description,
			_user$project$SleekView$RevealAll,
			A2(_user$project$InterfaceController$msgHoverSynthesisResult, resultsKey, elementPath),
			A2(
				_user$project$InterfaceController$msgHoverSynthesisResult,
				resultsKey,
				_user$project$SleekView$allButLast(elementPath)),
			_user$project$InterfaceController$msgSelectSynthesisResult(exp),
			false,
			nextMenu);
	});
var _user$project$SleekView$synthesisResultsSelect = F2(
	function (model, resultsKey) {
		var desc = F4(
			function (description, exp, isSafe, sortKey) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					isSafe ? '' : '[UNSAFE] ',
					A4(
						_elm_lang$core$Regex$replace,
						_elm_lang$core$Regex$All,
						_elm_lang$core$Regex$regex('^Original → | → Cleaned$'),
						function (_p71) {
							return '';
						},
						description));
			});
		var resultButtonList = F3(
			function (priorPathByIndices, remainingPathByIndices, results) {
				return _elm_lang$core$Native_Utils.eq(
					results,
					{ctor: '[]'}) ? {
					ctor: '::',
					_0: A3(_user$project$SleekView$disableableTextButton, true, 'No Results', _user$project$InterfaceController$msgNoop),
					_1: {ctor: '[]'}
				} : _elm_lang$core$List$concat(
					A2(
						_user$project$Utils$mapi0,
						function (_p72) {
							var _p73 = _p72;
							var _p77 = _p73._0;
							var _p76 = _p73._1._0.exp;
							var thisElementPath = A2(
								_elm_lang$core$Basics_ops['++'],
								priorPathByIndices,
								{
									ctor: '::',
									_0: _p77,
									_1: {ctor: '[]'}
								});
							var nextMenu = function () {
								var _p74 = remainingPathByIndices;
								if (_p74.ctor === '::') {
									if (_elm_lang$core$Native_Utils.eq(_p77, _p74._0)) {
										var _p75 = _p73._1._0.children;
										if (_p75.ctor === 'Just') {
											return A3(resultButtonList, thisElementPath, _p74._1, _p75._0);
										} else {
											return {ctor: '[]'};
										}
									} else {
										return {ctor: '[]'};
									}
								} else {
									return {ctor: '[]'};
								}
							}();
							return {
								ctor: '::',
								_0: A5(
									_user$project$SleekView$synthesisResultHoverMenu,
									resultsKey,
									A4(desc, _p73._1._0.description, _p76, _p73._1._0.isSafe, _p73._1._0.sortKey),
									thisElementPath,
									_p76,
									nextMenu),
								_1: {ctor: '[]'}
							};
						},
						results));
			});
		var _p78 = A2(_elm_lang$core$Dict$get, resultsKey, model.synthesisResultsDict);
		if (_p78.ctor === 'Just') {
			return A3(
				resultButtonList,
				{ctor: '[]'},
				model.hoveredSynthesisResultPathByIndices,
				_p78._0);
		} else {
			return {
				ctor: '::',
				_0: A3(_user$project$SleekView$disableableTextButton, true, 'Synthesizing... ⏳ ⏰ 👵🏽 👴🏼 ⚰️ 🏁', _user$project$InterfaceController$msgNoop),
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$SleekView$wrappedSynthesisResultsSelect = F2(
	function (model, resultsKey) {
		return _user$project$SleekView$wrapSynthesisResultsSelect(
			A2(_user$project$SleekView$synthesisResultsSelect, model, resultsKey));
	});
var _user$project$SleekView$synthesisAutoSearch = function (model) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(
			A3(
				_user$project$Utils$getWithDefault,
				'Auto-Synthesis',
				{ctor: '[]'},
				model.synthesisResultsDict)),
		0) > 0) ? {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('synthesis-auto-search'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_user$project$SleekView$wrappedSynthesisResultsSelect, model, 'Auto-Synthesis'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	} : {ctor: '[]'};
};
var _user$project$SleekView$synthesisPanel = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('synthesis-panel-wrapper'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'bottom',
							_1: function (_p79) {
								return _user$project$SleekLayout$px(
									function (_) {
										return _.bottom;
									}(_p79));
							}(
								_user$project$SleekLayout$synthesisPanel(model))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'height',
								_1: function (_p80) {
									return _user$project$SleekLayout$px(
										function (_) {
											return _.height;
										}(_p80));
								}(
									_user$project$SleekLayout$synthesisPanel(model))
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('panel outlined synthesis-panel'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dropdown-content synthesis-menu-holder'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_user$project$SleekView$wrappedSynthesisResultsSelect, model, 'Auto-Synthesis'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$Reveal = function (a) {
	return {ctor: 'Reveal', _0: a};
};
var _user$project$SleekView$synthesisHoverMenu = F5(
	function (model, resultsKey, title, onMouseEnter, disabled) {
		var revealDisabled = {
			ctor: '::',
			_0: 'Reorder in List',
			_1: {ctor: '[]'}
		};
		var results = A2(_user$project$SleekView$synthesisResultsSelect, model, resultsKey);
		var max = _elm_lang$core$List$length(results);
		var shownCount = A2(_elm_lang$core$List$member, resultsKey, revealDisabled) ? max : 1;
		var revealInfo = {shown: shownCount, extra: model.extraMenuAmount, max: max};
		var cached = A2(_elm_lang$core$Dict$member, resultsKey, model.synthesisResultsDict);
		return A7(
			_user$project$SleekView$generalHoverMenu,
			cached ? title : title,
			_user$project$SleekView$Reveal(revealInfo),
			cached ? _user$project$InterfaceController$msgNoop : onMouseEnter,
			_user$project$InterfaceController$msgClearExtraMenuAmount,
			_user$project$InterfaceController$msgNoop,
			disabled,
			{
				ctor: '::',
				_0: _user$project$SleekView$wrapSynthesisResultsSelect(
					A2(
						_elm_lang$core$List$take,
						_user$project$SleekView$currentMenuAmount(revealInfo),
						results)),
				_1: {ctor: '[]'}
			});
	});
var _user$project$SleekView$outputToolEntry = F2(
	function (model, tool) {
		var _p81 = function () {
			var _p82 = tool.func;
			if (_p82.ctor === 'Just') {
				return {
					ctor: '_Tuple2',
					_0: !A2(_elm_lang$core$List$all, _user$project$InterfaceModel$predicateSatisfied, tool.reqs),
					_1: _p82._0
				};
			} else {
				return {ctor: '_Tuple2', _0: true, _1: _user$project$InterfaceController$msgNoop};
			}
		}();
		var disabled = _p81._0;
		var action = _p81._1;
		var prettyName = function () {
			var _p83 = tool.shortcut;
			if (_p83.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					tool.name,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' (⌘',
						A2(_elm_lang$core$Basics_ops['++'], _p83._0, ')')));
			} else {
				return tool.name;
			}
		}();
		var _p84 = tool.kind;
		if (_p84.ctor === 'Single') {
			return A3(_user$project$SleekView$disableableTextButton, disabled, prettyName, action);
		} else {
			return A5(_user$project$SleekView$synthesisHoverMenu, model, tool.name, prettyName, action, disabled);
		}
	});
var _user$project$SleekView$menuBar = function (model) {
	var optionsMenu = A2(
		_user$project$SleekView$menu,
		'Options',
		{
			ctor: '::',
			_0: {
				ctor: '::',
				_0: A2(
					_user$project$SleekView$hoverMenu,
					'Auto-Run',
					{
						ctor: '::',
						_0: A3(_user$project$SleekView$disableableTextButton, true, 'Every second', _user$project$InterfaceController$msgNoop),
						_1: {
							ctor: '::',
							_0: A3(_user$project$SleekView$disableableTextButton, true, 'Every 2 seconds', _user$project$InterfaceController$msgNoop),
							_1: {
								ctor: '::',
								_0: A3(_user$project$SleekView$disableableTextButton, true, 'Every 3 seconds', _user$project$InterfaceController$msgNoop),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A3(
						_user$project$SleekView$simpleBooleanButton,
						_user$project$Updatable$extract(model.enableTextEdits),
						'Enable Text Edits',
						_user$project$InterfaceController$msgSetEnableTextEdits),
					_1: {
						ctor: '::',
						_0: A3(_user$project$SleekView$simpleBooleanButton, model.enableDeuceBoxSelection, 'Enable Deuce Box Selection', _user$project$InterfaceController$msgSetEnableDeuceBoxSelection),
						_1: {
							ctor: '::',
							_0: A3(_user$project$SleekView$simpleBooleanButton, model.enableDeuceTextSelection, 'Enable Deuce Text Selection', _user$project$InterfaceController$msgSetEnableDeuceTextSelection),
							_1: {ctor: '[]'}
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: A2(
							_user$project$SleekView$hoverMenu,
							'Code Tools Menu Mode',
							{
								ctor: '::',
								_0: A3(
									_user$project$SleekView$simpleTextRadioButton,
									function () {
										var _p85 = model.codeToolsMenuMode;
										if (_p85.ctor === 'CTAll') {
											return true;
										} else {
											return false;
										}
									}(),
									'All',
									_user$project$InterfaceController$msgSetCodeToolsMenuMode(_user$project$InterfaceModel$CTAll)),
								_1: {
									ctor: '::',
									_0: A3(
										_user$project$SleekView$simpleTextRadioButton,
										function () {
											var _p86 = model.codeToolsMenuMode;
											if (_p86.ctor === 'CTActive') {
												return true;
											} else {
												return false;
											}
										}(),
										'Active',
										_user$project$InterfaceController$msgSetCodeToolsMenuMode(_user$project$InterfaceModel$CTActive)),
									_1: {
										ctor: '::',
										_0: A3(
											_user$project$SleekView$simpleTextRadioButton,
											function () {
												var _p87 = model.codeToolsMenuMode;
												if (_p87.ctor === 'CTDisabled') {
													return true;
												} else {
													return false;
												}
											}(),
											'Disabled',
											_user$project$InterfaceController$msgSetCodeToolsMenuMode(_user$project$InterfaceModel$CTDisabled)),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A2(
								_user$project$SleekView$hoverMenu,
								'Text Selection Mode',
								{
									ctor: '::',
									_0: A3(
										_user$project$SleekView$simpleTextRadioButton,
										function () {
											var _p88 = model.textSelectMode;
											if (_p88.ctor === 'Strict') {
												return true;
											} else {
												return false;
											}
										}(),
										'Strict',
										_user$project$InterfaceController$msgSetTextSelectMode(_user$project$InterfaceModel$Strict)),
									_1: {
										ctor: '::',
										_0: A3(
											_user$project$SleekView$simpleTextRadioButton,
											function () {
												var _p89 = model.textSelectMode;
												if (_p89.ctor === 'Superset') {
													return true;
												} else {
													return false;
												}
											}(),
											'Superset',
											_user$project$InterfaceController$msgSetTextSelectMode(_user$project$InterfaceModel$Superset)),
										_1: {
											ctor: '::',
											_0: A3(
												_user$project$SleekView$simpleTextRadioButton,
												function () {
													var _p90 = model.textSelectMode;
													if (_p90.ctor === 'Subset') {
														return true;
													} else {
														return false;
													}
												}(),
												'Subset',
												_user$project$InterfaceController$msgSetTextSelectMode(_user$project$InterfaceModel$Subset)),
											_1: {
												ctor: '::',
												_0: A3(
													_user$project$SleekView$simpleTextRadioButton,
													function () {
														var _p91 = model.textSelectMode;
														if (_p91.ctor === 'SubsetExtra') {
															return true;
														} else {
															return false;
														}
													}(),
													'SubsetExtra',
													_user$project$InterfaceController$msgSetTextSelectMode(_user$project$InterfaceModel$SubsetExtra)),
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A3(_user$project$SleekView$simpleBooleanButton, model.allowMultipleTargetPositions, 'Allow Multiple Target Positions', _user$project$InterfaceController$msgSetAllowMultipleTargetPositions),
								_1: {ctor: '[]'}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '::',
								_0: A3(_user$project$SleekView$simpleBooleanButton, model.autoSynthesis, 'Automatically Suggest Code Changes', _user$project$InterfaceController$msgSetAutoSynthesis),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$SleekView$hoverMenu,
										'Output Synchronization',
										{
											ctor: '::',
											_0: A3(
												_user$project$SleekView$simpleTextRadioButton,
												_elm_lang$core$Native_Utils.eq(model.liveSyncDelay, false),
												'Live',
												_user$project$InterfaceController$msgSetLiveSyncDelay(false)),
											_1: {
												ctor: '::',
												_0: A3(
													_user$project$SleekView$simpleTextRadioButton,
													_elm_lang$core$Native_Utils.eq(model.liveSyncDelay, true),
													'Delayed',
													_user$project$InterfaceController$msgSetLiveSyncDelay(true)),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$SleekView$hoverMenu,
											'Live Update Heuristics',
											{
												ctor: '::',
												_0: A3(
													_user$project$SleekView$simpleTextRadioButton,
													_elm_lang$core$Native_Utils.eq(model.syncOptions.heuristicsMode, _user$project$Sync$HeuristicsBiased),
													'Biased',
													_user$project$InterfaceController$msgSetHeuristicsBiased),
												_1: {
													ctor: '::',
													_0: A3(
														_user$project$SleekView$simpleTextRadioButton,
														_elm_lang$core$Native_Utils.eq(model.syncOptions.heuristicsMode, _user$project$Sync$HeuristicsNone),
														'None',
														_user$project$InterfaceController$msgSetHeuristicsNone),
													_1: {
														ctor: '::',
														_0: A3(
															_user$project$SleekView$simpleTextRadioButton,
															_elm_lang$core$Native_Utils.eq(model.syncOptions.heuristicsMode, _user$project$Sync$HeuristicsFair),
															'Fair',
															_user$project$InterfaceController$msgSetHeuristicsFair),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: A2(
										_user$project$SleekView$hoverMenu,
										'Syntax',
										{
											ctor: '::',
											_0: A3(
												_user$project$SleekView$simpleTextRadioButton,
												function () {
													var _p92 = model.syntax;
													if (_p92.ctor === 'Elm') {
														return true;
													} else {
														return false;
													}
												}(),
												'Elm',
												_user$project$InterfaceController$msgSetSyntax(_user$project$Syntax$Elm)),
											_1: {
												ctor: '::',
												_0: A3(
													_user$project$SleekView$simpleTextRadioButton,
													function () {
														var _p93 = model.syntax;
														if (_p93.ctor === 'Little') {
															return true;
														} else {
															return false;
														}
													}(),
													'Little',
													_user$project$InterfaceController$msgSetSyntax(_user$project$Syntax$Little)),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
	var viewMenu = A2(
		_user$project$SleekView$menu,
		'View',
		{
			ctor: '::',
			_0: {
				ctor: '::',
				_0: A2(
					_user$project$SleekView$hoverMenu,
					'Font Size',
					{
						ctor: '::',
						_0: A3(
							_user$project$SleekView$simpleTextRadioButton,
							function () {
								var _p94 = model.codeBoxInfo.fontSize;
								if (_p94 === 8) {
									return true;
								} else {
									return false;
								}
							}(),
							'8',
							_user$project$InterfaceController$msgUpdateFontSize(8)),
						_1: {
							ctor: '::',
							_0: A3(
								_user$project$SleekView$simpleTextRadioButton,
								function () {
									var _p95 = model.codeBoxInfo.fontSize;
									if (_p95 === 10) {
										return true;
									} else {
										return false;
									}
								}(),
								'10',
								_user$project$InterfaceController$msgUpdateFontSize(10)),
							_1: {
								ctor: '::',
								_0: A3(
									_user$project$SleekView$simpleTextRadioButton,
									function () {
										var _p96 = model.codeBoxInfo.fontSize;
										if (_p96 === 12) {
											return true;
										} else {
											return false;
										}
									}(),
									'12',
									_user$project$InterfaceController$msgUpdateFontSize(12)),
								_1: {
									ctor: '::',
									_0: A3(
										_user$project$SleekView$simpleTextRadioButton,
										function () {
											var _p97 = model.codeBoxInfo.fontSize;
											if (_p97 === 14) {
												return true;
											} else {
												return false;
											}
										}(),
										'14',
										_user$project$InterfaceController$msgUpdateFontSize(14)),
									_1: {
										ctor: '::',
										_0: A3(
											_user$project$SleekView$simpleTextRadioButton,
											function () {
												var _p98 = model.codeBoxInfo.fontSize;
												if (_p98 === 16) {
													return true;
												} else {
													return false;
												}
											}(),
											'16',
											_user$project$InterfaceController$msgUpdateFontSize(16)),
										_1: {
											ctor: '::',
											_0: A3(
												_user$project$SleekView$simpleTextRadioButton,
												function () {
													var _p99 = model.codeBoxInfo.fontSize;
													if (_p99 === 18) {
														return true;
													} else {
														return false;
													}
												}(),
												'18',
												_user$project$InterfaceController$msgUpdateFontSize(18)),
											_1: {
												ctor: '::',
												_0: A3(
													_user$project$SleekView$simpleTextRadioButton,
													function () {
														var _p100 = model.codeBoxInfo.fontSize;
														if (_p100 === 20) {
															return true;
														} else {
															return false;
														}
													}(),
													'20',
													_user$project$InterfaceController$msgUpdateFontSize(20)),
												_1: {
													ctor: '::',
													_0: A3(
														_user$project$SleekView$simpleTextRadioButton,
														function () {
															var _p101 = model.codeBoxInfo.fontSize;
															if (_p101 === 22) {
																return true;
															} else {
																return false;
															}
														}(),
														'22',
														_user$project$InterfaceController$msgUpdateFontSize(22)),
													_1: {
														ctor: '::',
														_0: A3(
															_user$project$SleekView$simpleTextRadioButton,
															function () {
																var _p102 = model.codeBoxInfo.fontSize;
																if (_p102 === 24) {
																	return true;
																} else {
																	return false;
																}
															}(),
															'24',
															_user$project$InterfaceController$msgUpdateFontSize(24)),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$SleekView$hoverMenu,
						'Color Scheme',
						{
							ctor: '::',
							_0: A3(
								_user$project$SleekView$simpleTextRadioButton,
								function () {
									var _p103 = model.colorScheme;
									if (_p103.ctor === 'Light') {
										return true;
									} else {
										return false;
									}
								}(),
								'Light',
								_user$project$InterfaceController$msgSetColorScheme(_user$project$InterfaceModel$Light)),
							_1: {
								ctor: '::',
								_0: A3(
									_user$project$SleekView$simpleTextRadioButton,
									function () {
										var _p104 = model.colorScheme;
										if (_p104.ctor === 'Dark') {
											return true;
										} else {
											return false;
										}
									}(),
									'Dark',
									_user$project$InterfaceController$msgSetColorScheme(_user$project$InterfaceModel$Dark)),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A3(_user$project$SleekView$disableableTextButton, true, 'Main Layer', _user$project$InterfaceController$msgNoop),
					_1: {
						ctor: '::',
						_0: A3(_user$project$SleekView$disableableTextButton, true, 'Widget Layer', _user$project$InterfaceController$msgNoop),
						_1: {
							ctor: '::',
							_0: A3(_user$project$SleekView$simpleBooleanButton, model.showGhosts, 'Show Widgets', _user$project$InterfaceController$msgSetGhostsShown),
							_1: {
								ctor: '::',
								_0: A3(_user$project$SleekView$simpleBooleanButton, model.showPreludeOffsets, 'Show Offset Widgets from Prelude', _user$project$InterfaceController$msgSetPreludeOffsetsShown),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$SleekView$hoverMenu,
										'Output Type',
										{
											ctor: '::',
											_0: A3(
												_user$project$SleekView$simpleTextRadioButton,
												function () {
													var _p105 = model.outputMode;
													if (_p105.ctor === 'Live') {
														return true;
													} else {
														return false;
													}
												}(),
												'Graphics',
												_user$project$InterfaceController$msgSetOutputLive),
											_1: {
												ctor: '::',
												_0: A3(
													_user$project$SleekView$simpleTextRadioButton,
													function () {
														var _p106 = model.outputMode;
														if (_p106.ctor === 'Print') {
															return true;
														} else {
															return false;
														}
													}(),
													'Text',
													_user$project$InterfaceController$msgSetOutputPrint),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: A2(_user$project$SleekView$simpleTextButton, 'Reset Interface Layout', _user$project$InterfaceController$msgResetInterfaceLayout),
						_1: {ctor: '[]'}
					},
					_1: {ctor: '[]'}
				}
			}
		});
	var outputToolsMenu = A2(
		_user$project$SleekView$menu,
		'Output Tools',
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$List$map(
				_user$project$SleekView$outputToolEntry(model)),
			_user$project$OutputTools$tools(model)));
	var maybeCodeToolsMenu = function () {
		var maybeEntry = function () {
			var _p107 = model.codeToolsMenuMode;
			switch (_p107.ctor) {
				case 'CTAll':
					return _elm_lang$core$Maybe$Just(
						_user$project$SleekView$editCodeEntry(model));
				case 'CTActive':
					return _elm_lang$core$Maybe$Just(
						_user$project$SleekView$deuceHoverMenu(model));
				default:
					return _elm_lang$core$Maybe$Nothing;
			}
		}();
		var _p108 = maybeEntry;
		if (_p108.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(
					_user$project$SleekView$menu,
					'Code Tools',
					A2(
						_elm_lang$core$List$map,
						_user$project$Utils$mapi1(_p108._0),
						model.deuceToolsAndResults)),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	}();
	var examplesMenu = function () {
		var _p109 = _user$project$ExamplesGenerated$uist19Category;
		var uist19Examples = _p109._1;
		return A2(
			_user$project$SleekView$menu,
			'Examples',
			{
				ctor: '::',
				_0: A2(
					_elm_lang$core$List$map,
					function (_p110) {
						var _p111 = _p110;
						var _p112 = _p111._0;
						return A2(
							_user$project$SleekView$simpleTextButton,
							_p112,
							A2(_user$project$InterfaceController$msgAskNew, _p112, model.needsSave));
					},
					uist19Examples),
				_1: {ctor: '[]'}
			});
	}();
	var fileMenu = A2(
		_user$project$SleekView$menu,
		'File',
		{
			ctor: '::',
			_0: {
				ctor: '::',
				_0: A2(
					_user$project$SleekView$simpleTextButton,
					'New',
					A2(_user$project$InterfaceController$msgAskNew, _user$project$InterfaceModel$blankTemplate, model.needsSave)),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$SleekView$simpleTextButton,
						'New From Template...',
						_user$project$InterfaceController$msgOpenDialogBox(_user$project$InterfaceModel$New)),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$SleekView$simpleTextButton,
							'Save As...',
							_user$project$InterfaceController$msgOpenDialogBox(_user$project$InterfaceModel$SaveAs)),
						_1: {
							ctor: '::',
							_0: A3(_user$project$SleekView$disableableTextButton, !model.needsSave, 'Save', _user$project$InterfaceController$msgSave),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A2(
						_user$project$SleekView$simpleTextButton,
						'Open...',
						_user$project$InterfaceController$msgOpenDialogBox(_user$project$InterfaceModel$Open)),
					_1: {ctor: '[]'}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: A2(_user$project$SleekView$simpleTextButton, 'Export Code', _user$project$InterfaceController$msgExportCode),
						_1: {
							ctor: '::',
							_0: A2(_user$project$SleekView$simpleTextButton, 'Export SVG', _user$project$InterfaceController$msgExportSvg),
							_1: {ctor: '[]'}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A2(
								_user$project$SleekView$simpleTextButton,
								'Import Code...',
								_user$project$InterfaceController$msgOpenDialogBox(_user$project$InterfaceModel$ImportCode)),
							_1: {
								ctor: '::',
								_0: A3(_user$project$SleekView$disableableTextButton, true, 'Import SVG', _user$project$InterfaceController$msgNoop),
								_1: {ctor: '[]'}
							}
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
	var snsMenu = A2(
		_user$project$SleekView$menu,
		'Sketch-n-Sketch',
		{
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _user$project$SleekView$simpleHtmlTextButton(
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href('https://github.com/ravichugh/sketch-n-sketch/blob/master/README.md'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$target('_blank'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Syntax Guide'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _user$project$SleekView$simpleHtmlTextButton(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('https://github.com/ravichugh/sketch-n-sketch/blob/master/examples/prelude.little'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$target('_blank'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Little Standard Library (Prelude)'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$SleekView$simpleHtmlTextButton(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('http://ravichugh.github.io/sketch-n-sketch/'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$target('_blank'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('About Sketch-n-Sketch'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A3(_user$project$SleekView$disableableTextButton, true, _user$project$Config$params.strVersion, _user$project$InterfaceController$msgNoop),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			_1: {ctor: '[]'}
		});
	var logo = A2(
		_elm_lang$html$Html$img,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('logo-image'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src(
					function () {
						var _p113 = model.colorScheme;
						if (_p113.ctor === 'Light') {
							return 'img/sketch-n-sketch-logo.png';
						} else {
							return 'img/light_logo.svg';
						}
					}()),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$width(20),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$height(20),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
	var activeFlag = model.viewState.menuActive ? ' active' : '';
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('menu-bar'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'height',
							_1: function (_p114) {
								return _user$project$SleekLayout$px(
									function (_) {
										return _.height;
									}(_p114));
							}(_user$project$SleekLayout$menuBar)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'borderBottomWidth',
								_1: function (_p115) {
									return _user$project$SleekLayout$px(
										function (_) {
											return _.borderWidth;
										}(_p115));
								}(_user$project$SleekLayout$menuBar)
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(
						A2(_elm_lang$core$Basics_ops['++'], 'main-bar', activeFlag)),
					_1: {ctor: '[]'}
				},
				_elm_lang$core$List$concat(
					{
						ctor: '::',
						_0: {
							ctor: '::',
							_0: logo,
							_1: {ctor: '[]'}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '::',
								_0: snsMenu,
								_1: {ctor: '[]'}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: fileMenu,
									_1: {ctor: '[]'}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '::',
										_0: examplesMenu,
										_1: {ctor: '[]'}
									},
									_1: {
										ctor: '::',
										_0: maybeCodeToolsMenu,
										_1: {
											ctor: '::',
											_0: {
												ctor: '::',
												_0: outputToolsMenu,
												_1: {ctor: '[]'}
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '::',
													_0: viewMenu,
													_1: {ctor: '[]'}
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '::',
														_0: optionsMenu,
														_1: {ctor: '[]'}
													},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					})),
			_1: {ctor: '[]'}
		});
};
var _user$project$SleekView$autoOutputToolsPopupPanel = function (model) {
	return _user$project$SleekView$popupPanel(
		{
			pos: model.popupPanelPositions.autoOutputTools,
			disabled: !_user$project$InterfaceModel$autoOutputToolsPopupPanelShown(model),
			dragHandler: _user$project$InterfaceController$msgDragAutoOutputToolsPopupPanel,
			$class: 'auto-output-tools',
			title: {
				ctor: '::',
				_0: _elm_lang$html$Html$text('Output Tools'),
				_1: {ctor: '[]'}
			},
			content: {
				ctor: '::',
				_0: function () {
					var activeTools = A2(
						_elm_lang$core$List$concatMap,
						_elm_lang$core$List$filter(
							function (_p116) {
								return A2(
									_elm_lang$core$List$all,
									_user$project$InterfaceModel$predicateSatisfied,
									function (_) {
										return _.reqs;
									}(_p116));
							}),
						_user$project$OutputTools$tools(model));
					var _p117 = A2(
						_elm_lang$core$List$partition,
						function (_p118) {
							return A2(
								_elm_lang$core$String$startsWith,
								'Repeat ',
								function (_) {
									return _.name;
								}(_p118));
						},
						activeTools);
					var repetitionTools = _p117._0;
					var otherTools = _p117._1;
					var menus = function () {
						if (_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$List$length(repetitionTools),
							2) > -1) {
							var repetitionMenu = A7(
								_user$project$SleekView$generalHoverMenu,
								'Repeat...',
								_user$project$SleekView$RevealAll,
								_user$project$InterfaceController$msgNoop,
								_user$project$InterfaceController$msgNoop,
								_user$project$InterfaceController$msgNoop,
								false,
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('repeat-tools-submenu'),
											_1: {ctor: '[]'}
										},
										A2(
											_elm_lang$core$List$map,
											_user$project$SleekView$outputToolEntry(model),
											repetitionTools)),
									_1: {ctor: '[]'}
								});
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$List$map,
									_user$project$SleekView$outputToolEntry(model),
									otherTools),
								{
									ctor: '::',
									_0: repetitionMenu,
									_1: {ctor: '[]'}
								});
						} else {
							return A2(
								_elm_lang$core$List$map,
								_user$project$SleekView$outputToolEntry(model),
								A2(_elm_lang$core$Basics_ops['++'], otherTools, repetitionTools));
						}
					}();
					return _elm_lang$core$List$isEmpty(activeTools) ? _user$project$SleekView$noAvailableTools : A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						menus);
				}(),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SleekView$popupPanels = function (model) {
	return {
		ctor: '::',
		_0: _user$project$SleekView$deucePopupPanel(model),
		_1: {
			ctor: '::',
			_0: _user$project$SleekView$editCodePopupPanel(model),
			_1: {
				ctor: '::',
				_0: _user$project$SleekView$autoOutputToolsPopupPanel(model),
				_1: {ctor: '[]'}
			}
		}
	};
};
var _user$project$SleekView$Unselected = {ctor: 'Unselected'};
var _user$project$SleekView$Selected = {ctor: 'Selected'};
var _user$project$SleekView$toolButton = F2(
	function (model, tool) {
		var btnKind = _elm_lang$core$Native_Utils.eq(model.tool, tool) ? _user$project$SleekView$Selected : _user$project$SleekView$Unselected;
		var cap = function () {
			var _p119 = tool;
			switch (_p119.ctor) {
				case 'Cursor':
					return 'Cursor';
				case 'PointOrOffset':
					return 'Point or Offset';
				case 'Poly':
					return 'Polygon';
				case 'Path':
					return 'Path';
				case 'Text':
					return 'Text';
				case 'HelperLine':
					return '(Rule)';
				default:
					return _p119._0;
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('tool'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A6(
					_user$project$SleekView$iconButton,
					model,
					cap,
					_elm_lang$core$Maybe$Nothing,
					A2(
						_user$project$InterfaceModel$Msg,
						cap,
						function (m) {
							return _elm_lang$core$Native_Utils.update(
								m,
								{mouseMode: _user$project$InterfaceModel$MouseNothing, tool: tool});
						}),
					btnKind,
					false),
				_1: {ctor: '[]'}
			});
	});
var _user$project$SleekView$functionTools = function (model) {
	return A2(
		_elm_lang$core$List$concatMap,
		function (_p120) {
			var _p121 = _p120;
			var _p122 = _p121._0;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Native_Utils.eq(_p122, 'vec2DPlus') ? {
					ctor: '::',
					_0: _user$project$SleekView$toolHeader('Standard Library Tools'),
					_1: {ctor: '[]'}
				} : {ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tool'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A6(
								_user$project$SleekView$iconButton,
								model,
								_p122,
								_elm_lang$core$Maybe$Just(
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p122,
										A2(
											_elm_lang$core$Basics_ops['++'],
											' : ',
											A2(_user$project$Syntax$typeWithRolesUnparser, _user$project$Syntax$Elm, _p121._1)))),
								A2(
									_user$project$InterfaceModel$Msg,
									A2(_elm_lang$core$Basics_ops['++'], _p122, ' Function Tool'),
									function (m) {
										return _elm_lang$core$Native_Utils.update(
											m,
											{
												tool: _user$project$InterfaceModel$Function(_p122)
											});
									}),
								_elm_lang$core$Native_Utils.eq(
									model.tool,
									_user$project$InterfaceModel$Function(_p122)) ? _user$project$SleekView$Selected : _user$project$SleekView$Unselected,
								false),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		},
		model.drawableFunctions);
};
var _user$project$SleekView$toolPanel = function (model) {
	var toolSeparator = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('tool-separator'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('panel outlined tool-panel'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'width',
							_1: function (_p123) {
								return _user$project$SleekLayout$px(
									function (_) {
										return _.width;
									}(_p123));
							}(_user$project$SleekLayout$toolPanel)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'maxHeight',
								_1: function (_p124) {
									return _user$project$SleekLayout$px(
										A2(
											F2(
												function (x, y) {
													return x + y;
												}),
											35,
											function (_) {
												return _.height;
											}(_p124)));
								}(
									_user$project$SleekLayout$outputCanvas(model))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'right',
									_1: function (_p125) {
										return _user$project$SleekLayout$px(
											function (_) {
												return _.right;
											}(_p125));
									}(_user$project$SleekLayout$toolPanel)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'marginLeft',
										_1: function (_p126) {
											return _user$project$SleekLayout$px(
												function (_) {
													return _.marginLeft;
												}(_p126));
										}(_user$project$SleekLayout$toolPanel)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _user$project$SleekView$toolHeader('Built-In Tools'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$SleekView$toolButton, model, _user$project$InterfaceModel$Cursor),
					_1: {
						ctor: '::',
						_0: A2(_user$project$SleekView$toolButton, model, _user$project$InterfaceModel$PointOrOffset),
						_1: {
							ctor: '::',
							_0: A2(_user$project$SleekView$toolButton, model, _user$project$InterfaceModel$Poly),
							_1: {
								ctor: '::',
								_0: _user$project$SleekView$toolHeader('User-Defined Tools'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			_user$project$SleekView$functionTools(model)));
};
var _user$project$SleekView$workArea = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('work-area'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'margin',
							_1: _user$project$SleekLayout$px(
								function (_) {
									return _.width;
								}(_user$project$SleekLayout$spacing))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'top',
								_1: _user$project$SleekLayout$px(
									function (_) {
										return _.height;
									}(_user$project$SleekLayout$menuBar))
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('main-panels'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$SleekView$codePanel(model),
					_1: {
						ctor: '::',
						_0: _user$project$SleekView$mainResizer(model),
						_1: {
							ctor: '::',
							_0: _user$project$SleekView$outputPanel(model),
							_1: {
								ctor: '::',
								_0: _user$project$SleekView$toolPanel(model),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$SleekView$synthesisPanel(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SleekView$view = function (model) {
	var hasDialogFlag = _user$project$InterfaceModel$anyDialogShown(model) ? ' has-dialogs' : '';
	var needsRunFlag = _user$project$InterfaceModel$needsRun(model) ? ' needs-run' : '';
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'main',
					A2(_elm_lang$core$Basics_ops['++'], needsRunFlag, hasDialogFlag))),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(_user$project$InterfaceController$msgHideMenu),
				_1: {
					ctor: '::',
					_0: _user$project$HtmlUtils$onRightClick(_user$project$InterfaceController$msgNoop),
					_1: {ctor: '[]'}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _user$project$SleekView$onbeforeunloadDataElement(model),
				_1: {
					ctor: '::',
					_0: _user$project$SleekView$menuBar(model),
					_1: {
						ctor: '::',
						_0: _user$project$SleekView$workArea(model),
						_1: {
							ctor: '::',
							_0: _user$project$SleekView$deuceOverlay(model),
							_1: {
								ctor: '::',
								_0: _user$project$SleekView$deuceRightClickMenu(model),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$SleekView$popupPanels(model),
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _user$project$SleekView$subtleBackground,
						_1: {ctor: '[]'}
					},
					_user$project$SleekView$dialogBoxes(model)))));
};
var _user$project$SleekView$Regular = {ctor: 'Regular'};

var _user$project$WindowOnLoad$windowOnLoad = _elm_lang$core$Native_Platform.incomingPort(
	'windowOnLoad',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));

var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$WindowOnLoad$windowOnLoad(
				function (_p0) {
					return _user$project$InterfaceModel$WindowOnLoad;
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$window$Window$resizes(_user$project$InterfaceController$msgWindowDimensions),
				_1: {
					ctor: '::',
					_0: _elm_lang$page_visibility$PageVisibility$visibilityChanges(_user$project$InterfaceController$msgVisibilityChange),
					_1: {
						ctor: '::',
						_0: _elm_lang$mouse$Mouse$downs(
							_elm_lang$core$Basics$always(
								_user$project$InterfaceController$msgMouseIsDown(true))),
						_1: {
							ctor: '::',
							_0: _elm_lang$mouse$Mouse$ups(
								_elm_lang$core$Basics$always(
									_user$project$InterfaceController$msgMouseIsDown(false))),
							_1: {
								ctor: '::',
								_0: _elm_lang$mouse$Mouse$moves(_user$project$InterfaceController$msgMousePosition),
								_1: {
									ctor: '::',
									_0: _elm_lang$keyboard$Keyboard$presses(_user$project$InterfaceController$msgKeyPress),
									_1: {
										ctor: '::',
										_0: _elm_lang$keyboard$Keyboard$downs(_user$project$InterfaceController$msgKeyDown),
										_1: {
											ctor: '::',
											_0: _elm_lang$keyboard$Keyboard$ups(_user$project$InterfaceController$msgKeyUp),
											_1: {
												ctor: '::',
												_0: _user$project$AceCodeBox$receiveEditorState(_user$project$InterfaceController$msgAceUpdate),
												_1: {
													ctor: '::',
													_0: _user$project$AceCodeBox$userHasTyped(
														_elm_lang$core$Basics$always(_user$project$InterfaceController$msgUserHasTyped)),
													_1: {
														ctor: '::',
														_0: _user$project$OutputCanvas$receiveOutputCanvasState(_user$project$InterfaceController$msgOutputCanvasUpdate),
														_1: {
															ctor: '::',
															_0: _user$project$AnimationLoop$receiveFrame(_user$project$InterfaceController$msgTickDelta),
															_1: {
																ctor: '::',
																_0: A2(_user$project$FileHandler$receiveMessage, _user$project$InterfaceController$fileMessageHandler, _user$project$InterfaceController$fileMessageError),
																_1: {
																	ctor: '::',
																	_0: _user$project$DeucePopupPanelInfo$receiveDeucePopupPanelInfo(_user$project$InterfaceController$msgReceiveDeucePopupPanelInfo),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$onLoadCmd = _elm_lang$core$Platform_Cmd$batch(
	{
		ctor: '::',
		_0: A2(_elm_lang$core$Task$perform, _user$project$InterfaceController$msgWindowDimensions, _elm_lang$window$Window$size),
		_1: {
			ctor: '::',
			_0: _user$project$AceCodeBox$initializeAndDisplay(_user$project$InterfaceModel$initModel),
			_1: {
				ctor: '::',
				_0: _user$project$OutputCanvas$initialize,
				_1: {
					ctor: '::',
					_0: _user$project$FileHandler$sendMessage(_user$project$FileHandler$RequestFileIndex),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$batch(
							A2(
								_elm_lang$core$List$map,
								function (_p1) {
									return _user$project$FileHandler$sendMessage(
										_user$project$FileHandler$RequestIcon(_p1));
								},
								_user$project$InterfaceModel$iconNames)),
						_1: {
							ctor: '::',
							_0: _user$project$ColorScheme$updateColorScheme(_user$project$InterfaceModel$initColorScheme),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$core$Task$perform,
									_user$project$InterfaceController$msgNew,
									_elm_lang$core$Task$succeed(_user$project$InterfaceModel$initTemplate)),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		if (_p2.ctor === 'WindowOnLoad') {
			return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$onLoadCmd};
		} else {
			return A2(_user$project$InterfaceController$update, msg, model);
		}
	});
var _user$project$Main$view = _user$project$SleekView$view;
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$InterfaceModel$initModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();

var Elm = {};
Elm['Main'] = Elm['Main'] || {};
if (typeof _user$project$Main$main !== 'undefined') {
    _user$project$Main$main(Elm['Main'], 'Main', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

